{
  "version": 3,
  "sources": ["../../packages/slides/src/controllers/config.schema.ts", "../../packages/slides/src/slides-plugin.ts", "../../packages/slides/src/views/render/adaptor.ts", "../../packages/slides/src/views/render/adaptors/docs-adaptor.ts", "../../packages/slides/src/views/render/adaptors/image-adaptor.ts", "../../packages/slides/src/views/render/adaptors/rich-text-adaptor.ts", "../../packages/slides/src/views/render/adaptors/shape-adaptor.ts", "../../packages/slides/src/views/render/object-provider.ts", "../../packages/slides/src/views/render/adaptors/slide-adaptor.ts", "../../packages/slides/src/views/render/adaptors/spreadsheet-adaptor.ts", "../../packages/slides-ui/src/controllers/slide.render-controller.ts", "../../packages/slides-ui/src/controllers/canvas-view.ts", "../../packages/slides-ui/src/commands/operations/activate.operation.ts", "../../packages/slides-ui/src/commands/operations/append-slide.operation.ts", "../../packages/slides-ui/src/commands/operations/delete-element.operation.ts", "../../packages/slides-ui/src/commands/operations/insert-image.operation.ts", "../../packages/slides-ui/src/commands/operations/update-element.operation.ts", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/slides-ui/src/components/panels/index.module.less", "../../packages/slides-ui/src/components/panels/ArrangePanel.tsx", "../../packages/slides-ui/src/components/panels/FillPanel.tsx", "../../packages/slides-ui/src/components/panels/TransformPanel.tsx", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/slides-ui/src/components/sidebar/index.module.less", "../../packages/slides-ui/src/components/sidebar/Sidebar.tsx", "../../packages/slides-ui/src/commands/operations/insert-shape.operation.ts", "../../packages/slides-ui/src/commands/operations/insert-text.operation.ts", "../../packages/slides-ui/src/commands/operations/set-thumb.operation.ts", "../../packages/slides-ui/src/commands/operations/text-edit.operation.ts", "../../packages/slides-ui/src/components/image-popup-menu/component-name.ts", "../../packages/slides-ui/src/components/image-popup-menu/ImagePopupMenu.tsx", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/slides-ui/src/components/image-popup-menu/index.module.less", "../../packages/slides-ui/src/components/slide-bar/SlideBar.tsx", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/slides-ui/src/components/slide-bar/index.module.less", "../../packages/slides-ui/src/views/editor-container/EditorContainer.tsx", "../../packages/slides-ui/src/const.ts", "../../packages/slides-ui/src/services/slide-editor-manager.service.ts", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/slides-ui/src/views/editor-container/index.module.less", "../../packages/slides-ui/src/controllers/image.menu.ts", "../../packages/slides-ui/src/controllers/shape.menu.ts", "../../packages/slides-ui/src/controllers/text.menu.ts", "../../packages/slides-ui/src/controllers/menu.schema.ts", "../../packages/slides-ui/src/controllers/shortcuts/utils.ts", "../../packages/slides-ui/src/controllers/shortcuts/editor.shortcuts.ts", "../../packages/slides-ui/src/controllers/slide-ui.controller.ts", "../../packages/slides-ui/src/controllers/config.schema.ts", "../../packages/slides-ui/src/services/slide-popup-manager.service.ts", "../../packages/slides-ui/src/controllers/popup-menu.controller.ts", "../../packages/slides-ui/src/services/slide-editor-bridge.service.ts", "../../packages/slides-ui/src/controllers/slide-editing.render-controller.ts", "../../packages/slides-ui/src/controllers/slide-editor-bridge.render-controller.ts", "../../packages/slides-ui/src/services/slide-render.service.ts", "../../packages/slides-ui/src/slides-ui-plugin.ts"],
  "sourcesContent": ["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const SLIDES_PLUGIN_CONFIG_KEY = 'slides.config';\n\nexport const configSymbol = Symbol(SLIDES_PLUGIN_CONFIG_KEY);\n\nexport interface IUniverSlidesConfig {\n}\n\nexport const defaultPluginConfig: IUniverSlidesConfig = {};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport type { Engine } from '@univerjs/engine-render';\nimport { IConfigService, Inject, Injector, merge, Plugin, UniverInstanceType } from '@univerjs/core';\nimport { IRenderingEngine, IRenderManagerService } from '@univerjs/engine-render';\nimport { defaultPluginConfig, SLIDES_PLUGIN_CONFIG_KEY } from './controllers/config.schema';\n// import { DocSelectionManagerService } from '@univerjs/docs';\n// import { CanvasView } from './views/render';\n\nexport interface IUniverSlidesConfig {}\n\nconst DEFAULT_SLIDE_PLUGIN_DATA = {};\n\nconst PLUGIN_NAME = 'slides';\n\nexport class UniverSlidesPlugin extends Plugin {\n    static override pluginName = PLUGIN_NAME;\n    static override type = UniverInstanceType.UNIVER_SLIDE;\n\n    private _canvasEngine: Engine | null = null;\n\n    // private _canvasView: CanvasView | null = null;\n\n    constructor(\n        private readonly _config: Partial<IUniverSlidesConfig> = defaultPluginConfig,\n        @Inject(Injector) override readonly _injector: Injector,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService,\n        @IConfigService private readonly _configService: IConfigService\n    ) {\n        super();\n\n        // Manage the plugin configuration.\n        const { ...rest } = merge(\n            {},\n            defaultPluginConfig,\n            this._config\n        );\n        this._configService.setConfig(SLIDES_PLUGIN_CONFIG_KEY, rest);\n\n        this._initializeDependencies(this._injector);\n    }\n\n    initialize(): void {\n        this.initCanvasEngine();\n    }\n\n    override onReady(): void {\n\n    }\n\n    getConfig() {\n        return this._config;\n    }\n\n    initCanvasEngine() {\n        this._canvasEngine = this._injector.get(IRenderingEngine);\n    }\n\n    override onRendered(): void {\n        this.initialize();\n    }\n\n    getCanvasEngine() {\n        return this._canvasEngine;\n    }\n\n    private _initializeDependencies(slideInjector: Injector) {\n        const dependencies: Dependency[] = [\n            // [CanvasView],\n            // [DocSelectionManagerService],\n        ];\n\n        dependencies.forEach((d) => {\n            slideInjector.add(d);\n        });\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Injector, IPageElement, Nullable, PageElementType } from '@univerjs/core';\nimport { Registry } from '@univerjs/core';\nimport type { BaseObject, Scene } from '@univerjs/engine-render';\n\nexport abstract class ObjectAdaptor {\n    zIndex = 0;\n\n    viewKey: PageElementType | null = null;\n\n    check(type: PageElementType) {\n        if (type !== this.viewKey) {\n            return;\n        }\n        return this;\n    }\n\n    abstract convert(pageElement: IPageElement, mainScene: Scene): Nullable<BaseObject>;\n\n    create(injector: Injector): void {\n        // FIXME: should not be empty\n        // empty\n    }\n}\n\nexport const CanvasObjectProviderRegistry = Registry.create();\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentDataModel, Inject, LocaleService, PageElementType } from '@univerjs/core';\nimport {\n    Documents,\n    DocumentSkeleton,\n    DocumentViewModel,\n    Image,\n    Liquid,\n    PageLayoutType,\n    // Rect,\n    Scene,\n    SceneViewer,\n    ScrollBar,\n    Viewport,\n} from '@univerjs/engine-render';\nimport type { EventState, Injector, IPageElement } from '@univerjs/core';\nimport type { BaseObject, IDocumentSkeletonDrawing, IPageRenderConfig, IWheelEvent } from '@univerjs/engine-render';\n\nimport { CanvasObjectProviderRegistry, ObjectAdaptor } from '../adaptor';\n\nexport enum DOCS_VIEW_KEY {\n    MAIN = '__DocsRender__',\n    SCENE_VIEWER = '__DocsViewer__',\n    SCENE = '__DocsScene__',\n    VIEWPORT = '__DocsViewPort_',\n}\n\nexport class DocsAdaptor extends ObjectAdaptor {\n    override zIndex = 5;\n\n    override viewKey = PageElementType.DOCUMENT;\n\n    private _liquid = new Liquid();\n\n    constructor(@Inject(LocaleService) private readonly _localeService: LocaleService) {\n        super();\n    }\n\n    override check(type: PageElementType) {\n        if (type !== this.viewKey) {\n            return;\n        }\n        return this;\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    override convert(pageElement: IPageElement, mainScene: Scene) {\n        const {\n            id,\n            zIndex,\n            left = 0,\n            top = 0,\n            width,\n            height,\n            angle,\n            scaleX,\n            scaleY,\n            skewX,\n            skewY,\n            flipX,\n            flipY,\n            title,\n            description,\n            document: documentData,\n        } = pageElement;\n        if (documentData == null) {\n            return;\n        }\n\n        const docDataModel = new DocumentDataModel(documentData);\n        const docViewModel = new DocumentViewModel(docDataModel);\n        const documentSkeleton = DocumentSkeleton.create(docViewModel, this._localeService);\n\n        const documents = new Documents(DOCS_VIEW_KEY.MAIN, documentSkeleton);\n\n        documentSkeleton.calculate();\n\n        const sv = new SceneViewer(DOCS_VIEW_KEY.SCENE_VIEWER + id, {\n            top,\n            left,\n            width,\n            height,\n            zIndex,\n            angle,\n            scaleX,\n            scaleY,\n            skewX,\n            skewY,\n            flipX,\n            flipY,\n        });\n        const scene = new Scene(DOCS_VIEW_KEY.SCENE + id, sv);\n\n        const viewMain = new Viewport(DOCS_VIEW_KEY.VIEWPORT + id, scene, {\n            left: 0,\n            top: 0,\n            bottom: 0,\n            right: 0,\n            explicitViewportWidthSet: false,\n            explicitViewportHeightSet: false,\n            isWheelPreventDefaultX: true,\n        });\n\n        scene.attachControl();\n\n        scene.onMouseWheel$.subscribeEvent((evt: unknown, state: EventState) => {\n            const e = evt as IWheelEvent;\n            if (e.ctrlKey) {\n                const deltaFactor = Math.abs(e.deltaX);\n                let scrollNum = deltaFactor < 40 ? 0.2 : deltaFactor < 80 ? 0.4 : 0.2;\n                scrollNum *= e.deltaY > 0 ? -1 : 1;\n                if (scene.scaleX < 1) {\n                    scrollNum /= 2;\n                }\n\n                if (scene.scaleX + scrollNum > 4) {\n                    scene.scale(4, 4);\n                } else if (scene.scaleX + scrollNum < 0.1) {\n                    scene.scale(0.1, 0.1);\n                } else {\n                    const value = e.deltaY > 0 ? 0.1 : -0.1;\n                    // scene.scaleBy(scrollNum, scrollNum);\n                    e.preventDefault();\n                }\n            } else {\n                viewMain.onMouseWheel(e, state);\n            }\n        });\n\n        const scrollbar = new ScrollBar(viewMain, {\n            mainScene,\n        });\n\n        scene.addObject(documents);\n\n        // documents.calculatePagePosition();\n\n        // documents.enableEditor();\n\n        const size = documentSkeleton.getActualSize();\n\n        documents.resize(size.actualWidth, size.actualHeight);\n\n        scene.resize(size.actualWidth, size.actualHeight + 200);\n\n        const pageSize = documents.getSkeleton()?.getPageSize();\n\n        documents.pageRender$.subscribe((config: IPageRenderConfig) => {\n            const { page, pageLeft, pageTop, ctx } = config;\n            const { width, height, marginBottom, marginLeft, marginRight, marginTop } = page;\n            ctx.save();\n            ctx.translate(pageLeft - 0.5, pageTop - 0.5);\n            // Rect.drawWith(ctx, {\n            //     width: pageSize?.width || width,\n            //     height: pageSize?.height || height,\n            //     strokeWidth: 1,\n            //     stroke: 'rgba(198,198,198, 1)',\n            //     fill: 'rgba(255,255,255, 1)',\n            //     zIndex: 3,\n            // });\n            ctx.restore();\n        });\n\n        const { left: docsLeft, top: docsTop } = documents;\n\n        const skeletonData = documentSkeleton.getSkeletonData();\n\n        if (skeletonData == null) {\n            return;\n        }\n\n        const { pages } = skeletonData;\n        const objectList: BaseObject[] = [];\n        const pageMarginCache = new Map<string, { marginLeft: number; marginTop: number }>();\n\n        this._recalculateSizeBySkeleton(documents, scene, documentSkeleton);\n\n        for (let i = 0, len = pages.length; i < len; i++) {\n            const page = pages[i];\n            const { skeDrawings, marginLeft, marginTop, pageWidth, pageHeight } = page;\n\n            // cumPageLeft + = pageWidth + documents.pageMarginLeft;\n\n            this._liquid.translatePagePadding(page);\n\n            skeDrawings.forEach((drawing: IDocumentSkeletonDrawing) => {\n                const { aLeft, aTop, height, width, drawingOrigin } = drawing;\n\n                const { docTransform } = drawingOrigin;\n\n                const rect = new Image(drawing.drawingId, {\n                    // url: docTransform.imageProperties?.contentUrl || '',\n                    left: aLeft + docsLeft + this._liquid.x,\n                    top: aTop + docsTop + this._liquid.y,\n                    width,\n                    height,\n                    zIndex: 11,\n                });\n\n                pageMarginCache.set(drawing.drawingId, {\n                    marginLeft: this._liquid.x,\n                    marginTop: this._liquid.y,\n                });\n\n                objectList.push(rect);\n            });\n\n            this._liquid.translatePage(\n                page,\n                documents.pageLayoutType,\n                documents.pageMarginLeft,\n                documents.pageMarginTop\n            );\n        }\n\n        scene.addObjects(objectList);\n        objectList.forEach((object) => {\n            scene.attachTransformerTo(object);\n        });\n\n        scene.getTransformer()?.changing$.subscribe((state) => {\n            const { objects } = state;\n\n            objects.forEach((object) => {\n                const { oKey, left, top, height, width } = object;\n                const cache = pageMarginCache.get(oKey);\n                const marginLeft = cache?.marginLeft || 0;\n                const marginTop = cache?.marginTop || 0;\n\n                // console.log('onChangingObservable', top, docsTop, marginTop, top - docsTop - marginTop);\n\n                documentSkeleton\n                    ?.getViewModel()\n                    .getDataModel()\n                    .updateDrawing(oKey, {\n                        left: left - docsLeft - marginLeft,\n                        top: top - docsTop - marginTop,\n                        height,\n                        width,\n                    });\n            });\n\n            documentSkeleton?.calculate();\n        });\n        this._calculatePagePosition(documents, scene, viewMain);\n\n        return sv;\n    }\n\n    private _recalculateSizeBySkeleton(docsComponent: Documents, scene: Scene, skeleton: DocumentSkeleton) {\n        const pages = skeleton.getSkeletonData()?.pages;\n\n        if (pages == null) {\n            return;\n        }\n\n        let width = 0;\n        let height = 0;\n\n        for (let i = 0, len = pages.length; i < len; i++) {\n            const page = pages[i];\n            const { pageWidth, pageHeight } = page;\n\n            if (docsComponent.pageLayoutType === PageLayoutType.VERTICAL) {\n                height += pageHeight;\n\n                height += docsComponent.pageMarginTop;\n\n                if (i === len - 1) {\n                    height += docsComponent.pageMarginTop;\n                }\n\n                width = Math.max(width, pageWidth);\n            } else if (docsComponent.pageLayoutType === PageLayoutType.HORIZONTAL) {\n                width += pageWidth;\n\n                if (i !== len - 1) {\n                    width += docsComponent.pageMarginLeft;\n                }\n                height = Math.max(height, pageHeight);\n            }\n        }\n\n        docsComponent.resize(width, height);\n\n        scene.resize(width, height);\n    }\n\n    private _calculatePagePosition(docsComponent: Documents, scene: Scene, viewport: Viewport, zoomRatio: number = 1) {\n        const parent = scene?.getParent();\n\n        const { width: docsWidth, height: docsHeight, pageMarginLeft, pageMarginTop } = docsComponent;\n        if (parent == null || docsWidth === Number.POSITIVE_INFINITY || docsHeight === Number.POSITIVE_INFINITY) {\n            return;\n        }\n        const { width: engineWidth, height: engineHeight } = parent;\n        let docsLeft = 0;\n        let docsTop = 0;\n\n        let sceneWidth = 0;\n\n        let sceneHeight = 0;\n\n        let scrollToX = Number.POSITIVE_INFINITY;\n\n        if (engineWidth > (docsWidth + pageMarginLeft * 2) * zoomRatio) {\n            docsLeft = engineWidth / 2 - (docsWidth * zoomRatio) / 2;\n            docsLeft /= zoomRatio;\n            sceneWidth = (engineWidth - pageMarginLeft * 2) / zoomRatio;\n\n            scrollToX = 0;\n        } else {\n            docsLeft = pageMarginLeft;\n            sceneWidth = docsWidth + pageMarginLeft * 2;\n\n            scrollToX = (sceneWidth - engineWidth / zoomRatio) / 2;\n        }\n\n        if (engineHeight > docsHeight) {\n            docsTop = engineHeight / 2 - docsHeight / 2;\n            sceneHeight = (engineHeight - pageMarginTop * 2) / zoomRatio;\n        } else {\n            docsTop = pageMarginTop;\n            sceneHeight = docsHeight + pageMarginTop * 2;\n        }\n\n        // this.docsLeft = docsLeft;\n\n        // this.docsTop = docsTop;\n\n        scene.resize(sceneWidth, sceneHeight + 200);\n\n        docsComponent.translate(docsLeft, docsTop);\n\n        if (scrollToX !== Number.POSITIVE_INFINITY && viewport != null) {\n            const actualX = viewport.transScroll2ViewportScrollValue(scrollToX, 0).x;\n            viewport.scrollToBarPos({\n                x: actualX,\n            });\n        }\n\n        return this;\n    }\n}\n\nexport class DocsAdaptorFactory {\n    readonly zIndex = 5;\n\n    create(injector: Injector): DocsAdaptor {\n        const docsAdaptor = injector.createInstance(DocsAdaptor);\n        return docsAdaptor;\n    }\n}\n\nCanvasObjectProviderRegistry.add(new DocsAdaptorFactory());\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Injector, IPageElement } from '@univerjs/core';\nimport { PageElementType } from '@univerjs/core';\nimport { Image } from '@univerjs/engine-render';\n\nimport { CanvasObjectProviderRegistry, ObjectAdaptor } from '../adaptor';\n\nexport class ImageAdaptor extends ObjectAdaptor {\n    override zIndex = 1;\n\n    override viewKey = PageElementType.IMAGE;\n\n    override check(type: PageElementType) {\n        if (type !== this.viewKey) {\n            return;\n        }\n        return this;\n    }\n\n    override convert(pageElement: IPageElement) {\n        const {\n            id,\n            zIndex,\n            left = 0,\n            top = 0,\n            width,\n            height,\n            angle,\n            scaleX,\n            scaleY,\n            skewX,\n            skewY,\n            flipX,\n            flipY,\n            title,\n            description,\n            image = {},\n        } = pageElement;\n        const { imageProperties, placeholder, link } = image;\n\n        const contentUrl = imageProperties?.contentUrl || '';\n\n        return new Image(id, {\n            url: contentUrl,\n            top,\n            left,\n            width,\n            height,\n            zIndex,\n            angle,\n            scaleX,\n            scaleY,\n            skewX,\n            skewY,\n            flipX,\n            flipY,\n            forceRender: true,\n        });\n    }\n}\n\nexport class ImageAdaptorFactory {\n    readonly zIndex = 4;\n\n    create(injector: Injector): ImageAdaptor {\n        const imageAdaptor = injector.createInstance(ImageAdaptor);\n        return imageAdaptor;\n    }\n}\n\nCanvasObjectProviderRegistry.add(new ImageAdaptorFactory());\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Injector, IPageElement } from '@univerjs/core';\nimport { Inject, LocaleService, PageElementType } from '@univerjs/core';\nimport type { IRichTextProps, Scene } from '@univerjs/engine-render';\nimport { RichText } from '@univerjs/engine-render';\n\nimport { CanvasObjectProviderRegistry, ObjectAdaptor } from '../adaptor';\n\nexport class RichTextAdaptor extends ObjectAdaptor {\n    override zIndex = 2;\n\n    override viewKey = PageElementType.TEXT;\n\n    constructor(@Inject(LocaleService) private readonly _localeService: LocaleService) {\n        super();\n    }\n\n    override check(type: PageElementType) {\n        if (type !== this.viewKey) {\n            return;\n        }\n        return this;\n    }\n\n    override convert(pageElement: IPageElement, _mainScene: Scene) {\n        const {\n            id,\n            zIndex,\n            left = 0,\n            top = 0,\n            width,\n            height,\n            angle,\n            scaleX,\n            scaleY,\n            skewX,\n            skewY,\n            flipX,\n            flipY,\n            title,\n            description,\n            richText = {},\n        } = pageElement;\n        const { text, ff, fs, it, bl, ul, st, ol, bg, bd, cl, rich } = richText;\n        let config: IRichTextProps = {\n            top,\n            left,\n            width,\n            height,\n            zIndex,\n            angle,\n            scaleX,\n            scaleY,\n            skewX,\n            skewY,\n            flipX,\n            flipY,\n            forceRender: true,\n        };\n        let isNotNull = false;\n        if (text != null) {\n            config = { ...config, text, ff, fs, it, bl, ul, st, ol, bg, bd, cl };\n            isNotNull = true;\n        } else if (rich != null) {\n            config = { ...config, richText: rich };\n            isNotNull = true;\n        }\n\n        if (isNotNull === false) {\n            return;\n        }\n        return new RichText(this._localeService, id, config);\n    }\n}\n\nexport class RichTextAdaptorFactory {\n    readonly zIndex = 0;\n\n    create(injector: Injector): RichTextAdaptor {\n        const richTextAdaptor = injector.createInstance(RichTextAdaptor);\n        return richTextAdaptor;\n    }\n}\n\nCanvasObjectProviderRegistry.add(new RichTextAdaptorFactory());\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Injector, IPageElement } from '@univerjs/core';\nimport { BasicShapes, getColorStyle, PageElementType } from '@univerjs/core';\nimport { Rect } from '@univerjs/engine-render';\n\nimport { CanvasObjectProviderRegistry, ObjectAdaptor } from '../adaptor';\n\nexport class ShapeAdaptor extends ObjectAdaptor {\n    override zIndex = 2;\n\n    override viewKey = PageElementType.SHAPE;\n\n    override check(type: PageElementType) {\n        if (type !== this.viewKey) {\n            return;\n        }\n        return this;\n    }\n\n    override convert(pageElement: IPageElement) {\n        const {\n            id,\n            zIndex,\n            left = 0,\n            top = 0,\n            width,\n            height,\n            angle,\n            scaleX,\n            scaleY,\n            skewX,\n            skewY,\n            flipX,\n            flipY,\n            title,\n            description,\n        } = pageElement;\n        const { shapeType, text, shapeProperties, placeholder, link } = pageElement.shape || {};\n\n        const fill =\n            shapeProperties == null ? '' : getColorStyle(shapeProperties.shapeBackgroundFill) || 'rgba(255,255,255,1)';\n\n        const outline = shapeProperties?.outline;\n        const strokeStyle: { [key: string]: string | number } = {};\n        if (outline) {\n            const { outlineFill, weight } = outline;\n\n            strokeStyle.strokeWidth = weight;\n            strokeStyle.stroke = getColorStyle(outlineFill) || 'rgba(0,0,0,1)';\n        }\n\n        if (shapeType === BasicShapes.Rect) {\n            return new Rect(id, {\n                fill,\n                top,\n                left,\n                width,\n                height,\n                zIndex,\n                angle,\n                scaleX,\n                scaleY,\n                skewX,\n                skewY,\n                flipX,\n                flipY,\n                forceRender: true,\n                ...strokeStyle,\n            });\n        }\n        if (shapeType === BasicShapes.RoundRect) {\n            const radius = shapeProperties?.radius || 0;\n            return new Rect(id, {\n                fill,\n                top,\n                left,\n                width,\n                height,\n                zIndex,\n                angle,\n                scaleX,\n                scaleY,\n                skewX,\n                skewY,\n                flipX,\n                flipY,\n                forceRender: true,\n                radius,\n                ...strokeStyle,\n            });\n        }\n        // if (shapeType === ShapeType.ELLIPSE) {\n        // }\n    }\n}\n\nexport class ShapeAdaptorFactory {\n    readonly zIndex = 2;\n\n    create(injector: Injector): ShapeAdaptor {\n        const shapeAdaptor = injector.createInstance(ShapeAdaptor);\n        return shapeAdaptor;\n    }\n}\n\nCanvasObjectProviderRegistry.add(new ShapeAdaptorFactory());\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport './adaptors';\n\nimport type { IPageElement } from '@univerjs/core';\nimport { Inject, Injector, sortRules } from '@univerjs/core';\nimport type { BaseObject, Scene } from '@univerjs/engine-render';\n\nimport type { ObjectAdaptor } from './adaptor';\nimport { CanvasObjectProviderRegistry } from './adaptor';\n\nexport class ObjectProvider {\n    private _adaptors: ObjectAdaptor[] = [];\n\n    constructor(@Inject(Injector) private readonly _injector: Injector) {\n        this._adaptorLoader();\n    }\n\n    convertToRenderObjects(pageElements: { [elementId: string]: IPageElement }, mainScene: Scene) {\n        const pageKeys = Object.keys(pageElements);\n        const objects: BaseObject[] = [];\n        pageKeys.forEach((key) => {\n            const pageElement = pageElements[key];\n            const o = this._executor(pageElement, mainScene);\n            if (o != null) {\n                objects.push(o);\n            }\n        });\n        return objects;\n    }\n\n    convertToRenderObject(pageElement: IPageElement, mainScene: Scene) {\n        return this._executor(pageElement, mainScene);\n    }\n\n    private _executor(pageElement: IPageElement, mainScene: Scene) {\n        const { id: pageElementId, type } = pageElement;\n\n        for (const adaptor of this._adaptors) {\n            const o = adaptor.check(type)?.convert(pageElement, mainScene);\n            if (o != null) {\n                return o;\n            }\n        }\n    }\n\n    private _adaptorLoader() {\n        CanvasObjectProviderRegistry.getData()\n            .sort(sortRules)\n            .forEach((adaptorFactory: ObjectAdaptor) => {\n                this._adaptors.push(adaptorFactory.create(this._injector) as unknown as ObjectAdaptor);\n            });\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getColorStyle, Inject, Injector, PageElementType, SlideDataModel } from '@univerjs/core';\nimport { Rect, Scene, Slide, Viewport } from '@univerjs/engine-render';\nimport type { IColorStyle, IPageElement, ISlidePage } from '@univerjs/core';\nimport type { Engine } from '@univerjs/engine-render';\n\nimport { CanvasObjectProviderRegistry, ObjectAdaptor } from '../adaptor';\nimport { ObjectProvider } from '../object-provider';\n\n// import { DocsAdaptor, ImageAdaptor, RichTextAdaptor, ShapeAdaptor  } from './';\n\nexport enum SLIDE_VIEW_KEY {\n    MAIN = '__SLIDERender__',\n    SCENE_VIEWER = '__SLIDEViewer__',\n    SCENE = '__SLIDEScene__',\n    VIEWPORT = '__SLIDEViewPort_',\n}\n\nexport class SlideAdaptor extends ObjectAdaptor {\n    override zIndex = 6;\n\n    override viewKey = PageElementType.SLIDE;\n\n    private _ObjectProvider: ObjectProvider | null = null;\n\n    constructor(@Inject(Injector) private _injector: Injector) {\n        super();\n    }\n\n    override check(type: PageElementType) {\n        if (type !== this.viewKey) {\n            return;\n        }\n        return this;\n    }\n\n    override convert(pageElement: IPageElement, mainScene: Scene) {\n        const {\n            id,\n            zIndex,\n            left = 0,\n            top = 0,\n            width,\n            height,\n            angle,\n            scaleX,\n            scaleY,\n            skewX,\n            skewY,\n            flipX,\n            flipY,\n            title,\n            description,\n            slide: slideData,\n        } = pageElement;\n        if (slideData == null) {\n            return;\n        }\n\n        const model = new SlideDataModel(slideData);\n\n        const slideComponent = new Slide(SLIDE_VIEW_KEY.MAIN + id, {\n            top,\n            left,\n            width,\n            height,\n            zIndex,\n            angle,\n            scaleX,\n            scaleY,\n            skewX,\n            skewY,\n            flipX,\n            flipY,\n            forceRender: true,\n        });\n\n        slideComponent.enableNav();\n\n        slideComponent.enableSelectedClipElement();\n\n        const pageOrder = model.getPageOrder();\n\n        const pages = model.getPages();\n\n        if (!pageOrder || !pages) {\n            return slideComponent;\n        }\n\n        this._ObjectProvider = new ObjectProvider(this._injector);\n\n        for (let i = 0, len = pageOrder.length; i < len; i++) {\n            const page = pages[pageOrder[i]];\n            const { id } = page;\n            slideComponent.addPageScene(this._createScene(id, slideComponent, page, mainScene, model));\n        }\n\n        slideComponent.activeFirstPage();\n\n        return slideComponent;\n    }\n\n    private _createScene(pageId: string, parent: Engine | Slide, page: ISlidePage, mainScene: Scene, model: SlideDataModel) {\n        const { width, height } = parent;\n\n        const scene = new Scene(pageId, parent, {\n            width,\n            height,\n        });\n\n        const viewMain = new Viewport(`PageViewer_${pageId}`, scene, {\n            left: 0,\n            top: 0,\n            bottom: 0,\n            right: 0,\n            explicitViewportWidthSet: false,\n            explicitViewportHeightSet: false,\n        });\n\n        viewMain.closeClip();\n\n        const { pageElements, pageBackgroundFill } = page;\n\n        const objects = this._ObjectProvider?.convertToRenderObjects(pageElements, mainScene);\n\n        this._addBackgroundRect(scene, pageBackgroundFill, model);\n\n        scene.addObjects(objects!);\n\n        objects?.forEach((object) => {\n            scene.attachTransformerTo(object);\n        });\n\n        return scene;\n    }\n\n    private _addBackgroundRect(scene: Scene, fill: IColorStyle, model: SlideDataModel) {\n        const pageSize = model.getPageSize();\n\n        const { width: pageWidth = 0, height: pageHeight = 0 } = pageSize;\n\n        const page = new Rect('canvas', {\n            left: 0,\n            top: 0,\n            width: pageWidth,\n            height: pageHeight,\n            strokeWidth: 1,\n            stroke: 'rgba(198,198,198, 1)',\n            fill: getColorStyle(fill) || 'rgba(255,255,255, 1)',\n            zIndex: 0,\n            evented: false,\n        });\n        scene.addObject(page, 0);\n    }\n}\n\nexport class SlideAdaptorFactory {\n    readonly zIndex = 6;\n\n    create(injector: Injector): SlideAdaptor {\n        const slideAdaptor = injector.createInstance(SlideAdaptor);\n        return slideAdaptor;\n    }\n}\n\nCanvasObjectProviderRegistry.add(new SlideAdaptorFactory());\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { EventState, IPageElement } from '@univerjs/core';\nimport type { IScrollObserverParam, IWheelEvent } from '@univerjs/engine-render';\nimport { IConfigService, IContextService, Inject, Injector, LocaleService, PageElementType, Styles, Worksheet } from '@univerjs/core';\nimport {\n    getColor,\n    Rect,\n    Scene,\n    SceneViewer,\n    ScrollBar,\n    Spreadsheet,\n    SpreadsheetColumnHeader,\n    SpreadsheetRowHeader,\n    SpreadsheetSkeleton,\n    Viewport,\n} from '@univerjs/engine-render';\n\nimport { CanvasObjectProviderRegistry, ObjectAdaptor } from '../adaptor';\n\nenum SHEET_VIEW_KEY {\n    MAIN = 'spreadInSlide',\n    SCENE = 'spreadInSlideScene',\n    SCENE_VIEWER = 'spreadInSlideSceneViewer',\n    ROW = 'spreadInSlideRow',\n    COLUMN = 'spreadInSlideColumn',\n    LEFT_TOP = 'spreadInSlideLeftTop',\n    VIEW_MAIN = 'spreadInSlideViewMain',\n    VIEW_TOP = 'spreadInSlideViewTop',\n    VIEW_LEFT = 'spreadInSlideViewLeft',\n    VIEW_LEFT_TOP = 'spreadInSlideViewLeftTop',\n}\n\nexport class SpreadsheetAdaptor extends ObjectAdaptor {\n    override zIndex = 4;\n\n    override viewKey = PageElementType.SPREADSHEET;\n\n    constructor(\n        @Inject(LocaleService) private readonly _localeService: LocaleService,\n        @IContextService private readonly _contextService: IContextService,\n        @IConfigService private readonly _configService: IConfigService,\n        @Inject(Injector) private readonly _injector: Injector\n    ) {\n        super();\n    }\n\n    override check(type: PageElementType) {\n        if (type !== this.viewKey) {\n            return;\n        }\n        return this;\n    }\n\n    override convert(pageElement: IPageElement, mainScene: Scene) {\n        const {\n            id,\n            zIndex,\n            left = 0,\n            top = 0,\n            width,\n            height,\n            angle,\n            scaleX,\n            scaleY,\n            skewX,\n            skewY,\n            flipX,\n            flipY,\n            spreadsheet: spreadsheetModel,\n        } = pageElement;\n\n        if (spreadsheetModel == null) {\n            return;\n        }\n\n        const { worksheet, styles } = spreadsheetModel;\n\n        const styleModel = new Styles(styles);\n        const spreadsheetSkeleton = new SpreadsheetSkeleton(\n            new Worksheet(id, worksheet, styleModel), // FIXME: worksheet in slide doesn't has a Worksheet object\n            styleModel,\n            this._localeService,\n            this._contextService,\n            this._configService,\n            this._injector\n        );\n\n        const { rowTotalHeight, columnTotalWidth, rowHeaderWidth, columnHeaderHeight } = spreadsheetSkeleton;\n        const allWidth = columnTotalWidth + worksheet.rowHeader.width || 0;\n        const allHeight = rowTotalHeight + worksheet.columnHeader.height || 0;\n\n        const sv = new SceneViewer(SHEET_VIEW_KEY.SCENE_VIEWER + id, {\n            top,\n            left,\n            width,\n            height,\n            zIndex,\n            angle,\n            scaleX,\n            scaleY,\n            skewX,\n            skewY,\n            flipX,\n            flipY,\n            forceRender: true,\n        });\n        const scene = new Scene(SHEET_VIEW_KEY.SCENE + id, sv, {\n            width: allWidth,\n            height: allHeight,\n        });\n\n        this._updateViewport(id, rowHeaderWidth, columnHeaderHeight, scene, mainScene);\n\n        const spreadsheet = new Spreadsheet('testSheetViewer', spreadsheetSkeleton, false);\n        const spreadsheetRowHeader = new SpreadsheetRowHeader(SHEET_VIEW_KEY.ROW, spreadsheetSkeleton);\n        const spreadsheetColumnHeader = new SpreadsheetColumnHeader(SHEET_VIEW_KEY.COLUMN, spreadsheetSkeleton);\n        const SpreadsheetLeftTopPlaceholder = new Rect(SHEET_VIEW_KEY.LEFT_TOP, {\n            zIndex: 2,\n            left: -1,\n            top: -1,\n            width: rowHeaderWidth,\n            height: columnHeaderHeight,\n            fill: getColor([248, 249, 250]),\n            stroke: getColor([217, 217, 217]),\n            strokeWidth: 1,\n        });\n\n        spreadsheet.zIndex = 10;\n        scene.addObjects([spreadsheet], 1);\n        scene.addObjects([spreadsheetRowHeader, spreadsheetColumnHeader, SpreadsheetLeftTopPlaceholder], 2);\n        // spreadsheet.enableSelection();\n        return sv;\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    private _updateViewport(\n        id: string,\n        rowHeaderWidth: number,\n        columnHeaderHeight: number,\n        scene: Scene,\n        mainScene: Scene\n    ) {\n        if (mainScene == null) {\n            return;\n        }\n        const rowHeaderWidthScale = rowHeaderWidth * scene.scaleX;\n        const columnHeaderHeightScale = columnHeaderHeight * scene.scaleY;\n\n        const viewMain = new Viewport(SHEET_VIEW_KEY.VIEW_MAIN + id, scene, {\n            left: rowHeaderWidthScale,\n            top: columnHeaderHeightScale,\n            bottom: 0,\n            right: 0,\n            explicitViewportWidthSet: false,\n            explicitViewportHeightSet: false,\n            isWheelPreventDefaultX: true,\n        });\n        const viewTop = new Viewport(SHEET_VIEW_KEY.VIEW_TOP + id, scene, {\n            left: rowHeaderWidthScale,\n            height: columnHeaderHeightScale,\n            top: 0,\n            right: 0,\n            explicitViewportWidthSet: false,\n            isWheelPreventDefaultX: true,\n        });\n        const viewLeft = new Viewport(SHEET_VIEW_KEY.VIEW_LEFT + id, scene, {\n            left: 0,\n            bottom: 0,\n            top: columnHeaderHeightScale,\n            width: rowHeaderWidthScale,\n            explicitViewportHeightSet: false,\n            isWheelPreventDefaultX: true,\n        });\n\n        const VIEW_LEFT_TOP = new Viewport(SHEET_VIEW_KEY.VIEW_LEFT_TOP + id, scene, {\n            left: 0,\n            top: 0,\n            width: rowHeaderWidthScale,\n            height: columnHeaderHeightScale,\n            isWheelPreventDefaultX: true,\n        });\n        // viewMain.linkToViewport(viewLeft, LINK_VIEW_PORT_TYPE.Y);\n        // viewMain.linkToViewport(viewTop, LINK_VIEW_PORT_TYPE.X);\n        viewMain.onScrollAfter$.subscribeEvent((param: IScrollObserverParam) => {\n            const { scrollX, scrollY, viewportScrollX, viewportScrollY } = param;\n\n            viewTop\n                .updateScrollVal({\n                    scrollX,\n                    viewportScrollX,\n                });\n\n            viewLeft\n                .updateScrollVal({\n                    scrollY,\n                    viewportScrollY,\n                });\n        });\n\n        scene.attachControl();\n\n        const scrollbar = new ScrollBar(viewMain, {\n            mainScene,\n        });\n\n        // \u9F20\u6807\u6EDA\u8F6E\u7F29\u653E\n        scene.onMouseWheel$.subscribeEvent((evt: unknown, state: EventState) => {\n            const e = evt as IWheelEvent;\n            if (e.ctrlKey) {\n                const deltaFactor = Math.abs(e.deltaX);\n                let scrollNum = deltaFactor < 40 ? 0.05 : deltaFactor < 80 ? 0.02 : 0.01;\n                scrollNum *= e.deltaY > 0 ? -1 : 1;\n                if (scene.scaleX < 1) {\n                    scrollNum /= 2;\n                }\n\n                if (scene.scaleX + scrollNum > 4) {\n                    scene.scale(4, 4);\n                } else if (scene.scaleX + scrollNum < 0.1) {\n                    scene.scale(0.1, 0.1);\n                } else {\n                    scene.scaleBy(scrollNum, scrollNum);\n                    e.preventDefault();\n                }\n            } else {\n                viewMain.onMouseWheel(e, state);\n            }\n        });\n    }\n}\n\nexport class SpreadsheetAdaptorFactory {\n    readonly zIndex = 4;\n\n    create(injector: Injector): SpreadsheetAdaptor {\n        const spreadsheetAdaptor = injector.createInstance(SpreadsheetAdaptor);\n        return spreadsheetAdaptor;\n    }\n}\n\nCanvasObjectProviderRegistry.add(new SpreadsheetAdaptorFactory());\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { EventState, IColorStyle, IPageElement, ISlidePage, Nullable, SlideDataModel, UnitModel } from '@univerjs/core';\nimport type { BaseObject, IRenderContext, IRenderModule, IWheelEvent } from '@univerjs/engine-render';\nimport type { PageID } from '../type';\nimport { debounce, getColorStyle, Inject, Injector, IUniverInstanceService, RxDisposable, UniverInstanceType } from '@univerjs/core';\nimport {\n    getCurrentTypeOfRenderer,\n    IRenderManagerService,\n    Rect,\n    Scene,\n    ScrollBar,\n    Slide,\n    Viewport,\n} from '@univerjs/engine-render';\nimport { ObjectProvider, SLIDE_KEY } from '@univerjs/slides';\n\nexport class SlideRenderController extends RxDisposable implements IRenderModule {\n    private _objectProvider: ObjectProvider | null = null;\n\n    constructor(\n        private readonly _renderContext: IRenderContext<UnitModel>,\n        @Inject(Injector) private readonly _injector: Injector,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService\n\n    ) {\n        super();\n        this._objectProvider = this._injector.createInstance(ObjectProvider);\n        this._addNewRender();\n    }\n\n    private _addNewRender() {\n        const { unitId, engine, scene } = this._renderContext;\n        const slideDataModel = this._getCurrUnitModel();\n\n        if (!slideDataModel) return;\n\n        // createRender moved to slideRenderService@this._instanceSrv.getAllUnitsForType<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE).forEach((slideModel)\n        // this._renderManagerService.createRender(unitId);\n\n        //#region scene subscribe\n        // const { engine, scene } = currentRender;\n        const observer = engine.onTransformChange$.subscribeEvent(() => {\n            this._scrollToCenter();\n            // add once\n            observer?.unsubscribe();\n        });\n        engine.onTransformChange$.subscribeEvent(() => {\n            setTimeout(() => {\n                this.createThumbs();\n            }, 300);\n        });\n\n        const viewMain = new Viewport(SLIDE_KEY.VIEW, scene, {\n            left: 0,\n            top: 0,\n            bottom: 0,\n            right: 0,\n            explicitViewportWidthSet: false,\n            explicitViewportHeightSet: false,\n            isWheelPreventDefaultX: true,\n        });\n        scene.attachControl();\n        scene.onMouseWheel$.subscribeEvent((evt: unknown, state: EventState) => {\n            const e = evt as IWheelEvent;\n            if (e.ctrlKey) {\n                const deltaFactor = Math.abs(e.deltaX);\n                let scrollNum = deltaFactor < 40 ? 0.2 : deltaFactor < 80 ? 0.4 : 0.2;\n                scrollNum *= e.deltaY > 0 ? -1 : 1;\n                if (scene.scaleX < 1) {\n                    scrollNum /= 2;\n                }\n\n                if (scene.scaleX + scrollNum > 4) {\n                    scene.scale(4, 4);\n                } else if (scene.scaleX + scrollNum < 0.1) {\n                    scene.scale(0.1, 0.1);\n                } else {\n                    const value = e.deltaY > 0 ? 0.1 : -0.1;\n                    // scene.scaleBy(scrollNum, scrollNum);\n                    e.preventDefault();\n                }\n            } else {\n                viewMain.onMouseWheel(e, state);\n            }\n        });\n        scene.onFileLoaded$.subscribeEvent(() => {\n            this._refreshThumb();\n        });\n        //#endregion\n\n        ScrollBar.attachTo(viewMain);\n        // this._renderManagerService.setCurrent(unitId);\n\n        // #region create slide\n        const slide = this._createSlide(scene);\n        this._renderContext.mainComponent = slide;\n        this._createSlidePages(slideDataModel, slide);\n        this.createThumbs();\n        // #endregion\n\n        engine.runRenderLoop(() => {\n            scene.render();\n        });\n    }\n\n    private _scrollToCenter() {\n        const mainScene = this._currentRender()?.scene;\n        const viewMain = mainScene?.getViewport(SLIDE_KEY.VIEW);\n        const getCenterPositionViewPort = this._getCenterPositionViewPort(mainScene);\n        if (!viewMain || !getCenterPositionViewPort) return;\n        const { left: viewPortLeft, top: viewPortTop } = getCenterPositionViewPort;\n\n        const { x, y } = viewMain.transViewportScroll2ScrollValue(viewPortLeft, viewPortTop);\n\n        viewMain.scrollToBarPos({\n            x,\n            y,\n        });\n    }\n\n    private _currentRender() {\n        return getCurrentTypeOfRenderer(UniverInstanceType.UNIVER_SLIDE, this._univerInstanceService, this._renderManagerService);\n    }\n\n    private _refreshThumb = debounce(() => {\n        this.createThumbs();\n    }, 300);\n\n    /**\n     * @param mainScene\n     */\n    private _createSlide(mainScene: Scene) {\n        const model = this._univerInstanceService.getCurrentUnitForType<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE)!;\n\n        const { width: sceneWidth, height: sceneHeight } = mainScene;\n\n        const pageSize = model.getPageSize();\n\n        const { width = 100, height = 100 } = pageSize;\n\n        const slideComponent = new Slide(SLIDE_KEY.COMPONENT, {\n            left: (sceneWidth - width) / 2,\n            top: (sceneHeight - height) / 2,\n            width,\n            height,\n            zIndex: 10,\n        });\n\n        // slideComponent.enableNav();\n\n        slideComponent.enableSelectedClipElement();\n\n        mainScene.addObject(slideComponent);\n\n        return slideComponent;\n    }\n\n    private _addBackgroundRect(scene: Scene, fill: IColorStyle) {\n        const model = this._univerInstanceService.getCurrentUnitForType<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE)!;\n\n        const pageSize = model.getPageSize();\n\n        const { width: pageWidth = 0, height: pageHeight = 0 } = pageSize;\n\n        const page = new Rect('canvas', {\n            left: 0,\n            top: 0,\n            width: pageWidth,\n            height: pageHeight,\n            strokeWidth: 1,\n            stroke: 'rgba(198,198,198,1)',\n            fill: getColorStyle(fill) || 'rgba(255,255,255,1)',\n            zIndex: 0,\n            evented: false,\n        });\n        scene.addObject(page, 0);\n    }\n\n    private _getCenterPositionViewPort(mainScene?: Scene) {\n        if (!mainScene) return { left: 0, top: 0 };\n        const { width, height } = mainScene;\n\n        const engine = mainScene.getEngine();\n\n        const canvasWidth = engine?.width || 0;\n        const canvasHeight = engine?.height || 0;\n\n        return {\n            left: (width - canvasWidth) / 2,\n            top: (height - canvasHeight) / 2,\n        };\n    }\n\n    private _thumbSceneRender(pageId: string, slide: Slide) {\n        const render = this._renderManagerService.getRenderById(pageId);\n\n        if (render == null) {\n            return;\n        }\n\n        const { engine: thumbEngine } = render;\n\n        if (thumbEngine == null) {\n            return;\n        }\n\n        const { width, height } = slide;\n\n        const { width: pageWidth = width, height: pageHeight = height } = thumbEngine;\n\n        const thumbContext = thumbEngine.getCanvas().getContext();\n\n        slide.renderToThumb(thumbContext, pageId, pageWidth / width, pageHeight / height);\n    }\n\n    /**\n     * CreateScene by pages, and activate first one.\n     * @param slideDataModel\n     * @param slide\n     */\n    private _createSlidePages(slideDataModel: SlideDataModel, slide: Slide) {\n        const pages = slideDataModel.getPages();\n\n        const pageOrder = slideDataModel.getPageOrder();\n\n        if (!pages || !pageOrder) {\n            return;\n        }\n\n        if (pageOrder.length === 0) {\n            return;\n        }\n\n        for (let i = 0, len = pageOrder.length; i < len; i++) {\n            const pageId = pageOrder[i];\n\n            this.createPageScene(pageId, pages[pageId]);\n\n            this._createThumb(pageId);\n        }\n\n        // setTimeout(() => {\n        //     for (let i = 0, len = pageOrder.length; i < len; i++) {\n        //         const pageId = pageOrder[i];\n\n        //         this._thumbSceneRender(pageId, slide);\n        //     }\n        // }, 0);\n\n        slide.activeFirstPage();\n    }\n\n    private _createThumb(pageId: string) {\n        this._renderManagerService.createRender(pageId);\n    }\n\n    /**\n     * SlideDataModel is UnitModel\n     */\n    private _getCurrUnitModel() {\n        // return this._univerInstanceService.getCurrentUnitForType<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE)!;\n\n        return this._renderContext.unit as SlideDataModel;\n    }\n\n    activePage(_pageId?: string) {\n        let pageId = _pageId;\n        const model = this._getCurrUnitModel();\n        let page: Nullable<ISlidePage>;\n        if (pageId) {\n            page = model.getPage(pageId);\n        } else {\n            const pageElements = model.getPages();\n            const pageOrder = model.getPageOrder();\n            if (pageOrder == null || pageElements == null) {\n                return;\n            }\n            page = pageElements[pageOrder[0]];\n\n            pageId = page.id;\n        }\n\n        const render = this._currentRender();\n\n        if (page == null || render == null || render.mainComponent == null) {\n            return;\n        }\n\n        const { id } = page;\n\n        const slide = render.mainComponent as Slide;\n\n        model.setActivePage(page);\n\n        if (slide?.hasPage(id)) {\n            slide.changePage(id);\n            return;\n        }\n\n        this.createPageScene(id, page);\n    }\n\n    createThumbs() {\n        const slideDataModel = this._getCurrUnitModel();\n        const pageOrder = slideDataModel.getPageOrder();\n\n        const render = this._currentRender();\n\n        if (!pageOrder || !render) {\n            return;\n        }\n\n        if (pageOrder.length === 0) {\n            return;\n        }\n\n        for (let i = 0, len = pageOrder.length; i < len; i++) {\n            const pageId = pageOrder[i];\n\n            this._thumbSceneRender(pageId, render.mainComponent as Slide);\n        }\n    }\n\n    /**\n     * Create scene by page and set to _sceneMap.\n     * @param pageId\n     * @param page\n     */\n    createPageScene(pageId: string, page: ISlidePage): Nullable<Scene> {\n        // const render = this._currentRender();\n        const render = this._renderContext;\n        if (!render || !this._objectProvider) {\n            return;\n        }\n\n        const { scene: mainScene, mainComponent } = render;\n\n        const slide = mainComponent as Slide;\n        const { width, height } = slide;\n\n        const pageScene = new Scene(pageId, slide, {\n            width,\n            height,\n        });\n\n        const viewMain = new Viewport(`PageViewer_${pageId}`, pageScene, {\n            left: 0,\n            top: 0,\n            bottom: 0,\n            right: 0,\n            explicitViewportWidthSet: false,\n            explicitViewportHeightSet: false,\n        });\n        viewMain.closeClip();\n\n        const { pageElements, pageBackgroundFill } = page;\n\n        // SceneViewers\n        const objects = this._objectProvider.convertToRenderObjects(pageElements, mainScene);\n        if (!objects || !slide) return;\n\n        this._addBackgroundRect(pageScene, pageBackgroundFill);\n        pageScene.addObjects(objects);\n\n        pageScene.initTransformer();\n        objects.forEach((object) => {\n            pageScene.attachTransformerTo(object);\n        });\n\n        const transformer = pageScene.getTransformer();\n\n        transformer?.changeEnd$.subscribe(() => {\n            this._thumbSceneRender(pageId, slide);\n        });\n\n        transformer?.clearControl$.subscribe(() => {\n            this._thumbSceneRender(pageId, slide);\n        });\n\n        // add SubScene\n        slide.addPageScene(pageScene);\n\n        return pageScene;\n    }\n\n    /**\n     * Get pageScene from Slide.\n     * @param pageId\n     * @returns {Scene, Engine, UnitModel} scene & engine & unit from renderContext\n     */\n    getPageRenderUnit(pageId: PageID) {\n        //pageScene was added to the mainComponent(Slide) in createPageScene --> slide.addPageScene\n        const subsceneMap = (this._renderContext.mainComponent as Slide).getSubScenes();\n        const pageScene = subsceneMap.get(pageId) as unknown as Scene;\n        const { engine, unit } = this._renderContext;\n        return {\n            scene: pageScene,\n            engine,\n            unit,\n        };\n    }\n\n    createObjectToPage(element: IPageElement, pageID: PageID): Nullable<BaseObject> {\n        const { scene } = this.getPageRenderUnit(pageID);\n\n        if (!scene || !this._objectProvider) {\n            return;\n        }\n        const object = this._objectProvider.convertToRenderObject(element, scene);\n        if (object) {\n            scene.addObject(object);\n            scene.attachTransformerTo(object);\n            scene.getLayer().makeDirty();\n            return object;\n        }\n    }\n\n    setObjectActiveByPage(obj: BaseObject, pageID: PageID) {\n        const { scene } = this.getPageRenderUnit(pageID);\n        if (!scene) return;\n        const transformer = scene.getTransformer();\n        transformer?.activeAnObject(obj);\n    }\n\n    removeObjectById(id: string, pageID: PageID) {\n        const { scene } = this.getPageRenderUnit(pageID);\n        if (!scene) return;\n        scene.removeObject(id);\n        const transformer = scene.getTransformer();\n        transformer?.clearControls();\n    }\n\n    appendPage() {\n        const model = this._getCurrUnitModel();\n        const page = model.getBlankPage();\n        const render = this._currentRender();\n\n        if (page == null || render == null || render.mainComponent == null) {\n            return;\n        }\n\n        const { id: pageId } = page;\n\n        const slide = render.mainComponent as Slide;\n        const scene = this.createPageScene(pageId, page);\n\n        if (slide && scene) {\n            slide.addPageScene(scene);\n        }\n\n        model.appendPage(page);\n        model.setActivePage(page);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IPageElement, Nullable } from '@univerjs/core';\nimport type {\n    BaseObject,\n    IRenderModule,\n} from '@univerjs/engine-render';\nimport type { PageID } from '../type';\nimport { RxDisposable } from '@univerjs/core';\n\nimport {\n    IRenderManagerService,\n} from '@univerjs/engine-render';\nimport { SlideRenderController } from './slide.render-controller';\n\nexport class CanvasView extends RxDisposable implements IRenderModule {\n    constructor(\n        // this controller needs by commands. root injector. T\n        // That means this controller is not init by renderUnit ---> no renderContext.\n        // private readonly _renderContext: IRenderContext<UnitModel>,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService\n    ) {\n        super();\n    }\n\n    private _getSlideRenderControllerFromRenderUnit(unitId: string) {\n        const renderUnit = this._renderManagerService\n            .getRenderById(unitId)!;\n        const slideRC = renderUnit.with(SlideRenderController);\n        return slideRC;\n    }\n\n    createThumbs(unitId: string) {\n        const slideRC = this._getSlideRenderControllerFromRenderUnit(unitId);\n        slideRC.createThumbs();\n    }\n\n    activePage(pageId: string, unitId: string) {\n        const slideRC = this._getSlideRenderControllerFromRenderUnit(unitId);\n        slideRC.activePage(pageId);\n    }\n\n    getRenderUnitByPageId(pageId: PageID, unitId: string) {\n        const slideRC = this._getSlideRenderControllerFromRenderUnit(unitId);\n        return slideRC.getPageRenderUnit(pageId);\n    }\n\n    createObjectToPage(element: IPageElement, pageID: PageID, unitId: string): Nullable<BaseObject> {\n        const slideRC = this._getSlideRenderControllerFromRenderUnit(unitId);\n        return slideRC.createObjectToPage(element, pageID);\n    }\n\n    setObjectActiveByPage(obj: BaseObject, pageID: PageID, unitId: string) {\n        const slideRC = this._getSlideRenderControllerFromRenderUnit(unitId);\n        return slideRC.setObjectActiveByPage(obj, pageID);\n    }\n\n    removeObjectById(id: string, pageID: PageID, unitId: string) {\n        const slideRC = this._getSlideRenderControllerFromRenderUnit(unitId);\n        slideRC.removeObjectById(id, pageID);\n    }\n\n    /**\n     * append blank page\n     */\n    appendPage(unitId: string) {\n        const slideRC = this._getSlideRenderControllerFromRenderUnit(unitId);\n        slideRC.appendPage();\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, IOperation, SlideDataModel } from '@univerjs/core';\nimport { CommandType, IUniverInstanceService } from '@univerjs/core';\nimport { CanvasView } from '../../controllers/canvas-view';\n\nexport interface IActiveSlidePageOperationParams {\n    unitId: string;\n    id: string;\n}\nexport const ActivateSlidePageOperation: IOperation<IActiveSlidePageOperationParams> = {\n    id: 'slide.operation.activate-slide',\n    type: CommandType.OPERATION,\n    handler: (accessor: IAccessor, params: IActiveSlidePageOperationParams) => {\n        const unitId = params.unitId;\n        const canvasView = accessor.get(CanvasView);\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        // const model = univerInstanceService.getCurrentUnitForType<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE);\n\n        const model = univerInstanceService.getUnit<SlideDataModel>(unitId);\n        const pageId = model?.getActivePage()?.id;\n\n        if (!pageId) return false;\n\n        const page = canvasView.getRenderUnitByPageId(pageId, unitId);\n        if (!page) return false;\n        const transformer = page.scene?.getTransformer();\n        if (transformer) {\n            transformer.clearControls();\n        }\n\n        canvasView.activePage(params.id, unitId);\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IOperation, SlideDataModel } from '@univerjs/core';\nimport { CommandType, IUniverInstanceService } from '@univerjs/core';\n\nimport { CanvasView } from '../../controllers/canvas-view';\n\nexport interface IAppendSlideOperationParams {\n    unitId: string;\n}\n\nexport const AppendSlideOperation: IOperation<IAppendSlideOperationParams> = {\n    id: 'slide.operation.append-slide',\n    type: CommandType.OPERATION,\n    handler: (accessor, params: IAppendSlideOperationParams) => {\n        const unitId = params.unitId;\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        // const slideData = univerInstanceService.getCurrentUnitForType<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE);\n\n        const slideData = univerInstanceService.getUnit<SlideDataModel>(unitId);\n\n        if (!slideData) return false;\n\n        const canvasView = accessor.get(CanvasView);\n        canvasView.appendPage(unitId);\n\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommand, SlideDataModel } from '@univerjs/core';\nimport { CommandType, IUniverInstanceService } from '@univerjs/core';\nimport { CanvasView } from '../../controllers/canvas-view';\n\nexport interface IDeleteElementOperationParams {\n    unitId: string;\n    id: string;\n};\n\nexport const DeleteSlideElementOperation: ICommand<IDeleteElementOperationParams> = {\n    id: 'slide.operation.delete-element',\n    type: CommandType.OPERATION,\n    handler: (accessor, params) => {\n        if (!params?.id) return false;\n\n        const unitId = params.unitId;\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        // const slideData = univerInstanceService.getCurrentUnitForType<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE);\n\n        const slideData = univerInstanceService.getUnit<SlideDataModel>(unitId);\n\n        if (!slideData) return false;\n\n        const activePage = slideData.getActivePage()!;\n\n        delete activePage.pageElements[params.id];\n\n        slideData.updatePage(activePage.id, activePage);\n\n        const canvasview = accessor.get(CanvasView);\n        canvasview.removeObjectById(params.id, activePage.id, unitId);\n\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommandType, IUniverInstanceService, PageElementType, UniverInstanceType } from '@univerjs/core';\nimport { DRAWING_IMAGE_ALLOW_IMAGE_LIST, getImageSize, IImageIoService } from '@univerjs/drawing';\nimport { ILocalFileService } from '@univerjs/ui';\nimport type { ICommand, SlideDataModel } from '@univerjs/core';\nimport { CanvasView } from '../../controllers/canvas-view';\n\nexport const InsertSlideFloatImageCommand: ICommand<{}> = {\n    id: 'slide.command.insert-float-image',\n    type: CommandType.COMMAND,\n    handler: async (accessor, params) => {\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        const unitId = univerInstanceService.getCurrentUnitForType(UniverInstanceType.UNIVER_SLIDE)?.getUnitId();\n        if (!unitId) return false;\n\n        const fileOpenerService = accessor.get(ILocalFileService);\n        const files = await fileOpenerService.openFile({\n            multiple: true,\n            accept: DRAWING_IMAGE_ALLOW_IMAGE_LIST.map((image) => `.${image.replace('image/', '')}`).join(','),\n        });\n        if (files.length !== 1) return false;\n\n        const imageIoService = accessor.get(IImageIoService);\n        const imageParam = await imageIoService.saveImage(files[0]);\n        if (!imageParam) return false;\n\n        const { imageId, imageSourceType, source, base64Cache } = imageParam;\n        const { width, height, image } = await getImageSize(base64Cache || '');\n\n        const slideData = univerInstanceService.getUnit<SlideDataModel>(unitId);\n        if (!slideData) return false;\n\n        const activePage = slideData.getActivePage()!;\n        const elements = Object.values(activePage.pageElements);\n        const maxIndex = (elements?.length) ? Math.max(...elements.map((element) => element.zIndex)) : 20;\n        const data = {\n            id: imageId,\n            zIndex: maxIndex + 1,\n            left: 0,\n            top: 0,\n            width,\n            height,\n            title: '',\n            description: '',\n            type: PageElementType.IMAGE,\n            image: {\n                imageProperties: {\n                    contentUrl: base64Cache,\n                    imageSourceType,\n                    source,\n                    base64Cache,\n                    image,\n                },\n            },\n        };\n        activePage.pageElements[imageId] = data;\n        slideData.updatePage(activePage.id, activePage);\n\n        const canvasView = accessor.get(CanvasView);\n        const sceneObject = canvasView.createObjectToPage(data, activePage.id, unitId);\n        if (sceneObject) {\n            canvasView.setObjectActiveByPage(sceneObject, activePage.id, unitId);\n        }\n\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommand, SlideDataModel } from '@univerjs/core';\nimport { CommandType, IUniverInstanceService, Tools } from '@univerjs/core';\n\nexport interface IUpdateElementOperationParams {\n    unitId: string;\n    oKey: string;\n    props: Record<string, any>;\n};\n\nexport const UpdateSlideElementOperation: ICommand<IUpdateElementOperationParams> = {\n    id: 'slide.operation.update-element',\n    type: CommandType.OPERATION,\n    handler: (accessor, params: IUpdateElementOperationParams) => {\n        const { oKey, props } = params!;\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        // const slideData = univerInstanceService.getCurrentUnitForType<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE);\n\n        const unitId = params?.unitId;\n        const slideData = univerInstanceService.getUnit<SlideDataModel>(unitId);\n        if (!slideData) return false;\n\n        const activePage = slideData.getActivePage()!;\n        activePage.pageElements[oKey] = Tools.deepMerge(activePage.pageElements[oKey], props);\n        slideData.updatePage(activePage.id, activePage);\n\n        return true;\n    },\n};\n", "export default {\n  \"imageCommonPanel\": \"univer-image-common-panel\",\n  \"imageCommonPanelGrid\": \"univer-image-common-panel-grid\",\n  \"imageCommonPanelBorder\": \"univer-image-common-panel-border\",\n  \"imageCommonPanelTitle\": \"univer-image-common-panel-title\",\n  \"imageCommonPanelSubtitle\": \"univer-image-common-panel-subtitle\",\n  \"imageCommonPanelRow\": \"univer-image-common-panel-row\",\n  \"imageCommonPanelRowVertical\": \"univer-image-common-panel-row-vertical\",\n  \"imageCommonPanelColumn\": \"univer-image-common-panel-column\",\n  \"imageCommonPanelColumnCenter\": \"univer-image-common-panel-column-center\",\n  \"imageCommonPanelInline\": \"univer-image-common-panel-inline\",\n  \"imageCommonPanelSpan2\": \"univer-image-common-panel-span2\",\n  \"imageCommonPanelSpan3\": \"univer-image-common-panel-span3\",\n  \"imageCommonPanelInput\": \"univer-image-common-panel-input\",\n  \"slidePanelColorPicker\": \"univer-slide-panel-color-picker\"\n};import \"ni:sha-256;llj8KI4KlXYZw1CUb9oYwLVF9twgaqlpMx0VG2vLjnI\";", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Nullable } from '@univerjs/core';\nimport type { Image, Rect, RichText } from '@univerjs/engine-render';\nimport { ICommandService, LocaleService } from '@univerjs/core';\nimport { Button, clsx } from '@univerjs/design';\nimport { BottomSingle, MoveDownSingle, MoveUpSingle, TopmostSingle } from '@univerjs/icons';\nimport { useDependency } from '@univerjs/ui';\nimport { UpdateSlideElementOperation } from '../../commands/operations/update-element.operation';\nimport { CanvasView } from '../../controllers/canvas-view';\nimport styles from './index.module.less';\n\nenum ArrangeTypeEnum {\n    forward,\n    backward,\n    front,\n    back,\n}\n\ninterface IProps {\n    pageId: string;\n    unitId: string;\n}\n\nexport default function ArrangePanel(props: IProps) {\n    const { pageId, unitId } = props;\n\n    const localeService = useDependency(LocaleService);\n    const canvasView = useDependency(CanvasView);\n    const commandService = useDependency(ICommandService);\n\n    const page = canvasView.getRenderUnitByPageId(pageId, unitId);\n    const scene = page?.scene;\n    if (!scene) return null;\n\n    const transformer = scene.getTransformer();\n    if (!transformer) return null;\n\n    const selectedObjects = transformer.getSelectedObjectMap();\n    const object = selectedObjects.values().next().value as Nullable<Rect | RichText | Image>;\n    if (!object) return null;\n\n    const onArrangeBtnClick = (arrangeType: ArrangeTypeEnum) => {\n        const allObjects = scene.getAllObjects();\n\n        const [minZIndex, maxZIndex] = allObjects.reduce(([min, max], obj) => {\n            const zIndex = obj.zIndex;\n            const minZIndex = zIndex < min ? zIndex : min;\n            const maxZIndex = zIndex > max ? zIndex : max;\n\n            return [minZIndex, maxZIndex];\n        }, [0, 0]);\n\n        let zIndex = object.zIndex;\n        if (arrangeType === ArrangeTypeEnum.back) {\n            zIndex = minZIndex - 1;\n        } else if (arrangeType === ArrangeTypeEnum.front) {\n            zIndex = maxZIndex + 1;\n        } else if (arrangeType === ArrangeTypeEnum.forward) {\n            zIndex = object.zIndex + 1;\n        } else if (arrangeType === ArrangeTypeEnum.backward) {\n            zIndex = object.zIndex - 1;\n        }\n\n        object.setProps({\n            zIndex,\n        });\n\n        commandService.executeCommand(UpdateSlideElementOperation.id, {\n            unitId,\n            oKey: object?.oKey,\n            props: {\n                zIndex,\n            },\n        });\n    };\n\n    return (\n        <div className={styles.imageCommonPanelGrid}>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelTitle)}>\n                    <div>{localeService.t('image-panel.arrange.title')}</div>\n                </div>\n            </div>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2)}>\n                    <Button size=\"small\" onClick={() => { onArrangeBtnClick(ArrangeTypeEnum.forward); }}>\n                        <span className={styles.imageCommonPanelInline}>\n                            <MoveUpSingle />\n                            {localeService.t('image-panel.arrange.forward')}\n                        </span>\n\n                    </Button>\n                </div>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2)}>\n                    <Button size=\"small\" onClick={() => { onArrangeBtnClick(ArrangeTypeEnum.backward); }}>\n                        <span className={styles.imageCommonPanelInline}>\n                            <MoveDownSingle />\n                            {localeService.t('image-panel.arrange.backward')}\n                        </span>\n\n                    </Button>\n                </div>\n            </div>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2)}>\n                    <Button size=\"small\" onClick={() => { onArrangeBtnClick(ArrangeTypeEnum.front); }}>\n                        <span className={styles.imageCommonPanelInline}>\n                            <TopmostSingle />\n                            {localeService.t('image-panel.arrange.front')}\n                        </span>\n\n                    </Button>\n                </div>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2)}>\n                    <Button size=\"small\" onClick={() => { onArrangeBtnClick(ArrangeTypeEnum.back); }}>\n                        <span className={styles.imageCommonPanelInline}>\n                            <BottomSingle />\n                            {localeService.t('image-panel.arrange.back')}\n                        </span>\n\n                    </Button>\n                </div>\n            </div>\n        </div>\n    );\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Nullable } from '@univerjs/core';\n\nimport type { Rect } from '@univerjs/engine-render';\nimport { ICommandService, LocaleService } from '@univerjs/core';\nimport { clsx, ColorPicker, Dropdown } from '@univerjs/design';\nimport { MoreDownSingle, PaintBucket } from '@univerjs/icons';\nimport { useDependency } from '@univerjs/ui';\n\nimport React from 'react';\nimport { UpdateSlideElementOperation } from '../../commands/operations/update-element.operation';\nimport { CanvasView } from '../../controllers/canvas-view';\nimport styles from './index.module.less';\n\ninterface IProps {\n    pageId: string;\n    unitId: string;\n}\n\n/**\n *\n * @param props\n */\nexport default function ArrangePanel(props: IProps) {\n    const { pageId, unitId } = props;\n\n    const localeService = useDependency(LocaleService);\n    const canvasView = useDependency(CanvasView);\n    const commandService = useDependency(ICommandService);\n\n    const page = canvasView.getRenderUnitByPageId(pageId, unitId);\n    const scene = page?.scene;\n    if (!scene) return null;\n\n    const transformer = scene.getTransformer();\n    if (!transformer) return null;\n\n    const selectedObjects = transformer.getSelectedObjectMap();\n    const object = selectedObjects.values().next().value as Nullable<Rect>;\n    if (!object) return null;\n\n    const [color, setColor] = React.useState<string>(object.fill?.toString() ?? '');\n\n    /**\n     *\n     * @param color\n     */\n    function handleChangeColor(color: string) {\n        object?.setProps({\n            fill: color,\n        });\n        commandService.executeCommand(UpdateSlideElementOperation.id, {\n            unitId,\n            oKey: object?.oKey,\n            props: {\n                shape: {\n                    shapeProperties: {\n                        shapeBackgroundFill: {\n                            rgb: color,\n                        },\n                    },\n                },\n            },\n        });\n        setColor(color);\n    }\n\n    return (\n        <div\n            className={clsx(styles.imageCommonPanelGrid, styles.imageCommonPanelBorder)}\n        >\n            <div className={styles.imageCommonPanelGrid}>\n                <div className={styles.imageCommonPanelRow}>\n                    <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelTitle)}>\n                        <div>{localeService.t('slide.panel.fill.title')}</div>\n                    </div>\n                </div>\n                <div className={styles.imageCommonPanelRow}>\n                    <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2)}>\n                        <Dropdown\n                            overlay={(\n                                <div className=\"univer-rounded-lg univer-p-4\">\n                                    <ColorPicker\n                                        value=\"#fff\"\n                                        onChange={handleChangeColor}\n                                    />\n                                </div>\n                            )}\n                        >\n                            <a className={styles.uiPluginSheetsBorderPanelButton}>\n                                <PaintBucket extend={{ colorChannel1: color ?? 'rgb(var(--primary-color))' }} />\n                                <span className={styles.uiPluginSheetsBorderPanelMoreIcon}>\n                                    <MoreDownSingle />\n                                </span>\n                            </a>\n                        </Dropdown>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Nullable } from '@univerjs/core';\nimport type { BaseObject, IChangeObserverConfig, Image, Rect, RichText } from '@univerjs/engine-render';\nimport { ICommandService, LocaleService } from '@univerjs/core';\nimport { clsx, InputNumber } from '@univerjs/design';\nimport { useDependency } from '@univerjs/ui';\nimport { useEffect, useState } from 'react';\nimport { UpdateSlideElementOperation } from '../../commands/operations/update-element.operation';\nimport { CanvasView } from '../../controllers/canvas-view';\nimport styles from './index.module.less';\n\ninterface IProps {\n    pageId: string;\n    unitId: string;\n}\n\nexport default function TransformPanel(props: IProps) {\n    const { pageId, unitId } = props;\n\n    const localeService = useDependency(LocaleService);\n    const canvasView = useDependency(CanvasView);\n    const commandService = useDependency(ICommandService);\n\n    const page = canvasView.getRenderUnitByPageId(pageId, unitId);\n    const scene = page?.scene;\n    if (!scene) return null;\n\n    const transformer = scene.getTransformer();\n    if (!transformer) return null;\n\n    const selectedObjects = transformer.getSelectedObjectMap();\n    const object = selectedObjects.values().next().value as Nullable<Rect | Image | RichText>;\n    if (!object) return null;\n\n    const {\n        width: originWidth = 0,\n        height: originHeight = 0,\n        left: originX = 0,\n        top: originY = 0,\n        angle: originRotation = 0,\n    } = object;\n\n    const [width, setWidth] = useState<number>(originWidth);\n    const [height, setHeight] = useState(originHeight);\n    const [xPosition, setXPosition] = useState(originX);\n    const [yPosition, setYPosition] = useState(originY);\n    const [rotation, setRotation] = useState(originRotation);\n    // const [lockRatio, setLockRatio] = useState(transformer.keepRatio);\n\n    // const handleLockRatioChange = (val: string | number | boolean) => {\n    //     setLockRatio(val as boolean);\n    //     transformer.keepRatio = val as boolean;\n    // };\n\n    const changeObs = (state: IChangeObserverConfig) => {\n        const { objects } = state;\n\n        const object = objects.values().next().value as BaseObject;\n\n        const {\n            width: originWidth = 0,\n            height: originHeight = 0,\n            left: originX = 0,\n            top: originY = 0,\n            angle: originRotation = 0,\n        } = object;\n\n        setWidth(originWidth);\n        setHeight(originHeight);\n        setXPosition(originX);\n        setYPosition(originY);\n        setRotation(originRotation);\n\n        // const params = getUpdateParams(objects, drawingManagerService);\n\n        // if (params.length !== 1) {\n        //     return;\n        // }\n\n        // const drawingParam = params[0];\n\n        // if (drawingParam == null) {\n        //     return;\n        // }\n\n        // const { transform } = drawingParam;\n\n        // if (transform == null) {\n        //     return;\n        // }\n\n        // const {\n        //     width: originWidth,\n        //     height: originHeight,\n        //     left: originX,\n        //     top: originY,\n        //     angle: originRotation,\n        // } = transform;\n\n        // if (originWidth != null) {\n        //     setWidth(originWidth);\n        // }\n\n        // if (originHeight != null) {\n        //     setHeight(originHeight);\n        // }\n\n        // if (originX != null) {\n        //     setXPosition(originX);\n        // }\n\n        // if (originY != null) {\n        //     setYPosition(originY);\n        // }\n\n        // if (originRotation != null) {\n        //     setRotation(originRotation);\n        // }\n    };\n\n    useEffect(() => {\n        const changeStartSub = transformer.changeStart$.subscribe((state) => {\n            changeObs(state);\n        });\n\n        const changingSub = transformer.changing$.subscribe((state) => {\n            changeObs(state);\n        });\n\n        // const focusSub = drawingManagerService.focus$.subscribe((drawings) => {\n        //     if (drawings.length !== 1) {\n        //         return;\n        //     }\n\n        //     const drawingParam = drawingManagerService.getDrawingByParam(drawings[0]);\n\n        //     if (drawingParam == null) {\n        //         return;\n        //     }\n\n        //     const transform = drawingParam.transform;\n\n        //     if (transform == null) {\n        //         return;\n        //     }\n\n        //     const {\n        //         width: originWidth,\n        //         height: originHeight,\n        //         left: originX,\n        //         top: originY,\n        //         angle: originRotation,\n        //     } = transform;\n\n        //     if (originWidth != null) {\n        //         setWidth(originWidth);\n        //     }\n\n        //     if (originHeight != null) {\n        //         setHeight(originHeight);\n        //     }\n\n        //     if (originX != null) {\n        //         setXPosition(originX);\n        //     }\n\n        //     if (originY != null) {\n        //         setYPosition(originY);\n        //     }\n\n        //     if (originRotation != null) {\n        //         setRotation(originRotation);\n        //     }\n        // });\n\n        return () => {\n            changingSub.unsubscribe();\n            changeStartSub.unsubscribe();\n            // focusSub.unsubscribe();\n        };\n    }, []);\n\n    function handleWidthChange(val: number | null) {\n        if (!val || !object) return;\n\n        commandService.executeCommand(UpdateSlideElementOperation.id, {\n            pageId,\n            oKey: object.oKey,\n            props: {\n                width: val,\n            },\n        });\n        object?.resize(val, object.height);\n        setWidth(val);\n        transformer?.refreshControls();\n    }\n\n    function handleHeightChange(val: number | null) {\n        if (!val || !object) return;\n\n        commandService.executeCommand(UpdateSlideElementOperation.id, {\n            pageId,\n            oKey: object.oKey,\n            props: {\n                height: val,\n            },\n        });\n        object?.resize(object.width, val);\n        setHeight(val);\n        transformer?.refreshControls();\n    }\n\n    function handleXChange(val: number | null) {\n        if (!val || !object) return;\n\n        commandService.executeCommand(UpdateSlideElementOperation.id, {\n            pageId,\n            oKey: object.oKey,\n            props: {\n                left: val,\n            },\n        });\n        object?.translate(val, object.top);\n        setXPosition(val);\n        transformer?.refreshControls();\n    }\n\n    function handleYChange(val: number | null) {\n        if (!val || !object) return;\n\n        commandService.executeCommand(UpdateSlideElementOperation.id, {\n            pageId,\n            oKey: object.oKey,\n            props: {\n                right: val,\n            },\n        });\n        object?.translate(object.left, val);\n        setYPosition(val);\n        transformer?.refreshControls();\n    }\n\n    function handleChangeRotation(val: number | null) {\n        if (!val || !object) return;\n\n        commandService.executeCommand(UpdateSlideElementOperation.id, {\n            pageId,\n            oKey: object.oKey,\n            props: {\n                angle: val,\n            },\n        });\n        object?.transformByState({\n            angle: val,\n        });\n        setRotation(val);\n        transformer?.refreshControls();\n    }\n\n    return (\n        <div\n            className={clsx(styles.imageCommonPanelGrid, styles.imageCommonPanelBorder)}\n        >\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelTitle)}>\n                    <div>{localeService.t('image-panel.transform.title')}</div>\n                </div>\n            </div>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan3)}>\n                    <label>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                {localeService.t('image-panel.transform.width')}\n                            </div>\n                        </div>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                <InputNumber\n                                    className={styles.imageCommonPanelInput}\n                                    min={1}\n                                    value={width}\n                                    onChange={(val) => { handleWidthChange(val); }}\n                                />\n                            </div>\n                        </div>\n                    </label>\n                </div>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan3)}>\n                    <label>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                {localeService.t('image-panel.transform.height')}\n                            </div>\n                        </div>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                <InputNumber\n                                    className={styles.imageCommonPanelInput}\n                                    min={1}\n                                    value={height}\n                                    onChange={(val) => { handleHeightChange(val); }}\n                                />\n                            </div>\n                        </div>\n                    </label>\n                </div>\n                {/* <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan3)}>\n                    <label>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                {localeService.t('image-panel.transform.lock')}\n                            </div>\n                        </div>\n                        <div className={clsx(styles.imageCommonPanelRow, styles.imageCommonPanelRowVertical)}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                <Checkbox checked={lockRatio} onChange={handleLockRatioChange}></Checkbox>\n                            </div>\n                        </div>\n                    </label>\n                </div> */}\n            </div>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan3)}>\n                    <label>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                {localeService.t('image-panel.transform.x')}\n                            </div>\n                        </div>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                <InputNumber\n                                    className={styles.imageCommonPanelInput}\n                                    precision={1}\n                                    min={0}\n                                    value={xPosition}\n                                    onChange={(val) => { handleXChange(val); }}\n                                />\n                            </div>\n                        </div>\n                    </label>\n                </div>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan3)}>\n                    <label>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                {localeService.t('image-panel.transform.y')}\n                            </div>\n                        </div>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                <InputNumber\n                                    className={styles.imageCommonPanelInput}\n                                    precision={1}\n                                    min={0}\n                                    value={yPosition}\n                                    onChange={(val) => { handleYChange(val); }}\n                                />\n                            </div>\n                        </div>\n                    </label>\n                </div>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan3)}>\n                    <label>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                {localeService.t('image-panel.transform.rotate')}\n                            </div>\n                        </div>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                <InputNumber\n                                    className={styles.imageCommonPanelInput}\n                                    precision={1}\n                                    value={rotation}\n                                    onChange={handleChangeRotation}\n                                />\n                            </div>\n                        </div>\n                    </label>\n                </div>\n            </div>\n        </div>\n    );\n}\n", "export default {\n  \"imageCommonPanel\": \"univer-image-common-panel\",\n  \"imageCommonPanelGrid\": \"univer-image-common-panel-grid\",\n  \"imageCommonPanelBorder\": \"univer-image-common-panel-border\",\n  \"imageCommonPanelTitle\": \"univer-image-common-panel-title\",\n  \"imageCommonPanelSubtitle\": \"univer-image-common-panel-subtitle\",\n  \"imageCommonPanelRow\": \"univer-image-common-panel-row\",\n  \"imageCommonPanelRowVertical\": \"univer-image-common-panel-row-vertical\",\n  \"imageCommonPanelColumn\": \"univer-image-common-panel-column\",\n  \"imageCommonPanelColumnCenter\": \"univer-image-common-panel-column-center\",\n  \"imageCommonPanelInline\": \"univer-image-common-panel-inline\",\n  \"imageCommonPanelSpan2\": \"univer-image-common-panel-span2\",\n  \"imageCommonPanelSpan3\": \"univer-image-common-panel-span3\",\n  \"imageCommonPanelInput\": \"univer-image-common-panel-input\"\n};import \"ni:sha-256;ju2yECSWwlw_RW-qUxj4C_rHXzdRKL9wt_MPj-Rt-OA\";", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Nullable, SlideDataModel } from '@univerjs/core';\nimport type { BaseObject } from '@univerjs/engine-render';\nimport { IUniverInstanceService, UniverInstanceType } from '@univerjs/core';\nimport { ObjectType } from '@univerjs/engine-render';\nimport { useDependency } from '@univerjs/ui';\n\nimport React from 'react';\nimport { CanvasView } from '../../controllers/canvas-view';\nimport ArrangePanel from '../panels/ArrangePanel';\nimport FillPanel from '../panels/FillPanel';\nimport TransformPanel from '../panels/TransformPanel';\nimport styles from './index.module.less';\n\nexport const COMPONENT_SLIDE_SIDEBAR = 'COMPONENT_SLIDE_SIDEBAR';\n\nexport default function RectSidebar() {\n    const univerInstanceService = useDependency(IUniverInstanceService);\n    const canvasView = useDependency(CanvasView);\n\n    const currentSlide = univerInstanceService.getCurrentUnitForType<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE);\n    const pageId = currentSlide?.getActivePage()?.id;\n\n    if (!pageId) return null;\n\n    const page = canvasView.getRenderUnitByPageId(pageId, pageId);\n    const transformer = page.scene?.getTransformer();\n\n    if (!transformer) return null;\n\n    const selectedObjects = transformer.getSelectedObjectMap();\n\n    const object = selectedObjects.values().next().value as Nullable<BaseObject>;\n    if (!object) {\n        return null;\n    }\n\n    // see packages/sheets-ui/src/views/permission/permission-dialog/index.tsx@SheetPermissionDialog\n    // see packages/sheets-conditional-formatting-ui/src/components/panel/rule-edit/index.tsx@getUnitId\n    // const unitId = univerInstanceService.getCurrentUnitForType(UniverInstanceType.UNIVER_SLIDE)!.getUnitId();\n    const unitId = univerInstanceService.getFocusedUnit()?.getUnitId() || '';\n\n    return (\n        <section className={styles.imageCommonPanel}>\n            <ArrangePanel pageId={pageId} unitId={unitId} />\n            <TransformPanel pageId={pageId} unitId={unitId} />\n            {object.objectType === ObjectType.RECT && <FillPanel pageId={pageId} unitId={unitId} />}\n        </section>\n    );\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand, SlideDataModel } from '@univerjs/core';\nimport { BasicShapes, CommandType, generateRandomId, ICommandService, IUniverInstanceService, LocaleService, PageElementType } from '@univerjs/core';\nimport { ObjectType } from '@univerjs/engine-render';\n\nimport { ISidebarService } from '@univerjs/ui';\nimport { COMPONENT_SLIDE_SIDEBAR } from '../../components/sidebar/Sidebar';\nimport { CanvasView } from '../../controllers/canvas-view';\n\nexport interface IInsertShapeOperationParams {\n    unitId: string;\n};\n\nexport const InsertSlideShapeRectangleCommand: ICommand = {\n    id: 'slide.command.insert-float-shape',\n    type: CommandType.COMMAND,\n    handler: async (accessor: IAccessor) => {\n        const commandService = accessor.get(ICommandService);\n        const instanceService = accessor.get(IUniverInstanceService);\n        const unitId = instanceService.getFocusedUnit()?.getUnitId();\n        return commandService.executeCommand(InsertSlideShapeRectangleOperation.id, { unitId });\n    },\n};\n\nexport const InsertSlideShapeRectangleOperation: ICommand<IInsertShapeOperationParams> = {\n    id: 'slide.operation.insert-float-shape',\n    type: CommandType.OPERATION,\n    handler: async (accessor, params: IInsertShapeOperationParams) => {\n        const id = generateRandomId(6);\n\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        // const slideData = univerInstanceService.getCurrentUnitForType<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE);\n\n        const unitId = params.unitId;\n        const slideData = univerInstanceService.getUnit<SlideDataModel>(unitId);\n\n        if (!slideData) return false;\n\n        const activePage = slideData.getActivePage()!;\n        const elements = Object.values(activePage.pageElements);\n        const maxIndex = (elements?.length) ? Math.max(...elements.map((element) => element.zIndex)) : 20;\n        const data = {\n            id,\n            zIndex: maxIndex + 1,\n            left: 378,\n            top: 142,\n            width: 250,\n            height: 250,\n            title: id,\n            description: '',\n            type: PageElementType.SHAPE,\n            shape: {\n                shapeType: BasicShapes.Rect,\n                text: '',\n                shapeProperties: {\n                    shapeBackgroundFill: {\n                        rgb: 'rgb(0,0,255)',\n                    },\n                },\n            },\n        };\n        activePage.pageElements[id] = data;\n        slideData.updatePage(activePage.id, activePage);\n\n        const canvasview = accessor.get(CanvasView);\n        const sceneObject = canvasview.createObjectToPage(data, activePage.id, unitId);\n        if (sceneObject) {\n            canvasview.setObjectActiveByPage(sceneObject, activePage.id, unitId);\n        }\n\n        return true;\n    },\n};\n\nexport interface IToggleSlideEditSidebarOperation {\n    visible: string;\n    objectType: ObjectType;\n}\n\nexport const ToggleSlideEditSidebarOperation: ICommand = {\n    id: 'sidebar.operation.slide-shape',\n    type: CommandType.COMMAND,\n    handler: async (accessor: IAccessor, params: IToggleSlideEditSidebarOperation) => {\n        const { visible, objectType } = params;\n\n        const sidebarService = accessor.get(ISidebarService);\n        const localeService = accessor.get(LocaleService);\n\n        let title = '';\n        let children = '';\n        if (objectType === ObjectType.RECT) {\n            title = 'slide.sidebar.shape';\n            children = COMPONENT_SLIDE_SIDEBAR;\n        } else if (objectType === ObjectType.IMAGE) {\n            title = 'slide.sidebar.image';\n            children = COMPONENT_SLIDE_SIDEBAR;\n        } else if (objectType === ObjectType.RICH_TEXT) {\n            title = 'slide.sidebar.text';\n            children = COMPONENT_SLIDE_SIDEBAR;\n        }\n\n        if (visible) {\n            sidebarService.open({\n                header: { title: localeService.t(title) },\n                children: { label: children },\n                onClose: () => {\n                        // drawingManagerService.focusDrawing(null);\n                },\n                width: 360,\n            });\n        } else {\n            sidebarService.close();\n        }\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommand, IPageElement, SlideDataModel } from '@univerjs/core';\nimport { CommandType, generateRandomId, ICommandService, IUniverInstanceService, PageElementType } from '@univerjs/core';\nimport { CanvasView } from '../../controllers/canvas-view';\n\nexport interface ISlideAddTextParam {\n    text: string;\n    unitId: string;\n};\n\nexport const SlideAddTextCommand: ICommand = {\n    id: 'slide.command.add-text',\n    type: CommandType.COMMAND,\n    handler: async (accessor) => {\n        const commandService = accessor.get(ICommandService);\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        const unitId = univerInstanceService.getFocusedUnit()?.getUnitId();\n        return await commandService.executeCommand(SlideAddTextOperation.id, { unitId });\n    },\n\n};\n\nexport const SlideAddTextOperation: ICommand<ISlideAddTextParam> = {\n    id: 'slide.operation.add-text',\n    type: CommandType.OPERATION,\n    handler: async (accessor, params: ISlideAddTextParam) => {\n        const unitId = params.unitId;\n\n        const elementId = generateRandomId(6);\n        const defaultWidth = 220;\n        const defaultheight = 40;\n        const left = 230;\n        const top = 142;\n        const textContent = params?.text || 'A New Text';\n\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        // const slideData = univerInstanceService.getCurrentUnitForType<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE);\n\n        const slideData = univerInstanceService.getUnit<SlideDataModel>(unitId);\n        if (!slideData) return false;\n\n        const activePage = slideData.getActivePage()!;\n\n        const elements = Object.values(activePage.pageElements);\n        const maxIndex = (elements?.length) ? Math.max(...elements.map((element) => element.zIndex)) : 21;\n        const elementData: IPageElement = {\n            id: elementId,\n            zIndex: maxIndex + 1,\n            left,\n            top,\n            width: defaultWidth,\n            height: defaultheight,\n            title: 'text',\n            description: '',\n            type: PageElementType.TEXT,\n            richText: {\n                text: textContent,\n                fs: 30,\n                cl: {\n                    rgb: 'rgb(51, 51, 51)',\n                },\n                bl: 1,\n            },\n        };\n\n        activePage.pageElements[elementId] = elementData;\n        slideData.updatePage(activePage.id, activePage);\n\n        const canvasview = accessor.get(CanvasView);\n        const sceneObject = canvasview.createObjectToPage(elementData, activePage.id, unitId);\n        // make object active: a control rect wrap the object.\n        if (sceneObject) {\n            canvasview.setObjectActiveByPage(sceneObject, activePage.id, unitId);\n        }\n\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, IOperation } from '@univerjs/core';\nimport { CommandType } from '@univerjs/core';\nimport { CanvasView } from '../../controllers/canvas-view';\n\nexport interface ISlideSetThumbParam {\n    unitId: string;\n}\n\nexport const SetSlidePageThumbOperation: IOperation = {\n    id: 'slide.operation.set-slide-page-thumb',\n    type: CommandType.OPERATION,\n    handler: (accessor: IAccessor, params: ISlideSetThumbParam) => {\n        const canvasView = accessor.get(CanvasView);\n        canvasView.createThumbs(params.unitId);\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IOperation } from '@univerjs/core';\nimport { CommandType } from '@univerjs/core';\n\nexport const SetTextEditArrowOperation: IOperation<any> = {\n    id: 'slide.operation.edit-arrow',\n    type: CommandType.OPERATION,\n    handler: () => true,\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const COMPONENT_SLIDE_IMAGE_POPUP_MENU = 'COMPONENT_SLIDE_IMAGE_POPUP_MENU';\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingSearch } from '@univerjs/core';\nimport { ICommandService, LocaleService } from '@univerjs/core';\nimport { clsx, Dropdown } from '@univerjs/design';\nimport { Autofill, MoreDownSingle } from '@univerjs/icons';\nimport { useDependency } from '@univerjs/ui';\nimport { useState } from 'react';\nimport styles from './index.module.less';\n\nexport interface IImagePopupMenuItem {\n    label: string;\n    index: number;\n    commandId: string;\n    commandParams?: IDrawingSearch[];\n    disable: boolean;\n}\n\nexport interface IImagePopupMenuExtraProps {\n    menuItems: IImagePopupMenuItem[];\n}\n\nexport interface IImagePopupMenuProps {\n    popup: {\n        extraProps?: IImagePopupMenuExtraProps;\n    };\n}\n\nexport function SlideImagePopupMenu(props: IImagePopupMenuProps) {\n    const menuItems = props.popup?.extraProps?.menuItems;\n\n    if (!menuItems) {\n        return null;\n    }\n\n    const commandService = useDependency(ICommandService);\n    const localeService = useDependency(LocaleService);\n\n    const [visible, setVisible] = useState(false);\n    const [isHovered, setHovered] = useState(false);\n\n    const handleMouseEnter = () => {\n        setHovered(true);\n    };\n\n    const handleMouseLeave = () => {\n        setHovered(false);\n    };\n\n    const onVisibleChange = (visible: boolean) => {\n        setVisible(visible);\n    };\n\n    const handleClick = (item: IImagePopupMenuItem) => {\n        commandService.executeCommand(item.commandId, item.commandParams);\n        setVisible(false);\n    };\n\n    const showMore = visible || isHovered;\n\n    const availableMenu = menuItems.filter((item) => !item.disable);\n\n    return (\n        <div\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n        >\n            <Dropdown\n                align=\"start\"\n                overlay={(\n                    <ul\n                        className={clsx(styles.imagePopupMenu, `\n                          univer-box-border univer-p-2 univer-text-sm univer-theme\n                        `)}\n                    >\n                        {availableMenu.map((item) => (\n                            <li\n                                key={item.index}\n                                onClick={() => handleClick(item)}\n                                className={styles.imagePopupMenuItem}\n                            >\n                                <span className={styles.imagePopupMenuItemTitle}>{localeService.t(item.label)}</span>\n                            </li>\n                        ))}\n                    </ul>\n                )}\n                open={visible}\n                onOpenChange={onVisibleChange}\n            >\n                <div\n                    className={clsx(styles.btnContainer, {\n                        [styles.btnContainerExpand]: visible,\n                    })}\n                >\n                    <Autofill\n                        style={{ color: '#35322B' }}\n                        extend={{ colorChannel1: 'rgb(var(--green-700, #409f11))' }}\n                    />\n                    {showMore && <MoreDownSingle style={{ color: '#CCCCCC', fontSize: '8px', marginLeft: '8px' }} />}\n                </div>\n            </Dropdown>\n        </div>\n    );\n};\n", "export default {\n  \"imagePopupMenu\": \"univer-image-popup-menu\",\n  \"imagePopupMenuItem\": \"univer-image-popup-menu-item\",\n  \"imagePopupMenuItemIcon\": \"univer-image-popup-menu-item-icon\",\n  \"imagePopupMenuItemTitle\": \"univer-image-popup-menu-item-title\",\n  \"imagePopupMenuItemHide\": \"univer-image-popup-menu-item-hide\",\n  \"btnContainer\": \"univer-btn-container\",\n  \"btnContainerExpand\": \"univer-btn-container-expand\"\n};import \"ni:sha-256;21aKKK6Y8uNX4W1cnpnsBtga4cu6UCq4Ribd2kQ3Vrg\";", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { SlideDataModel } from '@univerjs/core';\nimport { ICommandService, IUniverInstanceService, LocaleService, UniverInstanceType } from '@univerjs/core';\nimport { clsx, Scrollbar } from '@univerjs/design';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { useDependency } from '@univerjs/ui';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { ActivateSlidePageOperation } from '../../commands/operations/activate.operation';\nimport { AppendSlideOperation } from '../../commands/operations/append-slide.operation';\nimport { SetSlidePageThumbOperation } from '../../commands/operations/set-thumb.operation';\nimport styles from './index.module.less';\n\n/**\n * This components works as the root component of the left Sidebar of Slide.\n */\n\nexport function SlideSideBar() {\n    const univerInstanceService = useDependency(IUniverInstanceService);\n    const commandService = useDependency(ICommandService);\n    const renderManagerService = useDependency(IRenderManagerService);\n    const localeService = useDependency(LocaleService);\n\n    const slideBarRef = useRef<HTMLDivElement>(null);\n    const currentSlide = univerInstanceService.getCurrentUnitForType<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE);\n\n    // const currentSlide = useObservable(\n    //     () => univerInstanceService.getCurrentTypeOfUnit$<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE),\n    //     undefined,\n    //     undefined,\n    //     []\n    // );\n    const pages = currentSlide?.getPages();\n    const pageOrder = currentSlide?.getPageOrder();\n    if (!pages || !pageOrder) {\n        return null;\n    }\n\n    const slideList = pageOrder.map((id) => pages[id]);\n\n    const [activatePageId, setActivatePageId] = useState<string | null>(currentSlide?.getActivePage()?.id ?? null);\n\n    const divRefs = useMemo(() => slideList.map(() => React.createRef<HTMLDivElement>()), [slideList]);\n\n    useEffect(() => {\n        const subscriber = currentSlide?.activePage$.subscribe((page) => {\n            const id = page?.id ?? null;\n\n            id && setActivatePageId(id);\n        });\n\n        return () => {\n            subscriber?.unsubscribe();\n        };\n    }, []);\n\n    useEffect(() => {\n        divRefs.forEach((ref, index) => {\n            if (ref.current) {\n                const slide = slideList[index];\n                renderManagerService.getRenderById(slide.id)?.engine.setContainer(ref.current);\n            }\n        });\n\n        if (divRefs.length > 0) {\n            commandService.syncExecuteCommand(SetSlidePageThumbOperation.id, { unitId: currentSlide?.getUnitId() });\n        }\n    }, [divRefs, slideList, renderManagerService, commandService, currentSlide]); // \u4F9D\u8D56\u4E8EdivRefs\u6570\u7EC4\u7684\u53D8\u5316\n\n    const activatePage = useCallback((page: string) => {\n        commandService.syncExecuteCommand(ActivateSlidePageOperation.id, { id: page, unitId: currentSlide?.getUnitId() });\n    }, [commandService, currentSlide]);\n\n    const handleAppendSlide = useCallback(() => {\n        commandService.syncExecuteCommand(AppendSlideOperation.id, { unitId: currentSlide?.getUnitId() });\n    }, [commandService, currentSlide]);\n\n    return (\n        <aside className={styles.slideBar} ref={slideBarRef}>\n            <Scrollbar>\n                <div className={styles.slideBarContent}>\n                    <header className={styles.slideBarContentHeader}>\n                        <a onClick={handleAppendSlide}>{localeService.t('slide.append')}</a>\n                    </header>\n\n                    {slideList.map((item, index) => (\n                        <div\n                            key={item.id}\n                            className={clsx(styles.slideBarItem, {\n                                [styles.slideBarItemActive]: item.id === activatePageId,\n                            })}\n                            onClick={() => activatePage(item.id)}\n                        >\n                            <span>{index + 1}</span>\n                            <div ref={divRefs[index]} className={styles.slideBarBox} />\n                        </div>\n                    ))}\n                </div>\n            </Scrollbar>\n        </aside>\n    );\n}\n", "export default {\n  \"slideBar\": \"univer-slide-bar\",\n  \"slideBarContent\": \"univer-slide-bar-content\",\n  \"slideBarContentHeader\": \"univer-slide-bar-content-header\",\n  \"slideBarItem\": \"univer-slide-bar-item\",\n  \"slideBarBox\": \"univer-slide-bar-box\",\n  \"slideBarItemActive\": \"univer-slide-bar-item-active\",\n  \"slideAddButton\": \"univer-slide-add-button\"\n};import \"ni:sha-256;N83HZSAopYS8G6TFIPg5PQ7dGnanE62OO7mI1ogjmaY\";", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDocumentData } from '@univerjs/core';\nimport { DEFAULT_EMPTY_DOCUMENT_VALUE, DocumentFlavor, IContextService } from '@univerjs/core';\nimport { IEditorService } from '@univerjs/docs-ui';\nimport { FIX_ONE_PIXEL_BLUR_OFFSET } from '@univerjs/engine-render';\n\nimport { DISABLE_AUTO_FOCUS_KEY, useDependency, useObservable } from '@univerjs/ui';\nimport React, { useEffect, useState } from 'react';\nimport { SLIDE_EDITOR_ID } from '../../const';\n// import { ICellEditorManagerService } from '../../services/editor/cell-editor-manager.service';\nimport { ISlideEditorManagerService } from '../../services/slide-editor-manager.service';\nimport styles from './index.module.less';\n\ninterface ICellIEditorProps { }\n\nconst HIDDEN_EDITOR_POSITION = -1000;\n\nconst EDITOR_DEFAULT_POSITION = {\n    width: 0,\n    height: 0,\n    top: HIDDEN_EDITOR_POSITION,\n    left: HIDDEN_EDITOR_POSITION,\n};\n\n/**\n * Floating editor's container.\n * @returns\n */\n\nexport const SlideEditorContainer: React.FC<ICellIEditorProps> = () => {\n    const [state, setState] = useState({\n        ...EDITOR_DEFAULT_POSITION,\n    });\n\n    const slideEditorManagerService = useDependency(ISlideEditorManagerService);\n    const editorService = useDependency(IEditorService);\n    const contextService = useDependency(IContextService);\n\n    const disableAutoFocus = useObservable(\n        () => contextService.subscribeContextValue$(DISABLE_AUTO_FOCUS_KEY),\n        false,\n        undefined,\n        [contextService, DISABLE_AUTO_FOCUS_KEY]\n    );\n\n    const snapshot: IDocumentData = {\n        id: SLIDE_EDITOR_ID,\n        body: {\n            dataStream: `${DEFAULT_EMPTY_DOCUMENT_VALUE}`,\n            textRuns: [],\n            paragraphs: [\n                {\n                    startIndex: 0,\n                },\n            ],\n        },\n        documentStyle: {\n            documentFlavor: DocumentFlavor.UNSPECIFIED,\n        },\n    };\n\n    useEffect(() => {\n        slideEditorManagerService.state$.subscribe((param) => {\n            if (param == null) {\n                return;\n            }\n\n            const {\n                startX = HIDDEN_EDITOR_POSITION,\n                startY = HIDDEN_EDITOR_POSITION,\n                endX = 0,\n                endY = 0,\n                show = false,\n            } = param;\n\n            if (!show) {\n                setState({\n                    ...EDITOR_DEFAULT_POSITION,\n                });\n            } else {\n                setState({\n                    width: endX - startX - FIX_ONE_PIXEL_BLUR_OFFSET + 2,\n                    height: endY - startY - FIX_ONE_PIXEL_BLUR_OFFSET + 2,\n                    left: startX + FIX_ONE_PIXEL_BLUR_OFFSET,\n                    top: startY + FIX_ONE_PIXEL_BLUR_OFFSET,\n                });\n\n                const editor = editorService.getEditor(SLIDE_EDITOR_ID);\n\n                if (editor == null) {\n                    return;\n                }\n\n                const { left, top, width, height } = editor.getBoundingClientRect();\n\n                slideEditorManagerService.setRect({ left, top, width, height });\n            }\n        });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []); // Empty dependency array means this effect runs once on mount and clean up on unmount\n\n    useEffect(() => {\n        if (!disableAutoFocus) {\n            slideEditorManagerService.setFocus(true);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [disableAutoFocus, state]);\n\n    return (\n        <div\n            className={styles.slideEditorContainer}\n            style={{\n                left: state.left,\n                top: state.top,\n                width: state.width,\n                height: state.height,\n            }}\n        >\n            {/* <RichTextEditor\n                editorId={SLIDE_EDITOR_ID}\n                className={styles.editorInput}\n                initialValue={snapshot}\n                isSingle={false}\n            /> */}\n        </div>\n    );\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInternalEditorID } from '@univerjs/core';\n\nexport const SLIDE_EDITOR_ID = createInternalEditorID('SLIDE_EDITOR');\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, IPosition, Nullable } from '@univerjs/core';\nimport { createIdentifier } from '@univerjs/core';\nimport type { Observable } from 'rxjs';\nimport { BehaviorSubject } from 'rxjs';\n\nexport interface ICellEditorManagerParam extends Partial<IPosition> {\n    show: boolean;\n}\n\nexport interface ICellEditorBoundingClientRect {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n}\n\nexport interface ISlideEditorManagerService {\n    state$: Observable<Nullable<ICellEditorManagerParam>>;\n    rect$: Observable<Nullable<ICellEditorBoundingClientRect>>;\n    focus$: Observable<boolean>;\n    dispose(): void;\n    setState(param: ICellEditorManagerParam): void;\n    getState(): Readonly<Nullable<ICellEditorManagerParam>>;\n    setRect(param: ICellEditorBoundingClientRect): void;\n    getRect(): Readonly<Nullable<ICellEditorBoundingClientRect>>;\n    setFocus(param: boolean): void;\n}\n\nexport class SlideEditorManagerService implements ISlideEditorManagerService, IDisposable {\n    private _state: Nullable<ICellEditorManagerParam> = null;\n\n    private _rect: Nullable<ICellEditorBoundingClientRect> = null;\n\n    private readonly _state$ = new BehaviorSubject<Nullable<ICellEditorManagerParam>>(null);\n    readonly state$ = this._state$.asObservable();\n\n    private readonly _rect$ = new BehaviorSubject<Nullable<ICellEditorBoundingClientRect>>(null);\n    readonly rect$ = this._rect$.asObservable();\n\n    private _focus: boolean = false;\n    private readonly _focus$ = new BehaviorSubject<boolean>(this._focus);\n    readonly focus$ = this._focus$.asObservable();\n\n    dispose(): void {\n        this._state$.complete();\n        this._state = null;\n        this._rect$.complete();\n        this._rect = null;\n    }\n\n    setState(param: ICellEditorManagerParam) {\n        this._state = param;\n\n        this._refresh(param);\n    }\n\n    getRect(): Readonly<Nullable<ICellEditorBoundingClientRect>> {\n        return this._rect;\n    }\n\n    setRect(param: ICellEditorBoundingClientRect) {\n        this._rect = param;\n        this._rect$.next(param);\n    }\n\n    getState(): Readonly<Nullable<ICellEditorManagerParam>> {\n        return this._state;\n    }\n\n    setFocus(param: boolean = false) {\n        this._focus = param;\n        this._focus$.next(param);\n    }\n\n    private _refresh(param: ICellEditorManagerParam): void {\n        this._state$.next(param);\n    }\n}\n\nexport const ISlideEditorManagerService = createIdentifier<SlideEditorManagerService>(\n    'univer.slide-editor-manager.service'\n);\n", "export default {\n  \"slideEditorContainer\": \"univer-slide-editor-container\",\n  \"editorInput\": \"univer-editor-input\"\n};import \"ni:sha-256;xc2f_HJibgdhdRkmO70Luv6Qz271IA17-_gWwGXTnB0\";", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor } from '@univerjs/core';\nimport type { IMenuItem } from '@univerjs/ui';\nimport { UniverInstanceType } from '@univerjs/core';\nimport { getMenuHiddenObservable, MenuItemType } from '@univerjs/ui';\nimport { InsertSlideFloatImageCommand } from '../commands/operations/insert-image.operation';\n\nexport const IMAGE_UPLOAD_ICON = 'addition-and-subtraction-single';\nexport const SLIDES_IMAGE_MENU_ID = 'slide.menu.image';\n\nexport function SlideImageMenuFactory(accessor: IAccessor): IMenuItem {\n    return {\n        id: SLIDES_IMAGE_MENU_ID,\n        type: MenuItemType.SUBITEMS,\n        icon: IMAGE_UPLOAD_ICON,\n        tooltip: 'slide.image.insert.title',\n        hidden$: getMenuHiddenObservable(accessor, UniverInstanceType.UNIVER_SLIDE),\n    };\n}\n\nexport function UploadSlideFloatImageMenuFactory(_accessor: IAccessor): IMenuItem {\n    return {\n        id: InsertSlideFloatImageCommand.id,\n        title: 'slide.image.insert.float',\n        type: MenuItemType.BUTTON,\n        hidden$: getMenuHiddenObservable(_accessor, UniverInstanceType.UNIVER_SLIDE),\n    };\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IMenuButtonItem, IMenuItem } from '@univerjs/ui';\nimport { getMenuHiddenObservable, MenuItemType } from '@univerjs/ui';\nimport type { IAccessor } from '@univerjs/core';\nimport { UniverInstanceType } from '@univerjs/core';\nimport { InsertSlideShapeRectangleCommand } from '../commands/operations/insert-shape.operation';\n\nexport const GRAPH_SINGLE_ICON = 'graph-single';\nexport const SHAPE_MENU_ID = 'slide.menu.shape';\n\nexport function SlideShapeMenuFactory(accessor: IAccessor): IMenuItem {\n    return {\n        id: SHAPE_MENU_ID,\n        type: MenuItemType.SUBITEMS,\n        icon: GRAPH_SINGLE_ICON,\n        tooltip: 'slide.shape.insert.title',\n        hidden$: getMenuHiddenObservable(accessor, UniverInstanceType.UNIVER_SLIDE),\n        // disabled$: getCurrentRangeDisable$(accessor, { workbookTypes: [WorkbookEditablePermission], worksheetTypes: [WorksheetEditPermission], rangeTypes: [RangeProtectionPermissionEditPoint] }),\n    };\n}\n\nexport function UploadSlideFloatShapeMenuFactory(_accessor: IAccessor): IMenuButtonItem {\n    return {\n        id: InsertSlideShapeRectangleCommand.id,\n        title: 'slide.shape.insert.rectangle',\n        type: MenuItemType.BUTTON,\n        hidden$: getMenuHiddenObservable(_accessor, UniverInstanceType.UNIVER_SLIDE),\n    };\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor } from '@univerjs/core';\nimport { UniverInstanceType } from '@univerjs/core';\nimport type { IMenuButtonItem } from '@univerjs/ui';\nimport { getMenuHiddenObservable, MenuItemType } from '@univerjs/ui';\nimport { SlideAddTextCommand } from '../commands/operations/insert-text.operation';\n\nexport const TEXT_ICON_ID = 'text-single';\n\nexport function SlideAddTextMenuItemFactory(_accessor: IAccessor): IMenuButtonItem {\n    return {\n        id: SlideAddTextCommand.id,\n        type: MenuItemType.BUTTON,\n        icon: TEXT_ICON_ID,\n        tooltip: 'slide.text.insert.title',\n        hidden$: getMenuHiddenObservable(_accessor, UniverInstanceType.UNIVER_SLIDE),\n    };\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { MenuSchemaType } from '@univerjs/ui';\nimport { RibbonStartGroup } from '@univerjs/ui';\nimport { InsertSlideFloatImageCommand } from '../commands/operations/insert-image.operation';\nimport { InsertSlideShapeRectangleCommand } from '../commands/operations/insert-shape.operation';\nimport { SlideAddTextCommand } from '../commands/operations/insert-text.operation';\nimport { SlideImageMenuFactory, SLIDES_IMAGE_MENU_ID, UploadSlideFloatImageMenuFactory } from './image.menu';\nimport { SHAPE_MENU_ID, SlideShapeMenuFactory, UploadSlideFloatShapeMenuFactory } from './shape.menu';\nimport { SlideAddTextMenuItemFactory } from './text.menu';\n\nexport const menuSchema: MenuSchemaType = {\n    [RibbonStartGroup.FORMAT]: {\n        [SlideAddTextCommand.id]: {\n            order: 0,\n            menuItemFactory: SlideAddTextMenuItemFactory,\n        },\n        [SLIDES_IMAGE_MENU_ID]: {\n            order: 0,\n            menuItemFactory: SlideImageMenuFactory,\n            [InsertSlideFloatImageCommand.id]: {\n                order: 0,\n                menuItemFactory: UploadSlideFloatImageMenuFactory,\n            },\n        },\n        [SHAPE_MENU_ID]: {\n            order: 0,\n            menuItemFactory: SlideShapeMenuFactory,\n            [InsertSlideShapeRectangleCommand.id]: {\n                order: 0,\n                menuItemFactory: UploadSlideFloatShapeMenuFactory,\n            },\n        },\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IContextService } from '@univerjs/core';\nimport {\n    EDITOR_ACTIVATED,\n    FOCUSING_COMMON_DRAWINGS,\n    FOCUSING_EDITOR_INPUT_FORMULA,\n    FOCUSING_EDITOR_STANDALONE,\n    FOCUSING_SLIDE,\n    FOCUSING_UNIVER_EDITOR,\n    FORMULA_EDITOR_ACTIVATED,\n} from '@univerjs/core';\n\nexport function whenSheetFocused(contextService: IContextService) {\n    return contextService.getContextValue(FOCUSING_SLIDE);\n}\n\n// FIXME: why coupled with sheet editors?\n\n/**\n * Requires the currently focused unit to be Workbook and the sheet editor is focused but not activated.\n * @param contextService\n * @returns If the sheet editor is focused but not activated.\n */\nexport function whenSheetEditorFocused(contextService: IContextService): boolean {\n    return (\n        contextService.getContextValue(FOCUSING_SLIDE) &&\n        contextService.getContextValue(FOCUSING_UNIVER_EDITOR) &&\n        !contextService.getContextValue(EDITOR_ACTIVATED) &&\n        !contextService.getContextValue(FOCUSING_COMMON_DRAWINGS)\n    );\n}\n\nexport function whenSheetEditorFocusedAndFxNotFocused(contextService: IContextService): boolean {\n    return (\n        contextService.getContextValue(FOCUSING_SLIDE) &&\n        contextService.getContextValue(FOCUSING_UNIVER_EDITOR) &&\n        !contextService.getContextValue(EDITOR_ACTIVATED) &&\n        !contextService.getContextValue(FORMULA_EDITOR_ACTIVATED) &&\n        !contextService.getContextValue(FOCUSING_COMMON_DRAWINGS)\n    );\n}\n\n/**\n * Requires the currently focused unit to be Workbook and the sheet editor is activated.\n * @param contextService\n * @returns If the sheet editor is activated.\n */\nexport function whenSheetEditorActivated(contextService: IContextService) {\n    return (\n        contextService.getContextValue(FOCUSING_SLIDE) &&\n        contextService.getContextValue(FOCUSING_UNIVER_EDITOR) &&\n        contextService.getContextValue(EDITOR_ACTIVATED)\n    );\n}\n\nexport function whenEditorActivated(contextService: IContextService) {\n    return contextService.getContextValue(FOCUSING_UNIVER_EDITOR) && contextService.getContextValue(EDITOR_ACTIVATED);\n}\n\n/**\n * Requires the currently focused editor is a formula editor.\n * @param contextService\n * @returns If the formula editor is focused.\n */\nexport function whenFormulaEditorFocused(contextService: IContextService) {\n    return (\n        contextService.getContextValue(FORMULA_EDITOR_ACTIVATED) &&\n        contextService.getContextValue(FOCUSING_UNIVER_EDITOR)\n    );\n}\n\n/**\n * Requires the currently focused editor is a formula editor, and it is activated.\n * @param contextService\n * @returns If the formula editor is activated.\n */\nexport function whenFormulaEditorActivated(contextService: IContextService) {\n    return (\n        contextService.getContextValue(FOCUSING_SLIDE) &&\n        contextService.getContextValue(EDITOR_ACTIVATED) &&\n        contextService.getContextValue(FOCUSING_EDITOR_INPUT_FORMULA) &&\n        contextService.getContextValue(FOCUSING_UNIVER_EDITOR)\n    );\n}\n\n/**\n * Requires the currently focused editor is not a formula editor, and it is activated.\n * @param contextService\n * @returns If the editor is activated and the editor is not the formula editor.\n */\nexport function whenEditorDidNotInputFormulaActivated(contextService: IContextService) {\n    return (\n        contextService.getContextValue(FOCUSING_SLIDE) &&\n        contextService.getContextValue(FOCUSING_UNIVER_EDITOR) &&\n        contextService.getContextValue(EDITOR_ACTIVATED) &&\n        !contextService.getContextValue(FOCUSING_EDITOR_INPUT_FORMULA) &&\n        !contextService.getContextValue(FOCUSING_EDITOR_STANDALONE)\n    );\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DeleteLeftCommand } from '@univerjs/docs-ui';\nimport { DeviceInputEventType } from '@univerjs/engine-render';\nimport { KeyCode, MetaKeys } from '@univerjs/ui';\nimport type { IShortcutItem } from '@univerjs/ui';\nimport { SetTextEditArrowOperation } from '../../commands/operations/text-edit.operation';\nimport {\n    whenEditorActivated,\n    whenFormulaEditorFocused,\n} from './utils';\n\nexport const ARROW_SELECTION_KEYCODE_LIST = [\n    KeyCode.ARROW_DOWN,\n    KeyCode.ARROW_UP,\n    KeyCode.ARROW_LEFT,\n    KeyCode.ARROW_RIGHT,\n];\n\nexport const MOVE_SELECTION_KEYCODE_LIST = [KeyCode.ENTER, KeyCode.TAB, ...ARROW_SELECTION_KEYCODE_LIST];\n\nexport function generateArrowSelectionShortCutItem() {\n    const shortcutList: IShortcutItem[] = [];\n\n    for (const keycode of ARROW_SELECTION_KEYCODE_LIST) {\n        shortcutList.push({\n            id: SetTextEditArrowOperation.id,\n            binding: keycode,\n            preconditions: (contextService) => whenEditorActivated(contextService),\n            staticParameters: {\n                visible: false,\n                eventType: DeviceInputEventType.Keyboard,\n                keycode,\n                isShift: false,\n            },\n        });\n\n        shortcutList.push({\n            id: SetTextEditArrowOperation.id,\n            binding: keycode | MetaKeys.SHIFT,\n            preconditions: (contextService) => whenEditorActivated(contextService),\n            staticParameters: {\n                visible: false,\n                eventType: DeviceInputEventType.Keyboard,\n                keycode,\n                isShift: true,\n            },\n        });\n    }\n\n    return shortcutList;\n}\n\n// export const StartEditWithF2Shortcut: IShortcutItem = {\n//     id: SetCellEditVisibleWithF2Operation.id,\n//     binding: KeyCode.F2,\n//     description: 'shortcut.sheet.start-editing',\n//     group: '4_sheet-edit',\n//     preconditions: whenSheetEditorFocused,\n//     staticParameters: {\n//         visible: true,\n//         eventType: DeviceInputEventType.Keyboard,\n//         keycode: KeyCode.F2,\n//     },\n// };\n\n// export const EditorCursorEnterShortcut: IShortcutItem = {\n//     id: SetCellEditVisibleOperation.id,\n//     binding: KeyCode.ENTER,\n//     description: 'shortcut.sheet.toggle-editing',\n//     group: '4_sheet-edit',\n//     preconditions: (contextService) => whenEditorDidNotInputFormulaActivated(contextService),\n//     staticParameters: {\n//         visible: false,\n//         eventType: DeviceInputEventType.Keyboard,\n//         keycode: KeyCode.ENTER,\n//     },\n// };\n\n// export const EditorCursorTabShortcut: IShortcutItem = {\n//     id: SetCellEditVisibleOperation.id,\n//     binding: KeyCode.TAB,\n//     preconditions: (contextService) => whenEditorDidNotInputFormulaActivated(contextService),\n//     staticParameters: {\n//         visible: false,\n//         eventType: DeviceInputEventType.Keyboard,\n//         keycode: KeyCode.TAB,\n//     },\n// };\n\n// export const EditorCursorEscShortcut: IShortcutItem = {\n//     id: SetCellEditVisibleOperation.id,\n//     binding: KeyCode.ESC,\n//     description: 'shortcut.sheet.abort-editing',\n//     group: '4_sheet-edit',\n//     preconditions: (contextService) => whenEditorDidNotInputFormulaActivated(contextService),\n//     staticParameters: {\n//         visible: false,\n//         eventType: DeviceInputEventType.Keyboard,\n//         keycode: KeyCode.ESC,\n//     },\n// };\n\n// export const EditorBreakLineShortcut: IShortcutItem = {\n//     id: BreakLineCommand.id,\n//     description: 'shortcut.sheet.break-line',\n//     group: '4_sheet-edit',\n//     preconditions: (contextService) => whenSheetEditorActivated(contextService),\n//     binding: KeyCode.ENTER | MetaKeys.ALT,\n// };\n\nexport const EditorDeleteLeftShortcut: IShortcutItem = {\n    id: DeleteLeftCommand.id,\n    preconditions: (contextService) => {\n        return whenEditorActivated(contextService) || whenFormulaEditorFocused(contextService);\n    },\n    binding: KeyCode.BACKSPACE,\n};\n\n// export const EditorDeleteLeftShortcutInActive: IShortcutItem = {\n//     id: SetCellEditVisibleOperation.id,\n//     description: 'shortcut.sheet.delete-and-start-editing',\n//     group: '4_sheet-edit',\n//     preconditions: (contextService) =>\n//         whenSheetEditorFocused(contextService) && !whenFormulaEditorFocused(contextService),\n//     binding: KeyCode.BACKSPACE,\n//     staticParameters: {\n//         visible: true,\n//         eventType: DeviceInputEventType.Keyboard,\n//         keycode: KeyCode.BACKSPACE,\n//     },\n// };\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Disposable, ICommandService, Inject, Injector } from '@univerjs/core';\nimport { AddImageSingle, GraphSingle, TextSingle } from '@univerjs/icons';\nimport { BuiltInUIPart, ComponentManager, connectInjector, IMenuManagerService, IShortcutService, IUIPartsService } from '@univerjs/ui';\nimport { ActivateSlidePageOperation } from '../commands/operations/activate.operation';\nimport { AppendSlideOperation } from '../commands/operations/append-slide.operation';\nimport { DeleteSlideElementOperation } from '../commands/operations/delete-element.operation';\nimport { InsertSlideFloatImageCommand } from '../commands/operations/insert-image.operation';\nimport { InsertSlideShapeRectangleCommand, InsertSlideShapeRectangleOperation, ToggleSlideEditSidebarOperation } from '../commands/operations/insert-shape.operation';\nimport { SlideAddTextCommand, SlideAddTextOperation } from '../commands/operations/insert-text.operation';\nimport { SetSlidePageThumbOperation } from '../commands/operations/set-thumb.operation';\nimport { SetTextEditArrowOperation } from '../commands/operations/text-edit.operation';\nimport { UpdateSlideElementOperation } from '../commands/operations/update-element.operation';\nimport { COMPONENT_SLIDE_IMAGE_POPUP_MENU } from '../components/image-popup-menu/component-name';\nimport { SlideImagePopupMenu } from '../components/image-popup-menu/ImagePopupMenu';\nimport Sidebar, { COMPONENT_SLIDE_SIDEBAR } from '../components/sidebar/Sidebar';\nimport { SlideSideBar } from '../components/slide-bar/SlideBar';\nimport { SlideEditorContainer } from '../views/editor-container';\nimport { IMAGE_UPLOAD_ICON } from './image.menu';\nimport { menuSchema } from './menu.schema';\nimport { GRAPH_SINGLE_ICON } from './shape.menu';\nimport { EditorDeleteLeftShortcut, generateArrowSelectionShortCutItem } from './shortcuts/editor.shortcuts';\nimport { TEXT_ICON_ID } from './text.menu';\n\n/**\n * This controller registers UI parts of slide workbench to the base-ui workbench.\n */\nexport class SlidesUIController extends Disposable {\n    constructor(\n        @Inject(Injector) protected readonly _injector: Injector,\n        @IMenuManagerService protected readonly _menuManagerService: IMenuManagerService,\n        @Inject(ComponentManager) protected readonly _componentManager: ComponentManager,\n        @IUIPartsService protected readonly _uiPartsService: IUIPartsService,\n        @ICommandService protected readonly _commandService: ICommandService,\n        @IShortcutService protected readonly _shortcutService: IShortcutService\n    ) {\n        super();\n\n        this._initCommands();\n        this._initCustomComponents();\n        this._initUIComponents();\n        this._initMenus();\n        this._initShortcuts();\n    }\n\n    private _initMenus(): void {\n        this._menuManagerService.mergeMenu(menuSchema);\n    }\n\n    private _initCustomComponents(): void {\n        const componentManager = this._componentManager;\n        this.disposeWithMe(componentManager.register(IMAGE_UPLOAD_ICON, AddImageSingle));\n        this.disposeWithMe(componentManager.register(TEXT_ICON_ID, TextSingle));\n        this.disposeWithMe(componentManager.register(GRAPH_SINGLE_ICON, GraphSingle));\n        this.disposeWithMe(componentManager.register(COMPONENT_SLIDE_IMAGE_POPUP_MENU, SlideImagePopupMenu));\n        this.disposeWithMe(componentManager.register(COMPONENT_SLIDE_SIDEBAR, Sidebar));\n    }\n\n    private _initCommands(): void {\n        [\n            AppendSlideOperation,\n            ActivateSlidePageOperation,\n            SetSlidePageThumbOperation,\n            InsertSlideFloatImageCommand,\n            SlideAddTextOperation,\n            SlideAddTextCommand,\n            InsertSlideShapeRectangleOperation,\n            InsertSlideShapeRectangleCommand,\n            ToggleSlideEditSidebarOperation,\n            DeleteSlideElementOperation,\n            UpdateSlideElementOperation,\n\n            // commands for editor\n            SetTextEditArrowOperation,\n\n        ].forEach((command) => this.disposeWithMe(this._commandService.registerCommand(command)));\n    }\n\n    protected _initUIComponents(): void {\n        this.disposeWithMe(\n            this._uiPartsService.registerComponent(BuiltInUIPart.LEFT_SIDEBAR, () => connectInjector(SlideSideBar, this._injector))\n        );\n\n        this.disposeWithMe(\n            this._uiPartsService.registerComponent(BuiltInUIPart.CONTENT, () => connectInjector(SlideEditorContainer, this._injector))\n        );\n    }\n\n    private _initShortcuts(): void {\n        [\n            EditorDeleteLeftShortcut,\n            ...generateArrowSelectionShortCutItem(),\n        ].forEach((item) => {\n            this.disposeWithMe(this._shortcutService.registerShortcut(item));\n        });\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DependencyOverride } from '@univerjs/core';\nimport type { MenuConfig } from '@univerjs/ui';\n\nexport const SLIDES_UI_PLUGIN_CONFIG_KEY = 'slides-ui.config';\n\nexport const configSymbol = Symbol(SLIDES_UI_PLUGIN_CONFIG_KEY);\n\nexport interface IUniverSlidesUIConfig {\n    override?: DependencyOverride;\n    menu?: MenuConfig;\n}\n\nexport const defaultPluginConfig: IUniverSlidesUIConfig = {};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable } from '@univerjs/core';\nimport type { BaseObject, IBoundRectNoAngle, IRender, Scene } from '@univerjs/engine-render';\nimport type { IPopup } from '@univerjs/ui';\nimport { Disposable, DisposableCollection, ICommandService, Inject, IUniverInstanceService, UniverInstanceType } from '@univerjs/core';\nimport { IRenderManagerService, pxToNum } from '@univerjs/engine-render';\nimport { SLIDE_KEY } from '@univerjs/slides';\nimport { ICanvasPopupService } from '@univerjs/ui';\nimport { BehaviorSubject } from 'rxjs';\n\nexport interface ISlideCanvasPopup extends Pick<IPopup, 'direction' | 'excludeOutside' | 'componentKey' | 'offset' | 'onClickOutside' | 'hideOnInvisible'> {\n    mask?: boolean;\n    extraProps?: Record<string, any>;\n}\n\nexport function transformBound2OffsetBound(originBound: IBoundRectNoAngle, scene: Scene): IBoundRectNoAngle {\n    const topLeft = transformPosition2Offset(originBound.left, originBound.top, scene);\n    const bottomRight = transformPosition2Offset(originBound.right, originBound.bottom, scene);\n\n    return {\n        left: topLeft.x,\n        top: topLeft.y,\n        right: bottomRight.x,\n        bottom: bottomRight.y,\n    };\n}\n\nexport function transformPosition2Offset(x: number, y: number, scene: Scene) {\n    const { scaleX, scaleY } = scene.getAncestorScale();\n    const viewMain = scene.getViewport(SLIDE_KEY.VIEW);\n    if (!viewMain) {\n        return {\n            x,\n            y,\n        };\n    }\n\n    const { viewportScrollX: actualScrollX, viewportScrollY: actualScrollY } = viewMain;\n\n    const offsetX = (x - actualScrollX) * scaleX;\n\n    const offsetY = (y - actualScrollY) * scaleY;\n\n    return {\n        x: offsetX,\n        y: offsetY,\n    };\n}\n\nexport class SlideCanvasPopMangerService extends Disposable {\n    constructor(\n        @Inject(ICanvasPopupService) private readonly _globalPopupManagerService: ICanvasPopupService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @ICommandService private readonly _commandService: ICommandService\n    ) {\n        super();\n    }\n\n    private _createObjectPositionObserver(\n        targetObject: BaseObject,\n        currentRender: IRender\n    ) {\n        const calc = () => {\n            const { scene, engine } = currentRender;\n            const { left, top, width, height } = targetObject;\n\n            const horizontalOffset = (scene.width - (currentRender.mainComponent?.width ?? 0)) / 2;\n            const verticalOffset = (scene.height - (currentRender.mainComponent?.height ?? 0)) / 2;\n\n            const bound: IBoundRectNoAngle = {\n                left,\n                right: left + width,\n                top,\n                bottom: top + height,\n            };\n            const canvasElement = engine.getCanvasElement();\n            const canvasClientRect = canvasElement.getBoundingClientRect();\n            const widthOfCanvas = pxToNum(canvasElement.style.width); // declared width\n\n            const { scaleX, scaleY } = scene.getAncestorScale();\n\n            const offsetBound = transformBound2OffsetBound(bound, scene);\n            const { top: topOffset, left: leftOffset, width: domWidth } = canvasClientRect;\n            const scaleAdjust = domWidth / widthOfCanvas;\n\n            const position = {\n                left: (offsetBound.left * scaleAdjust * scaleX) + leftOffset + horizontalOffset,\n                right: (offsetBound.right * scaleAdjust * scaleX) + leftOffset + horizontalOffset,\n                top: (offsetBound.top * scaleAdjust * scaleY) + topOffset + verticalOffset,\n                bottom: (offsetBound.bottom * scaleAdjust * scaleY) + topOffset + verticalOffset,\n            };\n            return position;\n        };\n\n        const position = calc();\n        const position$ = new BehaviorSubject(position);\n        const disposable = new DisposableCollection();\n\n        return {\n            position,\n            position$,\n            disposable,\n        };\n    }\n\n    attachPopupToObject(targetObject: BaseObject, popup: ISlideCanvasPopup): IDisposable {\n        const workbook = this._univerInstanceService.getCurrentUnitForType(UniverInstanceType.UNIVER_SLIDE)!;\n        const unitId = workbook.getUnitId();\n        // const subUnitId =\n\n        const currentRender = this._renderManagerService.getRenderById(unitId);\n        if (!currentRender) {\n            return {\n                dispose: () => {\n                    // empty\n                },\n            };\n        }\n\n        const { position, position$, disposable } = this._createObjectPositionObserver(targetObject, currentRender);\n\n        const id = this._globalPopupManagerService.addPopup({\n            ...popup,\n            unitId,\n            subUnitId: 'default',\n            anchorRect: position,\n            anchorRect$: position$,\n            canvasElement: currentRender.engine.getCanvasElement(),\n        });\n\n        return {\n            dispose: () => {\n                this._globalPopupManagerService.removePopup(id);\n                position$.complete();\n                disposable.dispose();\n            },\n        };\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, Nullable, SlideDataModel } from '@univerjs/core';\nimport type { BaseObject, ObjectType, Scene } from '@univerjs/engine-render';\nimport { FOCUSING_COMMON_DRAWINGS, ICommandService, IContextService, Inject, IUniverInstanceService, RxDisposable, toDisposable, UniverInstanceType } from '@univerjs/core';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { ISidebarService } from '@univerjs/ui';\nimport { DeleteSlideElementOperation } from '../commands/operations/delete-element.operation';\nimport { ToggleSlideEditSidebarOperation } from '../commands/operations/insert-shape.operation';\nimport { UpdateSlideElementOperation } from '../commands/operations/update-element.operation';\nimport { COMPONENT_SLIDE_IMAGE_POPUP_MENU } from '../components/image-popup-menu/component-name';\nimport { SlideCanvasPopMangerService } from '../services/slide-popup-manager.service';\nimport { CanvasView } from './canvas-view';\n\nexport class SlidePopupMenuController extends RxDisposable {\n    private _initImagePopupMenu = new Set<string>();\n\n    constructor(\n        @Inject(SlideCanvasPopMangerService) private readonly _canvasPopManagerService: SlideCanvasPopMangerService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @IContextService private readonly _contextService: IContextService,\n        @Inject(CanvasView) private readonly _canvasView: CanvasView,\n        @ISidebarService private readonly _sidebarService: ISidebarService,\n        @ICommandService private readonly _commandService: ICommandService\n    ) {\n        super();\n\n        this._init();\n    }\n\n    private _init(): void {\n        this._univerInstanceService.getAllUnitsForType<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE).forEach((slide) => this._create(slide));\n    }\n\n    private _create(slide: Nullable<SlideDataModel>) {\n        if (!slide) {\n            return;\n        }\n\n        const unitId = slide.getUnitId();\n\n        if (this._renderManagerService.has(unitId) && !this._initImagePopupMenu.has(unitId)) {\n            this._popupMenuListener(unitId);\n            this._initImagePopupMenu.add(unitId);\n        }\n    }\n\n    private _hasCropObject(scene: Scene) {\n        // const objects = scene.getAllObjects();\n\n        // for (const object of objects) {\n        //     if (object instanceof ImageCropperObject) {\n        //         return true;\n        //     }\n        // }\n\n        // return false;\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    private _popupMenuListener(unitId: string) {\n        const model = this._univerInstanceService.getCurrentUnitForType<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE);\n        const pages = model?.getPages() ?? {};\n\n        // eslint-disable-next-line max-lines-per-function\n        Object.keys(pages).forEach((pageId) => {\n            const page = this._canvasView.getRenderUnitByPageId(pageId, unitId);\n            const transformer = page.scene?.getTransformer();\n\n            if (!transformer) return;\n\n            let singletonPopupDisposer: IDisposable;\n            this.disposeWithMe(\n                toDisposable(\n                    transformer.createControl$.subscribe(() => {\n                        // this._contextService.setContextValue(FOCUSING_COMMON_DRAWINGS, true);\n\n                        // if (this._hasCropObject(scene)) {\n                        //     return;\n                        // }\n\n                        const selectedObjects = transformer.getSelectedObjectMap();\n                        if (selectedObjects.size > 1) {\n                            singletonPopupDisposer?.dispose();\n                            return;\n                        }\n\n                        const object = selectedObjects.values().next().value as Nullable<BaseObject>;\n                        if (!object) {\n                            return;\n                        }\n\n                        const oKey = object.oKey;\n                        // const drawingParam = this._drawingManagerService.getDrawingOKey(oKey);\n                        // if (!drawingParam) {\n                        //     return;\n                        // }\n\n                        // const { unitId, subUnitId, drawingId } = drawingParam;\n                        singletonPopupDisposer?.dispose();\n                        singletonPopupDisposer = this.disposeWithMe(this._canvasPopManagerService.attachPopupToObject(object, {\n                            componentKey: COMPONENT_SLIDE_IMAGE_POPUP_MENU,\n                            direction: 'horizontal',\n                            offset: [2, 0],\n                            extraProps: {\n                                menuItems: this._getMenuItemsByObjectType(object.objectType, oKey, unitId),\n                            },\n                        }));\n\n                        if (this._sidebarService.visible) {\n                            this._commandService.executeCommand(ToggleSlideEditSidebarOperation.id, {\n                                visible: true,\n                                objectType: object.objectType,\n                            });\n                        }\n\n                        // this._drawingManagerService.focusDrawing([{\n                        //     unitId,\n                        //     subUnitId,\n                        //     drawingId,\n                        // }]);\n                    })\n                )\n            );\n            this.disposeWithMe(\n                transformer.clearControl$.subscribe(() => {\n                    singletonPopupDisposer?.dispose();\n                    this._contextService.setContextValue(FOCUSING_COMMON_DRAWINGS, false);\n                    // this._drawingManagerService.focusDrawing(null);\n                })\n            );\n            this.disposeWithMe(\n                transformer.changing$.subscribe(() => {\n                    singletonPopupDisposer?.dispose();\n\n                    const selectedObjects = transformer.getSelectedObjectMap();\n                    if (selectedObjects.size > 1) {\n                        singletonPopupDisposer?.dispose();\n                        return;\n                    }\n\n                    const object = selectedObjects.values().next().value as Nullable<BaseObject>;\n                    if (!object) {\n                        return;\n                    }\n\n                    this._commandService.executeCommand(UpdateSlideElementOperation.id, {\n                        unitId,\n                        oKey: object.oKey,\n                        props: {\n                            width: object.width,\n                            height: object.height,\n                            left: object.left,\n                            top: object.top,\n                        },\n                    });\n                })\n            );\n        });\n    }\n\n    private _getMenuItemsByObjectType(objectType: ObjectType, oKey: string, unitId: string) {\n        const menuItems = [{\n            label: 'slide.popup.edit',\n            index: 0,\n            commandId: ToggleSlideEditSidebarOperation.id,\n            commandParams: {\n                visible: true,\n                objectType,\n            },\n            disable: false,\n        }, {\n            label: 'slide.popup.delete',\n            index: 5,\n            commandId: DeleteSlideElementOperation.id,\n            commandParams: {\n                id: oKey,\n                unitId,\n            },\n            disable: false,\n        }];\n\n        return menuItems;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, IDocumentBody, IDocumentData, IDocumentSettings, IDocumentStyle, IParagraph, IParagraphStyle, IPosition, Nullable } from '@univerjs/core';\nimport type { Engine, IDocumentLayoutObject, RichText, Scene } from '@univerjs/engine-render';\nimport type { KeyCode } from '@univerjs/ui';\nimport type { Observable } from 'rxjs';\nimport {\n    createIdentifier,\n    Disposable,\n    DocumentDataModel,\n    EDITOR_ACTIVATED,\n    FOCUSING_EDITOR_STANDALONE,\n    FOCUSING_UNIVER_EDITOR_STANDALONE_SINGLE_MODE,\n    HorizontalAlign,\n    IContextService,\n    VerticalAlign,\n} from '@univerjs/core';\nimport { IEditorService } from '@univerjs/docs-ui';\nimport { DeviceInputEventType, IRenderManagerService } from '@univerjs/engine-render';\nimport { SLIDE_KEY } from '@univerjs/slides';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { SLIDE_EDITOR_ID } from '../const';\n\n// TODO same as @univerjs/slides/views/render/adaptors/index.js\nexport enum SLIDE_VIEW_KEY {\n    MAIN = '__SLIDERender__',\n    SCENE_VIEWER = '__SLIDEViewer__',\n    SCENE = '__SLIDEScene__',\n    VIEWPORT = '__SLIDEViewPort_',\n}\n\nexport const ISlideEditorBridgeService = createIdentifier<SlideEditorBridgeService>('univer.slide-editor-bridge.service');\n\nexport interface IEditorBridgeServiceParam {\n    unitId: string;\n\n    /**\n     * pos and size of editing area\n     */\n    position: IPosition;\n    slideCardOffset: { left: number; top: number };\n    documentLayoutObject: IDocumentLayoutObject;\n    scaleX: number;\n    scaleY: number;\n    editorUnitId: string;\n}\n\nexport interface IEditorBridgeServiceVisibleParam {\n    visible: boolean;\n    eventType: DeviceInputEventType;\n    unitId: string;\n    keycode?: KeyCode;\n}\n\nexport interface ISetEditorInfo {\n    scene: Scene;\n    engine: Engine;\n    unitId: string;\n    pageId: string;\n    richTextObj: RichText;\n}\n\nexport interface ISlideEditorBridgeService {\n    currentEditRectState$: Observable<Nullable<IEditorBridgeServiceParam>>;\n    visible$: Observable<IEditorBridgeServiceVisibleParam>;\n\n    /**\n     * @deprecated This is a temp solution only for demo purposes. We should have mutations to directly write\n     * content to slides.\n     */\n    endEditing$: Subject<RichText>;\n\n    // interceptor: InterceptorManager<{\n    //     BEFORE_CELL_EDIT: typeof BEFORE_CELL_EDIT;\n    //     AFTER_CELL_EDIT: typeof AFTER_CELL_EDIT;\n    //     VALIDATE_CELL: typeof VALIDATE_CELL;\n    // }>;\n    dispose(): void;\n    // refreshEditCellState(): void;\n\n    setEditorRect(param: ISetEditorInfo): void;\n    getEditorRect(): ISetEditorInfo;\n    getEditRectState(): Readonly<Nullable<IEditorBridgeServiceParam>>;\n    // // Gets the DocumentDataModel of the latest table cell based on the latest cell contents\n    // getLatestEditCellState(): Readonly<Nullable<IEditorBridgeServiceParam>>;\n    changeVisible(param: IEditorBridgeServiceVisibleParam): void;\n    changeEditorDirty(dirtyStatus: boolean): void;\n    getEditorDirty(): boolean;\n    isVisible(): boolean;\n    // enableForceKeepVisible(): void;\n    // disableForceKeepVisible(): void;\n    // isForceKeepVisible(): boolean;\n    getCurrentEditorId(): Nullable<string>;\n}\n\nexport class SlideEditorBridgeService extends Disposable implements ISlideEditorBridgeService, IDisposable {\n    private _editorUnitId: string = SLIDE_EDITOR_ID;\n\n    private _isForceKeepVisible: boolean = false;\n\n    private _editorIsDirty: boolean = false;\n\n    private _currentEditRectState: Nullable<IEditorBridgeServiceParam> = null;\n    private readonly _currentEditRectState$ = new BehaviorSubject<Nullable<IEditorBridgeServiceParam>>(null);\n    readonly currentEditRectState$ = this._currentEditRectState$.asObservable();\n\n    private _visibleParam: IEditorBridgeServiceVisibleParam = {\n        visible: false,\n        eventType: DeviceInputEventType.Dblclick,\n        unitId: '',\n    };\n\n    private readonly _visible$ = new BehaviorSubject<IEditorBridgeServiceVisibleParam>(this._visibleParam);\n    readonly visible$ = this._visible$.asObservable();\n\n    private readonly _afterVisible$ = new BehaviorSubject<IEditorBridgeServiceVisibleParam>(this._visibleParam);\n    readonly afterVisible$ = this._afterVisible$.asObservable();\n\n    readonly endEditing$ = new Subject<RichText>();\n\n    private _currentEditRectInfo: ISetEditorInfo;\n\n    constructor(\n        @IEditorService private readonly _editorService: IEditorService,\n        @IContextService private readonly _contextService: IContextService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService\n    ) {\n        super();\n    }\n\n    override dispose() {\n        super.dispose();\n    }\n\n    getEditorRect() {\n        return this._currentEditRectInfo;\n    }\n\n    /**\n     * 1st part of startEditing.\n     * @editorInfo editorInfo\n     */\n    setEditorRect(editorInfo: ISetEditorInfo) {\n        this._currentEditRectInfo = editorInfo;\n        // If there is no editor currently focused, then default to selecting the sheet editor to prevent the editorService from using the previously selected editor object.\n        // todo: wzhudev: In univer mode, it is necessary to switch to the corresponding editorId based on the host's unitId.\n        if (!this._editorService.getFocusEditor()) {\n            this._editorService.focus(SLIDE_EDITOR_ID);\n            this._contextService.setContextValue(EDITOR_ACTIVATED, false);\n            this._contextService.setContextValue(FOCUSING_EDITOR_STANDALONE, false);\n            this._contextService.setContextValue(FOCUSING_UNIVER_EDITOR_STANDALONE_SINGLE_MODE, false);\n        }\n\n        const editRectState = this.getEditRectState();\n        this._currentEditRectState = editRectState;\n\n        // slide-editing.render-controller@_subscribeToCurrentCell(Set editorUnitId to curr doc.)\n        // --> activate(-1000, -1000)\n        this._currentEditRectState$.next(editRectState);\n    }\n\n    changeVisible(param: IEditorBridgeServiceVisibleParam) {\n        /**\n         * Non-sheetEditor and formula selection mode,\n         * double-clicking cannot activate the sheet editor.\n         */\n        // const editor = this._editorService.getFocusEditor();\n        // if (this._refSelectionsService.getCurrentSelections().length > 0 && editor && !editor.isSheetEditor()) {\n        //     return;\n        // }\n\n        this._visibleParam = param;\n\n        // Reset the dirty status when the editor is visible.\n        if (param.visible) {\n            this._editorIsDirty = false;\n        }\n\n        // subscriber: slide-editing.render-controller.ts@_handleEditorVisible\n        this._visible$.next(this._visibleParam);\n        this._afterVisible$.next(this._visibleParam);\n    }\n\n    /**\n     * get info from _currentEditRectInfo\n     *\n     * invoked by slide-editing.render-controller.ts@_handleEditorVisible\n     * && this@setEditorRect\n     */\n    getEditRectState(): Readonly<Nullable<IEditorBridgeServiceParam>> {\n        const editorUnitId = SLIDE_EDITOR_ID;\n\n        //editorBridgeRenderController.slideTextEditor$ ---> editorBridgeRenderController@_updateEditor --> this._currentEditRectInfo = xxx\n        const editorRectInfo = this._currentEditRectInfo;\n        const unitId = editorRectInfo.unitId;\n\n        // let docData: IDocumentData = this.genDocData(editorRectInfo.startEditingText);\n\n        const docData = editorRectInfo.richTextObj.documentData;\n        docData.id = editorUnitId;\n        docData.documentStyle = {\n            ...docData.documentStyle,\n            ...{\n                pageSize: { width: editorRectInfo.richTextObj.width, height: Infinity },\n            },\n        };\n\n        const docDataModel = new DocumentDataModel(docData);\n        const documentLayoutObject: IDocumentLayoutObject = {\n            documentModel: docDataModel,\n            fontString: 'document',\n            textRotation: { a: 0, v: 0 },\n            wrapStrategy: 0,\n            verticalAlign: VerticalAlign.TOP,\n            horizontalAlign: HorizontalAlign.LEFT,\n            paddingData: { t: 0, b: 1, l: 2, r: 2 },\n        };\n\n        // see insert-text.operation\n        const editorWidth = editorRectInfo.richTextObj.width;\n        const editorHeight = editorRectInfo.richTextObj.height;\n        const left = editorRectInfo.richTextObj.left;\n        const top = editorRectInfo.richTextObj.top;\n\n        const canvasOffset = {\n            left: 0,\n            top: 0,\n        };\n        // canvasOffset will be used in slide-editing.render-controller.ts@_handleEditorVisible\n        // const mainScene = this._mainScene;\n        const renderUnit = this._renderManagerService.getRenderById(unitId);\n        const mainScene = renderUnit?.scene;\n        const mainViewport = mainScene?.getViewport(SLIDE_KEY.VIEW);\n        const slideMainRect = mainScene?.getObject(SLIDE_KEY.COMPONENT);\n        const slidePos = {\n            x: slideMainRect?.left || 0,\n            y: slideMainRect?.top || 0,\n        };\n        const scrollX = mainViewport?.viewportScrollX || 0;\n        const scrollY = mainViewport?.viewportScrollY || 0;\n        canvasOffset.left = slidePos.x - scrollX;\n        canvasOffset.top = slidePos.y - scrollY;\n\n        return {\n            position: {\n                startX: left,\n                startY: top,\n                endX: left + editorWidth,\n                endY: top + editorHeight,\n            },\n            scaleX: 1,\n            scaleY: 1,\n            slideCardOffset: canvasOffset,\n            unitId,\n            editorUnitId,\n            documentLayoutObject,\n        } as IEditorBridgeServiceParam;\n    }\n\n    changeEditorDirty(dirtyStatus: boolean) {\n        this._editorIsDirty = dirtyStatus;\n    }\n\n    isVisible() {\n        return this._visibleParam.visible;\n    }\n\n    getEditorDirty() {\n        return this._editorIsDirty;\n    }\n\n    getCurrentEditorId() {\n        return this._editorUnitId;\n    }\n\n    /**\n     * @deprecated\n     */\n    genDocData(target: RichText) {\n        const editorUnitId = this.getCurrentEditorId();\n        const content = target.text;\n        const fontSize = target.fs;\n        const docData: IDocumentData = {\n            id: editorUnitId,\n            body: {\n                dataStream: `${content}\\r\\n`,\n                textRuns: [{ st: 0, ed: content.length }],\n                paragraphs: [{\n                    paragraphStyle: {\n                        // no use\n                        // textStyle: { fs: 30 },\n                        // horizontalAlign: HorizontalAlign.CENTER,\n                        // verticalAlign: VerticalAlign.MIDDLE,\n                    } as IParagraphStyle,\n                    startIndex: content.length + 1,\n                }] as IParagraph[],\n                sectionBreaks: [{ startIndex: content.length + 2 }],\n            } as IDocumentBody,\n            documentStyle: {\n                marginBottom: 0,\n                marginLeft: 0,\n                marginRight: 0,\n                marginTop: 0,\n                pageSize: { width: Infinity, height: Infinity },\n                textStyle: { fs: fontSize },\n                renderConfig: {\n                    // horizontalAlign: HorizontalAlign.CENTER,\n                    verticalAlign: VerticalAlign.MIDDLE,\n                    centerAngle: 0,\n                    vertexAngle: 0,\n                    wrapStrategy: 0,\n                },\n            } as IDocumentStyle,\n            drawings: {},\n            drawingsOrder: [],\n            settings: { zoomRatio: 1 } as IDocumentSettings,\n        };\n\n        return docData;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n    ICommandInfo,\n    IDisposable,\n    IDocumentBody,\n    IPosition,\n    Nullable,\n    SlideDataModel,\n    UnitModel,\n} from '@univerjs/core';\nimport type { IDocObjectParam, IEditorInputConfig } from '@univerjs/docs-ui';\nimport type {\n    DocBackground,\n    Documents,\n    DocumentSkeleton,\n    IDocumentLayoutObject,\n    IRenderContext,\n    IRenderModule,\n    Scene,\n} from '@univerjs/engine-render';\nimport type { IEditorBridgeServiceVisibleParam } from '../services/slide-editor-bridge.service';\nimport {\n    DEFAULT_EMPTY_DOCUMENT_VALUE,\n    Direction,\n    Disposable,\n    DisposableCollection,\n    EDITOR_ACTIVATED,\n    FOCUSING_EDITOR_BUT_HIDDEN,\n    FOCUSING_EDITOR_STANDALONE,\n    FOCUSING_UNIVER_EDITOR_STANDALONE_SINGLE_MODE,\n    HorizontalAlign,\n    ICommandService,\n    IContextService,\n    Inject,\n    IUndoRedoService,\n    IUniverInstanceService,\n    LocaleService,\n    toDisposable,\n    UniverInstanceType,\n    VerticalAlign,\n    WrapStrategy,\n} from '@univerjs/core';\nimport {\n    DocSelectionManagerService,\n    DocSkeletonManagerService,\n    RichTextEditingMutation,\n} from '@univerjs/docs';\nimport { VIEWPORT_KEY as DOC_VIEWPORT_KEY, DOCS_COMPONENT_MAIN_LAYER_INDEX, DOCS_VIEW_KEY, DocSelectionRenderService, IEditorService, MoveCursorOperation, MoveSelectionOperation } from '@univerjs/docs-ui';\nimport {\n    convertTextRotation,\n    DeviceInputEventType,\n    FIX_ONE_PIXEL_BLUR_OFFSET,\n    fixLineWidthByScale,\n    getCurrentTypeOfRenderer,\n    IRenderManagerService,\n    Rect,\n    ScrollBar,\n} from '@univerjs/engine-render';\nimport { ILayoutService, KeyCode } from '@univerjs/ui';\nimport { filter } from 'rxjs';\nimport { SetTextEditArrowOperation } from '../commands/operations/text-edit.operation';\nimport { SLIDE_EDITOR_ID } from '../const';\nimport { ISlideEditorBridgeService } from '../services/slide-editor-bridge.service';\nimport { ISlideEditorManagerService } from '../services/slide-editor-manager.service';\nimport { CursorChange } from '../type';\n\nconst HIDDEN_EDITOR_POSITION = -1000;\n\nconst EDITOR_INPUT_SELF_EXTEND_GAP = 5;\n\nconst EDITOR_BORDER_SIZE = 2;\n\ninterface ICanvasOffset {\n    left: number;\n    top: number;\n}\n\nexport class SlideEditingRenderController extends Disposable implements IRenderModule {\n    /**\n     * It is used to distinguish whether the user has actively moved the cursor in the editor, mainly through mouse clicks.\n     */\n    private _cursorChange: CursorChange = CursorChange.InitialState;\n\n    /** If the corresponding unit is active and prepared for editing. */\n    private _isUnitEditing = false;\n\n    private _d: Nullable<IDisposable>;\n\n    constructor(\n        private readonly _renderContext: IRenderContext<UnitModel>,\n        @ILayoutService private readonly _layoutService: ILayoutService,\n        @IUndoRedoService private readonly _undoRedoService: IUndoRedoService,\n        @IContextService private readonly _contextService: IContextService,\n        @IUniverInstanceService private readonly _instanceSrv: IUniverInstanceService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService,\n        @ISlideEditorBridgeService private readonly _editorBridgeService: ISlideEditorBridgeService,\n        @ISlideEditorManagerService private readonly _cellEditorManagerService: ISlideEditorManagerService,\n        @Inject(DocSelectionManagerService) private readonly _textSelectionManagerService: DocSelectionManagerService,\n        @ICommandService private readonly _commandService: ICommandService,\n        @Inject(LocaleService) protected readonly _localService: LocaleService,\n        @IEditorService private readonly _editorService: IEditorService\n    ) {\n        super();\n\n        // EditingRenderController is per unit. It should only handle keyboard events when the unit is\n        // the current of its type.\n        this.disposeWithMe(this._instanceSrv.getCurrentTypeOfUnit$<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE).subscribe((slideDataModel) => {\n            if (slideDataModel && slideDataModel.getUnitId() === this._renderContext.unitId) {\n                this._d = this._init();\n            } else {\n                this._disposeCurrent();\n\n                // Force ending editor when he switch to another workbook.\n                if (this._isUnitEditing) {\n                    this._handleEditorInvisible({\n                        visible: false,\n                        eventType: DeviceInputEventType.Keyboard,\n                        keycode: KeyCode.ESC,\n                        unitId: this._renderContext.unitId,\n                    });\n\n                    this._isUnitEditing = false;\n                }\n            }\n        }));\n        this._initEditorVisibilityListener();\n    }\n\n    override dispose(): void {\n        super.dispose();\n        this._disposeCurrent();\n    }\n\n    private _disposeCurrent(): void {\n        this._d?.dispose();\n        this._d = null;\n    }\n\n    private _init(): IDisposable {\n        const d = new DisposableCollection();\n        this._subscribeToCurrentCell(d);\n        this._initialKeyboardListener(d);\n        this._initialCursorSync(d);\n        this._listenEditorFocus(d);\n        this._commandExecutedListener(d);\n\n        // FIXME: we should not use React component to create editor render, it would make the control\n        // flow not controllable.\n        setTimeout(() => {\n            this._cursorStateListener(d);\n        }, 1000);\n\n        return d;\n    }\n\n    private _initEditorVisibilityListener(): void {\n        this.disposeWithMe(this._editorBridgeService.visible$\n            // .pipe(distinctUntilChanged((prev, curr) => prev.visible === curr.visible))\n            .subscribe((param) => {\n                if (param.visible) {\n                    this._isUnitEditing = true;\n                    this._handleEditorVisible(param);\n                } else if (this._isUnitEditing) {\n                    this._handleEditorInvisible(param);\n                    this._isUnitEditing = false;\n                }\n            }));\n    }\n\n    private _listenEditorFocus(d: DisposableCollection) {\n        const renderConfig = this._getEditorObject();\n        if (!renderConfig) return;\n\n        d.add(renderConfig.document.onPointerDown$.subscribeEvent(() => {\n            // ...\n        }));\n    }\n\n    private _getEditorSkeleton(editorId: string) {\n        return this._renderManagerService.getRenderById(editorId)?.with(DocSkeletonManagerService).getSkeleton();\n    }\n\n    private _getEditorViewModel(editorId: string) {\n        return this._renderManagerService.getRenderById(editorId)?.with(DocSkeletonManagerService).getViewModel();\n    }\n\n    private _initialCursorSync(d: DisposableCollection) {\n        d.add(this._cellEditorManagerService.focus$.pipe(filter((f) => !!f)).subscribe(() => {\n            getCurrentTypeOfRenderer(UniverInstanceType.UNIVER_DOC, this._instanceSrv, this._renderManagerService)\n                ?.with(DocSelectionRenderService)\n                .sync();\n        }));\n    }\n\n    /**\n     * Set editorUnitId to curr doc.\n     * @param d DisposableCollection\n     */\n    private _subscribeToCurrentCell(d: DisposableCollection) {\n        // first part of editing.\n        // startEditing --> _updateEditor --> slide-editor-bridge.service.ts@setEditorRect---> currentEditRectState$.next(editCellState)\n        // 2nd part is startEditing --> changeVisible\n        d.add(this._editorBridgeService.currentEditRectState$.subscribe((editCellState) => {\n            if (editCellState == null) {\n                return;\n            }\n\n            if (\n                this._contextService.getContextValue(FOCUSING_EDITOR_STANDALONE) ||\n                this._contextService.getContextValue(FOCUSING_UNIVER_EDITOR_STANDALONE_SINGLE_MODE)\n            ) {\n                return;\n            }\n\n            const {\n                position: { startX, endX },\n                documentLayoutObject: { textRotation, wrapStrategy, documentModel },\n                scaleX,\n                editorUnitId,\n            } = editCellState;\n            const { vertexAngle: angle } = convertTextRotation(textRotation);\n            documentModel!.updateDocumentId(editorUnitId);\n\n            if (wrapStrategy === WrapStrategy.WRAP && angle === 0) {\n                documentModel!.updateDocumentDataPageSize((endX - startX) / scaleX);\n            }\n\n            this._instanceSrv.changeDoc(editorUnitId, documentModel!);\n            this._contextService.setContextValue(FOCUSING_EDITOR_BUT_HIDDEN, true);\n            this._textSelectionManagerService.replaceTextRanges([{\n                startOffset: 0,\n                endOffset: 0,\n            }]);\n\n            // the valid pos of activate:\n            // EditorContainer.tsx cellEditorManagerService.setFocus(true) -->\n            // ---> _focus$.next --> editingRenderController\n            // _textSelectionRenderManager.sync() --> _updateInputPosition --> activate(left, top)\n\n            getCurrentTypeOfRenderer(UniverInstanceType.UNIVER_DOC, this._instanceSrv, this._renderManagerService)\n                ?.with(DocSelectionRenderService)\n                .activate(HIDDEN_EDITOR_POSITION, HIDDEN_EDITOR_POSITION);\n        }));\n    }\n\n    /**\n     * Set size and pos of editing area.\n     * @param positionFromEditRectState\n     * @param canvasOffset\n     * @param documentSkeleton\n     * @param documentLayoutObject\n     * @param scaleX\n     * @param scaleY\n     */\n    private _fitTextSize(\n        positionFromEditRectState: IPosition,\n        canvasOffset: ICanvasOffset,\n        documentSkeleton: DocumentSkeleton,\n        documentLayoutObject: IDocumentLayoutObject,\n        scaleX: number = 1,\n        scaleY: number = 1\n    ) {\n        //size & pos derives from slide-editor-bridge.service.ts@getEditRectState.position\n        const { startX, startY, endX, endY } = positionFromEditRectState;\n        const documentDataModel = documentLayoutObject.documentModel;\n\n        if (documentDataModel == null) {\n            return;\n        }\n\n        const { actualWidth, actualHeight } = this._predictingSize(\n            positionFromEditRectState,\n            canvasOffset,\n            documentSkeleton,\n            documentLayoutObject,\n            scaleX,\n            scaleY\n        );\n        const { verticalAlign, paddingData, fill } = documentLayoutObject;\n\n        let editorWidth = endX - startX;\n\n        let editorHeight = endY - startY;\n\n        if (editorWidth < actualWidth) {\n            editorWidth = actualWidth;\n        }\n\n        if (editorHeight < actualHeight) {\n            editorHeight = actualHeight;\n            // To restore the page margins for the skeleton.\n            documentDataModel.updateDocumentDataMargin(paddingData);\n        } else {\n            // Set the top margin under vertical alignment.\n            let offsetTop = 0;\n\n            if (verticalAlign === VerticalAlign.MIDDLE) {\n                offsetTop = (editorHeight - actualHeight) / 2 / scaleY;\n            } else if (verticalAlign === VerticalAlign.TOP) {\n                offsetTop = paddingData.t || 0;\n            } else { // VerticalAlign.UNSPECIFIED follow the same rule as HorizontalAlign.BOTTOM.\n                offsetTop = (editorHeight - actualHeight) / scaleY - (paddingData.b || 0);\n            }\n\n            // offsetTop /= scaleY;\n            offsetTop = offsetTop < (paddingData.t || 0) ? paddingData.t || 0 : offsetTop;\n\n            documentDataModel.updateDocumentDataMargin({\n                t: offsetTop,\n            });\n        }\n\n        // re-calculate skeleton(viewModel for component)\n        documentSkeleton.calculate();\n\n        this._editAreaProcessing(editorWidth, editorHeight, positionFromEditRectState, canvasOffset, fill, scaleX, scaleY);\n    }\n\n    /**\n     * Mainly used to pre-calculate the width of the editor,\n     * to determine whether it needs to be automatically widened.\n     */\n    private _predictingSize(\n        actualRangeWithCoord: IPosition,\n        canvasOffset: ICanvasOffset,\n        documentSkeleton: DocumentSkeleton,\n        documentLayoutObject: IDocumentLayoutObject,\n        scaleX: number = 1,\n        scaleY: number = 1\n    ) {\n        // startX and startY are the width and height after scaling.\n        const { startX, endX } = actualRangeWithCoord;\n\n        const { textRotation, wrapStrategy } = documentLayoutObject;\n\n        const documentDataModel = documentLayoutObject.documentModel;\n\n        const { vertexAngle: angle } = convertTextRotation(textRotation);\n\n        const clientWidth = document.body.clientWidth;\n\n        if (wrapStrategy === WrapStrategy.WRAP && angle === 0) {\n            const { actualWidth, actualHeight } = documentSkeleton.getActualSize();\n            // The skeleton obtains the original volume, which needs to be multiplied by the magnification factor.\n            return {\n                actualWidth: actualWidth * scaleX,\n                actualHeight: actualHeight * scaleY,\n            };\n        }\n\n        documentDataModel?.updateDocumentDataPageSize((clientWidth - startX - canvasOffset.left) / scaleX);\n        documentSkeleton.calculate();\n\n        const size = documentSkeleton.getActualSize();\n\n        let editorWidth = endX - startX;\n\n        if (editorWidth < size.actualWidth * scaleX + EDITOR_INPUT_SELF_EXTEND_GAP * scaleX) {\n            editorWidth = size.actualWidth * scaleX + EDITOR_INPUT_SELF_EXTEND_GAP * scaleX;\n        }\n\n        // Scaling is handled by the renderer, so the skeleton only accepts the original width and height, which need to be divided by the magnification factor.\n        documentDataModel?.updateDocumentDataPageSize(editorWidth / scaleX);\n\n        /**\n         * Do not rely on cell layout logic, depend on the document's internal alignment logic.\n         */\n        documentDataModel?.updateDocumentRenderConfig({\n            horizontalAlign: HorizontalAlign.UNSPECIFIED,\n            cellValueType: undefined,\n        });\n\n        return {\n            actualWidth: editorWidth,\n            actualHeight: size.actualHeight * scaleY,\n        };\n    }\n\n    /**\n     * control the size of editing area\n     */\n    // eslint-disable-next-line max-lines-per-function\n    private _editAreaProcessing(\n        editorWidth: number,\n        editorHeight: number,\n        positionFromEditRectState: IPosition,\n        canvasOffset: ICanvasOffset,\n        fill: Nullable<string>,\n        scaleX: number = 1,\n        scaleY: number = 1\n    ) {\n        const editorObject = this._getEditorObject();\n\n        if (editorObject == null) {\n            return;\n        }\n\n        function pxToNum(width: string): number {\n            return Number.parseInt(width.replace('px', ''));\n        }\n\n        const engine = this._renderContext.engine;\n        const canvasElement = engine.getCanvasElement();\n        const canvasClientRect = canvasElement.getBoundingClientRect();\n\n        // We should take the scale into account when canvas is scaled by CSS.\n        const widthOfCanvas = pxToNum(canvasElement.style.width); // declared width\n        const { top, left, width } = canvasClientRect; // real width affected by scale\n        const scaleAdjust = width / widthOfCanvas;\n\n        let { startX, startY } = positionFromEditRectState;\n\n        startX += canvasOffset.left;\n        startY += canvasOffset.top;\n\n        const { document: documentComponent, scene: editorScene, engine: docEngine } = editorObject;\n\n        const viewportMain = editorScene.getViewport(DOC_VIEWPORT_KEY.VIEW_MAIN);\n\n        const clientHeight =\n            document.body.clientHeight -\n            startY -\n            canvasOffset.top -\n            EDITOR_BORDER_SIZE * 2;\n\n        const clientWidth = document.body.clientWidth - startX - canvasOffset.left;\n\n        let physicHeight = editorHeight;\n\n        let scrollBar = viewportMain?.getScrollBar() as Nullable<ScrollBar>;\n\n        if (physicHeight > clientHeight) {\n            physicHeight = clientHeight;\n\n            if (scrollBar == null) {\n                if (viewportMain) {\n                    const sb = new ScrollBar(viewportMain, { enableHorizontal: false, barSize: 8 });\n                }\n            } else {\n                viewportMain?.resetCanvasSizeAndUpdateScroll();\n            }\n        } else {\n            scrollBar = null;\n            viewportMain?.getScrollBar()?.dispose();\n        }\n\n        editorWidth += scrollBar?.barSize || 0;\n\n        editorWidth = Math.min(editorWidth, clientWidth);\n\n        startX -= FIX_ONE_PIXEL_BLUR_OFFSET;\n\n        startY -= FIX_ONE_PIXEL_BLUR_OFFSET;\n\n        // physicHeight = editorHeight;\n\n        this._addBackground(editorScene, editorWidth / scaleX, editorHeight / scaleY, fill);\n\n        const { scaleX: precisionScaleX, scaleY: precisionScaleY } = editorScene.getPrecisionScale();\n\n        editorScene.transformByState({\n            width: editorWidth * scaleAdjust / scaleX,\n            height: editorHeight * scaleAdjust / scaleY,\n            scaleX: scaleX * scaleAdjust,\n            scaleY: scaleY * scaleAdjust,\n        });\n\n        documentComponent.resize(editorWidth / scaleX, editorHeight / scaleY);\n\n        /**\n         * sometimes requestIdleCallback is invalid, so use setTimeout to ensure the successful execution of the resizeBySize method.\n         * resize canvas\n         * When modifying the selection area for a formula, it is necessary to add a setTimeout to ensure successful updating.\n         */\n        setTimeout(() => {\n            docEngine.resizeBySize(\n                fixLineWidthByScale(editorWidth, precisionScaleX),\n                fixLineWidthByScale(physicHeight, precisionScaleY)\n            );\n        }, 0);\n\n        const contentBoundingRect = this._layoutService.getContentElement().getBoundingClientRect();\n        const canvasBoundingRect = canvasElement.getBoundingClientRect();\n        startX = startX * scaleAdjust + (canvasBoundingRect.left - contentBoundingRect.left);\n        startY = startY * scaleAdjust + (canvasBoundingRect.top - contentBoundingRect.top);\n\n        // Update cell editor container position and size.\n        this._cellEditorManagerService.setState({\n            startX,\n            startY,\n            endX: editorWidth * scaleAdjust + startX,\n            endY: physicHeight * scaleAdjust + startY,\n            show: true,\n        });\n    }\n\n    /**\n     * Since the document does not support cell background color, an additional rect needs to be added.\n     */\n    private _addBackground(scene: Scene, editorWidth: number, editorHeight: number, fill?: Nullable<string>) {\n        const fillRectKey = '_backgroundRectHelperColor_';\n        const rect = scene.getObject(fillRectKey) as Rect;\n\n        if (rect == null && fill == null) {\n            return;\n        }\n\n        if (rect == null) {\n            scene.addObjects(\n                [\n                    new Rect(fillRectKey, {\n                        width: editorWidth,\n                        height: editorHeight,\n                        fill,\n                        evented: false,\n                    }),\n                ],\n                DOCS_COMPONENT_MAIN_LAYER_INDEX\n            );\n        } else if (fill == null) {\n            rect.dispose();\n        } else {\n            rect.setProps({\n                fill,\n            });\n\n            rect.transformByState({\n                width: editorWidth,\n                height: editorHeight,\n            });\n        }\n    }\n\n    /**\n     * Show input area, resize input area and then place input to right place.\n     * @TODO why do resize in show input area?\n     * @param param\n     */\n    // handleVisible is the 2nd part of editing.\n    // first part: startEditing --> _updateEditor\n    // 2nd part: startEditing --> changeVisible --> slide-editor-bridge.render-controller.ts@changeVisible --> _editorBridgeService.changeVisible\n    private _handleEditorVisible(param: IEditorBridgeServiceVisibleParam) {\n        const { eventType } = param;\n\n        // Change `CursorChange` to changed status, when formula bar clicked.\n        this._cursorChange =\n            [DeviceInputEventType.PointerDown, DeviceInputEventType.Dblclick].includes(eventType)\n                ? CursorChange.CursorChange\n                : CursorChange.StartEditor;\n\n        const editCellState = this._editorBridgeService.getEditRectState();\n        if (editCellState == null) {\n            return;\n        }\n\n        const {\n            position,\n            documentLayoutObject,\n            slideCardOffset: canvasOffset,\n            scaleX,\n            scaleY,\n            editorUnitId,\n            unitId,\n        } = editCellState;\n\n        const editorObject = this._getEditorObject();\n\n        if (editorObject == null) {\n            return;\n        }\n\n        const { scene } = editorObject;\n\n        this._contextService.setContextValue(EDITOR_ACTIVATED, true);\n\n        const { documentModel: documentDataModel } = documentLayoutObject;\n        const skeleton = this._getEditorSkeleton(editorUnitId);\n        if (!skeleton || !documentDataModel) {\n            return;\n        }\n\n        // core function! set editing area size and pos\n        this._fitTextSize(position, canvasOffset, skeleton, documentLayoutObject, scaleX, scaleY);\n\n        // TODO: @JOCS, Get the position close to the cursor after clicking on the cell.\n        const cursor = documentDataModel.getBody()!.dataStream.length - 2 || 0;\n\n        scene.getViewport(DOC_VIEWPORT_KEY.VIEW_MAIN)?.scrollToViewportPos({\n            viewportScrollX: Number.POSITIVE_INFINITY,\n        });\n\n        this._textSelectionManagerService.replaceTextRanges([\n            {\n                startOffset: cursor,\n                endOffset: cursor,\n            },\n        ]);\n\n        this._renderManagerService.getRenderById(unitId)?.scene.resetCursor();\n    }\n\n    private _resetBodyStyle(body: IDocumentBody, removeStyle = false) {\n        body.dataStream = DEFAULT_EMPTY_DOCUMENT_VALUE;\n\n        if (body.textRuns != null) {\n            if (body.textRuns.length === 1 && !removeStyle) {\n                body.textRuns[0].st = 0;\n                body.textRuns[0].ed = 1;\n            } else {\n                body.textRuns = undefined;\n            }\n        }\n\n        if (body.paragraphs != null) {\n            if (body.paragraphs.length === 1) {\n                body.paragraphs[0].startIndex = 0;\n            } else {\n                body.paragraphs = [\n                    {\n                        startIndex: 0,\n                    },\n                ];\n            }\n        }\n\n        if (body.sectionBreaks != null) {\n            body.sectionBreaks = undefined;\n        }\n\n        if (body.tables != null) {\n            body.tables = undefined;\n        }\n\n        if (body.customRanges != null) {\n            body.customRanges = undefined;\n        }\n\n        if (body.customBlocks != null) {\n            body.customBlocks = undefined;\n        }\n    }\n\n    /**\n     * Should activate the editor when the user inputs text.\n     * @param d DisposableCollection\n     */\n    private _initialKeyboardListener(d: DisposableCollection) {\n        // d.add(this._textSelectionRenderManager.onInputBefore$.subscribe((config) => {\n        //     // const isFocusFormulaEditor = this._contextService.getContextValue(FORMULA_EDITOR_ACTIVATED);\n        //     // const isFocusSheets = this._contextService.getContextValue(FOCUSING_SHEET);\n\n        //     // // TODO@Jocs: should get editor instead of current doc\n        //     // const unitId = this._instanceSrv.getCurrentUniverDocInstance()?.getUnitId();\n        //     // if (unitId && isFocusSheets && !isFocusFormulaEditor && this._editorService.isSheetEditor(unitId)) {\n        //     //     this._showEditorByKeyboard(config);\n        //     // }\n        // }));\n    }\n\n    private _showEditorByKeyboard(config: Nullable<IEditorInputConfig>) {\n        if (config == null) {\n            //..\n        }\n\n        // const event = config.event as KeyboardEvent;\n\n        // this._commandService.executeCommand(SetCellEditVisibleOperation.id, {\n        //     visible: true,\n        //     eventType: DeviceInputEventType.Keyboard,\n        //     keycode: event.which,\n        //     unitId: this._context.unitId,\n        // });\n    }\n\n    private _commandExecutedListener(d: DisposableCollection) {\n        const moveCursorOP = [SetTextEditArrowOperation.id];\n        const editedMutations = [RichTextEditingMutation.id];\n\n        d.add(this._commandService.onCommandExecuted((command: ICommandInfo) => {\n            // Only should do something when it is the current editor.\n            // FIXME: listen to command execution is pretty expensive. We should\n            // have multi editor instances and only handle event from a single editor.\n            if (this._editorService.getFocusId() !== SLIDE_EDITOR_ID) {\n            // if (this._editorService.getFocusId() !== this._renderContext.unitId) {\n                return;\n            }\n\n            if (moveCursorOP.includes(command.id)) {\n                this._moveCursorCmdHandler(command);\n            }\n\n            if (editedMutations.includes(command.id)) {\n                if (this._editorBridgeService.isVisible()) {\n                    this._editingChangedHandler();\n                }\n            }\n        }));\n    }\n\n    private _moveCursorCmdHandler(command: ICommandInfo) {\n        const params = command.params as IEditorBridgeServiceVisibleParam & { isShift: boolean };\n        const { keycode, isShift } = params;\n\n        /**\n         * After the user enters the editor and actively moves the editor selection area with the mouse,\n         * the up, down, left, and right keys can no longer switch editing cells,\n         * but move the cursor within the editor instead.\n         */\n        if (keycode != null && this._cursorChange === CursorChange.CursorChange\n        ) {\n            this._moveInEditor(keycode, isShift);\n        } else {\n            // TODO @Jocs: After we merging editor related controllers, this seems verbose.\n            this._editorBridgeService.changeVisible(params);\n        }\n    }\n\n    private _editingChangedHandler() {\n        const editRect = this._editorBridgeService.getEditorRect();\n        if (!editRect) {\n            return;\n        }\n        const editingRichText = editRect.richTextObj;\n        editingRichText.refreshDocumentByDocData();\n        editingRichText.resizeToContentSize();\n\n        const { unitId } = this._renderContext;\n        this._handleEditorVisible({ visible: true, eventType: 3, unitId });\n    }\n\n    private _getEditorObject() {\n        return getEditorObject(this._editorBridgeService.getCurrentEditorId(), this._renderManagerService);\n    }\n\n    private async _handleEditorInvisible(param: IEditorBridgeServiceVisibleParam) {\n        const { keycode } = param;\n\n        this._cursorChange = CursorChange.InitialState;\n\n        this._exitInput(param);\n\n        const editCellState = this._editorBridgeService.getEditRectState();\n        if (editCellState == null) {\n            return;\n        }\n\n        // const { unitId, documentLayoutObject } = editCellState;\n\n        // If neither the formula bar editor nor the cell editor has been edited,\n        // it is considered that the content has not changed and returns directly.\n        const editorIsDirty = this._editorBridgeService.getEditorDirty();\n        if (editorIsDirty === false) {\n            this._moveCursor(keycode);\n            return;\n        }\n\n        // moveCursor need to put behind of SetRangeValuesCommand, fix https://github.com/dream-num/univer/issues/1155\n        this._moveCursor(keycode);\n    }\n\n    private _exitInput(param: IEditorBridgeServiceVisibleParam) {\n        this._contextService.setContextValue(EDITOR_ACTIVATED, false);\n\n        this._cellEditorManagerService.setState({\n            show: param.visible,\n        });\n        const editorUnitId = this._editorBridgeService.getCurrentEditorId();\n        if (editorUnitId == null) {\n            return;\n        }\n        this._undoRedoService.clearUndoRedo(editorUnitId);\n    }\n\n    private _moveCursor(keycode?: KeyCode) {\n        if (keycode == null) {\n            return;\n        }\n\n        let direction = Direction.LEFT;\n\n        switch (keycode) {\n            case KeyCode.ENTER:\n                direction = Direction.DOWN;\n                break;\n            case KeyCode.TAB:\n                direction = Direction.RIGHT;\n                break;\n            case KeyCode.ARROW_DOWN:\n                direction = Direction.DOWN;\n                break;\n            case KeyCode.ARROW_UP:\n                direction = Direction.UP;\n                break;\n            case KeyCode.ARROW_LEFT:\n                direction = Direction.LEFT;\n                break;\n            case KeyCode.ARROW_RIGHT:\n                direction = Direction.RIGHT;\n                break;\n        }\n    }\n\n    /**\n     * The user's operations follow the sequence of opening the editor and then moving the cursor.\n     * The logic here predicts the user's first cursor movement behavior based on this rule\n     */\n    private _cursorStateListener(d: DisposableCollection) {\n        const editorObject = this._getEditorObject();\n        if (!editorObject) {\n            return;\n        }\n        const { document: documentComponent } = editorObject;\n\n        d.add(toDisposable(documentComponent.onPointerDown$.subscribeEvent(() => {\n            if (this._cursorChange === CursorChange.StartEditor) {\n                this._cursorChange = CursorChange.CursorChange;\n            }\n        })));\n    }\n\n    // TODO: @JOCS, is it necessary to move these commands MoveSelectionOperation\\MoveCursorOperation to shortcut? and use multi-commands?\n    private _moveInEditor(keycode: KeyCode, isShift: boolean) {\n        let direction = Direction.LEFT;\n        if (keycode === KeyCode.ARROW_DOWN) {\n            direction = Direction.DOWN;\n        } else if (keycode === KeyCode.ARROW_UP) {\n            direction = Direction.UP;\n        } else if (keycode === KeyCode.ARROW_RIGHT) {\n            direction = Direction.RIGHT;\n        }\n\n        if (isShift) {\n            this._commandService.executeCommand(MoveSelectionOperation.id, {\n                direction,\n            });\n        } else {\n            this._commandService.executeCommand(MoveCursorOperation.id, {\n                direction,\n            });\n        }\n    }\n}\n\nexport function getEditorObject(\n    unitId: Nullable<string>,\n    renderManagerService: IRenderManagerService\n): Nullable<IDocObjectParam> {\n    if (unitId == null) {\n        return;\n    }\n\n    const currentRender = renderManagerService.getRenderById(unitId);\n\n    if (currentRender == null) {\n        return;\n    }\n\n    const { mainComponent, scene, engine, components } = currentRender;\n\n    const document = mainComponent as Documents;\n    const docBackground = components.get(DOCS_VIEW_KEY.BACKGROUND) as DocBackground;\n\n    return {\n        document,\n        docBackground,\n        scene,\n        engine,\n    };\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, Nullable, SlideDataModel, UnitModel } from '@univerjs/core';\nimport type { BaseObject, IRenderContext, IRenderModule, RichText, Scene, Slide } from '@univerjs/engine-render';\n\nimport type { ISetEditorInfo } from '../services/slide-editor-bridge.service';\nimport type { ISlideRichTextProps } from '../type';\nimport { DisposableCollection, ICommandService, IUniverInstanceService, RxDisposable, UniverInstanceType } from '@univerjs/core';\nimport { DeviceInputEventType, ObjectType } from '@univerjs/engine-render';\nimport { Subject } from 'rxjs';\nimport { UpdateSlideElementOperation } from '../commands/operations/update-element.operation';\nimport { ISlideEditorBridgeService } from '../services/slide-editor-bridge.service';\n\n// interface ICanvasOffset {\n//     left: number;\n//     top: number;\n// }\n\n// enum CursorChange {\n//     InitialState,\n//     StartEditor,\n//     CursorChange,\n// }\n\nexport class SlideEditorBridgeRenderController extends RxDisposable implements IRenderModule {\n    /**\n     * It is used to distinguish whether the user has actively moved the cursor in the editor, mainly through mouse clicks.\n     */\n    // private _cursorChange: CursorChange = CursorChange.InitialState;\n\n    /** If the corresponding unit is active and prepared for editing. */\n    // private _isUnitEditing = false;\n\n    setSlideTextEditor$: Subject<ISlideRichTextProps> = new Subject();\n\n    private _curRichText = null as RichText | null;\n\n    private _d: Nullable<IDisposable>;\n\n    constructor(\n        private readonly _renderContext: IRenderContext<UnitModel>,\n        @IUniverInstanceService private readonly _instanceSrv: IUniverInstanceService,\n        @ICommandService private readonly _commandService: ICommandService,\n        @ISlideEditorBridgeService private readonly _editorBridgeService: ISlideEditorBridgeService\n    ) {\n        super();\n\n        this.disposeWithMe(this._instanceSrv.getCurrentTypeOfUnit$<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE).subscribe((slideDataModel) => {\n            if (slideDataModel && slideDataModel.getUnitId() === this._renderContext.unitId) {\n                this._d = this._init();\n            } else {\n                this._disposeCurrent();\n            }\n        }));\n    }\n\n    private _init(): IDisposable {\n        const d = new DisposableCollection();\n        this._initEventListener(d);\n        return d;\n    }\n\n    private _disposeCurrent(): void {\n        this._d?.dispose();\n        this._d = null;\n    }\n\n    private _setEditorRect(pageId: string, targetObject: RichText) {\n        this._curRichText = targetObject as RichText;\n        const { scene, engine } = this._renderContext;\n        const unitId = this._renderContext.unitId;\n\n        const setEditorRect: ISetEditorInfo = {\n            scene,\n            engine,\n            unitId,\n            pageId,\n            richTextObj: targetObject,\n        };\n\n        this._editorBridgeService.setEditorRect(setEditorRect);\n    }\n\n    private _initEventListener(d: DisposableCollection) {\n        const listenersForPageScene = (scene: Scene) => {\n            const transformer = scene.getTransformer();\n            if (!transformer) return;\n\n            d.add(transformer.clearControl$.subscribe(() => {\n                this.setEditorVisible(false);\n                this.pickOtherObjects();\n            }));\n            d.add(transformer.createControl$.subscribe(() => {\n                this.setEditorVisible(false);\n            }));\n\n            // d.add(transformer.changeStart$.subscribe((param: IChangeObserverConfig) => {\n            //     const target = param.target;\n            //     if (!target) return;\n            //     if (target === this._curRichText) {\n            //         // do nothing\n            //     } else {\n            //         this.pickOtherObjects();\n            //     }\n            // }));\n\n            d.add(scene.onDblclick$.subscribeEvent(() => {\n                transformer.clearControls();\n                const selectedObjects = transformer.getSelectedObjectMap();\n                const object = selectedObjects.values().next().value as Nullable<BaseObject>;\n                if (!object) return;\n\n                if (object.objectType !== ObjectType.RICH_TEXT) {\n                    this.pickOtherObjects();\n                } else {\n                    this.startEditing(scene.sceneKey, object as RichText);\n                }\n            }));\n\n            d.add(this._instanceSrv.focused$.subscribe((fc: Nullable<string>) => {\n                this.endEditing();\n            }));\n        };\n\n        // const model = this._instanceSrv.getCurrentUnitForType<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE);\n        // const pagesMap = model?.getPages() ?? {};\n        // const pages = Object.values(pagesMap);\n\n        const { mainComponent } = this._renderContext;\n        const slide = mainComponent as Slide;\n\n        // for new pages created by user\n        // TODO: better only one pageScene listener. but how?\n        // TODO: this controller is in render stage. but default page created in ready stage.\n        slide.subSceneChanged$.subscribeEvent((pageScene: Scene) => {\n            listenersForPageScene(pageScene);\n        });\n\n        // for default pages that already exist\n        const pageSceneList = Array.from((mainComponent as Slide).getSubScenes().values());\n        for (let i = 0; i < pageSceneList.length; i++) {\n            const pageScene = pageSceneList[i] as Scene;\n            listenersForPageScene(pageScene);\n        }\n    }\n\n    pickOtherObjects() {\n        this.endEditing();\n    }\n\n    /**\n     * invoked when picking other object.\n     *\n     * save editing state to curr richText.\n     */\n    endEditing() {\n        if (!this._curRichText) return;\n        this.setEditorVisible(false);\n        const curRichText = this._curRichText;\n\n        const slideData = this._instanceSrv.getCurrentUnitForType<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE);\n        if (!slideData) return false;\n        curRichText.refreshDocumentByDocData();\n        curRichText.resizeToContentSize();\n\n        this._editorBridgeService.endEditing$.next(curRichText);\n\n        const richText: Record<string, any> = {\n            bl: 1,\n            fs: curRichText.fs,\n            text: curRichText.text,\n        };\n        const textRuns = curRichText.documentData.body?.textRuns;\n        if (textRuns && textRuns.length) {\n            const textRun = textRuns[0];\n            const ts = textRun.ts;\n\n            richText.cl = ts?.cl;\n        }\n\n        this._commandService.executeCommand(UpdateSlideElementOperation.id, {\n            unitId: this._renderContext.unitId,\n            oKey: curRichText?.oKey,\n            props: {\n                richText,\n            },\n        });\n        this._curRichText = null;\n    }\n\n    /**\n     * TODO calling twice \uFF1F\uFF1F\uFF1F\uFF1F\n     * editingParam derives from RichText object.\n     *\n     * TODO @lumixraku need scale param\n     * @param target\n     */\n    startEditing(pageId: string, target: RichText) {\n        // this.setSlideTextEditor$.next({ content, rect });\n\n        this._setEditorRect(pageId, target);\n        this.setEditorVisible(true);\n    }\n\n    setEditorVisible(visible: boolean) {\n        // if editor is visible, hide curr RichTerxtObject\n        if (visible) {\n            this._curRichText?.hide();\n        } else {\n            this._curRichText?.show();\n        }\n        const { unitId } = this._renderContext;\n        this._editorBridgeService.changeVisible({ visible, eventType: DeviceInputEventType.PointerDown, unitId });\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { SlideDataModel, Workbook } from '@univerjs/core';\nimport {\n    IContextService,\n    IUniverInstanceService,\n    RxDisposable,\n    UniverInstanceType,\n} from '@univerjs/core';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { takeUntil } from 'rxjs';\n\n/**\n * This controller is responsible for managing units of a specific kind to be rendered on the canvas.\n */\nexport class SlideRenderService extends RxDisposable {\n    // private _skeletonChangeMutations = new Set<string>();\n\n    constructor(\n        @IContextService private readonly _contextService: IContextService,\n        @IUniverInstanceService private readonly _instanceSrv: IUniverInstanceService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService\n    ) {\n        super();\n\n        // It should be initialized after all other plugins are ready.\n        Promise.resolve().then(() => this._init());\n    }\n\n    private _init() {\n        this._initSlideDataListener();\n        this._initContextListener();\n    }\n\n    private _initSlideDataListener(): void {\n        this._instanceSrv.getTypeOfUnitAdded$<Workbook>(UniverInstanceType.UNIVER_SLIDE)\n            .pipe(takeUntil(this.dispose$))\n            .subscribe((slideModel) => {\n                // TODO when does this function get called?\n                this._createRenderer(slideModel?.getUnitId());\n            });\n\n        this._instanceSrv.getAllUnitsForType<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE).forEach((slideModel) => {\n            this._createRenderer(slideModel.getUnitId());\n        });\n\n        this._instanceSrv.getTypeOfUnitDisposed$<Workbook>(UniverInstanceType.UNIVER_SLIDE)\n            .pipe(takeUntil(this.dispose$))\n            .subscribe((workbook) => this._disposeRenderer(workbook));\n    }\n\n    private _createRenderer(unitId: string): void {\n        if (unitId == null) {\n            return;\n        }\n\n        const model = this._instanceSrv.getUnit(unitId, UniverInstanceType.UNIVER_SLIDE);\n        if (model == null) {\n            return;\n        }\n\n        this._renderManagerService.createRender(unitId);\n    }\n\n    private _disposeRenderer(workbook: Workbook): void {\n        const unitId = workbook.getUnitId();\n        this._renderManagerService.removeRender(unitId);\n    }\n\n    private _initContextListener(): void {\n        // If we toggle the raw formula, we need to refresh all spreadsheets.\n        // this._contextService.subscribeContextValue$(RENDER_RAW_FORMULA_KEY)\n        //     .pipe(distinctUntilChanged(), takeUntil(this.dispose$))\n        //     .subscribe(() => {\n        //         this._renderManagerService.getRenderAll().forEach((renderer) => {\n        //             if (renderer.mainComponent instanceof Spreadsheet) {\n        //                 (renderer.mainComponent as Spreadsheet).makeForceDirty(true);\n        //             }\n        //         });\n        //     });\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency, SlideDataModel } from '@univerjs/core';\nimport type { IUniverSlidesUIConfig } from './controllers/config.schema';\nimport { IConfigService, Inject, Injector, IUniverInstanceService, merge, mergeOverrideWithDependencies, Plugin, UniverInstanceType } from '@univerjs/core';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { CanvasView } from './controllers/canvas-view';\nimport { defaultPluginConfig, SLIDES_UI_PLUGIN_CONFIG_KEY } from './controllers/config.schema';\nimport { SlidePopupMenuController } from './controllers/popup-menu.controller';\nimport { SlideEditingRenderController } from './controllers/slide-editing.render-controller';\nimport { SlideEditorBridgeRenderController } from './controllers/slide-editor-bridge.render-controller';\nimport { SlidesUIController } from './controllers/slide-ui.controller';\nimport { SlideRenderController } from './controllers/slide.render-controller';\nimport { ISlideEditorBridgeService, SlideEditorBridgeService } from './services/slide-editor-bridge.service';\nimport { ISlideEditorManagerService, SlideEditorManagerService } from './services/slide-editor-manager.service';\nimport { SlideCanvasPopMangerService } from './services/slide-popup-manager.service';\nimport { SlideRenderService } from './services/slide-render.service';\n\nexport const SLIDE_UI_PLUGIN_NAME = 'SLIDE_UI';\n\nexport class UniverSlidesUIPlugin extends Plugin {\n    static override pluginName = SLIDE_UI_PLUGIN_NAME;\n    static override type = UniverInstanceType.UNIVER_SLIDE;\n\n    constructor(\n        private readonly _config: Partial<IUniverSlidesUIConfig> = defaultPluginConfig,\n        @Inject(Injector) override readonly _injector: Injector,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @IConfigService private readonly _configService: IConfigService\n    ) {\n        super();\n\n        // Manage the plugin configuration.\n        const { menu, ...rest } = merge(\n            {},\n            defaultPluginConfig,\n            this._config\n        );\n        if (menu) {\n            this._configService.setConfig('menu', menu, { merge: true });\n        }\n        this._configService.setConfig(SLIDES_UI_PLUGIN_CONFIG_KEY, rest);\n    }\n\n    override onStarting(): void {\n        mergeOverrideWithDependencies([\n            [SlideRenderService],\n            [ISlideEditorBridgeService, { useClass: SlideEditorBridgeService }],\n            // used by SlideUIController --> EditorContainer\n            [ISlideEditorManagerService, { useClass: SlideEditorManagerService }],\n            [SlideCanvasPopMangerService],\n        ] as Dependency[], this._config.override)\n            .forEach((d) => this._injector.add(d));\n    }\n\n    override onReady(): void {\n        ([\n            // SlideRenderService will be init in ready stage, and then calling RenderManagerService@createRender --> init all deps in this rendering register block.\n\n            [SlideRenderController],\n        ] as Dependency[]).forEach((m) => {\n            this.disposeWithMe(this._renderManagerService.registerRenderModule(UniverInstanceType.UNIVER_SLIDE, m));\n        });\n\n        mergeOverrideWithDependencies([\n            [CanvasView],\n            // cannot register in _renderManagerService now.\n            // [ISlideEditorBridgeService, { useClass: SlideEditorBridgeService }],\n            // // used by SlideUIController --> EditorContainer\n            // [ISlideEditorManagerService, { useClass: SlideEditorManagerService }],\n\n            // SlidesUIController controller should be registered in Ready stage.\n            // SlidesUIController controller would add a new RenderUnit (__INTERNAL_EDITOR__DOCS_NORMAL)\n            [SlidesUIController], // editor service was create in renderManagerService\n            [SlideRenderController],\n            [SlidePopupMenuController],\n        ] as Dependency[], this._config.override).forEach((m) => {\n            this._injector.add(m);\n        });\n\n        this._injector.get(CanvasView);\n        this._injector.get(SlideRenderService);\n    }\n\n    override onRendered(): void {\n        ([\n            // need slideEditorBridgeService\n            // need TextSelectionRenderService which init by EditorContainer\n            [SlideEditorBridgeRenderController],\n            [SlideEditingRenderController],\n        ] as Dependency[]).forEach((m) => {\n            // find all renderMap and register module to each item in renderMap\n            this.disposeWithMe(this._renderManagerService.registerRenderModule(UniverInstanceType.UNIVER_SLIDE, m));\n        });\n\n        this._markSlideAsFocused();\n\n        this._injector.get(SlidesUIController);\n    }\n\n    override onSteady(): void {\n        this._injector.get(SlidePopupMenuController);\n    }\n\n    private _markSlideAsFocused() {\n        const currentService = this._univerInstanceService;\n        try {\n            const slideDataModel = currentService.getCurrentUnitForType<SlideDataModel>(UniverInstanceType.UNIVER_SLIDE)!;\n            currentService.focusUnit(slideDataModel.getUnitId());\n        } catch (e) {\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["width", "height", "left", "top", "id", "image", "zIndex", "minZIndex", "maxZIndex", "import_jsx_runtime", "ArrangePanel", "React", "color", "import_react", "import_jsx_runtime", "object", "originWidth", "originHeight", "originX", "originY", "originRotation", "index_module_default", "import_jsx_runtime", "index_module_default", "ArrangePanel", "import_react", "index_module_default", "import_jsx_runtime", "visible", "index_module_default", "import_react", "index_module_default", "import_jsx_runtime", "React", "_a", "index_module_default", "import_react", "index_module_default", "import_jsx_runtime", "index_module_default", "configSymbol", "defaultPluginConfig", "position", "_a", "HIDDEN_EDITOR_POSITION", "pxToNum", "width", "document", "defaultPluginConfig"]
}
