{
  "version": 3,
  "sources": ["../../packages/sheets-filter-ui/src/controllers/config.schema.ts", "../../packages/sheets-filter-ui/src/models/conditions.ts", "../../packages/sheets-filter-ui/src/models/utils.ts", "../../packages/sheets-filter-ui/src/worker/generate-filter-values.service.ts", "../../packages/sheets-filter-ui/src/services/util.ts", "../../packages/sheets-filter-ui/src/services/sheets-filter-panel.service.ts", "../../packages/sheets-filter-ui/src/commands/operations/sheets-filter.operation.ts", "../../packages/sheets-filter-ui/src/controllers/sheets-filter-permission.controller.ts", "../../packages/sheets-filter-ui/src/views/components/SheetsFilterPanel.tsx", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/sheets-filter-ui/src/views/components/index.module.less", "../../packages/sheets-filter-ui/src/views/components/SheetsFilterByConditionsPanel.tsx", "../../packages/sheets-filter-ui/src/views/components/SheetsFilterByValuesPanel.tsx", "../../packages/sheets-filter-ui/src/controllers/sheets-filter.menu.ts", "../../packages/sheets-filter-ui/src/controllers/menu.schema.ts", "../../packages/sheets-filter-ui/src/views/widgets/drawings.ts", "../../packages/sheets-filter-ui/src/views/widgets/filter-button.shape.ts", "../../packages/sheets-filter-ui/src/views/render-modules/sheets-filter.render-controller.ts", "../../packages/sheets-filter-ui/src/controllers/sheets-filter-ui-mobile.controller.ts", "../../packages/sheets-filter-ui/src/controllers/sheets-filter.shortcut.ts", "../../packages/sheets-filter-ui/src/controllers/sheets-filter-ui-desktop.controller.ts", "../../packages/sheets-filter-ui/src/filter-ui-desktop.plugin.ts", "../../packages/sheets-filter-ui/src/filter-ui-mobile.plugin.ts", "../../packages/sheets-filter-ui/src/worker/plugin.ts"],
  "sourcesContent": ["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { MenuConfig } from '@univerjs/ui';\n\nexport const SHEETS_FILTER_UI_PLUGIN_CONFIG_KEY = 'sheets-filter-ui.config';\n\nexport const configSymbol = Symbol(SHEETS_FILTER_UI_PLUGIN_CONFIG_KEY);\n\nexport interface IUniverSheetsFilterUIConfig {\n    menu?: MenuConfig;\n    useRemoteFilterValuesGenerator?: boolean;\n}\n\nexport const defaultPluginConfig: IUniverSheetsFilterUIConfig = {};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Nullable } from '@univerjs/core';\nimport type { ICustomFilters, IFilterColumn } from '@univerjs/sheets-filter';\nimport { BooleanNumber } from '@univerjs/core';\nimport { CustomFilterOperator } from '@univerjs/sheets-filter';\nimport { ExtendCustomFilterOperator, OperatorOrder } from './extended-operators';\n\n// This file implements a simple form schema system for condition filters (and only for it!)\n\nexport type FilterOperator = ExtendCustomFilterOperator | CustomFilterOperator;\n\nexport interface IFilterConditionFormParams {\n    and?: true;\n\n    operator1?: FilterOperator;\n    val1?: string;\n\n    operator2?: FilterOperator;\n    val2?: string;\n}\n\nexport interface IFilterConditionItem {\n    operator: FilterOperator;\n    numOfParameters: number;\n    order: OperatorOrder;\n\n    /**\n     * Name of the filter condition. Should be an i18n key.\n     */\n    label: string;\n\n    and?: true;\n\n    /**\n     * Get the initial form parameters for this condition item. This should only be called when `numOfParameters` is not `0`.\n     */\n    getDefaultFormParams(): IFilterConditionFormParams;\n    /**\n     * Test if the form params can be mapped to this condition item. This should be called when the\n     * condition form changes and `numOfParameters` is not `0`.\n     * @param params\n     */\n    testMappingParams(params: IFilterConditionFormParams): boolean;\n\n    /**\n     * When user confirm changing filter condition, this method will be called to map the form params\n     * to the filter column data.\n     * @param mapParams\n     */\n    mapToFilterColumn(mapParams: IFilterConditionFormParams): Nullable<Omit<IFilterColumn, 'colId'>>;\n    /**\n     * Test if the filter column data can be mapped to this condition item.\n     * It should return the mapping parameters if it can be mapped, otherwise `false`.\n     * This should be called when the filter panel opens.\n     *\n     * @param filterColumn\n     * @returns the mapping parameters if it can be mapped, otherwise `false`\n     */\n    testMappingFilterColumn(filterColumn: Omit<IFilterColumn, 'colId'>): IFilterConditionFormParams | false;\n}\n\n// eslint-disable-next-line ts/no-namespace\nexport namespace FilterConditionItems {\n    export const NONE: IFilterConditionItem = {\n        label: 'sheets-filter.conditions.none',\n\n        operator: ExtendCustomFilterOperator.NONE,\n        order: OperatorOrder.SECOND,\n        numOfParameters: 0,\n\n        getDefaultFormParams: () => { throw new Error('[FilterConditionItems.NONE]: should not have initial form params!'); },\n        testMappingParams: (params) => {\n            return params.operator1 === ExtendCustomFilterOperator.NONE;\n        },\n\n        mapToFilterColumn: () => null,\n        testMappingFilterColumn: (filterColumn) => {\n            if (!filterColumn.customFilters && !filterColumn.filters) return {};\n            return false;\n        },\n    };\n\n    // ------------------------------\n\n    export const EMPTY: IFilterConditionItem = {\n        label: 'sheets-filter.conditions.empty',\n\n        operator: ExtendCustomFilterOperator.EMPTY,\n        order: OperatorOrder.SECOND,\n        numOfParameters: 0,\n\n        getDefaultFormParams: () => { throw new Error('[FilterConditionItems.EMPTY]: should not have initial form params!'); },\n        testMappingParams: ({ operator1 }) => operator1 === ExtendCustomFilterOperator.EMPTY,\n\n        mapToFilterColumn: () => ({ customFilters: { customFilters: [{ val: '' }] } }),\n        testMappingFilterColumn: (filterColumn) => {\n            if (filterColumn.customFilters?.customFilters.length !== 1) {\n                return false;\n            }\n\n            const firstCustomFilter = filterColumn.customFilters.customFilters[0];\n            const mapped = firstCustomFilter.val === '' && firstCustomFilter.operator === undefined;\n            if (!mapped) {\n                return false;\n            }\n\n            return { operator1: ExtendCustomFilterOperator.EMPTY };\n        },\n    };\n\n    export const NOT_EMPTY: IFilterConditionItem = {\n        label: 'sheets-filter.conditions.not-empty',\n\n        operator: ExtendCustomFilterOperator.NOT_EMPTY,\n        order: OperatorOrder.SECOND,\n        numOfParameters: 0,\n\n        getDefaultFormParams: () => { throw new Error('[FilterConditionItems.NOT_EMPTY]: should not have initial form params!'); },\n        testMappingParams: ({ operator1 }) => operator1 === ExtendCustomFilterOperator.NOT_EMPTY,\n\n        mapToFilterColumn: () => ({ customFilters: { customFilters: [{ val: '', operator: CustomFilterOperator.NOT_EQUALS }] } }),\n        testMappingFilterColumn: (filterColumn) => {\n            if (filterColumn.customFilters?.customFilters.length !== 1) {\n                return false;\n            }\n\n            const firstCustomFilter = filterColumn.customFilters.customFilters[0];\n            const canMap = firstCustomFilter.val === ' ' && firstCustomFilter.operator === CustomFilterOperator.NOT_EQUALS;\n            if (!canMap) {\n                return false;\n            }\n\n            return { operator1: ExtendCustomFilterOperator.NOT_EMPTY };\n        },\n    };\n\n    // ------------------------------\n\n    export const TEXT_CONTAINS: IFilterConditionItem = {\n        label: 'sheets-filter.conditions.text-contains',\n\n        operator: ExtendCustomFilterOperator.CONTAINS,\n        order: OperatorOrder.FIRST,\n        numOfParameters: 1,\n\n        getDefaultFormParams: () => ({ operator1: ExtendCustomFilterOperator.CONTAINS, val1: '' }),\n        testMappingParams: (params) => {\n            const [op] = getOnlyOperatorAndVal(params);\n            return op === ExtendCustomFilterOperator.CONTAINS;\n        },\n\n        mapToFilterColumn: (mapParams) => {\n            const { val1 } = mapParams;\n            if (val1 === '') return null;\n\n            return {\n                customFilters: { customFilters: [{ val: `*${val1}*` }] },\n            };\n        },\n        testMappingFilterColumn: (filterColumn) => {\n            if (filterColumn.customFilters?.customFilters.length !== 1) {\n                return false;\n            }\n\n            const firstCustomFilter = filterColumn.customFilters.customFilters[0];\n            const valAsString = firstCustomFilter.val.toString();\n            if (!firstCustomFilter.operator && valAsString.startsWith('*') && valAsString.endsWith('*')) {\n                return { operator1: ExtendCustomFilterOperator.CONTAINS, val1: valAsString.slice(1, -1) };\n            }\n\n            return false;\n        },\n    };\n\n    export const DOES_NOT_CONTAIN: IFilterConditionItem = {\n        label: 'sheets-filter.conditions.does-not-contain',\n\n        operator: ExtendCustomFilterOperator.DOES_NOT_CONTAIN,\n        order: OperatorOrder.FIRST,\n        numOfParameters: 1,\n\n        getDefaultFormParams: () => ({ operator1: ExtendCustomFilterOperator.DOES_NOT_CONTAIN, val1: '' }),\n        mapToFilterColumn: (mapParams) => ({\n            customFilters: { customFilters: [{ val: `*${mapParams.val1}*`, operator: CustomFilterOperator.NOT_EQUALS }] },\n        }),\n        testMappingParams: (params) => {\n            const [op] = getOnlyOperatorAndVal(params);\n            return op === ExtendCustomFilterOperator.DOES_NOT_CONTAIN;\n        },\n        testMappingFilterColumn: (filterColumn) => {\n            if (filterColumn.customFilters?.customFilters.length !== 1) {\n                return false;\n            }\n\n            const firstCustomFilter = filterColumn.customFilters.customFilters[0];\n            const valAsString = firstCustomFilter.val.toString();\n            if (\n                firstCustomFilter.operator === CustomFilterOperator.NOT_EQUALS\n                && valAsString.startsWith('*')\n                && valAsString.endsWith('*')\n            ) {\n                return { operator1: ExtendCustomFilterOperator.DOES_NOT_CONTAIN, val1: valAsString.slice(1, -1) };\n            }\n\n            return false;\n        },\n    };\n\n    export const STARTS_WITH: IFilterConditionItem = {\n        label: 'sheets-filter.conditions.starts-with',\n\n        operator: ExtendCustomFilterOperator.STARTS_WITH,\n        order: OperatorOrder.FIRST,\n        numOfParameters: 1,\n\n        getDefaultFormParams: () => ({ operator1: ExtendCustomFilterOperator.STARTS_WITH, val1: '' }),\n        mapToFilterColumn: (mapParams) => ({\n            customFilters: { customFilters: [{ val: `${mapParams.val1}*` }] },\n        }),\n        testMappingParams: (params) => {\n            const [op] = getOnlyOperatorAndVal(params);\n            return op === ExtendCustomFilterOperator.STARTS_WITH;\n        },\n        testMappingFilterColumn: (filterColumn) => {\n            if (filterColumn.customFilters?.customFilters.length !== 1) {\n                return false;\n            }\n\n            const firstCustomFilter = filterColumn.customFilters.customFilters[0];\n            const valAsString = firstCustomFilter.val.toString();\n            if (!firstCustomFilter.operator && valAsString.endsWith('*') && !valAsString.startsWith('*')) {\n                return { operator1: ExtendCustomFilterOperator.STARTS_WITH, val1: valAsString.slice(0, -1) };\n            }\n\n            return false;\n        },\n    };\n\n    export const ENDS_WITH: IFilterConditionItem = {\n        label: 'sheets-filter.conditions.ends-with',\n\n        operator: ExtendCustomFilterOperator.ENDS_WITH,\n        order: OperatorOrder.FIRST,\n        numOfParameters: 1,\n\n        getDefaultFormParams: () => ({ operator1: ExtendCustomFilterOperator.ENDS_WITH, val1: '' }),\n        mapToFilterColumn: (mapParams) => ({\n            customFilters: { customFilters: [{ val: `*${mapParams.val1}` }] },\n        }),\n        testMappingParams: (params) => {\n            const [op] = getOnlyOperatorAndVal(params);\n            return op === ExtendCustomFilterOperator.ENDS_WITH;\n        },\n        testMappingFilterColumn: (filterColumn) => {\n            if (filterColumn.customFilters?.customFilters.length !== 1) {\n                return false;\n            }\n\n            const firstCustomFilter = filterColumn.customFilters.customFilters[0];\n            const valAsString = firstCustomFilter.val.toString();\n            if (!firstCustomFilter.operator && valAsString.startsWith('*') && !valAsString.endsWith('*')) {\n                return { operator1: ExtendCustomFilterOperator.ENDS_WITH, val1: valAsString.slice(1) };\n            }\n\n            return false;\n        },\n    };\n\n    export const EQUALS: IFilterConditionItem = {\n        label: 'sheets-filter.conditions.equals',\n\n        operator: ExtendCustomFilterOperator.EQUALS,\n        order: OperatorOrder.FIRST,\n        numOfParameters: 1,\n\n        getDefaultFormParams: () => ({ operator1: ExtendCustomFilterOperator.EQUALS, val1: '' }),\n        testMappingParams: (params) => {\n            const [op] = getOnlyOperatorAndVal(params);\n            return op === ExtendCustomFilterOperator.EQUALS;\n        },\n\n        mapToFilterColumn: (mapParams) => {\n            const { val1 } = mapParams;\n            if (val1 === '') return null;\n\n            return {\n                customFilters: { customFilters: [{ val: val1! }] },\n            };\n        },\n        testMappingFilterColumn: (filterColumn) => {\n            if (filterColumn.filters?.filters?.length === 1) {\n                return { operator1: ExtendCustomFilterOperator.EQUALS, val1: '' };\n            }\n\n            if (filterColumn.customFilters?.customFilters.length === 1 && !filterColumn.customFilters.customFilters[0].operator) {\n                return { operator1: ExtendCustomFilterOperator.EQUALS, val1: filterColumn.customFilters.customFilters[0].val.toString() };\n            }\n\n            return false;\n        },\n    };\n\n    // #region number conditions\n\n    export const GREATER_THAN: IFilterConditionItem = {\n        label: 'sheets-filter.conditions.greater-than',\n\n        operator: CustomFilterOperator.GREATER_THAN,\n        numOfParameters: 1,\n        order: OperatorOrder.FIRST,\n\n        getDefaultFormParams: () => ({ operator1: CustomFilterOperator.GREATER_THAN, val1: '' }),\n        mapToFilterColumn: (mapParams) => ({\n            customFilters: { customFilters: [{ val: mapParams.val1!, operator: CustomFilterOperator.GREATER_THAN }] },\n        }),\n        testMappingParams: (params) => {\n            const [op] = getOnlyOperatorAndVal(params);\n            return op === CustomFilterOperator.GREATER_THAN;\n        },\n        testMappingFilterColumn: (filterColumn) => {\n            if (filterColumn.customFilters?.customFilters.length !== 1) {\n                return false;\n            }\n\n            const firstCustomFilter = filterColumn.customFilters.customFilters[0];\n            if (firstCustomFilter.operator !== CustomFilterOperator.GREATER_THAN) {\n                return false;\n            }\n\n            return { operator1: CustomFilterOperator.GREATER_THAN, val1: firstCustomFilter.val.toString() };\n        },\n    };\n\n    export const GREATER_THAN_OR_EQUAL: IFilterConditionItem = {\n        label: 'sheets-filter.conditions.greater-than-or-equal',\n\n        operator: CustomFilterOperator.GREATER_THAN_OR_EQUAL,\n        numOfParameters: 1,\n        order: OperatorOrder.FIRST,\n\n        getDefaultFormParams: () => ({ operator1: CustomFilterOperator.GREATER_THAN_OR_EQUAL, val1: '' }),\n        testMappingParams: (params) => {\n            const [op] = getOnlyOperatorAndVal(params);\n            return op === CustomFilterOperator.GREATER_THAN_OR_EQUAL;\n        },\n\n        mapToFilterColumn: (mapParams) => ({\n            customFilters: { customFilters: [{ val: mapParams.val1!, operator: CustomFilterOperator.GREATER_THAN_OR_EQUAL }] },\n        }),\n        testMappingFilterColumn: (filterColumn) => {\n            if (filterColumn.customFilters?.customFilters.length !== 1) {\n                return false;\n            }\n\n            const firstCustomFilter = filterColumn.customFilters.customFilters[0];\n            if (firstCustomFilter.operator !== CustomFilterOperator.GREATER_THAN_OR_EQUAL) {\n                return false;\n            }\n\n            return { operator1: CustomFilterOperator.GREATER_THAN_OR_EQUAL, val1: firstCustomFilter.val.toString() };\n        },\n    };\n\n    export const LESS_THAN: IFilterConditionItem = {\n        label: 'sheets-filter.conditions.less-than',\n\n        operator: CustomFilterOperator.LESS_THAN,\n        numOfParameters: 1,\n        order: OperatorOrder.FIRST,\n\n        getDefaultFormParams: () => ({ operator1: CustomFilterOperator.LESS_THAN, val1: '' }),\n        testMappingParams: (params) => {\n            const [op] = getOnlyOperatorAndVal(params);\n            return op === CustomFilterOperator.LESS_THAN;\n        },\n\n        mapToFilterColumn: (mapParams) => ({\n            customFilters: { customFilters: [{ val: mapParams.val1!, operator: CustomFilterOperator.LESS_THAN }] },\n        }),\n        testMappingFilterColumn: (filterColumn) => {\n            if (filterColumn.customFilters?.customFilters.length !== 1) {\n                return false;\n            }\n\n            const firstCustomFilter = filterColumn.customFilters.customFilters[0];\n            if (firstCustomFilter.operator !== CustomFilterOperator.LESS_THAN) {\n                return false;\n            }\n\n            return { operator1: CustomFilterOperator.LESS_THAN, val1: firstCustomFilter.val.toString() };\n        },\n    };\n\n    export const LESS_THAN_OR_EQUAL: IFilterConditionItem = {\n        label: 'sheets-filter.conditions.less-than-or-equal',\n\n        operator: CustomFilterOperator.LESS_THAN_OR_EQUAL,\n        numOfParameters: 1,\n        order: OperatorOrder.FIRST,\n\n        getDefaultFormParams: () => ({ operator1: CustomFilterOperator.LESS_THAN_OR_EQUAL, val1: '' }),\n        testMappingParams: (params) => {\n            const [op] = getOnlyOperatorAndVal(params);\n            return op === CustomFilterOperator.LESS_THAN_OR_EQUAL;\n        },\n\n        mapToFilterColumn: (mapParams) => ({\n            customFilters: { customFilters: [{ val: mapParams.val1!, operator: CustomFilterOperator.LESS_THAN_OR_EQUAL }] },\n        }),\n        testMappingFilterColumn: (filterColumn) => {\n            if (filterColumn.customFilters?.customFilters.length !== 1) {\n                return false;\n            }\n\n            const firstCustomFilter = filterColumn.customFilters.customFilters[0];\n            if (firstCustomFilter.operator !== CustomFilterOperator.LESS_THAN_OR_EQUAL) {\n                return false;\n            }\n\n            return { operator1: CustomFilterOperator.LESS_THAN_OR_EQUAL, val1: firstCustomFilter.val.toString() };\n        },\n    };\n\n    export const EQUAL: IFilterConditionItem = {\n        label: 'sheets-filter.conditions.equal',\n\n        operator: CustomFilterOperator.EQUAL,\n        numOfParameters: 1,\n        order: OperatorOrder.FIRST,\n\n        getDefaultFormParams: () => ({ operator1: CustomFilterOperator.EQUAL, val1: '' }),\n        testMappingParams: (params) => {\n            const [op] = getOnlyOperatorAndVal(params);\n            return op === CustomFilterOperator.EQUAL;\n        },\n\n        mapToFilterColumn: (mapParams) => ({\n            customFilters: { customFilters: [{ val: mapParams.val1!, operator: CustomFilterOperator.EQUAL }] },\n        }),\n        testMappingFilterColumn: (filterColumn) => {\n            if (filterColumn.customFilters?.customFilters.length !== 1) {\n                return false;\n            }\n\n            const firstCustomFilter = filterColumn.customFilters.customFilters[0];\n            if (firstCustomFilter.operator !== CustomFilterOperator.EQUAL) {\n                return false;\n            }\n\n            return { operator1: CustomFilterOperator.EQUAL, val1: firstCustomFilter.val.toString() };\n        },\n    };\n\n    export const NOT_EQUAL: IFilterConditionItem = {\n        label: 'sheets-filter.conditions.not-equal',\n\n        operator: CustomFilterOperator.NOT_EQUALS,\n        numOfParameters: 1,\n        order: OperatorOrder.FIRST,\n\n        getDefaultFormParams: () => ({ operator1: CustomFilterOperator.NOT_EQUALS, val1: '' }),\n        testMappingParams: (params) => {\n            const [op] = getOnlyOperatorAndVal(params);\n            return op === CustomFilterOperator.NOT_EQUALS;\n        },\n\n        mapToFilterColumn: (mapParams) => ({\n            customFilters: { customFilters: [{ val: mapParams.val1!, operator: CustomFilterOperator.NOT_EQUALS }] },\n        }),\n        testMappingFilterColumn: (filterColumn) => {\n            if (filterColumn.customFilters?.customFilters.length !== 1) {\n                return false;\n            }\n\n            const firstCustomFilter = filterColumn.customFilters.customFilters[0];\n            if (firstCustomFilter.operator !== CustomFilterOperator.NOT_EQUALS) {\n                return false;\n            }\n\n            return { operator1: CustomFilterOperator.NOT_EQUALS, val1: firstCustomFilter.val.toString() };\n        },\n    };\n\n    // #endregion\n\n    export const BETWEEN: IFilterConditionItem = {\n        label: 'sheets-filter.conditions.between',\n\n        operator: ExtendCustomFilterOperator.BETWEEN,\n        order: OperatorOrder.SECOND,\n        numOfParameters: 2,\n\n        getDefaultFormParams: () => ({\n            and: true,\n            operator1: CustomFilterOperator.GREATER_THAN_OR_EQUAL,\n            val1: '',\n            operator2: CustomFilterOperator.LESS_THAN_OR_EQUAL,\n            val2: '',\n        }),\n        testMappingParams: (params) => {\n            const { and, operator1, operator2 } = params;\n            if (!and) return false;\n\n            const operators = [operator1, operator2];\n            return operators.includes(CustomFilterOperator.GREATER_THAN_OR_EQUAL)\n                && operators.includes(CustomFilterOperator.LESS_THAN_OR_EQUAL);\n        },\n\n        mapToFilterColumn: (mapParams) => {\n            const { val1, val2, operator1 } = mapParams;\n            const operator1IsGreater = operator1 === CustomFilterOperator.GREATER_THAN_OR_EQUAL;\n            return {\n                customFilters: {\n                    and: BooleanNumber.TRUE,\n                    customFilters: [\n                        { val: operator1IsGreater ? val1! : val2!, operator: CustomFilterOperator.GREATER_THAN_OR_EQUAL },\n                        { val: operator1IsGreater ? val2! : val1!, operator: CustomFilterOperator.LESS_THAN_OR_EQUAL },\n                    ],\n                },\n            };\n        },\n        testMappingFilterColumn: (filterColumn) => {\n            if (filterColumn.customFilters?.customFilters.length !== 2) {\n                return false;\n            }\n\n            const [firstCustomFilter, secondCustomFilter] = filterColumn.customFilters.customFilters;\n            if (\n                firstCustomFilter.operator === CustomFilterOperator.GREATER_THAN_OR_EQUAL\n                && secondCustomFilter.operator === CustomFilterOperator.LESS_THAN_OR_EQUAL\n                && filterColumn.customFilters.and\n            ) {\n                return {\n                    and: true,\n                    operator1: CustomFilterOperator.GREATER_THAN_OR_EQUAL,\n                    val1: firstCustomFilter.val.toString(),\n                    operator2: CustomFilterOperator.LESS_THAN_OR_EQUAL,\n                    val2: secondCustomFilter.val.toString(),\n                };\n            }\n\n            if (\n                secondCustomFilter.operator === CustomFilterOperator.GREATER_THAN_OR_EQUAL\n                && firstCustomFilter.operator === CustomFilterOperator.LESS_THAN_OR_EQUAL\n                && filterColumn.customFilters.and\n            ) {\n                return {\n                    and: true,\n                    operator1: CustomFilterOperator.GREATER_THAN_OR_EQUAL,\n                    val1: secondCustomFilter.val.toString(),\n                    operator2: CustomFilterOperator.LESS_THAN_OR_EQUAL,\n                    val2: firstCustomFilter.val.toLocaleString(),\n                };\n            }\n\n            return false;\n        },\n    };\n\n    export const NOT_BETWEEN: IFilterConditionItem = {\n        label: 'sheets-filter.conditions.not-between',\n\n        operator: ExtendCustomFilterOperator.NOT_BETWEEN,\n        order: OperatorOrder.SECOND,\n        numOfParameters: 2,\n\n        getDefaultFormParams: () => ({\n            operator1: CustomFilterOperator.LESS_THAN,\n            val1: '',\n            operator2: CustomFilterOperator.GREATER_THAN,\n            val2: '',\n        }),\n        testMappingParams: (params) => {\n            const { and, operator1, operator2 } = params;\n            if (and) return false;\n\n            const operators = [operator1, operator2];\n            return operators.includes(CustomFilterOperator.GREATER_THAN) && operators.includes(CustomFilterOperator.LESS_THAN);\n        },\n\n        mapToFilterColumn: (mapParams) => {\n            const { val1, val2, operator1 } = mapParams;\n            const operator1IsGreater = operator1 === CustomFilterOperator.GREATER_THAN;\n            return {\n                customFilters: {\n                    customFilters: [\n                        { val: operator1IsGreater ? val1! : val2!, operator: CustomFilterOperator.GREATER_THAN },\n                        { val: operator1IsGreater ? val2! : val1!, operator: CustomFilterOperator.LESS_THAN },\n                    ],\n                },\n            };\n        },\n        testMappingFilterColumn: (filterColumn) => {\n            if (filterColumn.customFilters?.customFilters.length !== 2) {\n                return false;\n            }\n\n            const [firstCustomFilter, secondCustomFilter] = filterColumn.customFilters.customFilters;\n            if (\n                firstCustomFilter.operator === CustomFilterOperator.LESS_THAN\n                && secondCustomFilter.operator === CustomFilterOperator.GREATER_THAN\n                && !filterColumn.customFilters.and\n            ) {\n                return {\n                    operator1: CustomFilterOperator.LESS_THAN,\n                    val1: firstCustomFilter.val.toString(),\n                    operator2: CustomFilterOperator.GREATER_THAN,\n                    val2: secondCustomFilter.val.toString(),\n                };\n            }\n\n            if (\n                secondCustomFilter.operator === CustomFilterOperator.LESS_THAN\n                && firstCustomFilter.operator === CustomFilterOperator.GREATER_THAN\n                && !filterColumn.customFilters.and\n            ) {\n                return {\n                    operator1: CustomFilterOperator.GREATER_THAN,\n                    val1: secondCustomFilter.val.toString(),\n                    operator2: CustomFilterOperator.LESS_THAN,\n                    val2: firstCustomFilter.val.toLocaleString(),\n                };\n            }\n\n            return false;\n        },\n    };\n\n    /**\n     * This should be test last. If no other condition item can be mapped, then it should be mapped.\n     */\n    export const CUSTOM: IFilterConditionItem = {\n        label: 'sheets-filter.conditions.custom',\n\n        operator: ExtendCustomFilterOperator.CUSTOM,\n        order: OperatorOrder.SECOND,\n        numOfParameters: 2,\n\n        getDefaultFormParams: () => {\n            return {\n                operator1: ExtendCustomFilterOperator.NONE,\n                val1: '',\n                operator2: ExtendCustomFilterOperator.NONE,\n                val2: '',\n            };\n        },\n        testMappingParams: () => true,\n\n        mapToFilterColumn: (mapParams) => {\n            const { and, val1, val2, operator1, operator2 } = mapParams;\n\n            function mapOperator(operator: FilterOperator | undefined, val: string) {\n                // eslint-disable-next-line ts/no-use-before-define\n                for (const condition of ALL_CONDITIONS) {\n                    if (condition.operator === operator) {\n                        return condition.mapToFilterColumn({ val1: val, operator1: operator });\n                    }\n                }\n            }\n\n            const operator1IsNone = !operator1 || operator1 === FilterConditionItems.NONE.operator;\n            const operator2IsNone = !operator2 || operator2 === FilterConditionItems.NONE.operator;\n\n            if (operator1IsNone && operator2IsNone) {\n                return NONE.mapToFilterColumn({});\n            }\n\n            if (operator1IsNone) {\n                return mapOperator(operator2!, val2!)!;\n            }\n\n            if (operator2IsNone) {\n                return mapOperator(operator1!, val1!)!;\n            }\n\n            const mappedCustomFilter1 = mapOperator(operator1!, val1!)!;\n            const mappedCustomFilter2 = mapOperator(operator2!, val2!)!;\n            const customFilters: ICustomFilters = {\n                customFilters: [\n                    mappedCustomFilter1.customFilters!.customFilters[0],\n                    mappedCustomFilter2.customFilters!.customFilters[0],\n                ],\n            };\n\n            if (and) customFilters.and = BooleanNumber.TRUE;\n            return { customFilters };\n        },\n        testMappingFilterColumn: (filterColumn) => {\n            if (filterColumn.customFilters?.customFilters.length !== 2) {\n                return false;\n            }\n\n            const params = filterColumn.customFilters.customFilters.map((customFilter) => {\n                return testMappingFilterColumn({ customFilters: { customFilters: [customFilter] } });\n            });\n\n            const result: IFilterConditionFormParams = {\n                operator1: params[0][0].operator,\n                val1: params[0][1].val1,\n                operator2: params[1][0].operator,\n                val2: params[1][1].val1,\n            };\n\n            if (filterColumn.customFilters.and) {\n                result.and = true;\n            }\n\n            return result;\n        },\n    };\n\n    export const ALL_CONDITIONS: IFilterConditionItem[] = [\n        // ------------------------------\n        NONE,\n        // ------------------------------\n        EMPTY,\n        NOT_EMPTY,\n        // ------------------------------\n        TEXT_CONTAINS,\n        DOES_NOT_CONTAIN,\n        STARTS_WITH,\n        ENDS_WITH,\n        EQUALS,\n        // ------------------------------\n        GREATER_THAN,\n        GREATER_THAN_OR_EQUAL,\n        LESS_THAN,\n        LESS_THAN_OR_EQUAL,\n        EQUAL,\n        NOT_EQUAL,\n        BETWEEN,\n        NOT_BETWEEN,\n        // ------------------------------\n        CUSTOM,\n    ];\n\n    export function getItemByOperator(operator: FilterOperator): IFilterConditionItem {\n        const item = ALL_CONDITIONS.find((condition) => condition.operator === operator);\n        if (!item) {\n            throw new Error(`[SheetsFilter]: no condition item found for operator: ${operator}`);\n        }\n\n        return item;\n    }\n\n    export function testMappingParams(mapParams: IFilterConditionFormParams, numOfParameters: number): IFilterConditionItem {\n        // TODO@wzhudev: iteration here can be optimized\n        // We match operators with same count of parameters first.\n        for (const condition of ALL_CONDITIONS.filter((condition) => condition.numOfParameters === numOfParameters)) {\n            if (condition.numOfParameters !== 0 && condition.testMappingParams(mapParams)) {\n                return condition;\n            }\n        }\n\n        // And fallback to others.\n        for (const condition of ALL_CONDITIONS) {\n            if (condition.testMappingParams(mapParams)) {\n                return condition;\n            }\n        }\n\n        throw new Error('[SheetsFilter]: no condition item can be mapped from the filter map params!');\n    }\n\n    export function getInitialFormParams(operator: FilterOperator): IFilterConditionFormParams {\n        const condition = ALL_CONDITIONS.find((condition) => condition.operator === operator)!;\n        if (condition?.numOfParameters === 0) {\n            return { operator1: condition.operator };\n        }\n\n        return condition.getDefaultFormParams();\n    }\n\n    export function mapToFilterColumn(condition: IFilterConditionItem, mapParams: IFilterConditionFormParams): Nullable<Omit<IFilterColumn, 'colId'>> {\n        return condition.mapToFilterColumn(mapParams);\n    }\n\n    export function testMappingFilterColumn(filterColumn: Nullable<Omit<IFilterColumn, 'colId'>>): [IFilterConditionItem, IFilterConditionFormParams] {\n        if (!filterColumn) {\n            return [NONE, {}];\n        }\n\n        for (const condition of ALL_CONDITIONS) {\n            const mapParams = condition.testMappingFilterColumn(filterColumn);\n            if (mapParams) {\n                return [condition, mapParams];\n            }\n        }\n\n        // Return NONE by default.\n        return [NONE, {}];\n    }\n}\n\nfunction getOnlyOperatorAndVal(mapParams: IFilterConditionFormParams): [FilterOperator, string | undefined] {\n    const { operator1, operator2, val1, val2 } = mapParams;\n    if (operator1 && operator2) {\n        throw new Error('Both operator1 and operator2 are set!');\n    }\n\n    if (!operator1 && !operator2) {\n        throw new Error('Neither operator1 and operator2 and both not set!');\n    }\n\n    return operator1 ? [operator1, val1] : [operator2!, val2];\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IFilterByValueWithTreeItem } from '../services/sheets-filter-panel.service';\n\nexport function statisticFilterByValueItems(items: IFilterByValueWithTreeItem[]): {\n    checked: number;\n    unchecked: number;\n    checkedItems: IFilterByValueWithTreeItem[];\n    uncheckedItems: IFilterByValueWithTreeItem[];\n} {\n    const checkedItems: IFilterByValueWithTreeItem[] = [];\n    const uncheckedItems: IFilterByValueWithTreeItem[] = [];\n    let checked = 0;\n    let unchecked = 0;\n\n    function traverse(node: IFilterByValueWithTreeItem) {\n        if (node.leaf) {\n            if (node.checked) {\n                checkedItems.push(node);\n                checked += node.count;\n            } else {\n                uncheckedItems.push(node);\n                unchecked += node.count;\n            }\n        }\n\n        if (node.children) {\n            node.children.forEach(traverse);\n        }\n    }\n\n    items.forEach(traverse);\n\n    return {\n        checkedItems,\n        uncheckedItems,\n        checked,\n        unchecked,\n    };\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IRange, Styles, Workbook, Worksheet } from '@univerjs/core';\nimport type { IFilterByValueItem, IFilterByValueWithTreeItem } from '../services/sheets-filter-panel.service';\nimport { createIdentifier, Disposable, extractPureTextFromCell, ILogService, Inject, IUniverInstanceService, LocaleService, numfmt } from '@univerjs/core';\n\nexport interface ISheetsGenerateFilterValuesService {\n    getFilterValues(params: {\n        unitId: string;\n        subUnitId: string;\n        filteredOutRowsByOtherColumns: number[];\n        filters: boolean;\n        blankChecked: boolean;\n        iterateRange: IRange;\n        alreadyChecked: string[];\n    }): Promise<{\n        filterTreeItems: IFilterByValueWithTreeItem[];\n        filterTreeMapCache: Map<string, string[]>;\n    }>;\n}\nexport const SHEETS_GENERATE_FILTER_VALUES_SERVICE_NAME = 'sheets-filter.generate-filter-values.service';\nexport const ISheetsGenerateFilterValuesService = createIdentifier<ISheetsGenerateFilterValuesService>(SHEETS_GENERATE_FILTER_VALUES_SERVICE_NAME);\nconst CAN_PARSE_DATE_FORMAT = ['yyyy-mm-dd', 'yyyy-mm-dd;@', 'yyyy/mm/dd;@', 'yyyy/mm/dd hh:mm', 'yyyy-m-d am/pm h:mm', 'yyyy-MM-dd', 'yyyy/MM/dd', 'yyyy/mm/dd', 'yyyy\"\u5E74\"MM\"\u6708\"dd\"\u65E5\"', 'MM-dd', 'M\"\u6708\"d\"\u65E5\"', 'MM-dd A/P hh:mm'];\n\nexport class SheetsGenerateFilterValuesService extends Disposable {\n    constructor(\n        @Inject(LocaleService) private readonly _localeService: LocaleService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @ILogService private readonly _logService: ILogService\n    ) {\n        super();\n    }\n\n    async getFilterValues(params: {\n        unitId: string;\n        subUnitId: string;\n        filteredOutRowsByOtherColumns: number[];\n        filters: boolean;\n        blankChecked: boolean;\n        iterateRange: IRange;\n        alreadyChecked: string[];\n    }) {\n        const { unitId, subUnitId, filteredOutRowsByOtherColumns, filters, blankChecked, iterateRange, alreadyChecked } = params;\n        const workbook = this._univerInstanceService.getUnit<Workbook>(unitId);\n        const worksheet = this._univerInstanceService.getUnit<Workbook>(unitId)?.getSheetBySheetId(subUnitId);\n\n        if (!workbook || !worksheet) return [];\n\n        this._logService.debug('[SheetsGenerateFilterValuesService]', 'getFilterValues for', { unitId, subUnitId });\n\n        return getFilterTreeByValueItems(filters, this._localeService, iterateRange, worksheet, new Set(filteredOutRowsByOtherColumns), new Set(alreadyChecked.map(String)), blankChecked, workbook.getStyles());\n    }\n}\n\nexport function getFilterByValueItems(\n    filters: boolean,\n    blankChecked: boolean,\n    localeService: LocaleService,\n    iterateRange: IRange,\n    worksheet: Worksheet,\n    alreadyChecked: Set<string>,\n    filteredOutRowsByOtherColumns: Set<number>\n): IFilterByValueItem[] {\n    const items: IFilterByValueItem[] = [];\n    const itemsByKey: Record<string, IFilterByValueItem> = {};\n\n    let index = 0;\n    let emptyCount = 0;\n    for (const cell of worksheet.iterateByColumn(iterateRange, false, false)) { // iterate and do not skip empty cells\n        const { row, rowSpan = 1 } = cell;\n\n        let rowIndex = 0;\n        while (rowIndex < rowSpan) {\n            const targetRow = row + rowIndex;\n\n            if (filteredOutRowsByOtherColumns.has(targetRow)) {\n                rowIndex++;\n                continue;\n            }\n\n            const value = cell?.value ? extractPureTextFromCell(cell.value) : '';\n            if (!value) {\n                emptyCount += 1;\n                rowIndex += rowSpan;\n                continue;\n            }\n\n            if (!itemsByKey[value]) {\n                const item: IFilterByValueItem = {\n                    value,\n                    checked: alreadyChecked.size ? alreadyChecked.has(value) : !blankChecked,\n                    count: 1,\n                    index,\n                    isEmpty: false,\n                };\n\n                itemsByKey[value] = item;\n                items.push(item);\n            } else {\n                itemsByKey[value].count++;\n            }\n            rowIndex++;\n        }\n\n        index++;\n    }\n\n    const initialBlankChecked = filters ? blankChecked : true;\n    if (emptyCount > 0) {\n        const item: IFilterByValueItem = {\n            value: localeService.t('sheets-filter.panel.empty'),\n            checked: initialBlankChecked,\n            count: emptyCount,\n            index,\n            isEmpty: true,\n        };\n\n        items.push(item);\n    }\n\n    return items;\n}\n\nexport function getFilterTreeByValueItems(\n    filters: boolean,\n    localeService: LocaleService,\n    iterateRange: IRange,\n    worksheet: Worksheet,\n    filteredOutRowsByOtherColumns: Set<number>,\n    alreadyChecked: Set<string>,\n    blankChecked: boolean,\n    styles: Styles\n): {\n        filterTreeItems: IFilterByValueWithTreeItem[];\n        filterTreeMapCache: Map<string, string[]>;\n    } {\n    const items: Map<string, IFilterByValueWithTreeItem> = new Map();\n    const treeMap: Map<string, string[]> = new Map();\n\n    const DefaultPattern = 'yyyy-mm-dd';\n    const canSplitPatternSet = new Set(CAN_PARSE_DATE_FORMAT);\n    const EmptyKey = 'empty';\n\n    let emptyCount = 0;\n    for (const cell of worksheet.iterateByColumn(iterateRange, false, false)) { // iterate and do not skip empty cells\n        const { row, rowSpan = 1 } = cell;\n\n        let rowIndex = 0;\n        while (rowIndex < rowSpan) {\n            const targetRow = row + rowIndex;\n\n            if (filteredOutRowsByOtherColumns.has(targetRow)) {\n                rowIndex++;\n                continue;\n            }\n\n            const value = cell?.value ? extractPureTextFromCell(cell.value) : '';\n            if (!value) {\n                emptyCount += 1;\n                rowIndex += rowSpan;\n                continue;\n            }\n\n            const fmtStr = (cell.value?.v && !cell.value.p) ? styles.get(cell.value?.s)?.n?.pattern : '';\n            const isDateValue = fmtStr && numfmt.isDate(fmtStr);\n            if (fmtStr && isDateValue && canSplitPatternSet.has(fmtStr)) {\n                // const originValue = numfmt.parseDate(value).v as number;\n                const originValue = worksheet.getCellRaw(cell.row, cell.col)?.v as number;\n                if (!originValue) {\n                    rowIndex++;\n                    continue;\n                }\n                const valueParsedByDefaultPattern = numfmt.format(DefaultPattern, originValue);\n                const [year, month, day] = valueParsedByDefaultPattern.split('-').map(Number);\n                let yearItem = items.get(`${year}`);\n                if (!yearItem) {\n                    yearItem = {\n                        title: `${year}`,\n                        key: `${year}`,\n                        children: [],\n                        count: 0,\n                        leaf: false,\n                        checked: false,\n                    };\n                    items.set(`${year}`, yearItem);\n                    treeMap.set(`${year}`, [`${year}`]);\n                }\n                let monthItem = yearItem.children?.find((item) => item.key === `${year}-${month}`);\n                if (!monthItem) {\n                    monthItem = {\n                        title: localeService.t(`sheets-filter.date.${month}`),\n                        key: `${year}-${month}`,\n                        children: [],\n                        count: 0,\n                        leaf: false,\n                        checked: false,\n                    };\n                    yearItem.children?.push(monthItem);\n                    treeMap.set(`${year}-${month}`, [`${year}`, `${year}-${month}`]);\n                }\n                const dayItem = monthItem?.children?.find((item) => item.key === `${year}-${month}-${day}`);\n                if (!dayItem) {\n                    monthItem.children?.push({\n                        title: `${day}`,\n                        key: `${year}-${month}-${day}`,\n                        count: 1,\n                        originValues: new Set([value]),\n                        leaf: true,\n                        checked: alreadyChecked.size ? alreadyChecked.has(value) : !blankChecked,\n                    });\n                    monthItem.count++;\n                    yearItem.count++;\n                    treeMap.set(`${year}-${month}-${day}`, [`${year}`, `${year}-${month}`, `${year}-${month}-${day}`]);\n                } else {\n                    dayItem.originValues!.add(value);\n                    dayItem.count++;\n                    monthItem.count++;\n                    yearItem.count++;\n                }\n            } else {\n                const key = value;\n                let item = items.get(key);\n                if (!item) {\n                    item = {\n                        title: value,\n                        leaf: true,\n                        checked: alreadyChecked.size ? alreadyChecked.has(value) : !blankChecked,\n                        key,\n                        count: 1,\n                    };\n                    items.set(key, item);\n                    treeMap.set(key, [key]);\n                } else {\n                    item.count++;\n                }\n            }\n            rowIndex++;\n        }\n    }\n\n    const initialBlankChecked = filters ? blankChecked : true;\n    if (emptyCount > 0) {\n        const item: IFilterByValueWithTreeItem = {\n            title: localeService.t('sheets-filter.panel.empty'),\n            count: emptyCount,\n            leaf: true,\n            checked: initialBlankChecked,\n            key: EmptyKey,\n        };\n        items.set('empty', item);\n        treeMap.set('empty', [EmptyKey]);\n    }\n\n    return {\n        filterTreeItems: generateFilterTreeBySort(Array.from(items.values())),\n        filterTreeMapCache: treeMap,\n    };\n}\n\nfunction generateFilterTreeBySort(tree: IFilterByValueWithTreeItem[]) {\n    return Array.from(tree).sort((a, b) => {\n        if (a.children && !b.children) return -1;\n        if (!a.children && b.children) return 1;\n        return b.title.localeCompare(a.title);\n    }).map((yearItem) => {\n        if (yearItem.children) {\n            yearItem.children.sort((a, b) => {\n                const monthA = Number.parseInt(a.key.split('-')[1], 10);\n                const monthB = Number.parseInt(b.key.split('-')[1], 10);\n                return monthA - monthB;\n            }).forEach((monthItem) => {\n                if (monthItem.children) {\n                    monthItem.children.sort((a, b) => {\n                        const dayA = Number.parseInt(a.key.split('-')[2], 10);\n                        const dayB = Number.parseInt(b.key.split('-')[2], 10);\n                        return dayA - dayB;\n                    });\n                }\n            });\n        }\n        return yearItem;\n    });\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IFilterByValueWithTreeItem } from './sheets-filter-panel.service';\n\nexport function findObjectByKey(data: IFilterByValueWithTreeItem[], targetKey: string): IFilterByValueWithTreeItem | null {\n    for (const node of data) {\n        if (node.key === targetKey) {\n            return node;\n        }\n        if (node.children) {\n            const result = findObjectByKey(node.children, targetKey);\n            if (result) {\n                return result;\n            }\n        }\n    }\n    return null;\n}\n\nexport function areAllLeafNodesChecked(node: IFilterByValueWithTreeItem): boolean {\n    if (node.leaf) {\n        return node.checked;\n    }\n    return node.children ? node.children.every((child) => areAllLeafNodesChecked(child)) : true;\n}\n\nexport function updateLeafNodesCheckedStatus(node: IFilterByValueWithTreeItem, status?: boolean) {\n    if (node.leaf) {\n        if (status !== undefined) {\n            node.checked = status;\n        } else {\n            node.checked = !node.checked;\n        }\n    }\n\n    if (node.children) {\n        node.children.forEach((child) => updateLeafNodesCheckedStatus(child, status));\n    }\n}\n\nexport function searchTree(items: IFilterByValueWithTreeItem[], searchKeywords: string[]): IFilterByValueWithTreeItem[] {\n    const result: IFilterByValueWithTreeItem[] = [];\n\n    items.forEach((item) => {\n        const originMatches = item.originValues\n            ? searchKeywords.some((keyword) =>\n                Array.from(item.originValues!).some((value) =>\n                    value.toLowerCase().includes(keyword.toLowerCase())\n                )\n            )\n            : false;\n\n        const titleMatches = !originMatches\n            && searchKeywords.some((keyword) =>\n                item.title.toLowerCase().includes(keyword.toLowerCase())\n            );\n\n        const matches = originMatches || titleMatches;\n\n        if (matches) {\n            result.push({ ...item });\n        } else if (item.children) {\n            const filteredChildren = searchTree(item.children, searchKeywords);\n\n            if (filteredChildren.length > 0) {\n                const aggregatedCount = filteredChildren.reduce((sum, child) => sum + child.count, 0);\n                result.push({ ...item, count: aggregatedCount, children: filteredChildren });\n            }\n        }\n    });\n\n    return result;\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, IRange, Nullable } from '@univerjs/core';\nimport type { FilterColumn, FilterModel, IFilterColumn, ISetSheetsFilterCriteriaCommandParams } from '@univerjs/sheets-filter';\nimport type { Observable } from 'rxjs';\nimport type { FilterOperator, IFilterConditionFormParams, IFilterConditionItem } from '../models/conditions';\nimport { createIdentifier, Disposable, ICommandService, Inject, Injector, IUniverInstanceService, LocaleService, Quantity, Tools } from '@univerjs/core';\nimport { RefRangeService } from '@univerjs/sheets';\nimport { SetSheetsFilterCriteriaCommand } from '@univerjs/sheets-filter';\n\nimport { BehaviorSubject, combineLatest, map, merge, of, ReplaySubject, shareReplay, startWith, Subject, throttleTime } from 'rxjs';\nimport { FilterConditionItems } from '../models/conditions';\nimport { statisticFilterByValueItems } from '../models/utils';\nimport { getFilterTreeByValueItems, ISheetsGenerateFilterValuesService } from '../worker/generate-filter-values.service';\nimport { areAllLeafNodesChecked, findObjectByKey, searchTree, updateLeafNodesCheckedStatus } from './util';\n\nexport enum FilterBy {\n    VALUES,\n    CONDITIONS,\n}\n\nexport interface IFilterByValueItem {\n    value: string;\n    checked: boolean;\n    count: number;\n    index: number;\n\n    /**\n     * This property indicates that this is a special item which maps to empty strings or empty cells.\n     */\n    isEmpty: boolean;\n}\n\nexport interface IFilterByValueWithTreeItem {\n    title: string;\n    key: string;\n    count: number;\n    checked: boolean;\n    leaf: boolean;\n    originValues?: Set<string>;\n    children?: IFilterByValueWithTreeItem[];\n}\n\nexport interface ISheetsFilterPanelService {\n    /**\n     * Set up the panel to change the filter condition on a specific column.\n     * @param filterModel the filter model we will be working on\n     * @param col\n     * @returns if the filter condition is set up successfully\n     */\n    setUpFilterConditionOfCol(filterModel: FilterModel, col: number): boolean;\n\n    /**\n     * Terminate the filter panel without applying changes.\n     */\n    terminate(): boolean;\n}\nexport const ISheetsFilterPanelService = createIdentifier<ISheetsFilterPanelService>('sheets-filter-ui.sheets-filter-panel.service');\n\nexport interface IFilterByModel extends IDisposable {\n    canApply$: Observable<boolean>;\n\n    deltaCol(offset: number): void;\n\n    clear(): Promise<boolean>;\n    apply(): Promise<boolean>;\n}\n\n/**\n * This service controls the state of the filter panel. There should be only one instance of the filter panel\n * at one time.\n */\nexport class SheetsFilterPanelService extends Disposable {\n    private readonly _filterBy$ = new BehaviorSubject<FilterBy>(FilterBy.VALUES);\n    readonly filterBy$ = this._filterBy$.asObservable();\n    get filterBy(): FilterBy { return this._filterBy$.getValue(); }\n\n    private readonly _filterByModel$ = new ReplaySubject<Nullable<IFilterByModel>>(1);\n    readonly filterByModel$ = this._filterByModel$.asObservable();\n    private _filterByModel: Nullable<IFilterByModel> = null;\n    get filterByModel(): Nullable<IFilterByModel> { return this._filterByModel; }\n    private set filterByModel(model: Nullable<IFilterByModel>) {\n        this._filterByModel = model;\n        this._filterByModel$.next(model);\n    }\n\n    private readonly _hasCriteria$ = new BehaviorSubject<boolean>(false);\n    readonly hasCriteria$ = this._hasCriteria$.asObservable();\n\n    private _filterModel: Nullable<FilterModel> = null;\n    get filterModel() { return this._filterModel; }\n\n    private readonly _col$ = new BehaviorSubject<number>(-1);\n    readonly col$ = this._col$.asObservable();\n    get col(): number { return this._col$.getValue(); }\n\n    constructor(\n        @Inject(Injector) private readonly _injector: Injector,\n        @Inject(RefRangeService) private readonly _refRangeService: RefRangeService\n    ) {\n        super();\n    }\n\n    override dispose(): void {\n        this._filterBy$.complete();\n        this._filterByModel$.complete();\n        this._hasCriteria$.complete();\n    }\n\n    setupCol(filterModel: FilterModel, col: number): void {\n        this.terminate();\n\n        this._filterModel = filterModel;\n        this._col$.next(col);\n\n        // We use filter type that (if) has been set on the column as the default filter type.\n        const filterColumn = filterModel.getFilterColumn(col);\n        if (filterColumn) {\n            const info = filterColumn.getColumnData();\n            if (info.customFilters) {\n                this._hasCriteria$.next(true);\n                this._setupByConditions(filterModel, col);\n                return;\n            }\n\n            if (info.filters) {\n                this._hasCriteria$.next(true);\n                this._setupByValues(filterModel, col);\n                return;\n            }\n\n            // Use value values by default.\n            this._hasCriteria$.next(false);\n            this._setupByValues(filterModel, col);\n            return;\n        }\n\n        // By default we filter by values.\n        this._hasCriteria$.next(false);\n        this._setupByValues(filterModel, col);\n    };\n\n    changeFilterBy(filterBy: FilterBy): boolean {\n        if (!this._filterModel || this.col === -1) {\n            return false;\n        }\n\n        if (filterBy === FilterBy.VALUES) {\n            this._setupByValues(this._filterModel, this.col);\n        } else {\n            this._setupByConditions(this._filterModel, this.col);\n        }\n\n        return true;\n    }\n\n    terminate(): boolean {\n        this._filterModel = null;\n        this._col$.next(-1);\n\n        this._disposeFilterHeaderChangeListener();\n        return true;\n    }\n\n    private _filterHeaderListener: Nullable<IDisposable> = null;\n    private _disposeFilterHeaderChangeListener(): void {\n        this._filterHeaderListener?.dispose();\n        this._filterHeaderListener = null;\n    }\n\n    private _listenToFilterHeaderChange(filterModel: FilterModel, col: number): void {\n        this._disposeFilterHeaderChangeListener();\n\n        const unitId = filterModel.unitId;\n        const subUnitId = filterModel.subUnitId;\n        const filterRange = filterModel.getRange();\n        const columnHeaderRange: IRange = {\n            startColumn: col,\n            startRow: filterRange.startRow,\n            endRow: filterRange.startRow,\n            endColumn: col,\n        };\n\n        this._filterHeaderListener = this._refRangeService.watchRange(unitId, subUnitId, columnHeaderRange, (before, after) => {\n            if (!after) {\n                // If the range collapsed, the column header must be deleted.\n                this.terminate();\n            } else {\n                const offset = after.startColumn - before.startColumn;\n                if (offset !== 0) {\n                    this._filterByModel!.deltaCol(offset);\n                }\n            }\n        });\n    }\n\n    private async _setupByValues(filterModel: FilterModel, col: number): Promise<boolean> {\n        this._disposePreviousModel();\n\n        const range = filterModel.getRange();\n        if (range.startRow === range.endRow) return false;\n\n        const filterByModel = await ByValuesModel.fromFilterColumn(\n            this._injector,\n            filterModel,\n            col\n        );\n\n        this.filterByModel = filterByModel;\n        this._filterBy$.next(FilterBy.VALUES);\n\n        this._listenToFilterHeaderChange(filterModel, col);\n        return true;\n    }\n\n    private _setupByConditions(filterModel: FilterModel, col: number): boolean {\n        this._disposePreviousModel();\n\n        const range = filterModel.getRange();\n        if (range.startRow === range.endRow) return false;\n\n        const model = ByConditionsModel.fromFilterColumn(\n            this._injector,\n            filterModel,\n            col,\n            filterModel.getFilterColumn(col)\n        );\n\n        this.filterByModel = model;\n        this._filterBy$.next(FilterBy.CONDITIONS);\n\n        this._listenToFilterHeaderChange(filterModel, col);\n\n        return true;\n    }\n\n    private _disposePreviousModel(): void {\n        this._filterByModel?.dispose();\n        this.filterByModel = null;\n    }\n}\n\n// #region ByConditionsModel\n\n/**\n * This model would be used to control the \"Filter By Conditions\" panel. It should be reconstructed in the following\n * situations:\n *\n * 1. The target `FilterColumn` object is changed\n * 2. User toggles \"Filter By\"\n */\nexport class ByConditionsModel extends Disposable implements IFilterByModel {\n    /**\n     * Create a model with targeting filter column. If there is not a filter column, the model would be created with\n     * default values.\n     *\n     * @param injector\n     * @param filterModel\n     * @param col\n     * @param filterColumn\n     *\n     * @returns the model to control the panel's state\n     */\n    static fromFilterColumn(injector: Injector, filterModel: FilterModel, col: number, filterColumn?: Nullable<FilterColumn>): ByConditionsModel {\n        const [conditionItem, conditionParams] = FilterConditionItems.testMappingFilterColumn(filterColumn?.getColumnData());\n        const model = injector.createInstance(ByConditionsModel, filterModel, col, conditionItem, conditionParams);\n        return model;\n    }\n\n    canApply$: Observable<boolean> = of(true);\n\n    private readonly _conditionItem$: BehaviorSubject<IFilterConditionItem>;\n    readonly conditionItem$: Observable<IFilterConditionItem>;\n    get conditionItem(): IFilterConditionItem { return this._conditionItem$.getValue(); }\n\n    private readonly _filterConditionFormParams$: BehaviorSubject<IFilterConditionFormParams>;\n    readonly filterConditionFormParams$: Observable<IFilterConditionFormParams>;\n    get filterConditionFormParams(): IFilterConditionFormParams { return this._filterConditionFormParams$.getValue(); }\n\n    constructor(\n        private readonly _filterModel: FilterModel,\n        public col: number,\n        conditionItem: IFilterConditionItem,\n        conditionParams: IFilterConditionFormParams,\n        @ICommandService private readonly _commandService: ICommandService\n    ) {\n        super();\n\n        this._conditionItem$ = new BehaviorSubject<IFilterConditionItem>(conditionItem);\n        this.conditionItem$ = this._conditionItem$.asObservable();\n\n        this._filterConditionFormParams$ = new BehaviorSubject(conditionParams);\n        this.filterConditionFormParams$ = this._filterConditionFormParams$.asObservable();\n    }\n\n    override dispose(): void {\n        super.dispose();\n\n        this._conditionItem$.complete();\n        this._filterConditionFormParams$.complete();\n    }\n\n    deltaCol(offset: number): void {\n        this.col += offset;\n    }\n\n    clear(): Promise<boolean> {\n        if (this._disposed) return Promise.resolve(false);\n\n        return this._commandService.executeCommand(SetSheetsFilterCriteriaCommand.id, {\n            unitId: this._filterModel.unitId,\n            subUnitId: this._filterModel.subUnitId,\n            col: this.col,\n            criteria: null,\n        } as ISetSheetsFilterCriteriaCommandParams);\n    }\n\n    /**\n     * Apply the filter condition to the target filter column.\n     */\n    async apply(): Promise<boolean> {\n        if (this._disposed) return false;\n\n        const filterColumn = FilterConditionItems.mapToFilterColumn(this.conditionItem, this.filterConditionFormParams);\n        return this._commandService.executeCommand(SetSheetsFilterCriteriaCommand.id, {\n            unitId: this._filterModel.unitId,\n            subUnitId: this._filterModel.subUnitId,\n            col: this.col,\n            criteria: filterColumn,\n        } as ISetSheetsFilterCriteriaCommandParams);\n    }\n\n    /**\n     * This method would be called when user changes the primary condition. The model would load the corresponding\n     * `IFilterConditionFormParams` and load default condition form params.\n     */\n    onPrimaryConditionChange(operator: FilterOperator): void {\n        const conditionItem = FilterConditionItems.ALL_CONDITIONS.find((item) => item.operator === operator);\n        if (!conditionItem) {\n            throw new Error(`[ByConditionsModel]: condition item not found for operator: ${operator}!`);\n        }\n\n        this._conditionItem$.next(conditionItem);\n        this._filterConditionFormParams$.next(FilterConditionItems.getInitialFormParams(operator));\n    }\n\n    /**\n     * This method would be called when user changes the primary conditions, the input values or \"AND\" \"OR\" ratio.\n     * If the primary conditions or the ratio is changed, the method would load the corresponding `IFilterCondition`.\n     *\n     * When the panel call this method, it only has to pass the changed keys.\n     *\n     * @param params\n     */\n    onConditionFormChange(params: Partial<Omit<IFilterConditionFormParams, 'and'> & { and: boolean }>): void {\n        const newParams = { ...this.filterConditionFormParams, ...params };\n        if (newParams.and !== true) {\n            delete newParams.and;\n        }\n\n        if (typeof params.and !== 'undefined' || typeof params.operator1 !== 'undefined' || typeof params.operator2 !== 'undefined') {\n            const conditionItem = FilterConditionItems.testMappingParams(newParams as IFilterConditionFormParams, this.conditionItem.numOfParameters);\n            this._conditionItem$.next(conditionItem);\n        }\n\n        this._filterConditionFormParams$.next(newParams as IFilterConditionFormParams);\n    }\n}\n\n// #endregion\n\n// #region - ByValuesModel\n\n/**\n * This model would be used to control the \"Filter By Values\" panel. It should be reconstructed in the following\n * situations:\n *\n * 1. The target `FilterColumn` object is changed\n * 2. User toggles \"Filter By\"\n */\nexport class ByValuesModel extends Disposable implements IFilterByModel {\n    /**\n     * Create a model with targeting filter column. If there is not a filter column, the model would be created with\n     * default values.\n     *\n     * @param injector\n     * @param filterModel\n     * @param col\n     *\n     * @returns the model to control the panel's state\n     */\n    static async fromFilterColumn(injector: Injector, filterModel: FilterModel, col: number): Promise<ByValuesModel> {\n        const univerInstanceService = injector.get(IUniverInstanceService);\n        const localeService = injector.get(LocaleService);\n        const generateFilterValuesService = injector.get(ISheetsGenerateFilterValuesService, Quantity.OPTIONAL);\n\n        const { unitId, subUnitId } = filterModel;\n        const workbook = univerInstanceService.getUniverSheetInstance(unitId);\n        if (!workbook) throw new Error(`[ByValuesModel]: Workbook not found for filter model with unitId: ${unitId}!`);\n\n        const worksheet = workbook?.getSheetBySheetId(subUnitId);\n        if (!worksheet) throw new Error(`[ByValuesModel]: Worksheet not found for filter model with unitId: ${unitId} and subUnitId: ${subUnitId}!`);\n\n        const range = filterModel.getRange();\n        const column = col;\n        const filters = filterModel.getFilterColumn(col)?.getColumnData().filters;\n        const alreadyChecked = new Set(filters?.filters);\n        const blankChecked = !!(filters && filters.blank);\n        const filteredOutRowsByOtherColumns = filterModel.getFilteredOutRowsExceptCol(col);\n        const iterateRange: IRange = { ...range, startRow: range.startRow + 1, startColumn: column, endColumn: column };\n\n        let items: IFilterByValueWithTreeItem[];\n        let cache: Map<string, string[]> | undefined;\n        if (generateFilterValuesService) {\n            const res = await generateFilterValuesService.getFilterValues({\n                unitId,\n                subUnitId,\n                filteredOutRowsByOtherColumns: Array.from(filteredOutRowsByOtherColumns),\n                filters: !!filters,\n                blankChecked,\n                iterateRange,\n                alreadyChecked: Array.from(alreadyChecked),\n            });\n            items = res.filterTreeItems;\n            cache = res.filterTreeMapCache;\n        } else {\n            // the first row is filter header and should be added to options\n            const res = getFilterTreeByValueItems(!!filters, localeService, iterateRange, worksheet, filteredOutRowsByOtherColumns, alreadyChecked, blankChecked, workbook.getStyles());\n            items = res.filterTreeItems;\n            cache = res.filterTreeMapCache;\n        }\n\n        return injector.createInstance(ByValuesModel, filterModel, col, items, cache);\n    }\n\n    private readonly _rawFilterItems$: BehaviorSubject<IFilterByValueWithTreeItem[]>;\n    readonly rawFilterItems$: Observable<IFilterByValueWithTreeItem[]>;\n    get rawFilterItems(): IFilterByValueWithTreeItem[] { return this._rawFilterItems$.getValue(); }\n\n    readonly filterItems$: Observable<IFilterByValueWithTreeItem[]>;\n    private _filterItems: IFilterByValueWithTreeItem[] = [];\n    get filterItems() { return this._filterItems; }\n\n    private _treeMapCache: Map<string, string[]>;\n    get treeMapCache() { return this._treeMapCache; }\n\n    readonly canApply$: Observable<boolean>;\n\n    private readonly _manuallyUpdateFilterItems$: Subject<IFilterByValueWithTreeItem[]>;\n\n    private readonly _searchString$: BehaviorSubject<string>;\n    readonly searchString$: Observable<string>;\n\n    constructor(\n        private readonly _filterModel: FilterModel,\n        public col: number,\n        /**\n         * Filter items would remain unchanged after we create them,\n         * though data may change after.\n         */\n        items: IFilterByValueWithTreeItem[],\n        cache: Map<string, string[]>,\n        @ICommandService private readonly _commandService: ICommandService\n    ) {\n        super();\n\n        this._treeMapCache = cache;\n        this._searchString$ = new BehaviorSubject<string>('');\n        this.searchString$ = this._searchString$.asObservable();\n\n        this._rawFilterItems$ = new BehaviorSubject<IFilterByValueWithTreeItem[]>(items);\n        this.rawFilterItems$ = this._rawFilterItems$.asObservable();\n\n        this._manuallyUpdateFilterItems$ = new Subject<IFilterByValueWithTreeItem[]>();\n\n        this.filterItems$ = merge(\n            combineLatest([\n                this._searchString$.pipe(\n                    throttleTime(500, undefined, { leading: true, trailing: true }),\n                    startWith(void 0)\n                ),\n                this._rawFilterItems$,\n            ]).pipe(\n                map(([searchString, items]) => {\n                    if (!searchString) return items;\n\n                    const lowerSearchString = searchString.toLowerCase();\n                    const searchKeyWords = lowerSearchString.split(/\\s+/).filter((s) => !!s);\n                    return searchTree(items, searchKeyWords);\n                })\n            ),\n            this._manuallyUpdateFilterItems$\n        ).pipe(shareReplay(1));\n\n        this.canApply$ = this.filterItems$.pipe(map((items) => {\n            const stat = statisticFilterByValueItems(items);\n            return stat.checked > 0;\n        }));\n\n        this.disposeWithMe(this.filterItems$.subscribe((items) => this._filterItems = items));\n    }\n\n    override dispose(): void {\n        this._rawFilterItems$.complete();\n        this._searchString$.complete();\n    }\n\n    deltaCol(offset: number): void {\n        this.col += offset;\n    }\n\n    setSearchString(str: string): void {\n        this._searchString$.next(str);\n    }\n\n    onCheckAllToggled(checked: boolean) {\n        const items = Tools.deepClone(this._filterItems);\n        items.forEach((item) => updateLeafNodesCheckedStatus(item, checked));\n        this._manuallyUpdateFilterItems(items);\n    }\n\n    /**\n     * Toggle a filter item.\n     */\n    onFilterCheckToggled(item: IFilterByValueWithTreeItem): void {\n        const items = Tools.deepClone(this._filterItems);\n        const changedItem = findObjectByKey(items, item.key);\n        if (!changedItem) {\n            return;\n        }\n        const allLeafChecked = areAllLeafNodesChecked(changedItem);\n        updateLeafNodesCheckedStatus(changedItem, !allLeafChecked);\n        this._manuallyUpdateFilterItems(items);\n    }\n\n    onFilterOnly(itemKeys: string[]) {\n        const items = Tools.deepClone(this._filterItems);\n        items.forEach((item) => updateLeafNodesCheckedStatus(item, false));\n        itemKeys.forEach((key) => {\n            const changedItem = findObjectByKey(items, key);\n            if (changedItem) {\n                updateLeafNodesCheckedStatus(changedItem, true);\n            }\n        });\n        this._manuallyUpdateFilterItems(items);\n    }\n\n    private _manuallyUpdateFilterItems(items: IFilterByValueWithTreeItem[]): void {\n        this._manuallyUpdateFilterItems$.next(items);\n    }\n\n    // expose method here to let the panel change filter items\n\n    // #region ByValuesModel apply methods\n    clear(): Promise<boolean> {\n        if (this._disposed) return Promise.resolve(false);\n\n        return this._commandService.executeCommand(SetSheetsFilterCriteriaCommand.id, {\n            unitId: this._filterModel.unitId,\n            subUnitId: this._filterModel.subUnitId,\n            col: this.col,\n            criteria: null,\n        } as ISetSheetsFilterCriteriaCommandParams);\n    }\n\n    /**\n     * Apply the filter condition to the target filter column.\n     */\n    async apply(): Promise<boolean> {\n        if (this._disposed) {\n            return false;\n        }\n\n        const statistics = statisticFilterByValueItems(this._filterItems);\n        const { checked, checkedItems } = statistics;\n        const rawFilterItems = this.rawFilterItems;\n        let rawFilterCount = 0;\n        for (const item of rawFilterItems) {\n            rawFilterCount += item.count;\n        }\n\n        const noChecked = checked === 0;\n        const allChecked = statistics.checked === rawFilterCount;\n\n        const criteria: IFilterColumn = { colId: this.col };\n        if (noChecked) {\n            throw new Error('[ByValuesModel]: no checked items!');\n        } else if (allChecked) {\n            return this._commandService.executeCommand(SetSheetsFilterCriteriaCommand.id, {\n                unitId: this._filterModel.unitId,\n                subUnitId: this._filterModel.subUnitId,\n                col: this.col,\n                criteria: null,\n            } as ISetSheetsFilterCriteriaCommandParams);\n        } else {\n            criteria.filters = {};\n\n            const nonEmptyItems = checkedItems.filter((item) => item.key !== 'empty');\n            if (nonEmptyItems.length > 0) {\n                criteria.filters = {\n                    filters: nonEmptyItems.flatMap((item) => item.originValues ? Array.from(item.originValues) : [item.title]),\n                };\n            }\n\n            const hasEmpty = nonEmptyItems.length !== checkedItems.length;\n            if (hasEmpty) {\n                criteria.filters.blank = true;\n            }\n        }\n\n        return this._commandService.executeCommand(SetSheetsFilterCriteriaCommand.id, {\n            unitId: this._filterModel.unitId,\n            subUnitId: this._filterModel.subUnitId,\n            col: this.col,\n            criteria,\n        } as ISetSheetsFilterCriteriaCommandParams);\n    }\n\n    // #endregion\n}\n\n// #endregion\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IOperation } from '@univerjs/core';\nimport { CommandType, ICommandService, IContextService, Quantity } from '@univerjs/core';\nimport { SheetsFilterService } from '@univerjs/sheets-filter';\nimport { ILayoutService } from '@univerjs/ui';\nimport { SetCellEditVisibleOperation } from '@univerjs/sheets-ui';\nimport type { FilterBy } from '../../services/sheets-filter-panel.service';\nimport { SheetsFilterPanelService } from '../../services/sheets-filter-panel.service';\n\nexport const FILTER_PANEL_OPENED_KEY = 'FILTER_PANEL_OPENED';\n\nexport interface IOpenFilterPanelOperationParams {\n    unitId: string;\n    subUnitId: string;\n\n    col: number;\n}\n\n/**\n * The operation to open the filter panel and prepare for changing the filter conditions on a given column.\n */\nexport const OpenFilterPanelOperation: IOperation<IOpenFilterPanelOperationParams> = {\n    id: 'sheet.operation.open-filter-panel',\n    type: CommandType.OPERATION,\n    handler: (accessor, params: IOpenFilterPanelOperationParams) => {\n        const contextService = accessor.get(IContextService);\n        const sheetsFilterService = accessor.get(SheetsFilterService);\n        const sheetsFilterPanelService = accessor.get(SheetsFilterPanelService);\n        const commandService = accessor.get(ICommandService);\n\n        // Close the cell edit if it is opened.\n        commandService.syncExecuteCommand(SetCellEditVisibleOperation.id, { visible: false });\n\n        const { unitId, subUnitId, col } = params;\n        const filterModel = sheetsFilterService.getFilterModel(unitId, subUnitId);\n        if (!filterModel) return false;\n\n        sheetsFilterPanelService.setupCol(filterModel, col);\n        if (!contextService.getContextValue(FILTER_PANEL_OPENED_KEY)) {\n            contextService.setContextValue(FILTER_PANEL_OPENED_KEY, true);\n        }\n\n        // Set the filter condition to the filter ui service on the specific column.\n        return true;\n    },\n};\n\nexport const CloseFilterPanelOperation: IOperation = {\n    id: 'sheet.operation.close-filter-panel',\n    type: CommandType.OPERATION,\n    handler: (accessor) => {\n        const contextService = accessor.get(IContextService);\n        const sheetsFilterPanelService = accessor.get(SheetsFilterPanelService);\n        const layoutService = accessor.get(ILayoutService, Quantity.OPTIONAL);\n\n        if (contextService.getContextValue(FILTER_PANEL_OPENED_KEY)) {\n            contextService.setContextValue(FILTER_PANEL_OPENED_KEY, false);\n            layoutService?.focus();\n\n            return sheetsFilterPanelService.terminate();\n        }\n\n        return false;\n    },\n};\n\nexport interface IChangeFilterByOperationParams {\n    filterBy: FilterBy;\n}\nexport const ChangeFilterByOperation: IOperation<IChangeFilterByOperationParams> = {\n    id: 'sheet.operation.apply-filter',\n    type: CommandType.OPERATION,\n    handler: (accessor, params) => {\n        const { filterBy } = params!;\n        const sheetsFilterPanelService = accessor.get(SheetsFilterPanelService);\n        return sheetsFilterPanelService.changeFilterBy(filterBy);\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommandInfo } from '@univerjs/core';\nimport type { MenuConfig } from '@univerjs/ui';\n\nimport { Disposable, ICommandService, Inject, Injector, IUniverInstanceService, LocaleService, Tools } from '@univerjs/core';\n\nimport { expandToContinuousRange, getSheetCommandTarget, RangeProtectionPermissionViewPoint, SheetPermissionCheckController, SheetsSelectionsService, WorksheetFilterPermission, WorksheetViewPermission } from '@univerjs/sheets';\nimport { SheetsFilterService, SmartToggleSheetsFilterCommand } from '@univerjs/sheets-filter';\nimport { type IOpenFilterPanelOperationParams, OpenFilterPanelOperation } from '../commands/operations/sheets-filter.operation';\n\nexport interface IUniverSheetsFilterUIConfig {\n    menu: MenuConfig;\n}\n\nexport const DefaultSheetFilterUiConfig = {};\n\nexport const FILTER_PANEL_POPUP_KEY = 'FILTER_PANEL_POPUP';\n\n/**\n * This controller controls the UI of \"filter\" features. Menus, commands and filter panel etc. Except for the rendering.\n */\nexport class SheetsFilterPermissionController extends Disposable {\n    constructor(\n        @Inject(SheetsFilterService) private _sheetsFilterService: SheetsFilterService,\n        @Inject(LocaleService) private _localeService: LocaleService,\n        @ICommandService private readonly _commandService: ICommandService,\n        @Inject(SheetPermissionCheckController)\n        private readonly _sheetPermissionCheckPermission: SheetPermissionCheckController,\n        @Inject(Injector) private _injector: Injector,\n        @Inject(SheetsSelectionsService) private _sheetsSelectionService: SheetsSelectionsService\n    ) {\n        super();\n\n        this._commandExecutedListener();\n    }\n\n    private _commandExecutedListener() {\n        this.disposeWithMe(\n            this._commandService.beforeCommandExecuted((command: ICommandInfo) => {\n                if (command.id === SmartToggleSheetsFilterCommand.id) {\n                    const univerInstanceService = this._injector.get(IUniverInstanceService);\n                    const target = getSheetCommandTarget(univerInstanceService);\n                    if (!target) return;\n                    const { unitId, subUnitId, worksheet } = target;\n                    const filterRange = this._sheetsFilterService.getFilterModel(unitId, subUnitId)?.getRange();\n                    let permission;\n                    if (filterRange) {\n                        permission = this._sheetPermissionCheckPermission.permissionCheckWithRanges({\n                            rangeTypes: [RangeProtectionPermissionViewPoint],\n                            worksheetTypes: [WorksheetFilterPermission, WorksheetViewPermission],\n                        }, [filterRange]);\n                    } else {\n                        const range = this._sheetsSelectionService.getCurrentLastSelection()?.range;\n                        if (range) {\n                            let newRange = { ...range };\n                            const isCellRange = range.startColumn === range.endColumn && range.startRow === range.endRow;\n                            newRange = isCellRange ? expandToContinuousRange(newRange, { left: true, right: true, up: true, down: true }, worksheet) : newRange;\n                            permission = this._sheetPermissionCheckPermission.permissionCheckWithRanges({\n                                rangeTypes: [RangeProtectionPermissionViewPoint],\n                                worksheetTypes: [WorksheetViewPermission, WorksheetFilterPermission],\n                            }, [newRange], unitId, subUnitId);\n                        } else {\n                            permission = this._sheetPermissionCheckPermission.permissionCheckWithoutRange({\n                                rangeTypes: [RangeProtectionPermissionViewPoint],\n                                worksheetTypes: [WorksheetViewPermission, WorksheetFilterPermission],\n                            });\n                        }\n                    }\n\n                    if (!permission) {\n                        this._sheetPermissionCheckPermission.blockExecuteWithoutPermission(this._localeService.t('permission.dialog.filterErr'));\n                    }\n                }\n                if (command.id === OpenFilterPanelOperation.id) {\n                    const params = command.params as IOpenFilterPanelOperationParams;\n                    const { unitId, subUnitId } = params;\n                    const filterRange = this._sheetsFilterService.getFilterModel(unitId, subUnitId)?.getRange();\n                    const colRange = Tools.deepClone(filterRange);\n                    if (colRange) {\n                        colRange.startColumn = params.col;\n                        colRange.endColumn = params.col;\n                        const permission = this._sheetPermissionCheckPermission.permissionCheckWithRanges({\n                            rangeTypes: [RangeProtectionPermissionViewPoint],\n                            worksheetTypes: [WorksheetFilterPermission, WorksheetViewPermission],\n                        }, [colRange]);\n                        if (!permission) {\n                            this._sheetPermissionCheckPermission.blockExecuteWithoutPermission(this._localeService.t('permission.dialog.filterErr'));\n                        }\n                    }\n                }\n            })\n        );\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ByConditionsModel, ByValuesModel } from '../../services/sheets-filter-panel.service';\nimport { ICommandService, LocaleService } from '@univerjs/core';\nimport { Button, Segmented } from '@univerjs/design';\nimport { SheetsFilterService } from '@univerjs/sheets-filter';\nimport { SheetsUIPart } from '@univerjs/sheets-ui';\n\nimport { ComponentContainer, useComponentsOfPart, useDependency, useObservable } from '@univerjs/ui';\nimport React, { useCallback, useMemo } from 'react';\nimport { of } from 'rxjs';\nimport { ChangeFilterByOperation, CloseFilterPanelOperation } from '../../commands/operations/sheets-filter.operation';\nimport { FilterBy, SheetsFilterPanelService } from '../../services/sheets-filter-panel.service';\nimport styles from './index.module.less';\nimport { FilterByCondition } from './SheetsFilterByConditionsPanel';\nimport { FilterByValue } from './SheetsFilterByValuesPanel';\n\n/**\n * This Filter Panel component is used to filter the data in the sheet.\n *\n * @returns React element\n */\nexport function FilterPanel() {\n    const sheetsFilterPanelService = useDependency(SheetsFilterPanelService);\n    const localeService = useDependency(LocaleService);\n    const commandService = useDependency(ICommandService);\n\n    const filterBy = useObservable(sheetsFilterPanelService.filterBy$, undefined, true);\n    const filterByModel = useObservable(sheetsFilterPanelService.filterByModel$, undefined, false);\n    const canApply = useObservable(() => filterByModel?.canApply$ || of(false), undefined, false, [filterByModel]);\n    const items = useFilterByOptions(localeService);\n\n    // only can disable clear when there is no criteria\n    const clearFilterDisabled = !useObservable(sheetsFilterPanelService.hasCriteria$);\n\n    const onFilterByTypeChange = useCallback((value: FilterBy) => {\n        commandService.executeCommand(ChangeFilterByOperation.id, { filterBy: value });\n    }, [commandService]);\n\n    const onClearCriteria = useCallback(async () => {\n        await filterByModel?.clear();\n        commandService.executeCommand(CloseFilterPanelOperation.id);\n    }, [filterByModel, commandService]);\n\n    const onCancel = useCallback(() => {\n        commandService.executeCommand(CloseFilterPanelOperation.id);\n    }, [commandService]);\n\n    const onApply = useCallback(async () => {\n        await filterByModel?.apply();\n        commandService.executeCommand(CloseFilterPanelOperation.id);\n    }, [filterByModel, commandService]);\n\n    const filterService = useDependency(SheetsFilterService);\n    const range = filterService.activeFilterModel?.getRange();\n    const colIndex = sheetsFilterPanelService.col;\n    const FilterPanelEmbedPointPart = useComponentsOfPart(SheetsUIPart.FILTER_PANEL_EMBED_POINT);\n\n    return (\n        <div className={styles.sheetsFilterPanel}>\n            <ComponentContainer\n                components={FilterPanelEmbedPointPart}\n                sharedProps={{ range, colIndex, onClose: onCancel }}\n            />\n            <div className={styles.sheetsFilterPanelHeader}>\n                <Segmented\n                    value={filterBy}\n                    items={items}\n                    onChange={(value) => onFilterByTypeChange(value as FilterBy)}\n                />\n            </div>\n            {filterByModel\n                ? (\n                    <div className={styles.sheetsFilterPanelContent}>\n                        {filterBy === FilterBy.VALUES\n                            ? <FilterByValue model={filterByModel as ByValuesModel} />\n                            : <FilterByCondition model={filterByModel as ByConditionsModel} />}\n                    </div>\n                )\n                : (\n                    <div style={{ flex: 1 }} />\n                )}\n            <div className={styles.sheetsFilterPanelFooter}>\n                <Button type=\"link\" onClick={onClearCriteria} disabled={clearFilterDisabled}>{localeService.t('sheets-filter.panel.clear-filter')}</Button>\n                <span className={styles.sheetsFilterPanelFooterPrimaryButtons}>\n                    <Button type=\"default\" onClick={onCancel}>{localeService.t('sheets-filter.panel.cancel')}</Button>\n                    <Button disabled={!canApply} type=\"primary\" onClick={onApply}>{localeService.t('sheets-filter.panel.confirm')}</Button>\n                </span>\n            </div>\n        </div>\n    );\n}\n\nfunction useFilterByOptions(localeService: LocaleService) {\n    const locale = localeService.getCurrentLocale();\n    return useMemo(() => [\n        { label: localeService.t('sheets-filter.panel.by-values'), value: FilterBy.VALUES },\n        { label: localeService.t('sheets-filter.panel.by-conditions'), value: FilterBy.CONDITIONS },\n    ], [locale, localeService]);\n}\n", "export default {\n  \"sheetsFilterPanel\": \"univer-sheets-filter-panel\",\n  \"sheetsFilterPanelHeader\": \"univer-sheets-filter-panel-header\",\n  \"sheetsFilterPanelContent\": \"univer-sheets-filter-panel-content\",\n  \"sheetsFilterPanelSelectAll\": \"univer-sheets-filter-panel-select-all\",\n  \"sheetsFilterPanelSelectAllCount\": \"univer-sheets-filter-panel-select-all-count\",\n  \"sheetsFilterPanelValuesContainer\": \"univer-sheets-filter-panel-values-container\",\n  \"inputAffixWrapper\": \"univer-input-affix-wrapper\",\n  \"select\": \"univer-select\",\n  \"radioGroup\": \"univer-radio-group\",\n  \"sheetsFilterPanelValuesFind\": \"univer-sheets-filter-panel-values-find\",\n  \"sheetsFilterPanelValuesList\": \"univer-sheets-filter-panel-values-list\",\n  \"sheetsFilterPanelValuesListInnerContainer\": \"univer-sheets-filter-panel-values-list-inner-container\",\n  \"sheetsFilterPanelValuesVirtual\": \"univer-sheets-filter-panel-values-virtual\",\n  \"sheetsFilterPanelValuesItem\": \"univer-sheets-filter-panel-values-item\",\n  \"sheetsFilterPanelValuesItemInner\": \"univer-sheets-filter-panel-values-item-inner\",\n  \"sheetsFilterPanelValuesItemCount\": \"univer-sheets-filter-panel-values-item-count\",\n  \"sheetsFilterPanelValuesItemExcludeButton\": \"univer-sheets-filter-panel-values-item-exclude-button\",\n  \"sheetsFilterPanelValuesItemText\": \"univer-sheets-filter-panel-values-item-text\",\n  \"sheetsFilterPanelConditionsContainer\": \"univer-sheets-filter-panel-conditions-container\",\n  \"sheetsFilterPanelConditionsContainerInner\": \"univer-sheets-filter-panel-conditions-container-inner\",\n  \"sheetsFilterPanelConditionsDesc\": \"univer-sheets-filter-panel-conditions-desc\",\n  \"sheetsFilterPanelFooter\": \"univer-sheets-filter-panel-footer\",\n  \"sheetsFilterPanelFooterPrimaryButtons\": \"univer-sheets-filter-panel-footer-primary-buttons\",\n  \"button\": \"univer-button\",\n  \"input\": \"univer-input\",\n  \"formDualColumnLayout\": \"univer-form-dual-column-layout\",\n  \"sheetsFilterTreeNode\": \"univer-sheets-filter-tree-node\",\n  \"sheetsFilterTreeNodeFilterOnly\": \"univer-sheets-filter-tree-node-filter-only\",\n  \"sheetsFilterTreeNodeAttach\": \"univer-sheets-filter-tree-node-attach\"\n};import \"ni:sha-256;YSFkoxgI43fXcNWOrV6VK3doNlZ4zdhqn4e1r8h8pec\";", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ISelectProps } from '@univerjs/design';\nimport type { FilterOperator, IFilterConditionFormParams } from '../../models/conditions';\nimport type { ByConditionsModel } from '../../services/sheets-filter-panel.service';\nimport { LocaleService } from '@univerjs/core';\nimport { Input, Radio, RadioGroup, Select } from '@univerjs/design';\nimport { useDependency, useObservable } from '@univerjs/ui';\n\nimport React, { useCallback, useMemo } from 'react';\nimport { FilterConditionItems } from '../../models/conditions';\n\nimport styles from './index.module.less';\n\n/**\n * Filter by conditions.\n */\nexport function FilterByCondition(props: { model: ByConditionsModel }) {\n    const { model } = props;\n\n    const localeService = useDependency(LocaleService);\n\n    // form state is from the model\n    const condition = useObservable(model.conditionItem$, undefined);\n    const formParams = useObservable(model.filterConditionFormParams$, undefined);\n\n    const radioValue = formParams?.and ? 'AND' : 'OR';\n    const onRadioChange = useCallback((key: string | number | boolean) => {\n        model.onConditionFormChange({ and: key === 'AND' });\n    }, [model]);\n\n    const primaryOptions = usePrimaryOptions(localeService);\n    const onPrimaryConditionChange = useCallback((value: string) => {\n        model.onPrimaryConditionChange(value as FilterOperator);\n    }, [model]);\n\n    const secondaryOptions = useSecondaryOptions(localeService);\n    const onFormParamsChange = useCallback((diffParams: Partial<IFilterConditionFormParams>) => {\n        model.onConditionFormChange(diffParams);\n    }, [model]);\n\n    const placeholder = localeService.t('sheets-filter.panel.input-values-placeholder');\n    function renderSecondaryCondition(operator: FilterOperator, val: string, name: 'operator1' | 'operator2') {\n        const shouldRenderInput = FilterConditionItems.getItemByOperator(operator).numOfParameters === 1;\n        return (\n            <>\n                {name === 'operator2' && (\n                    <RadioGroup value={radioValue} onChange={onRadioChange}>\n                        <Radio value=\"AND\">{localeService.t('sheets-filter.panel.and')}</Radio>\n                        <Radio value=\"OR\">{localeService.t('sheets-filter.panel.or')}</Radio>\n                    </RadioGroup>\n                )}\n                <Select value={operator} options={secondaryOptions} onChange={(operator) => onFormParamsChange({ [name]: operator as FilterOperator })} />\n                {shouldRenderInput && (\n                    <div>\n                        <Input value={val} placeholder={placeholder} onChange={(value) => onFormParamsChange({ [name === 'operator1' ? 'val1' : 'val2']: value })} />\n                    </div>\n                )}\n            </>\n        );\n    }\n\n    return (\n        <div className={styles.sheetsFilterPanelConditionsContainer}>\n            {/* primary condition */}\n            {(condition && formParams) && (\n                <>\n                    <Select value={condition.operator} options={primaryOptions} onChange={onPrimaryConditionChange} />\n                    {FilterConditionItems.getItemByOperator(condition.operator).numOfParameters !== 0\n                        ? (\n                            <div className={styles.sheetsFilterPanelConditionsContainerInner}>\n                                {condition.numOfParameters >= 1 && renderSecondaryCondition(formParams.operator1!, formParams.val1 ?? '', 'operator1')}\n                                {condition.numOfParameters >= 2 && renderSecondaryCondition(formParams.operator2!, formParams.val2 ?? '', 'operator2')}\n                                <div className={styles.sheetsFilterPanelConditionsDesc}>\n                                    {localeService.t('sheets-filter.panel.?')}\n                                    <br />\n                                    {localeService.t('sheets-filter.panel.*')}\n                                </div>\n                            </div>\n                        )\n                        : null}\n                </>\n            )}\n        </div>\n    );\n}\n\nfunction usePrimaryOptions(localeService: LocaleService): ISelectProps['options'] {\n    const locale = localeService.getCurrentLocale();\n\n    return useMemo(() => [\n        {\n            options: [\n                { label: localeService.t(FilterConditionItems.NONE.label), value: FilterConditionItems.NONE.operator },\n            ],\n        },\n        {\n            options: [\n                { label: localeService.t(FilterConditionItems.EMPTY.label), value: FilterConditionItems.EMPTY.operator },\n                { label: localeService.t(FilterConditionItems.NOT_EMPTY.label), value: FilterConditionItems.NOT_EMPTY.operator },\n            ],\n        },\n        {\n            options: [\n                { label: localeService.t(FilterConditionItems.TEXT_CONTAINS.label), value: FilterConditionItems.TEXT_CONTAINS.operator },\n                { label: localeService.t(FilterConditionItems.DOES_NOT_CONTAIN.label), value: FilterConditionItems.DOES_NOT_CONTAIN.operator },\n                { label: localeService.t(FilterConditionItems.STARTS_WITH.label), value: FilterConditionItems.STARTS_WITH.operator },\n                { label: localeService.t(FilterConditionItems.ENDS_WITH.label), value: FilterConditionItems.ENDS_WITH.operator },\n                { label: localeService.t(FilterConditionItems.EQUALS.label), value: FilterConditionItems.EQUALS.operator },\n            ],\n        },\n        {\n            options: [\n                { label: localeService.t(FilterConditionItems.GREATER_THAN.label), value: FilterConditionItems.GREATER_THAN.operator },\n                { label: localeService.t(FilterConditionItems.GREATER_THAN_OR_EQUAL.label), value: FilterConditionItems.GREATER_THAN_OR_EQUAL.operator },\n                { label: localeService.t(FilterConditionItems.LESS_THAN.label), value: FilterConditionItems.LESS_THAN.operator },\n                { label: localeService.t(FilterConditionItems.LESS_THAN_OR_EQUAL.label), value: FilterConditionItems.LESS_THAN_OR_EQUAL.operator },\n                { label: localeService.t(FilterConditionItems.EQUAL.label), value: FilterConditionItems.EQUAL.operator },\n                { label: localeService.t(FilterConditionItems.NOT_EQUAL.label), value: FilterConditionItems.NOT_EQUAL.operator },\n                { label: localeService.t(FilterConditionItems.BETWEEN.label), value: FilterConditionItems.BETWEEN.operator },\n                { label: localeService.t(FilterConditionItems.NOT_BETWEEN.label), value: FilterConditionItems.NOT_BETWEEN.operator },\n            ],\n        },\n        {\n            options: [\n                { label: localeService.t(FilterConditionItems.CUSTOM.label), value: FilterConditionItems.CUSTOM.operator },\n            ],\n        },\n    ] as ISelectProps['options'],\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    [locale, localeService]);\n}\n\nfunction useSecondaryOptions(localeService: LocaleService): ISelectProps['options'] {\n    const locale = localeService.getCurrentLocale();\n\n    return useMemo(() => FilterConditionItems.ALL_CONDITIONS\n        .filter((c) => c.numOfParameters !== 2)\n        .map((c) => ({ label: localeService.t(c.label), value: c.operator })) as ISelectProps['options'],\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    [locale, localeService]);\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ByValuesModel, IFilterByValueWithTreeItem } from '../../services/sheets-filter-panel.service';\nimport { LocaleService } from '@univerjs/core';\nimport { Button, Checkbox, Input, Tree } from '@univerjs/design';\nimport { useDependency, useObservable } from '@univerjs/ui';\nimport React, { useCallback } from 'react';\nimport { statisticFilterByValueItems } from '../../models/utils';\nimport styles from './index.module.less';\n\n/**\n * Filter by values.\n */\nexport function FilterByValue(props: { model: ByValuesModel }) {\n    const { model } = props;\n\n    const localeService = useDependency(LocaleService);\n\n    const searchText = useObservable(model.searchString$, '', true);\n    const items = useObservable(model.filterItems$, undefined, true);\n    const filterOnly = localeService.t('sheets-filter.panel.filter-only');\n\n    const stat = statisticFilterByValueItems(items);\n    const allChecked = stat.checked > 0 && stat.unchecked === 0;\n    const indeterminate = stat.checked > 0 && stat.unchecked > 0;\n\n    const treeMap = model.treeMapCache;\n\n    const onCheckAllToggled = useCallback(() => {\n        model.onCheckAllToggled(!allChecked);\n    }, [model, allChecked]);\n\n    const onSearchValueChange = useCallback((str: string) => {\n        model.setSearchString(str);\n    }, [model]);\n\n    function extractCheckedKeys(items: IFilterByValueWithTreeItem[]): string[] {\n        let checkedKeys: string[] = [];\n        items.forEach((item) => {\n            if (item.checked) {\n                checkedKeys.push(item.key);\n            }\n            if (item.children) {\n                checkedKeys = checkedKeys.concat(extractCheckedKeys(item.children));\n            }\n        });\n        return checkedKeys;\n    }\n\n    return (\n        <div className={styles.sheetsFilterPanelValuesContainer}>\n            <Input autoFocus value={searchText} placeholder={localeService.t('sheets-filter.panel.search-placeholder')} onChange={onSearchValueChange} />\n            <div className={styles.sheetsFilterPanelValuesList}>\n                {/* The on-top select all button */}\n                <div className={styles.sheetsFilterPanelValuesItem}>\n                    <div className={styles.sheetsFilterPanelValuesItemInner}>\n                        <Checkbox\n                            indeterminate={indeterminate}\n                            disabled={items.length === 0}\n                            checked={allChecked}\n                            onChange={onCheckAllToggled}\n                        />\n                        <span className={styles.sheetsFilterPanelValuesItemText}>{`${localeService.t('sheets-filter.panel.select-all')}`}</span>\n                        <span className={styles.sheetsFilterPanelValuesItemCount}>{`(${stat.checked}/${stat.checked + stat.unchecked})`}</span>\n                    </div>\n                </div>\n                <div className={styles.sheetsFilterPanelValuesVirtual}>\n                    <Tree\n                        data={items}\n                        defaultExpandAll={false}\n                        valueGroup={extractCheckedKeys(items)}\n                        height={180}\n                        onChange={(node) => {\n                            model.onFilterCheckToggled(node as IFilterByValueWithTreeItem);\n                        }}\n                        defaultCache={treeMap}\n                        itemHeight={28}\n                        treeNodeClassName={styles.sheetsFilterTreeNode}\n                        attachRender={(item) => (\n                            <div className={styles.sheetsFilterTreeNodeAttach}>\n                                <span className={styles.sheetsFilterPanelValuesItemCount}>{`(${item.count})`}</span>\n                                <Button\n                                    className={styles.sheetsFilterTreeNodeFilterOnly}\n\n                                    size=\"small\"\n                                    type=\"link\"\n                                    onClick={() => {\n                                        const filterValues = [];\n                                        if (item.children) {\n                                            item.children.forEach((child) => {\n                                                if (child.children) {\n                                                    child.children.forEach((subChild) => {\n                                                        filterValues.push(subChild.key);\n                                                    });\n                                                } else {\n                                                    filterValues.push(child.key);\n                                                }\n                                            });\n                                        } else {\n                                            filterValues.push(item.key);\n                                        }\n                                        model.onFilterOnly(filterValues);\n                                    }}\n                                >\n                                    {filterOnly}\n                                </Button>\n                            </div>\n                        )}\n                    />\n                </div>\n            </div>\n        </div>\n\n    );\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor } from '@univerjs/core';\nimport type { IMenuButtonItem, IMenuSelectorItem } from '@univerjs/ui';\nimport { UniverInstanceType } from '@univerjs/core';\nimport { RangeProtectionPermissionViewPoint, WorksheetFilterPermission, WorksheetViewPermission } from '@univerjs/sheets';\nimport { ClearSheetsFilterCriteriaCommand, ReCalcSheetsFilterCommand, SheetsFilterService, SmartToggleSheetsFilterCommand } from '@univerjs/sheets-filter';\n\nimport { getCurrentRangeDisable$, getObservableWithExclusiveRange$ } from '@univerjs/sheets-ui';\nimport { getMenuHiddenObservable, MenuItemType } from '@univerjs/ui';\nimport { map, of, switchMap } from 'rxjs';\n\nexport function SmartToggleFilterMenuItemFactory(accessor: IAccessor): IMenuSelectorItem {\n    const sheetsFilterService = accessor.get(SheetsFilterService);\n\n    return {\n        id: SmartToggleSheetsFilterCommand.id,\n        type: MenuItemType.BUTTON_SELECTOR,\n        icon: 'FilterSingle',\n        tooltip: 'sheets-filter.toolbar.smart-toggle-filter-tooltip',\n        hidden$: getMenuHiddenObservable(accessor, UniverInstanceType.UNIVER_SHEET),\n        activated$: sheetsFilterService.activeFilterModel$.pipe(map((model) => !!model)),\n        disabled$: getObservableWithExclusiveRange$(accessor, getCurrentRangeDisable$(accessor, { worksheetTypes: [WorksheetFilterPermission, WorksheetViewPermission], rangeTypes: [RangeProtectionPermissionViewPoint] })),\n    };\n}\n\nexport function ClearFilterCriteriaMenuItemFactory(accessor: IAccessor): IMenuButtonItem {\n    const sheetsFilterService = accessor.get(SheetsFilterService);\n\n    return {\n        id: ClearSheetsFilterCriteriaCommand.id,\n        type: MenuItemType.BUTTON,\n        title: 'sheets-filter.toolbar.clear-filter-criteria',\n        hidden$: getMenuHiddenObservable(accessor, UniverInstanceType.UNIVER_SHEET),\n        disabled$: sheetsFilterService.activeFilterModel$.pipe(switchMap((model) => model?.hasCriteria$.pipe(map((m) => !m)) ?? of(true))),\n    };\n}\n\nexport function ReCalcFilterMenuItemFactory(accessor: IAccessor): IMenuButtonItem {\n    const sheetsFilterService = accessor.get(SheetsFilterService);\n\n    return {\n        id: ReCalcSheetsFilterCommand.id,\n        type: MenuItemType.BUTTON,\n        title: 'sheets-filter.toolbar.re-calc-filter-conditions',\n        hidden$: getMenuHiddenObservable(accessor, UniverInstanceType.UNIVER_SHEET),\n        disabled$: sheetsFilterService.activeFilterModel$.pipe(switchMap((model) => model?.hasCriteria$.pipe(map((m) => !m)) ?? of(true))),\n    };\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { MenuSchemaType } from '@univerjs/ui';\nimport {\n    ClearSheetsFilterCriteriaCommand,\n    ReCalcSheetsFilterCommand,\n    SmartToggleSheetsFilterCommand,\n} from '@univerjs/sheets-filter';\nimport { RibbonStartGroup } from '@univerjs/ui';\nimport {\n    ClearFilterCriteriaMenuItemFactory,\n    ReCalcFilterMenuItemFactory,\n    SmartToggleFilterMenuItemFactory,\n} from './sheets-filter.menu';\n\nexport const menuSchema: MenuSchemaType = {\n    [RibbonStartGroup.FORMULAS_INSERT]: {\n        [SmartToggleSheetsFilterCommand.id]: {\n            order: 10,\n            menuItemFactory: SmartToggleFilterMenuItemFactory,\n            [ClearSheetsFilterCriteriaCommand.id]: {\n                order: 0,\n                menuItemFactory: ClearFilterCriteriaMenuItemFactory,\n            },\n            [ReCalcSheetsFilterCommand.id]: {\n                order: 1,\n                menuItemFactory: ReCalcFilterMenuItemFactory,\n            },\n        },\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { UniverRenderingContext2D } from '@univerjs/engine-render';\nimport { Rect } from '@univerjs/engine-render';\n\nconst BUTTON_VIEWPORT = 16;\n\n// This path is deprecated. We need to get rounded edge of the stroked line.\n// export const FILTER_BUTTON_HAS_CRITERIA = new Path2D('M3 4H13 M4.5 8H11.5 M6 12H10');\nexport const FILTER_BUTTON_EMPTY = new Path2D('M3.30363 3C2.79117 3 2.51457 3.60097 2.84788 3.99024L6.8 8.60593V12.5662C6.8 12.7184 6.8864 12.8575 7.02289 12.9249L8.76717 13.7863C8.96655 13.8847 9.2 13.7396 9.2 13.5173V8.60593L13.1521 3.99024C13.4854 3.60097 13.2088 3 12.6964 3H3.30363Z');\n\nexport class FilterButton {\n    static drawNoCriteria(ctx: UniverRenderingContext2D, size: number, fgColor: string, bgColor: string): void {\n        ctx.save();\n\n        Rect.drawWith(ctx, {\n            radius: 2,\n            width: BUTTON_VIEWPORT,\n            height: BUTTON_VIEWPORT,\n            fill: bgColor,\n        });\n\n        ctx.lineCap = 'square';\n        ctx.strokeStyle = fgColor;\n        ctx.scale(size / BUTTON_VIEWPORT, size / BUTTON_VIEWPORT);\n        ctx.beginPath();\n        ctx.lineWidth = 1;\n        ctx.lineCap = 'round';\n        ctx.moveTo(3, 4);\n        ctx.lineTo(13, 4);\n        ctx.moveTo(4.5, 8);\n        ctx.lineTo(11.5, 8);\n        ctx.moveTo(6, 12);\n        ctx.lineTo(10, 12);\n        ctx.stroke();\n        ctx.restore();\n    }\n\n    static drawHasCriteria(ctx: UniverRenderingContext2D, size: number, fgColor: string, bgColor: string): void {\n        ctx.save();\n\n        Rect.drawWith(ctx, {\n            radius: 2,\n            width: BUTTON_VIEWPORT,\n            height: BUTTON_VIEWPORT,\n            fill: bgColor,\n        });\n\n        ctx.scale(size / BUTTON_VIEWPORT, size / BUTTON_VIEWPORT);\n        ctx.fillStyle = fgColor;\n        ctx.fill(FILTER_BUTTON_EMPTY);\n        ctx.restore();\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ICommandService, IContextService, Inject, ThemeService } from '@univerjs/core';\nimport { type IMouseEvent, type IPointerEvent, type IShapeProps, Shape, type UniverRenderingContext2D } from '@univerjs/engine-render';\n\nimport { FILTER_PANEL_OPENED_KEY, type IOpenFilterPanelOperationParams, OpenFilterPanelOperation } from '../../commands/operations/sheets-filter.operation';\nimport { FilterButton } from './drawings';\n\nexport const FILTER_ICON_SIZE = 16;\nexport const FILTER_ICON_PADDING = 1;\n\nexport interface ISheetsFilterButtonShapeProps extends IShapeProps {\n    cellWidth: number;\n    cellHeight: number;\n    filterParams: { col: number; unitId: string; subUnitId: string; hasCriteria: boolean };\n}\n\n/**\n * The widget to render a filter button on canvas.\n */\nexport class SheetsFilterButtonShape extends Shape<ISheetsFilterButtonShapeProps> {\n    private _cellWidth: number = 0;\n    private _cellHeight: number = 0;\n\n    private _filterParams?: { col: number; unitId: string; subUnitId: string; hasCriteria: boolean };\n\n    private _hovered = false;\n\n    constructor(\n        key: string,\n        props: ISheetsFilterButtonShapeProps,\n        @IContextService private readonly _contextService: IContextService,\n        @ICommandService private readonly _commandService: ICommandService,\n        @Inject(ThemeService) private readonly _themeService: ThemeService\n    ) {\n        super(key, props);\n\n        this.setShapeProps(props);\n\n        // Here we need to make sure that the event is on the rectangle range.\n        this.onPointerDown$.subscribeEvent((evt) => this.onPointerDown(evt));\n        this.onPointerEnter$.subscribeEvent(() => this.onPointerEnter());\n        this.onPointerLeave$.subscribeEvent(() => this.onPointerLeave());\n    }\n\n    setShapeProps(props: Partial<ISheetsFilterButtonShapeProps>): void {\n        if (typeof props.cellHeight !== 'undefined') {\n            this._cellHeight = props.cellHeight;\n        }\n\n        if (typeof props.cellWidth !== 'undefined') {\n            this._cellWidth = props.cellWidth;\n        }\n\n        if (typeof props.filterParams !== 'undefined') {\n            this._filterParams = props.filterParams;\n        }\n\n        this.transformByState({\n            width: props.width!,\n            height: props.height!,\n        });\n    }\n\n    protected override _draw(ctx: UniverRenderingContext2D): void {\n        const cellHeight = this._cellHeight;\n        const cellWidth = this._cellWidth;\n\n        const left = FILTER_ICON_SIZE - cellWidth;\n        const top = FILTER_ICON_SIZE - cellHeight;\n\n        ctx.save();\n\n        const cellRegion = new Path2D();\n        cellRegion.rect(left, top, cellWidth, cellHeight);\n        ctx.clip(cellRegion);\n\n        const { hasCriteria } = this._filterParams!;\n        const fgColor = this._themeService.getCurrentTheme().primaryColor;\n        const bgColor = this._hovered\n            ? this._themeService.getCurrentTheme().grey50\n            : 'rgba(255, 255, 255, 1.0)';\n\n        if (hasCriteria) {\n            FilterButton.drawHasCriteria(ctx, FILTER_ICON_SIZE, fgColor, bgColor);\n        } else {\n            FilterButton.drawNoCriteria(ctx, FILTER_ICON_SIZE, fgColor, bgColor);\n        }\n\n        ctx.restore();\n    }\n\n    onPointerDown(evt: IPointerEvent | IMouseEvent): void {\n        // Right click not trigger this event.\n        if (evt.button === 2) {\n            return;\n        }\n\n        const { col, unitId, subUnitId } = this._filterParams!;\n        const opened = this._contextService.getContextValue(FILTER_PANEL_OPENED_KEY);\n        if (opened || !this._commandService.hasCommand(OpenFilterPanelOperation.id)) {\n            return;\n        }\n\n        setTimeout(() => {\n            this._commandService.executeCommand(OpenFilterPanelOperation.id, {\n                unitId,\n                subUnitId,\n                col,\n            } as IOpenFilterPanelOperationParams);\n        }, 200);\n    }\n\n    onPointerEnter(): void {\n        this._hovered = true;\n        this.makeDirty(true);\n    }\n\n    onPointerLeave(): void {\n        this._hovered = false;\n        this.makeDirty(true);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, IRange, Workbook } from '@univerjs/core';\nimport type { IRenderContext, IRenderModule, SpreadsheetSkeleton } from '@univerjs/engine-render';\nimport type { ISheetCommandSharedParams } from '@univerjs/sheets';\nimport type { FilterModel } from '@univerjs/sheets-filter';\nimport type { ISheetsFilterButtonShapeProps } from '../widgets/filter-button.shape';\nimport { CommandType, fromCallback, ICommandService, Inject, Injector, InterceptorEffectEnum, RxDisposable, ThemeService } from '@univerjs/core';\nimport { INTERCEPTOR_POINT, SetRangeValuesMutation, SheetInterceptorService } from '@univerjs/sheets';\nimport { FILTER_MUTATIONS, SheetsFilterService } from '@univerjs/sheets-filter';\n\nimport { attachSelectionWithCoord, getCoordByCell, ISheetSelectionRenderService, SelectionControl, SheetSkeletonManagerService } from '@univerjs/sheets-ui';\nimport { filter, map, of, startWith, switchMap, takeUntil, throttleTime } from 'rxjs';\nimport { FILTER_ICON_PADDING, FILTER_ICON_SIZE, SheetsFilterButtonShape } from '../widgets/filter-button.shape';\n\nconst DEFAULT_Z_INDEX = 1000;\n\nconst SHEETS_FILTER_BUTTON_Z_INDEX = 5000;\n\ninterface ISheetsFilterRenderParams {\n    unitId: string;\n    worksheetId: string;\n    filterModel?: FilterModel;\n    range?: IRange;\n    skeleton: SpreadsheetSkeleton;\n}\n\n/**\n * Show selected range in filter.\n */\nexport class SheetsFilterRenderController extends RxDisposable implements IRenderModule {\n    private _filterRangeShape: SelectionControl | null = null;\n    private _buttonRenderDisposable: IDisposable | null = null;\n    private _filterButtonShapes: SheetsFilterButtonShape[] = [];\n\n    constructor(\n        private readonly _context: IRenderContext<Workbook>,\n        @Inject(Injector) private readonly _injector: Injector,\n        @Inject(SheetSkeletonManagerService) private readonly _sheetSkeletonManagerService: SheetSkeletonManagerService,\n        @Inject(SheetsFilterService) private readonly _sheetsFilterService: SheetsFilterService,\n        @Inject(ThemeService) private readonly _themeService: ThemeService,\n        @Inject(SheetInterceptorService) private readonly _sheetInterceptorService: SheetInterceptorService,\n        @ICommandService private readonly _commandService: ICommandService,\n        @ISheetSelectionRenderService private readonly _selectionRenderService: ISheetSelectionRenderService\n    ) {\n        super();\n\n        this._initRenderer();\n    }\n\n    override dispose(): void {\n        super.dispose();\n        this._disposeRendering();\n    }\n\n    private _initRenderer(): void {\n        // Subscribe to skeleton change and filter model change.\n        this._sheetSkeletonManagerService.currentSkeleton$.pipe(\n            switchMap((skeletonParams) => {\n                if (!skeletonParams) return of(null);\n\n                const { unit: workbook, unitId } = this._context;\n                const worksheetId = workbook.getActiveSheet()?.getSheetId() || '';\n                const filterModel = this._sheetsFilterService.getFilterModel(unitId, worksheetId) ?? undefined;\n                const getParams = (): ISheetsFilterRenderParams => ({\n                    unitId,\n                    worksheetId,\n                    filterModel,\n                    range: filterModel?.getRange(),\n                    skeleton: skeletonParams.skeleton,\n                });\n\n                return fromCallback(this._commandService.onCommandExecuted.bind(this._commandService)).pipe(\n                    filter(([command]) =>\n                        command.type === CommandType.MUTATION\n                        && (command.params as Partial<ISheetCommandSharedParams>)?.unitId === workbook.getUnitId()\n                        && (FILTER_MUTATIONS.has(command.id) || command.id === SetRangeValuesMutation.id)\n                    ),\n                    throttleTime(20, undefined, { leading: false, trailing: true }),\n                    map(getParams),\n                    startWith(getParams()) // must trigger once\n                );\n            }),\n            takeUntil(this.dispose$)\n        ).subscribe((renderParams) => {\n            this._disposeRendering();\n            if (!renderParams || !renderParams.range) {\n                return;\n            }\n\n            this._renderRange(renderParams.range, renderParams.skeleton);\n            this._renderButtons(renderParams as Required<ISheetsFilterRenderParams>);\n        });\n    }\n\n    private _renderRange(range: IRange, skeleton: SpreadsheetSkeleton): void {\n        const { scene } = this._context;\n        const { rowHeaderWidth, columnHeaderHeight } = skeleton;\n        const filterRangeShape = this._filterRangeShape = new SelectionControl(\n            scene,\n            DEFAULT_Z_INDEX,\n            this._themeService,\n            {\n                rowHeaderWidth,\n                columnHeaderHeight,\n                enableAutoFill: false,\n                highlightHeader: false,\n            }\n        );\n        const selectionWithStyle = {\n            range,\n            primary: null,\n            style: { fill: 'rgba(0, 0, 0, 0.0)' },\n        };\n        const selectionWithCoord = attachSelectionWithCoord(selectionWithStyle, skeleton);\n        filterRangeShape.updateRangeBySelectionWithCoord(selectionWithCoord);\n        filterRangeShape.setEvent(false);\n\n        scene.makeDirty(true);\n    }\n\n    private _renderButtons(params: Required<ISheetsFilterRenderParams>): void {\n        const { range, filterModel, unitId, skeleton, worksheetId } = params;\n        const { scene } = this._context;\n\n        // Push cell contents to leave space for the filter buttons.\n        this._interceptCellContent(unitId, worksheetId, params.range);\n\n        // Create filter button shapes.\n        const { startColumn, endColumn, startRow } = range;\n        for (let col = startColumn; col <= endColumn; col++) {\n            const key = `sheets-filter-button-${col}`;\n            const startPosition = getCoordByCell(startRow, col, scene, skeleton);\n            const { startX, startY, endX, endY } = startPosition;\n\n            // Too little space to draw the button, just ignore it.\n            const cellWidth = endX - startX;\n            const cellHeight = endY - startY;\n            if (cellHeight <= FILTER_ICON_PADDING || cellWidth <= FILTER_ICON_PADDING) {\n                continue;\n            }\n\n            // In other cases we need to draw the button, and we need to take care of the position and clipping.\n            const hasCriteria = !!filterModel.getFilterColumn(col);\n            const iconStartX = endX - FILTER_ICON_SIZE - FILTER_ICON_PADDING;\n            const iconStartY = endY - FILTER_ICON_SIZE - FILTER_ICON_PADDING;\n            const props: ISheetsFilterButtonShapeProps = {\n                left: iconStartX,\n                top: iconStartY,\n                height: FILTER_ICON_SIZE,\n                width: FILTER_ICON_SIZE,\n                zIndex: SHEETS_FILTER_BUTTON_Z_INDEX,\n                cellHeight,\n                cellWidth,\n                filterParams: { unitId, subUnitId: worksheetId, col, hasCriteria },\n            };\n\n            const buttonShape = this._injector.createInstance(SheetsFilterButtonShape, key, props);\n            this._filterButtonShapes.push(buttonShape);\n        }\n\n        scene.addObjects(this._filterButtonShapes);\n        scene.makeDirty();\n    }\n\n    private _interceptCellContent(workbookId: string, worksheetId: string, range: IRange): void {\n        const { startRow, startColumn, endColumn } = range;\n        this._buttonRenderDisposable = this._sheetInterceptorService.intercept(INTERCEPTOR_POINT.CELL_CONTENT, {\n            effect: InterceptorEffectEnum.Style,\n            handler: (cell, pos, next) => {\n                const { row, col, unitId, subUnitId } = pos;\n                if (\n                    unitId !== workbookId ||\n                    subUnitId !== worksheetId ||\n                    row !== startRow ||\n                    col < startColumn ||\n                    col > endColumn\n                ) {\n                    return next(cell);\n                }\n\n                return next({\n                    ...cell,\n                    fontRenderExtension: {\n                        ...cell?.fontRenderExtension,\n                        rightOffset: FILTER_ICON_SIZE,\n                    },\n                });\n            },\n            priority: 10,\n        });\n    }\n\n    private _disposeRendering(): void {\n        this._filterRangeShape?.dispose();\n        this._filterButtonShapes.forEach((s) => s.dispose());\n        this._buttonRenderDisposable?.dispose();\n\n        this._filterRangeShape = null;\n        this._buttonRenderDisposable = null;\n        this._filterButtonShapes = [];\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport { Inject, RxDisposable, UniverInstanceType } from '@univerjs/core';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { ReCalcSheetsFilterMutation, RemoveSheetsFilterMutation, SetSheetsFilterCriteriaMutation, SetSheetsFilterRangeMutation } from '@univerjs/sheets-filter';\nimport { SheetsRenderService } from '@univerjs/sheets-ui';\nimport { SheetsFilterRenderController } from '../views/render-modules/sheets-filter.render-controller';\n\nexport class SheetsFilterUIMobileController extends RxDisposable {\n    constructor(\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService,\n        @Inject(SheetsRenderService) private _sheetsRenderService: SheetsRenderService\n    ) {\n        super();\n\n        [\n            SetSheetsFilterRangeMutation,\n            SetSheetsFilterCriteriaMutation,\n            RemoveSheetsFilterMutation,\n            ReCalcSheetsFilterMutation,\n        ].forEach((m) => this.disposeWithMe(this._sheetsRenderService.registerSkeletonChangingMutations(m.id)));\n\n        this.disposeWithMe(this._renderManagerService.registerRenderModule(\n            UniverInstanceType.UNIVER_SHEET,\n            [SheetsFilterRenderController] as Dependency\n        ));\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SmartToggleSheetsFilterCommand } from '@univerjs/sheets-filter';\nimport { whenSheetEditorFocused } from '@univerjs/sheets-ui';\nimport { type IShortcutItem, KeyCode, MetaKeys } from '@univerjs/ui';\n\nexport const SmartToggleFilterShortcut: IShortcutItem = {\n    id: SmartToggleSheetsFilterCommand.id,\n    binding: KeyCode.L | MetaKeys.CTRL_COMMAND | MetaKeys.SHIFT,\n    description: 'sheets-filter.shortcut.smart-toggle-filter',\n    preconditions: whenSheetEditorFocused,\n    group: '4_sheet-edit',\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, Nullable } from '@univerjs/core';\nimport { ICommandService, IContextService, Inject, Injector, LocaleService } from '@univerjs/core';\nimport { MessageType } from '@univerjs/design';\n\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { FilterSingle } from '@univerjs/icons';\nimport { ClearSheetsFilterCriteriaCommand, ReCalcSheetsFilterCommand, RemoveSheetFilterCommand, SetSheetFilterRangeCommand, SetSheetsFilterCriteriaCommand, SheetsFilterService, SmartToggleSheetsFilterCommand } from '@univerjs/sheets-filter';\n\nimport { SheetCanvasPopManagerService, SheetsRenderService } from '@univerjs/sheets-ui';\nimport { ComponentManager, IMenuManagerService, IMessageService, IShortcutService } from '@univerjs/ui';\nimport { distinctUntilChanged } from 'rxjs';\nimport { ChangeFilterByOperation, CloseFilterPanelOperation, FILTER_PANEL_OPENED_KEY, OpenFilterPanelOperation } from '../commands/operations/sheets-filter.operation';\nimport { SheetsFilterPanelService } from '../services/sheets-filter-panel.service';\nimport { FilterPanel } from '../views/components/SheetsFilterPanel';\nimport { menuSchema } from './menu.schema';\nimport { SheetsFilterUIMobileController } from './sheets-filter-ui-mobile.controller';\nimport { SmartToggleFilterShortcut } from './sheets-filter.shortcut';\n\nexport const FILTER_PANEL_POPUP_KEY = 'FILTER_PANEL_POPUP';\n\n/**\n * This controller controls the UI of \"filter\" features. Menus, commands and filter panel etc. Except for the rendering.\n */\nexport class SheetsFilterUIDesktopController extends SheetsFilterUIMobileController {\n    constructor(\n        @Inject(Injector) private readonly _injector: Injector,\n        @Inject(ComponentManager) private readonly _componentManager: ComponentManager,\n        @Inject(SheetsFilterPanelService) private readonly _sheetsFilterPanelService: SheetsFilterPanelService,\n        @Inject(SheetCanvasPopManagerService) private _sheetCanvasPopupService: SheetCanvasPopManagerService,\n        @Inject(SheetsFilterService) private _sheetsFilterService: SheetsFilterService,\n        @Inject(LocaleService) private _localeService: LocaleService,\n        @IShortcutService private readonly _shortcutService: IShortcutService,\n        @ICommandService private readonly _commandService: ICommandService,\n        @IMenuManagerService private readonly _menuManagerService: IMenuManagerService,\n        @IContextService private readonly _contextService: IContextService,\n        @IMessageService private readonly _messageService: IMessageService,\n        @Inject(SheetsRenderService) sheetsRenderService: SheetsRenderService,\n        @IRenderManagerService renderManagerService: IRenderManagerService\n    ) {\n        super(renderManagerService, sheetsRenderService);\n\n        this._initCommands();\n        this._initShortcuts();\n        this._initMenuItems();\n        this._initUI();\n    }\n\n    override dispose(): void {\n        super.dispose();\n\n        this._closeFilterPopup();\n    }\n\n    private _initShortcuts(): void {\n        [\n            SmartToggleFilterShortcut,\n        ].forEach((shortcut) => {\n            this.disposeWithMe(this._shortcutService.registerShortcut(shortcut));\n        });\n    }\n\n    private _initCommands(): void {\n        [\n            SmartToggleSheetsFilterCommand,\n            RemoveSheetFilterCommand,\n            SetSheetFilterRangeCommand,\n            SetSheetsFilterCriteriaCommand,\n            ClearSheetsFilterCriteriaCommand,\n            ReCalcSheetsFilterCommand,\n            ChangeFilterByOperation,\n            OpenFilterPanelOperation,\n            CloseFilterPanelOperation,\n        ].forEach((c) => {\n            this.disposeWithMe(this._commandService.registerCommand(c));\n        });\n    }\n\n    private _initMenuItems(): void {\n        this._menuManagerService.mergeMenu(menuSchema);\n    }\n\n    private _initUI(): void {\n        this.disposeWithMe(this._componentManager.register(FILTER_PANEL_POPUP_KEY, FilterPanel));\n        this.disposeWithMe(this._componentManager.register('FilterSingle', FilterSingle));\n        this.disposeWithMe(this._contextService.subscribeContextValue$(FILTER_PANEL_OPENED_KEY)\n            .pipe(distinctUntilChanged())\n            .subscribe((open) => {\n                if (open) {\n                    this._openFilterPopup();\n                } else {\n                    this._closeFilterPopup();\n                }\n            }));\n        this.disposeWithMe(this._sheetsFilterService.errorMsg$.subscribe((content) => {\n            if (content) {\n                this._messageService.show({\n                    type: MessageType.Error,\n                    content: this._localeService.t(content),\n                });\n            }\n        }));\n    }\n\n    private _popupDisposable?: Nullable<IDisposable>;\n    private _openFilterPopup(): void {\n        const currentFilterModel = this._sheetsFilterPanelService.filterModel;\n        if (!currentFilterModel) {\n            throw new Error('[SheetsFilterUIController]: no filter model when opening filter popup!');\n        }\n\n        const range = currentFilterModel.getRange();\n        const col = this._sheetsFilterPanelService.col;\n        const { startRow } = range;\n        this._popupDisposable = this._sheetCanvasPopupService.attachPopupToCell(startRow, col, {\n            componentKey: FILTER_PANEL_POPUP_KEY,\n            direction: 'horizontal',\n            onClickOutside: () => this._commandService.syncExecuteCommand(CloseFilterPanelOperation.id),\n            offset: [5, 0],\n        });\n    }\n\n    private _closeFilterPopup(): void {\n        this._popupDisposable?.dispose();\n        this._popupDisposable = null;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport type { IUniverSheetsFilterUIConfig } from './controllers/config.schema';\nimport {\n    DependentOn,\n    IConfigService,\n    Inject,\n    Injector,\n    merge,\n    Optional,\n    Plugin,\n    UniverInstanceType,\n} from '@univerjs/core';\nimport { IRPCChannelService, toModule } from '@univerjs/rpc';\nimport { UniverSheetsFilterPlugin } from '@univerjs/sheets-filter';\nimport { defaultPluginConfig, SHEETS_FILTER_UI_PLUGIN_CONFIG_KEY } from './controllers/config.schema';\nimport { SheetsFilterPermissionController } from './controllers/sheets-filter-permission.controller';\nimport { SheetsFilterUIDesktopController } from './controllers/sheets-filter-ui-desktop.controller';\nimport { SheetsFilterPanelService } from './services/sheets-filter-panel.service';\nimport { ISheetsGenerateFilterValuesService, SHEETS_GENERATE_FILTER_VALUES_SERVICE_NAME } from './worker/generate-filter-values.service';\n\nconst NAME = 'SHEET_FILTER_UI_PLUGIN';\n\n/**\n * The plugin for the desktop version of the sheets filter UI. Its type is {@link UniverInstanceType.UNIVER_SHEET}.\n */\n@DependentOn(UniverSheetsFilterPlugin)\nexport class UniverSheetsFilterUIPlugin extends Plugin {\n    static override type = UniverInstanceType.UNIVER_SHEET;\n    static override pluginName = NAME;\n\n    constructor(\n        private readonly _config: Partial<IUniverSheetsFilterUIConfig> = defaultPluginConfig,\n        @Inject(Injector) protected readonly _injector: Injector,\n        @IConfigService private readonly _configService: IConfigService,\n        @Optional(IRPCChannelService) private readonly _rpcChannelService?: IRPCChannelService\n    ) {\n        super();\n\n        // Manage the plugin configuration.\n        const { menu, ...rest } = merge(\n            {},\n            defaultPluginConfig,\n            this._config\n        );\n        if (menu) {\n            this._configService.setConfig('menu', menu, { merge: true });\n        }\n        this._configService.setConfig(SHEETS_FILTER_UI_PLUGIN_CONFIG_KEY, rest);\n    }\n\n    override onStarting(): void {\n        ([\n            [SheetsFilterPanelService],\n            [SheetsFilterPermissionController],\n            [SheetsFilterUIDesktopController],\n        ] as Dependency[]).forEach((d) => this._injector.add(d));\n\n        if (this._config.useRemoteFilterValuesGenerator && this._rpcChannelService) {\n            this._injector.add([ISheetsGenerateFilterValuesService, {\n                useFactory: (): ISheetsGenerateFilterValuesService =>\n                    toModule<ISheetsGenerateFilterValuesService>(\n                        this._rpcChannelService!.requestChannel(SHEETS_GENERATE_FILTER_VALUES_SERVICE_NAME)\n                    ),\n            }]);\n        }\n    }\n\n    override onReady(): void {\n        this._injector.get(SheetsFilterPermissionController);\n    }\n\n    override onRendered(): void {\n        this._injector.get(SheetsFilterUIDesktopController);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport type { IUniverSheetsFilterUIConfig } from './controllers/config.schema';\nimport { DependentOn, IConfigService, Inject, Injector, merge, Plugin, UniverInstanceType } from '@univerjs/core';\n\nimport { UniverSheetsFilterPlugin } from '@univerjs/sheets-filter';\nimport { defaultPluginConfig, SHEETS_FILTER_UI_PLUGIN_CONFIG_KEY } from './controllers/config.schema';\nimport { SheetsFilterPermissionController } from './controllers/sheets-filter-permission.controller';\nimport { SheetsFilterUIMobileController } from './controllers/sheets-filter-ui-mobile.controller';\n\nconst NAME = 'SHEET_FILTER_UI_PLUGIN';\n\n@DependentOn(UniverSheetsFilterPlugin)\nexport class UniverSheetsFilterMobileUIPlugin extends Plugin {\n    static override type = UniverInstanceType.UNIVER_SHEET;\n    static override pluginName = NAME;\n\n    constructor(\n        private readonly _config: Partial<IUniverSheetsFilterUIConfig> = defaultPluginConfig,\n        @Inject(Injector) protected readonly _injector: Injector,\n        @IConfigService private readonly _configService: IConfigService\n    ) {\n        super();\n\n        // Manage the plugin configuration.\n        const { menu, ...rest } = merge(\n            {},\n            defaultPluginConfig,\n            this._config\n        );\n        if (menu) {\n            this._configService.setConfig('menu', menu, { merge: true });\n        }\n        this._configService.setConfig(SHEETS_FILTER_UI_PLUGIN_CONFIG_KEY, rest);\n    }\n\n    override onStarting(): void {\n        ([\n            [SheetsFilterPermissionController],\n            [SheetsFilterUIMobileController],\n        ] as Dependency[]).forEach((d) => this._injector.add(d));\n    }\n\n    override onReady(): void {\n        this._injector.get(SheetsFilterPermissionController);\n    }\n\n    override onRendered(): void {\n        this._injector.get(SheetsFilterUIMobileController);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport { Inject, Injector, Plugin, UniverInstanceType } from '@univerjs/core';\nimport { fromModule, IRPCChannelService } from '@univerjs/rpc';\nimport { ISheetsGenerateFilterValuesService, SHEETS_GENERATE_FILTER_VALUES_SERVICE_NAME, SheetsGenerateFilterValuesService } from './generate-filter-values.service';\n\nexport class UniverSheetsFilterUIWorkerPlugin extends Plugin {\n    static override type = UniverInstanceType.UNIVER_SHEET;\n    static override pluginName: string = 'SHEET_FILTER_UI_WORKER_PLUGIN';\n\n    constructor(\n        private readonly _config: unknown,\n        @Inject(Injector) protected readonly _injector: Injector,\n        @IRPCChannelService private readonly _rpcChannelService: IRPCChannelService\n    ) {\n        super();\n    }\n\n    override onStarting() {\n        ([\n            [ISheetsGenerateFilterValuesService, { useClass: SheetsGenerateFilterValuesService }],\n        ] as Dependency[]).forEach((d) => this._injector.add(d));\n    }\n\n    override onReady(): void {\n        this._rpcChannelService.registerChannel(\n            SHEETS_GENERATE_FILTER_VALUES_SERVICE_NAME,\n            fromModule(this._injector.get(ISheetsGenerateFilterValuesService))\n        );\n    }\n}\n"],
  "mappings": "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",
  "names": ["FilterConditionItems", "condition", "items", "import_react", "operator", "import_react", "import_jsx_runtime", "items", "import_jsx_runtime", "_a", "NAME"]
}
