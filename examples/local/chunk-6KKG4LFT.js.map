{
  "version": 3,
  "sources": ["../../packages/docs-drawing/src/controllers/config.schema.ts", "../../packages/docs-drawing/src/services/doc-drawing.service.ts", "../../packages/docs-drawing/src/controllers/doc-drawing.controller.ts", "../../packages/docs-drawing/src/plugin.ts", "../../packages/drawing-ui/src/controllers/utils.ts", "../../packages/drawing-ui/src/views/image-viewer/component-name.ts", "../../packages/drawing-ui/src/services/drawing-render.service.ts", "../../packages/drawing-ui/src/utils/get-update-params.ts", "../../packages/drawing-ui/src/views/panel/DrawingCommonPanel.tsx", "../../packages/drawing-ui/src/views/panel/DrawingAlign.tsx", "../../packages/drawing-ui/src/commands/operations/drawing-align.operation.ts", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/drawing-ui/src/views/panel/index.module.less", "../../packages/drawing-ui/src/views/panel/DrawingArrange.tsx", "../../packages/drawing-ui/src/views/panel/DrawingGroup.tsx", "../../packages/drawing-ui/src/views/panel/DrawingTransform.tsx", "../../packages/drawing-ui/src/utils/config.ts", "../../packages/drawing-ui/src/views/panel/ImageCropper.tsx", "../../packages/drawing-ui/src/commands/operations/image-crop.operation.ts", "../../packages/drawing-ui/src/views/image-popup-menu/ImagePopupMenu.tsx", "../../packages/drawing-ui/src/views/image-popup-menu/component-name.ts", "../../packages/drawing-ui/src/controllers/config.schema.ts", "../../packages/drawing-ui/src/commands/operations/image-reset-size.operation.ts", "../../packages/drawing-ui/src/views/image-viewer/ImageViewer.tsx", "../../packages/drawing-ui/src/controllers/drawing-ui.controller.ts", "../../packages/drawing-ui/src/controllers/drawing-update.controller.ts", "../../packages/drawing-ui/src/views/crop/image-cropper-object.ts", "../../packages/drawing-ui/src/controllers/image-cropper.controller.ts", "../../packages/drawing-ui/src/controllers/image-update.controller.ts", "../../packages/drawing-ui/src/plugin.ts", "../../packages/sheets-drawing/src/controllers/config.schema.ts", "../../packages/sheets-drawing/src/services/sheet-drawing.service.ts", "../../packages/sheets-drawing/src/commands/mutations/set-drawing-apply.mutation.ts", "../../packages/sheets-drawing/src/controllers/sheet-drawing.controller.ts", "../../packages/sheets-drawing/src/plugin.ts", "../../packages/sheets-drawing-ui/src/controllers/config.schema.ts", "../../packages/sheets-drawing-ui/src/commands/operations/clear-drawing-transformer.operation.ts", "../../packages/sheets-drawing-ui/src/commands/commands/remove-sheet-drawing.command.ts", "../../packages/sheets-drawing-ui/src/views/sheet-image-panel/component-name.ts", "../../packages/sheets-drawing-ui/src/commands/operations/open-drawing-panel.operation.ts", "../../packages/sheets-drawing-ui/src/commands/operations/edit-sheet-drawing.operation.ts", "../../packages/sheets-drawing-ui/src/views/upload-loading/UploadLoading.tsx", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/sheets-drawing-ui/src/views/upload-loading/index.module.less", "../../packages/sheets-drawing-ui/src/controllers/drawing-popup-menu.controller.ts", "../../packages/sheets-drawing-ui/src/basics/transform-position.ts", "../../packages/sheets-drawing-ui/src/controllers/render-controllers/sheet-drawing.render-controller.ts", "../../packages/sheets-drawing-ui/src/commands/commands/utils.ts", "../../packages/sheets-drawing-ui/src/commands/commands/group-sheet-drawing.command.ts", "../../packages/sheets-drawing-ui/src/commands/commands/insert-sheet-drawing.command.ts", "../../packages/sheets-drawing-ui/src/commands/commands/set-drawing-arrange.command.ts", "../../packages/sheets-drawing-ui/src/commands/commands/set-sheet-drawing.command.ts", "../../packages/sheets-drawing-ui/src/commands/commands/ungroup-sheet-drawing.command.ts", "../../packages/sheets-drawing-ui/src/controllers/sheet-drawing-update.controller.ts", "../../packages/sheets-drawing-ui/src/controllers/sheet-cell-image.controller.ts", "../../packages/sheets-drawing-ui/src/controllers/sheet-cell-image-autofill.controller.ts", "../../packages/sheets-drawing-ui/src/controllers/sheet-celll-image-hover.controller.ts", "../../packages/sheets-drawing-ui/src/commands/commands/insert-image.command.ts", "../../packages/sheets-drawing-ui/src/controllers/sheet-drawing-copy-paste.controller.ts", "../../packages/sheets-drawing-ui/src/controllers/sheet-drawing-permission.controller.ts", "../../packages/sheets-drawing-ui/src/controllers/sheet-drawing-printing.controller.ts", "../../packages/sheets-drawing-ui/src/controllers/sheet-drawing-transform-affected.controller.ts", "../../packages/sheets-drawing-ui/src/commands/commands/delete-drawings.command.ts", "../../packages/sheets-drawing-ui/src/commands/commands/move-drawings.command.ts", "../../packages/sheets-drawing-ui/src/views/menu/image.menu.ts", "../../packages/sheets-drawing-ui/src/views/sheet-image-panel/SheetDrawingPanel.tsx", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/sheets-drawing-ui/src/views/sheet-image-panel/index.module.less", "../../packages/sheets-drawing-ui/src/views/sheet-image-panel/SheetDrawingAnchor.tsx", "../../packages/sheets-drawing-ui/src/controllers/menu.schema.ts", "../../packages/sheets-drawing-ui/src/controllers/shortcuts/drawing.shortcut.ts", "../../packages/sheets-drawing-ui/src/controllers/sheet-drawing.controller.ts", "../../packages/sheets-drawing-ui/src/services/canvas-float-dom-manager.service.ts", "../../packages/sheets-drawing-ui/src/plugin.ts"],
  "sourcesContent": ["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DOCS_DRAWING_PLUGIN_CONFIG_KEY = 'docs-drawing.config';\n\nexport const configSymbol = Symbol(DOCS_DRAWING_PLUGIN_CONFIG_KEY);\n\nexport interface IUniverDocsDrawingConfig {\n}\n\nexport const defaultPluginConfig: IUniverDocsDrawingConfig = {};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDocDrawingBase } from '@univerjs/core';\nimport type { IDocFloatDomData, IImageData, IUnitDrawingService } from '@univerjs/drawing';\nimport { createIdentifier } from '@univerjs/core';\nimport { UnitDrawingService } from '@univerjs/drawing';\n\nexport interface IDocImage extends IImageData, IDocDrawingBase { }\n\n/**\n * test type\n */\nexport interface IDocShape extends IDocDrawingBase { }\n\nexport interface IDocFloatDom extends IDocFloatDomData, IDocDrawingBase {}\n\nexport type IDocDrawing = IDocImage | IDocFloatDom | IDocShape;\n\ntype OptionalField<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\nexport type IDocUpdateDrawing = OptionalField<IDocDrawing, 'drawingType' | 'layoutType' | 'docTransform' | 'description' | 'title'>;\n\nexport class DocDrawingService extends UnitDrawingService<IDocDrawing> { }\n\nexport interface IDocDrawingService extends IUnitDrawingService<IDocDrawing> { }\n\nexport const IDocDrawingService = createIdentifier<IDocDrawingService>('univer.doc.plugin.doc-drawing.service');\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DocumentDataModel, IDocumentData } from '@univerjs/core';\nimport type { IDrawingMapItem, IDrawingMapItemData } from '@univerjs/drawing';\nimport { Disposable, IResourceManagerService, IUniverInstanceService, UniverInstanceType } from '@univerjs/core';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { type IDocDrawing, IDocDrawingService } from '../services/doc-drawing.service';\n\nexport const DOCS_DRAWING_PLUGIN = 'DOC_DRAWING_PLUGIN';\nexport interface IDocDrawingModel { drawings?: IDocumentData['drawings']; drawingsOrder?: IDocumentData['drawingsOrder'] };\n\nexport class DocDrawingController extends Disposable {\n    constructor(\n        @IDocDrawingService private readonly _docDrawingService: IDocDrawingService,\n        @IDrawingManagerService private readonly _drawingManagerService: IDrawingManagerService,\n        @IResourceManagerService private _resourceManagerService: IResourceManagerService,\n        @IUniverInstanceService private _univerInstanceService: IUniverInstanceService\n    ) {\n        super();\n\n        this._init();\n    }\n\n    private _init(): void {\n        this._initSnapshot();\n    }\n\n    private _initSnapshot() {\n        const toJson = (unitId: string) => {\n            const doc = this._univerInstanceService.getUnit<DocumentDataModel>(unitId, UniverInstanceType.UNIVER_DOC);\n            if (doc) {\n                const drawings = doc.getSnapshot().drawings;\n                const drawingOrder = doc.getSnapshot().drawingsOrder;\n                const data: IDrawingMapItem<IDocDrawing> = {\n                    data: drawings ?? {},\n                    order: drawingOrder ?? [],\n\n                };\n                return JSON.stringify(data);\n            }\n            return '';\n        };\n        const parseJson = (json: string): IDrawingMapItem<IDocDrawing> => {\n            if (!json) {\n                return { data: {}, order: [] };\n            }\n            try {\n                return JSON.parse(json);\n            } catch (err) {\n                return { data: {}, order: [] };\n            }\n        };\n\n        this.disposeWithMe(\n            this._resourceManagerService.registerPluginResource<IDrawingMapItem<IDocDrawing>>({\n                pluginName: DOCS_DRAWING_PLUGIN,\n                businesses: [UniverInstanceType.UNIVER_DOC],\n                toJson: (unitId) => toJson(unitId),\n                parseJson: (json) => parseJson(json),\n                onUnLoad: (unitId) => {\n                    this._setDrawingDataForUnit(unitId, { data: {}, order: [] });\n                },\n                onLoad: (unitId, value) => {\n                    this._setDrawingDataForUnit(unitId, { data: value.data ?? {}, order: value.order ?? [] });\n                },\n            })\n        );\n    }\n\n    private _setDrawingDataForUnit(unitId: string, drawingMapItem: IDrawingMapItem<IDocDrawing>) {\n        const documentDataModel = this._univerInstanceService.getUnit<DocumentDataModel>(unitId);\n        if (documentDataModel == null) {\n            return;\n        }\n\n        documentDataModel.resetDrawing(drawingMapItem.data, drawingMapItem.order);\n        this.loadDrawingDataForUnit(unitId);\n    }\n\n    loadDrawingDataForUnit(unitId: string): boolean {\n        const dataModel = this._univerInstanceService.getUnit<DocumentDataModel>(unitId, UniverInstanceType.UNIVER_DOC);\n        if (!dataModel) {\n            return false;\n        }\n\n        const subUnitId = unitId;\n\n        const drawingDataModels = dataModel.getDrawings();\n        const drawingOrderModel = dataModel.getDrawingsOrder();\n\n        if (!drawingDataModels || !drawingOrderModel) {\n            return false;\n        }\n\n        // TODO@wzhudev: should move to docs-drawing.\n\n        Object.keys(drawingDataModels).forEach((drawingId) => {\n            const drawingDataModel = drawingDataModels[drawingId];\n            // const docTransform = drawingDataModel.docTransform;\n            // const transform = docDrawingPositionToTransform(docTransform);\n\n            drawingDataModels[drawingId] = { ...drawingDataModel } as IDocDrawing;\n        });\n\n        const subDrawings = {\n            [subUnitId]: {\n                unitId,\n                subUnitId,\n                data: drawingDataModels as IDrawingMapItemData<IDocDrawing>,\n                order: drawingOrderModel,\n            },\n        };\n\n        this._docDrawingService.registerDrawingData(unitId, subDrawings);\n        this._drawingManagerService.registerDrawingData(unitId, subDrawings);\n        return true;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport type { IUniverDocsDrawingConfig } from './controllers/config.schema';\nimport { IConfigService, Inject, Injector, merge, Plugin, touchDependencies, UniverInstanceType } from '@univerjs/core';\nimport { defaultPluginConfig, DOCS_DRAWING_PLUGIN_CONFIG_KEY } from './controllers/config.schema';\nimport { DocDrawingController, DOCS_DRAWING_PLUGIN } from './controllers/doc-drawing.controller';\nimport { DocDrawingService, IDocDrawingService } from './services/doc-drawing.service';\n\nexport class UniverDocsDrawingPlugin extends Plugin {\n    static override pluginName = DOCS_DRAWING_PLUGIN;\n    static override type = UniverInstanceType.UNIVER_DOC;\n\n    constructor(\n        private readonly _config: Partial<IUniverDocsDrawingConfig> = defaultPluginConfig,\n        @Inject(Injector) override _injector: Injector,\n        @IConfigService private readonly _configService: IConfigService\n    ) {\n        super();\n\n        // Manage the plugin configuration.\n        const { ...rest } = merge(\n            {},\n            defaultPluginConfig,\n            this._config\n        );\n        this._configService.setConfig(DOCS_DRAWING_PLUGIN_CONFIG_KEY, rest);\n    }\n\n    override onStarting(): void {\n        ([\n            [DocDrawingController],\n            [DocDrawingService],\n            [IDocDrawingService, { useClass: DocDrawingService }],\n        ] as Dependency[]).forEach((dependency) => this._injector.add(dependency));\n\n        touchDependencies(this._injector, [\n            [DocDrawingController],\n        ]);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingSearch, IUniverInstanceService, Nullable, Workbook } from '@univerjs/core';\nimport type { IDrawingManagerService } from '@univerjs/drawing';\nimport type { BaseObject, Scene } from '@univerjs/engine-render';\nimport { UniverInstanceType } from '@univerjs/core';\nimport { getDrawingShapeKeyByDrawingSearch } from '@univerjs/drawing';\nimport { DRAWING_OBJECT_LAYER_INDEX, Group } from '@univerjs/engine-render';\n\nexport function insertGroupObject(objectParam: IDrawingSearch, object: BaseObject, scene: Scene, drawingManagerService: IDrawingManagerService) {\n    const groupParam = drawingManagerService.getDrawingByParam(objectParam);\n    if (groupParam == null) {\n        return;\n    }\n\n    const groupKey = getDrawingShapeKeyByDrawingSearch(objectParam);\n    const groupObject = scene.getObject(groupKey);\n\n    if (groupObject && !(groupObject instanceof Group)) {\n        return;\n    }\n\n    if (groupObject != null) {\n        groupObject.addObject(object);\n        return;\n    }\n\n    const group = new Group(groupKey);\n\n    scene.addObject(group, DRAWING_OBJECT_LAYER_INDEX).attachTransformerTo(group);\n\n    group.addObject(object);\n\n    const { transform } = groupParam;\n\n    transform && group.transformByState(\n        {\n            left: transform.left,\n            top: transform.top,\n            angle: transform.angle,\n        }\n    );\n}\n\nexport function getCurrentUnitInfo(currentUniverService: IUniverInstanceService, propUnitId?: string) {\n    const current = propUnitId ? currentUniverService.getUnit(propUnitId) : currentUniverService.getFocusedUnit();\n    if (current == null) {\n        return;\n    }\n\n    const unitId = current.getUnitId();\n    let subUnitId: Nullable<string>;\n\n    if (current.type === UniverInstanceType.UNIVER_SHEET) {\n        subUnitId = (current as Workbook).getActiveSheet()?.getSheetId();\n    } else if (current.type === UniverInstanceType.UNIVER_DOC) {\n        subUnitId = unitId;\n    } else if (current.type === UniverInstanceType.UNIVER_SLIDE) {\n        subUnitId = unitId;\n    }\n\n    return { unitId, subUnitId, current };\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const COMPONENT_IMAGE_VIEWER = 'COMPONENT_IMAGE_VIEWER';\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingSearch } from '@univerjs/core';\nimport type { IDocFloatDomData, IImageData } from '@univerjs/drawing';\nimport type { IImageProps, IRectProps, Scene } from '@univerjs/engine-render';\nimport { DrawingTypeEnum } from '@univerjs/core';\nimport { getDrawingShapeKeyByDrawingSearch, IDrawingManagerService, IImageIoService, ImageSourceType } from '@univerjs/drawing';\nimport { DRAWING_OBJECT_LAYER_INDEX, Image, Rect } from '@univerjs/engine-render';\nimport { IDialogService } from '@univerjs/ui';\nimport { insertGroupObject } from '../controllers/utils';\nimport { COMPONENT_IMAGE_VIEWER } from '../views/image-viewer/component-name';\n\nconst IMAGE_VIEWER_DROPDOWN_PADDING = 50;\n\nexport class DrawingRenderService {\n    constructor(\n        @IDrawingManagerService private readonly _drawingManagerService: IDrawingManagerService,\n        @IImageIoService private readonly _imageIoService: IImageIoService,\n        @IDialogService private readonly _dialogService: IDialogService\n    ) { }\n\n    // eslint-disable-next-line max-lines-per-function\n    async renderImages(imageParam: IImageData, scene: Scene) {\n        const {\n            transform: singleTransform,\n            drawingType,\n            source,\n            imageSourceType,\n            srcRect,\n            prstGeom,\n            groupId,\n            unitId,\n            subUnitId,\n            drawingId,\n            isMultiTransform,\n            transforms: multiTransforms,\n        } = imageParam;\n        if (drawingType !== DrawingTypeEnum.DRAWING_IMAGE) {\n            return;\n        }\n\n        if (!this._drawingManagerService.getDrawingVisible()) {\n            return;\n        }\n\n        if (singleTransform == null) {\n            return;\n        }\n\n        const transforms = isMultiTransform && multiTransforms ? multiTransforms : [singleTransform];\n\n        const images = [];\n        for (const transform of transforms) {\n            const { left, top, width, height, angle, flipX, flipY, skewX, skewY } = transform;\n            const index = transforms.indexOf(transform);\n            const imageShapeKey = getDrawingShapeKeyByDrawingSearch({ unitId, subUnitId, drawingId }, isMultiTransform ? index : undefined);\n            const imageShape = scene.getObject(imageShapeKey);\n\n            if (imageShape != null) {\n                imageShape.transformByState({ left, top, width, height, angle, flipX, flipY, skewX, skewY });\n                continue;\n            }\n\n            const orders = this._drawingManagerService.getDrawingOrder(unitId, subUnitId);\n            const zIndex = orders.indexOf(drawingId);\n            const imageConfig: IImageProps = { ...transform, zIndex: zIndex === -1 ? (orders.length - 1) : zIndex };\n            const imageNativeCache = this._imageIoService.getImageSourceCache(source, imageSourceType);\n\n            let shouldBeCache = false;\n            if (imageNativeCache != null) {\n                imageConfig.image = imageNativeCache;\n            } else {\n                if (imageSourceType === ImageSourceType.UUID) {\n                    try {\n                        imageConfig.url = await this._imageIoService.getImage(source);\n                    } catch (error) {\n                        console.error(error);\n                        continue;\n                    }\n                } else {\n                    imageConfig.url = source;\n                }\n                shouldBeCache = true;\n            }\n\n            if (scene.getObject(imageShapeKey)) {\n                // The image maybe already added  in the time we are getting  the source of the image\n                continue;\n            }\n\n            imageConfig.printable = true;\n            const image = new Image(imageShapeKey, imageConfig);\n            if (shouldBeCache) {\n                this._imageIoService.addImageSourceCache(source, imageSourceType, image.getNative());\n            }\n\n            if (!this._drawingManagerService.getDrawingVisible()) {\n                continue;\n            }\n\n            scene.addObject(image, DRAWING_OBJECT_LAYER_INDEX);\n            if (this._drawingManagerService.getDrawingEditable()) {\n                scene.attachTransformerTo(image);\n            }\n\n            groupId && insertGroupObject({ drawingId: groupId, unitId, subUnitId }, image, scene, this._drawingManagerService);\n\n            if (prstGeom != null) {\n                image.setPrstGeom(prstGeom);\n            }\n            if (srcRect != null) {\n                image.setSrcRect(srcRect);\n            }\n\n            images.push(image);\n        }\n\n        return images;\n    }\n\n    renderFloatDom(param: IDocFloatDomData, scene: Scene) {\n        const {\n            transform: singleTransform,\n            drawingType,\n            groupId,\n            unitId,\n            subUnitId,\n            drawingId,\n            isMultiTransform,\n            transforms: multiTransforms,\n        } = param;\n        if (drawingType !== DrawingTypeEnum.DRAWING_DOM) {\n            return;\n        }\n\n        if (!this._drawingManagerService.getDrawingVisible()) {\n            return;\n        }\n\n        if (singleTransform == null) {\n            return;\n        }\n\n        const transforms = isMultiTransform && multiTransforms ? multiTransforms : [singleTransform];\n\n        const rects = [];\n        for (const transform of transforms) {\n            const { left, top, width, height, angle, flipX, flipY, skewX, skewY } = transform;\n            const index = transforms.indexOf(transform);\n            const imageShapeKey = getDrawingShapeKeyByDrawingSearch({ unitId, subUnitId, drawingId }, isMultiTransform ? index : undefined);\n            const imageShape = scene.getObject(imageShapeKey);\n\n            if (imageShape != null) {\n                imageShape.transformByState({ left, top, width, height, angle, flipX, flipY, skewX, skewY });\n                continue;\n            }\n\n            const orders = this._drawingManagerService.getDrawingOrder(unitId, subUnitId);\n            const zIndex = orders.indexOf(drawingId);\n            const rectConfig: IRectProps = { ...transform, zIndex: zIndex === -1 ? (orders.length - 1) : zIndex };\n\n            if (scene.getObject(imageShapeKey)) {\n                // The image maybe already added  in the time we are getting  the source of the image\n                continue;\n            }\n\n            rectConfig.printable = false;\n            const rect = new Rect(imageShapeKey, rectConfig);\n\n            if (!this._drawingManagerService.getDrawingVisible()) {\n                continue;\n            }\n\n            scene.addObject(rect, DRAWING_OBJECT_LAYER_INDEX);\n            if (this._drawingManagerService.getDrawingEditable() && param.allowTransform !== false) {\n                scene.attachTransformerTo(rect);\n            }\n\n            groupId && insertGroupObject({ drawingId: groupId, unitId, subUnitId }, rect, scene, this._drawingManagerService);\n            rects.push(rect);\n        }\n\n        return rects;\n    }\n\n    renderDrawing(param: IDrawingSearch, scene: Scene) {\n        const drawingParam = this._drawingManagerService.getDrawingByParam(param);\n        if (drawingParam == null) {\n            return;\n        }\n\n        switch (drawingParam.drawingType) {\n            case DrawingTypeEnum.DRAWING_IMAGE:\n                return this.renderImages(drawingParam as IImageData, scene);\n            default:\n        }\n    }\n\n    previewImage(key: string, src: string, width: number, height: number) {\n        const dialogId = `${key}-viewer-dialog`;\n\n        const screenWidth = window.innerWidth - IMAGE_VIEWER_DROPDOWN_PADDING;\n        const screenHeight = window.innerHeight - IMAGE_VIEWER_DROPDOWN_PADDING;\n\n        const adjustSize = this._adjustImageSize(width, height, screenWidth, screenHeight);\n        const dialog = this._dialogService.open({\n            width: Math.max(adjustSize.width, 200),\n            id: dialogId,\n            style: { margin: '0', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' },\n            children: {\n                label: {\n                    name: COMPONENT_IMAGE_VIEWER,\n                    props: {\n                        src,\n                        width: adjustSize.width,\n                        height: adjustSize.height,\n                    },\n                },\n            },\n            destroyOnClose: true,\n            draggable: false,\n            onClose: () => {\n                this._dialogService.close(dialogId);\n                dialog.dispose();\n            },\n        });\n    }\n\n    private _adjustImageSize(nativeWidth: number, nativeHeight: number, screenWidth: number, screenHeight: number) {\n        // Use native size if the image is smaller than the screen\n        if (nativeWidth <= screenWidth && nativeHeight <= screenHeight) {\n            return {\n                width: nativeWidth,\n                height: nativeHeight,\n            };\n        }\n\n        // Calculate scale ratios\n        const widthRatio = screenWidth / nativeWidth;\n        const heightRatio = screenHeight / nativeHeight;\n        const scale = Math.min(widthRatio, heightRatio); // Choose the smaller ratio to ensure the image fits within the screen\n\n        // Return new dimensions\n        return {\n            width: Math.floor(nativeWidth * scale),\n            height: Math.floor(nativeHeight * scale),\n        };\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingParam, Nullable } from '@univerjs/core';\nimport type { IDrawingManagerService, IImageData } from '@univerjs/drawing';\nimport type { BaseObject, Image } from '@univerjs/engine-render';\nimport { DrawingTypeEnum } from '@univerjs/core';\n\nexport function getUpdateParams(objects: Map<string, BaseObject>, drawingManagerService: IDrawingManagerService): Nullable<IDrawingParam>[] {\n    const params: Nullable<IDrawingParam>[] = [];\n    objects.forEach((object) => {\n        const { oKey, left, top, height, width, angle } = object;\n\n        const searchParam = drawingManagerService.getDrawingOKey(oKey);\n\n        if (searchParam == null) {\n            params.push(null);\n            return true;\n        }\n\n        const { unitId, subUnitId, drawingId, drawingType } = searchParam;\n\n        const param = {\n            unitId,\n            subUnitId,\n            drawingId,\n            drawingType,\n            transform: {\n                left,\n                top,\n                height,\n                width,\n                angle,\n            },\n        } as IDrawingParam;\n\n        if (drawingType === DrawingTypeEnum.DRAWING_IMAGE) {\n            (param as IImageData).srcRect = (object as Image).srcRect;\n        }\n\n        params.push(param);\n    });\n\n    return params;\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingParam } from '@univerjs/core';\nimport { LocaleService } from '@univerjs/core';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { useDependency } from '@univerjs/ui';\nimport React, { useEffect, useState } from 'react';\nimport { getUpdateParams } from '../../utils/get-update-params';\nimport { DrawingAlign } from './DrawingAlign';\nimport { DrawingArrange } from './DrawingArrange';\nimport { DrawingGroup } from './DrawingGroup';\nimport { DrawingTransform } from './DrawingTransform';\nimport { ImageCropper } from './ImageCropper';\n\nexport interface IDrawingCommonPanelProps {\n    drawings: IDrawingParam[];\n    hasArrange?: boolean;\n    hasTransform?: boolean;\n    hasAlign?: boolean;\n    hasCropper?: boolean;\n    hasGroup?: boolean;\n}\n\nexport const DrawingCommonPanel = (props: IDrawingCommonPanelProps) => {\n    const drawingManagerService = useDependency(IDrawingManagerService);\n    const renderManagerService = useDependency(IRenderManagerService);\n    const localeService = useDependency(LocaleService);\n\n    const { drawings, hasArrange = true, hasTransform = true, hasAlign = true, hasCropper = true, hasGroup = true } = props;\n\n    const drawingParam = drawings[0];\n\n    if (drawingParam == null) {\n        return;\n    }\n\n    const { unitId } = drawingParam;\n\n    const renderObject = renderManagerService.getRenderById(unitId);\n    const scene = renderObject?.scene;\n    if (scene == null) {\n        return;\n    }\n    const transformer = scene.getTransformerByCreate();\n\n    const [arrangeShow, setArrangeShow] = useState(true);\n    const [transformShow, setTransformShow] = useState(true);\n    const [alignShow, setAlignShow] = useState(false);\n    const [cropperShow, setCropperShow] = useState(true);\n    const [nullShow, setNullShow] = useState(false);\n    // const [groupShow, setGroupShow] = useState(false);\n\n    useEffect(() => {\n        const clearControlSub = transformer.clearControl$.subscribe((changeSelf) => {\n            if (changeSelf === true) {\n                setArrangeShow(false);\n                setTransformShow(false);\n                setAlignShow(false);\n                setCropperShow(false);\n                setNullShow(true);\n            }\n        });\n\n        const changeStartSub = transformer.changeStart$.subscribe((state) => {\n            const { objects } = state;\n            const params = getUpdateParams(objects, drawingManagerService);\n\n            if (params.length === 0) {\n                setArrangeShow(false);\n                setTransformShow(false);\n                setAlignShow(false);\n                setCropperShow(false);\n                setNullShow(true);\n            } else if (params.length === 1) {\n                setArrangeShow(true);\n                setTransformShow(true);\n                setAlignShow(false);\n                setCropperShow(true);\n                setNullShow(false);\n            } else {\n                setArrangeShow(true);\n                setTransformShow(false);\n                setAlignShow(true);\n                setCropperShow(false);\n                setNullShow(false);\n            }\n        });\n\n        const focusSub = drawingManagerService.focus$.subscribe((drawings) => {\n            if (drawings.length === 0) {\n                setArrangeShow(false);\n                setTransformShow(false);\n                setAlignShow(false);\n                setCropperShow(false);\n                setNullShow(true);\n            } else if (drawings.length === 1) {\n                setArrangeShow(true);\n                setTransformShow(true);\n                setAlignShow(false);\n                setCropperShow(true);\n                setNullShow(false);\n            } else {\n                setArrangeShow(true);\n                setTransformShow(false);\n                setAlignShow(true);\n                setCropperShow(false);\n                setNullShow(false);\n            }\n        });\n\n        return () => {\n            changeStartSub.unsubscribe();\n            clearControlSub.unsubscribe();\n            focusSub.unsubscribe();\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <>\n            <div style={{ display: nullShow === true ? 'block' : 'none', height: '100%' }}>\n                <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%', top: '50%', marginTop: '-100px' }}>\n                    <span>\n                        {localeService.t('image-panel.null')}\n                    </span>\n                </div>\n            </div>\n            <DrawingArrange arrangeShow={hasArrange === true ? arrangeShow : false} drawings={drawings} />\n            <DrawingTransform transformShow={hasTransform === true ? transformShow : false} drawings={drawings} />\n            <DrawingAlign alignShow={hasAlign === true ? alignShow : false} drawings={drawings} />\n            <ImageCropper cropperShow={hasCropper === true ? cropperShow : false} drawings={drawings} />\n            <DrawingGroup hasGroup={hasGroup} drawings={drawings} />\n        </>\n    );\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingParam } from '@univerjs/core';\nimport { ICommandService, LocaleService } from '@univerjs/core';\nimport { clsx, Select } from '@univerjs/design';\nimport { useDependency } from '@univerjs/ui';\nimport { useState } from 'react';\nimport { AlignType, SetDrawingAlignOperation } from '../../commands/operations/drawing-align.operation';\nimport styles from './index.module.less';\n\nexport interface IDrawingAlignProps {\n    drawings: IDrawingParam[];\n    alignShow: boolean;\n\n}\n\nexport const DrawingAlign = (props: IDrawingAlignProps) => {\n    const commandService = useDependency(ICommandService);\n    const localeService = useDependency(LocaleService);\n\n    const { alignShow } = props;\n\n    const [alignValue, setAlignValue] = useState<string>(AlignType.default as string);\n    const alignOptions = [\n        {\n            label: localeService.t('image-panel.align.default'),\n            value: AlignType.default,\n        },\n        {\n            options: [\n                {\n                    label: localeService.t('image-panel.align.left'),\n                    value: AlignType.left,\n                },\n                {\n                    label: localeService.t('image-panel.align.center'),\n                    value: AlignType.center,\n                },\n                {\n                    label: localeService.t('image-panel.align.right'),\n                    value: AlignType.right,\n                },\n            ],\n        },\n        {\n            options: [\n                {\n                    label: localeService.t('image-panel.align.top'),\n                    value: AlignType.top,\n                },\n                {\n                    label: localeService.t('image-panel.align.middle'),\n                    value: AlignType.middle,\n                },\n                {\n                    label: localeService.t('image-panel.align.bottom'),\n                    value: AlignType.bottom,\n                },\n            ],\n        },\n        {\n            options: [\n                {\n                    label: localeService.t('image-panel.align.horizon'),\n                    value: AlignType.horizon,\n                },\n                {\n                    label: localeService.t('image-panel.align.vertical'),\n                    value: AlignType.vertical,\n                },\n            ],\n        },\n    ];\n\n    function handleAlignChange(value: string | number | boolean) {\n        setAlignValue((value as string));\n        commandService.executeCommand(SetDrawingAlignOperation.id, {\n            alignType: value as AlignType,\n        });\n    }\n\n    const gridDisplay = (isShow: boolean) => {\n        return isShow ? 'block' : 'none';\n    };\n\n    return (\n        <div className={clsx(styles.imageCommonPanelGrid, styles.imageCommonPanelBorder)} style={{ display: gridDisplay(alignShow) }}>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelTitle)}>\n                    <div>{localeService.t('image-panel.align.title')}</div>\n                </div>\n            </div>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn)}>\n                    <Select value={alignValue} options={alignOptions} onChange={handleAlignChange} />\n                </div>\n            </div>\n        </div>\n    );\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IOperation } from '@univerjs/core';\nimport { CommandType } from '@univerjs/core';\n\nexport enum AlignType {\n    default = '0',\n    left = '1',\n    center = '2',\n    right = '3',\n    top = '4',\n    middle = '5',\n    bottom = '6',\n    horizon = '7',\n    vertical = '8',\n}\n\nexport interface ISetDrawingAlignOperationParams {\n    alignType: AlignType;\n}\n\nexport const SetDrawingAlignOperation: IOperation<ISetDrawingAlignOperationParams> = {\n    id: 'sheet.operation.set-image-align',\n    type: CommandType.OPERATION,\n    handler: (accessor, params) => {\n        return true;\n    },\n};\n", "export default {\n  \"imageCommonPanel\": \"univer-image-common-panel\",\n  \"imageCommonPanelGrid\": \"univer-image-common-panel-grid\",\n  \"imageCommonPanelBorder\": \"univer-image-common-panel-border\",\n  \"imageCommonPanelTitle\": \"univer-image-common-panel-title\",\n  \"imageCommonPanelSubtitle\": \"univer-image-common-panel-subtitle\",\n  \"imageCommonPanelRow\": \"univer-image-common-panel-row\",\n  \"imageCommonPanelRowVertical\": \"univer-image-common-panel-row-vertical\",\n  \"imageCommonPanelColumn\": \"univer-image-common-panel-column\",\n  \"imageCommonPanelColumnCenter\": \"univer-image-common-panel-column-center\",\n  \"imageCommonPanelInline\": \"univer-image-common-panel-inline\",\n  \"imageCommonPanelSpan2\": \"univer-image-common-panel-span2\",\n  \"imageCommonPanelSpan3\": \"univer-image-common-panel-span3\",\n  \"imageCommonPanelInput\": \"univer-image-common-panel-input\"\n};import \"ni:sha-256;ju2yECSWwlw_RW-qUxj4C_rHXzdRKL9wt_MPj-Rt-OA\";", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingParam } from '@univerjs/core';\nimport { ArrangeTypeEnum, LocaleService } from '@univerjs/core';\nimport { Button, clsx } from '@univerjs/design';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { BottomSingle, MoveDownSingle, MoveUpSingle, TopmostSingle } from '@univerjs/icons';\nimport { useDependency } from '@univerjs/ui';\nimport { useEffect, useState } from 'react';\nimport styles from './index.module.less';\n\nexport interface IDrawingArrangeProps {\n    arrangeShow: boolean;\n    drawings: IDrawingParam[];\n}\n\nexport const DrawingArrange = (props: IDrawingArrangeProps) => {\n    const { arrangeShow, drawings: focusDrawings } = props;\n\n    const localeService = useDependency(LocaleService);\n    const drawingManagerService = useDependency(IDrawingManagerService);\n\n    const gridDisplay = (isShow: boolean) => {\n        return isShow ? 'block' : 'none';\n    };\n\n    const [drawings, setDrawings] = useState<IDrawingParam[]>(focusDrawings);\n\n    useEffect(() => {\n        const focusDispose = drawingManagerService.focus$.subscribe((drawings) => {\n            setDrawings(drawings);\n        });\n\n        return () => {\n            focusDispose.unsubscribe();\n        };\n    }, []);\n\n    const onArrangeBtnClick = (arrangeType: ArrangeTypeEnum) => {\n        // commandService.executeCommand(SetDrawingArrangeCommand.id, {\n        //     unitId: drawings[0].unitId,\n        //     subUnitId: drawings[0].subUnitId,\n        //     drawingIds: drawings.map((drawing) => drawing.drawingId),\n        //     arrangeType,\n        // });\n\n        const unitId = drawings[0].unitId;\n        const subUnitId = drawings[0].subUnitId;\n        const drawingIds = drawings.map((drawing) => drawing.drawingId);\n\n        drawingManagerService.featurePluginOrderUpdateNotification({ unitId, subUnitId, drawingIds, arrangeType });\n\n        // if (arrangeType === ArrangeType.forward) {\n        //     drawingManagerService.forwardDrawings(unitId, subUnitId, drawingIds);\n        // } else if (arrangeType === ArrangeType.backward) {\n        //     drawingManagerService.backwardDrawing(unitId, subUnitId, drawingIds);\n        // } else if (arrangeType === ArrangeType.front) {\n        //     drawingManagerService.frontDrawing(unitId, subUnitId, drawingIds);\n        // } else if (arrangeType === ArrangeType.back) {\n        //     drawingManagerService.backDrawing(unitId, subUnitId, drawingIds);\n        // }\n    };\n\n    return (\n        <div className={styles.imageCommonPanelGrid} style={{ display: gridDisplay(arrangeShow) }}>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelTitle)}>\n                    <div>{localeService.t('image-panel.arrange.title')}</div>\n                </div>\n            </div>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2)}>\n                    <Button size=\"small\" onClick={() => { onArrangeBtnClick(ArrangeTypeEnum.forward); }}>\n                        <span className={styles.imageCommonPanelInline}>\n                            <MoveUpSingle />\n                            {localeService.t('image-panel.arrange.forward')}\n                        </span>\n\n                    </Button>\n                </div>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2)}>\n                    <Button size=\"small\" onClick={() => { onArrangeBtnClick(ArrangeTypeEnum.backward); }}>\n                        <span className={styles.imageCommonPanelInline}>\n                            <MoveDownSingle />\n                            {localeService.t('image-panel.arrange.backward')}\n                        </span>\n\n                    </Button>\n                </div>\n            </div>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2)}>\n                    <Button size=\"small\" onClick={() => { onArrangeBtnClick(ArrangeTypeEnum.front); }}>\n                        <span className={styles.imageCommonPanelInline}>\n                            <TopmostSingle />\n                            {localeService.t('image-panel.arrange.front')}\n                        </span>\n\n                    </Button>\n                </div>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2)}>\n                    <Button size=\"small\" onClick={() => { onArrangeBtnClick(ArrangeTypeEnum.back); }}>\n                        <span className={styles.imageCommonPanelInline}>\n                            <BottomSingle />\n                            {localeService.t('image-panel.arrange.back')}\n                        </span>\n\n                    </Button>\n                </div>\n            </div>\n        </div>\n\n    );\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingParam } from '@univerjs/core';\nimport type { IDrawingGroupUpdateParam } from '@univerjs/drawing';\nimport { DrawingTypeEnum, LocaleService, Tools } from '@univerjs/core';\nimport { Button, clsx } from '@univerjs/design';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { getGroupState, IRenderManagerService, transformObjectOutOfGroup } from '@univerjs/engine-render';\nimport { GroupSingle, UngroupSingle } from '@univerjs/icons';\nimport { useDependency } from '@univerjs/ui';\nimport { useEffect, useState } from 'react';\nimport { getUpdateParams } from '../../utils/get-update-params';\n\nimport styles from './index.module.less';\n\nexport interface IDrawingGroupProps {\n    drawings: IDrawingParam[];\n    hasGroup: boolean;\n}\n\nexport const DrawingGroup = (props: IDrawingGroupProps) => {\n    const localeService = useDependency(LocaleService);\n    const renderManagerService = useDependency(IRenderManagerService);\n    const drawingManagerService = useDependency(IDrawingManagerService);\n\n    const { hasGroup, drawings } = props;\n\n    const [groupShow, setGroupShow] = useState(false);\n\n    const [groupBtnShow, setGroupBtnShow] = useState(true);\n    const [ungroupBtnShow, setUngroupBtnShow] = useState(true);\n\n    const gridDisplay = (isShow: boolean) => {\n        return isShow ? 'block' : 'none';\n    };\n\n    const onGroupBtnClick = () => {\n        const focusDrawings = drawingManagerService.getFocusDrawings();\n        const { unitId, subUnitId } = focusDrawings[0];\n        const groupId = Tools.generateRandomId(10);\n        const groupTransform = getGroupState(0, 0, focusDrawings.map((o) => o.transform || {}));\n        const groupParam = {\n            unitId,\n            subUnitId,\n            drawingId: groupId,\n            drawingType: DrawingTypeEnum.DRAWING_GROUP,\n            transform: groupTransform,\n        } as IDrawingParam;\n\n        const children = focusDrawings.map((drawing) => {\n            const transform = drawing.transform || { left: 0, top: 0 };\n            const { unitId, subUnitId, drawingId } = drawing;\n            return {\n                unitId,\n                subUnitId,\n                drawingId,\n                transform: {\n                    ...transform,\n                    left: transform.left! - groupTransform.left,\n                    top: transform.top! - groupTransform.top,\n                },\n                groupId,\n            };\n        }) as IDrawingParam[];\n\n        drawingManagerService.featurePluginGroupUpdateNotification([{\n            parent: groupParam,\n            children,\n        }]);\n    };\n\n    const ungroup = (param: IDrawingParam) => {\n        if (param.drawingType !== DrawingTypeEnum.DRAWING_GROUP) {\n            return;\n        }\n\n        const { unitId, subUnitId, drawingId, transform: groupTransform = { width: 0, height: 0 } } = param;\n\n        if (groupTransform == null) {\n            return;\n        }\n\n        const objects = drawingManagerService.getDrawingsByGroup({ unitId, subUnitId, drawingId });\n\n        if (objects.length === 0) {\n            return;\n        }\n\n        const children = objects.map((object) => {\n            const { transform } = object;\n            const { unitId, subUnitId, drawingId } = object;\n            const newTransform = transformObjectOutOfGroup(transform || {}, groupTransform, groupTransform.width || 0, groupTransform.height || 0);\n            return {\n                unitId,\n                subUnitId,\n                drawingId,\n                transform: {\n                    ...transform,\n                    ...newTransform,\n                },\n                groupId: undefined,\n            };\n        });\n\n        return {\n            parent: param,\n            children,\n        } as IDrawingGroupUpdateParam;\n    };\n\n    const onUngroupBtnClick = () => {\n        const focusDrawings = drawingManagerService.getFocusDrawings();\n        const params = focusDrawings.map((drawing) =>\n            ungroup(drawing)\n        ).filter((o) => o != null) as IDrawingGroupUpdateParam[];\n\n        if (params.length === 0) {\n            return;\n        }\n\n        drawingManagerService.featurePluginUngroupUpdateNotification(params);\n    };\n\n    useEffect(() => {\n        const drawingParam = drawings[0];\n\n        if (drawingParam == null) {\n            return;\n        }\n\n        const { unitId } = drawingParam;\n\n        const renderObject = renderManagerService.getRenderById(unitId);\n        const scene = renderObject?.scene;\n        if (scene == null) {\n            return;\n        }\n        const transformer = scene.getTransformerByCreate();\n\n        const onClearControlObserver = transformer.clearControl$.subscribe((changeSelf) => {\n            if (changeSelf === true) {\n                setGroupShow(false);\n            }\n        });\n\n        const onChangeStartObserver = transformer.changeStart$.subscribe((state) => {\n            const { objects } = state;\n            const params = getUpdateParams(objects, drawingManagerService);\n            const groupParams = params.filter((o) => o?.drawingType === DrawingTypeEnum.DRAWING_GROUP) as IDrawingParam[];\n\n            let groupBtnShow = false;\n            let ungroupBtnShow = false;\n\n            if (params.length > 1) {\n                groupBtnShow = true;\n            }\n\n            if (groupParams.length > 0) {\n                ungroupBtnShow = true;\n            }\n\n            const groupShow = groupBtnShow || ungroupBtnShow;\n\n            setGroupShow(groupShow);\n            setGroupBtnShow(groupBtnShow);\n            setUngroupBtnShow(ungroupBtnShow);\n        });\n\n        return () => {\n            onChangeStartObserver.unsubscribe();\n            onClearControlObserver.unsubscribe();\n        };\n    }, []);\n\n    return (\n        <div className={clsx(styles.imageCommonPanelGrid, styles.imageCommonPanelBorder)} style={{ display: gridDisplay(hasGroup === true ? groupShow : false) }}>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelTitle)}>\n                    <div>{localeService.t('image-panel.group.title')}</div>\n                </div>\n            </div>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2, styles.imageCommonPanelColumnCenter)}>\n                    <Button size=\"small\" onClick={() => { onGroupBtnClick(); }} style={{ display: gridDisplay(groupBtnShow) }}>\n                        <span className={styles.imageCommonPanelInline}>\n                            <GroupSingle />\n                            {localeService.t('image-panel.group.group')}\n                        </span>\n                    </Button>\n                </div>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2, styles.imageCommonPanelColumnCenter)}>\n                    <Button size=\"small\" onClick={() => { onUngroupBtnClick(); }} style={{ display: gridDisplay(ungroupBtnShow) }}>\n                        <span className={styles.imageCommonPanelInline}>\n                            <UngroupSingle />\n                            {localeService.t('image-panel.group.unGroup')}\n                        </span>\n                    </Button>\n                </div>\n            </div>\n        </div>\n    );\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingParam, Nullable } from '@univerjs/core';\nimport type { IChangeObserverConfig, Scene } from '@univerjs/engine-render';\nimport { debounce, LocaleService } from '@univerjs/core';\nimport { Checkbox, clsx, InputNumber } from '@univerjs/design';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { useDependency } from '@univerjs/ui';\nimport { useEffect, useState } from 'react';\nimport { MIN_DRAWING_HEIGHT_LIMIT, MIN_DRAWING_WIDTH_LIMIT, RANGE_DRAWING_ROTATION_LIMIT } from '../../utils/config';\nimport { getUpdateParams } from '../../utils/get-update-params';\nimport styles from './index.module.less';\n\nexport interface IDrawingTransformProps {\n    transformShow: boolean;\n    drawings: IDrawingParam[];\n}\n\nconst INPUT_DEBOUNCE_TIME = 300;\n\nexport const DrawingTransform = (props: IDrawingTransformProps) => {\n    const localeService = useDependency(LocaleService);\n    const drawingManagerService = useDependency(IDrawingManagerService);\n    const renderManagerService = useDependency(IRenderManagerService);\n\n    const { drawings, transformShow } = props;\n\n    const drawingParam = drawings[0];\n\n    if (drawingParam == null) {\n        return;\n    }\n\n    const transform = drawingParam.transform;\n    if (transform == null) {\n        return;\n    }\n\n    const { unitId, subUnitId, drawingId, drawingType } = drawingParam;\n\n    const renderObject = renderManagerService.getRenderById(unitId);\n    const scene = renderObject?.scene;\n    if (scene == null) {\n        return;\n    }\n\n    const topScene = scene.getEngine()?.activeScene as Nullable<Scene>;\n    if (topScene == null) {\n        return;\n    }\n\n    const transformer = scene.getTransformerByCreate();\n\n    const {\n        width: originWidth = 0,\n        height: originHeight = 0,\n        left: originX = 0,\n        top: originY = 0,\n        angle: originRotation = 0,\n    } = transform;\n\n    const [width, setWidth] = useState<number>(originWidth);\n    const [height, setHeight] = useState(originHeight);\n    const [xPosition, setXPosition] = useState(originX);\n    const [yPosition, setYPosition] = useState(originY);\n    const [rotation, setRotation] = useState(originRotation);\n    const [lockRatio, setLockRatio] = useState(transformer.keepRatio);\n\n    const checkMoveBoundary = (left: number, top: number, width: number, height: number) => {\n        const { width: topSceneWidth, height: topSceneHeight } = topScene;\n        const { ancestorLeft, ancestorTop } = scene;\n\n        let limitLeft = left;\n        let limitTop = top;\n        let limitWidth = width;\n        let limitHeight = height;\n\n        if (left + ancestorLeft < 0) {\n            limitLeft = -ancestorLeft;\n        }\n\n        if (top + ancestorTop < 0) {\n            limitTop = -ancestorTop;\n        }\n\n        limitWidth = topSceneWidth - limitLeft - ancestorLeft;\n\n        if (limitWidth < MIN_DRAWING_WIDTH_LIMIT) {\n            limitWidth = MIN_DRAWING_WIDTH_LIMIT;\n        }\n\n        limitHeight = topSceneHeight - limitTop - ancestorTop;\n\n        if (limitHeight < MIN_DRAWING_WIDTH_LIMIT) {\n            limitHeight = MIN_DRAWING_WIDTH_LIMIT;\n        }\n\n        if (left + limitWidth + ancestorLeft > topSceneWidth) {\n            limitLeft = topSceneWidth - width - ancestorLeft;\n        }\n\n        if (top + limitHeight + ancestorTop > topSceneHeight) {\n            limitTop = topSceneHeight - height - ancestorTop;\n        }\n\n        return {\n            limitLeft,\n            limitTop,\n            limitWidth,\n            limitHeight,\n        };\n    };\n\n    const changeObs = (state: IChangeObserverConfig) => {\n        const { objects } = state;\n        const params = getUpdateParams(objects, drawingManagerService);\n\n        if (params.length !== 1) {\n            return;\n        }\n\n        const drawingParam = params[0];\n\n        if (drawingParam == null) {\n            return;\n        }\n\n        const { transform } = drawingParam;\n\n        if (transform == null) {\n            return;\n        }\n\n        const {\n            width: originWidth,\n            height: originHeight,\n            left: originX,\n            top: originY,\n            angle: originRotation,\n        } = transform;\n\n        if (originWidth != null) {\n            setWidth(originWidth);\n        }\n\n        if (originHeight != null) {\n            setHeight(originHeight);\n        }\n\n        if (originX != null) {\n            setXPosition(originX);\n        }\n\n        if (originY != null) {\n            setYPosition(originY);\n        }\n\n        if (originRotation != null) {\n            setRotation(originRotation);\n        }\n    };\n\n    useEffect(() => {\n        const subscriptions = [\n            transformer.changeStart$.subscribe((state) => {\n                changeObs(state);\n            }),\n            transformer.changing$.subscribe((state) => {\n                changeObs(state);\n            }),\n            transformer.changeEnd$.subscribe((state) => {\n                changeObs(state);\n            }),\n            drawingManagerService.focus$.subscribe((drawings) => {\n                if (drawings.length !== 1) {\n                    return;\n                }\n\n                const drawingParam = drawingManagerService.getDrawingByParam(drawings[0]);\n\n                if (drawingParam == null) {\n                    return;\n                }\n\n                const transform = drawingParam.transform;\n\n                if (transform == null) {\n                    return;\n                }\n\n                const {\n                    width: originWidth,\n                    height: originHeight,\n                    left: originX,\n                    top: originY,\n                    angle: originRotation,\n                } = transform;\n\n                if (originWidth != null) {\n                    setWidth(originWidth);\n                }\n\n                if (originHeight != null) {\n                    setHeight(originHeight);\n                }\n\n                if (originX != null) {\n                    setXPosition(originX);\n                }\n\n                if (originY != null) {\n                    setYPosition(originY);\n                }\n\n                if (originRotation != null) {\n                    setRotation(originRotation);\n                }\n            }),\n        ];\n\n        return () => {\n            subscriptions.forEach((sub) => sub.unsubscribe());\n        };\n    }, []);\n\n    const handleWidthChange = debounce((val: number | null) => {\n        if (val == null) {\n            return;\n        }\n\n        val = Math.max(val, MIN_DRAWING_WIDTH_LIMIT);\n\n        const { limitWidth, limitHeight } = checkMoveBoundary(xPosition, yPosition, val, height);\n\n        val = Math.min(val, limitWidth);\n\n        const updateParam: IDrawingParam = { unitId, subUnitId, drawingId, drawingType, transform: { width: val } };\n\n        if (lockRatio) {\n            let heightFix = (val / width) * height;\n            heightFix = Math.max(heightFix, MIN_DRAWING_HEIGHT_LIMIT);\n            if (heightFix > limitHeight) {\n                return;\n            }\n            setHeight(heightFix);\n            updateParam.transform!.height = heightFix;\n        }\n\n        setWidth(val);\n\n        drawingManagerService.featurePluginUpdateNotification([updateParam]);\n\n        transformer.refreshControls().changeNotification();\n    }, INPUT_DEBOUNCE_TIME);\n\n    const handleHeightChange = debounce((val: number | null) => {\n        if (val == null) {\n            return;\n        }\n        val = Math.max(val, MIN_DRAWING_WIDTH_LIMIT);\n\n        const { limitHeight, limitWidth } = checkMoveBoundary(xPosition, yPosition, width, val);\n\n        val = Math.min(val, limitHeight); ;\n\n        const updateParam: IDrawingParam = { unitId, subUnitId, drawingId, drawingType, transform: { height: val } };\n\n        if (lockRatio) {\n            let widthFix = (val / height) * width;\n            widthFix = Math.max(widthFix, MIN_DRAWING_WIDTH_LIMIT);\n            if (widthFix > limitWidth) {\n                return;\n            }\n            setWidth(widthFix);\n            updateParam.transform!.width = widthFix;\n        }\n\n        setHeight(val);\n\n        drawingManagerService.featurePluginUpdateNotification([updateParam]);\n\n        transformer.refreshControls().changeNotification();\n    }, INPUT_DEBOUNCE_TIME);\n\n    const handleXChange = debounce((val: number | null) => {\n        if (val == null) {\n            return;\n        }\n\n        const { limitLeft } = checkMoveBoundary(val, yPosition, width, height);\n\n        val = limitLeft;\n\n        const updateParam: IDrawingParam = { unitId, subUnitId, drawingId, drawingType, transform: { left: val } };\n\n        setXPosition(val);\n\n        drawingManagerService.featurePluginUpdateNotification([updateParam]);\n\n        transformer.refreshControls().changeNotification();\n    }, INPUT_DEBOUNCE_TIME);\n\n    const handleYChange = debounce((val: number | null) => {\n        if (val == null) {\n            return;\n        }\n\n        const { limitTop } = checkMoveBoundary(xPosition, val, width, height);\n\n        val = limitTop;\n\n        const updateParam: IDrawingParam = { unitId, subUnitId, drawingId, drawingType, transform: { top: val } };\n\n        setYPosition(val);\n\n        drawingManagerService.featurePluginUpdateNotification([updateParam]);\n\n        transformer.refreshControls().changeNotification();\n    }, INPUT_DEBOUNCE_TIME);\n\n    const handleRotationChange = (val: number | null) => {\n        if (val == null) {\n            return;\n        }\n\n        const [min, max] = RANGE_DRAWING_ROTATION_LIMIT;\n\n        if (val < min) {\n            val = min;\n        }\n\n        if (val > max) {\n            val = max;\n        }\n\n        const updateParam: IDrawingParam = { unitId, subUnitId, drawingId, drawingType, transform: { angle: val } };\n\n        setRotation(val);\n\n        drawingManagerService.featurePluginUpdateNotification([updateParam]);\n\n        transformer.refreshControls().changeNotification();\n    };\n\n    const handleLockRatioChange = (val: string | number | boolean) => {\n        setLockRatio(val as boolean);\n        transformer.keepRatio = val as boolean;\n    };\n\n    const gridDisplay = (isShow: boolean) => {\n        return isShow ? 'block' : 'none';\n    };\n\n    return (\n        <div className={clsx(styles.imageCommonPanelGrid, styles.imageCommonPanelBorder)} style={{ display: gridDisplay(transformShow) }}>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelTitle)}>\n                    <div>{localeService.t('image-panel.transform.title')}</div>\n                </div>\n            </div>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan3)}>\n                    <label>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                {localeService.t('image-panel.transform.width')}\n                            </div>\n                        </div>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                <InputNumber precision={1} value={width} onChange={(val) => { handleWidthChange(val); }} className={styles.imageCommonPanelInput} />\n                            </div>\n                        </div>\n                    </label>\n                </div>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan3)}>\n                    <label>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                {localeService.t('image-panel.transform.height')}\n                            </div>\n                        </div>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                <InputNumber precision={1} value={height} onChange={(val) => { handleHeightChange(val); }} className={styles.imageCommonPanelInput} />\n                            </div>\n                        </div>\n                    </label>\n                </div>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan3)}>\n                    <label>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                {localeService.t('image-panel.transform.lock')}\n                            </div>\n                        </div>\n                        <div className={clsx(styles.imageCommonPanelRow, styles.imageCommonPanelRowVertical)}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                <Checkbox checked={lockRatio} onChange={handleLockRatioChange} />\n                            </div>\n                        </div>\n                    </label>\n                </div>\n            </div>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan3)}>\n                    <label>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                {localeService.t('image-panel.transform.x')}\n                            </div>\n                        </div>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                <InputNumber precision={1} value={xPosition} onChange={(val) => { handleXChange(val); }} className={styles.imageCommonPanelInput} />\n                            </div>\n                        </div>\n                    </label>\n                </div>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan3)}>\n                    <label>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                {localeService.t('image-panel.transform.y')}\n                            </div>\n                        </div>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                <InputNumber precision={1} value={yPosition} onChange={(val) => { handleYChange(val); }} className={styles.imageCommonPanelInput} />\n                            </div>\n                        </div>\n                    </label>\n                </div>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan3)}>\n                    <label>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                {localeService.t('image-panel.transform.rotate')}\n                            </div>\n                        </div>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                <InputNumber precision={1} value={rotation} onChange={handleRotationChange} className={styles.imageCommonPanelInput} />\n                            </div>\n                        </div>\n                    </label>\n                </div>\n            </div>\n        </div>\n\n    );\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const MIN_DRAWING_WIDTH_LIMIT = 20;\n\nexport const MIN_DRAWING_HEIGHT_LIMIT = 20;\n\nexport const RANGE_DRAWING_ROTATION_LIMIT = [-3600, 3600];\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingParam } from '@univerjs/core';\nimport { ICommandService, LocaleService } from '@univerjs/core';\nimport { Button, clsx, Select } from '@univerjs/design';\nimport { CreateCopySingle } from '@univerjs/icons';\nimport { useDependency } from '@univerjs/ui';\nimport { useEffect, useRef, useState } from 'react';\nimport { AutoImageCropOperation, CloseImageCropOperation, CropType } from '../../commands/operations/image-crop.operation';\nimport styles from './index.module.less';\n\nexport interface IImageCropperProps {\n    drawings: IDrawingParam[];\n    cropperShow: boolean;\n}\n\nexport const ImageCropper = (props: IImageCropperProps) => {\n    const commandService = useDependency(ICommandService);\n    const localeService = useDependency(LocaleService);\n\n    const { drawings, cropperShow } = props;\n\n    const drawingParam = drawings[0];\n\n    if (drawingParam == null) {\n        return;\n    }\n\n    const [cropValue, setCropValue] = useState<string>(CropType.FREE as string);\n\n    const cropStateRef = useRef(false);\n\n    const cropOptions = [\n        {\n            label: localeService.t('image-panel.crop.mode'),\n            value: CropType.FREE,\n        },\n        {\n            label: '1:1',\n            value: CropType.R1_1,\n        },\n        {\n            label: '16:9',\n            value: CropType.R16_9,\n        },\n        {\n            label: '9:16',\n            value: CropType.R9_16,\n        },\n        {\n            label: '5:4',\n            value: CropType.R5_4,\n        },\n        {\n            label: '4:5',\n            value: CropType.R4_5,\n        },\n        {\n            label: '4:3',\n            value: CropType.R4_3,\n        },\n        {\n            label: '3:4',\n            value: CropType.R3_4,\n        },\n        {\n            label: '3:2',\n            value: CropType.R3_2,\n        },\n        {\n            label: '2:3',\n            value: CropType.R2_3,\n        },\n    ];\n\n    useEffect(() => {\n        const onChangeStartObserver = commandService.onCommandExecuted((command) => {\n            if (command.id === CloseImageCropOperation.id) {\n                const params = command.params as { isAuto?: boolean };\n                if (!params?.isAuto) {\n                    cropStateRef.current = false;\n                }\n            }\n        });\n\n        return () => {\n            onChangeStartObserver?.dispose();\n        };\n    }, []);\n\n    function handleCropChange(value: string | number | boolean) {\n        setCropValue((value as string));\n        if (cropStateRef.current) {\n            commandService.executeCommand(AutoImageCropOperation.id, {\n                cropType: value as CropType,\n            });\n        }\n    }\n\n    const gridDisplay = (isShow: boolean) => {\n        return isShow ? 'block' : 'none';\n    };\n\n    const onCropperBtnClick = (val: CropType) => {\n        commandService.executeCommand(AutoImageCropOperation.id, {\n            cropType: val,\n        });\n        cropStateRef.current = true;\n    };\n\n    return (\n        <div className={clsx(styles.imageCommonPanelGrid, styles.imageCommonPanelBorder)} style={{ display: gridDisplay(cropperShow) }}>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelTitle)}>\n                    <div>{localeService.t('image-panel.crop.title')}</div>\n                </div>\n            </div>\n            <div className={clsx(styles.imageCommonPanelRow, styles.imageCommonPanelRowVertical)}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2)}>\n                    <Button size=\"small\" onClick={() => { onCropperBtnClick(cropValue as CropType); }}>\n                        <span className={styles.imageCommonPanelInline}>\n                            <CreateCopySingle />\n                            {localeService.t('image-panel.crop.start')}\n                        </span>\n                    </Button>\n                </div>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2)}>\n                    <Select value={cropValue} options={cropOptions} onChange={handleCropChange} />\n                </div>\n            </div>\n        </div>\n    );\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingSearch, IOperation } from '@univerjs/core';\nimport { CommandType } from '@univerjs/core';\n\nexport const OpenImageCropOperation: IOperation<IDrawingSearch> = {\n    id: 'sheet.operation.open-image-crop',\n    type: CommandType.OPERATION,\n    handler: (accessor, params) => {\n        return true;\n    },\n};\n\nexport const CloseImageCropOperation: IOperation<{ isAuto?: boolean }> = {\n    id: 'sheet.operation.close-image-crop',\n    type: CommandType.OPERATION,\n    handler: (accessor, params) => {\n        return true;\n    },\n};\n\nexport enum CropType {\n    FREE = '0',\n    R1_1 = '1',\n    R16_9 = '2',\n    R9_16 = '3',\n    R5_4 = '4',\n    R4_5 = '5',\n    R4_3 = '6',\n    R3_4 = '7',\n    R3_2 = '8',\n    R2_3 = '9',\n}\n\nexport interface IOpenImageCropOperationBySrcRectParams {\n    cropType: CropType;\n}\n\nexport const AutoImageCropOperation: IOperation<IOpenImageCropOperationBySrcRectParams> = {\n    id: 'sheet.operation.Auto-image-crop',\n    type: CommandType.OPERATION,\n    handler: (accessor, params) => {\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingSearch } from '@univerjs/core';\nimport { ICommandService, LocaleService } from '@univerjs/core';\nimport { clsx, DropdownMenu } from '@univerjs/design';\nimport { Autofill, MoreDownSingle } from '@univerjs/icons';\nimport { useDependency } from '@univerjs/ui';\nimport React, { useState } from 'react';\n\nexport interface IImagePopupMenuItem {\n    label: string;\n    index: number;\n    commandId: string;\n    commandParams?: IDrawingSearch[];\n    disable: boolean;\n}\n\nexport interface IImagePopupMenuExtraProps {\n    menuItems: IImagePopupMenuItem[];\n}\n\nexport interface IImagePopupMenuProps {\n    popup: {\n        extraProps?: IImagePopupMenuExtraProps;\n    };\n}\n\nexport const ImagePopupMenu: React.FC<IImagePopupMenuProps> = (props: IImagePopupMenuProps) => {\n    const { popup } = props;\n\n    const menuItems = popup?.extraProps?.menuItems;\n\n    if (!menuItems) return null;\n\n    const commandService = useDependency(ICommandService);\n    const localeService = useDependency(LocaleService);\n\n    const [visible, setVisible] = useState(false);\n    const [isHovered, setHovered] = useState(false);\n\n    const handleMouseEnter = () => {\n        setHovered(true);\n    };\n\n    const handleMouseLeave = () => {\n        setHovered(false);\n    };\n\n    const onVisibleChange = (visible: boolean) => {\n        setVisible(visible);\n    };\n\n    const handleClick = (item: IImagePopupMenuItem) => {\n        commandService.executeCommand(item.commandId, item.commandParams);\n        setVisible(false);\n    };\n\n    const showMore = visible || isHovered;\n\n    const availableMenu = menuItems.filter((item) => !item.disable);\n\n    return (\n        <div\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n        >\n            <DropdownMenu\n                align=\"start\"\n                items={availableMenu.map((item) => ({\n                    type: 'item',\n                    children: localeService.t(item.label),\n                    onSelect: () => handleClick(item),\n                }))}\n                open={visible}\n                onOpenChange={onVisibleChange}\n            >\n                <div\n                    className={clsx(`\n                      univer-flex univer-items-center univer-gap-2 univer-rounded univer-border univer-border-solid\n                      univer-border-gray-200 univer-p-1\n                      hover:univer-bg-gray-100\n                    `, {\n                        'univer-bg-gray-100': visible,\n                        'univer-bg-white': !visible,\n                    })}\n                >\n                    <Autofill\n                        style={{ color: '#35322B' }}\n                        extend={{ colorChannel1: 'rgb(var(--green-700, #409f11))' }}\n                    />\n                    {showMore && <MoreDownSingle className=\"univer-text-[10px] univer-text-gray-400\" />}\n                </div>\n            </DropdownMenu>\n        </div>\n    );\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const COMPONENT_IMAGE_POPUP_MENU = 'COMPONENT_IMAGE_POPUP_MENU';\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { MenuConfig } from '@univerjs/ui';\n\nexport const DRAWING_UI_PLUGIN_CONFIG_KEY = 'drawing-ui.config';\n\nexport const configSymbol = Symbol(DRAWING_UI_PLUGIN_CONFIG_KEY);\n\nexport interface IUniverDrawingUIConfig {\n    menu?: MenuConfig;\n}\n\nexport const defaultPluginConfig: IUniverDrawingUIConfig = {};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommandType, type IDrawingSearch, type IOperation } from '@univerjs/core';\n\nexport const ImageResetSizeOperation: IOperation<IDrawingSearch[]> = {\n    id: 'sheet.operation.image-reset-size',\n    type: CommandType.OPERATION,\n    handler: (accessor, params) => {\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Nullable } from '@univerjs/core';\nimport React from 'react';\n\nexport interface IImageViewerProps {\n    src: Nullable<string>;\n}\n\nexport const ImageViewer: React.FC<IImageViewerProps> = (props: IImageViewerProps) => {\n    const { src } = props;\n\n    if (!src) {\n        return null;\n    }\n\n    return (\n        <div>\n            <img src={src} alt=\"Univer Image Viewer\" style={{ width: '100%', height: '100%', position: 'relative' }} />\n        </div>\n    );\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Disposable, ICommandService, Inject } from '@univerjs/core';\nimport { ComponentManager } from '@univerjs/ui';\nimport { SetDrawingAlignOperation } from '../commands/operations/drawing-align.operation';\nimport { AutoImageCropOperation, CloseImageCropOperation, OpenImageCropOperation } from '../commands/operations/image-crop.operation';\nimport { ImageResetSizeOperation } from '../commands/operations/image-reset-size.operation';\nimport { COMPONENT_IMAGE_POPUP_MENU } from '../views/image-popup-menu/component-name';\nimport { ImagePopupMenu } from '../views/image-popup-menu/ImagePopupMenu';\nimport { COMPONENT_IMAGE_VIEWER } from '../views/image-viewer/component-name';\nimport { ImageViewer } from '../views/image-viewer/ImageViewer';\n\nexport class DrawingUIController extends Disposable {\n    constructor(\n        @Inject(ComponentManager) private readonly _componentManager: ComponentManager,\n        @ICommandService private readonly _commandService: ICommandService\n    ) {\n        super();\n\n        this._init();\n    }\n\n    private _initCustomComponents(): void {\n        const componentManager = this._componentManager;\n        this.disposeWithMe(componentManager.register(COMPONENT_IMAGE_POPUP_MENU, ImagePopupMenu));\n        this.disposeWithMe(componentManager.register(COMPONENT_IMAGE_VIEWER, ImageViewer));\n    }\n\n    private _initCommands() {\n        [\n            OpenImageCropOperation,\n            CloseImageCropOperation,\n            ImageResetSizeOperation,\n            SetDrawingAlignOperation,\n            AutoImageCropOperation,\n        ].forEach((command) => this.disposeWithMe(this._commandService.registerCommand(command)));\n    }\n\n    private _init(): void {\n        this._initCommands();\n        this._initCustomComponents();\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DrawingTypeEnum, ICommandInfo, IDrawingParam, IDrawingSearch, ITransformState, Nullable } from '@univerjs/core';\nimport type { IDrawingGroupUpdateParam, IDrawingOrderMapParam } from '@univerjs/drawing';\nimport type { BaseObject, Image, IShapeProps, Scene, Shape } from '@univerjs/engine-render';\nimport type { ISetDrawingAlignOperationParams } from '../commands/operations/drawing-align.operation';\nimport {\n    checkIfMove,\n    Disposable,\n    ICommandService,\n    IUniverInstanceService,\n    toDisposable,\n} from '@univerjs/core';\nimport { getDrawingShapeKeyByDrawingSearch, IDrawingManagerService, SetDrawingSelectedOperation } from '@univerjs/drawing';\nimport { DRAWING_OBJECT_LAYER_INDEX, Group, IRenderManagerService, RENDER_CLASS_TYPE } from '@univerjs/engine-render';\nimport { AlignType, SetDrawingAlignOperation } from '../commands/operations/drawing-align.operation';\nimport { CloseImageCropOperation } from '../commands/operations/image-crop.operation';\nimport { getUpdateParams } from '../utils/get-update-params';\nimport { getCurrentUnitInfo } from './utils';\n\ninterface IDrawingTransformCache {\n    unitId: string;\n    subUnitId: string;\n    drawingId: string;\n    drawingType: DrawingTypeEnum;\n    transform: ITransformState;\n}\n\nexport class DrawingUpdateController extends Disposable {\n    constructor(\n        @IUniverInstanceService private readonly _currentUniverService: IUniverInstanceService,\n        @ICommandService private readonly _commandService: ICommandService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService,\n        @IDrawingManagerService private readonly _drawingManagerService: IDrawingManagerService\n    ) {\n        super();\n\n        this._initialize();\n    }\n\n    override dispose(): void {\n        super.dispose();\n    }\n\n    private _initialize() {\n        this._recoveryImages();\n\n        this._drawingAddListener();\n\n        this._drawingRemoveListener();\n\n        this._drawingUpdateListener();\n\n        this._commandExecutedListener();\n\n        this._drawingArrangeListener();\n\n        this._drawingGroupListener();\n\n        this._drawingRefreshListener();\n\n        this._drawingVisibleListener();\n    }\n\n    private _recoveryImages() {\n        const drawingList = this._drawingManagerService.drawingManagerData;\n\n        const info = getCurrentUnitInfo(this._currentUniverService);\n        if (info == null) {\n            return;\n        }\n\n        const { unitId: currentUnitId, subUnitId: currentSubUnitId } = info;\n\n        Object.keys(drawingList).forEach((unitId) => {\n            Object.keys(drawingList[unitId]).forEach((subUnitId) => {\n                const drawingMap = drawingList[unitId][subUnitId].data;\n                if (drawingMap == null || unitId !== currentUnitId || subUnitId !== currentSubUnitId) {\n                    return;\n                }\n                Object.keys(drawingMap).forEach((drawingId) => {\n                    const drawing = drawingMap[drawingId];\n                    if (drawing) {\n                        this._insertDrawing([{ unitId, subUnitId, drawingId }]);\n                    }\n                });\n            });\n        });\n    }\n\n    private _commandExecutedListener() {\n        this.disposeWithMe(\n            this._commandService.onCommandExecuted((command: ICommandInfo) => {\n                if (command.id === SetDrawingAlignOperation.id) {\n                    const params = command.params as ISetDrawingAlignOperationParams;\n                    if (params == null) {\n                        return;\n                    }\n                    this._drawingAlign(params);\n                }\n            })\n        );\n    }\n\n    private _drawingGroupListener() {\n        this.disposeWithMe(\n            this._drawingManagerService.group$.subscribe((params) => {\n                this._groupDrawings(params);\n            })\n        );\n\n        this.disposeWithMe(\n            this._drawingManagerService.ungroup$.subscribe((params) => {\n                this._ungroupDrawings(params);\n            })\n        );\n    }\n\n    // private _drawingGroup(params: ISetImageGroupOperationParams) {\n    //     const { groupType } = params;\n    //     const drawings = this._drawingManagerService.getFocusDrawings();\n\n    //     if (drawings.length === 0) {\n    //         return;\n    //     }\n\n    //     switch (groupType) {\n    //         case GroupType.group:\n    //             this._groupDrawings(drawings);\n    //             break;\n    //         case GroupType.regroup:\n    //             this._regroupDrawings(drawings);\n    //             break;\n    //         case GroupType.ungroup:\n    //             this._ungroupDrawings(drawings);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    // }\n\n    private _getSceneAndTransformerByDrawingSearch(unitId: Nullable<string>) {\n        if (unitId == null) {\n            return;\n        }\n\n        const renderObject = this._renderManagerService.getRenderById(unitId);\n\n        const scene = renderObject?.scene;\n\n        if (scene == null) {\n            return null;\n        }\n\n        const transformer = scene.getTransformerByCreate();\n\n        return { scene, transformer };\n    }\n\n    private _groupDrawings(drawings: IDrawingGroupUpdateParam[]) {\n        drawings.forEach((drawing) => {\n            this._groupDrawing(drawing);\n        });\n    }\n\n    private _groupDrawing(params: IDrawingGroupUpdateParam) {\n        const { parent, children } = params;\n\n        const { unitId, subUnitId, drawingId } = parent;\n\n        const renderObject = this._getSceneAndTransformerByDrawingSearch(parent.unitId);\n\n        if (renderObject == null) {\n            return;\n        }\n\n        const { scene, transformer } = renderObject;\n\n        this._commandService.syncExecuteCommand(CloseImageCropOperation.id);\n\n        const objects: BaseObject[] = [];\n\n        children.forEach((drawing) => {\n            const drawingShapeKey = getDrawingShapeKeyByDrawingSearch(drawing);\n            const object = scene.getObjectIncludeInGroup(drawingShapeKey);\n\n            if (object == null || objects.includes(object)) {\n                return;\n            }\n\n            objects.push(object);\n\n            const { transform } = drawing;\n\n            if (transform == null) {\n                return;\n            }\n\n            if (object.classType === RENDER_CLASS_TYPE.GROUP) {\n                object.transformByState({ left: transform.left, top: transform.top });\n            } else {\n                object.transformByState(transform);\n            }\n\n            // const group = object?.ancestorGroup;\n            // if (group != null && objects.includes(group) === false) {\n            //     objects.push(group);\n            // } else if (object != null && objects.includes(object) === false) {\n            //     objects.push(object);\n            // }\n        });\n\n        if (objects.length === 0) {\n            return;\n        }\n\n        const groupKey = getDrawingShapeKeyByDrawingSearch({ unitId, subUnitId, drawingId });\n        const group = new Group(groupKey);\n\n        scene.addObject(group, DRAWING_OBJECT_LAYER_INDEX).attachTransformerTo(group);\n\n        group.addObjects(...objects);\n        // group.reCalculateObjects();\n        parent.transform && group.transformByState({ left: parent.transform.left, top: parent.transform.top });\n\n        transformer.clearSelectedObjects();\n        transformer.setSelectedControl(group);\n    }\n\n    // private _regroupDrawings(drawings: IDrawingSearch[]) {\n    //     const renderObject = this._getSceneAndTransformerByDrawingSearch(drawings[0].unitId);\n\n    //     if (renderObject == null) {\n    //         return;\n    //     }\n\n    //     const { scene, transformer } = renderObject;\n\n    //     const objects: BaseObject[] = [];\n\n    //     let firstGroup: Nullable<Group> = null;\n\n    //     drawings.forEach((drawing) => {\n    //         const imageShapeKey = getDrawingShapeKeyByDrawingSearch(drawing);\n    //         const o = scene.getObject(imageShapeKey);\n\n    //         if (o == null) {\n    //             return true;\n    //         }\n\n    //         const group = o.ancestorGroup as Nullable<Group>;\n\n    //         if (group != null && firstGroup == null) {\n    //             firstGroup = group;\n    //         } else if (group != null && !objects.includes(group)) {\n    //             objects.push(group);\n    //         } else if (!objects.includes(o)) {\n    //             objects.push(o);\n    //         }\n    //     });\n\n    //     if (firstGroup == null) {\n    //         return;\n    //     }\n\n    //     if (objects.length === 0) {\n    //         return;\n    //     }\n\n    //     (firstGroup as Group).addObjects(...objects);\n\n    //     (firstGroup as Group).reCalculateObjects();\n\n    //     transformer.clearSelectedObjects();\n\n    //     transformer.setSelectedControl(firstGroup);\n    // }\n\n    private _ungroupDrawings(drawings: IDrawingGroupUpdateParam[]) {\n        drawings.forEach((drawing) => {\n            this._ungroupDrawing(drawing);\n        });\n    }\n\n    private _ungroupDrawing(drawing: IDrawingGroupUpdateParam) {\n        const { parent, children } = drawing;\n\n        const renderObject = this._getSceneAndTransformerByDrawingSearch(parent.unitId);\n\n        if (renderObject == null) {\n            return;\n        }\n\n        const { scene, transformer } = renderObject;\n\n        // const objects: BaseObject[] = [];\n\n        children.forEach((drawing) => {\n            const drawingKey = getDrawingShapeKeyByDrawingSearch(drawing);\n            const object = scene.getObjectIncludeInGroup(drawingKey);\n\n            if (object == null) {\n                return true;\n            }\n\n            if (object == null) {\n                return;\n            }\n\n            // objects.push(object);\n\n            const { transform } = drawing;\n\n            if (transform == null) {\n                return;\n            }\n\n            if (object.classType === RENDER_CLASS_TYPE.GROUP) {\n                object.transformByState({ left: transform.left, top: transform.top });\n            } else {\n                object.transformByState(transform);\n            }\n\n            // transform && object.transformByState(transform);\n\n            // const group = o.ancestorGroup as Nullable<Group>;\n            // if (group != null && !objects.includes(group)) {\n            //     objects.push(group);\n            // } else if (o instanceof Group && !objects.includes(o)) {\n            //     objects.push(o);\n            // }\n        });\n\n        const groupKey = getDrawingShapeKeyByDrawingSearch(parent);\n        const group = scene.getObject(groupKey) as Group;\n        const { width, height } = group;\n        group.getObjects().forEach((object) => {\n            group.removeSelfObjectAndTransform(object.oKey, width, height);\n        });\n        group.dispose();\n\n        // if (objects.length === 0) {\n        //     return;\n        // }\n\n        // objects.forEach((group) => {\n        //     const { width, height } = group;\n        //     group.getObjects().forEach((object) => {\n        //         group.removeSelfObjectAndTransform(object.oKey, width, height);\n        //     });\n        //     group.dispose();\n        // });\n\n        transformer.clearSelectedObjects();\n    }\n\n    private _drawingAlign(params: ISetDrawingAlignOperationParams) {\n        const { alignType } = params;\n        const drawings = this._drawingManagerService.getFocusDrawings();\n\n        if (alignType === AlignType.default) {\n            return;\n        }\n\n        const drawingTransformCaches: IDrawingTransformCache[] = [];\n        let minLeft = Number.POSITIVE_INFINITY;\n        let minTop = Number.POSITIVE_INFINITY;\n        let maxRight = Number.NEGATIVE_INFINITY;\n        let maxBottom = Number.NEGATIVE_INFINITY;\n        let drawingCount = 0;\n        drawings.forEach((drawing) => {\n            const { unitId, subUnitId, drawingId, drawingType } = drawing;\n            const drawingParam = this._drawingManagerService.getDrawingByParam({ unitId, subUnitId, drawingId });\n\n            if (drawingParam == null || drawingParam.transform == null) {\n                return;\n            }\n\n            drawingTransformCaches.push({\n                unitId,\n                subUnitId,\n                drawingId,\n                drawingType,\n                transform: drawingParam.transform,\n            });\n\n            const { left = 0, top = 0, width = 0, height = 0 } = drawingParam.transform;\n            minLeft = Math.min(minLeft, left);\n            minTop = Math.min(minTop, top);\n            maxRight = Math.max(maxRight, left + width);\n            maxBottom = Math.max(maxBottom, top + height);\n\n            drawingCount++;\n        });\n\n        if (drawingCount === 0) {\n            return;\n        }\n\n        this._sortDrawingTransform(drawingTransformCaches, alignType);\n\n        this._applyAlignType(drawingTransformCaches, alignType, minLeft, minTop, maxRight, maxBottom, drawingCount);\n    }\n\n    private _applyAlignType(drawingTransformCaches: IDrawingTransformCache[], alignType: AlignType, minLeft: number, minTop: number, maxRight: number, maxBottom: number, drawingCount: number) {\n        const averageHorizon = Math.round((maxRight - minLeft) / drawingCount * 10) / 10;\n        const averageVertical = Math.round((maxBottom - minTop) / drawingCount * 10) / 10;\n        const updateParams: IDrawingParam[] = [];\n\n        const renderObject = this._getSceneAndTransformerByDrawingSearch(drawingTransformCaches[0].unitId);\n\n        if (renderObject == null) {\n            return;\n        }\n        const { scene, transformer } = renderObject;\n\n        drawingTransformCaches.forEach((drawingTransformCache, index) => {\n            const { unitId, subUnitId, drawingId, transform, drawingType } = drawingTransformCache;\n\n            const { left = 0, top = 0, width = 0, height = 0 } = transform;\n\n            let newLeft = left;\n            let newTop = top;\n\n            switch (alignType) {\n                case AlignType.left:\n                    newLeft = minLeft;\n                    break;\n                case AlignType.center:\n                    newLeft = minLeft + (maxRight - minLeft) / 2 - width / 2;\n                    break;\n                case AlignType.right:\n                    newLeft = maxRight - width;\n                    break;\n                case AlignType.top:\n                    newTop = minTop;\n                    break;\n                case AlignType.middle:\n                    newTop = minTop + (maxBottom - minTop) / 2 - height / 2;\n                    break;\n                case AlignType.bottom:\n                    newTop = maxBottom - height;\n                    break;\n                case AlignType.horizon:\n                    newLeft = minLeft + averageHorizon * index;\n                    break;\n                case AlignType.vertical:\n                    newTop = minTop + averageVertical * index;\n                    break;\n                default:\n                    break;\n            }\n\n            if (newLeft !== left || newTop !== top) {\n                updateParams.push({\n                    unitId,\n                    subUnitId,\n                    drawingId,\n                    drawingType,\n                    transform: {\n                        left: newLeft,\n                        top: newTop,\n                    },\n                });\n            }\n        });\n\n        this._drawingManagerService.featurePluginUpdateNotification(updateParams);\n\n        transformer.refreshControls().changeNotification();\n    }\n\n    private _sortDrawingTransform(drawingTransformCaches: IDrawingTransformCache[], alignType: AlignType) {\n        drawingTransformCaches.sort((a, b) => {\n            const aTransform = a.transform;\n            const bTransform = b.transform;\n\n            const {\n                left: aLeft = 0,\n                top: aTop = 0,\n                width: aWidth = 0,\n                height: aHeight = 0,\n            } = aTransform;\n\n            const {\n                left: bLeft = 0,\n                top: bTop = 0,\n                width: bWidth = 0,\n                height: bHeight = 0,\n            } = bTransform;\n\n            switch (alignType) {\n                case AlignType.left:\n                    return aLeft - bLeft;\n                case AlignType.center:\n                    return aLeft + aWidth / 2 - (bLeft + bWidth / 2);\n                case AlignType.right:\n                    return aLeft + aWidth - (bLeft + bWidth);\n                case AlignType.top:\n                    return aTop - bTop;\n                case AlignType.middle:\n                    return aTop + aHeight / 2 - (bTop + bHeight / 2);\n                case AlignType.bottom:\n                    return aTop + aHeight - (bTop + bHeight);\n                case AlignType.horizon:\n                    return aLeft + aWidth / 2 - (bLeft + bWidth / 2);\n                case AlignType.vertical:\n                    return aTop + aHeight / 2 - (bTop + bHeight / 2);\n                default:\n                    return 0;\n            }\n        });\n    }\n\n    private _drawingArrangeListener() {\n        this.disposeWithMe(\n            this._drawingManagerService.order$.subscribe((params) => {\n                this._drawingArrange(params);\n            })\n        );\n    }\n\n    private _drawingArrange(params: IDrawingOrderMapParam) {\n        const { unitId, subUnitId, drawingIds } = params;\n\n        const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n\n        if (renderObject == null) {\n            return;\n        }\n        const { scene } = renderObject;\n\n        drawingIds.forEach((drawingId) => {\n            const oKey = getDrawingShapeKeyByDrawingSearch({ unitId, subUnitId, drawingId });\n            const drawingShapes = scene.fuzzyMathObjects(oKey, true) as Shape<IShapeProps>[];\n            if (drawingShapes == null || drawingShapes.length === 0) {\n                return;\n            }\n            const index = this._drawingManagerService.getDrawingOrder(unitId, subUnitId).indexOf(drawingId);\n            for (const shape of drawingShapes) {\n                shape.setProps({ zIndex: index });\n                shape.makeDirty();\n            }\n        });\n    }\n\n    private _sceneListenerOnDrawingMap: WeakSet<Scene> = new WeakSet();\n\n    private _drawingAddListener() {\n        this.disposeWithMe(\n            this._drawingManagerService.add$.subscribe((params) => {\n                this._insertDrawing(params);\n            })\n        );\n    }\n\n    private _insertDrawing(params: IDrawingSearch[]) {\n        const sceneList: Scene[] = [];\n        (params).forEach((param) => {\n            const { unitId } = param;\n\n            const drawingParam = this._drawingManagerService.getDrawingByParam(param) as IDrawingParam;\n            if (drawingParam == null) {\n                return;\n            }\n\n            const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n            if (renderObject == null) {\n                return;\n            }\n\n            const { scene } = renderObject;\n            if (!sceneList.includes(scene)) {\n                sceneList.push(scene);\n            }\n        });\n\n        sceneList.forEach((scene) => {\n            if (this._sceneListenerOnDrawingMap.has(scene)) {\n                return;\n            }\n            this._addListenerOnDrawing(scene);\n            this._sceneListenerOnDrawingMap.add(scene);\n        });\n    }\n\n    private _drawingRemoveListener() {\n        this.disposeWithMe(\n            this._drawingManagerService.remove$.subscribe((params) => {\n                (params).forEach((param) => {\n                    const { unitId, subUnitId, drawingId } = param;\n\n                    const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n\n                    if (renderObject == null) {\n                        return;\n                    }\n                    const { scene } = renderObject;\n\n                    const drawingShapeKey = getDrawingShapeKeyByDrawingSearch({ unitId, subUnitId, drawingId });\n\n                    const drawingShapes = scene.fuzzyMathObjects(drawingShapeKey, true);\n\n                    if (drawingShapes.length > 0) {\n                        for (const drawingShape of drawingShapes) {\n                            drawingShape.dispose();\n                        }\n\n                        scene.getTransformer()?.clearSelectedObjects();\n                    }\n                });\n            })\n        );\n    }\n\n    private _drawingUpdateListener() {\n        this.disposeWithMe(\n            this._drawingManagerService.update$.subscribe((params) => {\n                (params).forEach((param) => {\n                    const { unitId, subUnitId, drawingId } = param;\n\n                    const drawingParam = this._drawingManagerService.getDrawingByParam(param) as IDrawingParam;\n\n                    if (drawingParam == null) {\n                        return;\n                    }\n\n                    const { transform, drawingType } = drawingParam;\n\n                    const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n\n                    if (renderObject == null) {\n                        return;\n                    }\n                    const { scene, transformer } = renderObject;\n\n                    if (transform == null) {\n                        return true;\n                    }\n\n                    const { left = 0, top = 0, width = 0, height = 0, angle = 0, flipX = false, flipY = false, skewX = 0, skewY = 0 } = transform;\n\n                    const drawingShapeKey = getDrawingShapeKeyByDrawingSearch({ unitId, subUnitId, drawingId });\n\n                    const drawingShape = scene.getObject(drawingShapeKey) as Image;\n\n                    if (drawingShape == null) {\n                        return true;\n                    }\n\n                    drawingShape.transformByState({ left, top, width, height, angle, flipX, flipY, skewX, skewY });\n\n                    scene.getTransformer()?.debounceRefreshControls();\n                });\n            })\n        );\n    }\n\n    private _drawingRefreshListener() {\n        this.disposeWithMe(\n            this._drawingManagerService.refreshTransform$.subscribe((params) => {\n                (params).forEach((param) => {\n                    const { unitId, subUnitId, drawingId } = param;\n\n                    const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n                    if (renderObject == null) {\n                        return;\n                    }\n                    const drawingParam = this._drawingManagerService.getDrawingByParam(param) as IDrawingParam;\n                    if (drawingParam == null) {\n                        return;\n                    }\n                    const { transform } = drawingParam;\n                    const { scene } = renderObject;\n\n                    const drawingShapeKey = getDrawingShapeKeyByDrawingSearch({ unitId, subUnitId, drawingId });\n                    const drawingShape = scene.getObject(drawingShapeKey);\n\n                    if (drawingShape == null || transform == null) {\n                        return true;\n                    }\n\n                    const {\n                        left = 0,\n                        top = 0,\n                        width = 0,\n                        height = 0,\n                        angle = 0,\n                        flipX = false,\n                        flipY = false,\n                        skewX = 0,\n                        skewY = 0,\n                    } = transform;\n\n                    drawingShape.transformByState({ left, top, width, height, angle, flipX, flipY, skewX, skewY });\n                });\n            })\n        );\n    }\n\n    private _drawingVisibleListener() {\n        this.disposeWithMe(\n            this._drawingManagerService.visible$.subscribe((params) => {\n                (params).forEach((param) => {\n                    const { unitId, subUnitId, drawingId, visible } = param;\n\n                    const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n                    if (renderObject == null) {\n                        return;\n                    }\n                    const { scene } = renderObject;\n\n                    const drawingShapeKey = getDrawingShapeKeyByDrawingSearch({ unitId, subUnitId, drawingId });\n                    const drawingShape = scene.getObject(drawingShapeKey);\n\n                    if (drawingShape == null) {\n                        return true;\n                    }\n\n                    if (visible) {\n                        drawingShape.show();\n                    } else {\n                        drawingShape.hide();\n                    }\n                });\n            })\n        );\n    }\n\n    private _filterUpdateParams(params: Nullable<IDrawingParam>[], startTransforms: Nullable<ITransformState[]>) {\n        return params.filter((param, index) => {\n            if (param == null) {\n                return false;\n            }\n            const { transform } = param;\n            return checkIfMove(transform, startTransforms?.[index]);\n        }) as IDrawingParam[];\n    }\n\n    // group?.getObjects().forEach((o) => {\n    //     const drawing = this._drawingManagerService.getDrawingOKey(o.oKey);\n    //     if (drawing != null) {\n    //         const { unitId, subUnitId, drawingId } = drawing;\n    //         drawings.push({ unitId, subUnitId, drawingId });\n    //     }\n    // });\n\n    private _addListenerOnDrawing(scene: Scene) {\n        const transformer = scene.getTransformerByCreate();\n\n        let startTransforms: Nullable<ITransformState[]> = null;\n\n        this.disposeWithMe(\n            toDisposable(\n                transformer.changeStart$.subscribe((state) => {\n                    const { objects } = state;\n                    const objectArray = Array.from(objects.values());\n                    const drawings: IDrawingSearch[] = [];\n                    startTransforms = objectArray.map((object) => {\n                        const { left, top, height, width, angle, oKey, isInGroup } = object;\n                        const drawing = this._drawingManagerService.getDrawingOKey(oKey);\n                        if (isInGroup || object instanceof Group) {\n                            let group = object.ancestorGroup as Group;\n                            if (group == null && object instanceof Group) {\n                                group = object;\n                            }\n\n                            if (group == null) {\n                                return null;\n                            }\n\n                            const groupDrawing = this._drawingManagerService.getDrawingOKey(group.oKey);\n                            if (groupDrawing) {\n                                const { unitId, subUnitId, drawingId } = groupDrawing;\n                                drawings.push({ unitId, subUnitId, drawingId });\n                                const { left, top, height, width, angle } = group;\n                                return { left, top, height, width, angle };\n                            }\n                        } else if (drawing != null) {\n                            const { unitId, subUnitId, drawingId } = drawing;\n                            drawings.push({ unitId, subUnitId, drawingId });\n\n                            return { left, top, height, width, angle };\n                        }\n                        return null;\n                    }).filter((transform) => transform != null) as ITransformState[];\n\n                    if (drawings.length > 0) {\n                        this._commandService.syncExecuteCommand(SetDrawingSelectedOperation.id, drawings);\n                    } else {\n                        this._commandService.syncExecuteCommand(SetDrawingSelectedOperation.id, []);\n                    }\n                })\n            )\n        );\n\n        this.disposeWithMe(\n            toDisposable(\n                transformer.changeEnd$.subscribe((state) => {\n                    const { objects } = state;\n                    const params = this._filterUpdateParams(getUpdateParams(objects, this._drawingManagerService), startTransforms);\n\n                    if (params.length > 0) {\n                        // this._drawingManagerService.batchUpdate(params);\n                        this._drawingManagerService.featurePluginUpdateNotification(params);\n                    }\n                })\n            )\n        );\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ISrcRect, ITransformState, Nullable, PresetGeometryType } from '@univerjs/core';\nimport type { Engine, IShapeProps, IViewportInfo, Scene, UniverRenderingContext, Vector2 } from '@univerjs/engine-render';\nimport { Canvas, Rect, Shape } from '@univerjs/engine-render';\n\nexport interface IImageCropperObjectProps extends IShapeProps {\n    /**\n     * 20.1.8.55 srcRect (Source Rectangle)\n     */\n    srcRect?: Nullable<ISrcRect>;\n\n    /**\n     * 20.1.9.18 prstGeom (Preset geometry)\n     */\n    prstGeom?: Nullable<PresetGeometryType>;\n    applyTransform?: ITransformState;\n    dragPadding?: number;\n}\n\nenum ImageCropperObjectType {\n    RECT,\n    PATH,\n}\n\nexport class ImageCropperObject<T extends IImageCropperObjectProps = IImageCropperObjectProps> extends Shape<T> {\n    private _srcRect: Nullable<ISrcRect>;\n    private _prstGeom: Nullable<PresetGeometryType>;\n    private _applyTransform: Nullable<ITransformState>;\n\n    private _dragPadding = 8;\n\n    private _cacheCanvas: Nullable<Canvas>;\n\n    constructor(key?: string, props?: T) {\n        if (props == null) {\n            props = {} as T;\n        }\n        props.transformerConfig = {\n            keepRatio: false,\n            isCropper: true,\n            anchorFill: 'rgb(0, 0, 0)',\n            anchorStroke: 'rgb(255, 255, 255)',\n            anchorSize: 24,\n        };\n\n        super(key, props);\n\n        if (props?.srcRect) {\n            this._srcRect = props.srcRect;\n        }\n\n        if (props?.prstGeom) {\n            this._prstGeom = props.prstGeom;\n        }\n\n        if (props?.applyTransform) {\n            this._applyTransform = props.applyTransform;\n        }\n\n        if (props?.dragPadding) {\n            this._dragPadding = props.dragPadding;\n        }\n\n        this._applyProps();\n    }\n\n    refreshSrcRect(value: Nullable<ISrcRect>, transform: Nullable<ITransformState>) {\n        this._srcRect = value;\n        this._applyTransform = transform;\n        this._applyProps();\n    }\n\n    get srcRect() {\n        return this._srcRect;\n    }\n\n    override dispose() {\n        super.dispose();\n        this._cacheCanvas?.dispose();\n        this._srcRect = null;\n    }\n\n    override isHit(coord: Vector2) {\n        const oCoord = this.getInverseCoord(coord);\n        if (\n            oCoord.x >= -this.strokeWidth / 2 &&\n            oCoord.x <= this.width + this.strokeWidth / 2 &&\n            oCoord.y >= -this.strokeWidth / 2 &&\n            oCoord.y <= this.height + this.strokeWidth / 2 &&\n            !this._inSurround(oCoord)\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    private _inSurround(oCoord: Vector2) {\n        const padding = this._dragPadding;\n        if (\n            oCoord.x >= padding - this.strokeWidth / 2 &&\n            oCoord.x <= this.width + this.strokeWidth / 2 - padding &&\n            oCoord.y >= padding - this.strokeWidth / 2 &&\n            oCoord.y <= this.height + this.strokeWidth / 2 - padding\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    override render(mainCtx: UniverRenderingContext, bounds?: IViewportInfo) {\n        if (!this.visible) {\n            this.makeDirty(false);\n            return this;\n        }\n\n        mainCtx.save();\n        this._draw(mainCtx);\n        mainCtx.restore();\n        this.makeDirty(false);\n        return this;\n    }\n\n    protected override _draw(ctx: UniverRenderingContext) {\n        // const { left, top, width, height, angle } = applyObject;\n        const scene = this.getScene() as Scene;\n\n        const engine = scene.getEngine() as Engine;\n\n        const { width: engineWidth, height: engineHeight } = engine;\n\n        this._initialCacheCanvas();\n\n        // if (this._dirty) {\n        this._cacheCanvas?.clear();\n        const cacheCtx = this._cacheCanvas?.getContext();\n        if (cacheCtx == null) {\n            return;\n        }\n\n        cacheCtx.save();\n\n        Rect.drawWith(cacheCtx, {\n            left: 0,\n            top: 0,\n            width: engineWidth,\n            height: engineHeight,\n            fill: 'rgba(0, 0, 0, 0.5)',\n        });\n\n        cacheCtx.setTransform(ctx.getTransform());\n        this._clipForApplyObject(cacheCtx);\n        this._applyCache(ctx);\n        cacheCtx.restore();\n        // } else {\n        //     this._applyCache(ctx);\n        // }\n    }\n\n    private _clipForApplyObject(cacheCtx: UniverRenderingContext) {\n        let objectType = ImageCropperObjectType.RECT;\n\n        if (this._prstGeom != null) {\n            objectType = ImageCropperObjectType.PATH;\n        }\n        cacheCtx.globalCompositeOperation = 'destination-out';\n        cacheCtx.beginPath();\n\n        if (objectType === ImageCropperObjectType.RECT) {\n            const m = this.transform.getMatrix();\n            cacheCtx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n            cacheCtx.rect(0, 0, this.width, this.height);\n            cacheCtx.fill();\n        } else {\n            // const path = new Path2D(imageData.prstGeom);\n            // cacheCtx.fill(path);\n        }\n    }\n\n    private _applyProps() {\n        if (this._applyTransform == null) {\n            return;\n        }\n\n        let cropLeft = 0;\n        let cropTop = 0;\n        let cropRight = 0;\n        let cropBottom = 0;\n\n        const { left: applyLeft = 0, top: applyTop = 0, width: applyWidth = 0, height: applyHeight = 0, angle } = this._applyTransform;\n\n        if (this._srcRect != null) {\n            const { left = 0, top = 0, right = 0, bottom = 0 } = this._srcRect;\n            cropLeft = left;\n            cropTop = top;\n            cropRight = right;\n            cropBottom = bottom;\n        }\n\n        const left = applyLeft + cropLeft;\n        const top = applyTop + cropTop;\n\n        this.transformByState({\n            left,\n            top,\n            width: applyLeft + applyWidth - cropRight - left,\n            height: applyTop + applyHeight - cropBottom - top,\n            angle,\n        });\n    }\n\n    private _applyCache(ctx?: UniverRenderingContext) {\n        if (!ctx || this._cacheCanvas == null) {\n            return;\n        }\n        const cacheCtx = this._cacheCanvas.getContext();\n        cacheCtx.save();\n        ctx.save();\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        cacheCtx.setTransform(1, 0, 0, 1, 0, 0);\n        ctx.drawImage(this._cacheCanvas.getCanvasEle(), 0, 0);\n        ctx.restore();\n        cacheCtx.restore();\n    }\n\n    private _initialCacheCanvas() {\n        if (this._cacheCanvas != null) {\n            return;\n        }\n        const scene = this.getScene();\n        if (scene == null) return;\n\n        this._cacheCanvas = new Canvas();\n        const engine = scene.getEngine() as Engine;\n        this._cacheCanvas.setSize(engine.width, engine.height);\n\n        engine.onTransformChange$.subscribeEvent(() => {\n            this._cacheCanvas?.setSize(engine.width, engine.height);\n            this.makeDirty(true);\n        });\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommandInfo, IDrawingSearch, ISrcRect, ITransformState, Nullable, Workbook } from '@univerjs/core';\nimport type { IImageData } from '@univerjs/drawing';\nimport type { BaseObject, Scene } from '@univerjs/engine-render';\nimport type { IOpenImageCropOperationBySrcRectParams } from '../commands/operations/image-crop.operation';\nimport { checkIfMove, Disposable, ICommandService, Inject, IUniverInstanceService, LocaleService, UniverInstanceType } from '@univerjs/core';\nimport { MessageType } from '@univerjs/design';\nimport { getDrawingShapeKeyByDrawingSearch, IDrawingManagerService, SetDrawingSelectedOperation } from '@univerjs/drawing';\nimport { CURSOR_TYPE, degToRad, Image, IRenderManagerService, precisionTo, Vector2 } from '@univerjs/engine-render';\nimport { IMessageService } from '@univerjs/ui';\nimport { of, switchMap } from 'rxjs';\nimport { AutoImageCropOperation, CloseImageCropOperation, CropType, OpenImageCropOperation } from '../commands/operations/image-crop.operation';\nimport { ImageCropperObject } from '../views/crop/image-cropper-object';\n\nexport class ImageCropperController extends Disposable {\n    private _sceneListenerOnImageMap: WeakSet<Scene> = new WeakSet();\n\n    constructor(\n        @ICommandService private readonly _commandService: ICommandService,\n        @IDrawingManagerService private readonly _drawingManagerService: IDrawingManagerService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService,\n        @IUniverInstanceService private _univerInstanceService: IUniverInstanceService,\n        @IMessageService private readonly _messageService: IMessageService,\n        @Inject(LocaleService) private readonly _localeService: LocaleService\n    ) {\n        super();\n\n        this._init();\n    }\n\n    private _init(): void {\n        this._initOpenCrop();\n        this._initCloseCrop();\n        this._initAutoCrop();\n    }\n\n    private _initAutoCrop() {\n        this.disposeWithMe(\n            this._commandService.onCommandExecuted((command: ICommandInfo) => {\n                if (command.id !== AutoImageCropOperation.id) {\n                    return;\n                }\n\n                const params = command.params as IOpenImageCropOperationBySrcRectParams;\n\n                if (params == null) {\n                    return;\n                }\n\n                const { cropType } = params;\n\n                const drawingParams = this._drawingManagerService.getFocusDrawings();\n\n                if (drawingParams.length !== 1) {\n                    return;\n                }\n\n                const drawingParam = drawingParams[0];\n\n                const { unitId, subUnitId, drawingId } = drawingParam;\n\n                const renderObject = this._renderManagerService.getRenderById(unitId);\n\n                const scene = renderObject?.scene;\n\n                if (scene == null) {\n                    return true;\n                }\n\n                const imageCropperObject = this._searchCropObject(scene);\n                if (imageCropperObject != null) {\n                    this._commandService.syncExecuteCommand(CloseImageCropOperation.id, { isAuto: true });\n                }\n\n                const imageShapeKey = getDrawingShapeKeyByDrawingSearch({ unitId, subUnitId, drawingId });\n\n                const imageShape = scene.getObject(imageShapeKey);\n\n                if (!(imageShape instanceof Image)) {\n                    this._messageService.show({\n                        type: MessageType.Error,\n                        content: this._localeService.t('image-cropper.error'),\n                    });\n                    return;\n                }\n\n                if (imageShape == null) {\n                    return;\n                }\n\n                this._updateCropperObject(cropType, imageShape);\n\n                this._commandService.executeCommand(OpenImageCropOperation.id, { unitId, subUnitId, drawingId });\n            })\n        );\n    }\n\n    private _calculateSrcRectByRatio(left: number, top: number, width: number, height: number, numerator: number, denominator: number) {\n        const srcRatio = width / height;\n        const ratio = numerator / denominator;\n\n        let newWidth = width;\n        let newHeight = height;\n\n        if (srcRatio > ratio) {\n            newWidth = height * ratio;\n        } else {\n            newHeight = width / ratio;\n        }\n\n        const newLeft = (width - newWidth) / 2;\n        const newTop = (height - newHeight) / 2;\n\n        return {\n            left: precisionTo(newLeft, 1),\n            top: precisionTo(newTop, 1),\n            right: precisionTo(width - (newLeft + newWidth), 1),\n            bottom: precisionTo(height - (newTop + newHeight), 1),\n        };\n    }\n\n    private _updateCropperObject(cropType: CropType, imageShape: Image) {\n        const { left, top, width, height } = imageShape.calculateTransformWithSrcRect();\n\n        let newSrcRect: Nullable<ISrcRect>;\n        switch (cropType) {\n            case CropType.R1_1:\n                // 1:1\n                newSrcRect = this._calculateSrcRectByRatio(left, top, width, height, 1, 1);\n                break;\n            case CropType.R16_9:\n                // 16:9\n                newSrcRect = this._calculateSrcRectByRatio(left, top, width, height, 16, 9);\n                break;\n            case CropType.R9_16:\n                // 9:16\n                newSrcRect = this._calculateSrcRectByRatio(left, top, width, height, 9, 16);\n                break;\n            case CropType.R5_4:\n                // 5:4\n                newSrcRect = this._calculateSrcRectByRatio(left, top, width, height, 5, 4);\n                break;\n            case CropType.R4_5:\n                // 4:5\n                newSrcRect = this._calculateSrcRectByRatio(left, top, width, height, 4, 5);\n                break;\n            case CropType.R4_3:\n                // 4:3\n                newSrcRect = this._calculateSrcRectByRatio(left, top, width, height, 4, 3);\n                break;\n            case CropType.R3_4:\n                // 3:4\n                newSrcRect = this._calculateSrcRectByRatio(left, top, width, height, 3, 4);\n                break;\n            case CropType.R3_2:\n                // 3:2\n                newSrcRect = this._calculateSrcRectByRatio(left, top, width, height, 3, 2);\n                break;\n            case CropType.R2_3:\n                // 2:3\n                newSrcRect = this._calculateSrcRectByRatio(left, top, width, height, 2, 3);\n                break;\n            case CropType.FREE:\n            default:\n                break;\n        }\n\n        if (newSrcRect == null) {\n            return;\n        }\n\n        imageShape.setSrcRect(newSrcRect);\n\n        const { left: newLeft = 0, top: newTop = 0, bottom: newBottom = 0, right: newRight = 0 } = newSrcRect;\n        imageShape.transformByStateCloseCropper({\n            left: left + newLeft,\n            top: top + newTop,\n            width: width - newRight - newLeft,\n            height: height - newBottom - newTop,\n        });\n    }\n\n    private _initOpenCrop() {\n        this.disposeWithMe(\n            this._commandService.onCommandExecuted((command: ICommandInfo) => {\n                if (command.id !== OpenImageCropOperation.id) {\n                    return;\n                }\n\n                const params = command.params as IDrawingSearch;\n\n                if (params == null) {\n                    return;\n                }\n\n                const { unitId, subUnitId, drawingId } = params;\n\n                const renderObject = this._renderManagerService.getRenderById(unitId);\n\n                const scene = renderObject?.scene;\n\n                if (scene == null) {\n                    return true;\n                }\n\n                if (!this._sceneListenerOnImageMap.has(scene)) {\n                    this._addListenerOnImage(scene);\n                    this._sceneListenerOnImageMap.add(scene);\n                }\n\n                const imageData = this._drawingManagerService.getDrawingByParam({ unitId, subUnitId, drawingId });\n\n                if (imageData == null) {\n                    return;\n                }\n\n                const imageShapeKey = getDrawingShapeKeyByDrawingSearch({ unitId, subUnitId, drawingId });\n\n                const imageShape = scene.getObject(imageShapeKey);\n\n                if (imageShape == null) {\n                    return;\n                }\n\n                if (!(imageShape instanceof Image)) {\n                    this._messageService.show({\n                        type: MessageType.Error,\n                        content: this._localeService.t('image-cropper.error'),\n                    });\n                    return;\n                }\n                const transformer = scene.getTransformer();\n\n                transformer?.clearControls();\n\n                const imageCropperObject = new ImageCropperObject(`${imageShapeKey}-crop`, {\n                    srcRect: imageShape.srcRect,\n                    prstGeom: imageShape.prstGeom,\n                    applyTransform: imageShape.calculateTransformWithSrcRect(),\n                });\n\n                scene.addObject(imageCropperObject, imageShape.getLayerIndex() + 1).attachTransformerTo(imageCropperObject);\n                transformer?.createControlForCopper(imageCropperObject);\n                this._addHoverForImageCopper(imageCropperObject);\n\n                imageShape.openRenderByCropper();\n                transformer?.refreshControls();\n                imageCropperObject.makeDirty(true);\n\n                this._commandService.syncExecuteCommand(SetDrawingSelectedOperation.id, [{ unitId, subUnitId, drawingId }]);\n            })\n        );\n    }\n\n    private _searchCropObject(scene: Scene) {\n        const objects = scene.getAllObjectsByOrder();\n\n        for (const object of objects) {\n            if (object instanceof ImageCropperObject) {\n                return object as ImageCropperObject;\n            }\n        }\n    }\n\n    private _initCloseCrop() {\n        this.disposeWithMe(\n            this._commandService.onCommandExecuted((command: ICommandInfo) => {\n                if (command.id !== CloseImageCropOperation.id) {\n                    return;\n                }\n\n                const currentUnit = this._univerInstanceService.getFocusedUnit();\n\n                if (currentUnit == null) {\n                    return;\n                }\n\n                const unitId = currentUnit.getUnitId();\n                const renderObject = this._renderManagerService.getRenderById(unitId);\n\n                const scene = renderObject?.scene;\n\n                if (scene == null) {\n                    return true;\n                }\n\n                const imageCropperObject = this._searchCropObject(scene);\n                if (imageCropperObject == null) {\n                    return;\n                }\n                const imageShape = this._getApplyObjectByCropObject(imageCropperObject);\n                if (imageShape == null) {\n                    return;\n                }\n\n                const transformer = scene.getTransformerByCreate();\n                transformer.detachFrom(imageCropperObject);\n                transformer.clearCopperControl();\n\n                const srcRect = this._getSrcRectByTransformState(imageShape, imageCropperObject);\n\n                const drawingParam = this._drawingManagerService.getDrawingOKey(imageShape.oKey);\n                if (drawingParam != null) {\n                    const { left, top, height, width } = imageCropperObject;\n                    this._drawingManagerService.featurePluginUpdateNotification([{\n                        ...drawingParam,\n                        transform: {\n                            ...drawingParam.transform,\n                            left,\n                            top,\n                            height,\n                            width,\n                        },\n                        srcRect: srcRect.srcRectAngle,\n                    }] as IImageData[]);\n                }\n                imageShape.setSrcRect({ ...srcRect.srcRectAngle });\n                imageShape.closeRenderByCropper();\n\n                imageShape.makeDirty(true);\n\n                imageCropperObject?.dispose();\n            })\n        );\n\n        const sheetUnit$ = this._univerInstanceService\n            .getCurrentTypeOfUnit$<Workbook>(UniverInstanceType.UNIVER_SHEET)\n            .pipe(\n                switchMap((workbook) => workbook ? workbook.activeSheet$ : of(null))\n            );\n\n        this.disposeWithMe(sheetUnit$.subscribe(() => {\n            this._commandService.syncExecuteCommand(CloseImageCropOperation.id);\n        }));\n    }\n\n    private _getApplyObjectByCropObject(cropObject: ImageCropperObject): Nullable<Image> {\n        const cropOKey = cropObject.oKey;\n        const applyOKey = cropOKey.slice(0, cropOKey.length - 5);\n        const scene = cropObject.getScene();\n        if (!scene) return null;\n        const applyObject = scene.getObject(applyOKey) as Image;\n        if (applyObject == null) {\n            return null;\n        }\n\n        return applyObject;\n    }\n\n    private _addListenerOnImage(scene: Scene) {\n        const transformer = scene.getTransformerByCreate();\n\n        let startTransform: Nullable<ITransformState> = null;\n        this.disposeWithMe(\n            transformer.changeStart$.subscribe((state) => {\n                const { objects } = state;\n                const cropObject = objects.values().next().value as ImageCropperObject;\n                if (cropObject == null || !(cropObject instanceof ImageCropperObject)) {\n                    return;\n                }\n\n                const { left, top, height, width, angle } = cropObject;\n\n                startTransform = { left, top, height, width, angle };\n\n                transformer.clearCopperControl();\n            })\n        );\n\n        this.disposeWithMe(\n            transformer.changeEnd$.subscribe((state) => {\n                const { objects } = state;\n                const cropObject = objects.values().next().value as ImageCropperObject;\n                if (cropObject == null || !(cropObject instanceof ImageCropperObject)) {\n                    return;\n                }\n\n                const { left, top, height, width, angle } = cropObject;\n\n                if (!checkIfMove({ left, top, height, width, angle }, startTransform)) {\n                    return;\n                }\n\n                const applyObject = this._getApplyObjectByCropObject(cropObject);\n\n                if (applyObject == null) {\n                    return;\n                }\n\n                const srcRect = this._getSrcRectByTransformState(applyObject, cropObject);\n\n                cropObject.refreshSrcRect(srcRect.srcRect, applyObject.getState());\n\n                // cropObject.imageData = {\n                //     ...cropObject.imageData,\n                //     srcRect: srcRect.srcRect,\n                // } as IImageData;\n\n                transformer.createControlForCopper(cropObject);\n            })\n        );\n        this._endCropListener(scene);\n    }\n\n    private _addHoverForImageCopper(o: ImageCropperObject) {\n        this.disposeWithMe(\n            o.onPointerEnter$.subscribeEvent(() => {\n                o.cursor = CURSOR_TYPE.MOVE;\n            })\n        );\n\n        this.disposeWithMe(\n            o.onPointerLeave$.subscribeEvent(() => {\n                o.cursor = CURSOR_TYPE.DEFAULT;\n            })\n        );\n    }\n\n    private _endCropListener(scene: Scene) {\n        const transformer = scene.getTransformerByCreate();\n\n        this.disposeWithMe(\n            transformer.clearControl$.subscribe((changeSelf) => {\n                if (changeSelf === true) {\n                    this._commandService.syncExecuteCommand(CloseImageCropOperation.id);\n                }\n            })\n        );\n    }\n\n    private _getSrcRectByTransformState(applyObject: BaseObject, imageCropperObject: ImageCropperObject) {\n        const { left, top, height, width, strokeWidth, angle: copperAngle } = imageCropperObject;\n\n        const { left: applyLeft, top: applyTop, width: applyWidth, height: applyHeight, angle: applyAngle, strokeWidth: applyStrokeWidth } = applyObject;\n\n        const newLeft = left - applyLeft;\n        const newTop = top - applyTop;\n\n        const srcRect = {\n            left: newLeft,\n            top: newTop,\n            right: applyWidth - newLeft - width,\n            bottom: applyHeight - newTop - height,\n        };\n\n        const srcRectAngle = { ...srcRect };\n\n        // const offsetPoint = new Vector2(0, 0);\n        if (applyAngle !== 0) {\n            /**\n             * Calculate the offset of the center rotation to correctly position the object entering the cropping.\n             */\n            const cx = left + width / 2;\n            const cy = top + height / 2;\n            const centerPoint = new Vector2(cx, cy);\n\n            const newCx = applyWidth / 2 + applyLeft;\n            const newCy = applyHeight / 2 + applyTop;\n            const newCenterPoint = new Vector2(newCx, newCy);\n\n            const vertexPoint = new Vector2(applyLeft, applyTop);\n            vertexPoint.rotateByPoint(degToRad(applyAngle), newCenterPoint);\n\n            const applyFinalPoint = vertexPoint.clone();\n            applyFinalPoint.rotateByPoint(degToRad(-applyAngle), centerPoint);\n\n            const newAngleLeft = left - applyFinalPoint.x;\n            const newAngleTop = top - applyFinalPoint.y;\n\n            srcRectAngle.left = newAngleLeft;\n            srcRectAngle.top = newAngleTop;\n            srcRectAngle.right = applyWidth - newAngleLeft - width;\n            srcRectAngle.bottom = applyHeight - newAngleTop - height;\n        }\n\n        return {\n            srcRect,\n            srcRectAngle,\n        };\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommandInfo, IDrawingSearch, Nullable } from '@univerjs/core';\nimport type { IImageData } from '@univerjs/drawing';\nimport type { Image, Scene } from '@univerjs/engine-render';\nimport {\n    Disposable,\n    DrawingTypeEnum,\n    ICommandService,\n    ImageSourceType,\n    Inject,\n    IUniverInstanceService,\n    toDisposable,\n} from '@univerjs/core';\nimport { getDrawingShapeKeyByDrawingSearch, IDrawingManagerService, IImageIoService, SetDrawingSelectedOperation } from '@univerjs/drawing';\nimport { CURSOR_TYPE, IRenderManagerService } from '@univerjs/engine-render';\nimport { IDialogService } from '@univerjs/ui';\nimport { ImageResetSizeOperation } from '../commands/operations/image-reset-size.operation';\nimport { DrawingRenderService } from '../services/drawing-render.service';\nimport { getCurrentUnitInfo } from './utils';\n\nexport class ImageUpdateController extends Disposable {\n    constructor(\n        @ICommandService private readonly _commandService: ICommandService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService,\n        @IDrawingManagerService private readonly _drawingManagerService: IDrawingManagerService,\n        @IDialogService private readonly _dialogService: IDialogService,\n        @IImageIoService private readonly _imageIoService: IImageIoService,\n        @IUniverInstanceService private readonly _currentUniverService: IUniverInstanceService,\n        @Inject(DrawingRenderService) private readonly _drawingRenderService: DrawingRenderService\n    ) {\n        super();\n\n        this._initialize();\n    }\n\n    override dispose(): void {\n        super.dispose();\n    }\n\n    private _initialize() {\n        this._drawingAddListener();\n\n        this._commandExecutedListener();\n\n        this._imageUpdateListener();\n    }\n\n    private _commandExecutedListener() {\n        this.disposeWithMe(\n            this._commandService.onCommandExecuted((command: ICommandInfo) => {\n                if (command.id === ImageResetSizeOperation.id) {\n                    const params = command.params as IDrawingSearch[];\n                    if (params == null) {\n                        return;\n                    }\n                    this._resetImageSize(params);\n                }\n            })\n        );\n    }\n\n    private _getSceneAndTransformerByDrawingSearch(unitId: Nullable<string>) {\n        if (unitId == null) {\n            return;\n        }\n\n        const renderObject = this._renderManagerService.getRenderById(unitId);\n\n        const scene = renderObject?.scene;\n\n        if (scene == null) {\n            return null;\n        }\n\n        const transformer = scene.getTransformerByCreate();\n\n        return { scene, transformer };\n    }\n\n    private _resetImageSize(params: IDrawingSearch[]) {\n        const updateParams: IImageData[] = [];\n        const sceneList: Scene[] = [];\n\n        params.forEach((param) => {\n            const { unitId, subUnitId, drawingId } = param;\n\n            const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n\n            if (renderObject == null) {\n                return;\n            }\n            const { scene } = renderObject;\n\n            const imageShapeKey = getDrawingShapeKeyByDrawingSearch({ unitId, subUnitId, drawingId });\n\n            const imageShape = scene.getObject(imageShapeKey);\n\n            if (imageShape == null) {\n                return true;\n            }\n\n            const imageData = this._drawingManagerService.getDrawingByParam(param);\n\n            if (imageData == null) {\n                return true;\n            }\n\n            if (imageData.drawingType !== DrawingTypeEnum.DRAWING_IMAGE) {\n                return;\n            }\n\n            (imageShape as Image).resetSize();\n\n            const { width, height } = (imageShape as Image).getNativeSize();\n\n            if (sceneList.includes(scene) === false) {\n                sceneList.push(scene);\n            }\n\n            updateParams.push({\n                ...imageData,\n                transform: {\n                    ...imageData.transform,\n                    height,\n                    width,\n                    angle: 0,\n                },\n                srcRect: null,\n                prstGeom: null,\n            } as IImageData);\n        });\n\n        this._drawingManagerService.featurePluginUpdateNotification(updateParams);\n\n        sceneList.forEach((scene) => {\n            const transformer = scene.getTransformerByCreate();\n            transformer.refreshControls().changeNotification();\n        });\n\n        this._commandService.syncExecuteCommand(SetDrawingSelectedOperation.id, params);\n    }\n\n    private _drawingAddListener() {\n        this.disposeWithMe(\n            this._drawingManagerService.add$.subscribe((params) => {\n                this._insertImages(params);\n            })\n        );\n    }\n\n    private _insertImages(params: IDrawingSearch[]) {\n        (params).forEach(async (param) => {\n            const { unitId, subUnitId } = param;\n            const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n            const currentSubUnitId = getCurrentUnitInfo(this._currentUniverService, unitId)?.subUnitId;\n\n            if (renderObject == null || currentSubUnitId !== subUnitId) {\n                return;\n            }\n\n            const imageParam = this._drawingManagerService.getDrawingByParam(param) as IImageData;\n            if (imageParam == null) {\n                return;\n            }\n\n            const images = await this._drawingRenderService.renderImages(imageParam, renderObject.scene);\n\n            if (images == null || images.length === 0) {\n                return;\n            }\n\n            for (const image of images) {\n                this._addHoverForImage(image);\n                this._addDialogForImage(image);\n            }\n        });\n    }\n\n    private _imageUpdateListener() {\n        this.disposeWithMe(\n            this._drawingManagerService.update$.subscribe((params) => {\n                (params).forEach((param) => {\n                    const { unitId, subUnitId, drawingId } = param;\n\n                    const drawingParam = this._drawingManagerService.getDrawingByParam(param) as IImageData;\n\n                    if (drawingParam == null) {\n                        return;\n                    }\n\n                    const { transform, drawingType, srcRect, prstGeom, source, imageSourceType } = drawingParam;\n\n                    if (drawingType !== DrawingTypeEnum.DRAWING_IMAGE) {\n                        return;\n                    }\n\n                    const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n\n                    if (renderObject == null) {\n                        return;\n                    }\n                    const { scene, transformer } = renderObject;\n\n                    if (transform == null) {\n                        return true;\n                    }\n\n                    const drawingShapeKey = getDrawingShapeKeyByDrawingSearch({ unitId, subUnitId, drawingId });\n\n                    const imageShape = scene.getObject(drawingShapeKey) as Image;\n\n                    if (imageShape == null) {\n                        return true;\n                    }\n\n                    imageShape.setSrcRect(srcRect);\n                    imageShape.setPrstGeom(prstGeom);\n                    if (source != null && source.length > 0 && (imageSourceType === ImageSourceType.BASE64 || imageSourceType === ImageSourceType.URL)) {\n                        imageShape.changeSource(source);\n                    }\n                });\n            })\n        );\n    }\n\n    private _addHoverForImage(o: Image) {\n        this.disposeWithMe(\n            toDisposable(\n                o.onPointerEnter$.subscribeEvent(() => {\n                    o.cursor = CURSOR_TYPE.GRAB;\n                })\n            )\n        );\n\n        this.disposeWithMe(\n            toDisposable(\n                o.onPointerLeave$.subscribeEvent(() => {\n                    o.cursor = CURSOR_TYPE.DEFAULT;\n                })\n            )\n        );\n    }\n\n    private _addDialogForImage(o: Image) {\n        this.disposeWithMe(\n            toDisposable(\n                o.onDblclick$.subscribeEvent(() => {\n                    const dialogId = `${o.oKey}-viewer-dialog`;\n                    this._drawingRenderService.previewImage(dialogId, o.getNative()!.src, o.getNativeSize().width, o.getNativeSize().height);\n                })\n            )\n        );\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport type { IUniverDrawingUIConfig } from './controllers/config.schema';\nimport { IConfigService, Inject, Injector, merge, Plugin } from '@univerjs/core';\nimport { defaultPluginConfig, DRAWING_UI_PLUGIN_CONFIG_KEY } from './controllers/config.schema';\nimport { DrawingUIController } from './controllers/drawing-ui.controller';\nimport { DrawingUpdateController } from './controllers/drawing-update.controller';\nimport { ImageCropperController } from './controllers/image-cropper.controller';\nimport { ImageUpdateController } from './controllers/image-update.controller';\nimport { DrawingRenderService } from './services/drawing-render.service';\n\nconst PLUGIN_NAME = 'UNIVER_DRAWING_UI_PLUGIN';\n\nexport class UniverDrawingUIPlugin extends Plugin {\n    static override pluginName = PLUGIN_NAME;\n\n    constructor(\n        private readonly _config: Partial<IUniverDrawingUIConfig> = defaultPluginConfig,\n        @Inject(Injector) protected _injector: Injector,\n        @IConfigService private readonly _configService: IConfigService\n    ) {\n        super();\n\n        // Manage the plugin configuration.\n        const { menu, ...rest } = merge(\n            {},\n            defaultPluginConfig,\n            this._config\n        );\n        if (menu) {\n            this._configService.setConfig('menu', menu, { merge: true });\n        }\n        this._configService.setConfig(DRAWING_UI_PLUGIN_CONFIG_KEY, rest);\n    }\n\n    override onStarting(): void {\n        this._initDependencies();\n    }\n\n    override onRendered(): void {\n        this._injector.get(DrawingUpdateController);\n        this._injector.get(DrawingUIController);\n        this._injector.get(ImageCropperController);\n        this._injector.get(ImageUpdateController);\n    }\n\n    private _initDependencies(): void {\n        const dependencies: Dependency[] = [\n            [DrawingRenderService],\n            [DrawingUpdateController],\n            [DrawingUIController],\n            [ImageCropperController],\n            [ImageUpdateController],\n        ];\n\n        dependencies.forEach((dependency) => this._injector.add(dependency));\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const SHEETS_DRAWING_PLUGIN_CONFIG_KEY = 'sheets-drawing.config';\n\nexport const configSymbol = Symbol(SHEETS_DRAWING_PLUGIN_CONFIG_KEY);\n\nexport interface IUniverSheetsDrawingConfig {\n}\n\nexport const defaultPluginConfig: IUniverSheetsDrawingConfig = {};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingParam, IRotationSkewFlipTransform, Serializable } from '@univerjs/core';\nimport type { ISheetOverGridPosition } from '@univerjs/sheets';\nimport { createIdentifier } from '@univerjs/core';\nimport { type IImageData, type IUnitDrawingService, UnitDrawingService } from '@univerjs/drawing';\n\nexport enum SheetDrawingAnchorType {\n    /**\n     * Only the position of the drawing follows the cell changes. When rows or columns are inserted or deleted, the position of the drawing changes, but the size remains the same.\n     */\n    Position = '0',\n\n    /**\n     * The size and position of the drawing follow the cell changes. When rows or columns are inserted or deleted, the size and position of the drawing change accordingly.\n     */\n    Both = '1',\n\n    /**\n     * The size and position of the drawing do not follow the cell changes. When rows or columns are inserted or deleted, the position and size of the drawing remain unchanged.\n     */\n    None = '2',\n}\n\nexport interface ISheetDrawingPosition extends IRotationSkewFlipTransform, ISheetOverGridPosition {\n\n}\n\nexport interface ISheetDrawingBase {\n    sheetTransform: ISheetDrawingPosition;\n    anchorType?: SheetDrawingAnchorType;\n}\n\nexport interface ISheetImage extends IImageData, ISheetDrawingBase {\n\n}\n\n/**\n * test type\n */\nexport interface ISheetShape extends IDrawingParam, ISheetDrawingBase {\n\n}\n\nexport interface IFloatDomData extends IDrawingParam {\n    componentKey: string;\n    data?: Serializable;\n    allowTransform?: boolean;\n}\n\n// TODO@wzhudev: this shouldn't be here. It should be in the sheets package\nexport interface ISheetFloatDom extends IFloatDomData, ISheetDrawingBase {}\n\nexport type ISheetDrawing = ISheetImage | ISheetShape | ISheetFloatDom;\n\ntype OptionalField<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\nexport type ISheetUpdateDrawing = OptionalField<ISheetImage | ISheetShape, 'sheetTransform'>;\n\nexport class SheetDrawingService extends UnitDrawingService<ISheetDrawing> {}\n\nexport interface ISheetDrawingService extends IUnitDrawingService<ISheetDrawing> {}\n\nexport const ISheetDrawingService = createIdentifier<ISheetDrawingService>('sheets-drawing.sheet-drawing.service');\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingSearch, IMutation } from '@univerjs/core';\nimport { CommandType } from '@univerjs/core';\nimport type { IDrawingGroupUpdateParam, IDrawingJson1Type, IDrawingOrderMapParam } from '@univerjs/drawing';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { ISheetDrawingService } from '../../services/sheet-drawing.service';\n\nexport enum DrawingApplyType {\n    INSERT,\n    REMOVE,\n    UPDATE,\n    ARRANGE,\n    GROUP,\n    UNGROUP,\n}\n\nexport interface ISetDrawingApplyMutationParams extends IDrawingJson1Type {\n    type: DrawingApplyType;\n}\n\nexport const SetDrawingApplyMutation: IMutation<ISetDrawingApplyMutationParams> = {\n    id: 'sheet.mutation.set-drawing-apply',\n    type: CommandType.MUTATION,\n    handler: (accessor, params) => {\n        const drawingManagerService = accessor.get(IDrawingManagerService);\n        const sheetDrawingService = accessor.get(ISheetDrawingService);\n\n        const { op, unitId, subUnitId, type, objects } = params;\n\n        drawingManagerService.applyJson1(unitId, subUnitId, op);\n        sheetDrawingService.applyJson1(unitId, subUnitId, op);\n\n        switch (type) {\n            case DrawingApplyType.INSERT:\n                drawingManagerService.addNotification(objects as IDrawingSearch[]);\n                sheetDrawingService.addNotification(objects as IDrawingSearch[]);\n                break;\n            case DrawingApplyType.REMOVE:\n                drawingManagerService.removeNotification(objects as IDrawingSearch[]);\n                sheetDrawingService.removeNotification(objects as IDrawingSearch[]);\n                break;\n            case DrawingApplyType.UPDATE:\n                drawingManagerService.updateNotification(objects as IDrawingSearch[]);\n                sheetDrawingService.updateNotification(objects as IDrawingSearch[]);\n                break;\n            case DrawingApplyType.ARRANGE:\n                drawingManagerService.orderNotification(objects as IDrawingOrderMapParam);\n                sheetDrawingService.orderNotification(objects as IDrawingOrderMapParam);\n                break;\n            case DrawingApplyType.GROUP:\n                drawingManagerService.groupUpdateNotification(objects as IDrawingGroupUpdateParam[]);\n                break;\n            case DrawingApplyType.UNGROUP:\n                drawingManagerService.ungroupUpdateNotification(objects as IDrawingGroupUpdateParam[]);\n                break;\n        }\n\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingSubunitMap } from '@univerjs/drawing';\nimport type { ISheetDrawing } from '../services/sheet-drawing.service';\nimport { Disposable, ICommandService, IResourceManagerService, UniverInstanceType } from '@univerjs/core';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { SetDrawingApplyMutation } from '../commands/mutations/set-drawing-apply.mutation';\nimport { ISheetDrawingService } from '../services/sheet-drawing.service';\n\nexport const SHEET_DRAWING_PLUGIN = 'SHEET_DRAWING_PLUGIN';\n\nexport class SheetsDrawingLoadController extends Disposable {\n    constructor(\n        @ICommandService private readonly _commandService: ICommandService,\n        @ISheetDrawingService private readonly _sheetDrawingService: ISheetDrawingService,\n        @IDrawingManagerService private readonly _drawingManagerService: IDrawingManagerService,\n        @IResourceManagerService private _resourceManagerService: IResourceManagerService\n    ) {\n        super();\n\n        this._initSnapshot();\n\n        this.disposeWithMe(this._commandService.registerCommand(SetDrawingApplyMutation));\n    }\n\n    private _initSnapshot() {\n        const toJson = (unitId: string, model?: IDrawingSubunitMap<ISheetDrawing>) => {\n            const map = model || this._sheetDrawingService.getDrawingDataForUnit(unitId);\n            if (map) {\n                return JSON.stringify(map);\n            }\n\n            return '';\n        };\n\n        const parseJson = (json: string): IDrawingSubunitMap<ISheetDrawing> => {\n            if (!json) {\n                return {};\n            }\n\n            try {\n                return JSON.parse(json);\n            } catch {\n                return {};\n            }\n        };\n\n        this.disposeWithMe(\n            this._resourceManagerService.registerPluginResource<IDrawingSubunitMap<ISheetDrawing>>({\n                pluginName: SHEET_DRAWING_PLUGIN,\n                businesses: [UniverInstanceType.UNIVER_SHEET],\n                toJson: (unitId, model) => toJson(unitId, model),\n                parseJson: (json) => parseJson(json),\n                onUnLoad: (unitId) => {\n                    this._sheetDrawingService.removeDrawingDataForUnit(unitId);\n                    this._drawingManagerService.removeDrawingDataForUnit(unitId);\n                },\n                onLoad: (unitId, value) => {\n                    this._sheetDrawingService.registerDrawingData(unitId, value);\n                    this._drawingManagerService.registerDrawingData(unitId, value);\n                },\n            })\n        );\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport type { IUniverSheetsDrawingConfig } from './controllers/config.schema';\nimport { DependentOn, IConfigService, Inject, Injector, merge, Plugin, UniverInstanceType } from '@univerjs/core';\nimport { UniverDrawingPlugin } from '@univerjs/drawing';\nimport { defaultPluginConfig, SHEETS_DRAWING_PLUGIN_CONFIG_KEY } from './controllers/config.schema';\nimport { SHEET_DRAWING_PLUGIN, SheetsDrawingLoadController } from './controllers/sheet-drawing.controller';\nimport { ISheetDrawingService, SheetDrawingService } from './services/sheet-drawing.service';\n\n@DependentOn(UniverDrawingPlugin)\nexport class UniverSheetsDrawingPlugin extends Plugin {\n    static override pluginName = SHEET_DRAWING_PLUGIN;\n    static override type = UniverInstanceType.UNIVER_SHEET;\n\n    constructor(\n        private readonly _config: Partial<IUniverSheetsDrawingConfig> = defaultPluginConfig,\n        @Inject(Injector) override readonly _injector: Injector,\n        @IConfigService private readonly _configService: IConfigService\n    ) {\n        super();\n\n        // Manage the plugin configuration.\n        const { ...rest } = merge(\n            {},\n            defaultPluginConfig,\n            this._config\n        );\n        this._configService.setConfig(SHEETS_DRAWING_PLUGIN_CONFIG_KEY, rest);\n    }\n\n    override onStarting(): void {\n        ([\n            [SheetsDrawingLoadController],\n            [ISheetDrawingService, { useClass: SheetDrawingService }],\n        ] as Dependency[]).forEach((dependency) => this._injector.add(dependency));\n\n        this._injector.get(SheetsDrawingLoadController);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DependencyOverride } from '@univerjs/core';\nimport type { MenuConfig } from '@univerjs/ui';\n\nexport const SHEETS_DRAWING_UI_PLUGIN_CONFIG_KEY = 'sheets-drawing-ui.config';\n\nexport const configSymbol = Symbol(SHEETS_DRAWING_UI_PLUGIN_CONFIG_KEY);\n\nexport interface IUniverSheetsDrawingUIConfig {\n    menu?: MenuConfig;\n    overrides?: DependencyOverride;\n}\n\nexport const defaultPluginConfig: IUniverSheetsDrawingUIConfig = {};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IMutation } from '@univerjs/core';\nimport { CommandType } from '@univerjs/core';\nimport { IRenderManagerService } from '@univerjs/engine-render';\n\nexport const ClearSheetDrawingTransformerOperation: IMutation<string[]> = {\n    id: 'sheet.operation.clear-drawing-transformer',\n    type: CommandType.MUTATION,\n    handler: (accessor, params) => {\n        const renderManagerService = accessor.get(IRenderManagerService);\n\n        params.forEach((unitId) => {\n            renderManagerService.getRenderById(unitId)?.scene.getTransformer()?.debounceRefreshControls();\n        });\n\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand } from '@univerjs/core';\nimport type { IDrawingJsonUndo1 } from '@univerjs/drawing';\nimport type { IDeleteDrawingCommandParams } from './interfaces';\nimport {\n    CommandType,\n    ICommandService,\n    IUndoRedoService,\n    sequenceExecute,\n} from '@univerjs/core';\nimport { SheetInterceptorService } from '@univerjs/sheets';\nimport { DrawingApplyType, ISheetDrawingService, SetDrawingApplyMutation } from '@univerjs/sheets-drawing';\nimport { ClearSheetDrawingTransformerOperation } from '../operations/clear-drawing-transformer.operation';\n\n/**\n * The command to remove new sheet image\n */\nexport const RemoveSheetDrawingCommand: ICommand = {\n    id: 'sheet.command.remove-sheet-image',\n    type: CommandType.COMMAND,\n    handler: (accessor: IAccessor, params?: IDeleteDrawingCommandParams) => {\n        const commandService = accessor.get(ICommandService);\n        const undoRedoService = accessor.get(IUndoRedoService);\n        const sheetInterceptorService = accessor.get(SheetInterceptorService);\n\n        const sheetDrawingService = accessor.get(ISheetDrawingService);\n\n        if (!params) return false;\n\n        const { drawings } = params;\n\n        const unitIds: string[] = [];\n\n        drawings.forEach((param) => {\n            const { unitId } = param;\n            unitIds.push(unitId);\n        });\n\n        const jsonOp = sheetDrawingService.getBatchRemoveOp(drawings) as IDrawingJsonUndo1;\n\n        const { unitId, subUnitId, undo, redo, objects } = jsonOp;\n\n        const intercepted = sheetInterceptorService.onCommandExecute({ id: RemoveSheetDrawingCommand.id, params });\n\n        // execute do mutations and add undo mutations to undo stack if completed\n        const removeMutation = { id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: redo, objects, type: DrawingApplyType.REMOVE } };\n        const undoRemoveMutation = { id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: undo, objects, type: DrawingApplyType.INSERT } };\n\n        const result = sequenceExecute([...(intercepted.preRedos ?? []), removeMutation, ...intercepted.redos], commandService);\n\n        if (result) {\n            undoRedoService.pushUndoRedo({\n                unitID: unitId,\n                undoMutations: [\n                    ...(intercepted.preUndos ?? []),\n                    undoRemoveMutation,\n                    ...intercepted.undos,\n                    { id: ClearSheetDrawingTransformerOperation.id, params: unitIds },\n                ],\n                redoMutations: [\n                    ...(intercepted.preRedos ?? []),\n                    removeMutation,\n                    ...intercepted.redos,\n                    { id: ClearSheetDrawingTransformerOperation.id, params: unitIds },\n                ],\n            });\n\n            return true;\n        }\n\n        return false;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const COMPONENT_SHEET_DRAWING_PANEL = 'COMPONENT_SHEET_DRAWING_PANEL';\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand } from '@univerjs/core';\nimport { CommandType, ICommandService, IUniverInstanceService, LocaleService } from '@univerjs/core';\nimport { SetDrawingSelectedOperation } from '@univerjs/drawing';\nimport { getSheetCommandTarget } from '@univerjs/sheets';\nimport { ISidebarService } from '@univerjs/ui';\nimport { COMPONENT_SHEET_DRAWING_PANEL } from '../../views/sheet-image-panel/component-name';\n\nexport interface IUIComponentCommandParams {\n    value: string;\n}\n\nexport const SidebarSheetDrawingOperation: ICommand = {\n    id: 'sidebar.operation.sheet-image',\n    type: CommandType.COMMAND,\n    handler: async (accessor: IAccessor, params: IUIComponentCommandParams) => {\n        const sidebarService = accessor.get(ISidebarService);\n        const localeService = accessor.get(LocaleService);\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        // const drawingManagerService = accessor.get(IDrawingManagerService);\n        const commandService = accessor.get(ICommandService);\n\n        const target = getSheetCommandTarget(univerInstanceService);\n        if (!target) return false;\n\n        switch (params.value) {\n            case 'open':\n                sidebarService.open({\n                    header: { title: localeService.t('sheetImage.panel.title') },\n                    children: { label: COMPONENT_SHEET_DRAWING_PANEL },\n                    onClose: () => {\n                        commandService.syncExecuteCommand(SetDrawingSelectedOperation.id, []);\n                    },\n                    width: 360,\n                });\n                break;\n            case 'close':\n            default:\n                sidebarService.close();\n                break;\n        }\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, IDrawingSearch, IOperation } from '@univerjs/core';\nimport {\n    CommandType,\n    ICommandService,\n} from '@univerjs/core';\nimport { SetDrawingSelectedOperation } from '@univerjs/drawing';\nimport { SidebarSheetDrawingOperation } from './open-drawing-panel.operation';\n\nexport const EditSheetDrawingOperation: IOperation<IDrawingSearch> = {\n    id: 'sheet.operation.edit-sheet-image',\n    type: CommandType.OPERATION,\n    handler: (accessor: IAccessor, params?: IDrawingSearch) => {\n        // const drawingManagerService = accessor.get(IDrawingManagerService);\n        const commandService = accessor.get(ICommandService);\n\n        if (params == null) {\n            return false;\n        }\n\n        commandService.syncExecuteCommand(SetDrawingSelectedOperation.id, [params]);\n        commandService.executeCommand(SidebarSheetDrawingOperation.id, { value: 'open' });\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LocaleService } from '@univerjs/core';\nimport { IImageIoService } from '@univerjs/drawing';\nimport { useDependency } from '@univerjs/ui';\nimport React, { useEffect } from 'react';\n\nimport styles from './index.module.less';\n\nexport const UploadLoading = () => {\n    const imageIoService = useDependency(IImageIoService);\n    const localeService = useDependency(LocaleService);\n\n    const [remain, setRemain] = React.useState(0);\n\n    useEffect(() => {\n        const sub = imageIoService.change$.subscribe((count) => {\n            setRemain(count);\n        });\n\n        return () => {\n            sub.unsubscribe();\n        };\n    }, [imageIoService]);\n\n    return (\n        <div style={{ display: remain > 0 ? 'block' : 'none' }} className={styles.uploadLoading}>\n            <div className={styles.uploadLoadingBody}>\n                <div className={styles.uploadLoadingBodyAnimation} />\n                <div className={styles.uploadLoadingBodyText}>{`${localeService.t('uploadLoading.loading')}: ${remain}` }</div>\n            </div>\n        </div>\n    );\n};\n", "export default {\n  \"uploadLoading\": \"univer-upload-loading\",\n  \"uploadLoadingBody\": \"univer-upload-loading-body\",\n  \"uploadLoadingBodyAnimation\": \"univer-upload-loading-body-animation\",\n  \"univerCircleAnimation\": \"univer-UniverCircleAnimation\",\n  \"uploadLoadingBodyText\": \"univer-upload-loading-body-text\"\n};import \"ni:sha-256;x4iNOgGISnoQXnMgGGZ4zxbminMpMydv-YdMSAKc4Z8\";", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, Nullable, Workbook } from '@univerjs/core';\nimport type { BaseObject, Scene } from '@univerjs/engine-render';\nimport type { ISheetFloatDom } from '@univerjs/sheets-drawing';\nimport { DrawingTypeEnum, FOCUSING_COMMON_DRAWINGS, ICommandService, IContextService, Inject, Injector, IUniverInstanceService, RxDisposable, toDisposable, UniverInstanceType } from '@univerjs/core';\nimport { IDrawingManagerService, SetDrawingSelectedOperation } from '@univerjs/drawing';\nimport { COMPONENT_IMAGE_POPUP_MENU, ImageCropperObject, ImageResetSizeOperation, OpenImageCropOperation } from '@univerjs/drawing-ui';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { SheetCanvasPopManagerService } from '@univerjs/sheets-ui';\nimport { BuiltInUIPart, connectInjector, IUIPartsService } from '@univerjs/ui';\n\nimport { takeUntil } from 'rxjs';\nimport { RemoveSheetDrawingCommand } from '../commands/commands/remove-sheet-drawing.command';\nimport { EditSheetDrawingOperation } from '../commands/operations/edit-sheet-drawing.operation';\nimport { UploadLoading } from '../views/upload-loading/UploadLoading';\n\nexport class DrawingPopupMenuController extends RxDisposable {\n    private _initImagePopupMenu = new Set<string>();\n\n    constructor(\n        @Inject(Injector) private _injector: Injector,\n        @IDrawingManagerService private readonly _drawingManagerService: IDrawingManagerService,\n        @Inject(SheetCanvasPopManagerService) private readonly _canvasPopManagerService: SheetCanvasPopManagerService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @IContextService private readonly _contextService: IContextService,\n        @Inject(IUIPartsService) private readonly _uiPartsService: IUIPartsService,\n        @ICommandService private readonly _commandService: ICommandService\n    ) {\n        super();\n\n        this._init();\n    }\n\n    private _init(): void {\n        this._univerInstanceService.getCurrentTypeOfUnit$<Workbook>(UniverInstanceType.UNIVER_SHEET).pipe(takeUntil(this.dispose$)).subscribe((workbook) => this._create(workbook));\n        this._univerInstanceService.getTypeOfUnitDisposed$<Workbook>(UniverInstanceType.UNIVER_SHEET).pipe(takeUntil(this.dispose$)).subscribe((workbook) => this._dispose(workbook));\n        this._univerInstanceService.getAllUnitsForType<Workbook>(UniverInstanceType.UNIVER_SHEET).forEach((workbook) => this._create(workbook));\n\n        this._uiPartsService.registerComponent(BuiltInUIPart.CONTENT, () => connectInjector(UploadLoading, this._injector));\n    }\n\n    private _dispose(workbook: Workbook) {\n        const unitId = workbook.getUnitId();\n        this._renderManagerService.removeRender(unitId);\n    }\n\n    private _create(workbook: Nullable<Workbook>) {\n        if (!workbook) {\n            return;\n        }\n\n        const unitId = workbook.getUnitId();\n        if (this._renderManagerService.has(unitId) && !this._initImagePopupMenu.has(unitId)) {\n            this._popupMenuListener(unitId);\n            this._initImagePopupMenu.add(unitId);\n        }\n    }\n\n    private _hasCropObject(scene: Scene) {\n        const objects = scene.getAllObjectsByOrder();\n\n        for (const object of objects) {\n            if (object instanceof ImageCropperObject) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private _popupMenuListener(unitId: string) {\n        const scene = this._renderManagerService.getRenderById(unitId)?.scene;\n        if (!scene) {\n            return;\n        }\n        const transformer = scene.getTransformerByCreate();\n        if (!transformer) {\n            return;\n        }\n        let singletonPopupDisposer: IDisposable;\n        this.disposeWithMe(\n            toDisposable(\n                transformer.createControl$.subscribe(() => {\n                    this._contextService.setContextValue(FOCUSING_COMMON_DRAWINGS, true);\n\n                    if (this._hasCropObject(scene)) {\n                        return;\n                    }\n\n                    const selectedObjects = transformer.getSelectedObjectMap();\n                    if (selectedObjects.size > 1) {\n                        singletonPopupDisposer?.dispose();\n                        return;\n                    }\n\n                    const object = selectedObjects.values().next().value as Nullable<BaseObject>;\n                    if (!object) {\n                        return;\n                    }\n\n                    const oKey = object.oKey;\n                    const drawingParam = this._drawingManagerService.getDrawingOKey(oKey);\n                    if (!drawingParam) {\n                        return;\n                    }\n\n                    const { unitId, subUnitId, drawingId, drawingType } = drawingParam;\n                    // drawingParam should be  ICanvasFloatDom, use for disable popup dialog\n                    const data = (drawingParam as ISheetFloatDom).data as Record<string, boolean>;\n                    if (data && data.disablePopup) {\n                        return;\n                    }\n\n                    singletonPopupDisposer?.dispose();\n                    const menus = this._canvasPopManagerService.getFeatureMenu(unitId, subUnitId, drawingId, drawingType);\n                    singletonPopupDisposer = this.disposeWithMe(this._canvasPopManagerService.attachPopupToObject(object, {\n                        componentKey: COMPONENT_IMAGE_POPUP_MENU,\n                        direction: 'horizontal',\n                        offset: [2, 0],\n                        extraProps: {\n                            menuItems: menus || this._getImageMenuItems(unitId, subUnitId, drawingId, drawingType),\n                        },\n                    }));\n                })\n            )\n        );\n        this.disposeWithMe(\n            transformer.clearControl$.subscribe(() => {\n                singletonPopupDisposer?.dispose();\n                this._contextService.setContextValue(FOCUSING_COMMON_DRAWINGS, false);\n                this._commandService.syncExecuteCommand(SetDrawingSelectedOperation.id, []);\n            })\n        );\n        this.disposeWithMe(\n            this._contextService.contextChanged$.subscribe((event) => {\n                if (event[FOCUSING_COMMON_DRAWINGS] === false) {\n                    singletonPopupDisposer?.dispose();\n                }\n            })\n        );\n        this.disposeWithMe(\n            transformer.changing$.subscribe(() => {\n                singletonPopupDisposer?.dispose();\n            })\n        );\n    }\n\n    private _getImageMenuItems(unitId: string, subUnitId: string, drawingId: string, drawingType: number) {\n        return [\n            {\n                label: 'image-popup.edit',\n                index: 0,\n                commandId: EditSheetDrawingOperation.id,\n                commandParams: { unitId, subUnitId, drawingId },\n                disable: drawingType === DrawingTypeEnum.DRAWING_DOM,\n            },\n            {\n                label: 'image-popup.delete',\n                index: 1,\n                commandId: RemoveSheetDrawingCommand.id,\n                commandParams: { unitId, drawings: [{ unitId, subUnitId, drawingId }] },\n                disable: false,\n            },\n            {\n                label: 'image-popup.crop',\n                index: 2,\n                commandId: OpenImageCropOperation.id,\n                commandParams: { unitId, subUnitId, drawingId },\n                disable: drawingType === DrawingTypeEnum.DRAWING_DOM,\n            },\n            {\n                label: 'image-popup.reset',\n                index: 3,\n                commandId: ImageResetSizeOperation.id,\n                commandParams: [{ unitId, subUnitId, drawingId }],\n                disable: drawingType === DrawingTypeEnum.DRAWING_DOM,\n            },\n        ];\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ITransformState, Nullable } from '@univerjs/core';\nimport type { ISheetDrawingPosition } from '@univerjs/sheets-drawing';\nimport type { ISheetSelectionRenderService, SheetSkeletonManagerService } from '@univerjs/sheets-ui';\nimport { precisionTo } from '@univerjs/engine-render';\nimport { convertPositionSheetOverGridToAbsolute } from '@univerjs/sheets-ui';\n\nexport function drawingPositionToTransform(\n    position: ISheetDrawingPosition,\n    selectionRenderService: ISheetSelectionRenderService,\n    sheetSkeletonManagerService: SheetSkeletonManagerService\n): Nullable<ITransformState> {\n    const { from, to, flipY = false, flipX = false, angle = 0, skewX = 0, skewY = 0 } = position;\n    const skeletonParam = sheetSkeletonManagerService.getCurrent();\n    if (skeletonParam == null) {\n        return;\n    }\n\n    const absolutePosition = convertPositionSheetOverGridToAbsolute(\n        skeletonParam.unitId,\n        skeletonParam.sheetId,\n        { from, to },\n        sheetSkeletonManagerService\n    );\n\n    let { left, top, width, height } = absolutePosition;\n\n    const skeleton = sheetSkeletonManagerService.getCurrentSkeleton()!;\n\n    // const startSelectionCell = attachRangeWithCoord(skeleton, {\n    //     startColumn: fromColumn,\n    //     endColumn: fromColumn,\n    //     startRow: fromRow,\n    //     endRow: fromRow,\n    // });\n\n    // if (startSelectionCell == null) {\n    //     return;\n    // }\n\n    // const endSelectionCell = attachRangeWithCoord(skeleton, {\n    //     startColumn: toColumn,\n    //     endColumn: toColumn,\n    //     startRow: toRow,\n    //     endRow: toRow,\n    // });\n\n    // if (endSelectionCell == null) {\n    //     return;\n    // }\n\n    // const { startX: startSelectionX, startY: startSelectionY } = startSelectionCell;\n\n    // const { startX: endSelectionX, startY: endSelectionY } = endSelectionCell;\n\n    // let left = precisionTo(startSelectionX + fromColumnOffset, 1);\n    // let top = precisionTo(startSelectionY + fromRowOffset, 1);\n\n    // let width = precisionTo(endSelectionX + toColumnOffset - left, 1);\n    // let height = precisionTo(endSelectionY + toRowOffset - top, 1);\n\n    // if (startSelectionCell.startX === endSelectionCell.endX) {\n    //     width = 0;\n    // }\n\n    // if (startSelectionCell.startY === endSelectionCell.endY) {\n    //     height = 0;\n    // }\n\n    const sheetWidth = skeleton.rowHeaderWidth + skeleton.columnTotalWidth;\n    const sheetHeight = skeleton.columnHeaderHeight + skeleton.rowTotalHeight;\n\n    if ((left + width) > sheetWidth) {\n        left = sheetWidth - width;\n    }\n    if ((top + height) > sheetHeight) {\n        top = sheetHeight - height;\n    }\n\n    return {\n        flipY,\n        flipX,\n        angle,\n        skewX,\n        skewY,\n        left,\n        top,\n        width,\n        height,\n    };\n}\n\n// use transform and originSize convert to  ISheetDrawingPosition\nexport function transformToDrawingPosition(transform: ITransformState, selectionRenderService: ISheetSelectionRenderService): Nullable<ISheetDrawingPosition> {\n    const { left = 0, top = 0, width = 0, height = 0, flipY = false, flipX = false, angle = 0, skewX = 0, skewY = 0 } = transform;\n\n    const startSelectionCell = selectionRenderService.getCellWithCoordByOffset(left, top);\n\n    if (startSelectionCell == null) {\n        return;\n    }\n\n    const from = {\n        column: startSelectionCell.actualColumn,\n        columnOffset: precisionTo(left - startSelectionCell.startX, 1),\n        row: startSelectionCell.actualRow,\n        rowOffset: precisionTo(top - startSelectionCell.startY, 1),\n    };\n\n    const endSelectionCell = selectionRenderService.getCellWithCoordByOffset(left + width, top + height);\n\n    if (endSelectionCell == null) {\n        return;\n    }\n\n    const to = {\n        column: endSelectionCell.actualColumn,\n        columnOffset: precisionTo(left + width - endSelectionCell.startX, 1),\n        row: endSelectionCell.actualRow,\n        rowOffset: precisionTo(top + height - endSelectionCell.startY, 1),\n    };\n\n    return {\n        flipY,\n        flipX,\n        angle,\n        skewX,\n        skewY,\n        from,\n        to,\n    };\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IRenderContext, IRenderModule } from '@univerjs/engine-render';\nimport { Disposable, Inject } from '@univerjs/core';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { ISheetDrawingService } from '@univerjs/sheets-drawing';\nimport { ISheetSelectionRenderService, SheetSkeletonManagerService } from '@univerjs/sheets-ui';\nimport { drawingPositionToTransform } from '../../basics/transform-position';\n\nexport class SheetsDrawingRenderController extends Disposable implements IRenderModule {\n    constructor(\n        private _context: IRenderContext,\n        @ISheetDrawingService private readonly _sheetDrawingService: ISheetDrawingService,\n        @IDrawingManagerService private readonly _drawingManagerService: IDrawingManagerService,\n        @Inject(ISheetSelectionRenderService) private _sheetSelectionRenderService: ISheetSelectionRenderService,\n        @Inject(SheetSkeletonManagerService) private _sheetSkeletonManagerService: SheetSkeletonManagerService\n    ) {\n        super();\n\n        this._init();\n    }\n\n    private _init(): void {\n        this._drawingInitializeListener();\n    }\n\n    private _drawingInitializeListener() {\n        // initialize drawing data and add to sheet canvas\n        this._sheetDrawingService.initializeNotification(this._context.unitId);\n        const data = this._sheetDrawingService.getDrawingDataForUnit(this._context.unitId);\n        for (const subUnit in data) {\n            const subUnitData = data[subUnit];\n            for (const drawingId in subUnitData.data) {\n                const drawingData = subUnitData.data[drawingId];\n                drawingData.transform = drawingPositionToTransform(drawingData.sheetTransform, this._sheetSelectionRenderService, this._sheetSkeletonManagerService);\n            }\n        }\n\n        this._drawingManagerService.registerDrawingData(this._context.unitId, this._sheetDrawingService.getDrawingDataForUnit(this._context.unitId));\n        this._drawingManagerService.initializeNotification(this._context.unitId);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingParam } from '@univerjs/core';\nimport type { IDrawingGroupUpdateParam } from '@univerjs/drawing';\nimport { DrawingTypeEnum } from '@univerjs/core';\nimport { getGroupState, transformObjectOutOfGroup } from '@univerjs/engine-render';\n\nexport function ungroupToGroup(ungroupParams: IDrawingGroupUpdateParam[]) {\n    const newGroupParams: IDrawingGroupUpdateParam[] = [];\n\n    ungroupParams.forEach((ungroupParam) => {\n        const { parent, children } = ungroupParam;\n        const { unitId, subUnitId, drawingId: groupId } = parent;\n        const groupTransform = getGroupState(0, 0, children.map((o) => o.transform || {}));\n\n        const newChildren = children.map((drawing) => {\n            const transform = drawing.transform || { left: 0, top: 0 };\n            const { unitId, subUnitId, drawingId } = drawing;\n            return {\n                unitId,\n                subUnitId,\n                drawingId,\n                transform: {\n                    ...transform,\n                    left: transform.left! - groupTransform.left,\n                    top: transform.top! - groupTransform.top,\n                },\n                groupId,\n            };\n        }) as IDrawingParam[];\n\n        const groupParam = {\n            unitId,\n            subUnitId,\n            drawingId: groupId,\n            drawingType: DrawingTypeEnum.DRAWING_GROUP,\n            transform: groupTransform,\n        } as IDrawingParam;\n\n        newGroupParams.push({\n            parent: groupParam,\n            children: newChildren,\n        });\n    });\n\n    return newGroupParams;\n}\n\nexport function groupToUngroup(groupParams: IDrawingGroupUpdateParam[]) {\n    const newGroupParams: IDrawingGroupUpdateParam[] = [];\n\n    groupParams.forEach((groupParam) => {\n        const { parent, children } = groupParam;\n        const { unitId, subUnitId, drawingId: groupId, transform: groupTransform = { width: 0, height: 0 } } = parent;\n        if (groupTransform == null) {\n            return;\n        }\n        const newChildren = children.map((object) => {\n            const { transform } = object;\n            const { unitId, subUnitId, drawingId } = object;\n            const newTransform = transformObjectOutOfGroup(transform || {}, groupTransform, groupTransform.width || 0, groupTransform.height || 0);\n            return {\n                unitId,\n                subUnitId,\n                drawingId,\n                transform: newTransform,\n                groupId: undefined,\n            };\n        }) as IDrawingParam[];\n\n        const ungroupParam = {\n            unitId,\n            subUnitId,\n            drawingId: groupId,\n            drawingType: DrawingTypeEnum.DRAWING_GROUP,\n            transform: {\n                left: 0,\n                top: 0,\n            },\n        } as IDrawingParam;\n\n        newGroupParams.push({\n            parent: ungroupParam,\n            children: newChildren,\n        });\n    });\n\n    return newGroupParams;\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand } from '@univerjs/core';\nimport {\n    CommandType,\n    ICommandService,\n    IUndoRedoService,\n} from '@univerjs/core';\n\nimport { DrawingApplyType, ISheetDrawingService, SetDrawingApplyMutation } from '@univerjs/sheets-drawing';\nimport type { IDrawingGroupUpdateParam, IDrawingJsonUndo1 } from '@univerjs/drawing';\nimport { ClearSheetDrawingTransformerOperation } from '../operations/clear-drawing-transformer.operation';\nimport { groupToUngroup } from './utils';\n\n/**\n * The command to insert new defined name\n */\nexport const GroupSheetDrawingCommand: ICommand = {\n    id: 'sheet.command.group-sheet-image',\n    type: CommandType.COMMAND,\n    handler: (accessor: IAccessor, params?: IDrawingGroupUpdateParam[]) => {\n        const commandService = accessor.get(ICommandService);\n        const undoRedoService = accessor.get(IUndoRedoService);\n        const sheetDrawingService = accessor.get(ISheetDrawingService);\n\n        if (!params) return false;\n\n        const unitIds: string[] = [];\n        params.forEach(({ parent, children }) => {\n            unitIds.push(parent.unitId);\n            children.forEach((child) => {\n                unitIds.push(child.unitId);\n            });\n        });\n\n        // execute do mutations and add undo mutations to undo stack if completed\n        const jsonOp = sheetDrawingService.getGroupDrawingOp(params) as IDrawingJsonUndo1;\n\n        const { unitId, subUnitId, undo, redo, objects } = jsonOp;\n\n        const result = commandService.syncExecuteCommand(SetDrawingApplyMutation.id, { op: redo, unitId, subUnitId, objects, type: DrawingApplyType.GROUP });\n\n        if (result) {\n            undoRedoService.pushUndoRedo({\n                unitID: unitId,\n                undoMutations: [\n                    { id: SetDrawingApplyMutation.id, params: { op: undo, unitId, subUnitId, objects: groupToUngroup(objects as IDrawingGroupUpdateParam[]), type: DrawingApplyType.UNGROUP } },\n                    { id: ClearSheetDrawingTransformerOperation.id, params: unitIds },\n                ],\n                redoMutations: [\n                    { id: SetDrawingApplyMutation.id, params: { op: redo, unitId, subUnitId, objects, type: DrawingApplyType.GROUP } },\n                    { id: ClearSheetDrawingTransformerOperation.id, params: unitIds },\n                ],\n            });\n\n            return true;\n        }\n\n        return false;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand } from '@univerjs/core';\nimport type { IDrawingJsonUndo1 } from '@univerjs/drawing';\n\nimport type { IInsertDrawingCommandParams } from './interfaces';\nimport {\n    CommandType,\n    ICommandService,\n    IUndoRedoService,\n    sequenceExecute,\n} from '@univerjs/core';\nimport { SheetInterceptorService } from '@univerjs/sheets';\nimport { DrawingApplyType, ISheetDrawingService, SetDrawingApplyMutation } from '@univerjs/sheets-drawing';\nimport { ClearSheetDrawingTransformerOperation } from '../operations/clear-drawing-transformer.operation';\n\n/**\n * The command to insert new defined name\n */\nexport const InsertSheetDrawingCommand: ICommand = {\n    id: 'sheet.command.insert-sheet-image',\n    type: CommandType.COMMAND,\n    handler: (accessor: IAccessor, params?: IInsertDrawingCommandParams) => {\n        const commandService = accessor.get(ICommandService);\n        const undoRedoService = accessor.get(IUndoRedoService);\n        const sheetDrawingService = accessor.get(ISheetDrawingService);\n        const sheetInterceptorService = accessor.get(SheetInterceptorService);\n\n        if (!params) return false;\n\n        // const { drawingParam, imageParam } = params;\n\n        const drawings = params.drawings;\n\n        // const sheetDrawingParams = drawings.map((param) => param.sheetDrawingParam);\n        const unitIds: string[] = drawings.map((param) => param.unitId);\n\n        // execute do mutations and add undo mutations to undo stack if completed\n        const jsonOp = sheetDrawingService.getBatchAddOp(drawings) as IDrawingJsonUndo1;\n\n        const { unitId, subUnitId, undo, redo, objects } = jsonOp;\n\n        const intercepted = sheetInterceptorService.onCommandExecute({ id: InsertSheetDrawingCommand.id, params });\n\n        const insertMutation = { id: SetDrawingApplyMutation.id, params: { op: redo, unitId, subUnitId, objects, type: DrawingApplyType.INSERT } };\n        const undoInsertMutation = { id: SetDrawingApplyMutation.id, params: { op: undo, unitId, subUnitId, objects, type: DrawingApplyType.REMOVE } };\n\n        const result = sequenceExecute([...(intercepted.preRedos ?? []), insertMutation, ...intercepted.redos], commandService);\n\n        if (result) {\n            undoRedoService.pushUndoRedo({\n                unitID: unitId,\n                undoMutations: [\n                    ...(intercepted.preUndos ?? []),\n                    undoInsertMutation,\n                    ...(intercepted.undos),\n                    { id: ClearSheetDrawingTransformerOperation.id, params: unitIds },\n                ],\n                redoMutations: [\n                    ...(intercepted.preRedos ?? []),\n                    insertMutation,\n                    ...intercepted.redos,\n                    { id: ClearSheetDrawingTransformerOperation.id, params: unitIds },\n                ],\n            });\n\n            return true;\n        }\n\n        return false;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand, Nullable } from '@univerjs/core';\nimport type { IDrawingJsonUndo1, IDrawingOrderMapParam } from '@univerjs/drawing';\nimport {\n    ArrangeTypeEnum,\n    CommandType,\n    ICommandService,\n    IUndoRedoService,\n} from '@univerjs/core';\nimport { DrawingApplyType, ISheetDrawingService, SetDrawingApplyMutation } from '@univerjs/sheets-drawing';\n\nexport interface ISetDrawingArrangeCommandParams extends IDrawingOrderMapParam {\n    arrangeType: ArrangeTypeEnum;\n}\n\n/**\n * The command to insert new defined name\n */\nexport const SetDrawingArrangeCommand: ICommand = {\n    id: 'sheet.command.set-drawing-arrange',\n    type: CommandType.COMMAND,\n    handler: (accessor: IAccessor, params?: ISetDrawingArrangeCommandParams) => {\n        const commandService = accessor.get(ICommandService);\n        const undoRedoService = accessor.get(IUndoRedoService);\n\n        if (!params) return false;\n\n        const sheetDrawingService = accessor.get(ISheetDrawingService);\n\n        const { unitId, subUnitId, drawingIds, arrangeType } = params;\n\n        const drawingOrderMapParam = { unitId, subUnitId, drawingIds } as IDrawingOrderMapParam;\n\n        let jsonOp: Nullable<IDrawingJsonUndo1>;\n        if (arrangeType === ArrangeTypeEnum.forward) {\n            jsonOp = sheetDrawingService.getForwardDrawingsOp(drawingOrderMapParam) as IDrawingJsonUndo1;\n        } else if (arrangeType === ArrangeTypeEnum.backward) {\n            jsonOp = sheetDrawingService.getBackwardDrawingOp(drawingOrderMapParam) as IDrawingJsonUndo1;\n        } else if (arrangeType === ArrangeTypeEnum.front) {\n            jsonOp = sheetDrawingService.getFrontDrawingsOp(drawingOrderMapParam) as IDrawingJsonUndo1;\n        } else if (arrangeType === ArrangeTypeEnum.back) {\n            jsonOp = sheetDrawingService.getBackDrawingsOp(drawingOrderMapParam) as IDrawingJsonUndo1;\n        }\n\n        if (jsonOp == null) {\n            return false;\n        }\n\n        const { objects, redo, undo } = jsonOp;\n\n        const result = commandService.syncExecuteCommand(SetDrawingApplyMutation.id, { op: redo, unitId, subUnitId, objects, type: DrawingApplyType.ARRANGE });\n\n        if (result) {\n            undoRedoService.pushUndoRedo({\n                unitID: unitId,\n                undoMutations: [\n                    { id: SetDrawingApplyMutation.id, params: { op: undo, unitId, subUnitId, objects, type: DrawingApplyType.ARRANGE } },\n                ],\n                redoMutations: [\n                    { id: SetDrawingApplyMutation.id, params: { op: redo, unitId, subUnitId, objects, type: DrawingApplyType.ARRANGE } },\n                ],\n            });\n\n            return true;\n        }\n\n        return false;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand } from '@univerjs/core';\nimport {\n    CommandType,\n    ICommandService,\n    IUndoRedoService,\n} from '@univerjs/core';\n\nimport type { ISheetDrawing } from '@univerjs/sheets-drawing';\nimport { DrawingApplyType, ISheetDrawingService, SetDrawingApplyMutation } from '@univerjs/sheets-drawing';\nimport type { IDrawingJsonUndo1 } from '@univerjs/drawing';\nimport { ClearSheetDrawingTransformerOperation } from '../operations/clear-drawing-transformer.operation';\nimport type { ISetDrawingCommandParams } from './interfaces';\n\n/**\n * The command to update defined name\n */\nexport const SetSheetDrawingCommand: ICommand = {\n    id: 'sheet.command.set-sheet-image',\n    type: CommandType.COMMAND,\n    handler: (accessor: IAccessor, params?: ISetDrawingCommandParams) => {\n        const commandService = accessor.get(ICommandService);\n        const undoRedoService = accessor.get(IUndoRedoService);\n        const sheetDrawingService = accessor.get(ISheetDrawingService);\n\n        if (!params) return false;\n\n        const { drawings } = params;\n\n        // const newSheetDrawingParams = drawings.map((param) => param.newDrawing);\n        // const oldSheetDrawingParams = drawings.map((param) => param.oldDrawing);\n\n        const jsonOp = sheetDrawingService.getBatchUpdateOp(drawings as ISheetDrawing[]) as IDrawingJsonUndo1;\n\n        const { unitId, subUnitId, undo, redo, objects } = jsonOp;\n\n        // execute do mutations and add undo mutations to undo stack if completed\n        const result = commandService.syncExecuteCommand(SetDrawingApplyMutation.id, { unitId, subUnitId, op: redo, objects, type: DrawingApplyType.UPDATE });\n\n        if (result) {\n            undoRedoService.pushUndoRedo({\n                unitID: unitId,\n                undoMutations: [\n                    { id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: undo, objects, type: DrawingApplyType.UPDATE } },\n                    { id: ClearSheetDrawingTransformerOperation.id, params: [unitId] },\n                ],\n                redoMutations: [\n                    { id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: redo, objects, type: DrawingApplyType.UPDATE } },\n                    { id: ClearSheetDrawingTransformerOperation.id, params: [unitId] },\n                ],\n            });\n\n            return true;\n        }\n\n        return false;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand } from '@univerjs/core';\nimport {\n    CommandType,\n    ICommandService,\n    IUndoRedoService,\n} from '@univerjs/core';\n\nimport { DrawingApplyType, ISheetDrawingService, SetDrawingApplyMutation } from '@univerjs/sheets-drawing';\nimport type { IDrawingGroupUpdateParam, IDrawingJsonUndo1 } from '@univerjs/drawing';\nimport { ClearSheetDrawingTransformerOperation } from '../operations/clear-drawing-transformer.operation';\nimport { ungroupToGroup } from './utils';\n\n/**\n * The command to insert new defined name\n */\nexport const UngroupSheetDrawingCommand: ICommand = {\n    id: 'sheet.command.ungroup-sheet-image',\n    type: CommandType.COMMAND,\n    handler: (accessor: IAccessor, params?: IDrawingGroupUpdateParam[]) => {\n        const commandService = accessor.get(ICommandService);\n        const undoRedoService = accessor.get(IUndoRedoService);\n        const sheetDrawingService = accessor.get(ISheetDrawingService);\n\n        if (!params) return false;\n\n        const unitIds: string[] = [];\n        params.forEach(({ parent, children }) => {\n            unitIds.push(parent.unitId);\n            children.forEach((child) => {\n                unitIds.push(child.unitId);\n            });\n        });\n\n        // execute do mutations and add undo mutations to undo stack if completed\n        const jsonOp = sheetDrawingService.getUngroupDrawingOp(params) as IDrawingJsonUndo1;\n\n        const { unitId, subUnitId, undo, redo, objects } = jsonOp;\n\n        const result = commandService.syncExecuteCommand(SetDrawingApplyMutation.id, { op: redo, unitId, subUnitId, objects, type: DrawingApplyType.UNGROUP });\n\n        if (result) {\n            undoRedoService.pushUndoRedo({\n                unitID: unitId,\n                undoMutations: [\n                    { id: SetDrawingApplyMutation.id, params: { op: undo, unitId, subUnitId, objects: ungroupToGroup(objects as IDrawingGroupUpdateParam[]), type: DrawingApplyType.GROUP } },\n                    { id: ClearSheetDrawingTransformerOperation.id, params: unitIds },\n                ],\n                redoMutations: [\n                    { id: SetDrawingApplyMutation.id, params: { op: redo, unitId, subUnitId, objects, type: DrawingApplyType.UNGROUP } },\n                    { id: ClearSheetDrawingTransformerOperation.id, params: unitIds },\n                ],\n            });\n\n            return true;\n        }\n\n        return false;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, IRange, Nullable, Workbook } from '@univerjs/core';\nimport type { IImageData, IImageIoServiceParam } from '@univerjs/drawing';\nimport type { IRenderContext, IRenderModule } from '@univerjs/engine-render';\nimport type { ISheetLocationBase, WorkbookSelectionModel } from '@univerjs/sheets';\nimport type { ISheetDrawing, ISheetDrawingPosition } from '@univerjs/sheets-drawing';\nimport type { IInsertDrawingCommandParams, ISetDrawingCommandParams } from '../commands/commands/interfaces';\nimport type { ISetDrawingArrangeCommandParams } from '../commands/commands/set-drawing-arrange.command';\nimport { BooleanNumber, BuildTextUtils, createDocumentModelWithStyle, Disposable, DrawingTypeEnum, FOCUSING_COMMON_DRAWINGS, generateRandomId, ICommandService, IContextService, ImageSourceType, Inject, Injector, LocaleService, ObjectRelativeFromH, ObjectRelativeFromV, PositionedObjectLayoutType, WrapTextType } from '@univerjs/core';\nimport { MessageType } from '@univerjs/design';\nimport { docDrawingPositionToTransform } from '@univerjs/docs-ui';\nimport { DRAWING_IMAGE_ALLOW_IMAGE_LIST, DRAWING_IMAGE_ALLOW_SIZE, DRAWING_IMAGE_COUNT_LIMIT, DRAWING_IMAGE_HEIGHT_LIMIT, DRAWING_IMAGE_WIDTH_LIMIT, getImageSize, IDrawingManagerService, IImageIoService, ImageUploadStatusType, SetDrawingSelectedOperation } from '@univerjs/drawing';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { SetRangeValuesCommand, SheetsSelectionsService } from '@univerjs/sheets';\nimport { ISheetDrawingService } from '@univerjs/sheets-drawing';\nimport { attachRangeWithCoord, ISheetSelectionRenderService, SheetSkeletonManagerService } from '@univerjs/sheets-ui';\nimport { ILocalFileService, IMessageService } from '@univerjs/ui';\nimport { drawingPositionToTransform, transformToDrawingPosition } from '../basics/transform-position';\nimport { GroupSheetDrawingCommand } from '../commands/commands/group-sheet-drawing.command';\nimport { InsertSheetDrawingCommand } from '../commands/commands/insert-sheet-drawing.command';\nimport { SetDrawingArrangeCommand } from '../commands/commands/set-drawing-arrange.command';\nimport { SetSheetDrawingCommand } from '../commands/commands/set-sheet-drawing.command';\nimport { UngroupSheetDrawingCommand } from '../commands/commands/ungroup-sheet-drawing.command';\n\n/**\n * Calculate the bounding box after rotation\n * @param {number} width  Width\n * @param {number} height Height\n * @param {number} angleDegrees Rotation angle in degrees (0-360)\n * @returns {{ rotatedWidth: number; rotatedHeight: number }} Rotated width and height\n */\nfunction rotatedBoundingBox(width: number, height: number, angleDegrees: number): { rotatedWidth: number; rotatedHeight: number } {\n    const angle = angleDegrees * Math.PI / 180; // Convert angle to radians\n    const rotatedWidth = Math.abs(width * Math.cos(angle)) + Math.abs(height * Math.sin(angle));\n    const rotatedHeight = Math.abs(width * Math.sin(angle)) + Math.abs(height * Math.cos(angle));\n    return { rotatedWidth, rotatedHeight };\n}\n\n/**\n * Get the size of the drawing within the cell\n * @param {IAccessor} accessor Accessor\n * @param {ISheetLocationBase} location Cell location\n * @param {number} originImageWidth Original image width\n * @param {number} originImageHeight Original image height\n * @param {number} angle Rotation angle in degrees (0-360)\n * @returns {{ width: number; height: number }} Drawing size\n */\nexport function getDrawingSizeByCell(\n    accessor: IAccessor,\n    location: ISheetLocationBase,\n    originImageWidth: number,\n    originImageHeight: number,\n    angle: number\n) {\n    const { rotatedHeight, rotatedWidth } = rotatedBoundingBox(originImageWidth, originImageHeight, angle);\n    const renderManagerService = accessor.get(IRenderManagerService);\n    const currentRender = renderManagerService.getRenderById(location.unitId);\n    if (!currentRender) {\n        return false;\n    }\n    const skeletonManagerService = currentRender.with(SheetSkeletonManagerService);\n    const skeleton = skeletonManagerService.getSkeletonParam(location.subUnitId)?.skeleton;\n    if (skeleton == null) {\n        return false;\n    }\n    const cellInfo = skeleton.getCellByIndex(location.row, location.col);\n\n    const cellWidth = cellInfo.mergeInfo.endX - cellInfo.mergeInfo.startX - 2;\n    const cellHeight = cellInfo.mergeInfo.endY - cellInfo.mergeInfo.startY - 2;\n    const imageRatio = rotatedWidth / rotatedHeight;\n    const imageWidth = Math.ceil(Math.min(cellWidth, cellHeight * imageRatio));\n    const scale = imageWidth / rotatedWidth;\n    const realScale = !(scale) || Number.isNaN(scale) ? 0.001 : scale;\n\n    return {\n        width: originImageWidth * realScale,\n        height: originImageHeight * realScale,\n    };\n}\n\nexport class SheetDrawingUpdateController extends Disposable implements IRenderModule {\n    private readonly _workbookSelections: WorkbookSelectionModel;\n    constructor(\n        private readonly _context: IRenderContext<Workbook>,\n        @Inject(SheetSkeletonManagerService) private readonly _skeletonManagerService: SheetSkeletonManagerService,\n        @ICommandService private readonly _commandService: ICommandService,\n        @ISheetSelectionRenderService private readonly _selectionRenderService: ISheetSelectionRenderService,\n        @IImageIoService private readonly _imageIoService: IImageIoService,\n        @ILocalFileService private readonly _fileOpenerService: ILocalFileService,\n        @ISheetDrawingService private readonly _sheetDrawingService: ISheetDrawingService,\n        @IDrawingManagerService private readonly _drawingManagerService: IDrawingManagerService,\n        @IContextService private readonly _contextService: IContextService,\n        @IMessageService private readonly _messageService: IMessageService,\n        @Inject(LocaleService) private readonly _localeService: LocaleService,\n        @Inject(SheetsSelectionsService) selectionManagerService: SheetsSelectionsService,\n        @Inject(Injector) private readonly _injector: Injector\n    ) {\n        super();\n\n        this._workbookSelections = selectionManagerService.getWorkbookSelections(this._context.unitId);\n\n        this._updateImageListener();\n        this._updateOrderListener();\n        this._groupDrawingListener();\n        this._focusDrawingListener();\n    }\n\n    async insertFloatImage(): Promise<boolean> {\n        const files = await this._fileOpenerService.openFile({\n            multiple: true,\n            accept: DRAWING_IMAGE_ALLOW_IMAGE_LIST.map((image) => `.${image.replace('image/', '')}`).join(','),\n        });\n\n        const fileLength = files.length;\n        if (fileLength > DRAWING_IMAGE_COUNT_LIMIT) {\n            this._messageService.show({\n                type: MessageType.Error,\n                content: this._localeService.t('update-status.exceedMaxCount', String(DRAWING_IMAGE_COUNT_LIMIT)),\n            });\n            return false;\n        } else if (fileLength === 0) {\n            return false;\n        }\n\n        files.forEach(async (file) => await this.insertFloatImageByFile(file));\n        return true;\n    }\n\n    async insertCellImage(): Promise<boolean> {\n        const files = await this._fileOpenerService.openFile({\n            multiple: false,\n            accept: DRAWING_IMAGE_ALLOW_IMAGE_LIST.map((image) => `.${image.replace('image/', '')}`).join(','),\n        });\n        const file = files[0];\n        if (file) {\n            await this._insertCellImage(file);\n            return true;\n        }\n        return false;\n    }\n\n    insertCellImageByFile(file: File, location?: ISheetLocationBase) {\n        return this._insertCellImage(file, location);\n    }\n\n    async insertFloatImageByFile(file: File) {\n        let imageParam: Nullable<IImageIoServiceParam>;\n\n        try {\n            imageParam = await this._imageIoService.saveImage(file);\n        } catch (error) {\n            const type = (error as Error).message;\n            if (type === ImageUploadStatusType.ERROR_EXCEED_SIZE) {\n                this._messageService.show({\n                    type: MessageType.Error,\n                    content: this._localeService.t('update-status.exceedMaxSize', String(DRAWING_IMAGE_ALLOW_SIZE / (1024 * 1024))),\n                });\n            } else if (type === ImageUploadStatusType.ERROR_IMAGE_TYPE) {\n                this._messageService.show({\n                    type: MessageType.Error,\n                    content: this._localeService.t('update-status.invalidImageType'),\n                });\n            } else if (type === ImageUploadStatusType.ERROR_IMAGE) {\n                this._messageService.show({\n                    type: MessageType.Error,\n                    content: this._localeService.t('update-status.invalidImage'),\n                });\n            }\n        }\n\n        if (imageParam == null) {\n            return;\n        }\n\n        const info = this._getUnitInfo();\n        const { unitId, subUnitId } = info;\n        const { imageId, imageSourceType, source, base64Cache } = imageParam;\n        const { width, height, image } = await getImageSize(base64Cache || '');\n        const { width: sceneWidth, height: sceneHeight } = this._context.scene;\n\n        this._imageIoService.addImageSourceCache(source, imageSourceType, image);\n\n        let scale = 1;\n        if (width > DRAWING_IMAGE_WIDTH_LIMIT || height > DRAWING_IMAGE_HEIGHT_LIMIT) {\n            const scaleWidth = DRAWING_IMAGE_WIDTH_LIMIT / width;\n            const scaleHeight = DRAWING_IMAGE_HEIGHT_LIMIT / height;\n            scale = Math.max(scaleWidth, scaleHeight);\n        }\n\n        const sheetTransform = this._getImagePosition(width * scale, height * scale, sceneWidth, sceneHeight);\n\n        if (sheetTransform == null) {\n            return;\n        }\n\n        const sheetDrawingParam: ISheetDrawing = {\n            unitId,\n            subUnitId,\n            drawingId: imageId,\n            drawingType: DrawingTypeEnum.DRAWING_IMAGE,\n            imageSourceType,\n            source,\n            transform: drawingPositionToTransform(sheetTransform, this._selectionRenderService, this._skeletonManagerService),\n            sheetTransform,\n        };\n\n        return this._commandService.executeCommand(InsertSheetDrawingCommand.id, {\n            unitId,\n            drawings: [sheetDrawingParam],\n        } as IInsertDrawingCommandParams);\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    private async _insertCellImage(file: File, location?: ISheetLocationBase) {\n        let imageParam: Nullable<IImageIoServiceParam>;\n        try {\n            imageParam = await this._imageIoService.saveImage(file);\n        } catch (error) {\n            const type = (error as Error).message;\n            if (type === ImageUploadStatusType.ERROR_EXCEED_SIZE) {\n                this._messageService.show({\n                    type: MessageType.Error,\n                    content: this._localeService.t('update-status.exceedMaxSize', String(DRAWING_IMAGE_ALLOW_SIZE / (1024 * 1024))),\n                });\n            } else if (type === ImageUploadStatusType.ERROR_IMAGE_TYPE) {\n                this._messageService.show({\n                    type: MessageType.Error,\n                    content: this._localeService.t('update-status.invalidImageType'),\n                });\n            } else if (type === ImageUploadStatusType.ERROR_IMAGE) {\n                this._messageService.show({\n                    type: MessageType.Error,\n                    content: this._localeService.t('update-status.invalidImage'),\n                });\n            }\n        }\n\n        if (imageParam == null) {\n            return false;\n        }\n\n        const { imageId, imageSourceType, source, base64Cache } = imageParam;\n        const { width, height, image } = await getImageSize(base64Cache || '');\n        this._imageIoService.addImageSourceCache(source, imageSourceType, image);\n        const selection = this._workbookSelections.getCurrentLastSelection();\n        if (!selection) {\n            return false;\n        }\n        const docDataModel = createDocumentModelWithStyle('', {});\n\n        const imageSize = getDrawingSizeByCell(\n            this._injector,\n            {\n                unitId: this._context.unitId,\n                subUnitId: this._context.unit.getActiveSheet().getSheetId(),\n                row: selection.primary.actualRow,\n                col: selection.primary.actualColumn,\n            },\n            width,\n            height,\n            0\n        );\n        if (!imageSize) {\n            return false;\n        }\n        const docTransform = {\n            size: {\n                width: imageSize.width,\n                height: imageSize.height,\n            },\n            positionH: {\n                relativeFrom: ObjectRelativeFromH.PAGE,\n                posOffset: 0,\n            },\n            positionV: {\n                relativeFrom: ObjectRelativeFromV.PARAGRAPH,\n                posOffset: 0,\n            },\n            angle: 0,\n        };\n        const docDrawingParam = {\n            unitId: docDataModel.getUnitId(),\n            subUnitId: docDataModel.getUnitId(),\n            drawingId: imageId,\n            drawingType: DrawingTypeEnum.DRAWING_IMAGE,\n            imageSourceType,\n            source,\n            transform: docDrawingPositionToTransform(docTransform),\n            docTransform,\n            behindDoc: BooleanNumber.FALSE,\n            title: '',\n            description: '',\n            layoutType: PositionedObjectLayoutType.INLINE, // Insert inline drawing by default.\n            wrapText: WrapTextType.BOTH_SIDES,\n            distB: 0,\n            distL: 0,\n            distR: 0,\n            distT: 0,\n        };\n\n        const jsonXActions = BuildTextUtils.drawing.add({\n            documentDataModel: docDataModel,\n            drawings: [docDrawingParam],\n            selection: {\n                collapsed: true,\n                startOffset: 0,\n                endOffset: 0,\n            },\n        });\n\n        if (jsonXActions) {\n            docDataModel.apply(jsonXActions);\n\n            return this._commandService.syncExecuteCommand(SetRangeValuesCommand.id, {\n                value: {\n                    [location?.row ?? selection.primary.actualRow]: {\n                        [location?.col ?? selection.primary.actualColumn]: {\n                            p: (docDataModel.getSnapshot()),\n                            t: 1,\n                        },\n                    },\n                },\n                unitId: location?.unitId,\n                subUnitId: location?.subUnitId,\n            });\n        }\n\n        return false;\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    async insertCellImageByUrl(url: string, location?: ISheetLocationBase) {\n        const { width, height, image } = await getImageSize(url || '');\n        this._imageIoService.addImageSourceCache(url, ImageSourceType.URL, image);\n        const selection = this._workbookSelections.getCurrentLastSelection();\n        if (!selection) {\n            return false;\n        }\n        const docDataModel = createDocumentModelWithStyle('', {});\n\n        const imageSize = getDrawingSizeByCell(\n            this._injector,\n            {\n                unitId: this._context.unitId,\n                subUnitId: this._context.unit.getActiveSheet().getSheetId(),\n                row: selection.primary.actualRow,\n                col: selection.primary.actualColumn,\n            },\n            width,\n            height,\n            0\n        );\n        if (!imageSize) {\n            return false;\n        }\n        const docTransform = {\n            size: {\n                width: imageSize.width,\n                height: imageSize.height,\n            },\n            positionH: {\n                relativeFrom: ObjectRelativeFromH.PAGE,\n                posOffset: 0,\n            },\n            positionV: {\n                relativeFrom: ObjectRelativeFromV.PARAGRAPH,\n                posOffset: 0,\n            },\n            angle: 0,\n        };\n        const docDrawingParam = {\n            unitId: docDataModel.getUnitId(),\n            subUnitId: docDataModel.getUnitId(),\n            drawingId: generateRandomId(),\n            drawingType: DrawingTypeEnum.DRAWING_IMAGE,\n            imageSourceType: ImageSourceType.URL,\n            source: url,\n            transform: docDrawingPositionToTransform(docTransform),\n            docTransform,\n            behindDoc: BooleanNumber.FALSE,\n            title: '',\n            description: '',\n            layoutType: PositionedObjectLayoutType.INLINE, // Insert inline drawing by default.\n            wrapText: WrapTextType.BOTH_SIDES,\n            distB: 0,\n            distL: 0,\n            distR: 0,\n            distT: 0,\n        };\n\n        const jsonXActions = BuildTextUtils.drawing.add({\n            documentDataModel: docDataModel,\n            drawings: [docDrawingParam],\n            selection: {\n                collapsed: true,\n                startOffset: 0,\n                endOffset: 0,\n            },\n        });\n\n        if (jsonXActions) {\n            docDataModel.apply(jsonXActions);\n            return this._commandService.syncExecuteCommand(SetRangeValuesCommand.id, {\n                value: {\n                    [location?.row ?? selection.primary.actualRow]: {\n                        [location?.col ?? selection.primary.actualColumn]: {\n                            p: (docDataModel.getSnapshot()),\n                            t: 1,\n                        },\n                    },\n                },\n                unitId: location?.unitId,\n                subUnitId: location?.subUnitId,\n            });\n        }\n\n        return false;\n    }\n\n    private _getUnitInfo() {\n        const workbook = this._context.unit;\n        const worksheet = workbook.getActiveSheet();\n        const unitId = workbook.getUnitId();\n        const subUnitId = worksheet.getSheetId();\n\n        return {\n            unitId,\n            subUnitId,\n        };\n    }\n\n    private _getImagePosition(imageWidth: number, imageHeight: number, sceneWidth: number, sceneHeight: number): Nullable<ISheetDrawingPosition> {\n        const selections = this._workbookSelections.getCurrentSelections();\n        let range: IRange = {\n            startRow: 0,\n            endRow: 0,\n            startColumn: 0,\n            endColumn: 0,\n        };\n        if (selections && selections.length > 0) {\n            range = selections[selections.length - 1].range;\n        }\n\n        const rangeWithCoord = attachRangeWithCoord(this._skeletonManagerService.getCurrent()!.skeleton, range);\n        if (rangeWithCoord == null) {\n            return;\n        }\n\n        let { startColumn, startRow, startX, startY } = rangeWithCoord;\n\n        let isChangeStart = false;\n        if (startX + imageWidth > sceneWidth) {\n            startX = sceneWidth - imageWidth;\n\n            if (startX < 0) {\n                startX = 0;\n                imageWidth = sceneWidth;\n            }\n\n            isChangeStart = true;\n        }\n\n        if (startY + imageHeight > sceneHeight) {\n            startY = sceneHeight - imageHeight;\n\n            if (startY < 0) {\n                startY = 0;\n                imageHeight = sceneHeight;\n            }\n\n            isChangeStart = true;\n        }\n\n        if (isChangeStart) {\n            const newCoord = this._selectionRenderService.getCellWithCoordByOffset(startX, startY);\n            if (newCoord == null) {\n                return;\n            }\n            startX = newCoord.startX;\n            startY = newCoord.startY;\n            startColumn = newCoord.actualColumn;\n            startRow = newCoord.actualRow;\n        }\n\n        const from = {\n            column: startColumn,\n            columnOffset: 0,\n            row: startRow,\n            rowOffset: 0,\n        };\n\n        const endSelectionCell = this._selectionRenderService.getCellWithCoordByOffset(startX + imageWidth, startY + imageHeight);\n\n        if (endSelectionCell == null) {\n            return;\n        }\n\n        const to = {\n            column: endSelectionCell.actualColumn,\n            columnOffset: startX + imageWidth - endSelectionCell.startX,\n            row: endSelectionCell.actualRow,\n            rowOffset: startY + imageHeight - endSelectionCell.startY,\n        };\n\n        return {\n            from,\n            to,\n        };\n    }\n\n    private _updateOrderListener() {\n        this.disposeWithMe(this._drawingManagerService.featurePluginOrderUpdate$.subscribe((params) => {\n            const { unitId, subUnitId, drawingIds, arrangeType } = params;\n\n            this._commandService.executeCommand(SetDrawingArrangeCommand.id, {\n                unitId,\n                subUnitId,\n                drawingIds,\n                arrangeType,\n            } as ISetDrawingArrangeCommandParams);\n        }));\n    }\n\n    private _updateImageListener() {\n        this.disposeWithMe(this._drawingManagerService.featurePluginUpdate$.subscribe((params) => {\n            const drawings: Partial<ISheetDrawing>[] = [];\n\n            if (params.length === 0) {\n                return;\n            }\n\n            (params as IImageData[]).forEach((param) => {\n                const { unitId, subUnitId, drawingId, drawingType, transform } = param;\n                if (transform == null) {\n                    return;\n                }\n\n                const sheetDrawing = this._sheetDrawingService.getDrawingByParam({ unitId, subUnitId, drawingId });\n\n                // const imageDrawing = this._drawingManagerService.getDrawingByParam({ unitId, subUnitId, drawingId });\n\n                if (sheetDrawing == null || sheetDrawing.unitId !== this._context.unitId) {\n                    return;\n                }\n\n                const sheetTransform = transformToDrawingPosition({ ...sheetDrawing.transform, ...transform }, this._selectionRenderService);\n\n                if (sheetTransform == null) {\n                    return;\n                }\n\n                // const oldDrawing: Partial<ISheetDrawing> = {\n                //     ...sheetDrawing,\n                // };\n\n                const newDrawing: Partial<ISheetDrawing> = {\n                    ...param,\n                    transform: { ...sheetDrawing.transform, ...transform, ...drawingPositionToTransform(sheetTransform, this._selectionRenderService, this._skeletonManagerService) },\n                    sheetTransform: { ...sheetTransform },\n                };\n\n                drawings.push(newDrawing);\n            });\n\n            if (drawings.length > 0) {\n                this._commandService.executeCommand(SetSheetDrawingCommand.id, {\n                    unitId: params[0].unitId,\n                    drawings,\n                } as ISetDrawingCommandParams);\n            }\n        }));\n    }\n\n    private _groupDrawingListener() {\n        this.disposeWithMe(this._drawingManagerService.featurePluginGroupUpdate$.subscribe((params) => {\n            this._commandService.executeCommand(GroupSheetDrawingCommand.id, params);\n            const { unitId, subUnitId, drawingId } = params[0].parent;\n            this._commandService.syncExecuteCommand(SetDrawingSelectedOperation.id, [{ unitId, subUnitId, drawingId }]);\n        }));\n\n        this.disposeWithMe(this._drawingManagerService.featurePluginUngroupUpdate$.subscribe((params) => {\n            this._commandService.executeCommand(UngroupSheetDrawingCommand.id, params);\n        }));\n    }\n\n    private _focusDrawingListener() {\n        this.disposeWithMe(\n            this._drawingManagerService.focus$.subscribe((params) => {\n                if (params == null || params.length === 0) {\n                    this._contextService.setContextValue(FOCUSING_COMMON_DRAWINGS, false);\n                    this._sheetDrawingService.focusDrawing([]);\n                } else {\n                    this._contextService.setContextValue(FOCUSING_COMMON_DRAWINGS, true);\n                    this._sheetDrawingService.focusDrawing(params);\n                }\n            })\n        );\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICellData, IDocDrawingBase, Nullable } from '@univerjs/core';\nimport type { IReplaceSnapshotCommandParams } from '@univerjs/docs-ui';\nimport type { IImageData } from '@univerjs/drawing';\nimport type { ISheetLocationBase } from '@univerjs/sheets';\nimport type { IEditorBridgeServiceVisibleParam } from '@univerjs/sheets-ui';\nimport { Disposable, DOCS_NORMAL_EDITOR_UNIT_ID_KEY, DOCS_ZEN_EDITOR_UNIT_ID_KEY, ICommandService, Inject, Injector, InterceptorEffectEnum } from '@univerjs/core';\nimport { DocDrawingController } from '@univerjs/docs-drawing';\nimport { ReplaceSnapshotCommand } from '@univerjs/docs-ui';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { DeviceInputEventType } from '@univerjs/engine-render';\nimport { InterceptCellContentPriority, INTERCEPTOR_POINT, SheetInterceptorService } from '@univerjs/sheets';\nimport { IEditorBridgeService, SetCellEditVisibleOperation } from '@univerjs/sheets-ui';\nimport { getDrawingSizeByCell } from './sheet-drawing-update.controller';\n\nexport function resizeImageByCell(injector: Injector, location: ISheetLocationBase, cell: Nullable<ICellData>) {\n    if (cell?.p?.body?.dataStream.length === 3 && cell.p?.drawingsOrder?.length === 1) {\n        const image = cell.p.drawings![cell.p.drawingsOrder[0]]! as IImageData & IDocDrawingBase;\n        const imageSize = getDrawingSizeByCell(\n            injector,\n            {\n                unitId: location.unitId,\n                subUnitId: location.subUnitId,\n                row: location.row,\n                col: location.col,\n            },\n            image.docTransform!.size.width!,\n            image.docTransform!.size.height!,\n            image.docTransform!.angle\n        );\n\n        if (imageSize) {\n            image.transform!.width = imageSize.width;\n            image.transform!.height = imageSize.height;\n            image.docTransform!.size.width = imageSize.width;\n            image.docTransform!.size.height = imageSize.height;\n            image.transform!.left = 0;\n            image.transform!.top = 0;\n            image.docTransform!.positionH.posOffset = 0;\n            image.docTransform!.positionV.posOffset = 0;\n\n            cell.p.documentStyle.pageSize!.width = Infinity;\n            cell.p.documentStyle.pageSize!.height = Infinity;\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport class SheetCellImageController extends Disposable {\n    constructor(\n        @ICommandService private readonly _commandService: ICommandService,\n        @Inject(SheetInterceptorService) private readonly _sheetInterceptorService: SheetInterceptorService,\n        @Inject(Injector) private readonly _injector: Injector,\n        @IDrawingManagerService private readonly _drawingManagerService: IDrawingManagerService,\n        @Inject(DocDrawingController) private readonly _docDrawingController: DocDrawingController,\n        @Inject(IEditorBridgeService) private readonly _editorBridgeService: IEditorBridgeService\n    ) {\n        super();\n\n        this._handleInitEditor();\n        this._initCellContentInterceptor();\n        this._initDisableEdit();\n    }\n\n    private _initDisableEdit() {\n        this.disposeWithMe(this._commandService.beforeCommandExecuted((commandInfo) => {\n            if (commandInfo.id === SetCellEditVisibleOperation.id) {\n                const params = commandInfo.params as IEditorBridgeServiceVisibleParam;\n                const { visible, eventType } = params;\n                if (visible && eventType === DeviceInputEventType.Dblclick) {\n                    const editState = this._editorBridgeService.getEditCellState();\n                    const drawingCount = editState?.documentLayoutObject.documentModel?.getDrawingsOrder()?.length ?? 0;\n                    if (drawingCount > 0) {\n                        throw new Error('Can not edit when there are drawings.');\n                    }\n                }\n            }\n        }));\n    }\n\n    private _handleInitEditor() {\n        this.disposeWithMe(this._editorBridgeService.visible$.subscribe((param) => {\n            if (!param.visible) {\n                this._drawingManagerService.removeDrawingDataForUnit(DOCS_NORMAL_EDITOR_UNIT_ID_KEY);\n            } else if (param.visible) {\n                this._drawingManagerService.removeDrawingDataForUnit(DOCS_NORMAL_EDITOR_UNIT_ID_KEY);\n                this._docDrawingController.loadDrawingDataForUnit(DOCS_NORMAL_EDITOR_UNIT_ID_KEY);\n                this._drawingManagerService.initializeNotification(DOCS_NORMAL_EDITOR_UNIT_ID_KEY);\n            }\n        }));\n\n        this.disposeWithMe(this._commandService.onCommandExecuted((commandInfo) => {\n            if (commandInfo.id === ReplaceSnapshotCommand.id) {\n                const params = commandInfo.params as IReplaceSnapshotCommandParams;\n                const unitId = params.unitId;\n                if (unitId === DOCS_ZEN_EDITOR_UNIT_ID_KEY) {\n                    this._drawingManagerService.removeDrawingDataForUnit(DOCS_ZEN_EDITOR_UNIT_ID_KEY);\n                    this._docDrawingController.loadDrawingDataForUnit(DOCS_ZEN_EDITOR_UNIT_ID_KEY);\n                    this._drawingManagerService.initializeNotification(DOCS_ZEN_EDITOR_UNIT_ID_KEY);\n                }\n            }\n        }));\n    }\n\n    private _initCellContentInterceptor() {\n        this.disposeWithMe(\n            this._sheetInterceptorService.intercept(\n                INTERCEPTOR_POINT.CELL_CONTENT,\n                {\n                    effect: InterceptorEffectEnum.Style,\n                    priority: InterceptCellContentPriority.CELL_IMAGE,\n                    handler: (cell, pos, next) => {\n                        if (cell?.p && cell.p.drawingsOrder?.length) {\n                            if (!cell.interceptorStyle) {\n                                cell.interceptorStyle = {};\n                            }\n                            cell.interceptorStyle.tr = { a: 0 };\n\n                            resizeImageByCell(this._injector, { unitId: pos.unitId, subUnitId: pos.subUnitId, row: pos.row, col: pos.col }, cell);\n                        }\n\n                        return next(cell);\n                    },\n                }\n            )\n        );\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Disposable, Inject, Injector, ObjectMatrix } from '@univerjs/core';\nimport { IAutoFillService } from '@univerjs/sheets-ui';\nimport { resizeImageByCell } from './sheet-cell-image.controller';\n\nexport class SheetCellImageAutofillController extends Disposable {\n    constructor(\n        @Inject(IAutoFillService) private readonly _autoFillService: IAutoFillService,\n        @Inject(Injector) private readonly _injector: Injector\n    ) {\n        super();\n\n        this._initAutoFillHooks();\n    }\n\n    private _initAutoFillHooks(): void {\n        this.disposeWithMe(\n            this._autoFillService.addHook({\n                id: 'sheet-cell-image-autofill',\n                onBeforeSubmit: (location, direction, applyType, cellValue) => {\n                    new ObjectMatrix(cellValue).forValue((row, col, cell) => {\n                        resizeImageByCell(this._injector, { unitId: location.unitId, subUnitId: location.subUnitId, row, col }, cell);\n                    });\n                },\n            })\n        );\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Disposable, Inject } from '@univerjs/core';\nimport { DrawingRenderService } from '@univerjs/drawing-ui';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { SheetsSelectionsService } from '@univerjs/sheets';\nimport { HoverManagerService } from '@univerjs/sheets-ui';\n\nexport class SheetCellImageHoverController extends Disposable {\n    private _isSetCursor = false;\n\n    constructor(\n        @Inject(HoverManagerService) private _hoverManagerService: HoverManagerService,\n        @Inject(IRenderManagerService) private _renderManagerService: IRenderManagerService,\n        @Inject(SheetsSelectionsService) private _selectionsService: SheetsSelectionsService,\n        @Inject(DrawingRenderService) private _drawingRenderService: DrawingRenderService\n    ) {\n        super();\n        // this._initHover();\n        // this._initImageClick();\n    }\n\n    private _initHover() {\n\n    }\n\n    private _initImageClick() {\n\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommand, Nullable } from '@univerjs/core';\nimport { CommandType, IUniverInstanceService, UniverInstanceType } from '@univerjs/core';\nimport { getCurrentTypeOfRenderer, IRenderManagerService } from '@univerjs/engine-render';\nimport { SheetDrawingUpdateController } from '../../controllers/sheet-drawing-update.controller';\n\nexport interface IInsertImageCommandParams {\n    files: Nullable<File[]>;\n};\n\nexport const InsertFloatImageCommand: ICommand<IInsertImageCommandParams> = {\n    id: 'sheet.command.insert-float-image',\n    type: CommandType.COMMAND,\n    handler: async (accessor, params) => {\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        const renderManagerService = accessor.get(IRenderManagerService);\n        const sheetDrawingUpdateController = getCurrentTypeOfRenderer(\n            UniverInstanceType.UNIVER_SHEET,\n            univerInstanceService,\n            renderManagerService\n        )\n            ?.with(SheetDrawingUpdateController);\n\n        if (!sheetDrawingUpdateController) {\n            return false;\n        }\n        const files = params?.files;\n\n        if (files) {\n            const awaitFiles = files.map((file) => sheetDrawingUpdateController.insertFloatImageByFile(file));\n\n            return (await Promise.all(awaitFiles)).every((result) => result);\n        } else {\n            return sheetDrawingUpdateController.insertFloatImage() ?? false;\n        }\n    },\n};\n\nexport const InsertCellImageCommand: ICommand = {\n    id: 'sheet.command.insert-cell-image',\n    type: CommandType.COMMAND,\n    handler: (accessor) => {\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        const renderManagerService = accessor.get(IRenderManagerService);\n\n        return getCurrentTypeOfRenderer(\n            UniverInstanceType.UNIVER_SHEET,\n            univerInstanceService,\n            renderManagerService\n        )\n            ?.with(SheetDrawingUpdateController)\n            .insertCellImage() ?? false;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IMutationInfo, IRange, Nullable } from '@univerjs/core';\nimport type { IDrawingJsonUndo1 } from '@univerjs/drawing';\nimport type { ISheetDrawing, ISheetImage } from '@univerjs/sheets-drawing';\nimport type { IDiscreteRange, IPasteHookValueType, ISheetDiscreteRangeLocation } from '@univerjs/sheets-ui';\nimport type { IDeleteDrawingCommandParams } from '../commands/commands/interfaces';\nimport { Disposable, DrawingTypeEnum, ICommandService, Tools } from '@univerjs/core';\nimport { IDrawingManagerService, ImageSourceType } from '@univerjs/drawing';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { DrawingApplyType, SetDrawingApplyMutation, SheetDrawingAnchorType } from '@univerjs/sheets-drawing';\n\nimport { COPY_TYPE, discreteRangeToRange, ISheetClipboardService, ISheetSelectionRenderService, PREDEFINED_HOOK_NAME, SheetSkeletonManagerService, virtualizeDiscreteRanges } from '@univerjs/sheets-ui';\nimport { IClipboardInterfaceService } from '@univerjs/ui';\nimport { transformToDrawingPosition } from '../basics/transform-position';\nimport { InsertFloatImageCommand } from '../commands/commands/insert-image.command';\nimport { RemoveSheetDrawingCommand } from '../commands/commands/remove-sheet-drawing.command';\n\nconst IMAGE_PNG_MIME_TYPE = 'image/png';\n\nfunction base64ToBlob(base64: string) {\n    const arr = base64.split(',');\n    const binStr = atob(arr[1]);\n    const len = binStr.length;\n    const bytes = new Uint8Array(len);\n\n    for (let i = 0; i < len; i++) {\n        bytes[i] = binStr.charCodeAt(i);\n    }\n\n    return new Blob([bytes], { type: IMAGE_PNG_MIME_TYPE });\n}\n\nfunction copyBase64ToClipboard(base64: string) {\n    const item = new ClipboardItem({ [IMAGE_PNG_MIME_TYPE]: base64ToBlob(base64) });\n    navigator.clipboard.write([item]).catch((err) => {\n        console.error('Could not copy image using clipboard API: ', err);\n    });\n}\n\nfunction focusDocument() {\n    function createInputElement() {\n        const input = document.createElement('input');\n        input.style.position = 'absolute';\n        input.style.height = '1px';\n        input.style.width = '1px';\n        input.style.opacity = '0';\n\n        return input;\n    }\n\n    const activeElement = document.activeElement;\n    const input = createInputElement();\n    document.body.appendChild(input);\n    input.focus();\n\n    return () => {\n        input.blur();\n        document.body.removeChild(input);\n        if (activeElement instanceof HTMLElement) {\n            activeElement.focus();\n        }\n    };\n}\n\nconst specialPastes: IPasteHookValueType[] = [\n    PREDEFINED_HOOK_NAME.SPECIAL_PASTE_COL_WIDTH,\n    PREDEFINED_HOOK_NAME.SPECIAL_PASTE_VALUE,\n    PREDEFINED_HOOK_NAME.SPECIAL_PASTE_FORMAT,\n    PREDEFINED_HOOK_NAME.SPECIAL_PASTE_FORMULA,\n];\n\nexport class SheetsDrawingCopyPasteController extends Disposable {\n    private _copyInfo: Nullable<{\n        drawings: ISheetDrawing[];\n        copyRange?: IRange;\n        unitId: string;\n        subUnitId: string;\n    }>;\n\n    constructor(\n        @ISheetClipboardService private _sheetClipboardService: ISheetClipboardService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService,\n        @IDrawingManagerService private readonly _drawingService: IDrawingManagerService,\n        @IClipboardInterfaceService private readonly _clipboardInterfaceService: IClipboardInterfaceService,\n        @ICommandService private readonly _commandService: ICommandService\n    ) {\n        super();\n        this._initCopyPaste();\n    }\n\n    private get _focusedDrawings() {\n        return this._drawingService.getFocusDrawings() as ISheetDrawing[];\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    private _initCopyPaste() {\n        this._sheetClipboardService.addClipboardHook({\n            id: 'SHEET_IMAGE_UI_PLUGIN',\n\n            onBeforeCopy: (unitId, subUnitId, range, copyType) => {\n                const focusDrawings = this._focusedDrawings;\n                if (focusDrawings.length > 0) {\n                    // handle single drawing copy\n                    const [drawing] = focusDrawings;\n\n                    if (copyType === COPY_TYPE.CUT) {\n                        const params: IDeleteDrawingCommandParams = {\n                            unitId,\n                            drawings: [drawing],\n                        };\n                        // Delete the drawing when it is cut\n                        this._commandService.executeCommand(RemoveSheetDrawingCommand.id, params);\n                    }\n\n                    setTimeout(() => {\n                        // Rewrite the clipboard content to prevent the default copy behavior, prevent to call the 'onPasteCells'\n                        const dispose = focusDocument();\n                        if (drawing.drawingType === DrawingTypeEnum.DRAWING_IMAGE\n                            && (drawing as ISheetImage).imageSourceType === ImageSourceType.BASE64) {\n                            copyBase64ToClipboard((drawing as ISheetImage).source);\n                        } else {\n                            this._clipboardInterfaceService.writeText('');\n                        }\n                        dispose();\n                    }, 200);\n\n                    const newCopyInfo = {\n                        unitId: drawing.unitId,\n                        subUnitId: drawing.subUnitId,\n                        drawings: [drawing],\n                    };\n\n                    this._copyInfo = newCopyInfo;\n                } else {\n                    // handle copy range that contained drawings\n                    const newCopyInfo = this._createDrawingsCopyInfoByRange(unitId, subUnitId, range);\n                    this._copyInfo = newCopyInfo;\n                }\n            },\n\n            onPasteCells: (pasteFrom, pasteTo, data, payload) => {\n                if (!this._copyInfo) {\n                    return { redos: [], undos: [] };\n                }\n\n                const { copyType = COPY_TYPE.COPY, pasteType } = payload;\n                const { range: copyRange } = pasteFrom || {};\n                const { range: pasteRange, unitId, subUnitId } = pasteTo;\n\n                const mutations = this._copyInfo.copyRange\n                    ? this._generateRangeDrawingsPasteMutations({ pasteType, unitId, subUnitId, pasteRange }, { copyRange, copyType })\n                    : this._generateSingleDrawingPasteMutations({ pasteTo, pasteType }, COPY_TYPE.COPY);\n\n                return mutations;\n            },\n\n            onPastePlainText: (pasteTo: ISheetDiscreteRangeLocation, clipText: string) => {\n                return { undos: [], redos: [] };\n            },\n\n            onPasteUnrecognized: (pasteTo: ISheetDiscreteRangeLocation) => {\n                if (this._copyInfo) {\n                    return this._generateSingleDrawingPasteMutations({ pasteTo, pasteType: PREDEFINED_HOOK_NAME.DEFAULT_PASTE }, COPY_TYPE.COPY);\n                } else {\n                    return { undos: [], redos: [] };\n                }\n            },\n\n            onPasteFiles: (pasteTo: ISheetDiscreteRangeLocation, files) => {\n                if (this._copyInfo) {\n                    return this._generateSingleDrawingPasteMutations({ pasteTo, pasteType: PREDEFINED_HOOK_NAME.DEFAULT_PASTE }, COPY_TYPE.COPY);\n                } else {\n                    // Paste image from external\n                    const images = files.filter((file) => file.type.includes('image'));\n                    if (images.length) {\n                        return {\n                            undos: [],\n                            redos: [\n                                {\n                                    id: InsertFloatImageCommand.id,\n                                    params: { files: images },\n                                },\n                            ],\n                        };\n                    }\n                }\n\n                return { undos: [], redos: [] };\n            },\n        });\n    }\n\n    private _createDrawingsCopyInfoByRange(unitId: string, subUnitId: string, range: IRange) {\n        const skeletonManagerService = this._renderManagerService.getRenderById(unitId)?.with(SheetSkeletonManagerService);\n        if (!skeletonManagerService) return;\n\n        const selectionRect = skeletonManagerService.attachRangeWithCoord(range);\n        if (!selectionRect) {\n            return;\n        }\n\n        const { startX, endX, startY, endY } = selectionRect;\n        const drawings = this._drawingService.getDrawingData(unitId, subUnitId);\n\n        const containedDrawings: ISheetDrawing[] = this._focusedDrawings.slice();\n\n        Object.keys(drawings).forEach((drawingId) => {\n            const drawing = drawings[drawingId];\n            const { transform } = drawing;\n            if ((drawing as ISheetDrawing).anchorType !== SheetDrawingAnchorType.Both) {\n                return;\n            }\n            if (!transform) {\n                return;\n            }\n            const { left = 0, top = 0, width = 0, height = 0 } = transform;\n            const { drawingStartX, drawingEndX, drawingStartY, drawingEndY } = {\n                drawingStartX: left,\n                drawingEndX: left + width,\n                drawingStartY: top,\n                drawingEndY: top + height,\n            };\n\n            if (startX <= drawingStartX && drawingEndX <= endX && startY <= drawingStartY && drawingEndY <= endY) {\n                containedDrawings.push(drawing as ISheetDrawing);\n            }\n        });\n\n        if (containedDrawings.length) {\n            return {\n                copyRange: range,\n                drawings: containedDrawings,\n                unitId,\n                subUnitId,\n            };\n        }\n    }\n\n    private _generateSingleDrawingPasteMutations(pasteContext: {\n        pasteTo: ISheetDiscreteRangeLocation;\n        pasteType: IPasteHookValueType;\n    }, copyType: COPY_TYPE) {\n        const { pasteType, pasteTo } = pasteContext;\n\n        if (specialPastes.includes(pasteType)) {\n            return { redos: [], undos: [] };\n        }\n\n        const { unitId, subUnitId, range } = pasteTo;\n        const render = this._renderManagerService.getRenderById(unitId);\n        const skeletonManagerService = render?.with(SheetSkeletonManagerService);\n        const selectionRenderService = render?.with(ISheetSelectionRenderService);\n\n        const copyInfo = this._copyInfo!;\n\n        if (!skeletonManagerService || !selectionRenderService) {\n            return { redos: [], undos: [] };\n        }\n\n        const { drawings } = copyInfo;\n\n        const pasteRange = discreteRangeToRange(range);\n\n        return this._generateMutations(drawings, {\n            unitId,\n            subUnitId,\n            isCut: copyType === COPY_TYPE.CUT,\n            getTransform: (transform, sheetTransform) => {\n                const pasteRect = skeletonManagerService.attachRangeWithCoord({\n                    startRow: pasteRange.startRow,\n                    endRow: pasteRange.endRow,\n                    startColumn: pasteRange.startColumn,\n                    endColumn: pasteRange.endColumn,\n                });\n\n                const newTransform = {\n                    ...transform,\n                    left: pasteRect?.startX,\n                    top: pasteRect?.startY,\n                };\n\n                return {\n                    transform: newTransform,\n                    sheetTransform: transformToDrawingPosition(newTransform, selectionRenderService) ?? sheetTransform,\n                };\n            },\n        });\n    }\n\n    private _generateMutations(drawings: ISheetDrawing[], payload: {\n        unitId: string;\n        subUnitId: string;\n        getTransform: (transform: ISheetDrawing['transform'], sheetTransform: ISheetDrawing['sheetTransform']) => {\n            transform: ISheetDrawing['transform'];\n            sheetTransform: ISheetDrawing['sheetTransform'];\n        };\n        isCut: boolean;\n    }) {\n        const {\n            unitId,\n            subUnitId,\n            getTransform,\n            isCut,\n        } = payload;\n\n        const redos: IMutationInfo[] = [];\n        const undos: IMutationInfo[] = [];\n\n        const { _drawingService } = this;\n\n        drawings.forEach((drawing) => {\n            const { transform, sheetTransform } = drawing;\n            if (!transform) {\n                return;\n            }\n            const transformContext = getTransform(transform, sheetTransform);\n            const drawingObject: Partial<ISheetDrawing> = {\n                ...drawing,\n                unitId,\n                subUnitId,\n                drawingId: isCut ? drawing.drawingId : Tools.generateRandomId(),\n                transform: transformContext.transform,\n                sheetTransform: transformContext.sheetTransform,\n            };\n\n            if (isCut) {\n                const { undo, redo, objects } = _drawingService.getBatchUpdateOp([drawingObject] as ISheetDrawing[]) as IDrawingJsonUndo1;\n                redos.push({\n                    id: SetDrawingApplyMutation.id,\n                    params: {\n                        unitId,\n                        subUnitId,\n                        type: DrawingApplyType.UPDATE,\n                        op: redo,\n                        objects,\n                    },\n                });\n                undos.push({\n                    id: SetDrawingApplyMutation.id,\n                    params: {\n                        unitId,\n                        subUnitId,\n                        type: DrawingApplyType.UPDATE,\n                        op: undo,\n                        objects,\n                    },\n                });\n            } else {\n                const { undo, redo, objects } = _drawingService.getBatchAddOp([drawingObject] as ISheetDrawing[]) as IDrawingJsonUndo1;\n                redos.push({ id: SetDrawingApplyMutation.id, params: { op: redo, unitId, subUnitId, objects, type: DrawingApplyType.INSERT } });\n                undos.push({ id: SetDrawingApplyMutation.id, params: { op: undo, unitId, subUnitId, objects, type: DrawingApplyType.REMOVE } });\n            }\n        });\n\n        return { redos, undos };\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    private _generateRangeDrawingsPasteMutations(\n        pasteContext: {\n            unitId: string;\n            subUnitId: string;\n            pasteRange: IDiscreteRange;\n            pasteType: IPasteHookValueType;\n        },\n        copyContext: {\n            copyType: COPY_TYPE;\n            copyRange?: IDiscreteRange;\n        }\n    ) {\n        const {\n            unitId,\n            subUnitId,\n            pasteType,\n            pasteRange,\n        } = pasteContext;\n\n        const {\n            copyRange,\n            copyType,\n        } = copyContext;\n\n        if (specialPastes.includes(pasteType)) {\n            return { redos: [], undos: [] };\n        }\n\n        const skeletonManagerService = this._renderManagerService.getRenderById(unitId)?.with(SheetSkeletonManagerService);\n\n        if (!skeletonManagerService || !this._copyInfo) {\n            return { redos: [], undos: [] };\n        }\n\n        const { drawings } = this._copyInfo;\n\n        if (!copyRange) {\n            return this._generateSingleDrawingPasteMutations({\n                pasteTo: { unitId, subUnitId, range: discreteRangeToRange(pasteRange) as unknown as IDiscreteRange },\n                pasteType,\n            }, copyType);\n        }\n\n        const { ranges: [vCopyRange, vPastedRange], mapFunc } = virtualizeDiscreteRanges([copyRange, pasteRange]);\n        const { row: copyRow, col: copyCol } = mapFunc(vCopyRange.startRow, vCopyRange.startColumn);\n        const { row: pasteRow, col: pasteCol } = mapFunc(vPastedRange.startRow, vPastedRange.startColumn);\n\n        const copyRect = skeletonManagerService.attachRangeWithCoord({\n            startRow: copyRow,\n            endRow: copyRow,\n            startColumn: copyCol,\n            endColumn: copyCol,\n        });\n        const pasteRect = skeletonManagerService.attachRangeWithCoord({\n            startRow: pasteRow,\n            endRow: pasteRow,\n            startColumn: pasteCol,\n            endColumn: pasteCol,\n        });\n\n        if (!copyRect || !pasteRect || !this._copyInfo) {\n            return { redos: [], undos: [] };\n        }\n\n        const leftOffset = pasteRect.startX - copyRect.startX;\n        const topOffset = pasteRect.startY - copyRect.startY;\n        const rowOffset = pasteRow - copyRow;\n        const columnOffset = pasteCol - copyCol;\n\n        return this._generateMutations(drawings, {\n            unitId,\n            subUnitId,\n            getTransform: (transform, sheetTransform) => ({\n                transform: {\n                    ...transform,\n                    left: (transform?.left ?? 0) + leftOffset,\n                    top: (transform?.top ?? 0) + topOffset,\n                },\n                sheetTransform: {\n                    ...sheetTransform,\n                    to: {\n                        ...sheetTransform.to,\n                        row: sheetTransform.to.row + rowOffset,\n                        column: sheetTransform.to.column + columnOffset,\n                    },\n                    from: {\n                        ...sheetTransform.from,\n                        row: sheetTransform.from.row + rowOffset,\n                        column: sheetTransform.from.column + columnOffset,\n                    },\n                },\n            }),\n            isCut: copyType === COPY_TYPE.CUT,\n        });\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable max-lines-per-function */\n\nimport type { Workbook, Worksheet } from '@univerjs/core';\nimport { Disposable, Inject, IPermissionService, IUniverInstanceService, UniverInstanceType, UserManagerService } from '@univerjs/core';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { IRenderManagerService, RENDER_CLASS_TYPE } from '@univerjs/engine-render';\nimport { WorkbookEditablePermission, WorkbookViewPermission, WorksheetEditPermission, WorksheetViewPermission } from '@univerjs/sheets';\nimport { combineLatest, distinctUntilChanged, EMPTY, map, switchMap, tap } from 'rxjs';\n\nexport class SheetDrawingPermissionController extends Disposable {\n    constructor(\n        @IDrawingManagerService private readonly _drawingManagerService: IDrawingManagerService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService,\n        @IPermissionService private readonly _permissionService: IPermissionService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @Inject(UserManagerService) private _userManagerService: UserManagerService\n    ) {\n        super();\n        this._initDrawingVisible();\n        this._initDrawingEditable();\n        this._initViewPermissionChange();\n        this._initEditPermissionChange();\n    }\n\n    private _initDrawingVisible() {\n        const workbook$ = this._univerInstanceService.getCurrentTypeOfUnit$<Workbook>(UniverInstanceType.UNIVER_SHEET);\n        const currentUser$ = this._userManagerService.currentUser$;\n        const combined$ = combineLatest([workbook$, currentUser$]);\n\n        this.disposeWithMe(\n            combined$\n                .pipe(\n                    switchMap(([workbook, _]) => {\n                        if (!workbook) {\n                            this._drawingManagerService.setDrawingVisible(false);\n                            return EMPTY;\n                        }\n\n                        return workbook.activeSheet$.pipe(\n                            tap((sheet) => {\n                                if (!sheet) {\n                                    this._drawingManagerService.setDrawingVisible(false);\n                                    return;\n                                }\n\n                                const unitId = workbook.getUnitId();\n                                const subUnitId = sheet.getSheetId();\n\n                                const worksheetViewPermission = this._permissionService\n                                    .composePermission([\n                                        new WorkbookViewPermission(unitId).id,\n                                        new WorksheetViewPermission(unitId, subUnitId).id,\n                                    ])\n                                    .every((permission) => permission.value);\n\n                                if (worksheetViewPermission) {\n                                    this._drawingManagerService.setDrawingVisible(true);\n                                } else {\n                                    this._handleDrawingVisibilityFalse(workbook, sheet);\n                                }\n                            })\n                        );\n                    })\n                )\n                .subscribe()\n        );\n    }\n\n    private _handleDrawingVisibilityFalse(workbook: Workbook, sheet: Worksheet) {\n        this._drawingManagerService.setDrawingVisible(false);\n\n        const unitId = workbook.getUnitId();\n        const subUnitId = sheet.getSheetId();\n        const drawingData = this._drawingManagerService.getDrawingData(unitId, subUnitId);\n        const drawingDataValues = Object.values(drawingData);\n\n        const renderObject = this._renderManagerService.getRenderById(unitId);\n        const scene = renderObject?.scene;\n\n        if (!scene) {\n            return;\n        }\n\n        const objects = scene.getAllObjectsByOrder();\n\n        objects.forEach((object) => {\n            if (\n                object.classType === RENDER_CLASS_TYPE.IMAGE &&\n                drawingDataValues.some((item) => object.oKey.includes(item.drawingId))\n            ) {\n                scene.removeObject(object);\n            }\n        });\n    }\n\n    private _initDrawingEditable() {\n        const workbook$ = this._univerInstanceService.getCurrentTypeOfUnit$<Workbook>(UniverInstanceType.UNIVER_SHEET);\n        const currentUser$ = this._userManagerService.currentUser$;\n\n        const combined$ = combineLatest([workbook$, currentUser$]);\n\n        this.disposeWithMe(\n            combined$\n                .pipe(\n                    switchMap(([workbook, _]) => {\n                        if (!workbook) {\n                            this._drawingManagerService.setDrawingEditable(false);\n                            return EMPTY;\n                        }\n\n                        return workbook.activeSheet$.pipe(\n                            tap((sheet) => {\n                                if (!sheet) {\n                                    this._drawingManagerService.setDrawingEditable(false);\n                                    return;\n                                }\n\n                                const unitId = workbook.getUnitId();\n                                const subUnitId = sheet.getSheetId();\n\n                                const worksheetEditPermission = this._permissionService\n                                    .composePermission([\n                                        new WorkbookEditablePermission(unitId).id,\n                                        new WorksheetEditPermission(unitId, subUnitId).id,\n                                    ])\n                                    .every((permission) => permission.value);\n\n                                if (worksheetEditPermission) {\n                                    this._drawingManagerService.setDrawingEditable(true);\n                                } else {\n                                    this._handleDrawingEditableFalse(workbook, sheet);\n                                }\n                            })\n                        );\n                    })\n                )\n                .subscribe()\n        );\n    }\n\n    private _handleDrawingEditableFalse(workbook: Workbook, sheet: Worksheet) {\n        this._drawingManagerService.setDrawingEditable(false);\n\n        const unitId = workbook.getUnitId();\n        const subUnitId = sheet.getSheetId();\n        const drawingData = this._drawingManagerService.getDrawingData(unitId, subUnitId);\n        const drawingDataValues = Object.values(drawingData);\n\n        const renderObject = this._renderManagerService.getRenderById(unitId);\n        const scene = renderObject?.scene;\n\n        if (!scene) {\n            return;\n        }\n\n        const objects = scene.getAllObjectsByOrder();\n\n        objects.forEach((object) => {\n            if (\n                object.classType === RENDER_CLASS_TYPE.IMAGE &&\n                drawingDataValues.some((item) => object.oKey.includes(item.drawingId))\n            ) {\n                scene.detachTransformerFrom(object);\n            }\n        });\n    }\n\n    private _initViewPermissionChange() {\n        const workbook$ = this._univerInstanceService.getCurrentTypeOfUnit$<Workbook>(UniverInstanceType.UNIVER_SHEET);\n        const currentUser$ = this._userManagerService.currentUser$;\n        this.disposeWithMe(\n            combineLatest([workbook$, currentUser$])\n                .pipe(\n                    switchMap(([workbook, _]) => {\n                        if (!workbook) return EMPTY;\n\n                        return workbook.activeSheet$.pipe(\n                            switchMap((sheet) => {\n                                if (!sheet) {\n                                    return EMPTY;\n                                }\n\n                                const unitId = workbook.getUnitId();\n                                const subUnitId = sheet.getSheetId();\n                                const renderObject = this._renderManagerService.getRenderById(unitId);\n                                const scene = renderObject?.scene;\n\n                                if (!scene) {\n                                    return EMPTY;\n                                }\n\n                                const transformer = scene.getTransformerByCreate();\n\n                                const worksheetViewPermission$ = this._permissionService\n                                    .composePermission$([\n                                        new WorkbookViewPermission(unitId).id,\n                                        new WorksheetViewPermission(unitId, subUnitId).id,\n                                    ])\n                                    .pipe(\n                                        map((permissions) => permissions.every((item) => item.value)),\n                                        distinctUntilChanged()\n                                    );\n\n                                return worksheetViewPermission$.pipe(\n                                    map((permission) => ({\n                                        permission,\n                                        scene,\n                                        transformer,\n                                        unitId,\n                                        subUnitId,\n                                    }))\n                                );\n                            })\n                        );\n                    })\n                )\n                .subscribe({\n                    next: ({ permission, scene, transformer, unitId, subUnitId }) => {\n                        this._drawingManagerService.setDrawingVisible(permission);\n\n                        const objects = scene.getAllObjectsByOrder();\n                        const drawingData = this._drawingManagerService.getDrawingData(unitId, subUnitId);\n                        const drawingDataValues = Object.values(drawingData);\n\n                        if (permission) {\n                            this._drawingManagerService.addNotification(drawingDataValues);\n                        } else {\n                            objects.forEach((object) => {\n                                if (\n                                    object.classType === RENDER_CLASS_TYPE.IMAGE &&\n                                    drawingDataValues.some((item) => object.oKey.includes(item.drawingId))\n                                ) {\n                                    scene.removeObject(object);\n                                }\n                            });\n                            transformer.clearSelectedObjects();\n                        }\n                    },\n                    complete: () => {\n                        this._drawingManagerService.setDrawingVisible(true);\n                        const workbook = this._univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET);\n                        const sheet = workbook?.getActiveSheet();\n                        const unitId = workbook?.getUnitId();\n                        const subUnitId = sheet?.getSheetId();\n                        if (!unitId || !subUnitId) {\n                            return;\n                        }\n                        const drawingData = this._drawingManagerService.getDrawingData(unitId, subUnitId);\n                        const drawingDataValues = Object.values(drawingData);\n                        this._drawingManagerService.addNotification(drawingDataValues);\n                    },\n                })\n        );\n    }\n\n    private _initEditPermissionChange() {\n        const workbook$ = this._univerInstanceService.getCurrentTypeOfUnit$<Workbook>(UniverInstanceType.UNIVER_SHEET);\n        const currentUser$ = this._userManagerService.currentUser$;\n\n        this.disposeWithMe(\n            combineLatest([workbook$, currentUser$])\n                .pipe(\n                    switchMap(([workbook, _]) => {\n                        if (!workbook) {\n                            return EMPTY;\n                        }\n\n                        return workbook.activeSheet$.pipe(\n                            switchMap((sheet) => {\n                                if (!sheet) {\n                                    return EMPTY;\n                                }\n\n                                const unitId = workbook.getUnitId();\n                                const subUnitId = sheet.getSheetId();\n                                const renderObject = this._renderManagerService.getRenderById(unitId);\n                                const scene = renderObject?.scene;\n\n                                if (!scene) {\n                                    return EMPTY;\n                                }\n\n                                const transformer = scene.getTransformerByCreate();\n\n                                const composeWorksheetEditPermission$ = this._permissionService\n                                    .composePermission$([\n                                        new WorkbookEditablePermission(unitId).id,\n                                        new WorksheetEditPermission(unitId, subUnitId).id,\n                                    ])\n                                    .pipe(\n                                        map((permissions) => permissions.every((item) => item.value)),\n                                        distinctUntilChanged()\n                                    );\n\n                                return composeWorksheetEditPermission$.pipe(\n                                    map((permission) => ({\n                                        permission,\n                                        scene,\n                                        transformer,\n                                        unitId,\n                                        subUnitId,\n                                    }))\n                                );\n                            })\n                        );\n                    })\n                )\n                .subscribe({\n                    next: ({ permission, scene, transformer, unitId, subUnitId }) => {\n                        this._drawingManagerService.setDrawingEditable(permission);\n\n                        const objects = scene.getAllObjectsByOrder();\n                        const drawingData = this._drawingManagerService.getDrawingData(unitId, subUnitId);\n                        const drawingDataValues = Object.values(drawingData);\n\n                        if (permission) {\n                            objects.forEach((object) => {\n                                if (\n                                    object.classType === RENDER_CLASS_TYPE.IMAGE &&\n                                    drawingDataValues.some((item) => object.oKey.includes(item.drawingId))\n                                ) {\n                                    scene.attachTransformerTo(object);\n                                }\n                            });\n\n                            this._drawingManagerService.addNotification(drawingDataValues);\n                        } else {\n                            objects.forEach((object) => {\n                                if (\n                                    object.classType === RENDER_CLASS_TYPE.IMAGE &&\n                                    drawingDataValues.some((item) => object.oKey.includes(item.drawingId))\n                                ) {\n                                    scene.detachTransformerFrom(object);\n                                }\n                            });\n\n                            transformer.clearSelectedObjects();\n                        }\n                    },\n                    complete: () => {\n                        const workbook = this._univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET);\n                        if (!workbook) {\n                            return;\n                        }\n\n                        const unitId = workbook.getUnitId();\n                        const sheet = workbook.getActiveSheet();\n                        if (!sheet) {\n                            return;\n                        }\n\n                        const subUnitId = sheet.getSheetId();\n                        const renderObject = this._renderManagerService.getRenderById(unitId);\n                        const scene = renderObject?.scene;\n\n                        if (!scene) {\n                            return;\n                        }\n\n                        const drawingData = this._drawingManagerService.getDrawingData(unitId, subUnitId);\n                        const drawingDataValues = Object.values(drawingData);\n\n                        this._drawingManagerService.setDrawingEditable(true);\n\n                        const objects = scene.getAllObjectsByOrder();\n                        objects.forEach((object) => {\n                            if (\n                                object.classType === RENDER_CLASS_TYPE.IMAGE &&\n                                drawingDataValues.some((item) => object.oKey.includes(item.drawingId))\n                            ) {\n                                scene.detachTransformerFrom(object);\n                            }\n                        });\n                    },\n                })\n        );\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IRange } from '@univerjs/core';\nimport { Disposable, DrawingTypeEnum, Inject, Tools } from '@univerjs/core';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { DrawingRenderService } from '@univerjs/drawing-ui';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { SheetPrintInterceptorService, SheetSkeletonManagerService } from '@univerjs/sheets-ui';\n\nexport class SheetDrawingPrintingController extends Disposable {\n    constructor(\n        @Inject(SheetPrintInterceptorService) private readonly _sheetPrintInterceptorService: SheetPrintInterceptorService,\n        @Inject(DrawingRenderService) private readonly _drawingRenderService: DrawingRenderService,\n        @IDrawingManagerService private readonly _drawingManagerService: IDrawingManagerService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService\n    ) {\n        super();\n\n        this._initPrinting();\n    }\n\n    private _initPrinting() {\n        this.disposeWithMe(\n            this._sheetPrintInterceptorService.interceptor.intercept(\n                this._sheetPrintInterceptorService.interceptor.getInterceptPoints().PRINTING_COMPONENT_COLLECT,\n                {\n                    handler: (_param, pos, next) => {\n                        const { unitId, scene, subUnitId } = pos;\n                        const unitData = this._drawingManagerService.getDrawingDataForUnit(unitId);\n                        const subUnitData = unitData?.[subUnitId];\n                        if (subUnitData) {\n                            subUnitData.order.forEach((id) => {\n                                this._drawingRenderService.renderDrawing(subUnitData.data[id], scene);\n                            });\n                        }\n\n                        return next();\n                    },\n                }\n            )\n        );\n\n        this.disposeWithMe(\n            this._sheetPrintInterceptorService.interceptor.intercept(\n                this._sheetPrintInterceptorService.interceptor.getInterceptPoints().PRINTING_RANGE,\n                {\n                    handler: (range, pos, next) => {\n                        const { unitId, subUnitId } = pos;\n                        const renderer = this._renderManagerService.getRenderById(unitId);\n                        if (!renderer) {\n                            return next(range);\n                        }\n\n                        const skeleton = renderer.with(SheetSkeletonManagerService).getSkeletonParam(subUnitId);\n                        if (!skeleton) {\n                            return next(range);\n                        }\n                        const unitData = this._drawingManagerService.getDrawingDataForUnit(unitId);\n                        const subUnitData = unitData?.[pos.subUnitId];\n                        if (!subUnitData) {\n                            return next(range);\n                        }\n\n                        const { scaleX, scaleY } = renderer.scene;\n                        const newRange: IRange = range ? { ...range } : { startColumn: 0, endColumn: 0, endRow: 0, startRow: 0 };\n                        const data = subUnitData.order.map((key) => subUnitData.data[key]).filter((item) => item.drawingType !== DrawingTypeEnum.DRAWING_DOM);\n                        if (data.length) {\n                            data.forEach((param) => {\n                                if (!param.groupId && param.transform && Tools.isDefine(param.transform.left) && Tools.isDefine(param.transform.top) && Tools.isDefine(param.transform.width) && Tools.isDefine(param.transform.height)) {\n                                    const start = skeleton.skeleton.getCellIndexByOffset(param.transform.left, param.transform.top, scaleX, scaleY, { x: 0, y: 0 });\n                                    const end = skeleton.skeleton.getCellIndexByOffset(param.transform.left + param.transform.width, param.transform.top + param.transform.height, scaleX, scaleY, { x: 0, y: 0 });\n                                    if (start.column < newRange.startColumn) {\n                                        newRange.startColumn = start.column;\n                                    }\n\n                                    if (start.row < newRange.startRow) {\n                                        newRange.startRow = start.row;\n                                    }\n\n                                    if (newRange.endRow < end.row) {\n                                        newRange.endRow = end.row;\n                                    }\n\n                                    if (newRange.endColumn < end.column) {\n                                        newRange.endColumn = end.column;\n                                    }\n                                }\n                            });\n                            return next(newRange);\n                        }\n\n                        return next(range);\n                    },\n                }\n            )\n        );\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommandInfo, IDrawingParam, IMutationInfo, IRange, ITransformState, Nullable, Workbook } from '@univerjs/core';\nimport type { IDrawingJsonUndo1 } from '@univerjs/drawing';\nimport type { IRenderContext, IRenderModule } from '@univerjs/engine-render';\nimport type { IInsertColCommandParams, IInsertRowCommandParams, IMoveColsCommandParams, IMoveRangeCommandParams, IMoveRowsCommandParams, IRemoveRowColCommandParams, ISetColHiddenMutationParams, ISetColVisibleMutationParams, ISetRowHiddenMutationParams, ISetRowVisibleMutationParams, ISetSpecificColsVisibleCommandParams, ISetSpecificRowsVisibleCommandParams, ISetWorksheetActiveOperationParams, ISetWorksheetColWidthMutationParams, ISetWorksheetRowHeightMutationParams, ISetWorksheetRowIsAutoHeightMutationParams } from '@univerjs/sheets';\nimport type { ISheetDrawing, ISheetDrawingPosition } from '@univerjs/sheets-drawing';\nimport { Disposable, ICommandService, Inject, IUniverInstanceService, Rectangle } from '@univerjs/core';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { DeleteRangeMoveLeftCommand, DeleteRangeMoveUpCommand, DeltaColumnWidthCommand, DeltaRowHeightCommand, getSheetCommandTarget, InsertColCommand, InsertRangeMoveDownCommand, InsertRangeMoveRightCommand, InsertRowCommand, MoveColsCommand, MoveRangeCommand, MoveRowsCommand, RemoveColCommand, RemoveRowCommand, SetColHiddenCommand, SetColHiddenMutation, SetColVisibleMutation, SetColWidthCommand, SetRowHeightCommand, SetRowHiddenCommand, SetRowHiddenMutation, SetRowVisibleMutation, SetSpecificColsVisibleCommand, SetSpecificRowsVisibleCommand, SetWorksheetActiveOperation, SetWorksheetColWidthMutation, SetWorksheetRowHeightMutation, SheetInterceptorService } from '@univerjs/sheets';\nimport { DrawingApplyType, ISheetDrawingService, SetDrawingApplyMutation, SheetDrawingAnchorType } from '@univerjs/sheets-drawing';\nimport { attachRangeWithCoord, ISheetSelectionRenderService, SheetSkeletonManagerService } from '@univerjs/sheets-ui';\nimport { drawingPositionToTransform, transformToDrawingPosition } from '../basics/transform-position';\nimport { ClearSheetDrawingTransformerOperation } from '../commands/operations/clear-drawing-transformer.operation';\n\nenum RangeMoveUndoType {\n    deleteLeft,\n    deleteUp,\n    insertDown,\n    insertRight,\n}\n\nconst UPDATE_COMMANDS = [\n    InsertRowCommand.id,\n    InsertColCommand.id,\n    RemoveRowCommand.id,\n    RemoveColCommand.id,\n\n    DeleteRangeMoveLeftCommand.id,\n    DeleteRangeMoveUpCommand.id,\n    InsertRangeMoveDownCommand.id,\n    InsertRangeMoveRightCommand.id,\n\n    DeltaRowHeightCommand.id,\n    SetRowHeightCommand.id,\n    DeltaColumnWidthCommand.id,\n    SetColWidthCommand.id,\n\n    SetRowHiddenCommand.id,\n    SetSpecificRowsVisibleCommand.id,\n    SetSpecificColsVisibleCommand.id,\n    SetColHiddenCommand.id,\n    MoveColsCommand.id,\n    MoveRowsCommand.id,\n    MoveRangeCommand.id,\n];\n\nconst REFRESH_MUTATIONS = [\n    SetRowVisibleMutation.id,\n    SetRowHiddenMutation.id,\n    SetColVisibleMutation.id,\n    SetColHiddenMutation.id,\n    SetWorksheetRowHeightMutation.id,\n    SetWorksheetColWidthMutation.id,\n];\n\nexport class SheetDrawingTransformAffectedController extends Disposable implements IRenderModule {\n    constructor(\n        private readonly _context: IRenderContext<Workbook>,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService,\n        @ICommandService private readonly _commandService: ICommandService,\n        @ISheetSelectionRenderService private readonly _selectionRenderService: ISheetSelectionRenderService,\n        @Inject(SheetSkeletonManagerService) private readonly _skeletonManagerService: SheetSkeletonManagerService,\n        @Inject(SheetInterceptorService) private readonly _sheetInterceptorService: SheetInterceptorService,\n        @ISheetDrawingService private readonly _sheetDrawingService: ISheetDrawingService,\n        @IDrawingManagerService private readonly _drawingManagerService: IDrawingManagerService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService\n    ) {\n        super();\n\n        this._sheetInterceptorListener();\n        this._commandListener();\n        this._sheetRefreshListener();\n    }\n\n    private _sheetInterceptorListener() {\n        this.disposeWithMe(\n            this._sheetInterceptorService.interceptCommand({\n\n                getMutations: (commandInfo) => {\n                    if (!UPDATE_COMMANDS.includes(commandInfo.id)) {\n                        return { redos: [], undos: [] };\n                    }\n                    if (commandInfo.params == null) {\n                        return { redos: [], undos: [] };\n                    }\n                    const cId = commandInfo.id;\n                    if (cId === InsertRowCommand.id) {\n                        return this._moveRowInterceptor(commandInfo.params as IInsertRowCommandParams, 'insert');\n                    } else if ([MoveColsCommand.id, MoveRowsCommand.id, MoveRangeCommand.id].includes(cId)) {\n                        return this._moveRangeInterceptor(commandInfo.params as IMoveRangeCommandParams);\n                    } else if (cId === InsertColCommand.id) {\n                        return this._moveColInterceptor(commandInfo.params as IInsertColCommandParams, 'insert');\n                    } else if (cId === RemoveRowCommand.id) {\n                        return this._moveRowInterceptor(commandInfo.params as IRemoveRowColCommandParams, 'remove');\n                    } else if (cId === RemoveColCommand.id) {\n                        return this._moveColInterceptor(commandInfo.params as IRemoveRowColCommandParams, 'remove');\n                    } else if (cId === DeleteRangeMoveLeftCommand.id) {\n                        const { range } = commandInfo.params as IRemoveRowColCommandParams;\n                        return this._getRangeMoveUndo(range, RangeMoveUndoType.deleteLeft);\n                    } else if (cId === DeleteRangeMoveUpCommand.id) {\n                        const { range } = commandInfo.params as IRemoveRowColCommandParams;\n                        return this._getRangeMoveUndo(range, RangeMoveUndoType.deleteUp);\n                    } else if (cId === InsertRangeMoveDownCommand.id) {\n                        const { range } = commandInfo.params as IRemoveRowColCommandParams;\n                        return this._getRangeMoveUndo(range, RangeMoveUndoType.insertDown);\n                    } else if (cId === InsertRangeMoveRightCommand.id) {\n                        const { range } = commandInfo.params as IRemoveRowColCommandParams;\n                        return this._getRangeMoveUndo(range, RangeMoveUndoType.insertRight);\n                    } else if (cId === SetRowHiddenCommand.id || cId === SetSpecificRowsVisibleCommand.id) {\n                        const params = commandInfo.params as ISetRowHiddenMutationParams | ISetSpecificRowsVisibleCommandParams;\n                        const { unitId, subUnitId, ranges } = params;\n                        return this._getDrawingUndoForRowVisible(unitId, subUnitId, ranges);\n                    } else if (cId === SetSpecificColsVisibleCommand.id || cId === SetColHiddenCommand.id) {\n                        const params = commandInfo.params as ISetSpecificColsVisibleCommandParams | ISetColHiddenMutationParams;\n                        const { unitId, subUnitId, ranges } = params;\n                        return this._getDrawingUndoForColVisible(unitId, subUnitId, ranges);\n                    } else if (cId === DeltaRowHeightCommand.id || cId === SetRowHeightCommand.id || cId === DeltaColumnWidthCommand.id || cId === SetColWidthCommand.id) {\n                        const params = commandInfo.params as ISetWorksheetRowHeightMutationParams | ISetWorksheetColWidthMutationParams;\n                        const { unitId, subUnitId, ranges } = params;\n                        const isRow = cId === DeltaRowHeightCommand.id || cId === SetRowHeightCommand.id;\n                        return this._getDrawingUndoForRowAndColSize(unitId, subUnitId, ranges, isRow);\n                    }\n\n                    return { redos: [], undos: [] };\n                },\n            })\n        );\n    }\n\n    private _getRangeMoveUndo(range: IRange, type: RangeMoveUndoType) {\n        const newParams = getSheetCommandTarget(this._univerInstanceService);\n\n        if (newParams == null) {\n            return { redos: [], undos: [] };\n        }\n        const unitId = newParams.unitId;\n        const subUnitId = newParams.subUnitId;\n\n        const redos: IMutationInfo[] = [];\n        const undos: IMutationInfo[] = [];\n\n        const drawingData = this._sheetDrawingService.getDrawingData(unitId, subUnitId);\n\n        const updateDrawings: Partial<ISheetDrawing>[] = [];\n        const deleteDrawings: Partial<ISheetDrawing>[] = [];\n\n        Object.keys(drawingData).forEach((drawingId) => {\n            const drawing = drawingData[drawingId];\n\n            const { updateDrawings: updateDrawingsPart, deleteDrawings: deleteDrawingsPart } = this._getUpdateOrDeleteDrawings(range, type, drawing);\n\n            updateDrawings.push(...updateDrawingsPart);\n            deleteDrawings.push(...deleteDrawingsPart);\n        });\n\n        if (updateDrawings.length === 0 && deleteDrawings.length === 0) {\n            return { redos: [], undos: [] };\n        }\n\n        if (updateDrawings.length > 0) {\n            const updateJsonOp = this._sheetDrawingService.getBatchUpdateOp(updateDrawings as ISheetDrawing[]) as IDrawingJsonUndo1;\n            const { undo, redo, objects } = updateJsonOp;\n            redos.push({ id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: redo, objects, type: DrawingApplyType.UPDATE } });\n            undos.push({ id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: undo, objects, type: DrawingApplyType.UPDATE } });\n        }\n\n        if (deleteDrawings.length > 0) {\n            const deleteJsonOp = this._sheetDrawingService.getBatchRemoveOp(deleteDrawings as ISheetDrawing[]) as IDrawingJsonUndo1;\n            const deleteUndo = deleteJsonOp.undo;\n            const deleteRedo = deleteJsonOp.redo;\n            const deleteObjects = deleteJsonOp.objects;\n            redos.push({ id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: deleteRedo, objects: deleteObjects, type: DrawingApplyType.REMOVE } });\n            undos.push({ id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: deleteUndo, objects: deleteObjects, type: DrawingApplyType.INSERT } });\n        }\n\n        redos.push({ id: ClearSheetDrawingTransformerOperation.id, params: [unitId] });\n        undos.push({ id: ClearSheetDrawingTransformerOperation.id, params: [unitId] });\n\n        return {\n            redos,\n            undos,\n        };\n    }\n\n    private _getUpdateOrDeleteDrawings(range: IRange, type: RangeMoveUndoType, drawing: ISheetDrawing) {\n        const updateDrawings: Partial<ISheetDrawing>[] = [];\n        const deleteDrawings: Partial<ISheetDrawing>[] = [];\n\n        const { sheetTransform, anchorType = SheetDrawingAnchorType.Position, transform, unitId, subUnitId, drawingId } = drawing;\n        const { from, to } = sheetTransform;\n        const { row: fromRow, column: fromColumn } = from;\n        const { row: toRow, column: toColumn } = to;\n\n        if (sheetTransform == null || transform == null) {\n            return {\n                updateDrawings,\n                deleteDrawings,\n            };\n        }\n\n        const { startRow, endRow, startColumn, endColumn } = range;\n        let newSheetTransform: Nullable<ISheetDrawingPosition> = null;\n        let newTransform: Nullable<ITransformState> = null;\n\n        if (type === RangeMoveUndoType.deleteLeft && fromRow >= startRow && toRow <= endRow) {\n            if (fromColumn >= startColumn && toColumn <= endColumn) {\n                // delete drawing\n                deleteDrawings.push({ unitId, subUnitId, drawingId });\n            } else {\n                // move drawing left\n                const param = this._shrinkCol(sheetTransform, transform, startColumn, endColumn, anchorType);\n                newSheetTransform = param?.newSheetTransform;\n                newTransform = param?.newTransform;\n            }\n        } else if (type === RangeMoveUndoType.deleteUp && fromColumn >= startColumn && toColumn <= endColumn) {\n            if (fromRow >= startRow && toRow <= endRow) {\n                // delete drawing\n                deleteDrawings.push({ unitId, subUnitId, drawingId });\n            } else {\n                // move drawing up\n                const param = this._shrinkRow(sheetTransform, transform, startRow, endRow, anchorType);\n                newSheetTransform = param?.newSheetTransform;\n                newTransform = param?.newTransform;\n            }\n        } else if (type === RangeMoveUndoType.insertDown) {\n            const param = this._expandRow(sheetTransform, transform, startRow, endRow, anchorType);\n            newSheetTransform = param?.newSheetTransform;\n            newTransform = param?.newTransform;\n        } else if (type === RangeMoveUndoType.insertRight) {\n            const param = this._expandCol(sheetTransform, transform, startColumn, endColumn, anchorType);\n            newSheetTransform = param?.newSheetTransform;\n            newTransform = param?.newTransform;\n        }\n\n        if (newSheetTransform != null && newTransform != null) {\n            const newTransform = drawingPositionToTransform(newSheetTransform, this._selectionRenderService, this._skeletonManagerService);\n            updateDrawings.push({ ...drawing, sheetTransform: newSheetTransform, transform: newTransform });\n        }\n\n        return { updateDrawings, deleteDrawings };\n    }\n\n    private _remainDrawingSize(transform: Nullable<ITransformState>, updateDrawings: ISheetDrawing[], drawing: ISheetDrawing) {\n        const newSheetTransform = transformToDrawingPosition({ ...transform }, this._selectionRenderService);\n        if (newSheetTransform != null) {\n            updateDrawings.push({\n                ...drawing,\n                sheetTransform: newSheetTransform,\n            });\n        }\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    private _getDrawingUndoForColVisible(unitId: string, subUnitId: string, ranges: IRange[]) {\n        const drawingData = this._drawingManagerService.getDrawingData(unitId, subUnitId);\n        const updateDrawings: ISheetDrawing[] = [];\n        const preUpdateDrawings: ISheetDrawing[] = [];\n        // eslint-disable-next-line complexity, max-lines-per-function\n        Object.keys(drawingData).forEach((drawingId) => {\n            const drawing = drawingData[drawingId] as ISheetDrawing;\n            const { sheetTransform, transform, anchorType = SheetDrawingAnchorType.Position } = drawing;\n            if (anchorType === SheetDrawingAnchorType.None) {\n                this._remainDrawingSize(transform, updateDrawings, drawing);\n            } else {\n                const { from, to } = sheetTransform;\n                const { row: fromRow, column: fromColumn } = from;\n                const { row: toRow, column: toColumn } = to;\n                for (let i = 0; i < ranges.length; i++) {\n                    const range = ranges[i];\n                    const { startRow, endRow, startColumn, endColumn } = range;\n                    if (toColumn < startColumn) {\n                        continue;\n                    }\n                    if (anchorType === SheetDrawingAnchorType.Position) {\n                        let newSheetTransform: Nullable<ISheetDrawingPosition> = null;\n                        let newTransform: Nullable<ITransformState> = null;\n                        if (fromColumn >= startColumn && fromColumn <= endColumn) {\n                            const selectionCell = this._skeletonManagerService.attachRangeWithCoord({ startColumn: fromColumn, endColumn, startRow: from.row, endRow: to.row });\n                            if (selectionCell == null) {\n                                return;\n                            }\n                            newTransform = { ...transform, left: selectionCell.startX };\n                        }\n                        if (newTransform != null) {\n                            newSheetTransform = transformToDrawingPosition(newTransform, this._selectionRenderService);\n                            if (newSheetTransform != null && newTransform != null) {\n                                updateDrawings.push({ ...drawing, sheetTransform: newSheetTransform, transform: newTransform });\n                                break;\n                            }\n                        }\n\n                        this._remainDrawingSize(transform, updateDrawings, drawing);\n\n                        continue;\n                    }\n                    if (fromColumn >= startColumn && toColumn <= endColumn) {\n                        continue;\n                    }\n                    let newSheetTransform: Nullable<ISheetDrawingPosition> = null;\n                    let newTransform: Nullable<ITransformState> = null;\n\n                    if (fromColumn >= startColumn && fromColumn <= endColumn) {\n                        const selectionCell = this._skeletonManagerService.attachRangeWithCoord({ startColumn: fromColumn, endColumn, startRow: from.row, endRow: to.row });\n                        if (selectionCell == null) {\n                            return;\n                        }\n                        newTransform = {\n                            ...transform,\n                            left: (selectionCell?.startX || 0),\n                            width: (transform?.width || 0) - selectionCell.endX + selectionCell.startX,\n                        };\n                    } else if (toColumn >= startColumn && toColumn <= endColumn) {\n                        const selectionCell = this._skeletonManagerService.attachRangeWithCoord({ startColumn, endColumn: toColumn, startRow: from.row, endRow: to.row });\n                        if (selectionCell == null) {\n                            return;\n                        }\n                        newTransform = {\n                            ...transform,\n                            left: selectionCell.startX - (transform?.width || 0),\n                        };\n                    } else {\n                        const selectionCell = this._skeletonManagerService.attachRangeWithCoord({ startColumn, endColumn, startRow: from.row, endRow: to.row });\n                        if (selectionCell == null) {\n                            return;\n                        }\n                        newTransform = {\n                            ...transform,\n                            width: (transform?.width || 0) - selectionCell.endX + selectionCell.startX,\n                        };\n                        newSheetTransform = transformToDrawingPosition(newTransform, this._selectionRenderService);\n                        if (newSheetTransform != null && newTransform != null) {\n                            preUpdateDrawings.push({ ...drawing, sheetTransform: newSheetTransform, transform: newTransform });\n                            break;\n                        }\n                    }\n\n                    if (newTransform != null) {\n                        newSheetTransform = transformToDrawingPosition(newTransform, this._selectionRenderService);\n                    }\n                    if (newTransform != null && newSheetTransform != null) {\n                        updateDrawings.push({ ...drawing, sheetTransform: newSheetTransform, transform: newTransform });\n                        break;\n                    } else {\n                        this._remainDrawingSize(transform, updateDrawings, drawing);\n                    }\n                }\n            }\n        });\n\n        if (updateDrawings.length === 0 && preUpdateDrawings.length === 0) {\n            return { redos: [], undos: [] };\n        }\n\n        const { redos, undos } = this._createUndoAndRedoMutation(unitId, subUnitId, updateDrawings);\n\n        const preRedos: IMutationInfo[] = [];\n        const preUndos: IMutationInfo[] = [];\n\n        if (preUpdateDrawings.length > 0) {\n            const { redos, undos } = this._createUndoAndRedoMutation(unitId, subUnitId, preUpdateDrawings);\n            preRedos.push(...redos);\n            preUndos.push(...undos);\n        }\n\n        return {\n            redos,\n            undos,\n            preRedos,\n            preUndos,\n        };\n    }\n\n    private _createUndoAndRedoMutation(unitId: string, subUnitId: string, updateDrawings: ISheetDrawing[]) {\n        const updateJsonOp = this._sheetDrawingService.getBatchUpdateOp(updateDrawings as ISheetDrawing[]) as IDrawingJsonUndo1;\n        const { undo, redo, objects } = updateJsonOp;\n        const redos: IMutationInfo[] = [\n            { id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: redo, objects, type: DrawingApplyType.UPDATE } },\n            { id: ClearSheetDrawingTransformerOperation.id, params: [unitId] },\n        ];\n        const undos: IMutationInfo[] = [\n            { id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: undo, objects, type: DrawingApplyType.UPDATE } },\n            { id: ClearSheetDrawingTransformerOperation.id, params: [unitId] },\n        ];\n\n        return {\n            redos,\n            undos,\n        };\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    private _getDrawingUndoForRowVisible(unitId: string, subUnitId: string, ranges: IRange[]) {\n        const drawingData = this._drawingManagerService.getDrawingData(unitId, subUnitId);\n\n        const updateDrawings: ISheetDrawing[] = [];\n        const preUpdateDrawings: ISheetDrawing[] = [];\n        // eslint-disable-next-line complexity, max-lines-per-function\n        Object.keys(drawingData).forEach((drawingId) => {\n            const drawing = drawingData[drawingId] as ISheetDrawing;\n            const { sheetTransform, transform, anchorType = SheetDrawingAnchorType.Position } = drawing;\n            if (anchorType === SheetDrawingAnchorType.None) {\n                this._remainDrawingSize(transform, updateDrawings, drawing);\n            } else {\n                const { from, to } = sheetTransform;\n                const { row: fromRow, column: fromColumn } = from;\n                const { row: toRow, column: toColumn } = to;\n                for (let i = 0; i < ranges.length; i++) {\n                    const range = ranges[i];\n                    const { startRow, endRow, startColumn, endColumn } = range;\n                    if (toRow < startRow) {\n                        continue;\n                    }\n                    if (anchorType === SheetDrawingAnchorType.Position) {\n                        let newSheetTransform: Nullable<ISheetDrawingPosition> = null;\n                        let newTransform: Nullable<ITransformState> = null;\n                        if (fromRow >= startRow && fromRow <= endRow) {\n                            const selectionCell = this._skeletonManagerService.attachRangeWithCoord({ startColumn: from.column, endColumn: to.column, startRow: fromRow, endRow });\n                            if (selectionCell == null) {\n                                return;\n                            }\n                            newTransform = { ...transform, top: selectionCell.startY };\n                        }\n                        if (newTransform != null) {\n                            newSheetTransform = transformToDrawingPosition(newTransform, this._selectionRenderService);\n                            if (newSheetTransform != null && newTransform != null) {\n                                updateDrawings.push({ ...drawing, sheetTransform: newSheetTransform, transform: newTransform });\n                                break;\n                            }\n                        }\n\n                        this._remainDrawingSize(transform, updateDrawings, drawing);\n\n                        continue;\n                    }\n                    if (fromRow >= startRow && toRow <= endRow) {\n                        continue;\n                    }\n                    let newSheetTransform: Nullable<ISheetDrawingPosition> = null;\n                    let newTransform: Nullable<ITransformState> = null;\n\n                    if (fromRow >= startRow && fromRow <= endRow) {\n                        const selectionCell = this._skeletonManagerService.attachRangeWithCoord({ startColumn: from.column, endColumn: to.column, startRow: fromRow, endRow });\n                        if (selectionCell == null) {\n                            return;\n                        }\n                        newTransform = {\n                            ...transform,\n                            top: (selectionCell?.startY || 0),\n                            height: (transform?.height || 0) - selectionCell.endY + selectionCell.startY,\n                        };\n                    } else if (toRow >= startRow && toRow <= endRow) {\n                        const selectionCell = this._skeletonManagerService.attachRangeWithCoord({ startColumn: from.column, endColumn: to.column, startRow, endRow: toRow });\n                        if (selectionCell == null) {\n                            return;\n                        }\n                        newTransform = {\n                            ...transform,\n                            top: selectionCell.startY - (transform?.height || 0),\n                        };\n                    } else {\n                        const selectionCell = this._skeletonManagerService.attachRangeWithCoord({ startColumn: from.column, endColumn: to.column, startRow, endRow });\n                        if (selectionCell == null) {\n                            return;\n                        }\n                        newTransform = {\n                            ...transform,\n                            height: (transform?.height || 0) - selectionCell.endY + selectionCell.startY,\n                        };\n                        newSheetTransform = transformToDrawingPosition(newTransform, this._selectionRenderService);\n                        if (newSheetTransform != null && newTransform != null) {\n                            preUpdateDrawings.push({ ...drawing, sheetTransform: newSheetTransform, transform: newTransform });\n                            break;\n                        }\n                    }\n\n                    if (newTransform != null) {\n                        newSheetTransform = transformToDrawingPosition(newTransform, this._selectionRenderService);\n                    }\n                    if (newTransform != null && newSheetTransform != null) {\n                        updateDrawings.push({ ...drawing, sheetTransform: newSheetTransform, transform: newTransform });\n                        break;\n                    } else {\n                        this._remainDrawingSize(transform, updateDrawings, drawing);\n                    }\n                }\n            }\n        });\n\n        if (updateDrawings.length === 0 && preUpdateDrawings.length === 0) {\n            return { redos: [], undos: [] };\n        }\n\n        const { redos, undos } = this._createUndoAndRedoMutation(unitId, subUnitId, updateDrawings);\n\n        const preRedos: IMutationInfo[] = [];\n        const preUndos: IMutationInfo[] = [];\n\n        if (preUpdateDrawings.length > 0) {\n            const { redos, undos } = this._createUndoAndRedoMutation(unitId, subUnitId, preUpdateDrawings);\n            preRedos.push(...redos);\n            preUndos.push(...undos);\n        }\n\n        return {\n            redos,\n            undos,\n            preRedos,\n            preUndos,\n        };\n    }\n\n    private _getDrawingUndoForRowAndColSize(unitId: string, subUnitId: string, ranges: IRange[], isRow: boolean) {\n        const drawingData = this._drawingManagerService.getDrawingData(unitId, subUnitId);\n\n        const updateDrawings: ISheetDrawing[] = [];\n\n        Object.keys(drawingData).forEach((drawingId) => {\n            const drawing = drawingData[drawingId] as ISheetDrawing;\n            const { sheetTransform, transform, anchorType = SheetDrawingAnchorType.Position } = drawing;\n            if (anchorType === SheetDrawingAnchorType.None) {\n                this._remainDrawingSize(transform, updateDrawings, drawing);\n            } else {\n                const { from, to } = sheetTransform;\n                const { row: fromRow, column: fromColumn } = from;\n                const { row: toRow, column: toColumn } = to;\n                for (let i = 0; i < ranges.length; i++) {\n                    const range = ranges[i];\n                    const { startRow, endRow, startColumn, endColumn } = range;\n\n                    if (toRow < startRow || toColumn < startColumn) {\n                        continue;\n                    }\n\n                    if (anchorType === SheetDrawingAnchorType.Position) {\n                        if ((fromRow <= startRow && toRow >= endRow) || (fromColumn <= startColumn && toColumn >= endColumn)) {\n                            this._remainDrawingSize(transform, updateDrawings, drawing);\n                            continue;\n                        }\n                    }\n\n                    const newTransform = drawingPositionToTransform({ ...sheetTransform }, this._selectionRenderService, this._skeletonManagerService);\n                    if (newTransform != null) {\n                        updateDrawings.push({\n                            ...drawing,\n                            transform: newTransform,\n                        });\n                        break;\n                    }\n                }\n            }\n        });\n\n        if (updateDrawings.length === 0) {\n            return { redos: [], undos: [] };\n        }\n\n        return this._createUndoAndRedoMutation(unitId, subUnitId, updateDrawings);\n    }\n\n    private _getUnitIdAndSubUnitId(params: IInsertRowCommandParams | IRemoveRowColCommandParams, type: 'insert' | 'remove') {\n        let unitId: string;\n        let subUnitId: string;\n        if (type === 'insert') {\n            unitId = (params as IInsertRowCommandParams).unitId;\n            subUnitId = (params as IInsertRowCommandParams).subUnitId;\n        } else {\n            const newParams = getSheetCommandTarget(this._univerInstanceService);\n            if (newParams == null) {\n                return;\n            }\n            unitId = newParams.unitId;\n            subUnitId = newParams.subUnitId;\n        }\n\n        return { unitId, subUnitId };\n    }\n\n    private _moveRangeInterceptor(params: IMoveRangeCommandParams | IMoveRowsCommandParams | IMoveColsCommandParams) {\n        const { toRange, fromRange } = params;\n        const target = getSheetCommandTarget(this._univerInstanceService);\n        if (!target) {\n            return { redos: [], undos: [] };\n        }\n\n        const { unitId, subUnitId } = target;\n\n        const skeleton = this._renderManagerService.getRenderById(unitId)?.with(SheetSkeletonManagerService)?.getCurrentSkeleton();\n        if (!skeleton) {\n            return { redos: [], undos: [] };\n        }\n\n        const selectionRect = attachRangeWithCoord(skeleton, fromRange);\n        if (!selectionRect) {\n            return { redos: [], undos: [] };\n        }\n\n        const { startX, endX, startY, endY } = selectionRect;\n        const drawings = this._sheetDrawingService.getDrawingData(unitId, subUnitId);\n        const containedDrawings: ISheetDrawing[] = [];\n\n        Object.keys(drawings).forEach((drawingId) => {\n            const drawing = drawings[drawingId];\n            if (drawing.anchorType !== SheetDrawingAnchorType.Both) {\n                return;\n            }\n            const { transform } = drawing;\n\n            if (!transform) {\n                return;\n            }\n\n            const { left = 0, top = 0, width = 0, height = 0 } = transform;\n            const { drawingStartX, drawingEndX, drawingStartY, drawingEndY } = {\n                drawingStartX: left,\n                drawingEndX: left + width,\n                drawingStartY: top,\n                drawingEndY: top + height,\n            };\n\n            if (startX <= drawingStartX && drawingEndX <= endX && startY <= drawingStartY && drawingEndY <= endY) {\n                containedDrawings.push(drawing);\n            }\n        });\n\n        const redos: IMutationInfo[] = [];\n        const undos: IMutationInfo[] = [];\n        const rowOffset = toRange.startRow - fromRange.startRow;\n        const colOffset = toRange.startColumn - fromRange.startColumn;\n\n        const updateDrawings = containedDrawings.map((drawing) => {\n            const oldSheetTransform = drawing.sheetTransform;\n            const sheetTransform = {\n                to: { ...oldSheetTransform.to, row: oldSheetTransform.to.row + rowOffset, column: oldSheetTransform.to.column + colOffset },\n                from: { ...oldSheetTransform.from, row: oldSheetTransform.from.row + rowOffset, column: oldSheetTransform.from.column + colOffset },\n            };\n            const transform = drawingPositionToTransform(sheetTransform, this._selectionRenderService, this._skeletonManagerService);\n            const params = {\n                unitId,\n                subUnitId,\n                drawingId: drawing.drawingId,\n                transform,\n                sheetTransform,\n            };\n\n            return params;\n        });\n        if (updateDrawings.length) {\n            // redos.push({ id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: redo, objects, type: DrawingApplyType.UPDATE } });\n            // undos.push({ id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: undo, objects, type: DrawingApplyType.UPDATE } });\n            // const params = { unitId, subUnitId, drawingId, transform: newTransform, sheetTransform: newSheetTransform };\n\n            const updateJsonOp = this._sheetDrawingService.getBatchUpdateOp(updateDrawings as ISheetDrawing[]) as IDrawingJsonUndo1;\n            const { undo, redo, objects } = updateJsonOp;\n            redos.push({ id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: redo, objects, type: DrawingApplyType.UPDATE } });\n            undos.push({ id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: undo, objects, type: DrawingApplyType.UPDATE } });\n            // updateDrawings.push(params);\n            // this._copyInfo = {\n            //     drawings: containedDrawings,\n            //     unitId,\n            //     subUnitId,\n            // };\n        }\n\n        // console.log(params, '_moveRangeInterceptor')\n        return { redos, undos };\n    }\n\n    private _moveRowInterceptor(params: IInsertRowCommandParams | IRemoveRowColCommandParams, type: 'insert' | 'remove') {\n        const ids = this._getUnitIdAndSubUnitId(params, type);\n        if (ids == null) {\n            return { redos: [], undos: [] };\n        }\n        const { unitId, subUnitId } = ids;\n        const { range } = params;\n\n        const rowStartIndex = range.startRow;\n        const rowEndIndex = range.endRow;\n\n        const redos: IMutationInfo[] = [];\n        const undos: IMutationInfo[] = [];\n\n        const data = this._sheetDrawingService.getDrawingData(unitId, subUnitId);\n        const updateDrawings: Partial<ISheetDrawing>[] = [];\n        const deleteDrawings: Partial<ISheetDrawing>[] = [];\n\n        Object.keys(data).forEach((drawingId) => {\n            const drawing = data[drawingId];\n            const { sheetTransform, transform, anchorType = SheetDrawingAnchorType.Position } = drawing;\n\n            if (sheetTransform == null || transform == null) {\n                return;\n            }\n            let newSheetTransform: Nullable<ISheetDrawingPosition>;\n            let newTransform: Nullable<ITransformState>;\n            if (type === 'insert') {\n                const param = this._expandRow(sheetTransform, transform, rowStartIndex, rowEndIndex, anchorType);\n                newSheetTransform = param?.newSheetTransform;\n                newTransform = param?.newTransform;\n            } else {\n                const { from, to } = sheetTransform;\n                const { row: fromRow } = from;\n                const { row: toRow } = to;\n                if (anchorType === SheetDrawingAnchorType.Both && fromRow >= rowStartIndex && toRow <= rowEndIndex) {\n                    // delete drawing\n                    deleteDrawings.push({ unitId, subUnitId, drawingId });\n                } else {\n                    const param = this._shrinkRow(sheetTransform, transform, rowStartIndex, rowEndIndex, anchorType);\n                    newSheetTransform = param?.newSheetTransform;\n                    newTransform = param?.newTransform;\n                }\n            }\n            if (!newSheetTransform || !newTransform) {\n                return;\n            }\n            const params = { unitId, subUnitId, drawingId, transform: newTransform, sheetTransform: newSheetTransform };\n            updateDrawings.push(params);\n        });\n\n        if (updateDrawings.length === 0 && deleteDrawings.length === 0) {\n            return { redos: [], undos: [] };\n        }\n\n        if (updateDrawings.length > 0) {\n            const updateJsonOp = this._sheetDrawingService.getBatchUpdateOp(updateDrawings as ISheetDrawing[]) as IDrawingJsonUndo1;\n            const { undo, redo, objects } = updateJsonOp;\n            redos.push({ id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: redo, objects, type: DrawingApplyType.UPDATE } });\n            undos.push({ id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: undo, objects, type: DrawingApplyType.UPDATE } });\n        }\n\n        if (deleteDrawings.length > 0) {\n            const deleteJsonOp = this._sheetDrawingService.getBatchRemoveOp(deleteDrawings as ISheetDrawing[]) as IDrawingJsonUndo1;\n            const deleteUndo = deleteJsonOp.undo;\n            const deleteRedo = deleteJsonOp.redo;\n            const deleteObjects = deleteJsonOp.objects;\n            redos.push({ id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: deleteRedo, objects: deleteObjects, type: DrawingApplyType.REMOVE } });\n            undos.push({ id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: deleteUndo, objects: deleteObjects, type: DrawingApplyType.INSERT } });\n        }\n\n        redos.push({ id: ClearSheetDrawingTransformerOperation.id, params: [unitId] });\n        undos.push({ id: ClearSheetDrawingTransformerOperation.id, params: [unitId] });\n\n        return {\n            redos,\n            undos,\n        };\n    }\n\n    private _moveColInterceptor(params: IInsertColCommandParams | IRemoveRowColCommandParams, type: 'insert' | 'remove') {\n        const ids = this._getUnitIdAndSubUnitId(params, type);\n        if (ids == null) {\n            return { redos: [], undos: [] };\n        }\n        const { unitId, subUnitId } = ids;\n        const { range } = params;\n\n        const colStartIndex = range.startColumn;\n        const colEndIndex = range.endColumn;\n\n        const redos: IMutationInfo[] = [];\n        const undos: IMutationInfo[] = [];\n\n        const data = this._sheetDrawingService.getDrawingData(unitId, subUnitId);\n        const updateDrawings: Partial<ISheetDrawing>[] = [];\n        const deleteDrawings: Partial<ISheetDrawing>[] = [];\n\n        Object.keys(data).forEach((drawingId) => {\n            const drawing = data[drawingId];\n            const { sheetTransform, transform, anchorType = SheetDrawingAnchorType.Position } = drawing;\n\n            if (sheetTransform == null || transform == null) {\n                return;\n            }\n            let newSheetTransform: Nullable<ISheetDrawingPosition>;\n            let newTransform: Nullable<ITransformState>;\n            if (type === 'insert') {\n                const param = this._expandCol(sheetTransform, transform, colStartIndex, colEndIndex, anchorType);\n                newSheetTransform = param?.newSheetTransform;\n                newTransform = param?.newTransform;\n            } else {\n                const { from, to } = sheetTransform;\n                const { column: fromColumn } = from;\n                const { column: toColumn } = to;\n                if (anchorType === SheetDrawingAnchorType.Both && fromColumn >= colStartIndex && toColumn <= colEndIndex) {\n                    // delete drawing\n                    deleteDrawings.push({ unitId, subUnitId, drawingId });\n                } else {\n                    const param = this._shrinkCol(sheetTransform, transform, colStartIndex, colEndIndex, anchorType);\n                    newSheetTransform = param?.newSheetTransform;\n                    newTransform = param?.newTransform;\n                }\n            }\n\n            if (!newSheetTransform || !newTransform) {\n                return;\n            }\n\n            const params = { unitId, subUnitId, drawingId, transform: newTransform, sheetTransform: newSheetTransform };\n            updateDrawings.push(params);\n        });\n\n        if (updateDrawings.length === 0 && deleteDrawings.length === 0) {\n            return { redos: [], undos: [] };\n        }\n\n        if (updateDrawings.length > 0) {\n            const updateJsonOp = this._sheetDrawingService.getBatchUpdateOp(updateDrawings as ISheetDrawing[]) as IDrawingJsonUndo1;\n            const { undo, redo, objects } = updateJsonOp;\n            redos.push({ id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: redo, objects, type: DrawingApplyType.UPDATE } });\n            undos.push({ id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: undo, objects, type: DrawingApplyType.UPDATE } });\n        }\n\n        if (deleteDrawings.length > 0) {\n            const deleteJsonOp = this._sheetDrawingService.getBatchRemoveOp(deleteDrawings as ISheetDrawing[]) as IDrawingJsonUndo1;\n            const deleteUndo = deleteJsonOp.undo;\n            const deleteRedo = deleteJsonOp.redo;\n            const deleteObjects = deleteJsonOp.objects;\n            redos.push({ id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: deleteRedo, objects: deleteObjects, type: DrawingApplyType.REMOVE } });\n            undos.push({ id: SetDrawingApplyMutation.id, params: { unitId, subUnitId, op: deleteUndo, objects: deleteObjects, type: DrawingApplyType.INSERT } });\n        }\n\n        redos.push({ id: ClearSheetDrawingTransformerOperation.id, params: [unitId] });\n        undos.push({ id: ClearSheetDrawingTransformerOperation.id, params: [unitId] });\n\n        return { redos, undos };\n    }\n\n    private _expandCol(sheetTransform: ISheetDrawingPosition, transform: ITransformState, colStartIndex: number, colEndIndex: number, anchorType = SheetDrawingAnchorType.Position) {\n        const colCount = colEndIndex - colStartIndex + 1;\n\n        const { from, to } = sheetTransform;\n\n        const { column: fromColumn } = from;\n        const { column: toColumn } = to;\n\n        if (anchorType === SheetDrawingAnchorType.None) {\n            return {\n                newSheetTransform: transformToDrawingPosition({ ...transform }, this._selectionRenderService),\n                newTransform: transform,\n            };\n        }\n\n        let newSheetTransform: Nullable<ISheetDrawingPosition> = null;\n        let newTransform: Nullable<ITransformState> = null;\n\n        if (fromColumn >= colStartIndex) {\n            // move start and end col right\n            // newSheetTransform = {\n            //     from: { ...from, column: fromColumn + colCount },\n            //     to: { ...to, column: toColumn + colCount },\n            // };\n            // newTransform = drawingPositionToTransform(newSheetTransform, this._selectionRenderService);\n\n            const selectionCell = this._skeletonManagerService.attachRangeWithCoord({ startColumn: colStartIndex, endColumn: colEndIndex, startRow: from.row, endRow: to.row });\n            if (selectionCell == null) {\n                return;\n            }\n            newTransform = { ...transform, left: (transform.left || 0) + selectionCell.endX - selectionCell.startX };\n            newSheetTransform = transformToDrawingPosition(newTransform, this._selectionRenderService);\n        } else if (toColumn >= colEndIndex) {\n            // move end right only\n            if (anchorType === SheetDrawingAnchorType.Both) {\n                newSheetTransform = {\n                    from: { ...from },\n                    to: { ...to, column: toColumn + colCount },\n                };\n                newTransform = drawingPositionToTransform(newSheetTransform, this._selectionRenderService, this._skeletonManagerService);\n            } else {\n                return {\n                    newSheetTransform: transformToDrawingPosition({ ...transform }, this._selectionRenderService),\n                    newTransform: transform,\n                };\n            }\n        }\n\n        if (newSheetTransform != null && newTransform != null) {\n            return {\n                newSheetTransform,\n                newTransform,\n            };\n        }\n\n        return null;\n    }\n\n    private _shrinkCol(sheetTransform: ISheetDrawingPosition, transform: ITransformState, colStartIndex: number, colEndIndex: number, anchorType = SheetDrawingAnchorType.Position) {\n        const colCount = colEndIndex - colStartIndex + 1;\n        const { from, to } = sheetTransform;\n        const { column: fromColumn } = from;\n        const { column: toColumn } = to;\n        if (anchorType === SheetDrawingAnchorType.None) {\n            return {\n                newSheetTransform: transformToDrawingPosition({ ...transform }, this._selectionRenderService),\n                newTransform: transform,\n            };\n        }\n        let newSheetTransform: Nullable<ISheetDrawingPosition> = null;\n        let newTransform: Nullable<ITransformState> = null;\n\n        if (fromColumn > colEndIndex) {\n            // shrink start and end col left only\n            newSheetTransform = {\n                from: { ...from, column: fromColumn - colCount },\n                to: { ...to, column: toColumn - colCount },\n            };\n            newTransform = drawingPositionToTransform(newSheetTransform, this._selectionRenderService, this._skeletonManagerService);\n        } else if (fromColumn >= colStartIndex && toColumn <= colEndIndex) {\n            // delete drawing\n            return null;\n        } else if (fromColumn < colStartIndex && toColumn > colEndIndex) {\n            // shrink end left only\n            if (anchorType === SheetDrawingAnchorType.Both) {\n                newSheetTransform = {\n                    from: { ...from },\n                    to: { ...to, column: toColumn - colCount },\n                };\n                newTransform = drawingPositionToTransform(newSheetTransform, this._selectionRenderService, this._skeletonManagerService);\n            } else {\n                return {\n                    newSheetTransform: transformToDrawingPosition({ ...transform }, this._selectionRenderService),\n                    newTransform: transform,\n                };\n            }\n        } else if (fromColumn >= colStartIndex && fromColumn <= colEndIndex) {\n            if (fromColumn === colStartIndex) {\n                newTransform = { ...transform, left: (transform.left || 0) - sheetTransform.from.columnOffset };\n            } else {\n                const selectionCell = this._skeletonManagerService.attachRangeWithCoord({ startColumn: colStartIndex, endColumn: fromColumn - 1, startRow: from.row, endRow: to.row });\n                if (selectionCell == null) {\n                    return;\n                }\n                newTransform = { ...transform, left: (transform.left || 0) - selectionCell.endX + selectionCell.startX - sheetTransform.from.columnOffset };\n            }\n            newSheetTransform = transformToDrawingPosition(newTransform, this._selectionRenderService);\n        } else if (toColumn >= colStartIndex && toColumn <= colEndIndex && anchorType === SheetDrawingAnchorType.Both) {\n            // shrink end col left, then set toColOffset to full cell width\n            const selectionCell = this._skeletonManagerService.attachRangeWithCoord({\n                startColumn: colStartIndex - 1,\n                endColumn: colStartIndex - 1,\n                startRow: from.row,\n                endRow: to.row,\n            });\n\n            if (selectionCell == null) {\n                return;\n            }\n            newSheetTransform = {\n                from: { ...from },\n                to: { ...to, column: colStartIndex - 1, columnOffset: selectionCell.endX - selectionCell.startX },\n            };\n            newTransform = drawingPositionToTransform(newSheetTransform, this._selectionRenderService, this._skeletonManagerService);\n        }\n\n        if (newSheetTransform != null && newTransform != null) {\n            return {\n                newSheetTransform,\n                newTransform,\n            };\n        }\n\n        return null;\n    }\n\n    private _expandRow(sheetTransform: ISheetDrawingPosition, transform: ITransformState, rowStartIndex: number, rowEndIndex: number, anchorType = SheetDrawingAnchorType.Position) {\n        const rowCount = rowEndIndex - rowStartIndex + 1;\n\n        const { from, to } = sheetTransform;\n\n        const { row: fromRow } = from;\n        const { row: toRow } = to;\n\n        if (anchorType === SheetDrawingAnchorType.None) {\n            return {\n                newSheetTransform: transformToDrawingPosition({ ...transform }, this._selectionRenderService),\n                newTransform: transform,\n            };\n        }\n\n        let newSheetTransform: Nullable<ISheetDrawingPosition> = null;\n        let newTransform: Nullable<ITransformState> = null;\n\n        if (fromRow >= rowStartIndex) {\n            // move start and end row down\n            const selectionCell = this._skeletonManagerService.attachRangeWithCoord({ startRow: rowStartIndex, endRow: rowEndIndex, startColumn: from.column, endColumn: to.column });\n            if (selectionCell == null) {\n                return;\n            }\n            newTransform = { ...transform, top: (transform.top || 0) + selectionCell.endY - selectionCell.startY };\n            newSheetTransform = transformToDrawingPosition(newTransform, this._selectionRenderService);\n        } else if (toRow >= rowEndIndex) {\n            // move end down only\n            if (anchorType === SheetDrawingAnchorType.Both) {\n                newSheetTransform = {\n                    from: { ...from },\n                    to: {\n                        ...to,\n                        row: toRow + rowCount,\n                    },\n                };\n                newTransform = drawingPositionToTransform(newSheetTransform, this._selectionRenderService, this._skeletonManagerService);\n            } else {\n                return {\n                    newSheetTransform: transformToDrawingPosition({ ...transform }, this._selectionRenderService),\n                    newTransform: transform,\n                };\n            }\n        }\n\n        if (newSheetTransform != null && newTransform != null) {\n            return {\n                newSheetTransform,\n                newTransform,\n            };\n        }\n\n        return null;\n    }\n\n    private _shrinkRow(sheetTransform: ISheetDrawingPosition, transform: ITransformState, rowStartIndex: number, rowEndIndex: number, anchorType = SheetDrawingAnchorType.Position) {\n        const rowCount = rowEndIndex - rowStartIndex + 1;\n\n        const { from, to } = sheetTransform;\n\n        const { row: fromRow } = from;\n        const { row: toRow } = to;\n\n        if (anchorType === SheetDrawingAnchorType.None) {\n            return {\n                newSheetTransform: transformToDrawingPosition({ ...transform }, this._selectionRenderService),\n                newTransform: transform,\n            };\n        }\n\n        let newSheetTransform: Nullable<ISheetDrawingPosition> = null;\n        let newTransform: Nullable<ITransformState> = null;\n\n        if (fromRow > rowEndIndex) {\n            // shrink start and end up only\n            newSheetTransform = {\n                from: { ...from, row: fromRow - rowCount },\n                to: { ...to, row: toRow - rowCount },\n            };\n            newTransform = drawingPositionToTransform(newSheetTransform, this._selectionRenderService, this._skeletonManagerService);\n        } else if (fromRow >= rowStartIndex && toRow <= rowEndIndex) {\n            // delete drawing\n            return null;\n        } else if (fromRow < rowStartIndex && toRow > rowEndIndex) {\n            // shrink end up only\n            if (anchorType === SheetDrawingAnchorType.Both) {\n                newSheetTransform = {\n                    from: { ...from },\n                    to: { ...to, row: toRow - rowCount },\n                };\n                newTransform = drawingPositionToTransform(newSheetTransform, this._selectionRenderService, this._skeletonManagerService);\n            } else {\n                return {\n                    newSheetTransform: transformToDrawingPosition({ ...transform }, this._selectionRenderService),\n                    newTransform: transform,\n                };\n            }\n        } else if (fromRow >= rowStartIndex && fromRow <= rowEndIndex) {\n            // shrink start and end row up, then set fromRowOffset to 0\n            if (fromRow === rowStartIndex) {\n                newTransform = { ...transform, top: (transform.top || 0) - sheetTransform.from.rowOffset };\n            } else {\n                const selectionCell = this._skeletonManagerService.attachRangeWithCoord({ startRow: rowStartIndex, endRow: fromRow - 1, startColumn: from.column, endColumn: to.column });\n                if (selectionCell == null) {\n                    return;\n                }\n                newTransform = { ...transform, top: (transform.top || 0) - selectionCell.endY + selectionCell.startY - sheetTransform.from.rowOffset };\n            }\n            newSheetTransform = transformToDrawingPosition(newTransform, this._selectionRenderService);\n        } else if (toRow >= rowStartIndex && toRow <= rowEndIndex && anchorType === SheetDrawingAnchorType.Both) {\n            // shrink end row up, then set toRowOffset to full cell height\n            const selectionCell = this._skeletonManagerService.attachRangeWithCoord({ startColumn: from.column, endColumn: from.column, startRow: rowStartIndex - 1, endRow: rowStartIndex - 1 });\n\n            if (selectionCell == null) {\n                return;\n            }\n            newSheetTransform = {\n                from: { ...from },\n                to: { ...to, row: rowStartIndex - 1, rowOffset: selectionCell.endY - selectionCell.startY },\n            };\n            newTransform = drawingPositionToTransform(newSheetTransform, this._selectionRenderService, this._skeletonManagerService);\n        }\n\n        if (newSheetTransform != null && newTransform != null) {\n            return {\n                newSheetTransform,\n                newTransform,\n            };\n        }\n\n        return null;\n    }\n\n    private _commandListener() {\n        this.disposeWithMe(\n            // TODO@weird94: this should subscribe to the command service\n            // but the skeleton changes like other render modules. These two signals are not equivalent.\n            // As a temp solution, I subscribed to activate$ here.\n            this._commandService.onCommandExecuted((command: ICommandInfo) => {\n                if (command.id === SetWorksheetActiveOperation.id) {\n                    const { unitId, subUnitId } = command.params as ISetWorksheetActiveOperationParams;\n                    this._updateDrawings(unitId, subUnitId);\n                }\n            })\n        );\n\n        this.disposeWithMe(\n            this._context.activated$.subscribe((activated) => {\n                const { unit, unitId } = this._context;\n                if (activated) {\n                    const subUnitId = unit.getActiveSheet().getSheetId();\n                    this._updateDrawings(unitId, subUnitId);\n                } else {\n                    // Better, dispose the command service listener here.\n                    this._clearDrawings(unitId);\n                }\n            })\n        );\n    }\n\n    private _clearDrawings(selfUnitId: string): void {\n        setTimeout(() => {\n            const drawingMap = this._drawingManagerService.drawingManagerData;\n            const removeDrawings: IDrawingParam[] = [];\n\n            // TODO@weird94: should add a iterating function\n            Object.keys(drawingMap).forEach((unitId) => {\n                const subUnitMap = drawingMap[unitId];\n                if (subUnitMap == null) {\n                    return;\n                }\n\n                Object.keys(subUnitMap).forEach((subUnitId) => {\n                    const drawingData = subUnitMap[subUnitId].data;\n                    if (drawingData == null) {\n                        return;\n                    }\n\n                    Object.keys(drawingData).forEach((drawingId) => {\n                        if (unitId === selfUnitId) {\n                            removeDrawings.push(drawingData[drawingId]);\n                        }\n                    });\n                });\n            });\n\n            this._drawingManagerService.removeNotification(removeDrawings);\n        });\n    }\n\n    private _updateDrawings(showUnitId: string, showSubunitId: string): void {\n        // TODO@weird94: remove the setTimeout here\n        setTimeout(() => {\n            const drawingMap = this._drawingManagerService.drawingManagerData;\n            const insertDrawings: IDrawingParam[] = [];\n            const removeDrawings: IDrawingParam[] = [];\n\n            Object.keys(drawingMap).forEach((unitId) => {\n                const subUnitMap = drawingMap[unitId];\n                if (subUnitMap == null) {\n                    return;\n                }\n                Object.keys(subUnitMap).forEach((subUnitId) => {\n                    const drawingData = subUnitMap[subUnitId].data;\n                    if (drawingData == null) {\n                        return;\n                    }\n                    Object.keys(drawingData).forEach((drawingId) => {\n                        if (unitId === showUnitId && subUnitId === showSubunitId) {\n                            const drawing = drawingData[drawingId] as ISheetDrawing;\n                            drawing.transform = drawingPositionToTransform(drawing.sheetTransform, this._selectionRenderService, this._skeletonManagerService);\n                            insertDrawings.push(drawingData[drawingId]);\n                        } else {\n                            removeDrawings.push(drawingData[drawingId]);\n                        }\n                    });\n                });\n            });\n\n            this._drawingManagerService.removeNotification(removeDrawings);\n            this._drawingManagerService.addNotification(insertDrawings);\n        }, 0);\n    }\n\n    private _sheetRefreshListener() {\n        this.disposeWithMe(\n            this._commandService.onCommandExecuted((command: ICommandInfo) => {\n                if (!REFRESH_MUTATIONS.includes(command.id)) {\n                    return;\n                }\n\n                requestIdleCallback(() => {\n                    const params = command.params as ISetRowVisibleMutationParams | ISetColHiddenMutationParams | ISetWorksheetRowHeightMutationParams | ISetWorksheetColWidthMutationParams | ISetWorksheetRowIsAutoHeightMutationParams | ISetRowHiddenMutationParams | ISetColVisibleMutationParams;\n                    const { unitId, subUnitId, ranges } = params;\n                    this._refreshDrawingTransform(unitId, subUnitId, ranges);\n                });\n            })\n        );\n    }\n\n    private _refreshDrawingTransform(unitId: string, subUnitId: string, ranges: IRange[]) {\n        const drawingData = this._drawingManagerService.getDrawingData(unitId, subUnitId);\n\n        const updateDrawings: ISheetDrawing[] = [];\n\n        Object.keys(drawingData).forEach((drawingId) => {\n            const drawing = drawingData[drawingId] as ISheetDrawing;\n            const { sheetTransform, transform, anchorType = SheetDrawingAnchorType.Position } = drawing;\n            if (anchorType === SheetDrawingAnchorType.None) {\n                return true;\n            }\n\n            const { from, to } = sheetTransform;\n            const { row: fromRow, column: fromColumn } = from;\n            const { row: toRow, column: toColumn } = to;\n            for (let i = 0; i < ranges.length; i++) {\n                const range = ranges[i];\n                const { startRow, endRow, startColumn, endColumn } = range;\n                if (Rectangle.intersects(\n                    {\n                        startRow,\n                        endRow,\n                        startColumn,\n                        endColumn,\n                    },\n                    {\n                        startRow: fromRow,\n                        endRow: toRow,\n                        startColumn: fromColumn,\n                        endColumn: toColumn,\n                    }\n                ) || fromRow > endRow || fromColumn > endColumn) {\n                    const isPositionAnchor = anchorType === SheetDrawingAnchorType.Position;\n                    const newTransform = drawingPositionToTransform(sheetTransform, this._selectionRenderService, this._skeletonManagerService);\n                    updateDrawings.push({\n                        ...drawing,\n                        transform: {\n                            ...newTransform,\n                            width: isPositionAnchor ? transform?.width : newTransform?.width,\n                            height: isPositionAnchor ? transform?.height : newTransform?.height,\n                        },\n                    });\n                    break;\n                }\n            }\n        });\n\n        if (updateDrawings.length === 0) {\n            return;\n        }\n\n        this._drawingManagerService.refreshTransform(updateDrawings);\n\n        this._commandService.syncExecuteCommand(ClearSheetDrawingTransformerOperation.id, [unitId]);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand } from '@univerjs/core';\nimport type { ISheetDrawing } from '@univerjs/sheets-drawing';\nimport type { IDeleteDrawingCommandParams } from './interfaces';\nimport { CommandType, ICommandService } from '@univerjs/core';\nimport { ISheetDrawingService } from '@univerjs/sheets-drawing';\nimport { RemoveSheetDrawingCommand } from './remove-sheet-drawing.command';\n\nexport const DeleteDrawingsCommand: ICommand = {\n    id: 'sheet.command.delete-drawing',\n    type: CommandType.COMMAND,\n    handler: (accessor: IAccessor) => {\n        const commandService = accessor.get(ICommandService);\n        const drawingManagerService = accessor.get(ISheetDrawingService);\n\n        const drawings = drawingManagerService.getFocusDrawings();\n\n        if (drawings.length === 0) {\n            return false;\n        }\n\n        const unitId = drawings[0].unitId;\n\n        const newDrawings = drawings.map((drawing) => {\n            const { unitId, subUnitId, drawingId, drawingType } = drawing as ISheetDrawing;\n\n            return {\n                unitId,\n                subUnitId,\n                drawingId,\n                drawingType,\n            };\n        });\n        return commandService.executeCommand<IDeleteDrawingCommandParams>(RemoveSheetDrawingCommand.id, {\n            unitId,\n            drawings: newDrawings,\n        });\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand } from '@univerjs/core';\nimport type { ISheetDrawing } from '@univerjs/sheets-drawing';\nimport type { ISetDrawingCommandParams } from './interfaces';\nimport { CommandType, Direction, ICommandService } from '@univerjs/core';\nimport { ISheetDrawingService } from '@univerjs/sheets-drawing';\n\nimport { ISheetSelectionRenderService } from '@univerjs/sheets-ui';\nimport { transformToDrawingPosition } from '../../basics/transform-position';\nimport { ClearSheetDrawingTransformerOperation } from '../operations/clear-drawing-transformer.operation';\nimport { SetSheetDrawingCommand } from './set-sheet-drawing.command';\n\nexport interface IMoveDrawingsCommandParams {\n    direction: Direction;\n}\n\nexport const MoveDrawingsCommand: ICommand = {\n    id: 'sheet.command.move-drawing',\n    type: CommandType.COMMAND,\n    handler: (accessor: IAccessor, params: IMoveDrawingsCommandParams) => {\n        const commandService = accessor.get(ICommandService);\n        const drawingManagerService = accessor.get(ISheetDrawingService);\n        const selectionRenderService = accessor.get(ISheetSelectionRenderService);\n\n        const { direction } = params;\n\n        const drawings = drawingManagerService.getFocusDrawings();\n\n        if (drawings.length === 0) {\n            return false;\n        }\n\n        const unitId = drawings[0].unitId;\n\n        const newDrawings = drawings.map((drawing) => {\n            const { transform } = drawing as ISheetDrawing;\n            if (transform == null) {\n                return null;\n            }\n            const newTransform = { ...transform };\n\n            const { left = 0, top = 0 } = transform;\n\n            if (direction === Direction.UP) {\n                newTransform.top = top - 1;\n            } else if (direction === Direction.DOWN) {\n                newTransform.top = top + 1;\n            } else if (direction === Direction.LEFT) {\n                newTransform.left = left - 1;\n            } else if (direction === Direction.RIGHT) {\n                newTransform.left = left + 1;\n            }\n\n            return {\n                ...drawing,\n                transform: newTransform,\n                sheetTransform: transformToDrawingPosition(newTransform, selectionRenderService),\n            } as ISheetDrawing;\n        }).filter((drawing) => drawing != null) as ISheetDrawing[];\n\n        const result = commandService.syncExecuteCommand<ISetDrawingCommandParams>(SetSheetDrawingCommand.id, {\n            unitId,\n            drawings: newDrawings,\n        });\n\n        if (result) {\n            commandService.syncExecuteCommand(ClearSheetDrawingTransformerOperation.id, [unitId]);\n            return true;\n        }\n\n        return false;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor } from '@univerjs/core';\nimport type { IMenuItem } from '@univerjs/ui';\nimport { UniverInstanceType } from '@univerjs/core';\nimport { RangeProtectionPermissionEditPoint, WorkbookEditablePermission, WorksheetEditPermission } from '@univerjs/sheets';\nimport { getCurrentRangeDisable$ } from '@univerjs/sheets-ui';\nimport { getMenuHiddenObservable, MenuItemType } from '@univerjs/ui';\nimport { InsertCellImageCommand, InsertFloatImageCommand } from '../../commands/commands/insert-image.command';\n\nexport const IMAGE_UPLOAD_ICON = 'addition-and-subtraction-single';\nexport const SHEETS_IMAGE_MENU_ID = 'sheet.menu.image';\n\nexport function ImageMenuFactory(accessor: IAccessor): IMenuItem {\n    return {\n        id: SHEETS_IMAGE_MENU_ID,\n        type: MenuItemType.SUBITEMS,\n        icon: IMAGE_UPLOAD_ICON,\n        tooltip: 'sheetImage.title',\n        hidden$: getMenuHiddenObservable(accessor, UniverInstanceType.UNIVER_SHEET),\n        disabled$: getCurrentRangeDisable$(accessor, { workbookTypes: [WorkbookEditablePermission], worksheetTypes: [WorksheetEditPermission], rangeTypes: [RangeProtectionPermissionEditPoint] }),\n    };\n}\n\nexport function UploadFloatImageMenuFactory(_accessor: IAccessor): IMenuItem {\n    return {\n        id: InsertFloatImageCommand.id,\n        title: 'sheetImage.upload.float',\n        type: MenuItemType.BUTTON,\n        hidden$: getMenuHiddenObservable(_accessor, UniverInstanceType.UNIVER_SHEET),\n    };\n}\n\nexport function UploadCellImageMenuFactory(_accessor: IAccessor): IMenuItem {\n    return {\n        id: InsertCellImageCommand.id,\n        title: 'sheetImage.upload.cell',\n        type: MenuItemType.BUTTON,\n        hidden$: getMenuHiddenObservable(_accessor, UniverInstanceType.UNIVER_SHEET),\n    };\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingParam } from '@univerjs/core';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { DrawingCommonPanel } from '@univerjs/drawing-ui';\nimport { useDependency } from '@univerjs/ui';\nimport React, { useEffect, useState } from 'react';\nimport styles from './index.module.less';\nimport { SheetDrawingAnchor } from './SheetDrawingAnchor';\n\nexport const SheetDrawingPanel = () => {\n    const drawingManagerService = useDependency(IDrawingManagerService);\n    const focusDrawings = drawingManagerService.getFocusDrawings();\n\n    const [drawings, setDrawings] = useState<IDrawingParam[]>(focusDrawings);\n\n    useEffect(() => {\n        const focusDispose = drawingManagerService.focus$.subscribe((drawings) => {\n            setDrawings(drawings);\n        });\n\n        return () => {\n            focusDispose.unsubscribe();\n        };\n    }, []);\n\n    return !!drawings?.length && (\n        <div className={styles.imageCommonPanel}>\n            <DrawingCommonPanel drawings={drawings} />\n            <SheetDrawingAnchor drawings={drawings} />\n        </div>\n    );\n};\n", "export default {\n  \"imageCommonPanel\": \"univer-image-common-panel\",\n  \"imageCommonPanelGrid\": \"univer-image-common-panel-grid\",\n  \"imageCommonPanelBorder\": \"univer-image-common-panel-border\",\n  \"imageCommonPanelTitle\": \"univer-image-common-panel-title\",\n  \"imageCommonPanelSubtitle\": \"univer-image-common-panel-subtitle\",\n  \"imageCommonPanelRow\": \"univer-image-common-panel-row\",\n  \"imageCommonPanelRowVertical\": \"univer-image-common-panel-row-vertical\",\n  \"imageCommonPanelColumn\": \"univer-image-common-panel-column\",\n  \"imageCommonPanelColumnCenter\": \"univer-image-common-panel-column-center\",\n  \"imageCommonPanelInline\": \"univer-image-common-panel-inline\",\n  \"imageCommonPanelSpan2\": \"univer-image-common-panel-span2\",\n  \"imageCommonPanelSpan3\": \"univer-image-common-panel-span3\",\n  \"imageCommonPanelInput\": \"univer-image-common-panel-input\",\n  \"sheetImageMenu\": \"univer-sheet-image-menu\",\n  \"sheetImageMenuInput\": \"univer-sheet-image-menu-input\"\n};import \"ni:sha-256;ju7Z9wNOA42XOjXov20QG9WU_zCEweIrwNdf_Rlc8Bg\";", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingParam, Nullable } from '@univerjs/core';\nimport type { BaseObject } from '@univerjs/engine-render';\nimport type { ISheetDrawing } from '@univerjs/sheets-drawing';\nimport { ICommandService, LocaleService } from '@univerjs/core';\nimport { clsx, Radio, RadioGroup } from '@univerjs/design';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { SheetDrawingAnchorType } from '@univerjs/sheets-drawing';\nimport { useDependency } from '@univerjs/ui';\nimport { useEffect, useState } from 'react';\nimport { SetSheetDrawingCommand } from '../../commands/commands/set-sheet-drawing.command';\nimport styles from './index.module.less';\n\nexport interface ISheetDrawingAnchorProps {\n    drawings: IDrawingParam[];\n}\n\nexport const SheetDrawingAnchor = (props: ISheetDrawingAnchorProps) => {\n    const commandService = useDependency(ICommandService);\n    const localeService = useDependency(LocaleService);\n    const drawingManagerService = useDependency(IDrawingManagerService);\n    const renderManagerService = useDependency(IRenderManagerService);\n\n    const { drawings } = props;\n\n    const drawingParam = drawings[0] as ISheetDrawing;\n\n    if (drawingParam == null) {\n        return;\n    }\n\n    const { unitId } = drawingParam;\n\n    const renderObject = renderManagerService.getRenderById(unitId);\n    const scene = renderObject?.scene;\n    if (scene == null) {\n        return;\n    }\n    const transformer = scene.getTransformerByCreate();\n\n    const [anchorShow, setAnchorShow] = useState(true);\n\n    const type = drawingParam.anchorType ?? SheetDrawingAnchorType.Position;\n    const [value, setValue] = useState(type);\n\n    function getUpdateParams(objects: Map<string, BaseObject>, drawingManagerService: IDrawingManagerService): Nullable<ISheetDrawing>[] {\n        const params: Nullable<ISheetDrawing>[] = [];\n        objects.forEach((object) => {\n            const { oKey } = object;\n\n            const searchParam = drawingManagerService.getDrawingOKey(oKey);\n\n            if (searchParam == null) {\n                params.push(null);\n                return true;\n            }\n\n            const { unitId, subUnitId, drawingId, drawingType, anchorType, sheetTransform } = searchParam as ISheetDrawing;\n\n            params.push({\n                unitId,\n                subUnitId,\n                drawingId,\n                anchorType,\n                sheetTransform,\n                drawingType,\n            });\n        });\n\n        return params;\n    }\n\n    useEffect(() => {\n        const onClearControlObserver = transformer.clearControl$.subscribe((changeSelf) => {\n            if (changeSelf === true) {\n                setAnchorShow(false);\n            }\n        });\n\n        const onChangeStartObserver = transformer.changeStart$.subscribe((state) => {\n            const { objects } = state;\n            const params = getUpdateParams(objects, drawingManagerService);\n\n            if (params.length === 0) {\n                setAnchorShow(false);\n            } else if (params.length >= 1) {\n                setAnchorShow(true);\n                const anchorType = params[0]?.anchorType || SheetDrawingAnchorType.Position;\n                setValue(anchorType);\n            }\n        });\n\n        return () => {\n            onChangeStartObserver.unsubscribe();\n            onClearControlObserver.unsubscribe();\n        };\n    }, []);\n\n    function handleChange(value: string | number | boolean) {\n        setValue((value as SheetDrawingAnchorType));\n\n        const focusDrawings = drawingManagerService.getFocusDrawings();\n        if (focusDrawings.length === 0) {\n            return;\n        }\n\n        const updateParams = focusDrawings.map((drawing) => {\n            return {\n                unitId: drawing.unitId,\n                subUnitId: drawing.subUnitId,\n                drawingId: drawing.drawingId,\n                anchorType: value,\n            };\n        });\n\n        commandService.executeCommand(SetSheetDrawingCommand.id, {\n            unitId: focusDrawings[0].unitId,\n            drawings: updateParams,\n        });\n    }\n\n    const gridDisplay = (isShow: boolean) => {\n        return isShow ? 'block' : 'none';\n    };\n\n    return (\n        <div className={clsx(styles.imageCommonPanelGrid, styles.imageCommonPanelBorder)} style={{ display: gridDisplay(anchorShow) }}>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelTitle)}>\n                    <div>{localeService.t('drawing-anchor.title')}</div>\n                </div>\n            </div>\n            <div className={clsx(styles.imageCommonPanelRow)}>\n                <div className={clsx(styles.imageCommonPanelColumn)}>\n                    <RadioGroup value={value} onChange={handleChange} direction=\"vertical\">\n                        <Radio value={SheetDrawingAnchorType.Both}>{localeService.t('drawing-anchor.both')}</Radio>\n                        <Radio value={SheetDrawingAnchorType.Position}>{localeService.t('drawing-anchor.position')}</Radio>\n                        <Radio value={SheetDrawingAnchorType.None}>{localeService.t('drawing-anchor.none')}</Radio>\n                    </RadioGroup>\n                </div>\n            </div>\n        </div>\n    );\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { MenuSchemaType } from '@univerjs/ui';\nimport { RibbonStartGroup } from '@univerjs/ui';\nimport { InsertCellImageCommand, InsertFloatImageCommand } from '../commands/commands/insert-image.command';\nimport { ImageMenuFactory, SHEETS_IMAGE_MENU_ID, UploadCellImageMenuFactory, UploadFloatImageMenuFactory } from '../views/menu/image.menu';\n\nexport const menuSchema: MenuSchemaType = {\n    [RibbonStartGroup.FORMULAS_INSERT]: {\n        [SHEETS_IMAGE_MENU_ID]: {\n            order: 3,\n            menuItemFactory: ImageMenuFactory,\n            [InsertFloatImageCommand.id]: {\n                order: 0,\n                menuItemFactory: UploadFloatImageMenuFactory,\n            },\n            [InsertCellImageCommand.id]: {\n                order: 1,\n                menuItemFactory: UploadCellImageMenuFactory,\n            },\n        },\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IContextService } from '@univerjs/core';\nimport type { IShortcutItem } from '@univerjs/ui';\nimport { Direction, EDITOR_ACTIVATED, FOCUSING_COMMON_DRAWINGS, FOCUSING_FX_BAR_EDITOR, FOCUSING_PANEL_EDITOR } from '@univerjs/core';\nimport { KeyCode } from '@univerjs/ui';\nimport { DeleteDrawingsCommand } from '../../commands/commands/delete-drawings.command';\nimport { type IMoveDrawingsCommandParams, MoveDrawingsCommand } from '../../commands/commands/move-drawings.command';\n\nexport function whenSheetDrawingFocused(contextService: IContextService): boolean {\n    return (\n        !contextService.getContextValue(FOCUSING_FX_BAR_EDITOR) &&\n        !contextService.getContextValue(EDITOR_ACTIVATED) &&\n        !contextService.getContextValue(FOCUSING_PANEL_EDITOR) &&\n        contextService.getContextValue(FOCUSING_COMMON_DRAWINGS)\n    );\n}\n\nexport const MoveDrawingDownShortcutItem: IShortcutItem<IMoveDrawingsCommandParams> = {\n    id: MoveDrawingsCommand.id,\n    description: 'shortcut.sheet.drawing-move-down',\n    group: '4_sheet-drawing-view',\n    binding: KeyCode.ARROW_DOWN,\n    priority: 100,\n    preconditions: whenSheetDrawingFocused,\n    staticParameters: {\n        direction: Direction.DOWN,\n    },\n};\n\nexport const MoveDrawingUpShortcutItem: IShortcutItem<IMoveDrawingsCommandParams> = {\n    id: MoveDrawingsCommand.id,\n    description: 'shortcut.sheet.drawing-move-up',\n    group: '4_sheet-drawing-view',\n    binding: KeyCode.ARROW_UP,\n    priority: 100,\n    preconditions: whenSheetDrawingFocused,\n    staticParameters: {\n        direction: Direction.UP,\n    },\n};\n\nexport const MoveDrawingLeftShortcutItem: IShortcutItem<IMoveDrawingsCommandParams> = {\n    id: MoveDrawingsCommand.id,\n    description: 'shortcut.sheet.drawing-move-left',\n    group: '4_sheet-drawing-view',\n    binding: KeyCode.ARROW_LEFT,\n    priority: 100,\n    preconditions: whenSheetDrawingFocused,\n    staticParameters: {\n        direction: Direction.LEFT,\n    },\n};\n\nexport const MoveDrawingRightShortcutItem: IShortcutItem<IMoveDrawingsCommandParams> = {\n    id: MoveDrawingsCommand.id,\n    description: 'shortcut.sheet.drawing-move-right',\n    group: '4_sheet-drawing-view',\n    binding: KeyCode.ARROW_RIGHT,\n    priority: 100,\n    preconditions: whenSheetDrawingFocused,\n    staticParameters: {\n        direction: Direction.RIGHT,\n    },\n};\nexport const DeleteDrawingsShortcutItem: IShortcutItem = {\n    id: DeleteDrawingsCommand.id,\n    description: 'shortcut.sheet.drawing-delete',\n    group: '4_sheet-drawing-view',\n    // when focusing on any other input tag do not trigger this shortcut\n    preconditions: whenSheetDrawingFocused,\n    binding: KeyCode.DELETE,\n    mac: KeyCode.BACKSPACE,\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Disposable, ICommandService, Inject } from '@univerjs/core';\nimport { IDrawingManagerService } from '@univerjs/drawing';\n\nimport { AddImageSingle } from '@univerjs/icons';\nimport { SheetsSelectionsService } from '@univerjs/sheets';\nimport { ComponentManager, IMenuManagerService, IShortcutService } from '@univerjs/ui';\nimport { DeleteDrawingsCommand } from '../commands/commands/delete-drawings.command';\nimport { GroupSheetDrawingCommand } from '../commands/commands/group-sheet-drawing.command';\nimport { InsertCellImageCommand, InsertFloatImageCommand } from '../commands/commands/insert-image.command';\nimport { InsertSheetDrawingCommand } from '../commands/commands/insert-sheet-drawing.command';\nimport { MoveDrawingsCommand } from '../commands/commands/move-drawings.command';\n\nimport { RemoveSheetDrawingCommand } from '../commands/commands/remove-sheet-drawing.command';\nimport { SetDrawingArrangeCommand } from '../commands/commands/set-drawing-arrange.command';\nimport { SetSheetDrawingCommand } from '../commands/commands/set-sheet-drawing.command';\nimport { UngroupSheetDrawingCommand } from '../commands/commands/ungroup-sheet-drawing.command';\nimport { ClearSheetDrawingTransformerOperation } from '../commands/operations/clear-drawing-transformer.operation';\nimport { EditSheetDrawingOperation } from '../commands/operations/edit-sheet-drawing.operation';\nimport { SidebarSheetDrawingOperation } from '../commands/operations/open-drawing-panel.operation';\nimport { IMAGE_UPLOAD_ICON } from '../views/menu/image.menu';\nimport { COMPONENT_SHEET_DRAWING_PANEL } from '../views/sheet-image-panel/component-name';\nimport { SheetDrawingPanel } from '../views/sheet-image-panel/SheetDrawingPanel';\nimport { menuSchema } from './menu.schema';\nimport { DeleteDrawingsShortcutItem, MoveDrawingDownShortcutItem, MoveDrawingLeftShortcutItem, MoveDrawingRightShortcutItem, MoveDrawingUpShortcutItem } from './shortcuts/drawing.shortcut';\n\nexport class SheetDrawingUIController extends Disposable {\n    constructor(\n        @Inject(ComponentManager) private readonly _componentManager: ComponentManager,\n        @IMenuManagerService private readonly _menuManagerService: IMenuManagerService,\n        @ICommandService private readonly _commandService: ICommandService,\n        @IShortcutService private readonly _shortcutService: IShortcutService,\n        @IDrawingManagerService private readonly _drawingManagerService: IDrawingManagerService,\n        @Inject(SheetsSelectionsService) private readonly _sheetsSelectionsService: SheetsSelectionsService\n    ) {\n        super();\n\n        this._init();\n    }\n\n    private _initCustomComponents(): void {\n        const componentManager = this._componentManager;\n        this.disposeWithMe(componentManager.register(IMAGE_UPLOAD_ICON, AddImageSingle));\n        this.disposeWithMe(componentManager.register(COMPONENT_SHEET_DRAWING_PANEL, SheetDrawingPanel));\n    }\n\n    private _initMenus(): void {\n        this._menuManagerService.mergeMenu(menuSchema);\n    }\n\n    private _initCommands() {\n        [\n            InsertFloatImageCommand,\n            InsertCellImageCommand,\n            InsertSheetDrawingCommand,\n            RemoveSheetDrawingCommand,\n            SetSheetDrawingCommand,\n            SidebarSheetDrawingOperation,\n            ClearSheetDrawingTransformerOperation,\n            EditSheetDrawingOperation,\n            GroupSheetDrawingCommand,\n            UngroupSheetDrawingCommand,\n            MoveDrawingsCommand,\n            DeleteDrawingsCommand,\n            SetDrawingArrangeCommand,\n        ].forEach((command) => this.disposeWithMe(this._commandService.registerCommand(command)));\n    }\n\n    private _initShortcuts(): void {\n        [\n            // sheet drawing shortcuts\n            MoveDrawingDownShortcutItem,\n            MoveDrawingUpShortcutItem,\n            MoveDrawingLeftShortcutItem,\n            MoveDrawingRightShortcutItem,\n            DeleteDrawingsShortcutItem,\n        ].forEach((item) => {\n            this.disposeWithMe(this._shortcutService.registerShortcut(item));\n        });\n    }\n\n    private _init(): void {\n        this._initCommands();\n        this._initCustomComponents();\n        this._initMenus();\n        this._initShortcuts();\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, IDrawingSearch, IPosition, IRange, ITransformState, Nullable, Serializable, Workbook, Worksheet } from '@univerjs/core';\nimport type { IDrawingJsonUndo1 } from '@univerjs/drawing';\nimport type { BaseObject, IBoundRectNoAngle, IRectProps, IRender, Scene, SpreadsheetSkeleton } from '@univerjs/engine-render';\nimport type { ISetFrozenMutationParams, ISetWorksheetRowAutoHeightMutationParams } from '@univerjs/sheets';\nimport type { IFloatDomData, ISheetDrawingPosition, ISheetFloatDom } from '@univerjs/sheets-drawing';\nimport type { IFloatDom, IFloatDomLayout } from '@univerjs/ui';\nimport type { IInsertDrawingCommandParams } from '../commands/commands/interfaces';\nimport { Disposable, DisposableCollection, DrawingTypeEnum, fromEventSubject, generateRandomId, ICommandService, Inject, IUniverInstanceService, LifecycleService, LifecycleStages, Tools, UniverInstanceType } from '@univerjs/core';\nimport { getDrawingShapeKeyByDrawingSearch, IDrawingManagerService } from '@univerjs/drawing';\nimport { DRAWING_OBJECT_LAYER_INDEX, IRenderManagerService, ObjectType, Rect, SHEET_VIEWPORT_KEY } from '@univerjs/engine-render';\nimport { COMMAND_LISTENER_SKELETON_CHANGE, getSheetCommandTarget, SetFrozenMutation, SetWorksheetRowAutoHeightMutation } from '@univerjs/sheets';\nimport { DrawingApplyType, ISheetDrawingService, SetDrawingApplyMutation } from '@univerjs/sheets-drawing';\nimport { ISheetSelectionRenderService, SetScrollOperation, SetZoomRatioOperation, SheetSkeletonManagerService } from '@univerjs/sheets-ui';\nimport { CanvasFloatDomService } from '@univerjs/ui';\nimport { BehaviorSubject, filter, map, of, Subject, switchMap, take } from 'rxjs';\nimport { InsertSheetDrawingCommand } from '../commands/commands/insert-sheet-drawing.command';\n\nexport interface ICanvasFloatDom {\n    /**\n     * whether allow transform float-dom\n     */\n    allowTransform?: boolean;\n    /**\n     * initial position of float-dom\n     */\n    initPosition: IPosition;\n    componentKey: string;\n    /**\n     * unitId of workbook, if not set, will use current workbook\n     */\n    unitId?: string;\n    /**\n     * subUnitId of worksheet, if not set, will use current worksheet\n     */\n    subUnitId?: string;\n    /**\n     * @deprecated Please use `data`. for saving to disk, everything add to float-dom must be serializable.\n     */\n    props?: Record<string, any>;\n    /**\n     * data of component, will save to snapshot, json-like data\n     */\n    data?: Serializable;\n    /**\n     * the float-dom type\n     */\n    type?: DrawingTypeEnum;\n\n    /**\n     * whether allow event pass through float dom to canvas.\n     */\n    eventPassThrough?: boolean;\n}\n\nenum ScrollDirectionResponse {\n    ALL = 'ALL',\n    HORIZONTAL = 'HORIZONTAL',\n    VERTICAL = 'VERTICAL',\n}\ninterface ICanvasFloatDomInfo {\n    position$: BehaviorSubject<IFloatDomLayout>;\n    dispose: IDisposable;\n    rect: Rect;\n    unitId: string;\n    subUnitId: string;\n    boundsOfViewArea?: IBoundRectNoAngle;\n    scrollDirectionResponse?: ScrollDirectionResponse; // update float dom pos by scrolling\n    domAnchor?: IDOMAnchor;\n}\n\nexport interface IDOMAnchor {\n    width: number;\n    height: number;\n    horizonOffsetAlign?: 'left' | 'right';\n    verticalOffsetAlign?: 'top' | 'bottom';\n    marginX?: number | string;\n    marginY?: number | string;\n}\n\nexport interface ILimitBound extends IBoundRectNoAngle {\n    /**\n     * Actually, it means fixed.\n     * When left is true, dom is fixed to left of dom pos when dom width is shrinking. or dom is fixed to right of dom pos when dom width is shrinking.\n     * When top is true, dom is fixed to top of dom pos when dom height is shrinking. or dom is fixed to bottom of dom pos when dom height is shrinking.\n     */\n    absolute: {\n        left: boolean;\n        top: boolean;\n    };\n}\n\n/**\n * Adjust dom bound size when scrolling (dom bound would shrink when scrolling if over the edge of viewMain)\n * @param posOfFloatObject  The position of float object, relative to sheet content, scale & scrolling does not affect it.\n * @param scene\n * @param skeleton\n * @param worksheet\n * @returns ILimitBound\n */\n// eslint-disable-next-line max-lines-per-function\nexport function transformBound2DOMBound(posOfFloatObject: IBoundRectNoAngle, scene: Scene, skeleton: SpreadsheetSkeleton, worksheet: Worksheet, floatDomInfo?: ICanvasFloatDomInfo): ILimitBound {\n    const { scaleX, scaleY } = scene.getAncestorScale();\n    const viewMain = scene.getViewport(SHEET_VIEWPORT_KEY.VIEW_MAIN);\n\n    const freeze = worksheet.getFreeze();\n    const { startColumn: viewMainStartColumn, startRow: viewMainStartRow, xSplit: freezedCol, ySplit: freezedRow } = freeze;\n    /**\n     * Actually, it means fixed.\n     */\n    const absolute = {\n        left: true, // left means the left of pic is in a viewMainLeft\n        top: true,\n    };\n\n    if (!viewMain) {\n        return {\n            ...posOfFloatObject,\n            absolute,\n        };\n    }\n    const { left, right, top, bottom } = posOfFloatObject;\n    let { top: viewBoundsTop, left: viewBoundsLeft, viewportScrollX, viewportScrollY } = viewMain;\n    // specify edge of viewbound. if not specify, use viewMain.\n    const { boundsOfViewArea: specBoundsOfViewArea, scrollDirectionResponse } = floatDomInfo || {};\n    const { rowHeaderWidth, columnHeaderHeight } = skeleton;\n    const boundsOfViewArea = {\n        top: columnHeaderHeight,\n        left: rowHeaderWidth,\n    };\n    if (specBoundsOfViewArea) {\n        if (Tools.isDefine(boundsOfViewArea.top)) {\n            boundsOfViewArea.top = specBoundsOfViewArea.top;\n        }\n        if (Tools.isDefine(boundsOfViewArea.left)) {\n            boundsOfViewArea.left = specBoundsOfViewArea.left;\n        }\n    }\n    if (scrollDirectionResponse === ScrollDirectionResponse.HORIZONTAL) {\n        viewportScrollY = 0;\n    }\n    if (scrollDirectionResponse === ScrollDirectionResponse.VERTICAL) {\n        viewportScrollX = 0;\n    }\n\n    let offsetLeft: number = 0;\n    let offsetRight: number = 0;\n\n    /**\n     * freezed viewport start & end position\n     */\n    const freezeStartY = skeleton.rowStartY(viewMainStartRow - freezedRow) + columnHeaderHeight;\n    const freezeStartX = skeleton.colStartX(viewMainStartColumn - freezedCol) + rowHeaderWidth;\n    const freezeEndY = skeleton.rowStartY(viewMainStartRow) + columnHeaderHeight;\n    const freezeEndX = skeleton.colStartX(viewMainStartColumn) + rowHeaderWidth;\n\n    if (freezedCol === 0) {\n        absolute.left = false;\n        offsetLeft = (left - viewportScrollX) * scaleX;\n        offsetRight = (right - viewportScrollX) * scaleX;\n    } else {\n        // freeze\n        // viewMainLeft may not start at col = 0\n        // DO NOT use viewMainLeft?.viewBound.right. It's not accurate. there is a delay to set viewBound!\n        const leftToCanvas = left - (freezeStartX - rowHeaderWidth);\n        const rightToCanvas = right - (freezeStartX - rowHeaderWidth);\n        if (right < freezeEndX) {\n            offsetLeft = leftToCanvas * scaleX;\n            offsetRight = rightToCanvas * scaleX;\n        } else if (left <= freezeEndX && right >= freezeEndX) {\n            offsetLeft = leftToCanvas * scaleX;\n            offsetRight = Math.max(viewBoundsLeft, (right - viewportScrollX) * scaleX);\n        } else if (left > freezeEndX) {\n            absolute.left = false;\n            offsetLeft = Math.max((left - viewportScrollX) * scaleX, viewBoundsLeft);\n            offsetRight = Math.max((right - viewportScrollX) * scaleX, viewBoundsLeft);\n        }\n    }\n\n    let offsetTop: number = 0;\n    let offsetBottom: number = 0;\n    if (freezedRow === 0) {\n        absolute.top = false;\n        offsetTop = (top - viewportScrollY) * scaleY;\n        offsetBottom = (bottom - viewportScrollY) * scaleY;\n    } else {\n        const topToCanvas = top - (freezeStartY - columnHeaderHeight);\n        const bottomToCanvas = bottom - (freezeStartY - columnHeaderHeight);\n        if (bottom < freezeEndY) {\n            offsetTop = topToCanvas * scaleY;\n            offsetBottom = bottomToCanvas * scaleY;\n        } else if (top <= freezeEndY && bottom >= freezeEndY) {\n            offsetTop = topToCanvas * scaleY;\n            offsetBottom = Math.max(viewBoundsTop, (bottom - viewportScrollY) * scaleY);\n        } else if (top > freezeEndY) {\n            absolute.top = false;\n            offsetTop = Math.max((top - viewportScrollY) * scaleY, viewBoundsTop);\n            offsetBottom = Math.max((bottom - viewportScrollY) * scaleY, viewBoundsTop);\n        }\n    }\n\n    offsetLeft = Math.max(offsetLeft, boundsOfViewArea.left);\n    offsetTop = Math.max(offsetTop, boundsOfViewArea.top);\n    offsetRight = Math.max(offsetRight, boundsOfViewArea.left);\n    offsetBottom = Math.max(offsetBottom, boundsOfViewArea.top);\n\n    const rs = {\n        left: offsetLeft,\n        right: offsetRight,\n        top: offsetTop,\n        bottom: offsetBottom,\n        absolute,\n    };\n    return rs;\n}\n\n/**\n * Calculate the position of the floating dom, limited by bounds of viewMain in transformBound2DOMBound\n * @param floatObject\n * @param renderUnit\n * @param skeleton\n * @param worksheet\n * @returns {IFloatDomLayout} position\n */\nconst calcPosition = (\n    floatObject: BaseObject,\n    renderUnit: IRender,\n    skeleton: SpreadsheetSkeleton,\n    worksheet: Worksheet,\n    floatDomInfo?: ICanvasFloatDomInfo\n): IFloatDomLayout => {\n    const { scene } = renderUnit;\n    const { left, top, width, height, angle } = floatObject;\n    const boundOfFloatObject: IBoundRectNoAngle = {\n        left,\n        right: left + width,\n        top,\n        bottom: top + height,\n    };\n\n    const offsetBound = transformBound2DOMBound(boundOfFloatObject, scene, skeleton, worksheet, floatDomInfo);\n    const { scaleX, scaleY } = scene.getAncestorScale();\n\n    const domPos: IFloatDomLayout = {\n        startX: offsetBound.left,\n        endX: offsetBound.right,\n        startY: offsetBound.top,\n        endY: offsetBound.bottom,\n        rotate: angle,\n        width: width * scaleX,\n        height: height * scaleY,\n        absolute: offsetBound.absolute,\n    };\n\n    return domPos;\n};\n\nexport interface ISheetCanvasFloatDomHook {\n    onGetFloatDomProps: (id: string) => Record<string, any>;\n}\n\nexport class SheetCanvasFloatDomManagerService extends Disposable {\n    /**\n     * for update dom container position when scrolling and zoom\n     */\n    private _domLayerMap: Map<string, Map<string, Map<string, { props?: any }>>> = new Map();\n    /**\n     * for update dom container position when scrolling and zoom\n     */\n    private _domLayerInfoMap: Map<string, ICanvasFloatDomInfo> = new Map();\n\n    private _transformChange$ = new Subject<{ id: string; value: ITransformState }>();\n    transformChange$ = this._transformChange$.asObservable();\n\n    private _add$ = new Subject<{ unitId: string; subUnitId: string; id: string; data?: Record<string, any> }>();\n    public add$ = this._add$.asObservable();\n\n    private _remove$ = new Subject<{ unitId: string; subUnitId: string; id: string }>();\n    remove$ = this._remove$.asObservable();\n\n    private _hooks: ISheetCanvasFloatDomHook[] = [];\n\n    constructor(\n        @Inject(IRenderManagerService) private _renderManagerService: IRenderManagerService,\n        @IUniverInstanceService private _univerInstanceService: IUniverInstanceService,\n        @Inject(ICommandService) private _commandService: ICommandService,\n        @IDrawingManagerService private _drawingManagerService: IDrawingManagerService,\n        @Inject(CanvasFloatDomService) private readonly _canvasFloatDomService: CanvasFloatDomService,\n        @ISheetDrawingService private readonly _sheetDrawingService: ISheetDrawingService,\n        @Inject(LifecycleService) protected readonly _lifecycleService: LifecycleService\n    ) {\n        super();\n        this._drawingAddListener();\n        this._featureUpdateListener();\n        this._deleteListener();\n        this._bindScrollEvent();\n    }\n\n    private _bindScrollEvent() {\n        this._lifecycleService.lifecycle$.pipe(filter((s) => s === LifecycleStages.Rendered), take(1)).subscribe(() => {\n            this._scrollUpdateListener();\n        });\n    }\n\n    /**\n     * For scrolling and zoom\n     * @param unitId\n     * @param subUnitId\n     */\n    private _ensureMap(unitId: string, subUnitId: string) {\n        let unitMap = this._domLayerMap.get(unitId);\n        if (!unitMap) {\n            unitMap = new Map();\n            this._domLayerMap.set(unitId, unitMap);\n        }\n\n        let subUnitMap = unitMap.get(subUnitId);\n        if (!subUnitMap) {\n            subUnitMap = new Map();\n            unitMap.set(subUnitId, subUnitMap);\n        }\n\n        return subUnitMap;\n    }\n\n    getFloatDomInfo(id: string) {\n        return this._domLayerInfoMap.get(id);\n    }\n\n    private _getSceneAndTransformerByDrawingSearch(unitId: Nullable<string>) {\n        if (unitId == null) {\n            return;\n        }\n\n        const renderUnit = this._renderManagerService.getRenderById(unitId);\n\n        const scene = renderUnit?.scene;\n\n        if (renderUnit == null || scene == null) {\n            return null;\n        }\n\n        const transformer = scene.getTransformerByCreate();\n        const canvas = renderUnit.engine.getCanvasElement();\n\n        return { scene, transformer, renderUnit, canvas };\n    }\n\n    private _getFloatDomProps(id: string) {\n        let props;\n        this._hooks.forEach((hook) => {\n            props = hook.onGetFloatDomProps(id);\n        });\n\n        return props;\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    private _drawingAddListener() {\n        this.disposeWithMe(\n\n            // eslint-disable-next-line max-lines-per-function\n            this._drawingManagerService.add$.subscribe((params: IDrawingSearch[]) => {\n                // eslint-disable-next-line max-lines-per-function, complexity\n                (params).forEach((param) => {\n                    const { unitId, subUnitId, drawingId } = param;\n                    const target = getSheetCommandTarget(this._univerInstanceService, { unitId, subUnitId });\n                    const floatDomParam = this._drawingManagerService.getDrawingByParam(param) as IFloatDomData;\n\n                    const workbook = this._univerInstanceService.getUnit<Workbook>(unitId, UniverInstanceType.UNIVER_SHEET);\n                    if (!workbook) {\n                        return;\n                    }\n\n                    const activeSheetId = workbook.getActiveSheet().getSheetId();\n\n                    if (!floatDomParam || !target) {\n                        return;\n                    }\n\n                    const skeleton = this._renderManagerService.getRenderById(unitId)?.with(SheetSkeletonManagerService).getSkeletonParam(subUnitId);\n                    if (!skeleton) {\n                        return;\n                    }\n\n                    const { transform, drawingType, data } = floatDomParam;\n\n                    if (drawingType !== DrawingTypeEnum.DRAWING_DOM && drawingType !== DrawingTypeEnum.DRAWING_CHART) {\n                        return;\n                    }\n\n                    const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n\n                    if (renderObject == null) {\n                        return;\n                    }\n                    const { scene, canvas } = renderObject;\n\n                    if (transform == null) {\n                        return true;\n                    }\n\n                    if (activeSheetId !== subUnitId) {\n                        return;\n                    }\n\n                    const { left, top, width, height, angle, flipX, flipY, skewX, skewY } = transform;\n\n                    const rectShapeKey = getDrawingShapeKeyByDrawingSearch({ unitId, subUnitId, drawingId });\n\n                    const rectShape = scene.getObject(rectShapeKey);\n\n                    if (rectShape != null) {\n                        rectShape.transformByState({ left, top, width, height, angle, flipX, flipY, skewX, skewY });\n                        return;\n                    }\n\n                    const imageConfig: IRectProps = {\n                        left,\n                        top,\n                        width,\n                        height,\n                        zIndex: this._drawingManagerService.getDrawingOrder(unitId, subUnitId).length - 1,\n                    };\n\n                    const isChart = drawingType === DrawingTypeEnum.DRAWING_CHART;\n\n                    if (isChart) {\n                        const backgroundColor = data ? (data as Record<string, string>).backgroundColor : 'white';\n                        imageConfig.fill = backgroundColor;\n                        imageConfig.rotateEnabled = false;\n                        if (data && (data as Record<string, string>).border) {\n                            imageConfig.stroke = (data as Record<string, string>).border;\n                        }\n                        imageConfig.paintFirst = 'stroke';\n                        imageConfig.strokeWidth = 1;\n                        imageConfig.borderEnabled = false;\n                        imageConfig.radius = 8;\n                    }\n\n                    const rect = new Rect(rectShapeKey, imageConfig);\n\n                    if (isChart) {\n                        rect.setObjectType(ObjectType.CHART);\n                    }\n\n                    scene.addObject(rect, DRAWING_OBJECT_LAYER_INDEX);\n                    if (floatDomParam.allowTransform !== false) {\n                        scene.attachTransformerTo(rect);\n                    }\n                    const map = this._ensureMap(unitId, subUnitId);\n                    const disposableCollection = new DisposableCollection();\n                    const initPosition = calcPosition(rect, renderObject.renderUnit, skeleton.skeleton, target.worksheet);\n                    const position$ = new BehaviorSubject<IFloatDomLayout>(initPosition);\n\n                    const info: ICanvasFloatDomInfo = {\n                        dispose: disposableCollection,\n                        rect,\n                        position$,\n                        unitId,\n                        subUnitId,\n                    };\n\n                    this._canvasFloatDomService.addFloatDom({\n                        position$,\n                        id: drawingId,\n                        componentKey: floatDomParam.componentKey,\n                        onPointerDown: (evt) => {\n                            canvas.dispatchEvent(new PointerEvent(evt.type, evt));\n                        },\n                        onPointerMove: (evt: PointerEvent | MouseEvent) => {\n                            canvas.dispatchEvent(new PointerEvent(evt.type, evt));\n                        },\n                        onPointerUp: (evt: PointerEvent | MouseEvent) => {\n                            canvas.dispatchEvent(new PointerEvent(evt.type, evt));\n                        },\n                        onWheel: (evt: WheelEvent) => {\n                            canvas.dispatchEvent(new WheelEvent(evt.type, evt));\n                        },\n                        props: map.get(drawingId)?.props ?? this._getFloatDomProps(drawingId),\n                        data,\n                        unitId,\n                    });\n\n                    const listener = rect.onTransformChange$.subscribeEvent(() => {\n                        const newPosition = calcPosition(rect, renderObject.renderUnit, skeleton.skeleton, target.worksheet);\n                        position$.next(\n                            newPosition\n                        );\n                    });\n\n                    disposableCollection.add(() => {\n                        this._canvasFloatDomService.removeFloatDom(drawingId);\n                    });\n                    listener && disposableCollection.add(listener);\n                    this._domLayerInfoMap.set(drawingId, info);\n                    map.set(drawingId, {\n                        ...map.get(drawingId),\n                    });\n                });\n            })\n        );\n\n        // remove float-dom control when drawing removed\n        this.disposeWithMe(\n            this._drawingManagerService.remove$.subscribe((params) => {\n                (params).forEach((param) => {\n                    const { unitId, subUnitId, drawingId } = param;\n                    const rectShapeKey = getDrawingShapeKeyByDrawingSearch({ unitId, subUnitId, drawingId });\n\n                    const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n                    if (renderObject == null) {\n                        return;\n                    }\n                    const { transformer, scene } = renderObject;\n                    const rectShape = scene.getObject(rectShapeKey);\n                    if (rectShape?.oKey) {\n                        transformer.clearControlByIds([rectShape?.oKey]);\n                    }\n                });\n            })\n        );\n    }\n\n    private _scrollUpdateListener() {\n        const updateSheet = (unitId: string, subUnitId: string) => {\n            const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n            const map = this._ensureMap(unitId, subUnitId);\n            const ids = Array.from(map.keys());\n            const target = getSheetCommandTarget(this._univerInstanceService, { unitId, subUnitId });\n            const skeleton = this._renderManagerService.getRenderById(unitId)?.with(SheetSkeletonManagerService).getSkeletonParam(subUnitId);\n            if (!renderObject || !target || !skeleton) {\n                return;\n            }\n            ids.forEach((id) => {\n                const floatDomInfo = this._domLayerInfoMap.get(id);\n                if (floatDomInfo) {\n                    const position = calcPosition(floatDomInfo.rect, renderObject.renderUnit, skeleton.skeleton, target.worksheet, floatDomInfo);\n                    floatDomInfo.position$.next(position);\n                }\n            });\n        };\n\n        // #region scroll\n        this.disposeWithMe(\n            this._univerInstanceService.getCurrentTypeOfUnit$<Workbook>(UniverInstanceType.UNIVER_SHEET).pipe(\n                switchMap((workbook) => workbook ? workbook.activeSheet$ : of(null)),\n                map((worksheet) => {\n                    if (!worksheet) return null;\n                    const unitId = worksheet.getUnitId();\n                    const render = this._renderManagerService.getRenderById(unitId);\n                    return render ? { render, unitId, subUnitId: worksheet.getSheetId() } : null;\n                }),\n                switchMap((render) =>\n                    render\n                        ? fromEventSubject(render.render.scene.getViewport(SHEET_VIEWPORT_KEY.VIEW_MAIN)!.onScrollAfter$)\n                            .pipe(map(() => ({ unitId: render.unitId, subUnitId: render.subUnitId })))\n                        : of(null)\n                )\n            ).subscribe((value) => {\n                if (!value) return; // TODO@weird94: maybe we should throw an error here and do some cleaning work?\n\n                const { unitId, subUnitId } = value;\n                updateSheet(unitId, subUnitId);\n            })\n        );\n\n        //#endregion\n\n        // #region zoom\n        this.disposeWithMe(this._commandService.onCommandExecuted((commandInfo) => {\n            if (commandInfo.id === SetZoomRatioOperation.id) {\n                const params = (commandInfo.params) as any;\n                const { unitId } = params;\n                const subUnitIds = Array.from(this._domLayerMap.get(unitId)?.keys() ?? []);\n                subUnitIds.forEach((subUnitId) => {\n                    updateSheet(unitId, subUnitId);\n                });\n            } else if (commandInfo.id === SetFrozenMutation.id) {\n                const { unitId, subUnitId } = commandInfo.params as ISetFrozenMutationParams;\n                updateSheet(unitId, subUnitId);\n            }\n        }));\n        //# endregion\n    }\n\n    private _getPosition(position: IPosition, unitId: string): Nullable<ISheetDrawingPosition> {\n        const { startX, endX, startY, endY } = position;\n        const selectionRenderService = this._renderManagerService.getRenderById(unitId)?.with(ISheetSelectionRenderService);\n        if (selectionRenderService == null) {\n            return;\n        }\n        const start = selectionRenderService.getCellWithCoordByOffset(startX, startY);\n        if (start == null) {\n            return;\n        }\n\n        const from = {\n            column: start.actualColumn,\n            columnOffset: startX - start.startX,\n            row: start.actualRow,\n            rowOffset: startY - start.startY,\n        };\n\n        const end = selectionRenderService.getCellWithCoordByOffset(endX, endY);\n\n        if (end == null) {\n            return;\n        }\n\n        const to = {\n            column: end.actualColumn,\n            columnOffset: endX - end.startX,\n            row: end.actualRow,\n            rowOffset: endY - end.startY,\n        };\n\n        return {\n            from,\n            to,\n        };\n    }\n\n    private _featureUpdateListener() {\n        this.disposeWithMe(\n            this._drawingManagerService.update$.subscribe((params) => {\n                (params).forEach((data) => {\n                    const sheetDrawing = this._drawingManagerService.getDrawingByParam(data);\n\n                    if (!sheetDrawing) {\n                        return;\n                    }\n\n                    if (sheetDrawing.drawingType !== DrawingTypeEnum.DRAWING_DOM && sheetDrawing.drawingType !== DrawingTypeEnum.DRAWING_CHART) {\n                        return;\n                    }\n\n                    const newValue = {\n                        ...sheetDrawing.transform,\n                    };\n                    this._transformChange$.next({ id: data.drawingId, value: newValue });\n                });\n            })\n        );\n    }\n\n    private _deleteListener() {\n        this.disposeWithMe(\n            this._drawingManagerService.remove$.subscribe((params) => {\n                params.forEach((param) => {\n                    this._removeDom(param.drawingId);\n                });\n            })\n        );\n    }\n\n    updateFloatDomProps(unitId: string, subUnitId: string, id: string, props: Record<string, any>) {\n        const info = this._domLayerInfoMap.get(id);\n        const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n        if (info && renderObject) {\n            const { scene } = renderObject;\n            const rectShapeKey = getDrawingShapeKeyByDrawingSearch({ unitId, subUnitId, drawingId: id });\n            const rectShape = scene.getObject(rectShapeKey);\n            if (rectShape && rectShape instanceof Rect) {\n                rectShape.setProps(props);\n            }\n        }\n    }\n\n    // CreateFloatDomCommand --> floatDomService.addFloatDomToPosition\n    addFloatDomToPosition(layer: ICanvasFloatDom, propId?: string) {\n        const target = getSheetCommandTarget(this._univerInstanceService, {\n            unitId: layer.unitId,\n            subUnitId: layer.subUnitId,\n        });\n        if (!target) {\n            throw new Error('cannot find current target!');\n        }\n\n        const { unitId, subUnitId } = target;\n        const { initPosition, componentKey, data, allowTransform = true } = layer;\n        const id = propId ?? generateRandomId();\n\n        const sheetTransform = this._getPosition(initPosition, unitId);\n        if (sheetTransform == null) {\n            return;\n        }\n        const map = this._ensureMap(unitId, subUnitId);\n        map.set(id, layer);\n\n        const sheetDrawingParam: ISheetFloatDom = {\n            unitId,\n            subUnitId,\n            drawingId: id,\n            drawingType: layer.type || DrawingTypeEnum.DRAWING_DOM,\n            componentKey,\n            sheetTransform,\n            transform: {\n                left: initPosition.startX,\n                top: initPosition.startY,\n                width: initPosition.endX - initPosition.startX,\n                height: initPosition.endY - initPosition.startY,\n            },\n            data,\n            allowTransform,\n        };\n\n        // mutation\n        // ---> this._drawingManagerService.add$.subscribe\n        this._commandService.executeCommand(InsertSheetDrawingCommand.id, {\n            unitId,\n            drawings: [sheetDrawingParam],\n        } as IInsertDrawingCommandParams);\n\n        this._add$.next({ unitId, subUnitId, id });\n\n        return {\n            id,\n            dispose: () => {\n                this._removeDom(id, true);\n            },\n        };\n    }\n\n    private _removeDom(id: string, removeDrawing = false) {\n        const info = this._domLayerInfoMap.get(id);\n        if (!info) {\n            return;\n        }\n        const { unitId, subUnitId } = info;\n        this._domLayerInfoMap.delete(id);\n\n        info.dispose.dispose();\n        const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n        if (renderObject) {\n            renderObject.scene.removeObject(info.rect);\n        }\n\n        if (removeDrawing) {\n            const map = this._ensureMap(unitId, subUnitId);\n            map.delete(id);\n            const param = this._drawingManagerService.getDrawingByParam({ unitId, subUnitId, drawingId: id });\n            if (!param) {\n                return;\n            }\n            const jsonOp = this._sheetDrawingService.getBatchRemoveOp([param]) as IDrawingJsonUndo1;\n\n            const { redo, objects } = jsonOp;\n            this._commandService.syncExecuteCommand(SetDrawingApplyMutation.id, { unitId, subUnitId, op: redo, objects, type: DrawingApplyType.REMOVE });\n        }\n    }\n\n    addHook(hook: ISheetCanvasFloatDomHook): IDisposable {\n        this._hooks.push(hook);\n\n        return {\n            dispose: () => {\n                const index = this._hooks.findIndex((h) => h === hook);\n                this._hooks.splice(index, 1);\n            },\n        };\n    }\n\n    // eslint-disable-next-line max-lines-per-function, complexity\n    addFloatDomToRange(range: IRange, config: ICanvasFloatDom, domAnchor: Partial<IDOMAnchor>, propId?: string) {\n        const target = getSheetCommandTarget(this._univerInstanceService, {\n            unitId: config.unitId,\n            subUnitId: config.subUnitId,\n        });\n        if (!target) {\n            throw new Error('cannot find current target!');\n        }\n        const { unitId, subUnitId } = target;\n        const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n        if (!renderObject) return;\n        const currentRender = this._renderManagerService.getRenderById(unitId);\n        if (!currentRender) return;\n        const skeletonParam = this._renderManagerService.getRenderById(unitId)?.with(SheetSkeletonManagerService).getWorksheetSkeleton(subUnitId);\n        if (!skeletonParam) return;\n\n        const { componentKey, data, allowTransform = true } = config;\n        const id = propId ?? generateRandomId();\n\n        const { position: rangePosition, position$: rangePos$ } = this._createRangePositionObserver(range, currentRender, skeletonParam.skeleton);\n        const sheetTransform = this._getPosition(rangePosition, unitId);\n        if (sheetTransform == null) {\n            return;\n        }\n        const map = this._ensureMap(unitId, subUnitId);\n        map.set(id, config);\n\n        const scene = renderObject.scene;\n        const { scaleX } = scene.getAncestorScale();\n        const domPosFromRange = calcDomPositionByAnchor(rangePosition, domAnchor, scaleX);\n\n        const sheetDrawingParam: ISheetFloatDom = {\n            unitId,\n            subUnitId,\n            drawingId: id,\n            drawingType: config.type || DrawingTypeEnum.DRAWING_DOM,\n            componentKey,\n            sheetTransform,\n            transform: {\n                left: domPosFromRange.startX,\n                top: domPosFromRange.startY,\n                width: domPosFromRange.width,\n                height: domPosFromRange.height,\n            } as ITransformState,\n            data,\n            allowTransform,\n        };\n\n        {\n            const { unitId, subUnitId, drawingId } = sheetDrawingParam;\n            const target = getSheetCommandTarget(this._univerInstanceService, { unitId, subUnitId });\n            const floatDomParam = sheetDrawingParam;\n\n            const workbook = this._univerInstanceService.getUnit<Workbook>(unitId, UniverInstanceType.UNIVER_SHEET);\n            if (!workbook) {\n                return;\n            }\n\n            const activeSheetId = workbook.getActiveSheet().getSheetId();\n\n            if (!floatDomParam || !target) {\n                return;\n            }\n\n            const skMangerService = this._renderManagerService.getRenderById(unitId)?.with(SheetSkeletonManagerService);\n            if (!skMangerService) {\n                return;\n            }\n            const skeletonParam = skMangerService.getWorksheetSkeleton(subUnitId);\n            if (!skeletonParam) {\n                return;\n            }\n\n            const { transform, drawingType, data } = floatDomParam;\n\n            if (drawingType !== DrawingTypeEnum.DRAWING_DOM && drawingType !== DrawingTypeEnum.DRAWING_CHART) {\n                return;\n            }\n\n            const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n\n            if (renderObject == null) {\n                return;\n            }\n            const { scene, canvas } = renderObject;\n\n            if (transform == null) {\n                return;\n            }\n\n            if (activeSheetId !== subUnitId) {\n                return;\n            }\n            // from floatDomParam.transform\n            const { left, top, width, height, angle, flipX, flipY, skewX, skewY } = transform;\n\n            const rectShapeKey = getDrawingShapeKeyByDrawingSearch({ unitId, subUnitId, drawingId });\n\n            const rectShape = scene.getObject(rectShapeKey);\n\n            if (rectShape != null) {\n                rectShape.transformByState({ left, top, width, height, angle, flipX, flipY, skewX, skewY });\n                return;\n            }\n\n            const domConfig: IRectProps = {\n                left, // from floatDomParam.transform\n                top,\n                width,\n                height,\n                zIndex: this._drawingManagerService.getDrawingOrder(unitId, subUnitId).length - 1,\n            };\n\n            const isChart = drawingType === DrawingTypeEnum.DRAWING_CHART;\n\n            if (isChart) {\n                const backgroundColor = data ? (data as Record<string, string>).backgroundColor : 'white';\n                domConfig.fill = backgroundColor;\n                domConfig.rotateEnabled = false;\n                if (data && (data as Record<string, string>).border) {\n                    domConfig.stroke = (data as Record<string, string>).border;\n                }\n                domConfig.paintFirst = 'stroke';\n                domConfig.strokeWidth = 1;\n                domConfig.borderEnabled = false;\n                domConfig.radius = 8;\n            }\n\n            const domRect = new Rect(rectShapeKey, domConfig);\n\n            if (isChart) {\n                domRect.setObjectType(ObjectType.CHART);\n            }\n\n            scene.addObject(domRect, DRAWING_OBJECT_LAYER_INDEX);\n            if (floatDomParam.allowTransform !== false) {\n                scene.attachTransformerTo(domRect);\n            }\n            const map = this._ensureMap(unitId, subUnitId);\n            const disposableCollection = new DisposableCollection();\n\n            const viewMain = scene.getMainViewport();\n            const { rowHeaderWidth, columnHeaderHeight } = skeletonParam.skeleton;\n\n            const boundsOfViewArea: IBoundRectNoAngle = {\n                top: columnHeaderHeight,\n                left: rowHeaderWidth,\n                bottom: viewMain.bottom,\n                right: viewMain.right,\n            };\n\n            const floatDomInfo = {\n                dispose: disposableCollection,\n                rect: domRect,\n                boundsOfViewArea,\n                domAnchor,\n                unitId,\n                subUnitId,\n            } as unknown as ICanvasFloatDomInfo;\n\n            const initedPosition = calcPosition(domRect, renderObject.renderUnit, skeletonParam.skeleton, target.worksheet, floatDomInfo);\n            const position$ = new BehaviorSubject<IFloatDomLayout>(initedPosition);\n            floatDomInfo.position$ = position$;\n\n            // used in FloatDom.tsx\n            let floatDomCfg: IFloatDom = {\n                position$,\n                id: drawingId,\n                componentKey: floatDomParam.componentKey,\n                onPointerDown: () => { },\n                onPointerMove: () => { },\n                onPointerUp: () => { },\n                onWheel: (evt: WheelEvent) => {\n                    canvas.dispatchEvent(new WheelEvent(evt.type, evt));\n                },\n                props: map.get(drawingId)?.props ?? this._getFloatDomProps(drawingId),\n                data,\n                unitId,\n            };\n            if (config.eventPassThrough) {\n                floatDomCfg = {\n                    ...floatDomCfg,\n                    onPointerDown: (evt) => {\n                        canvas.dispatchEvent(new PointerEvent(evt.type, evt));\n                    },\n                    onPointerMove: (evt: PointerEvent | MouseEvent) => {\n                        canvas.dispatchEvent(new PointerEvent(evt.type, evt));\n                    },\n                    onPointerUp: (evt: PointerEvent | MouseEvent) => {\n                        canvas.dispatchEvent(new PointerEvent(evt.type, evt));\n                    },\n                };\n            }\n            this._canvasFloatDomService.addFloatDom(floatDomCfg);\n\n            this.disposeWithMe(rangePos$.subscribe((newRangePos) => {\n                const calcOffsetPos = calcDomPositionByAnchor({\n                    rotate: 0,\n                    startX: newRangePos.startX,\n                    startY: newRangePos.startY,\n                    endX: newRangePos.endX,\n                    endY: newRangePos.endY,\n                    width: domAnchor.width ?? newRangePos.width,\n                    height: domAnchor.height ?? newRangePos.height,\n                    absolute: {\n                        left: rangePosition.absolute.left,\n                        top: rangePosition.absolute.top,\n                    },\n                }, domAnchor);\n                const rectShapeKey = getDrawingShapeKeyByDrawingSearch({ unitId, subUnitId, drawingId });\n                const newRect = new Rect(rectShapeKey, {\n                    left: calcOffsetPos.startX,\n                    top: calcOffsetPos.startY,\n                    width: domAnchor.width ?? newRangePos.width,\n                    height: domAnchor.height ?? newRangePos.height,\n                    zIndex: this._drawingManagerService.getDrawingOrder(unitId, subUnitId).length - 1,\n                });\n                const newPos = calcPosition(newRect, renderObject.renderUnit, skeletonParam.skeleton, target.worksheet, floatDomInfo);\n                position$.next(newPos);\n            }));\n            const skm = this._renderManagerService.getRenderById(unitId)?.with(SheetSkeletonManagerService);\n\n            skm?.currentSkeleton$.subscribe((skeleton) => {\n                if (!skeleton) return;\n                if (skeletonParam.sheetId !== skeleton.sheetId) {\n                    this._removeDom(id, true);\n                }\n            });\n\n            const listener = domRect.onTransformChange$.subscribeEvent(() => {\n                const newPosition = calcPosition(domRect, renderObject.renderUnit, skeletonParam.skeleton, target.worksheet, floatDomInfo);\n                position$.next(\n                    newPosition\n                );\n            });\n\n            disposableCollection.add(() => {\n                this._canvasFloatDomService.removeFloatDom(drawingId);\n            });\n            listener && disposableCollection.add(listener);\n            this._domLayerInfoMap.set(drawingId, floatDomInfo);\n            map.set(drawingId, {\n                ...map.get(drawingId),\n            });\n        }\n\n        return {\n            id,\n            dispose: () => {\n                this._removeDom(id, true);\n            },\n        };\n    }\n\n    addFloatDomToColumnHeader(column: number, config: ICanvasFloatDom, domLayoutParam: IDOMAnchor, propId?: string) {\n        const target = getSheetCommandTarget(this._univerInstanceService, {\n            unitId: config.unitId,\n            subUnitId: config.subUnitId,\n        });\n        if (!target) {\n            throw new Error('cannot find current target!');\n        }\n        const { unitId, subUnitId } = target;\n        const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n        if (!renderObject) return;\n        const currentRender = this._renderManagerService.getRenderById(unitId);\n        if (!currentRender) return;\n        const skeletonParam = this._renderManagerService.getRenderById(unitId)?.with(SheetSkeletonManagerService).getWorksheetSkeleton(subUnitId);\n        if (!skeletonParam) return;\n\n        const { componentKey, data, allowTransform = true } = config;\n        const id = propId ?? generateRandomId();\n\n        // rangePostion relative to canvas.(if no scrolling)\n        const { position: rangePosition, position$: rangePos$ } = this._createRangePositionObserver({\n            startRow: 0,\n            endRow: 0,\n            startColumn: column,\n            endColumn: column,\n        }, currentRender, skeletonParam.skeleton);\n        const headerCellPosition = rangePosition;\n        headerCellPosition.startY = 0; // for column header\n\n        const sheetTransform = this._getPosition(rangePosition, unitId);\n        if (sheetTransform == null) {\n            return;\n        }\n\n        const map = this._ensureMap(unitId, subUnitId);\n        map.set(id, config);\n\n        const sheetDrawingParam: ISheetFloatDom = {\n            unitId,\n            subUnitId,\n            drawingId: id,\n            drawingType: config.type || DrawingTypeEnum.DRAWING_DOM,\n            componentKey,\n            sheetTransform,\n            transform: {\n                left: headerCellPosition.startX,\n                top: headerCellPosition.startY,\n                width: headerCellPosition.width,\n                height: headerCellPosition.height,\n            } as ITransformState,\n            data,\n            allowTransform,\n        };\n\n        {\n            const { unitId, subUnitId, drawingId } = sheetDrawingParam;\n            const target = getSheetCommandTarget(this._univerInstanceService, { unitId, subUnitId });\n            // const floatDomParam = this._drawingManagerService.getDrawingByParam(sheetDrawingParam) as IFloatDomData;\n            const floatDomParam = sheetDrawingParam;\n\n            const workbook = this._univerInstanceService.getUnit<Workbook>(unitId, UniverInstanceType.UNIVER_SHEET);\n            if (!workbook) {\n                return;\n            }\n\n            const activeSheetId = workbook.getActiveSheet().getSheetId();\n\n            if (!floatDomParam || !target) {\n                return;\n            }\n\n            const skMangerService = this._renderManagerService.getRenderById(unitId)?.with(SheetSkeletonManagerService);\n            if (!skMangerService) {\n                return;\n            }\n            const skeleton = skMangerService.getWorksheetSkeleton(subUnitId);\n            if (!skeleton) {\n                return;\n            }\n\n            const { transform, data } = floatDomParam;\n\n            const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n\n            if (renderObject == null) {\n                return;\n            }\n            const { scene, canvas } = renderObject;\n\n            if (transform == null) {\n                return;\n            }\n\n            if (activeSheetId !== subUnitId) {\n                return;\n            }\n\n            const { left, top, width, height, angle, flipX, flipY, skewX, skewY } = transform;\n\n            const rectShapeKey = getDrawingShapeKeyByDrawingSearch({ unitId, subUnitId, drawingId });\n\n            const rectShape = scene.getObject(rectShapeKey);\n\n            if (rectShape != null) {\n                rectShape.transformByState({ left, top, width, height, angle, flipX, flipY, skewX, skewY });\n                return;\n            }\n\n            const calcOffsetPos = calcDomPositionByAnchor({\n                rotate: 0,\n                startX: headerCellPosition.startX,\n                startY: 0,\n                endX: rangePosition.endX,\n                endY: rangePosition.endY,\n                width: domLayoutParam.width,\n                height: domLayoutParam.height,\n                absolute: {\n                    left: rangePosition.absolute.left,\n                    top: rangePosition.absolute.top,\n                },\n            }, domLayoutParam);\n            const headerRectConfig: IRectProps = {\n                left: calcOffsetPos.startX,\n                top: calcOffsetPos.startY,\n                width: calcOffsetPos.width,\n                height: calcOffsetPos.height,\n                zIndex: this._drawingManagerService.getDrawingOrder(unitId, subUnitId).length - 1,\n            };\n\n            const domRect = new Rect(rectShapeKey, headerRectConfig);\n            scene.addObject(domRect, DRAWING_OBJECT_LAYER_INDEX);\n            if (floatDomParam.allowTransform !== false) {\n                scene.attachTransformerTo(domRect);\n            }\n            const map = this._ensureMap(unitId, subUnitId);\n            const disposableCollection = new DisposableCollection();\n\n            const viewMain = scene.getMainViewport();\n            const boundsOfViewArea: IBoundRectNoAngle = {\n                top: 0, //viewMain.top,\n                left: viewMain.left,\n                bottom: viewMain.bottom,\n                right: viewMain.right,\n            };\n            const floatDomInfo = {\n                dispose: disposableCollection,\n                rect: domRect,\n                // position$,\n                unitId,\n                subUnitId,\n                boundsOfViewArea,\n                domAnchor: domLayoutParam,\n                scrollDirectionResponse: ScrollDirectionResponse.HORIZONTAL,\n            } as unknown as ICanvasFloatDomInfo;\n\n            const initedPosition = calcPosition(domRect, renderObject.renderUnit, skeleton.skeleton, target.worksheet, floatDomInfo);\n            const position$ = new BehaviorSubject<IFloatDomLayout>(initedPosition);\n            floatDomInfo.position$ = position$;\n\n            let floatDomCfg: IFloatDom = {\n                position$,\n                id: drawingId,\n                componentKey: floatDomParam.componentKey,\n                onPointerDown: () => { },\n                onPointerMove: () => { },\n                onPointerUp: () => { },\n                onWheel: (evt: WheelEvent) => {\n                    canvas.dispatchEvent(new WheelEvent(evt.type, evt));\n                },\n                props: map.get(drawingId)?.props ?? this._getFloatDomProps(drawingId),\n                data,\n                unitId,\n            };\n            if (config.eventPassThrough) {\n                floatDomCfg = {\n                    ...floatDomCfg,\n                    onPointerDown: (evt) => {\n                        canvas.dispatchEvent(new PointerEvent(evt.type, evt));\n                    },\n                    onPointerMove: (evt: PointerEvent | MouseEvent) => {\n                        canvas.dispatchEvent(new PointerEvent(evt.type, evt));\n                    },\n                    onPointerUp: (evt: PointerEvent | MouseEvent) => {\n                        canvas.dispatchEvent(new PointerEvent(evt.type, evt));\n                    },\n                };\n            }\n            this._canvasFloatDomService.addFloatDom(floatDomCfg);\n\n            const listener = domRect.onTransformChange$.subscribeEvent(() => {\n                const newPosition = calcPosition(domRect, renderObject.renderUnit, skeleton.skeleton, target.worksheet, floatDomInfo);\n                position$.next(\n                    newPosition\n                );\n            });\n\n            this.disposeWithMe(rangePos$.subscribe((newHeaderPos) => {\n                const calcOffsetPos = calcDomPositionByAnchor({\n                    rotate: 0,\n                    startX: newHeaderPos.startX,\n                    startY: 0,\n                    endX: newHeaderPos.endX,\n                    endY: newHeaderPos.endY,\n                    width: domLayoutParam.width,\n                    height: domLayoutParam.height,\n                    absolute: {\n                        left: rangePosition.absolute.left,\n                        top: rangePosition.absolute.top,\n                    },\n                }, domLayoutParam);\n                const rectShapeKey = getDrawingShapeKeyByDrawingSearch({ unitId, subUnitId, drawingId });\n                const newRect = new Rect(rectShapeKey, {\n                    left: calcOffsetPos.startX,\n                    top: 0,\n                    width: domLayoutParam.width,\n                    height: domLayoutParam.height,\n                    zIndex: this._drawingManagerService.getDrawingOrder(unitId, subUnitId).length - 1,\n                });\n                const newPos = calcPosition(newRect, renderObject.renderUnit, skeleton.skeleton, target.worksheet, floatDomInfo);\n                position$.next(newPos);\n            }));\n\n            const skm = this._renderManagerService.getRenderById(unitId)?.with(SheetSkeletonManagerService);\n            skm?.currentSkeleton$.subscribe((skeleton) => {\n                if (!skeleton) return;\n                if (skeletonParam.sheetId !== skeleton.sheetId) {\n                    this._removeDom(id, true);\n                }\n            });\n\n            disposableCollection.add(() => {\n                this._canvasFloatDomService.removeFloatDom(drawingId);\n            });\n            listener && disposableCollection.add(listener);\n            this._domLayerInfoMap.set(drawingId, floatDomInfo);\n            map.set(drawingId, {\n                ...map.get(drawingId),\n            });\n        }\n\n        return {\n            id,\n            dispose: () => {\n                this._removeDom(id, true);\n            },\n        };\n    }\n\n    /**\n     * Unlike _createCellPositionObserver, this accept a range not a single cell.\n     *\n     * @param initialRow\n     * @param initialCol\n     * @param currentRender\n     * @param skeleton\n     * @param activeViewport\n     * @returns position of cell to canvas.\n     */\n    private _createRangePositionObserver(\n        range: IRange,\n        currentRender: IRender,\n        skeleton: SpreadsheetSkeleton\n    ) {\n        let { startRow, startColumn } = range;\n        const topLeftCoord = calcCellPositionByCell(startRow, startColumn, skeleton);\n        const topLeftPos$ = new BehaviorSubject(topLeftCoord);\n\n        const rightBottomCoord = calcCellPositionByCell(range.endRow, range.endColumn, skeleton);\n        const rightBottomPos$ = new BehaviorSubject(rightBottomCoord);\n\n        const updatePosition = () => {\n            const topLeftCoord = calcCellPositionByCell(startRow, startColumn, skeleton);\n            const rightBottomCoord = calcCellPositionByCell(range.endRow, range.endColumn, skeleton);\n\n            topLeftPos$.next(topLeftCoord);\n            rightBottomPos$.next(rightBottomCoord);\n        };\n\n        const disposable = new DisposableCollection();\n        disposable.add(currentRender.engine.clientRect$.subscribe(() => updatePosition()));\n\n        disposable.add(this._commandService.onCommandExecuted((commandInfo) => {\n            if (commandInfo.id === SetWorksheetRowAutoHeightMutation.id) {\n                const params = commandInfo.params as ISetWorksheetRowAutoHeightMutationParams;\n                if (params.rowsAutoHeightInfo.findIndex((item) => item.row === startRow) > -1) {\n                    updatePosition();\n                    return;\n                }\n            }\n\n            if (\n                COMMAND_LISTENER_SKELETON_CHANGE.indexOf(commandInfo.id) > -1 ||\n                commandInfo.id === SetScrollOperation.id ||\n                commandInfo.id === SetZoomRatioOperation.id\n            ) {\n                updatePosition();\n            }\n        }));\n\n        const updateRowCol = (newRow: number, newCol: number) => {\n            startRow = newRow;\n            startColumn = newCol;\n\n            updatePosition();\n        };\n\n        const genPosition = () => {\n            return {\n                rotate: 0,\n                width: rightBottomCoord.right - topLeftCoord.left,\n                height: rightBottomCoord.bottom - topLeftCoord.top,\n                absolute: {\n                    left: true,\n                    top: true,\n                },\n                startX: topLeftCoord.left,\n                startY: topLeftCoord.top,\n                endX: rightBottomCoord.right,\n                endY: rightBottomCoord.bottom,\n            };\n        };\n        const position$ = topLeftPos$.pipe(\n            map((topLeft) => {\n                const rightBottomCoord = calcCellPositionByCell(range.endRow, range.endColumn, skeleton);\n                return {\n                    rotate: 0,\n                    width: rightBottomCoord.right - topLeft.left,\n                    height: rightBottomCoord.bottom - topLeft.top,\n                    absolute: {\n                        left: true,\n                        top: true,\n                    },\n                    startX: topLeft.left,\n                    startY: topLeft.top,\n                    endX: rightBottomCoord.right,\n                    endY: rightBottomCoord.bottom,\n                } as IFloatDomLayout;\n            })\n        );\n        const position: IFloatDomLayout = genPosition();\n\n        return {\n            position$,\n            position,\n            updateRowCol,\n            topLeftPos$,\n            rightBottomPos$,\n            disposable,\n        };\n    }\n}\n\n/**\n * Unlike sheet popup, this Position only relative to sheet content, not window.\n * @param row\n * @param col\n * @param currentRender\n * @param skeleton\n * @param activeViewport\n * @returns\n */\nfunction calcCellPositionByCell(\n    row: number,\n    col: number,\n    skeleton: SpreadsheetSkeleton\n): IBoundRectNoAngle {\n    const primaryWithCoord = skeleton.getCellWithCoordByIndex(row, col);\n    const cellInfo = primaryWithCoord.isMergedMainCell ? primaryWithCoord.mergeInfo : primaryWithCoord;\n\n    return {\n        left: cellInfo.startX,\n        right: cellInfo.endX,\n        top: cellInfo.startY,\n        bottom: cellInfo.endY,\n    };\n}\n\nfunction calcDomPositionByAnchor(rangePosition: IFloatDomLayout, domAnchor?: Partial<IDOMAnchor>, scale?: number): IFloatDomLayout {\n    scale = scale ?? 1;\n\n    const rangeWidth = rangePosition.endX - rangePosition.startX;\n    const rangeHeight = rangePosition.endY - rangePosition.startY;\n    const domWidth = domAnchor?.width ?? rangeWidth;\n    const domHeight = domAnchor?.height ?? rangeHeight;\n\n    let domLeft = 0;\n    let domTop = 0;\n\n    if (domAnchor) {\n        if (domAnchor.horizonOffsetAlign === 'right') {\n            const offsetX = calculateOffset(domAnchor.marginX, rangeWidth * scale);\n            domLeft = rangePosition.endX - offsetX - domWidth;\n        } else {\n            // default align left\n            domLeft = rangePosition.startX + calculateOffset(domAnchor.marginX, rangeWidth);\n        }\n\n        if (domAnchor.verticalOffsetAlign === 'bottom') {\n            const offsetY = calculateOffset(domAnchor.marginY, rangeHeight * scale);\n            domTop = rangePosition.endY - offsetY - domHeight;\n        } else {\n            domTop = rangePosition.startY + calculateOffset(domAnchor.marginY, rangeHeight);\n        }\n    }\n\n    return {\n        rotate: 0,\n        startX: domLeft,\n        startY: domTop,\n        endX: rangePosition.endX,\n        endY: rangePosition.endY,\n        width: domWidth,\n        height: domHeight,\n        absolute: {\n            left: rangePosition.absolute.left,\n            top: rangePosition.absolute.top,\n        },\n    };\n}\n\nfunction calculateOffset(value: number | string | undefined, rangeWidth: number): number {\n    if (value === undefined) return 0;\n\n    // \u5982\u679C\u662F\u6570\u5B57\u76F4\u63A5\u8FD4\u56DE\n    if (typeof value === 'number') return value;\n\n    // \u5904\u7406\u767E\u5206\u6BD4\u5B57\u7B26\u4E32\n    const percentage = Number.parseFloat(value);\n    return (rangeWidth * percentage) / 100;\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport type { IUniverSheetsDrawingUIConfig } from './controllers/config.schema';\nimport {\n    DependentOn,\n    IConfigService,\n    Inject,\n    Injector,\n    merge,\n    Plugin,\n    registerDependencies,\n    touchDependencies,\n    UniverInstanceType,\n} from '@univerjs/core';\nimport { UniverDocsDrawingPlugin } from '@univerjs/docs-drawing';\nimport { UniverDrawingPlugin } from '@univerjs/drawing';\nimport { UniverDrawingUIPlugin } from '@univerjs/drawing-ui';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { UniverSheetsDrawingPlugin } from '@univerjs/sheets-drawing';\nimport { defaultPluginConfig, SHEETS_DRAWING_UI_PLUGIN_CONFIG_KEY } from './controllers/config.schema';\nimport { DrawingPopupMenuController } from './controllers/drawing-popup-menu.controller';\nimport { SheetsDrawingRenderController } from './controllers/render-controllers/sheet-drawing.render-controller';\nimport { SheetCellImageAutofillController } from './controllers/sheet-cell-image-autofill.controller';\nimport { SheetCellImageController } from './controllers/sheet-cell-image.controller';\nimport { SheetCellImageHoverController } from './controllers/sheet-celll-image-hover.controller';\nimport { SheetsDrawingCopyPasteController } from './controllers/sheet-drawing-copy-paste.controller';\nimport { SheetDrawingPermissionController } from './controllers/sheet-drawing-permission.controller';\nimport { SheetDrawingPrintingController } from './controllers/sheet-drawing-printing.controller';\nimport { SheetDrawingTransformAffectedController } from './controllers/sheet-drawing-transform-affected.controller';\nimport { SheetDrawingUpdateController } from './controllers/sheet-drawing-update.controller';\nimport { SheetDrawingUIController } from './controllers/sheet-drawing.controller';\nimport { SheetCanvasFloatDomManagerService } from './services/canvas-float-dom-manager.service';\n\nconst PLUGIN_NAME = 'SHEET_IMAGE_UI_PLUGIN';\n\n@DependentOn(UniverDrawingPlugin, UniverDocsDrawingPlugin, UniverDrawingUIPlugin, UniverSheetsDrawingPlugin)\nexport class UniverSheetsDrawingUIPlugin extends Plugin {\n    static override type = UniverInstanceType.UNIVER_SHEET;\n    static override pluginName = PLUGIN_NAME;\n\n    constructor(\n        private readonly _config: Partial<IUniverSheetsDrawingUIConfig> = defaultPluginConfig,\n        @Inject(Injector) protected _injector: Injector,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService,\n        @IConfigService private readonly _configService: IConfigService\n    ) {\n        super();\n\n        // Manage the plugin configuration.\n        const { menu, ...rest } = merge(\n            {},\n            defaultPluginConfig,\n            this._config\n        );\n        if (menu) {\n            this._configService.setConfig('menu', menu, { merge: true });\n        }\n        this._configService.setConfig(SHEETS_DRAWING_UI_PLUGIN_CONFIG_KEY, rest);\n    }\n\n    override onStarting(): void {\n        registerDependencies(this._injector, [\n            [SheetCanvasFloatDomManagerService],\n            [SheetDrawingUIController],\n            [DrawingPopupMenuController],\n            [SheetDrawingPrintingController],\n            [SheetDrawingPermissionController],\n            [SheetsDrawingCopyPasteController],\n            [SheetCellImageController],\n            [SheetCellImageHoverController],\n            [SheetCellImageAutofillController],\n        ]);\n\n        touchDependencies(this._injector, [\n            [SheetCanvasFloatDomManagerService],\n        ]);\n    }\n\n    override onReady(): void {\n        touchDependencies(this._injector, [\n            [SheetsDrawingCopyPasteController],\n        ]);\n    }\n\n    override onRendered(): void {\n        this._registerRenderModules();\n\n        touchDependencies(this._injector, [\n            [SheetDrawingPermissionController],\n            [SheetDrawingPrintingController],\n            [SheetDrawingUIController],\n            [SheetCellImageController],\n            [SheetCellImageHoverController],\n            [SheetCellImageAutofillController],\n        ]);\n    }\n\n    override onSteady(): void {\n        this._injector.get(DrawingPopupMenuController);\n    }\n\n    private _registerRenderModules(): void {\n        ([\n            [SheetDrawingUpdateController],\n            [SheetDrawingTransformAffectedController],\n            [SheetsDrawingRenderController],\n        ] as Dependency[]).forEach((m) => {\n            this.disposeWithMe(this._renderManagerService.registerRenderModule(UniverInstanceType.UNIVER_SHEET, m));\n        });\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBO,IAAM,iCAAiC;AAEvC,IAAM,eAAe,OAAO,8BAA8B;AAK1D,IAAM,sBAAgD,CAAC;;;ACYvD,IAAM,oBAAN,cAAgC,mBAAgC;AAAE;AAIlE,IAAM,qBAAqB,iBAAqC,uCAAuC;;;ACjBvG,IAAM,sBAAsB;AAG5B,IAAM,uBAAN,cAAmC,WAAW;AAAA,EACjD,YACyC,oBACI,wBACR,yBACD,wBAClC;AACE,UAAM;AAL+B;AACI;AACR;AACD;AAIhC,SAAK,MAAM;AAAA,EACf;AAAA,EAEQ,QAAc;AAClB,SAAK,cAAc;AAAA,EACvB;AAAA,EAEQ,gBAAgB;AACpB,UAAM,SAAS,CAAC,WAAmB;AAC/B,YAAM,MAAM,KAAK,uBAAuB,QAA2B,QAAQ,EAAmB,UAAU;AACxG,UAAI,KAAK;AACL,cAAM,WAAW,IAAI,YAAY,EAAE;AACnC,cAAM,eAAe,IAAI,YAAY,EAAE;AACvC,cAAM,OAAqC;AAAA,UACvC,MAAM,8BAAY,CAAC;AAAA,UACnB,OAAO,sCAAgB,CAAC;AAAA,QAE5B;AACA,eAAO,KAAK,UAAU,IAAI;AAAA,MAC9B;AACA,aAAO;AAAA,IACX;AACA,UAAM,YAAY,CAAC,SAA+C;AAC9D,UAAI,CAAC,MAAM;AACP,eAAO,EAAE,MAAM,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,MACjC;AACA,UAAI;AACA,eAAO,KAAK,MAAM,IAAI;AAAA,MAC1B,SAAS,KAAK;AACV,eAAO,EAAE,MAAM,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,MACjC;AAAA,IACJ;AAEA,SAAK;AAAA,MACD,KAAK,wBAAwB,uBAAqD;AAAA,QAC9E,YAAY;AAAA,QACZ,YAAY,CAAC,EAAmB,UAAU;AAAA,QAC1C,QAAQ,CAAC,WAAW,OAAO,MAAM;AAAA,QACjC,WAAW,CAAC,SAAS,UAAU,IAAI;AAAA,QACnC,UAAU,CAAC,WAAW;AAClB,eAAK,uBAAuB,QAAQ,EAAE,MAAM,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC;AAAA,QAC/D;AAAA,QACA,QAAQ,CAAC,QAAQ,UAAU;AA5E3C;AA6EoB,eAAK,uBAAuB,QAAQ,EAAE,OAAM,WAAM,SAAN,YAAc,CAAC,GAAG,QAAO,WAAM,UAAN,YAAe,CAAC,EAAE,CAAC;AAAA,QAC5F;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,uBAAuB,QAAgB,gBAA8C;AACzF,UAAM,oBAAoB,KAAK,uBAAuB,QAA2B,MAAM;AACvF,QAAI,qBAAqB,MAAM;AAC3B;AAAA,IACJ;AAEA,sBAAkB,aAAa,eAAe,MAAM,eAAe,KAAK;AACxE,SAAK,uBAAuB,MAAM;AAAA,EACtC;AAAA,EAEA,uBAAuB,QAAyB;AAC5C,UAAM,YAAY,KAAK,uBAAuB,QAA2B,QAAQ,EAAmB,UAAU;AAC9G,QAAI,CAAC,WAAW;AACZ,aAAO;AAAA,IACX;AAEA,UAAM,YAAY;AAElB,UAAM,oBAAoB,UAAU,YAAY;AAChD,UAAM,oBAAoB,UAAU,iBAAiB;AAErD,QAAI,CAAC,qBAAqB,CAAC,mBAAmB;AAC1C,aAAO;AAAA,IACX;AAIA,WAAO,KAAK,iBAAiB,EAAE,QAAQ,CAAC,cAAc;AAClD,YAAM,mBAAmB,kBAAkB,SAAS;AAIpD,wBAAkB,SAAS,IAAI,EAAE,GAAG,iBAAiB;AAAA,IACzD,CAAC;AAED,UAAM,cAAc;AAAA,MAChB,CAAC,SAAS,GAAG;AAAA,QACT;AAAA,QACA;AAAA,QACA,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,IACJ;AAEA,SAAK,mBAAmB,oBAAoB,QAAQ,WAAW;AAC/D,SAAK,uBAAuB,oBAAoB,QAAQ,WAAW;AACnE,WAAO;AAAA,EACX;AACJ;AA1Ga,uBAAN;AAAA,EAEE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GALI;;;ACFN,IAAM,0BAAN,cAAsC,OAAO;AAAA,EAIhD,YACqB,UAA6C,qBACnC,WACM,gBACnC;AACE,UAAM;AAJW;AACU;AACM;AAKjC,UAAM,EAAE,GAAG,KAAK,IAAI;AAAA,MAChB,CAAC;AAAA,MACD;AAAA,MACA,KAAK;AAAA,IACT;AACA,SAAK,eAAe,UAAU,gCAAgC,IAAI;AAAA,EACtE;AAAA,EAES,aAAmB;AACxB,IAAC;AAAA,MACG,CAAC,oBAAoB;AAAA,MACrB,CAAC,iBAAiB;AAAA,MAClB,CAAC,oBAAoB,EAAE,UAAU,kBAAkB,CAAC;AAAA,IACxD,EAAmB,QAAQ,CAAC,eAAe,KAAK,UAAU,IAAI,UAAU,CAAC;AAEzE,sBAAkB,KAAK,WAAW;AAAA,MAC9B,CAAC,oBAAoB;AAAA,IACzB,CAAC;AAAA,EACL;AACJ;AA9BI,cADS,yBACO,cAAa;AAC7B,cAFS,yBAEO,QAAO,EAAmB;AAFjC,0BAAN;AAAA,EAME,0BAAO,QAAQ;AAAA,EACf;AAAA,GAPI;;;ACAN,SAAS,kBAAkB,aAA6B,QAAoB,OAAc,uBAA+C;AAC5I,QAAM,aAAa,sBAAsB,kBAAkB,WAAW;AACtE,MAAI,cAAc,MAAM;AACpB;AAAA,EACJ;AAEA,QAAM,WAAW,kCAAkC,WAAW;AAC9D,QAAM,cAAc,MAAM,UAAU,QAAQ;AAE5C,MAAI,eAAe,EAAE,uBAAuB,QAAQ;AAChD;AAAA,EACJ;AAEA,MAAI,eAAe,MAAM;AACrB,gBAAY,UAAU,MAAM;AAC5B;AAAA,EACJ;AAEA,QAAM,QAAQ,IAAI,MAAM,QAAQ;AAEhC,QAAM,UAAU,OAAO,0BAA0B,EAAE,oBAAoB,KAAK;AAE5E,QAAM,UAAU,MAAM;AAEtB,QAAM,EAAE,UAAU,IAAI;AAEtB,eAAa,MAAM;AAAA,IACf;AAAA,MACI,MAAM,UAAU;AAAA,MAChB,KAAK,UAAU;AAAA,MACf,OAAO,UAAU;AAAA,IACrB;AAAA,EACJ;AACJ;AAEO,SAAS,mBAAmB,sBAA8C,YAAqB;AA1DtG;AA2DI,QAAM,UAAU,aAAa,qBAAqB,QAAQ,UAAU,IAAI,qBAAqB,eAAe;AAC5G,MAAI,WAAW,MAAM;AACjB;AAAA,EACJ;AAEA,QAAM,SAAS,QAAQ,UAAU;AACjC,MAAI;AAEJ,MAAI,QAAQ,SAAS,EAAmB,cAAc;AAClD,iBAAa,aAAqB,eAAe,MAApC,mBAAuC;AAAA,EACxD,WAAW,QAAQ,SAAS,EAAmB,YAAY;AACvD,gBAAY;AAAA,EAChB,WAAW,QAAQ,SAAS,EAAmB,cAAc;AACzD,gBAAY;AAAA,EAChB;AAEA,SAAO,EAAE,QAAQ,WAAW,QAAQ;AACxC;;;AC5DO,IAAM,yBAAyB;;;ACUtC,IAAM,gCAAgC;AAE/B,IAAM,uBAAN,MAA2B;AAAA,EAC9B,YAC6C,wBACP,iBACD,gBACnC;AAH2C;AACP;AACD;AAAA,EACjC;AAAA;AAAA,EAGJ,MAAM,aAAa,YAAwB,OAAc;AACrD,UAAM;AAAA,MACF,WAAW;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,YAAY;AAAA,IAChB,IAAI;AACJ,QAAI,uCAA+C;AAC/C;AAAA,IACJ;AAEA,QAAI,CAAC,KAAK,uBAAuB,kBAAkB,GAAG;AAClD;AAAA,IACJ;AAEA,QAAI,mBAAmB,MAAM;AACzB;AAAA,IACJ;AAEA,UAAM,aAAa,oBAAoB,kBAAkB,kBAAkB,CAAC,eAAe;AAE3F,UAAM,SAAS,CAAC;AAChB,eAAW,aAAa,YAAY;AAChC,YAAM,EAAE,MAAM,KAAK,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO,MAAM,IAAI;AACxE,YAAM,QAAQ,WAAW,QAAQ,SAAS;AAC1C,YAAM,gBAAgB,kCAAkC,EAAE,QAAQ,WAAW,UAAU,GAAG,mBAAmB,QAAQ,MAAS;AAC9H,YAAM,aAAa,MAAM,UAAU,aAAa;AAEhD,UAAI,cAAc,MAAM;AACpB,mBAAW,iBAAiB,EAAE,MAAM,KAAK,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO,MAAM,CAAC;AAC3F;AAAA,MACJ;AAEA,YAAM,SAAS,KAAK,uBAAuB,gBAAgB,QAAQ,SAAS;AAC5E,YAAM,SAAS,OAAO,QAAQ,SAAS;AACvC,YAAM,cAA2B,EAAE,GAAG,WAAW,QAAQ,WAAW,KAAM,OAAO,SAAS,IAAK,OAAO;AACtG,YAAM,mBAAmB,KAAK,gBAAgB,oBAAoB,QAAQ,eAAe;AAEzF,UAAI,gBAAgB;AACpB,UAAI,oBAAoB,MAAM;AAC1B,oBAAY,QAAQ;AAAA,MACxB,OAAO;AACH,YAAI,uCAA0C;AAC1C,cAAI;AACA,wBAAY,MAAM,MAAM,KAAK,gBAAgB,SAAS,MAAM;AAAA,UAChE,SAAS,OAAO;AACZ,oBAAQ,MAAM,KAAK;AACnB;AAAA,UACJ;AAAA,QACJ,OAAO;AACH,sBAAY,MAAM;AAAA,QACtB;AACA,wBAAgB;AAAA,MACpB;AAEA,UAAI,MAAM,UAAU,aAAa,GAAG;AAEhC;AAAA,MACJ;AAEA,kBAAY,YAAY;AACxB,YAAM,QAAQ,IAAI,MAAM,eAAe,WAAW;AAClD,UAAI,eAAe;AACf,aAAK,gBAAgB,oBAAoB,QAAQ,iBAAiB,MAAM,UAAU,CAAC;AAAA,MACvF;AAEA,UAAI,CAAC,KAAK,uBAAuB,kBAAkB,GAAG;AAClD;AAAA,MACJ;AAEA,YAAM,UAAU,OAAO,0BAA0B;AACjD,UAAI,KAAK,uBAAuB,mBAAmB,GAAG;AAClD,cAAM,oBAAoB,KAAK;AAAA,MACnC;AAEA,iBAAW,kBAAkB,EAAE,WAAW,SAAS,QAAQ,UAAU,GAAG,OAAO,OAAO,KAAK,sBAAsB;AAEjH,UAAI,YAAY,MAAM;AAClB,cAAM,YAAY,QAAQ;AAAA,MAC9B;AACA,UAAI,WAAW,MAAM;AACjB,cAAM,WAAW,OAAO;AAAA,MAC5B;AAEA,aAAO,KAAK,KAAK;AAAA,IACrB;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,eAAe,OAAyB,OAAc;AAClD,UAAM;AAAA,MACF,WAAW;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,YAAY;AAAA,IAChB,IAAI;AACJ,QAAI,qCAA6C;AAC7C;AAAA,IACJ;AAEA,QAAI,CAAC,KAAK,uBAAuB,kBAAkB,GAAG;AAClD;AAAA,IACJ;AAEA,QAAI,mBAAmB,MAAM;AACzB;AAAA,IACJ;AAEA,UAAM,aAAa,oBAAoB,kBAAkB,kBAAkB,CAAC,eAAe;AAE3F,UAAM,QAAQ,CAAC;AACf,eAAW,aAAa,YAAY;AAChC,YAAM,EAAE,MAAM,KAAK,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO,MAAM,IAAI;AACxE,YAAM,QAAQ,WAAW,QAAQ,SAAS;AAC1C,YAAM,gBAAgB,kCAAkC,EAAE,QAAQ,WAAW,UAAU,GAAG,mBAAmB,QAAQ,MAAS;AAC9H,YAAM,aAAa,MAAM,UAAU,aAAa;AAEhD,UAAI,cAAc,MAAM;AACpB,mBAAW,iBAAiB,EAAE,MAAM,KAAK,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO,MAAM,CAAC;AAC3F;AAAA,MACJ;AAEA,YAAM,SAAS,KAAK,uBAAuB,gBAAgB,QAAQ,SAAS;AAC5E,YAAM,SAAS,OAAO,QAAQ,SAAS;AACvC,YAAM,aAAyB,EAAE,GAAG,WAAW,QAAQ,WAAW,KAAM,OAAO,SAAS,IAAK,OAAO;AAEpG,UAAI,MAAM,UAAU,aAAa,GAAG;AAEhC;AAAA,MACJ;AAEA,iBAAW,YAAY;AACvB,YAAM,OAAO,IAAI,KAAK,eAAe,UAAU;AAE/C,UAAI,CAAC,KAAK,uBAAuB,kBAAkB,GAAG;AAClD;AAAA,MACJ;AAEA,YAAM,UAAU,MAAM,0BAA0B;AAChD,UAAI,KAAK,uBAAuB,mBAAmB,KAAK,MAAM,mBAAmB,OAAO;AACpF,cAAM,oBAAoB,IAAI;AAAA,MAClC;AAEA,iBAAW,kBAAkB,EAAE,WAAW,SAAS,QAAQ,UAAU,GAAG,MAAM,OAAO,KAAK,sBAAsB;AAChH,YAAM,KAAK,IAAI;AAAA,IACnB;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,cAAc,OAAuB,OAAc;AAC/C,UAAM,eAAe,KAAK,uBAAuB,kBAAkB,KAAK;AACxE,QAAI,gBAAgB,MAAM;AACtB;AAAA,IACJ;AAEA,YAAQ,aAAa,aAAa;AAAA,MAC9B;AACI,eAAO,KAAK,aAAa,cAA4B,KAAK;AAAA,MAC9D;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,aAAa,KAAa,KAAa,OAAe,QAAgB;AAClE,UAAM,WAAW,GAAG,GAAG;AAEvB,UAAM,cAAc,OAAO,aAAa;AACxC,UAAM,eAAe,OAAO,cAAc;AAE1C,UAAM,aAAa,KAAK,iBAAiB,OAAO,QAAQ,aAAa,YAAY;AACjF,UAAM,SAAS,KAAK,eAAe,KAAK;AAAA,MACpC,OAAO,KAAK,IAAI,WAAW,OAAO,GAAG;AAAA,MACrC,IAAI;AAAA,MACJ,OAAO,EAAE,QAAQ,KAAK,KAAK,OAAO,MAAM,OAAO,WAAW,wBAAwB;AAAA,MAClF,UAAU;AAAA,QACN,OAAO;AAAA,UACH,MAAM;AAAA,UACN,OAAO;AAAA,YACH;AAAA,YACA,OAAO,WAAW;AAAA,YAClB,QAAQ,WAAW;AAAA,UACvB;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,gBAAgB;AAAA,MAChB,WAAW;AAAA,MACX,SAAS,MAAM;AACX,aAAK,eAAe,MAAM,QAAQ;AAClC,eAAO,QAAQ;AAAA,MACnB;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEQ,iBAAiB,aAAqB,cAAsB,aAAqB,cAAsB;AAE3G,QAAI,eAAe,eAAe,gBAAgB,cAAc;AAC5D,aAAO;AAAA,QACH,OAAO;AAAA,QACP,QAAQ;AAAA,MACZ;AAAA,IACJ;AAGA,UAAM,aAAa,cAAc;AACjC,UAAM,cAAc,eAAe;AACnC,UAAM,QAAQ,KAAK,IAAI,YAAY,WAAW;AAG9C,WAAO;AAAA,MACH,OAAO,KAAK,MAAM,cAAc,KAAK;AAAA,MACrC,QAAQ,KAAK,MAAM,eAAe,KAAK;AAAA,IAC3C;AAAA,EACJ;AACJ;AA1Oa,uBAAN;AAAA,EAEE;AAAA,EACA;AAAA,EACA;AAAA,GAJI;;;ACPN,SAAS,gBAAgB,SAAkC,uBAA0E;AACxI,QAAM,SAAoC,CAAC;AAC3C,UAAQ,QAAQ,CAAC,WAAW;AACxB,UAAM,EAAE,MAAM,MAAM,KAAK,QAAQ,OAAO,MAAM,IAAI;AAElD,UAAM,cAAc,sBAAsB,eAAe,IAAI;AAE7D,QAAI,eAAe,MAAM;AACrB,aAAO,KAAK,IAAI;AAChB,aAAO;AAAA,IACX;AAEA,UAAM,EAAE,QAAQ,WAAW,WAAW,YAAY,IAAI;AAEtD,UAAM,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,WAAW;AAAA,QACP;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,uCAA+C;AAC/C,MAAC,MAAqB,UAAW,OAAiB;AAAA,IACtD;AAEA,WAAO,KAAK,KAAK;AAAA,EACrB,CAAC;AAED,SAAO;AACX;;;ACpCA,IAAAA,gBAA2C;;;ACD3C,mBAAyB;;;ACelB,IAAM,2BAAwE;AAAA,EACjF,IAAI;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,UAAU,WAAW;AAC3B,WAAO;AAAA,EACX;AACJ;;;ACzCA,IAAO,uBAAQ;AAAA,EACb,oBAAoB;AAAA,EACpB,wBAAwB;AAAA,EACxB,0BAA0B;AAAA,EAC1B,yBAAyB;AAAA,EACzB,4BAA4B;AAAA,EAC5B,uBAAuB;AAAA,EACvB,+BAA+B;AAAA,EAC/B,0BAA0B;AAAA,EAC1B,gCAAgC;AAAA,EAChC,0BAA0B;AAAA,EAC1B,yBAAyB;AAAA,EACzB,yBAAyB;AAAA,EACzB,yBAAyB;AAC3B;;;AFsFQ;AAtED,IAAM,eAAe,CAAC,UAA8B;AACvD,QAAM,iBAAiB,cAAc,eAAe;AACpD,QAAM,gBAAgB,cAAc,aAAa;AAEjD,QAAM,EAAE,UAAU,IAAI;AAEtB,QAAM,CAAC,YAAY,aAAa,QAAI,wCAA4C;AAChF,QAAM,eAAe;AAAA,IACjB;AAAA,MACI,OAAO,cAAc,EAAE,2BAA2B;AAAA,MAClD;AAAA,IACJ;AAAA,IACA;AAAA,MACI,SAAS;AAAA,QACL;AAAA,UACI,OAAO,cAAc,EAAE,wBAAwB;AAAA,UAC/C;AAAA,QACJ;AAAA,QACA;AAAA,UACI,OAAO,cAAc,EAAE,0BAA0B;AAAA,UACjD;AAAA,QACJ;AAAA,QACA;AAAA,UACI,OAAO,cAAc,EAAE,yBAAyB;AAAA,UAChD;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,SAAS;AAAA,QACL;AAAA,UACI,OAAO,cAAc,EAAE,uBAAuB;AAAA,UAC9C;AAAA,QACJ;AAAA,QACA;AAAA,UACI,OAAO,cAAc,EAAE,0BAA0B;AAAA,UACjD;AAAA,QACJ;AAAA,QACA;AAAA,UACI,OAAO,cAAc,EAAE,0BAA0B;AAAA,UACjD;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA;AAAA,MACI,SAAS;AAAA,QACL;AAAA,UACI,OAAO,cAAc,EAAE,2BAA2B;AAAA,UAClD;AAAA,QACJ;AAAA,QACA;AAAA,UACI,OAAO,cAAc,EAAE,4BAA4B;AAAA,UACnD;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAEA,WAAS,kBAAkB,OAAkC;AACzD,kBAAe,KAAgB;AAC/B,mBAAe,eAAe,yBAAyB,IAAI;AAAA,MACvD,WAAW;AAAA,IACf,CAAC;AAAA,EACL;AAEA,QAAM,cAAc,CAAC,WAAoB;AACrC,WAAO,SAAS,UAAU;AAAA,EAC9B;AAEA,SACI,6CAAC,SAAI,WAAW,KAAK,qBAAO,sBAAsB,qBAAO,sBAAsB,GAAG,OAAO,EAAE,SAAS,YAAY,SAAS,EAAE,GACvH;AAAA,gDAAC,SAAI,WAAW,qBAAO,qBACnB,sDAAC,SAAI,WAAW,KAAK,qBAAO,wBAAwB,qBAAO,qBAAqB,GAC5E,sDAAC,SAAK,wBAAc,EAAE,yBAAyB,GAAE,GACrD,GACJ;AAAA,IACA,4CAAC,SAAI,WAAW,qBAAO,qBACnB,sDAAC,SAAI,WAAW,KAAK,qBAAO,sBAAsB,GAC9C,sDAAC,UAAO,OAAO,YAAY,SAAS,cAAc,UAAU,mBAAmB,GACnF,GACJ;AAAA,KACJ;AAER;;;AG3FA,IAAAC,gBAAoC;AA2DhB,IAAAC,sBAAA;AAnDb,IAAM,iBAAiB,CAAC,UAAgC;AAC3D,QAAM,EAAE,aAAa,UAAU,cAAc,IAAI;AAEjD,QAAM,gBAAgB,cAAc,aAAa;AACjD,QAAM,wBAAwB,cAAc,sBAAsB;AAElE,QAAM,cAAc,CAAC,WAAoB;AACrC,WAAO,SAAS,UAAU;AAAA,EAC9B;AAEA,QAAM,CAAC,UAAU,WAAW,QAAI,wBAA0B,aAAa;AAEvE,+BAAU,MAAM;AACZ,UAAM,eAAe,sBAAsB,OAAO,UAAU,CAACC,cAAa;AACtE,kBAAYA,SAAQ;AAAA,IACxB,CAAC;AAED,WAAO,MAAM;AACT,mBAAa,YAAY;AAAA,IAC7B;AAAA,EACJ,GAAG,CAAC,CAAC;AAEL,QAAM,oBAAoB,CAAC,gBAAiC;AAQxD,UAAM,SAAS,SAAS,CAAC,EAAE;AAC3B,UAAM,YAAY,SAAS,CAAC,EAAE;AAC9B,UAAM,aAAa,SAAS,IAAI,CAAC,YAAY,QAAQ,SAAS;AAE9D,0BAAsB,qCAAqC,EAAE,QAAQ,WAAW,YAAY,YAAY,CAAC;AAAA,EAW7G;AAEA,SACI,8CAAC,SAAI,WAAW,qBAAO,sBAAsB,OAAO,EAAE,SAAS,YAAY,WAAW,EAAE,GACpF;AAAA,iDAAC,SAAI,WAAW,qBAAO,qBACnB,uDAAC,SAAI,WAAW,KAAK,qBAAO,wBAAwB,qBAAO,qBAAqB,GAC5E,uDAAC,SAAK,wBAAc,EAAE,2BAA2B,GAAE,GACvD,GACJ;AAAA,IACA,8CAAC,SAAI,WAAW,qBAAO,qBACnB;AAAA,mDAAC,SAAI,WAAW,KAAK,qBAAO,wBAAwB,qBAAO,qBAAqB,GAC5E,uDAAC,UAAO,MAAK,SAAQ,SAAS,MAAM;AAAE,yCAAyC;AAAA,MAAG,GAC9E,wDAAC,UAAK,WAAW,qBAAO,wBACpB;AAAA,qDAAC,0BAAa;AAAA,QACb,cAAc,EAAE,6BAA6B;AAAA,SAClD,GAEJ,GACJ;AAAA,MACA,6CAAC,SAAI,WAAW,KAAK,qBAAO,wBAAwB,qBAAO,qBAAqB,GAC5E,uDAAC,UAAO,MAAK,SAAQ,SAAS,MAAM;AAAE,0CAA0C;AAAA,MAAG,GAC/E,wDAAC,UAAK,WAAW,qBAAO,wBACpB;AAAA,qDAAC,4BAAe;AAAA,QACf,cAAc,EAAE,8BAA8B;AAAA,SACnD,GAEJ,GACJ;AAAA,OACJ;AAAA,IACA,8CAAC,SAAI,WAAW,qBAAO,qBACnB;AAAA,mDAAC,SAAI,WAAW,KAAK,qBAAO,wBAAwB,qBAAO,qBAAqB,GAC5E,uDAAC,UAAO,MAAK,SAAQ,SAAS,MAAM;AAAE,uCAAuC;AAAA,MAAG,GAC5E,wDAAC,UAAK,WAAW,qBAAO,wBACpB;AAAA,qDAAC,0BAAc;AAAA,QACd,cAAc,EAAE,2BAA2B;AAAA,SAChD,GAEJ,GACJ;AAAA,MACA,6CAAC,SAAI,WAAW,KAAK,qBAAO,wBAAwB,qBAAO,qBAAqB,GAC5E,uDAAC,UAAO,MAAK,SAAQ,SAAS,MAAM;AAAE,sCAAsC;AAAA,MAAG,GAC3E,wDAAC,UAAK,WAAW,qBAAO,wBACpB;AAAA,qDAAC,yBAAa;AAAA,QACb,cAAc,EAAE,0BAA0B;AAAA,SAC/C,GAEJ,GACJ;AAAA,OACJ;AAAA,KACJ;AAGR;;;ACvGA,IAAAC,gBAAoC;AAwKhB,IAAAC,sBAAA;AA9Jb,IAAM,eAAe,CAAC,UAA8B;AACvD,QAAM,gBAAgB,cAAc,aAAa;AACjD,QAAM,uBAAuB,cAAc,qBAAqB;AAChE,QAAM,wBAAwB,cAAc,sBAAsB;AAElE,QAAM,EAAE,UAAU,SAAS,IAAI;AAE/B,QAAM,CAAC,WAAW,YAAY,QAAI,wBAAS,KAAK;AAEhD,QAAM,CAAC,cAAc,eAAe,QAAI,wBAAS,IAAI;AACrD,QAAM,CAAC,gBAAgB,iBAAiB,QAAI,wBAAS,IAAI;AAEzD,QAAM,cAAc,CAAC,WAAoB;AACrC,WAAO,SAAS,UAAU;AAAA,EAC9B;AAEA,QAAM,kBAAkB,MAAM;AAC1B,UAAM,gBAAgB,sBAAsB,iBAAiB;AAC7D,UAAM,EAAE,QAAQ,UAAU,IAAI,cAAc,CAAC;AAC7C,UAAM,UAAU,MAAM,iBAAiB,EAAE;AACzC,UAAM,iBAAiB,cAAc,GAAG,GAAG,cAAc,IAAI,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;AACtF,UAAM,aAAa;AAAA,MACf;AAAA,MACA;AAAA,MACA,WAAW;AAAA,MACX;AAAA,MACA,WAAW;AAAA,IACf;AAEA,UAAM,WAAW,cAAc,IAAI,CAAC,YAAY;AAC5C,YAAM,YAAY,QAAQ,aAAa,EAAE,MAAM,GAAG,KAAK,EAAE;AACzD,YAAM,EAAE,QAAAC,SAAQ,WAAAC,YAAW,UAAU,IAAI;AACzC,aAAO;AAAA,QACH,QAAAD;AAAA,QACA,WAAAC;AAAA,QACA;AAAA,QACA,WAAW;AAAA,UACP,GAAG;AAAA,UACH,MAAM,UAAU,OAAQ,eAAe;AAAA,UACvC,KAAK,UAAU,MAAO,eAAe;AAAA,QACzC;AAAA,QACA;AAAA,MACJ;AAAA,IACJ,CAAC;AAED,0BAAsB,qCAAqC,CAAC;AAAA,MACxD,QAAQ;AAAA,MACR;AAAA,IACJ,CAAC,CAAC;AAAA,EACN;AAEA,QAAM,UAAU,CAAC,UAAyB;AACtC,QAAI,MAAM,uCAA+C;AACrD;AAAA,IACJ;AAEA,UAAM,EAAE,QAAQ,WAAW,WAAW,WAAW,iBAAiB,EAAE,OAAO,GAAG,QAAQ,EAAE,EAAE,IAAI;AAE9F,QAAI,kBAAkB,MAAM;AACxB;AAAA,IACJ;AAEA,UAAM,UAAU,sBAAsB,mBAAmB,EAAE,QAAQ,WAAW,UAAU,CAAC;AAEzF,QAAI,QAAQ,WAAW,GAAG;AACtB;AAAA,IACJ;AAEA,UAAM,WAAW,QAAQ,IAAI,CAAC,WAAW;AACrC,YAAM,EAAE,UAAU,IAAI;AACtB,YAAM,EAAE,QAAAD,SAAQ,WAAAC,YAAW,WAAAC,WAAU,IAAI;AACzC,YAAM,eAAe,0BAA0B,aAAa,CAAC,GAAG,gBAAgB,eAAe,SAAS,GAAG,eAAe,UAAU,CAAC;AACrI,aAAO;AAAA,QACH,QAAAF;AAAA,QACA,WAAAC;AAAA,QACA,WAAAC;AAAA,QACA,WAAW;AAAA,UACP,GAAG;AAAA,UACH,GAAG;AAAA,QACP;AAAA,QACA,SAAS;AAAA,MACb;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,MACH,QAAQ;AAAA,MACR;AAAA,IACJ;AAAA,EACJ;AAEA,QAAM,oBAAoB,MAAM;AAC5B,UAAM,gBAAgB,sBAAsB,iBAAiB;AAC7D,UAAM,SAAS,cAAc;AAAA,MAAI,CAAC,YAC9B,QAAQ,OAAO;AAAA,IACnB,EAAE,OAAO,CAAC,MAAM,KAAK,IAAI;AAEzB,QAAI,OAAO,WAAW,GAAG;AACrB;AAAA,IACJ;AAEA,0BAAsB,uCAAuC,MAAM;AAAA,EACvE;AAEA,+BAAU,MAAM;AACZ,UAAM,eAAe,SAAS,CAAC;AAE/B,QAAI,gBAAgB,MAAM;AACtB;AAAA,IACJ;AAEA,UAAM,EAAE,OAAO,IAAI;AAEnB,UAAM,eAAe,qBAAqB,cAAc,MAAM;AAC9D,UAAM,QAAQ,6CAAc;AAC5B,QAAI,SAAS,MAAM;AACf;AAAA,IACJ;AACA,UAAM,cAAc,MAAM,uBAAuB;AAEjD,UAAM,yBAAyB,YAAY,cAAc,UAAU,CAAC,eAAe;AAC/E,UAAI,eAAe,MAAM;AACrB,qBAAa,KAAK;AAAA,MACtB;AAAA,IACJ,CAAC;AAED,UAAM,wBAAwB,YAAY,aAAa,UAAU,CAAC,UAAU;AACxE,YAAM,EAAE,QAAQ,IAAI;AACpB,YAAM,SAAS,gBAAgB,SAAS,qBAAqB;AAC7D,YAAM,cAAc,OAAO,OAAO,CAAC,OAAM,uBAAG,sCAA6C;AAEzF,UAAIC,gBAAe;AACnB,UAAIC,kBAAiB;AAErB,UAAI,OAAO,SAAS,GAAG;AACnB,QAAAD,gBAAe;AAAA,MACnB;AAEA,UAAI,YAAY,SAAS,GAAG;AACxB,QAAAC,kBAAiB;AAAA,MACrB;AAEA,YAAMC,aAAYF,iBAAgBC;AAElC,mBAAaC,UAAS;AACtB,sBAAgBF,aAAY;AAC5B,wBAAkBC,eAAc;AAAA,IACpC,CAAC;AAED,WAAO,MAAM;AACT,4BAAsB,YAAY;AAClC,6BAAuB,YAAY;AAAA,IACvC;AAAA,EACJ,GAAG,CAAC,CAAC;AAEL,SACI,8CAAC,SAAI,WAAW,KAAK,qBAAO,sBAAsB,qBAAO,sBAAsB,GAAG,OAAO,EAAE,SAAS,YAAY,aAAa,OAAO,YAAY,KAAK,EAAE,GACnJ;AAAA,iDAAC,SAAI,WAAW,qBAAO,qBACnB,uDAAC,SAAI,WAAW,KAAK,qBAAO,wBAAwB,qBAAO,qBAAqB,GAC5E,uDAAC,SAAK,wBAAc,EAAE,yBAAyB,GAAE,GACrD,GACJ;AAAA,IACA,8CAAC,SAAI,WAAW,qBAAO,qBACnB;AAAA,mDAAC,SAAI,WAAW,KAAK,qBAAO,wBAAwB,qBAAO,uBAAuB,qBAAO,4BAA4B,GACjH,uDAAC,UAAO,MAAK,SAAQ,SAAS,MAAM;AAAE,wBAAgB;AAAA,MAAG,GAAG,OAAO,EAAE,SAAS,YAAY,YAAY,EAAE,GACpG,wDAAC,UAAK,WAAW,qBAAO,wBACpB;AAAA,qDAAC,wBAAY;AAAA,QACZ,cAAc,EAAE,yBAAyB;AAAA,SAC9C,GACJ,GACJ;AAAA,MACA,6CAAC,SAAI,WAAW,KAAK,qBAAO,wBAAwB,qBAAO,uBAAuB,qBAAO,4BAA4B,GACjH,uDAAC,UAAO,MAAK,SAAQ,SAAS,MAAM;AAAE,0BAAkB;AAAA,MAAG,GAAG,OAAO,EAAE,SAAS,YAAY,cAAc,EAAE,GACxG,wDAAC,UAAK,WAAW,qBAAO,wBACpB;AAAA,qDAAC,0BAAc;AAAA,QACd,cAAc,EAAE,2BAA2B;AAAA,SAChD,GACJ,GACJ;AAAA,OACJ;AAAA,KACJ;AAER;;;AChMA,IAAAE,gBAAoC;;;ACP7B,IAAM,0BAA0B;AAEhC,IAAM,2BAA2B;AAEjC,IAAM,+BAA+B,CAAC,OAAO,IAAI;;;ADgWpC,IAAAC,sBAAA;AAnVpB,IAAM,sBAAsB;AAErB,IAAM,mBAAmB,CAAC,UAAkC;AAnCnE;AAoCI,QAAM,gBAAgB,cAAc,aAAa;AACjD,QAAM,wBAAwB,cAAc,sBAAsB;AAClE,QAAM,uBAAuB,cAAc,qBAAqB;AAEhE,QAAM,EAAE,UAAU,cAAc,IAAI;AAEpC,QAAM,eAAe,SAAS,CAAC;AAE/B,MAAI,gBAAgB,MAAM;AACtB;AAAA,EACJ;AAEA,QAAM,YAAY,aAAa;AAC/B,MAAI,aAAa,MAAM;AACnB;AAAA,EACJ;AAEA,QAAM,EAAE,QAAQ,WAAW,WAAW,YAAY,IAAI;AAEtD,QAAM,eAAe,qBAAqB,cAAc,MAAM;AAC9D,QAAM,QAAQ,6CAAc;AAC5B,MAAI,SAAS,MAAM;AACf;AAAA,EACJ;AAEA,QAAM,YAAW,WAAM,UAAU,MAAhB,mBAAmB;AACpC,MAAI,YAAY,MAAM;AAClB;AAAA,EACJ;AAEA,QAAM,cAAc,MAAM,uBAAuB;AAEjD,QAAM;AAAA,IACF,OAAO,cAAc;AAAA,IACrB,QAAQ,eAAe;AAAA,IACvB,MAAM,UAAU;AAAA,IAChB,KAAK,UAAU;AAAA,IACf,OAAO,iBAAiB;AAAA,EAC5B,IAAI;AAEJ,QAAM,CAAC,OAAO,QAAQ,QAAI,wBAAiB,WAAW;AACtD,QAAM,CAAC,QAAQ,SAAS,QAAI,wBAAS,YAAY;AACjD,QAAM,CAAC,WAAW,YAAY,QAAI,wBAAS,OAAO;AAClD,QAAM,CAAC,WAAW,YAAY,QAAI,wBAAS,OAAO;AAClD,QAAM,CAAC,UAAU,WAAW,QAAI,wBAAS,cAAc;AACvD,QAAM,CAAC,WAAW,YAAY,QAAI,wBAAS,YAAY,SAAS;AAEhE,QAAM,oBAAoB,CAAC,MAAc,KAAaC,QAAeC,YAAmB;AACpF,UAAM,EAAE,OAAO,eAAe,QAAQ,eAAe,IAAI;AACzD,UAAM,EAAE,cAAc,YAAY,IAAI;AAEtC,QAAI,YAAY;AAChB,QAAI,WAAW;AACf,QAAI,aAAaD;AACjB,QAAI,cAAcC;AAElB,QAAI,OAAO,eAAe,GAAG;AACzB,kBAAY,CAAC;AAAA,IACjB;AAEA,QAAI,MAAM,cAAc,GAAG;AACvB,iBAAW,CAAC;AAAA,IAChB;AAEA,iBAAa,gBAAgB,YAAY;AAEzC,QAAI,aAAa,yBAAyB;AACtC,mBAAa;AAAA,IACjB;AAEA,kBAAc,iBAAiB,WAAW;AAE1C,QAAI,cAAc,yBAAyB;AACvC,oBAAc;AAAA,IAClB;AAEA,QAAI,OAAO,aAAa,eAAe,eAAe;AAClD,kBAAY,gBAAgBD,SAAQ;AAAA,IACxC;AAEA,QAAI,MAAM,cAAc,cAAc,gBAAgB;AAClD,iBAAW,iBAAiBC,UAAS;AAAA,IACzC;AAEA,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAEA,QAAM,YAAY,CAAC,UAAiC;AAChD,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,SAAS,gBAAgB,SAAS,qBAAqB;AAE7D,QAAI,OAAO,WAAW,GAAG;AACrB;AAAA,IACJ;AAEA,UAAMC,gBAAe,OAAO,CAAC;AAE7B,QAAIA,iBAAgB,MAAM;AACtB;AAAA,IACJ;AAEA,UAAM,EAAE,WAAAC,WAAU,IAAID;AAEtB,QAAIC,cAAa,MAAM;AACnB;AAAA,IACJ;AAEA,UAAM;AAAA,MACF,OAAOC;AAAA,MACP,QAAQC;AAAA,MACR,MAAMC;AAAA,MACN,KAAKC;AAAA,MACL,OAAOC;AAAA,IACX,IAAIL;AAEJ,QAAIC,gBAAe,MAAM;AACrB,eAASA,YAAW;AAAA,IACxB;AAEA,QAAIC,iBAAgB,MAAM;AACtB,gBAAUA,aAAY;AAAA,IAC1B;AAEA,QAAIC,YAAW,MAAM;AACjB,mBAAaA,QAAO;AAAA,IACxB;AAEA,QAAIC,YAAW,MAAM;AACjB,mBAAaA,QAAO;AAAA,IACxB;AAEA,QAAIC,mBAAkB,MAAM;AACxB,kBAAYA,eAAc;AAAA,IAC9B;AAAA,EACJ;AAEA,+BAAU,MAAM;AACZ,UAAM,gBAAgB;AAAA,MAClB,YAAY,aAAa,UAAU,CAAC,UAAU;AAC1C,kBAAU,KAAK;AAAA,MACnB,CAAC;AAAA,MACD,YAAY,UAAU,UAAU,CAAC,UAAU;AACvC,kBAAU,KAAK;AAAA,MACnB,CAAC;AAAA,MACD,YAAY,WAAW,UAAU,CAAC,UAAU;AACxC,kBAAU,KAAK;AAAA,MACnB,CAAC;AAAA,MACD,sBAAsB,OAAO,UAAU,CAACC,cAAa;AACjD,YAAIA,UAAS,WAAW,GAAG;AACvB;AAAA,QACJ;AAEA,cAAMP,gBAAe,sBAAsB,kBAAkBO,UAAS,CAAC,CAAC;AAExE,YAAIP,iBAAgB,MAAM;AACtB;AAAA,QACJ;AAEA,cAAMC,aAAYD,cAAa;AAE/B,YAAIC,cAAa,MAAM;AACnB;AAAA,QACJ;AAEA,cAAM;AAAA,UACF,OAAOC;AAAA,UACP,QAAQC;AAAA,UACR,MAAMC;AAAA,UACN,KAAKC;AAAA,UACL,OAAOC;AAAA,QACX,IAAIL;AAEJ,YAAIC,gBAAe,MAAM;AACrB,mBAASA,YAAW;AAAA,QACxB;AAEA,YAAIC,iBAAgB,MAAM;AACtB,oBAAUA,aAAY;AAAA,QAC1B;AAEA,YAAIC,YAAW,MAAM;AACjB,uBAAaA,QAAO;AAAA,QACxB;AAEA,YAAIC,YAAW,MAAM;AACjB,uBAAaA,QAAO;AAAA,QACxB;AAEA,YAAIC,mBAAkB,MAAM;AACxB,sBAAYA,eAAc;AAAA,QAC9B;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,WAAO,MAAM;AACT,oBAAc,QAAQ,CAAC,QAAQ,IAAI,YAAY,CAAC;AAAA,IACpD;AAAA,EACJ,GAAG,CAAC,CAAC;AAEL,QAAM,oBAAoB,iBAAS,CAAC,QAAuB;AACvD,QAAI,OAAO,MAAM;AACb;AAAA,IACJ;AAEA,UAAM,KAAK,IAAI,KAAK,uBAAuB;AAE3C,UAAM,EAAE,YAAY,YAAY,IAAI,kBAAkB,WAAW,WAAW,KAAK,MAAM;AAEvF,UAAM,KAAK,IAAI,KAAK,UAAU;AAE9B,UAAM,cAA6B,EAAE,QAAQ,WAAW,WAAW,aAAa,WAAW,EAAE,OAAO,IAAI,EAAE;AAE1G,QAAI,WAAW;AACX,UAAI,YAAa,MAAM,QAAS;AAChC,kBAAY,KAAK,IAAI,WAAW,wBAAwB;AACxD,UAAI,YAAY,aAAa;AACzB;AAAA,MACJ;AACA,gBAAU,SAAS;AACnB,kBAAY,UAAW,SAAS;AAAA,IACpC;AAEA,aAAS,GAAG;AAEZ,0BAAsB,gCAAgC,CAAC,WAAW,CAAC;AAEnE,gBAAY,gBAAgB,EAAE,mBAAmB;AAAA,EACrD,GAAG,mBAAmB;AAEtB,QAAM,qBAAqB,iBAAS,CAAC,QAAuB;AACxD,QAAI,OAAO,MAAM;AACb;AAAA,IACJ;AACA,UAAM,KAAK,IAAI,KAAK,uBAAuB;AAE3C,UAAM,EAAE,aAAa,WAAW,IAAI,kBAAkB,WAAW,WAAW,OAAO,GAAG;AAEtF,UAAM,KAAK,IAAI,KAAK,WAAW;AAAG;AAElC,UAAM,cAA6B,EAAE,QAAQ,WAAW,WAAW,aAAa,WAAW,EAAE,QAAQ,IAAI,EAAE;AAE3G,QAAI,WAAW;AACX,UAAI,WAAY,MAAM,SAAU;AAChC,iBAAW,KAAK,IAAI,UAAU,uBAAuB;AACrD,UAAI,WAAW,YAAY;AACvB;AAAA,MACJ;AACA,eAAS,QAAQ;AACjB,kBAAY,UAAW,QAAQ;AAAA,IACnC;AAEA,cAAU,GAAG;AAEb,0BAAsB,gCAAgC,CAAC,WAAW,CAAC;AAEnE,gBAAY,gBAAgB,EAAE,mBAAmB;AAAA,EACrD,GAAG,mBAAmB;AAEtB,QAAM,gBAAgB,iBAAS,CAAC,QAAuB;AACnD,QAAI,OAAO,MAAM;AACb;AAAA,IACJ;AAEA,UAAM,EAAE,UAAU,IAAI,kBAAkB,KAAK,WAAW,OAAO,MAAM;AAErE,UAAM;AAEN,UAAM,cAA6B,EAAE,QAAQ,WAAW,WAAW,aAAa,WAAW,EAAE,MAAM,IAAI,EAAE;AAEzG,iBAAa,GAAG;AAEhB,0BAAsB,gCAAgC,CAAC,WAAW,CAAC;AAEnE,gBAAY,gBAAgB,EAAE,mBAAmB;AAAA,EACrD,GAAG,mBAAmB;AAEtB,QAAM,gBAAgB,iBAAS,CAAC,QAAuB;AACnD,QAAI,OAAO,MAAM;AACb;AAAA,IACJ;AAEA,UAAM,EAAE,SAAS,IAAI,kBAAkB,WAAW,KAAK,OAAO,MAAM;AAEpE,UAAM;AAEN,UAAM,cAA6B,EAAE,QAAQ,WAAW,WAAW,aAAa,WAAW,EAAE,KAAK,IAAI,EAAE;AAExG,iBAAa,GAAG;AAEhB,0BAAsB,gCAAgC,CAAC,WAAW,CAAC;AAEnE,gBAAY,gBAAgB,EAAE,mBAAmB;AAAA,EACrD,GAAG,mBAAmB;AAEtB,QAAM,uBAAuB,CAAC,QAAuB;AACjD,QAAI,OAAO,MAAM;AACb;AAAA,IACJ;AAEA,UAAM,CAAC,KAAK,GAAG,IAAI;AAEnB,QAAI,MAAM,KAAK;AACX,YAAM;AAAA,IACV;AAEA,QAAI,MAAM,KAAK;AACX,YAAM;AAAA,IACV;AAEA,UAAM,cAA6B,EAAE,QAAQ,WAAW,WAAW,aAAa,WAAW,EAAE,OAAO,IAAI,EAAE;AAE1G,gBAAY,GAAG;AAEf,0BAAsB,gCAAgC,CAAC,WAAW,CAAC;AAEnE,gBAAY,gBAAgB,EAAE,mBAAmB;AAAA,EACrD;AAEA,QAAM,wBAAwB,CAAC,QAAmC;AAC9D,iBAAa,GAAc;AAC3B,gBAAY,YAAY;AAAA,EAC5B;AAEA,QAAM,cAAc,CAAC,WAAoB;AACrC,WAAO,SAAS,UAAU;AAAA,EAC9B;AAEA,SACI,8CAAC,SAAI,WAAW,KAAK,qBAAO,sBAAsB,qBAAO,sBAAsB,GAAG,OAAO,EAAE,SAAS,YAAY,aAAa,EAAE,GAC3H;AAAA,iDAAC,SAAI,WAAW,qBAAO,qBACnB,uDAAC,SAAI,WAAW,KAAK,qBAAO,wBAAwB,qBAAO,qBAAqB,GAC5E,uDAAC,SAAK,wBAAc,EAAE,6BAA6B,GAAE,GACzD,GACJ;AAAA,IACA,8CAAC,SAAI,WAAW,qBAAO,qBACnB;AAAA,mDAAC,SAAI,WAAW,KAAK,qBAAO,wBAAwB,qBAAO,qBAAqB,GAC5E,wDAAC,WACG;AAAA,qDAAC,SAAI,WAAW,qBAAO,qBACnB,uDAAC,SAAI,WAAW,qBAAO,wBAClB,wBAAc,EAAE,6BAA6B,GAClD,GACJ;AAAA,QACA,6CAAC,SAAI,WAAW,qBAAO,qBACnB,uDAAC,SAAI,WAAW,qBAAO,wBACnB,uDAAC,eAAY,WAAW,GAAG,OAAO,OAAO,UAAU,CAAC,QAAQ;AAAE,4BAAkB,GAAG;AAAA,QAAG,GAAG,WAAW,qBAAO,uBAAuB,GACtI,GACJ;AAAA,SACJ,GACJ;AAAA,MACA,6CAAC,SAAI,WAAW,KAAK,qBAAO,wBAAwB,qBAAO,qBAAqB,GAC5E,wDAAC,WACG;AAAA,qDAAC,SAAI,WAAW,qBAAO,qBACnB,uDAAC,SAAI,WAAW,qBAAO,wBAClB,wBAAc,EAAE,8BAA8B,GACnD,GACJ;AAAA,QACA,6CAAC,SAAI,WAAW,qBAAO,qBACnB,uDAAC,SAAI,WAAW,qBAAO,wBACnB,uDAAC,eAAY,WAAW,GAAG,OAAO,QAAQ,UAAU,CAAC,QAAQ;AAAE,6BAAmB,GAAG;AAAA,QAAG,GAAG,WAAW,qBAAO,uBAAuB,GACxI,GACJ;AAAA,SACJ,GACJ;AAAA,MACA,6CAAC,SAAI,WAAW,KAAK,qBAAO,wBAAwB,qBAAO,qBAAqB,GAC5E,wDAAC,WACG;AAAA,qDAAC,SAAI,WAAW,qBAAO,qBACnB,uDAAC,SAAI,WAAW,qBAAO,wBAClB,wBAAc,EAAE,4BAA4B,GACjD,GACJ;AAAA,QACA,6CAAC,SAAI,WAAW,KAAK,qBAAO,qBAAqB,qBAAO,2BAA2B,GAC/E,uDAAC,SAAI,WAAW,qBAAO,wBACnB,uDAAC,YAAS,SAAS,WAAW,UAAU,uBAAuB,GACnE,GACJ;AAAA,SACJ,GACJ;AAAA,OACJ;AAAA,IACA,8CAAC,SAAI,WAAW,qBAAO,qBACnB;AAAA,mDAAC,SAAI,WAAW,KAAK,qBAAO,wBAAwB,qBAAO,qBAAqB,GAC5E,wDAAC,WACG;AAAA,qDAAC,SAAI,WAAW,qBAAO,qBACnB,uDAAC,SAAI,WAAW,qBAAO,wBAClB,wBAAc,EAAE,yBAAyB,GAC9C,GACJ;AAAA,QACA,6CAAC,SAAI,WAAW,qBAAO,qBACnB,uDAAC,SAAI,WAAW,qBAAO,wBACnB,uDAAC,eAAY,WAAW,GAAG,OAAO,WAAW,UAAU,CAAC,QAAQ;AAAE,wBAAc,GAAG;AAAA,QAAG,GAAG,WAAW,qBAAO,uBAAuB,GACtI,GACJ;AAAA,SACJ,GACJ;AAAA,MACA,6CAAC,SAAI,WAAW,KAAK,qBAAO,wBAAwB,qBAAO,qBAAqB,GAC5E,wDAAC,WACG;AAAA,qDAAC,SAAI,WAAW,qBAAO,qBACnB,uDAAC,SAAI,WAAW,qBAAO,wBAClB,wBAAc,EAAE,yBAAyB,GAC9C,GACJ;AAAA,QACA,6CAAC,SAAI,WAAW,qBAAO,qBACnB,uDAAC,SAAI,WAAW,qBAAO,wBACnB,uDAAC,eAAY,WAAW,GAAG,OAAO,WAAW,UAAU,CAAC,QAAQ;AAAE,wBAAc,GAAG;AAAA,QAAG,GAAG,WAAW,qBAAO,uBAAuB,GACtI,GACJ;AAAA,SACJ,GACJ;AAAA,MACA,6CAAC,SAAI,WAAW,KAAK,qBAAO,wBAAwB,qBAAO,qBAAqB,GAC5E,wDAAC,WACG;AAAA,qDAAC,SAAI,WAAW,qBAAO,qBACnB,uDAAC,SAAI,WAAW,qBAAO,wBAClB,wBAAc,EAAE,8BAA8B,GACnD,GACJ;AAAA,QACA,6CAAC,SAAI,WAAW,qBAAO,qBACnB,uDAAC,SAAI,WAAW,qBAAO,wBACnB,uDAAC,eAAY,WAAW,GAAG,OAAO,UAAU,UAAU,sBAAsB,WAAW,qBAAO,uBAAuB,GACzH,GACJ;AAAA,SACJ,GACJ;AAAA,OACJ;AAAA,KACJ;AAGR;;;AE7bA,IAAAE,gBAA4C;;;ACFrC,IAAM,yBAAqD;AAAA,EAC9D,IAAI;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,UAAU,WAAW;AAC3B,WAAO;AAAA,EACX;AACJ;AAEO,IAAM,0BAA4D;AAAA,EACrE,IAAI;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,UAAU,WAAW;AAC3B,WAAO;AAAA,EACX;AACJ;AAmBO,IAAM,yBAA6E;AAAA,EACtF,IAAI;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,UAAU,WAAW;AAC3B,WAAO;AAAA,EACX;AACJ;;;ADsEoB,IAAAC,sBAAA;AAlGb,IAAM,eAAe,CAAC,UAA8B;AACvD,QAAM,iBAAiB,cAAc,eAAe;AACpD,QAAM,gBAAgB,cAAc,aAAa;AAEjD,QAAM,EAAE,UAAU,YAAY,IAAI;AAElC,QAAM,eAAe,SAAS,CAAC;AAE/B,MAAI,gBAAgB,MAAM;AACtB;AAAA,EACJ;AAEA,QAAM,CAAC,WAAW,YAAY,QAAI,sCAAwC;AAE1E,QAAM,mBAAe,sBAAO,KAAK;AAEjC,QAAM,cAAc;AAAA,IAChB;AAAA,MACI,OAAO,cAAc,EAAE,uBAAuB;AAAA,MAC9C;AAAA,IACJ;AAAA,IACA;AAAA,MACI,OAAO;AAAA,MACP;AAAA,IACJ;AAAA,IACA;AAAA,MACI,OAAO;AAAA,MACP;AAAA,IACJ;AAAA,IACA;AAAA,MACI,OAAO;AAAA,MACP;AAAA,IACJ;AAAA,IACA;AAAA,MACI,OAAO;AAAA,MACP;AAAA,IACJ;AAAA,IACA;AAAA,MACI,OAAO;AAAA,MACP;AAAA,IACJ;AAAA,IACA;AAAA,MACI,OAAO;AAAA,MACP;AAAA,IACJ;AAAA,IACA;AAAA,MACI,OAAO;AAAA,MACP;AAAA,IACJ;AAAA,IACA;AAAA,MACI,OAAO;AAAA,MACP;AAAA,IACJ;AAAA,IACA;AAAA,MACI,OAAO;AAAA,MACP;AAAA,IACJ;AAAA,EACJ;AAEA,+BAAU,MAAM;AACZ,UAAM,wBAAwB,eAAe,kBAAkB,CAAC,YAAY;AACxE,UAAI,QAAQ,OAAO,wBAAwB,IAAI;AAC3C,cAAM,SAAS,QAAQ;AACvB,YAAI,EAAC,iCAAQ,SAAQ;AACjB,uBAAa,UAAU;AAAA,QAC3B;AAAA,MACJ;AAAA,IACJ,CAAC;AAED,WAAO,MAAM;AACT,qEAAuB;AAAA,IAC3B;AAAA,EACJ,GAAG,CAAC,CAAC;AAEL,WAAS,iBAAiB,OAAkC;AACxD,iBAAc,KAAgB;AAC9B,QAAI,aAAa,SAAS;AACtB,qBAAe,eAAe,uBAAuB,IAAI;AAAA,QACrD,UAAU;AAAA,MACd,CAAC;AAAA,IACL;AAAA,EACJ;AAEA,QAAM,cAAc,CAAC,WAAoB;AACrC,WAAO,SAAS,UAAU;AAAA,EAC9B;AAEA,QAAM,oBAAoB,CAAC,QAAkB;AACzC,mBAAe,eAAe,uBAAuB,IAAI;AAAA,MACrD,UAAU;AAAA,IACd,CAAC;AACD,iBAAa,UAAU;AAAA,EAC3B;AAEA,SACI,8CAAC,SAAI,WAAW,KAAK,qBAAO,sBAAsB,qBAAO,sBAAsB,GAAG,OAAO,EAAE,SAAS,YAAY,WAAW,EAAE,GACzH;AAAA,iDAAC,SAAI,WAAW,qBAAO,qBACnB,uDAAC,SAAI,WAAW,KAAK,qBAAO,wBAAwB,qBAAO,qBAAqB,GAC5E,uDAAC,SAAK,wBAAc,EAAE,wBAAwB,GAAE,GACpD,GACJ;AAAA,IACA,8CAAC,SAAI,WAAW,KAAK,qBAAO,qBAAqB,qBAAO,2BAA2B,GAC/E;AAAA,mDAAC,SAAI,WAAW,KAAK,qBAAO,wBAAwB,qBAAO,qBAAqB,GAC5E,uDAAC,UAAO,MAAK,SAAQ,SAAS,MAAM;AAAE,0BAAkB,SAAqB;AAAA,MAAG,GAC5E,wDAAC,UAAK,WAAW,qBAAO,wBACpB;AAAA,qDAAC,8BAAiB;AAAA,QACjB,cAAc,EAAE,wBAAwB;AAAA,SAC7C,GACJ,GACJ;AAAA,MACA,6CAAC,SAAI,WAAW,KAAK,qBAAO,wBAAwB,qBAAO,qBAAqB,GAC5E,uDAAC,UAAO,OAAO,WAAW,SAAS,aAAa,UAAU,kBAAkB,GAChF;AAAA,OACJ;AAAA,KACJ;AAER;;;ARZQ,IAAAC,sBAAA;AAhGD,IAAM,qBAAqB,CAAC,UAAoC;AACnE,QAAM,wBAAwB,cAAc,sBAAsB;AAClE,QAAM,uBAAuB,cAAc,qBAAqB;AAChE,QAAM,gBAAgB,cAAc,aAAa;AAEjD,QAAM,EAAE,UAAU,aAAa,MAAM,eAAe,MAAM,WAAW,MAAM,aAAa,MAAM,WAAW,KAAK,IAAI;AAElH,QAAM,eAAe,SAAS,CAAC;AAE/B,MAAI,gBAAgB,MAAM;AACtB;AAAA,EACJ;AAEA,QAAM,EAAE,OAAO,IAAI;AAEnB,QAAM,eAAe,qBAAqB,cAAc,MAAM;AAC9D,QAAM,QAAQ,6CAAc;AAC5B,MAAI,SAAS,MAAM;AACf;AAAA,EACJ;AACA,QAAM,cAAc,MAAM,uBAAuB;AAEjD,QAAM,CAAC,aAAa,cAAc,QAAI,wBAAS,IAAI;AACnD,QAAM,CAAC,eAAe,gBAAgB,QAAI,wBAAS,IAAI;AACvD,QAAM,CAAC,WAAW,YAAY,QAAI,wBAAS,KAAK;AAChD,QAAM,CAAC,aAAa,cAAc,QAAI,wBAAS,IAAI;AACnD,QAAM,CAAC,UAAU,WAAW,QAAI,wBAAS,KAAK;AAG9C,+BAAU,MAAM;AACZ,UAAM,kBAAkB,YAAY,cAAc,UAAU,CAAC,eAAe;AACxE,UAAI,eAAe,MAAM;AACrB,uBAAe,KAAK;AACpB,yBAAiB,KAAK;AACtB,qBAAa,KAAK;AAClB,uBAAe,KAAK;AACpB,oBAAY,IAAI;AAAA,MACpB;AAAA,IACJ,CAAC;AAED,UAAM,iBAAiB,YAAY,aAAa,UAAU,CAAC,UAAU;AACjE,YAAM,EAAE,QAAQ,IAAI;AACpB,YAAM,SAAS,gBAAgB,SAAS,qBAAqB;AAE7D,UAAI,OAAO,WAAW,GAAG;AACrB,uBAAe,KAAK;AACpB,yBAAiB,KAAK;AACtB,qBAAa,KAAK;AAClB,uBAAe,KAAK;AACpB,oBAAY,IAAI;AAAA,MACpB,WAAW,OAAO,WAAW,GAAG;AAC5B,uBAAe,IAAI;AACnB,yBAAiB,IAAI;AACrB,qBAAa,KAAK;AAClB,uBAAe,IAAI;AACnB,oBAAY,KAAK;AAAA,MACrB,OAAO;AACH,uBAAe,IAAI;AACnB,yBAAiB,KAAK;AACtB,qBAAa,IAAI;AACjB,uBAAe,KAAK;AACpB,oBAAY,KAAK;AAAA,MACrB;AAAA,IACJ,CAAC;AAED,UAAM,WAAW,sBAAsB,OAAO,UAAU,CAACC,cAAa;AAClE,UAAIA,UAAS,WAAW,GAAG;AACvB,uBAAe,KAAK;AACpB,yBAAiB,KAAK;AACtB,qBAAa,KAAK;AAClB,uBAAe,KAAK;AACpB,oBAAY,IAAI;AAAA,MACpB,WAAWA,UAAS,WAAW,GAAG;AAC9B,uBAAe,IAAI;AACnB,yBAAiB,IAAI;AACrB,qBAAa,KAAK;AAClB,uBAAe,IAAI;AACnB,oBAAY,KAAK;AAAA,MACrB,OAAO;AACH,uBAAe,IAAI;AACnB,yBAAiB,KAAK;AACtB,qBAAa,IAAI;AACjB,uBAAe,KAAK;AACpB,oBAAY,KAAK;AAAA,MACrB;AAAA,IACJ,CAAC;AAED,WAAO,MAAM;AACT,qBAAe,YAAY;AAC3B,sBAAgB,YAAY;AAC5B,eAAS,YAAY;AAAA,IACzB;AAAA,EAEJ,GAAG,CAAC,CAAC;AAEL,SACI,8EACI;AAAA,iDAAC,SAAI,OAAO,EAAE,SAAS,aAAa,OAAO,UAAU,QAAQ,QAAQ,OAAO,GACxE,uDAAC,SAAI,OAAO,EAAE,SAAS,QAAQ,gBAAgB,UAAU,YAAY,UAAU,QAAQ,QAAQ,KAAK,OAAO,WAAW,SAAS,GAC3H,uDAAC,UACI,wBAAc,EAAE,kBAAkB,GACvC,GACJ,GACJ;AAAA,IACA,6CAAC,kBAAe,aAAa,eAAe,OAAO,cAAc,OAAO,UAAoB;AAAA,IAC5F,6CAAC,oBAAiB,eAAe,iBAAiB,OAAO,gBAAgB,OAAO,UAAoB;AAAA,IACpG,6CAAC,gBAAa,WAAW,aAAa,OAAO,YAAY,OAAO,UAAoB;AAAA,IACpF,6CAAC,gBAAa,aAAa,eAAe,OAAO,cAAc,OAAO,UAAoB;AAAA,IAC1F,6CAAC,gBAAa,UAAoB,UAAoB;AAAA,KAC1D;AAER;;;AUhIA,IAAAC,gBAAgC;AAqEhB,IAAAC,sBAAA;AAjDT,IAAM,iBAAiD,CAAC,UAAgC;AAzC/F;AA0CI,QAAM,EAAE,MAAM,IAAI;AAElB,QAAM,aAAY,oCAAO,eAAP,mBAAmB;AAErC,MAAI,CAAC,UAAW,QAAO;AAEvB,QAAM,iBAAiB,cAAc,eAAe;AACpD,QAAM,gBAAgB,cAAc,aAAa;AAEjD,QAAM,CAAC,SAAS,UAAU,QAAI,wBAAS,KAAK;AAC5C,QAAM,CAAC,WAAW,UAAU,QAAI,wBAAS,KAAK;AAE9C,QAAM,mBAAmB,MAAM;AAC3B,eAAW,IAAI;AAAA,EACnB;AAEA,QAAM,mBAAmB,MAAM;AAC3B,eAAW,KAAK;AAAA,EACpB;AAEA,QAAM,kBAAkB,CAACC,aAAqB;AAC1C,eAAWA,QAAO;AAAA,EACtB;AAEA,QAAM,cAAc,CAAC,SAA8B;AAC/C,mBAAe,eAAe,KAAK,WAAW,KAAK,aAAa;AAChE,eAAW,KAAK;AAAA,EACpB;AAEA,QAAM,WAAW,WAAW;AAE5B,QAAM,gBAAgB,UAAU,OAAO,CAAC,SAAS,CAAC,KAAK,OAAO;AAE9D,SACI;AAAA,IAAC;AAAA;AAAA,MACG,cAAc;AAAA,MACd,cAAc;AAAA,MAEd;AAAA,QAAC;AAAA;AAAA,UACG,OAAM;AAAA,UACN,OAAO,cAAc,IAAI,CAAC,UAAU;AAAA,YAChC,MAAM;AAAA,YACN,UAAU,cAAc,EAAE,KAAK,KAAK;AAAA,YACpC,UAAU,MAAM,YAAY,IAAI;AAAA,UACpC,EAAE;AAAA,UACF,MAAM;AAAA,UACN,cAAc;AAAA,UAEd;AAAA,YAAC;AAAA;AAAA,cACG,WAAW,KAAK;AAAA;AAAA;AAAA;AAAA,uBAIb;AAAA,gBACC,sBAAsB;AAAA,gBACtB,mBAAmB,CAAC;AAAA,cACxB,CAAC;AAAA,cAED;AAAA;AAAA,kBAAC;AAAA;AAAA,oBACG,OAAO,EAAE,OAAO,UAAU;AAAA,oBAC1B,QAAQ,EAAE,eAAe,iCAAiC;AAAA;AAAA,gBAC9D;AAAA,gBACC,YAAY,6CAAC,4BAAe,WAAU,2CAA0C;AAAA;AAAA;AAAA,UACrF;AAAA;AAAA,MACJ;AAAA;AAAA,EACJ;AAER;;;AC7FO,IAAM,6BAA6B;;;ACEnC,IAAM,+BAA+B;AAErC,IAAMC,gBAAe,OAAO,4BAA4B;AAMxD,IAAMC,uBAA8C,CAAC;;;ACRrD,IAAM,0BAAwD;AAAA,EACjE,IAAI;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,UAAU,WAAW;AAC3B,WAAO;AAAA,EACX;AACJ;;;ACQY,IAAAC,sBAAA;AATL,IAAM,cAA2C,CAAC,UAA6B;AAClF,QAAM,EAAE,IAAI,IAAI;AAEhB,MAAI,CAAC,KAAK;AACN,WAAO;AAAA,EACX;AAEA,SACI,6CAAC,SACG,uDAAC,SAAI,KAAU,KAAI,uBAAsB,OAAO,EAAE,OAAO,QAAQ,QAAQ,QAAQ,UAAU,WAAW,GAAG,GAC7G;AAER;;;ACTO,IAAM,sBAAN,cAAkC,WAAW;AAAA,EAChD,YAC+C,mBACT,iBACpC;AACE,UAAM;AAHqC;AACT;AAIlC,SAAK,MAAM;AAAA,EACf;AAAA,EAEQ,wBAA8B;AAClC,UAAM,mBAAmB,KAAK;AAC9B,SAAK,cAAc,iBAAiB,SAAS,4BAA4B,cAAc,CAAC;AACxF,SAAK,cAAc,iBAAiB,SAAS,wBAAwB,WAAW,CAAC;AAAA,EACrF;AAAA,EAEQ,gBAAgB;AACpB;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,EAAE,QAAQ,CAAC,YAAY,KAAK,cAAc,KAAK,gBAAgB,gBAAgB,OAAO,CAAC,CAAC;AAAA,EAC5F;AAAA,EAEQ,QAAc;AAClB,SAAK,cAAc;AACnB,SAAK,sBAAsB;AAAA,EAC/B;AACJ;AA9Ba,sBAAN;AAAA,EAEE,0BAAO,gBAAgB;AAAA,EACvB;AAAA,GAHI;;;ACgBN,IAAM,0BAAN,cAAsC,WAAW;AAAA,EACpD,YAC6C,uBACP,iBACM,uBACC,wBAC3C;AACE,UAAM;AALmC;AACP;AACM;AACC;AAigB7C,wBAAQ,8BAA6C,oBAAI,QAAQ;AA7f7D,SAAK,YAAY;AAAA,EACrB;AAAA,EAES,UAAgB;AACrB,UAAM,QAAQ;AAAA,EAClB;AAAA,EAEQ,cAAc;AAClB,SAAK,gBAAgB;AAErB,SAAK,oBAAoB;AAEzB,SAAK,uBAAuB;AAE5B,SAAK,uBAAuB;AAE5B,SAAK,yBAAyB;AAE9B,SAAK,wBAAwB;AAE7B,SAAK,sBAAsB;AAE3B,SAAK,wBAAwB;AAE7B,SAAK,wBAAwB;AAAA,EACjC;AAAA,EAEQ,kBAAkB;AACtB,UAAM,cAAc,KAAK,uBAAuB;AAEhD,UAAM,OAAO,mBAAmB,KAAK,qBAAqB;AAC1D,QAAI,QAAQ,MAAM;AACd;AAAA,IACJ;AAEA,UAAM,EAAE,QAAQ,eAAe,WAAW,iBAAiB,IAAI;AAE/D,WAAO,KAAK,WAAW,EAAE,QAAQ,CAAC,WAAW;AACzC,aAAO,KAAK,YAAY,MAAM,CAAC,EAAE,QAAQ,CAAC,cAAc;AACpD,cAAM,aAAa,YAAY,MAAM,EAAE,SAAS,EAAE;AAClD,YAAI,cAAc,QAAQ,WAAW,iBAAiB,cAAc,kBAAkB;AAClF;AAAA,QACJ;AACA,eAAO,KAAK,UAAU,EAAE,QAAQ,CAAC,cAAc;AAC3C,gBAAM,UAAU,WAAW,SAAS;AACpC,cAAI,SAAS;AACT,iBAAK,eAAe,CAAC,EAAE,QAAQ,WAAW,UAAU,CAAC,CAAC;AAAA,UAC1D;AAAA,QACJ,CAAC;AAAA,MACL,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA,EAEQ,2BAA2B;AAC/B,SAAK;AAAA,MACD,KAAK,gBAAgB,kBAAkB,CAAC,YAA0B;AAC9D,YAAI,QAAQ,OAAO,yBAAyB,IAAI;AAC5C,gBAAM,SAAS,QAAQ;AACvB,cAAI,UAAU,MAAM;AAChB;AAAA,UACJ;AACA,eAAK,cAAc,MAAM;AAAA,QAC7B;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,wBAAwB;AAC5B,SAAK;AAAA,MACD,KAAK,uBAAuB,OAAO,UAAU,CAAC,WAAW;AACrD,aAAK,eAAe,MAAM;AAAA,MAC9B,CAAC;AAAA,IACL;AAEA,SAAK;AAAA,MACD,KAAK,uBAAuB,SAAS,UAAU,CAAC,WAAW;AACvD,aAAK,iBAAiB,MAAM;AAAA,MAChC,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBQ,uCAAuC,QAA0B;AACrE,QAAI,UAAU,MAAM;AAChB;AAAA,IACJ;AAEA,UAAM,eAAe,KAAK,sBAAsB,cAAc,MAAM;AAEpE,UAAM,QAAQ,6CAAc;AAE5B,QAAI,SAAS,MAAM;AACf,aAAO;AAAA,IACX;AAEA,UAAM,cAAc,MAAM,uBAAuB;AAEjD,WAAO,EAAE,OAAO,YAAY;AAAA,EAChC;AAAA,EAEQ,eAAe,UAAsC;AACzD,aAAS,QAAQ,CAAC,YAAY;AAC1B,WAAK,cAAc,OAAO;AAAA,IAC9B,CAAC;AAAA,EACL;AAAA,EAEQ,cAAc,QAAkC;AACpD,UAAM,EAAE,QAAQ,SAAS,IAAI;AAE7B,UAAM,EAAE,QAAQ,WAAW,UAAU,IAAI;AAEzC,UAAM,eAAe,KAAK,uCAAuC,OAAO,MAAM;AAE9E,QAAI,gBAAgB,MAAM;AACtB;AAAA,IACJ;AAEA,UAAM,EAAE,OAAO,YAAY,IAAI;AAE/B,SAAK,gBAAgB,mBAAmB,wBAAwB,EAAE;AAElE,UAAM,UAAwB,CAAC;AAE/B,aAAS,QAAQ,CAAC,YAAY;AAC1B,YAAM,kBAAkB,kCAAkC,OAAO;AACjE,YAAM,SAAS,MAAM,wBAAwB,eAAe;AAE5D,UAAI,UAAU,QAAQ,QAAQ,SAAS,MAAM,GAAG;AAC5C;AAAA,MACJ;AAEA,cAAQ,KAAK,MAAM;AAEnB,YAAM,EAAE,UAAU,IAAI;AAEtB,UAAI,aAAa,MAAM;AACnB;AAAA,MACJ;AAEA,UAAI,OAAO,mCAAuC;AAC9C,eAAO,iBAAiB,EAAE,MAAM,UAAU,MAAM,KAAK,UAAU,IAAI,CAAC;AAAA,MACxE,OAAO;AACH,eAAO,iBAAiB,SAAS;AAAA,MACrC;AAAA,IAQJ,CAAC;AAED,QAAI,QAAQ,WAAW,GAAG;AACtB;AAAA,IACJ;AAEA,UAAM,WAAW,kCAAkC,EAAE,QAAQ,WAAW,UAAU,CAAC;AACnF,UAAM,QAAQ,IAAI,MAAM,QAAQ;AAEhC,UAAM,UAAU,OAAO,0BAA0B,EAAE,oBAAoB,KAAK;AAE5E,UAAM,WAAW,GAAG,OAAO;AAE3B,WAAO,aAAa,MAAM,iBAAiB,EAAE,MAAM,OAAO,UAAU,MAAM,KAAK,OAAO,UAAU,IAAI,CAAC;AAErG,gBAAY,qBAAqB;AACjC,gBAAY,mBAAmB,KAAK;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmDQ,iBAAiB,UAAsC;AAC3D,aAAS,QAAQ,CAAC,YAAY;AAC1B,WAAK,gBAAgB,OAAO;AAAA,IAChC,CAAC;AAAA,EACL;AAAA,EAEQ,gBAAgB,SAAmC;AACvD,UAAM,EAAE,QAAQ,SAAS,IAAI;AAE7B,UAAM,eAAe,KAAK,uCAAuC,OAAO,MAAM;AAE9E,QAAI,gBAAgB,MAAM;AACtB;AAAA,IACJ;AAEA,UAAM,EAAE,OAAO,YAAY,IAAI;AAI/B,aAAS,QAAQ,CAACC,aAAY;AAC1B,YAAM,aAAa,kCAAkCA,QAAO;AAC5D,YAAM,SAAS,MAAM,wBAAwB,UAAU;AAEvD,UAAI,UAAU,MAAM;AAChB,eAAO;AAAA,MACX;AAEA,UAAI,UAAU,MAAM;AAChB;AAAA,MACJ;AAIA,YAAM,EAAE,UAAU,IAAIA;AAEtB,UAAI,aAAa,MAAM;AACnB;AAAA,MACJ;AAEA,UAAI,OAAO,mCAAuC;AAC9C,eAAO,iBAAiB,EAAE,MAAM,UAAU,MAAM,KAAK,UAAU,IAAI,CAAC;AAAA,MACxE,OAAO;AACH,eAAO,iBAAiB,SAAS;AAAA,MACrC;AAAA,IAUJ,CAAC;AAED,UAAM,WAAW,kCAAkC,MAAM;AACzD,UAAM,QAAQ,MAAM,UAAU,QAAQ;AACtC,UAAM,EAAE,OAAO,OAAO,IAAI;AAC1B,UAAM,WAAW,EAAE,QAAQ,CAAC,WAAW;AACnC,YAAM,6BAA6B,OAAO,MAAM,OAAO,MAAM;AAAA,IACjE,CAAC;AACD,UAAM,QAAQ;AAcd,gBAAY,qBAAqB;AAAA,EACrC;AAAA,EAEQ,cAAc,QAAyC;AAC3D,UAAM,EAAE,UAAU,IAAI;AACtB,UAAM,WAAW,KAAK,uBAAuB,iBAAiB;AAE9D,QAAI,iCAAiC;AACjC;AAAA,IACJ;AAEA,UAAM,yBAAmD,CAAC;AAC1D,QAAI,UAAU,OAAO;AACrB,QAAI,SAAS,OAAO;AACpB,QAAI,WAAW,OAAO;AACtB,QAAI,YAAY,OAAO;AACvB,QAAI,eAAe;AACnB,aAAS,QAAQ,CAAC,YAAY;AAC1B,YAAM,EAAE,QAAQ,WAAW,WAAW,YAAY,IAAI;AACtD,YAAM,eAAe,KAAK,uBAAuB,kBAAkB,EAAE,QAAQ,WAAW,UAAU,CAAC;AAEnG,UAAI,gBAAgB,QAAQ,aAAa,aAAa,MAAM;AACxD;AAAA,MACJ;AAEA,6BAAuB,KAAK;AAAA,QACxB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,WAAW,aAAa;AAAA,MAC5B,CAAC;AAED,YAAM,EAAE,OAAO,GAAG,MAAM,GAAG,QAAQ,GAAG,SAAS,EAAE,IAAI,aAAa;AAClE,gBAAU,KAAK,IAAI,SAAS,IAAI;AAChC,eAAS,KAAK,IAAI,QAAQ,GAAG;AAC7B,iBAAW,KAAK,IAAI,UAAU,OAAO,KAAK;AAC1C,kBAAY,KAAK,IAAI,WAAW,MAAM,MAAM;AAE5C;AAAA,IACJ,CAAC;AAED,QAAI,iBAAiB,GAAG;AACpB;AAAA,IACJ;AAEA,SAAK,sBAAsB,wBAAwB,SAAS;AAE5D,SAAK,gBAAgB,wBAAwB,WAAW,SAAS,QAAQ,UAAU,WAAW,YAAY;AAAA,EAC9G;AAAA,EAEQ,gBAAgB,wBAAkD,WAAsB,SAAiB,QAAgB,UAAkB,WAAmB,cAAsB;AACxL,UAAM,iBAAiB,KAAK,OAAO,WAAW,WAAW,eAAe,EAAE,IAAI;AAC9E,UAAM,kBAAkB,KAAK,OAAO,YAAY,UAAU,eAAe,EAAE,IAAI;AAC/E,UAAM,eAAgC,CAAC;AAEvC,UAAM,eAAe,KAAK,uCAAuC,uBAAuB,CAAC,EAAE,MAAM;AAEjG,QAAI,gBAAgB,MAAM;AACtB;AAAA,IACJ;AACA,UAAM,EAAE,OAAO,YAAY,IAAI;AAE/B,2BAAuB,QAAQ,CAAC,uBAAuB,UAAU;AAC7D,YAAM,EAAE,QAAQ,WAAW,WAAW,WAAW,YAAY,IAAI;AAEjE,YAAM,EAAE,OAAO,GAAG,MAAM,GAAG,QAAQ,GAAG,SAAS,EAAE,IAAI;AAErD,UAAI,UAAU;AACd,UAAI,SAAS;AAEb,cAAQ,WAAW;AAAA,QACf;AACI,oBAAU;AACV;AAAA,QACJ;AACI,oBAAU,WAAW,WAAW,WAAW,IAAI,QAAQ;AACvD;AAAA,QACJ;AACI,oBAAU,WAAW;AACrB;AAAA,QACJ;AACI,mBAAS;AACT;AAAA,QACJ;AACI,mBAAS,UAAU,YAAY,UAAU,IAAI,SAAS;AACtD;AAAA,QACJ;AACI,mBAAS,YAAY;AACrB;AAAA,QACJ;AACI,oBAAU,UAAU,iBAAiB;AACrC;AAAA,QACJ;AACI,mBAAS,SAAS,kBAAkB;AACpC;AAAA,QACJ;AACI;AAAA,MACR;AAEA,UAAI,YAAY,QAAQ,WAAW,KAAK;AACpC,qBAAa,KAAK;AAAA,UACd;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,WAAW;AAAA,YACP,MAAM;AAAA,YACN,KAAK;AAAA,UACT;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ,CAAC;AAED,SAAK,uBAAuB,gCAAgC,YAAY;AAExE,gBAAY,gBAAgB,EAAE,mBAAmB;AAAA,EACrD;AAAA,EAEQ,sBAAsB,wBAAkD,WAAsB;AAClG,2BAAuB,KAAK,CAAC,GAAG,MAAM;AAClC,YAAM,aAAa,EAAE;AACrB,YAAM,aAAa,EAAE;AAErB,YAAM;AAAA,QACF,MAAM,QAAQ;AAAA,QACd,KAAK,OAAO;AAAA,QACZ,OAAO,SAAS;AAAA,QAChB,QAAQ,UAAU;AAAA,MACtB,IAAI;AAEJ,YAAM;AAAA,QACF,MAAM,QAAQ;AAAA,QACd,KAAK,OAAO;AAAA,QACZ,OAAO,SAAS;AAAA,QAChB,QAAQ,UAAU;AAAA,MACtB,IAAI;AAEJ,cAAQ,WAAW;AAAA,QACf;AACI,iBAAO,QAAQ;AAAA,QACnB;AACI,iBAAO,QAAQ,SAAS,KAAK,QAAQ,SAAS;AAAA,QAClD;AACI,iBAAO,QAAQ,UAAU,QAAQ;AAAA,QACrC;AACI,iBAAO,OAAO;AAAA,QAClB;AACI,iBAAO,OAAO,UAAU,KAAK,OAAO,UAAU;AAAA,QAClD;AACI,iBAAO,OAAO,WAAW,OAAO;AAAA,QACpC;AACI,iBAAO,QAAQ,SAAS,KAAK,QAAQ,SAAS;AAAA,QAClD;AACI,iBAAO,OAAO,UAAU,KAAK,OAAO,UAAU;AAAA,QAClD;AACI,iBAAO;AAAA,MACf;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEQ,0BAA0B;AAC9B,SAAK;AAAA,MACD,KAAK,uBAAuB,OAAO,UAAU,CAAC,WAAW;AACrD,aAAK,gBAAgB,MAAM;AAAA,MAC/B,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,gBAAgB,QAA+B;AACnD,UAAM,EAAE,QAAQ,WAAW,WAAW,IAAI;AAE1C,UAAM,eAAe,KAAK,uCAAuC,MAAM;AAEvE,QAAI,gBAAgB,MAAM;AACtB;AAAA,IACJ;AACA,UAAM,EAAE,MAAM,IAAI;AAElB,eAAW,QAAQ,CAAC,cAAc;AAC9B,YAAM,OAAO,kCAAkC,EAAE,QAAQ,WAAW,UAAU,CAAC;AAC/E,YAAM,gBAAgB,MAAM,iBAAiB,MAAM,IAAI;AACvD,UAAI,iBAAiB,QAAQ,cAAc,WAAW,GAAG;AACrD;AAAA,MACJ;AACA,YAAM,QAAQ,KAAK,uBAAuB,gBAAgB,QAAQ,SAAS,EAAE,QAAQ,SAAS;AAC9F,iBAAW,SAAS,eAAe;AAC/B,cAAM,SAAS,EAAE,QAAQ,MAAM,CAAC;AAChC,cAAM,UAAU;AAAA,MACpB;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAIQ,sBAAsB;AAC1B,SAAK;AAAA,MACD,KAAK,uBAAuB,KAAK,UAAU,CAAC,WAAW;AACnD,aAAK,eAAe,MAAM;AAAA,MAC9B,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,eAAe,QAA0B;AAC7C,UAAM,YAAqB,CAAC;AAC5B,IAAC,OAAQ,QAAQ,CAAC,UAAU;AACxB,YAAM,EAAE,OAAO,IAAI;AAEnB,YAAM,eAAe,KAAK,uBAAuB,kBAAkB,KAAK;AACxE,UAAI,gBAAgB,MAAM;AACtB;AAAA,MACJ;AAEA,YAAM,eAAe,KAAK,uCAAuC,MAAM;AACvE,UAAI,gBAAgB,MAAM;AACtB;AAAA,MACJ;AAEA,YAAM,EAAE,MAAM,IAAI;AAClB,UAAI,CAAC,UAAU,SAAS,KAAK,GAAG;AAC5B,kBAAU,KAAK,KAAK;AAAA,MACxB;AAAA,IACJ,CAAC;AAED,cAAU,QAAQ,CAAC,UAAU;AACzB,UAAI,KAAK,2BAA2B,IAAI,KAAK,GAAG;AAC5C;AAAA,MACJ;AACA,WAAK,sBAAsB,KAAK;AAChC,WAAK,2BAA2B,IAAI,KAAK;AAAA,IAC7C,CAAC;AAAA,EACL;AAAA,EAEQ,yBAAyB;AAC7B,SAAK;AAAA,MACD,KAAK,uBAAuB,QAAQ,UAAU,CAAC,WAAW;AACtD,QAAC,OAAQ,QAAQ,CAAC,UAAU;AA3lB5C;AA4lBoB,gBAAM,EAAE,QAAQ,WAAW,UAAU,IAAI;AAEzC,gBAAM,eAAe,KAAK,uCAAuC,MAAM;AAEvE,cAAI,gBAAgB,MAAM;AACtB;AAAA,UACJ;AACA,gBAAM,EAAE,MAAM,IAAI;AAElB,gBAAM,kBAAkB,kCAAkC,EAAE,QAAQ,WAAW,UAAU,CAAC;AAE1F,gBAAM,gBAAgB,MAAM,iBAAiB,iBAAiB,IAAI;AAElE,cAAI,cAAc,SAAS,GAAG;AAC1B,uBAAW,gBAAgB,eAAe;AACtC,2BAAa,QAAQ;AAAA,YACzB;AAEA,wBAAM,eAAe,MAArB,mBAAwB;AAAA,UAC5B;AAAA,QACJ,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,yBAAyB;AAC7B,SAAK;AAAA,MACD,KAAK,uBAAuB,QAAQ,UAAU,CAAC,WAAW;AACtD,QAAC,OAAQ,QAAQ,CAAC,UAAU;AAxnB5C;AAynBoB,gBAAM,EAAE,QAAQ,WAAW,UAAU,IAAI;AAEzC,gBAAM,eAAe,KAAK,uBAAuB,kBAAkB,KAAK;AAExE,cAAI,gBAAgB,MAAM;AACtB;AAAA,UACJ;AAEA,gBAAM,EAAE,WAAW,YAAY,IAAI;AAEnC,gBAAM,eAAe,KAAK,uCAAuC,MAAM;AAEvE,cAAI,gBAAgB,MAAM;AACtB;AAAA,UACJ;AACA,gBAAM,EAAE,OAAO,YAAY,IAAI;AAE/B,cAAI,aAAa,MAAM;AACnB,mBAAO;AAAA,UACX;AAEA,gBAAM,EAAE,OAAO,GAAG,MAAM,GAAG,QAAQ,GAAG,SAAS,GAAG,QAAQ,GAAG,QAAQ,OAAO,QAAQ,OAAO,QAAQ,GAAG,QAAQ,EAAE,IAAI;AAEpH,gBAAM,kBAAkB,kCAAkC,EAAE,QAAQ,WAAW,UAAU,CAAC;AAE1F,gBAAM,eAAe,MAAM,UAAU,eAAe;AAEpD,cAAI,gBAAgB,MAAM;AACtB,mBAAO;AAAA,UACX;AAEA,uBAAa,iBAAiB,EAAE,MAAM,KAAK,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO,MAAM,CAAC;AAE7F,sBAAM,eAAe,MAArB,mBAAwB;AAAA,QAC5B,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,0BAA0B;AAC9B,SAAK;AAAA,MACD,KAAK,uBAAuB,kBAAkB,UAAU,CAAC,WAAW;AAChE,QAAC,OAAQ,QAAQ,CAAC,UAAU;AACxB,gBAAM,EAAE,QAAQ,WAAW,UAAU,IAAI;AAEzC,gBAAM,eAAe,KAAK,uCAAuC,MAAM;AACvE,cAAI,gBAAgB,MAAM;AACtB;AAAA,UACJ;AACA,gBAAM,eAAe,KAAK,uBAAuB,kBAAkB,KAAK;AACxE,cAAI,gBAAgB,MAAM;AACtB;AAAA,UACJ;AACA,gBAAM,EAAE,UAAU,IAAI;AACtB,gBAAM,EAAE,MAAM,IAAI;AAElB,gBAAM,kBAAkB,kCAAkC,EAAE,QAAQ,WAAW,UAAU,CAAC;AAC1F,gBAAM,eAAe,MAAM,UAAU,eAAe;AAEpD,cAAI,gBAAgB,QAAQ,aAAa,MAAM;AAC3C,mBAAO;AAAA,UACX;AAEA,gBAAM;AAAA,YACF,OAAO;AAAA,YACP,MAAM;AAAA,YACN,QAAQ;AAAA,YACR,SAAS;AAAA,YACT,QAAQ;AAAA,YACR,QAAQ;AAAA,YACR,QAAQ;AAAA,YACR,QAAQ;AAAA,YACR,QAAQ;AAAA,UACZ,IAAI;AAEJ,uBAAa,iBAAiB,EAAE,MAAM,KAAK,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO,MAAM,CAAC;AAAA,QACjG,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,0BAA0B;AAC9B,SAAK;AAAA,MACD,KAAK,uBAAuB,SAAS,UAAU,CAAC,WAAW;AACvD,QAAC,OAAQ,QAAQ,CAAC,UAAU;AACxB,gBAAM,EAAE,QAAQ,WAAW,WAAW,QAAQ,IAAI;AAElD,gBAAM,eAAe,KAAK,uCAAuC,MAAM;AACvE,cAAI,gBAAgB,MAAM;AACtB;AAAA,UACJ;AACA,gBAAM,EAAE,MAAM,IAAI;AAElB,gBAAM,kBAAkB,kCAAkC,EAAE,QAAQ,WAAW,UAAU,CAAC;AAC1F,gBAAM,eAAe,MAAM,UAAU,eAAe;AAEpD,cAAI,gBAAgB,MAAM;AACtB,mBAAO;AAAA,UACX;AAEA,cAAI,SAAS;AACT,yBAAa,KAAK;AAAA,UACtB,OAAO;AACH,yBAAa,KAAK;AAAA,UACtB;AAAA,QACJ,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,oBAAoB,QAAmC,iBAA8C;AACzG,WAAO,OAAO,OAAO,CAAC,OAAO,UAAU;AACnC,UAAI,SAAS,MAAM;AACf,eAAO;AAAA,MACX;AACA,YAAM,EAAE,UAAU,IAAI;AACtB,aAAO,YAAY,WAAW,mDAAkB,MAAM;AAAA,IAC1D,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUQ,sBAAsB,OAAc;AACxC,UAAM,cAAc,MAAM,uBAAuB;AAEjD,QAAI,kBAA+C;AAEnD,SAAK;AAAA,MACD;AAAA,QACI,YAAY,aAAa,UAAU,CAAC,UAAU;AAC1C,gBAAM,EAAE,QAAQ,IAAI;AACpB,gBAAM,cAAc,MAAM,KAAK,QAAQ,OAAO,CAAC;AAC/C,gBAAM,WAA6B,CAAC;AACpC,4BAAkB,YAAY,IAAI,CAAC,WAAW;AAC1C,kBAAM,EAAE,MAAM,KAAK,QAAQ,OAAO,OAAO,MAAM,UAAU,IAAI;AAC7D,kBAAM,UAAU,KAAK,uBAAuB,eAAe,IAAI;AAC/D,gBAAI,aAAa,kBAAkB,OAAO;AACtC,kBAAI,QAAQ,OAAO;AACnB,kBAAI,SAAS,QAAQ,kBAAkB,OAAO;AAC1C,wBAAQ;AAAA,cACZ;AAEA,kBAAI,SAAS,MAAM;AACf,uBAAO;AAAA,cACX;AAEA,oBAAM,eAAe,KAAK,uBAAuB,eAAe,MAAM,IAAI;AAC1E,kBAAI,cAAc;AACd,sBAAM,EAAE,QAAQ,WAAW,UAAU,IAAI;AACzC,yBAAS,KAAK,EAAE,QAAQ,WAAW,UAAU,CAAC;AAC9C,sBAAM,EAAE,MAAAC,OAAM,KAAAC,MAAK,QAAAC,SAAQ,OAAAC,QAAO,OAAAC,OAAM,IAAI;AAC5C,uBAAO,EAAE,MAAAJ,OAAM,KAAAC,MAAK,QAAAC,SAAQ,OAAAC,QAAO,OAAAC,OAAM;AAAA,cAC7C;AAAA,YACJ,WAAW,WAAW,MAAM;AACxB,oBAAM,EAAE,QAAQ,WAAW,UAAU,IAAI;AACzC,uBAAS,KAAK,EAAE,QAAQ,WAAW,UAAU,CAAC;AAE9C,qBAAO,EAAE,MAAM,KAAK,QAAQ,OAAO,MAAM;AAAA,YAC7C;AACA,mBAAO;AAAA,UACX,CAAC,EAAE,OAAO,CAAC,cAAc,aAAa,IAAI;AAE1C,cAAI,SAAS,SAAS,GAAG;AACrB,iBAAK,gBAAgB,mBAAmB,4BAA4B,IAAI,QAAQ;AAAA,UACpF,OAAO;AACH,iBAAK,gBAAgB,mBAAmB,4BAA4B,IAAI,CAAC,CAAC;AAAA,UAC9E;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ;AAEA,SAAK;AAAA,MACD;AAAA,QACI,YAAY,WAAW,UAAU,CAAC,UAAU;AACxC,gBAAM,EAAE,QAAQ,IAAI;AACpB,gBAAM,SAAS,KAAK,oBAAoB,gBAAgB,SAAS,KAAK,sBAAsB,GAAG,eAAe;AAE9G,cAAI,OAAO,SAAS,GAAG;AAEnB,iBAAK,uBAAuB,gCAAgC,MAAM;AAAA,UACtE;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ;AACJ;AA9wBa,0BAAN;AAAA,EAEE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GALI;;;ACHN,IAAM,qBAAN,cAAgG,MAAS;AAAA,EAS5G,YAAY,KAAc,OAAW;AACjC,QAAI,SAAS,MAAM;AACf,cAAQ,CAAC;AAAA,IACb;AACA,UAAM,oBAAoB;AAAA,MACtB,WAAW;AAAA,MACX,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,YAAY;AAAA,IAChB;AAEA,UAAM,KAAK,KAAK;AApBpB,wBAAQ;AACR,wBAAQ;AACR,wBAAQ;AAER,wBAAQ,gBAAe;AAEvB,wBAAQ;AAgBJ,QAAI,+BAAO,SAAS;AAChB,WAAK,WAAW,MAAM;AAAA,IAC1B;AAEA,QAAI,+BAAO,UAAU;AACjB,WAAK,YAAY,MAAM;AAAA,IAC3B;AAEA,QAAI,+BAAO,gBAAgB;AACvB,WAAK,kBAAkB,MAAM;AAAA,IACjC;AAEA,QAAI,+BAAO,aAAa;AACpB,WAAK,eAAe,MAAM;AAAA,IAC9B;AAEA,SAAK,YAAY;AAAA,EACrB;AAAA,EAEA,eAAe,OAA2B,WAAsC;AAC5E,SAAK,WAAW;AAChB,SAAK,kBAAkB;AACvB,SAAK,YAAY;AAAA,EACrB;AAAA,EAEA,IAAI,UAAU;AACV,WAAO,KAAK;AAAA,EAChB;AAAA,EAES,UAAU;AA3FvB;AA4FQ,UAAM,QAAQ;AACd,eAAK,iBAAL,mBAAmB;AACnB,SAAK,WAAW;AAAA,EACpB;AAAA,EAES,MAAM,OAAgB;AAC3B,UAAM,SAAS,KAAK,gBAAgB,KAAK;AACzC,QACI,OAAO,KAAK,CAAC,KAAK,cAAc,KAChC,OAAO,KAAK,KAAK,QAAQ,KAAK,cAAc,KAC5C,OAAO,KAAK,CAAC,KAAK,cAAc,KAChC,OAAO,KAAK,KAAK,SAAS,KAAK,cAAc,KAC7C,CAAC,KAAK,YAAY,MAAM,GAC1B;AACE,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EAEQ,YAAY,QAAiB;AACjC,UAAM,UAAU,KAAK;AACrB,QACI,OAAO,KAAK,UAAU,KAAK,cAAc,KACzC,OAAO,KAAK,KAAK,QAAQ,KAAK,cAAc,IAAI,WAChD,OAAO,KAAK,UAAU,KAAK,cAAc,KACzC,OAAO,KAAK,KAAK,SAAS,KAAK,cAAc,IAAI,SACnD;AACE,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACX;AAAA,EAES,OAAO,SAAiC,QAAwB;AACrE,QAAI,CAAC,KAAK,SAAS;AACf,WAAK,UAAU,KAAK;AACpB,aAAO;AAAA,IACX;AAEA,YAAQ,KAAK;AACb,SAAK,MAAM,OAAO;AAClB,YAAQ,QAAQ;AAChB,SAAK,UAAU,KAAK;AACpB,WAAO;AAAA,EACX;AAAA,EAEmB,MAAM,KAA6B;AA1I1D;AA4IQ,UAAM,QAAQ,KAAK,SAAS;AAE5B,UAAM,SAAS,MAAM,UAAU;AAE/B,UAAM,EAAE,OAAO,aAAa,QAAQ,aAAa,IAAI;AAErD,SAAK,oBAAoB;AAGzB,eAAK,iBAAL,mBAAmB;AACnB,UAAM,YAAW,UAAK,iBAAL,mBAAmB;AACpC,QAAI,YAAY,MAAM;AAClB;AAAA,IACJ;AAEA,aAAS,KAAK;AAEd,SAAK,SAAS,UAAU;AAAA,MACpB,MAAM;AAAA,MACN,KAAK;AAAA,MACL,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,MAAM;AAAA,IACV,CAAC;AAED,aAAS,aAAa,IAAI,aAAa,CAAC;AACxC,SAAK,oBAAoB,QAAQ;AACjC,SAAK,YAAY,GAAG;AACpB,aAAS,QAAQ;AAAA,EAIrB;AAAA,EAEQ,oBAAoB,UAAkC;AAC1D,QAAI,aAAa;AAEjB,QAAI,KAAK,aAAa,MAAM;AACxB,mBAAa;AAAA,IACjB;AACA,aAAS,2BAA2B;AACpC,aAAS,UAAU;AAEnB,QAAI,eAAe,cAA6B;AAC5C,YAAM,IAAI,KAAK,UAAU,UAAU;AACnC,eAAS,UAAU,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AACrD,eAAS,KAAK,GAAG,GAAG,KAAK,OAAO,KAAK,MAAM;AAC3C,eAAS,KAAK;AAAA,IAClB,OAAO;AAAA,IAGP;AAAA,EACJ;AAAA,EAEQ,cAAc;AAClB,QAAI,KAAK,mBAAmB,MAAM;AAC9B;AAAA,IACJ;AAEA,QAAI,WAAW;AACf,QAAI,UAAU;AACd,QAAI,YAAY;AAChB,QAAI,aAAa;AAEjB,UAAM,EAAE,MAAM,YAAY,GAAG,KAAK,WAAW,GAAG,OAAO,aAAa,GAAG,QAAQ,cAAc,GAAG,MAAM,IAAI,KAAK;AAE/G,QAAI,KAAK,YAAY,MAAM;AACvB,YAAM,EAAE,MAAAC,QAAO,GAAG,KAAAC,OAAM,GAAG,QAAQ,GAAG,SAAS,EAAE,IAAI,KAAK;AAC1D,iBAAWD;AACX,gBAAUC;AACV,kBAAY;AACZ,mBAAa;AAAA,IACjB;AAEA,UAAM,OAAO,YAAY;AACzB,UAAM,MAAM,WAAW;AAEvB,SAAK,iBAAiB;AAAA,MAClB;AAAA,MACA;AAAA,MACA,OAAO,YAAY,aAAa,YAAY;AAAA,MAC5C,QAAQ,WAAW,cAAc,aAAa;AAAA,MAC9C;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEQ,YAAY,KAA8B;AAC9C,QAAI,CAAC,OAAO,KAAK,gBAAgB,MAAM;AACnC;AAAA,IACJ;AACA,UAAM,WAAW,KAAK,aAAa,WAAW;AAC9C,aAAS,KAAK;AACd,QAAI,KAAK;AACT,QAAI,aAAa,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AACjC,aAAS,aAAa,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AACtC,QAAI,UAAU,KAAK,aAAa,aAAa,GAAG,GAAG,CAAC;AACpD,QAAI,QAAQ;AACZ,aAAS,QAAQ;AAAA,EACrB;AAAA,EAEQ,sBAAsB;AAC1B,QAAI,KAAK,gBAAgB,MAAM;AAC3B;AAAA,IACJ;AACA,UAAM,QAAQ,KAAK,SAAS;AAC5B,QAAI,SAAS,KAAM;AAEnB,SAAK,eAAe,IAAI,OAAO;AAC/B,UAAM,SAAS,MAAM,UAAU;AAC/B,SAAK,aAAa,QAAQ,OAAO,OAAO,OAAO,MAAM;AAErD,WAAO,mBAAmB,eAAe,MAAM;AA3PvD;AA4PY,iBAAK,iBAAL,mBAAmB,QAAQ,OAAO,OAAO,OAAO;AAChD,WAAK,UAAU,IAAI;AAAA,IACvB,CAAC;AAAA,EACL;AACJ;;;ACnOO,IAAM,yBAAN,cAAqC,WAAW;AAAA,EAGnD,YACsC,iBACO,wBACD,uBACR,wBACE,iBACM,gBAC1C;AACE,UAAM;AAP4B;AACO;AACD;AACR;AACE;AACM;AAR5C,wBAAQ,4BAA2C,oBAAI,QAAQ;AAY3D,SAAK,MAAM;AAAA,EACf;AAAA,EAEQ,QAAc;AAClB,SAAK,cAAc;AACnB,SAAK,eAAe;AACpB,SAAK,cAAc;AAAA,EACvB;AAAA,EAEQ,gBAAgB;AACpB,SAAK;AAAA,MACD,KAAK,gBAAgB,kBAAkB,CAAC,YAA0B;AAC9D,YAAI,QAAQ,OAAO,uBAAuB,IAAI;AAC1C;AAAA,QACJ;AAEA,cAAM,SAAS,QAAQ;AAEvB,YAAI,UAAU,MAAM;AAChB;AAAA,QACJ;AAEA,cAAM,EAAE,SAAS,IAAI;AAErB,cAAM,gBAAgB,KAAK,uBAAuB,iBAAiB;AAEnE,YAAI,cAAc,WAAW,GAAG;AAC5B;AAAA,QACJ;AAEA,cAAM,eAAe,cAAc,CAAC;AAEpC,cAAM,EAAE,QAAQ,WAAW,UAAU,IAAI;AAEzC,cAAM,eAAe,KAAK,sBAAsB,cAAc,MAAM;AAEpE,cAAM,QAAQ,6CAAc;AAE5B,YAAI,SAAS,MAAM;AACf,iBAAO;AAAA,QACX;AAEA,cAAM,qBAAqB,KAAK,kBAAkB,KAAK;AACvD,YAAI,sBAAsB,MAAM;AAC5B,eAAK,gBAAgB,mBAAmB,wBAAwB,IAAI,EAAE,QAAQ,KAAK,CAAC;AAAA,QACxF;AAEA,cAAM,gBAAgB,kCAAkC,EAAE,QAAQ,WAAW,UAAU,CAAC;AAExF,cAAM,aAAa,MAAM,UAAU,aAAa;AAEhD,YAAI,EAAE,sBAAsB,QAAQ;AAChC,eAAK,gBAAgB,KAAK;AAAA,YACtB;AAAA,YACA,SAAS,KAAK,eAAe,EAAE,qBAAqB;AAAA,UACxD,CAAC;AACD;AAAA,QACJ;AAEA,YAAI,cAAc,MAAM;AACpB;AAAA,QACJ;AAEA,aAAK,qBAAqB,UAAU,UAAU;AAE9C,aAAK,gBAAgB,eAAe,uBAAuB,IAAI,EAAE,QAAQ,WAAW,UAAU,CAAC;AAAA,MACnG,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,yBAAyB,MAAc,KAAa,OAAe,QAAgB,WAAmB,aAAqB;AAC/H,UAAM,WAAW,QAAQ;AACzB,UAAM,QAAQ,YAAY;AAE1B,QAAI,WAAW;AACf,QAAI,YAAY;AAEhB,QAAI,WAAW,OAAO;AAClB,iBAAW,SAAS;AAAA,IACxB,OAAO;AACH,kBAAY,QAAQ;AAAA,IACxB;AAEA,UAAM,WAAW,QAAQ,YAAY;AACrC,UAAM,UAAU,SAAS,aAAa;AAEtC,WAAO;AAAA,MACH,MAAM,YAAY,SAAS,CAAC;AAAA,MAC5B,KAAK,YAAY,QAAQ,CAAC;AAAA,MAC1B,OAAO,YAAY,SAAS,UAAU,WAAW,CAAC;AAAA,MAClD,QAAQ,YAAY,UAAU,SAAS,YAAY,CAAC;AAAA,IACxD;AAAA,EACJ;AAAA,EAEQ,qBAAqB,UAAoB,YAAmB;AAChE,UAAM,EAAE,MAAM,KAAK,OAAO,OAAO,IAAI,WAAW,8BAA8B;AAE9E,QAAI;AACJ,YAAQ,UAAU;AAAA,MACd;AAEI,qBAAa,KAAK,yBAAyB,MAAM,KAAK,OAAO,QAAQ,GAAG,CAAC;AACzE;AAAA,MACJ;AAEI,qBAAa,KAAK,yBAAyB,MAAM,KAAK,OAAO,QAAQ,IAAI,CAAC;AAC1E;AAAA,MACJ;AAEI,qBAAa,KAAK,yBAAyB,MAAM,KAAK,OAAO,QAAQ,GAAG,EAAE;AAC1E;AAAA,MACJ;AAEI,qBAAa,KAAK,yBAAyB,MAAM,KAAK,OAAO,QAAQ,GAAG,CAAC;AACzE;AAAA,MACJ;AAEI,qBAAa,KAAK,yBAAyB,MAAM,KAAK,OAAO,QAAQ,GAAG,CAAC;AACzE;AAAA,MACJ;AAEI,qBAAa,KAAK,yBAAyB,MAAM,KAAK,OAAO,QAAQ,GAAG,CAAC;AACzE;AAAA,MACJ;AAEI,qBAAa,KAAK,yBAAyB,MAAM,KAAK,OAAO,QAAQ,GAAG,CAAC;AACzE;AAAA,MACJ;AAEI,qBAAa,KAAK,yBAAyB,MAAM,KAAK,OAAO,QAAQ,GAAG,CAAC;AACzE;AAAA,MACJ;AAEI,qBAAa,KAAK,yBAAyB,MAAM,KAAK,OAAO,QAAQ,GAAG,CAAC;AACzE;AAAA,MACJ;AAAA,MACA;AACI;AAAA,IACR;AAEA,QAAI,cAAc,MAAM;AACpB;AAAA,IACJ;AAEA,eAAW,WAAW,UAAU;AAEhC,UAAM,EAAE,MAAM,UAAU,GAAG,KAAK,SAAS,GAAG,QAAQ,YAAY,GAAG,OAAO,WAAW,EAAE,IAAI;AAC3F,eAAW,6BAA6B;AAAA,MACpC,MAAM,OAAO;AAAA,MACb,KAAK,MAAM;AAAA,MACX,OAAO,QAAQ,WAAW;AAAA,MAC1B,QAAQ,SAAS,YAAY;AAAA,IACjC,CAAC;AAAA,EACL;AAAA,EAEQ,gBAAgB;AACpB,SAAK;AAAA,MACD,KAAK,gBAAgB,kBAAkB,CAAC,YAA0B;AAC9D,YAAI,QAAQ,OAAO,uBAAuB,IAAI;AAC1C;AAAA,QACJ;AAEA,cAAM,SAAS,QAAQ;AAEvB,YAAI,UAAU,MAAM;AAChB;AAAA,QACJ;AAEA,cAAM,EAAE,QAAQ,WAAW,UAAU,IAAI;AAEzC,cAAM,eAAe,KAAK,sBAAsB,cAAc,MAAM;AAEpE,cAAM,QAAQ,6CAAc;AAE5B,YAAI,SAAS,MAAM;AACf,iBAAO;AAAA,QACX;AAEA,YAAI,CAAC,KAAK,yBAAyB,IAAI,KAAK,GAAG;AAC3C,eAAK,oBAAoB,KAAK;AAC9B,eAAK,yBAAyB,IAAI,KAAK;AAAA,QAC3C;AAEA,cAAM,YAAY,KAAK,uBAAuB,kBAAkB,EAAE,QAAQ,WAAW,UAAU,CAAC;AAEhG,YAAI,aAAa,MAAM;AACnB;AAAA,QACJ;AAEA,cAAM,gBAAgB,kCAAkC,EAAE,QAAQ,WAAW,UAAU,CAAC;AAExF,cAAM,aAAa,MAAM,UAAU,aAAa;AAEhD,YAAI,cAAc,MAAM;AACpB;AAAA,QACJ;AAEA,YAAI,EAAE,sBAAsB,QAAQ;AAChC,eAAK,gBAAgB,KAAK;AAAA,YACtB;AAAA,YACA,SAAS,KAAK,eAAe,EAAE,qBAAqB;AAAA,UACxD,CAAC;AACD;AAAA,QACJ;AACA,cAAM,cAAc,MAAM,eAAe;AAEzC,mDAAa;AAEb,cAAM,qBAAqB,IAAI,mBAAmB,GAAG,aAAa,SAAS;AAAA,UACvE,SAAS,WAAW;AAAA,UACpB,UAAU,WAAW;AAAA,UACrB,gBAAgB,WAAW,8BAA8B;AAAA,QAC7D,CAAC;AAED,cAAM,UAAU,oBAAoB,WAAW,cAAc,IAAI,CAAC,EAAE,oBAAoB,kBAAkB;AAC1G,mDAAa,uBAAuB;AACpC,aAAK,wBAAwB,kBAAkB;AAE/C,mBAAW,oBAAoB;AAC/B,mDAAa;AACb,2BAAmB,UAAU,IAAI;AAEjC,aAAK,gBAAgB,mBAAmB,4BAA4B,IAAI,CAAC,EAAE,QAAQ,WAAW,UAAU,CAAC,CAAC;AAAA,MAC9G,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,kBAAkB,OAAc;AACpC,UAAM,UAAU,MAAM,qBAAqB;AAE3C,eAAW,UAAU,SAAS;AAC1B,UAAI,kBAAkB,oBAAoB;AACtC,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,iBAAiB;AACrB,SAAK;AAAA,MACD,KAAK,gBAAgB,kBAAkB,CAAC,YAA0B;AAC9D,YAAI,QAAQ,OAAO,wBAAwB,IAAI;AAC3C;AAAA,QACJ;AAEA,cAAM,cAAc,KAAK,uBAAuB,eAAe;AAE/D,YAAI,eAAe,MAAM;AACrB;AAAA,QACJ;AAEA,cAAM,SAAS,YAAY,UAAU;AACrC,cAAM,eAAe,KAAK,sBAAsB,cAAc,MAAM;AAEpE,cAAM,QAAQ,6CAAc;AAE5B,YAAI,SAAS,MAAM;AACf,iBAAO;AAAA,QACX;AAEA,cAAM,qBAAqB,KAAK,kBAAkB,KAAK;AACvD,YAAI,sBAAsB,MAAM;AAC5B;AAAA,QACJ;AACA,cAAM,aAAa,KAAK,4BAA4B,kBAAkB;AACtE,YAAI,cAAc,MAAM;AACpB;AAAA,QACJ;AAEA,cAAM,cAAc,MAAM,uBAAuB;AACjD,oBAAY,WAAW,kBAAkB;AACzC,oBAAY,mBAAmB;AAE/B,cAAM,UAAU,KAAK,4BAA4B,YAAY,kBAAkB;AAE/E,cAAM,eAAe,KAAK,uBAAuB,eAAe,WAAW,IAAI;AAC/E,YAAI,gBAAgB,MAAM;AACtB,gBAAM,EAAE,MAAM,KAAK,QAAQ,MAAM,IAAI;AACrC,eAAK,uBAAuB,gCAAgC,CAAC;AAAA,YACzD,GAAG;AAAA,YACH,WAAW;AAAA,cACP,GAAG,aAAa;AAAA,cAChB;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACJ;AAAA,YACA,SAAS,QAAQ;AAAA,UACrB,CAAC,CAAiB;AAAA,QACtB;AACA,mBAAW,WAAW,EAAE,GAAG,QAAQ,aAAa,CAAC;AACjD,mBAAW,qBAAqB;AAEhC,mBAAW,UAAU,IAAI;AAEzB,iEAAoB;AAAA,MACxB,CAAC;AAAA,IACL;AAEA,UAAM,aAAa,KAAK,uBACnB,sBAAgC,EAAmB,YAAY,EAC/D;AAAA,MACG,UAAU,CAAC,aAAa,WAAW,SAAS,eAAe,GAAG,IAAI,CAAC;AAAA,IACvE;AAEJ,SAAK,cAAc,WAAW,UAAU,MAAM;AAC1C,WAAK,gBAAgB,mBAAmB,wBAAwB,EAAE;AAAA,IACtE,CAAC,CAAC;AAAA,EACN;AAAA,EAEQ,4BAA4B,YAAiD;AACjF,UAAM,WAAW,WAAW;AAC5B,UAAM,YAAY,SAAS,MAAM,GAAG,SAAS,SAAS,CAAC;AACvD,UAAM,QAAQ,WAAW,SAAS;AAClC,QAAI,CAAC,MAAO,QAAO;AACnB,UAAM,cAAc,MAAM,UAAU,SAAS;AAC7C,QAAI,eAAe,MAAM;AACrB,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACX;AAAA,EAEQ,oBAAoB,OAAc;AACtC,UAAM,cAAc,MAAM,uBAAuB;AAEjD,QAAI,iBAA4C;AAChD,SAAK;AAAA,MACD,YAAY,aAAa,UAAU,CAAC,UAAU;AAC1C,cAAM,EAAE,QAAQ,IAAI;AACpB,cAAM,aAAa,QAAQ,OAAO,EAAE,KAAK,EAAE;AAC3C,YAAI,cAAc,QAAQ,EAAE,sBAAsB,qBAAqB;AACnE;AAAA,QACJ;AAEA,cAAM,EAAE,MAAM,KAAK,QAAQ,OAAO,MAAM,IAAI;AAE5C,yBAAiB,EAAE,MAAM,KAAK,QAAQ,OAAO,MAAM;AAEnD,oBAAY,mBAAmB;AAAA,MACnC,CAAC;AAAA,IACL;AAEA,SAAK;AAAA,MACD,YAAY,WAAW,UAAU,CAAC,UAAU;AACxC,cAAM,EAAE,QAAQ,IAAI;AACpB,cAAM,aAAa,QAAQ,OAAO,EAAE,KAAK,EAAE;AAC3C,YAAI,cAAc,QAAQ,EAAE,sBAAsB,qBAAqB;AACnE;AAAA,QACJ;AAEA,cAAM,EAAE,MAAM,KAAK,QAAQ,OAAO,MAAM,IAAI;AAE5C,YAAI,CAAC,YAAY,EAAE,MAAM,KAAK,QAAQ,OAAO,MAAM,GAAG,cAAc,GAAG;AACnE;AAAA,QACJ;AAEA,cAAM,cAAc,KAAK,4BAA4B,UAAU;AAE/D,YAAI,eAAe,MAAM;AACrB;AAAA,QACJ;AAEA,cAAM,UAAU,KAAK,4BAA4B,aAAa,UAAU;AAExE,mBAAW,eAAe,QAAQ,SAAS,YAAY,SAAS,CAAC;AAOjE,oBAAY,uBAAuB,UAAU;AAAA,MACjD,CAAC;AAAA,IACL;AACA,SAAK,iBAAiB,KAAK;AAAA,EAC/B;AAAA,EAEQ,wBAAwB,GAAuB;AACnD,SAAK;AAAA,MACD,EAAE,gBAAgB,eAAe,MAAM;AACnC,UAAE;AAAA,MACN,CAAC;AAAA,IACL;AAEA,SAAK;AAAA,MACD,EAAE,gBAAgB,eAAe,MAAM;AACnC,UAAE;AAAA,MACN,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,iBAAiB,OAAc;AACnC,UAAM,cAAc,MAAM,uBAAuB;AAEjD,SAAK;AAAA,MACD,YAAY,cAAc,UAAU,CAAC,eAAe;AAChD,YAAI,eAAe,MAAM;AACrB,eAAK,gBAAgB,mBAAmB,wBAAwB,EAAE;AAAA,QACtE;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,4BAA4B,aAAyB,oBAAwC;AACjG,UAAM,EAAE,MAAM,KAAK,QAAQ,OAAO,aAAa,OAAO,YAAY,IAAI;AAEtE,UAAM,EAAE,MAAM,WAAW,KAAK,UAAU,OAAO,YAAY,QAAQ,aAAa,OAAO,YAAY,aAAa,iBAAiB,IAAI;AAErI,UAAM,UAAU,OAAO;AACvB,UAAM,SAAS,MAAM;AAErB,UAAM,UAAU;AAAA,MACZ,MAAM;AAAA,MACN,KAAK;AAAA,MACL,OAAO,aAAa,UAAU;AAAA,MAC9B,QAAQ,cAAc,SAAS;AAAA,IACnC;AAEA,UAAM,eAAe,EAAE,GAAG,QAAQ;AAGlC,QAAI,eAAe,GAAG;AAIlB,YAAM,KAAK,OAAO,QAAQ;AAC1B,YAAM,KAAK,MAAM,SAAS;AAC1B,YAAM,cAAc,IAAI,QAAQ,IAAI,EAAE;AAEtC,YAAM,QAAQ,aAAa,IAAI;AAC/B,YAAM,QAAQ,cAAc,IAAI;AAChC,YAAM,iBAAiB,IAAI,QAAQ,OAAO,KAAK;AAE/C,YAAM,cAAc,IAAI,QAAQ,WAAW,QAAQ;AACnD,kBAAY,cAAc,SAAS,UAAU,GAAG,cAAc;AAE9D,YAAM,kBAAkB,YAAY,MAAM;AAC1C,sBAAgB,cAAc,SAAS,CAAC,UAAU,GAAG,WAAW;AAEhE,YAAM,eAAe,OAAO,gBAAgB;AAC5C,YAAM,cAAc,MAAM,gBAAgB;AAE1C,mBAAa,OAAO;AACpB,mBAAa,MAAM;AACnB,mBAAa,QAAQ,aAAa,eAAe;AACjD,mBAAa,SAAS,cAAc,cAAc;AAAA,IACtD;AAEA,WAAO;AAAA,MACH;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AACJ;AAlda,yBAAN;AAAA,EAIE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,0BAAO,aAAa;AAAA,GAThB;;;ACMN,IAAM,wBAAN,cAAoC,WAAW;AAAA,EAClD,YACsC,iBACM,uBACC,wBACR,gBACC,iBACO,uBACM,uBACjD;AACE,UAAM;AAR4B;AACM;AACC;AACR;AACC;AACO;AACM;AAI/C,SAAK,YAAY;AAAA,EACrB;AAAA,EAES,UAAgB;AACrB,UAAM,QAAQ;AAAA,EAClB;AAAA,EAEQ,cAAc;AAClB,SAAK,oBAAoB;AAEzB,SAAK,yBAAyB;AAE9B,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EAEQ,2BAA2B;AAC/B,SAAK;AAAA,MACD,KAAK,gBAAgB,kBAAkB,CAAC,YAA0B;AAC9D,YAAI,QAAQ,OAAO,wBAAwB,IAAI;AAC3C,gBAAM,SAAS,QAAQ;AACvB,cAAI,UAAU,MAAM;AAChB;AAAA,UACJ;AACA,eAAK,gBAAgB,MAAM;AAAA,QAC/B;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,uCAAuC,QAA0B;AACrE,QAAI,UAAU,MAAM;AAChB;AAAA,IACJ;AAEA,UAAM,eAAe,KAAK,sBAAsB,cAAc,MAAM;AAEpE,UAAM,QAAQ,6CAAc;AAE5B,QAAI,SAAS,MAAM;AACf,aAAO;AAAA,IACX;AAEA,UAAM,cAAc,MAAM,uBAAuB;AAEjD,WAAO,EAAE,OAAO,YAAY;AAAA,EAChC;AAAA,EAEQ,gBAAgB,QAA0B;AAC9C,UAAM,eAA6B,CAAC;AACpC,UAAM,YAAqB,CAAC;AAE5B,WAAO,QAAQ,CAAC,UAAU;AACtB,YAAM,EAAE,QAAQ,WAAW,UAAU,IAAI;AAEzC,YAAM,eAAe,KAAK,uCAAuC,MAAM;AAEvE,UAAI,gBAAgB,MAAM;AACtB;AAAA,MACJ;AACA,YAAM,EAAE,MAAM,IAAI;AAElB,YAAM,gBAAgB,kCAAkC,EAAE,QAAQ,WAAW,UAAU,CAAC;AAExF,YAAM,aAAa,MAAM,UAAU,aAAa;AAEhD,UAAI,cAAc,MAAM;AACpB,eAAO;AAAA,MACX;AAEA,YAAM,YAAY,KAAK,uBAAuB,kBAAkB,KAAK;AAErE,UAAI,aAAa,MAAM;AACnB,eAAO;AAAA,MACX;AAEA,UAAI,UAAU,uCAA+C;AACzD;AAAA,MACJ;AAEA,MAAC,WAAqB,UAAU;AAEhC,YAAM,EAAE,OAAO,OAAO,IAAK,WAAqB,cAAc;AAE9D,UAAI,UAAU,SAAS,KAAK,MAAM,OAAO;AACrC,kBAAU,KAAK,KAAK;AAAA,MACxB;AAEA,mBAAa,KAAK;AAAA,QACd,GAAG;AAAA,QACH,WAAW;AAAA,UACP,GAAG,UAAU;AAAA,UACb;AAAA,UACA;AAAA,UACA,OAAO;AAAA,QACX;AAAA,QACA,SAAS;AAAA,QACT,UAAU;AAAA,MACd,CAAe;AAAA,IACnB,CAAC;AAED,SAAK,uBAAuB,gCAAgC,YAAY;AAExE,cAAU,QAAQ,CAAC,UAAU;AACzB,YAAM,cAAc,MAAM,uBAAuB;AACjD,kBAAY,gBAAgB,EAAE,mBAAmB;AAAA,IACrD,CAAC;AAED,SAAK,gBAAgB,mBAAmB,4BAA4B,IAAI,MAAM;AAAA,EAClF;AAAA,EAEQ,sBAAsB;AAC1B,SAAK;AAAA,MACD,KAAK,uBAAuB,KAAK,UAAU,CAAC,WAAW;AACnD,aAAK,cAAc,MAAM;AAAA,MAC7B,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,cAAc,QAA0B;AAC5C,IAAC,OAAQ,QAAQ,OAAO,UAAU;AAtK1C;AAuKY,YAAM,EAAE,QAAQ,UAAU,IAAI;AAC9B,YAAM,eAAe,KAAK,uCAAuC,MAAM;AACvE,YAAM,oBAAmB,wBAAmB,KAAK,uBAAuB,MAAM,MAArD,mBAAwD;AAEjF,UAAI,gBAAgB,QAAQ,qBAAqB,WAAW;AACxD;AAAA,MACJ;AAEA,YAAM,aAAa,KAAK,uBAAuB,kBAAkB,KAAK;AACtE,UAAI,cAAc,MAAM;AACpB;AAAA,MACJ;AAEA,YAAM,SAAS,MAAM,KAAK,sBAAsB,aAAa,YAAY,aAAa,KAAK;AAE3F,UAAI,UAAU,QAAQ,OAAO,WAAW,GAAG;AACvC;AAAA,MACJ;AAEA,iBAAW,SAAS,QAAQ;AACxB,aAAK,kBAAkB,KAAK;AAC5B,aAAK,mBAAmB,KAAK;AAAA,MACjC;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEQ,uBAAuB;AAC3B,SAAK;AAAA,MACD,KAAK,uBAAuB,QAAQ,UAAU,CAAC,WAAW;AACtD,QAAC,OAAQ,QAAQ,CAAC,UAAU;AACxB,gBAAM,EAAE,QAAQ,WAAW,UAAU,IAAI;AAEzC,gBAAM,eAAe,KAAK,uBAAuB,kBAAkB,KAAK;AAExE,cAAI,gBAAgB,MAAM;AACtB;AAAA,UACJ;AAEA,gBAAM,EAAE,WAAW,aAAa,SAAS,UAAU,QAAQ,gBAAgB,IAAI;AAE/E,cAAI,uCAA+C;AAC/C;AAAA,UACJ;AAEA,gBAAM,eAAe,KAAK,uCAAuC,MAAM;AAEvE,cAAI,gBAAgB,MAAM;AACtB;AAAA,UACJ;AACA,gBAAM,EAAE,OAAO,YAAY,IAAI;AAE/B,cAAI,aAAa,MAAM;AACnB,mBAAO;AAAA,UACX;AAEA,gBAAM,kBAAkB,kCAAkC,EAAE,QAAQ,WAAW,UAAU,CAAC;AAE1F,gBAAM,aAAa,MAAM,UAAU,eAAe;AAElD,cAAI,cAAc,MAAM;AACpB,mBAAO;AAAA,UACX;AAEA,qBAAW,WAAW,OAAO;AAC7B,qBAAW,YAAY,QAAQ;AAC/B,cAAI,UAAU,QAAQ,OAAO,SAAS,MAAM,6CAA8C,sCAA0C;AAChI,uBAAW,aAAa,MAAM;AAAA,UAClC;AAAA,QACJ,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,kBAAkB,GAAU;AAChC,SAAK;AAAA,MACD;AAAA,QACI,EAAE,gBAAgB,eAAe,MAAM;AACnC,YAAE;AAAA,QACN,CAAC;AAAA,MACL;AAAA,IACJ;AAEA,SAAK;AAAA,MACD;AAAA,QACI,EAAE,gBAAgB,eAAe,MAAM;AACnC,YAAE;AAAA,QACN,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,mBAAmB,GAAU;AACjC,SAAK;AAAA,MACD;AAAA,QACI,EAAE,YAAY,eAAe,MAAM;AAC/B,gBAAM,WAAW,GAAG,EAAE,IAAI;AAC1B,eAAK,sBAAsB,aAAa,UAAU,EAAE,UAAU,EAAG,KAAK,EAAE,cAAc,EAAE,OAAO,EAAE,cAAc,EAAE,MAAM;AAAA,QAC3H,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ;AACJ;AAzOa,wBAAN;AAAA,EAEE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,0BAAO,oBAAoB;AAAA,GARvB;;;ACTb,IAAM,cAAc;AAEb,IAAM,wBAAN,cAAoC,OAAO;AAAA,EAG9C,YACqB,UAA2CC,sBAChC,WACK,gBACnC;AACE,UAAM;AAJW;AACW;AACK;AAKjC,UAAM,EAAE,MAAM,GAAG,KAAK,IAAI;AAAA,MACtB,CAAC;AAAA,MACDA;AAAA,MACA,KAAK;AAAA,IACT;AACA,QAAI,MAAM;AACN,WAAK,eAAe,UAAU,QAAQ,MAAM,EAAE,OAAO,KAAK,CAAC;AAAA,IAC/D;AACA,SAAK,eAAe,UAAU,8BAA8B,IAAI;AAAA,EACpE;AAAA,EAES,aAAmB;AACxB,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EAES,aAAmB;AACxB,SAAK,UAAU,IAAI,uBAAuB;AAC1C,SAAK,UAAU,IAAI,mBAAmB;AACtC,SAAK,UAAU,IAAI,sBAAsB;AACzC,SAAK,UAAU,IAAI,qBAAqB;AAAA,EAC5C;AAAA,EAEQ,oBAA0B;AAC9B,UAAM,eAA6B;AAAA,MAC/B,CAAC,oBAAoB;AAAA,MACrB,CAAC,uBAAuB;AAAA,MACxB,CAAC,mBAAmB;AAAA,MACpB,CAAC,sBAAsB;AAAA,MACvB,CAAC,qBAAqB;AAAA,IAC1B;AAEA,iBAAa,QAAQ,CAAC,eAAe,KAAK,UAAU,IAAI,UAAU,CAAC;AAAA,EACvE;AACJ;AA3CI,cADS,uBACO,cAAa;AADpB,wBAAN;AAAA,EAKE,0BAAO,QAAQ;AAAA,EACf;AAAA,GANI;;;ACZN,IAAM,mCAAmC;AAEzC,IAAMC,gBAAe,OAAO,gCAAgC;AAK5D,IAAMC,uBAAkD,CAAC;;;ACFzD,IAAK,yBAAL,kBAAKC,4BAAL;AAIH,EAAAA,wBAAA,cAAW;AAKX,EAAAA,wBAAA,UAAO;AAKP,EAAAA,wBAAA,UAAO;AAdC,SAAAA;AAAA,GAAA;AAmDL,IAAM,sBAAN,cAAkC,mBAAkC;AAAC;AAIrE,IAAM,uBAAuB,iBAAuC,sCAAsC;;;ACzC1G,IAAM,0BAAqE;AAAA,EAC9E,IAAI;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,UAAU,WAAW;AAC3B,UAAM,wBAAwB,SAAS,IAAI,sBAAsB;AACjE,UAAM,sBAAsB,SAAS,IAAI,oBAAoB;AAE7D,UAAM,EAAE,IAAI,QAAQ,WAAW,MAAM,QAAQ,IAAI;AAEjD,0BAAsB,WAAW,QAAQ,WAAW,EAAE;AACtD,wBAAoB,WAAW,QAAQ,WAAW,EAAE;AAEpD,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,8BAAsB,gBAAgB,OAA2B;AACjE,4BAAoB,gBAAgB,OAA2B;AAC/D;AAAA,MACJ,KAAK;AACD,8BAAsB,mBAAmB,OAA2B;AACpE,4BAAoB,mBAAmB,OAA2B;AAClE;AAAA,MACJ,KAAK;AACD,8BAAsB,mBAAmB,OAA2B;AACpE,4BAAoB,mBAAmB,OAA2B;AAClE;AAAA,MACJ,KAAK;AACD,8BAAsB,kBAAkB,OAAgC;AACxE,4BAAoB,kBAAkB,OAAgC;AACtE;AAAA,MACJ,KAAK;AACD,8BAAsB,wBAAwB,OAAqC;AACnF;AAAA,MACJ,KAAK;AACD,8BAAsB,0BAA0B,OAAqC;AACrF;AAAA,IACR;AAEA,WAAO;AAAA,EACX;AACJ;;;ACnDO,IAAM,uBAAuB;AAE7B,IAAM,8BAAN,cAA0C,WAAW;AAAA,EACxD,YACsC,iBACK,sBACE,wBACR,yBACnC;AACE,UAAM;AAL4B;AACK;AACE;AACR;AAIjC,SAAK,cAAc;AAEnB,SAAK,cAAc,KAAK,gBAAgB,gBAAgB,uBAAuB,CAAC;AAAA,EACpF;AAAA,EAEQ,gBAAgB;AACpB,UAAM,SAAS,CAAC,QAAgB,UAA8C;AAC1E,YAAMC,OAAM,SAAS,KAAK,qBAAqB,sBAAsB,MAAM;AAC3E,UAAIA,MAAK;AACL,eAAO,KAAK,UAAUA,IAAG;AAAA,MAC7B;AAEA,aAAO;AAAA,IACX;AAEA,UAAM,YAAY,CAAC,SAAoD;AACnE,UAAI,CAAC,MAAM;AACP,eAAO,CAAC;AAAA,MACZ;AAEA,UAAI;AACA,eAAO,KAAK,MAAM,IAAI;AAAA,MAC1B,QAAQ;AACJ,eAAO,CAAC;AAAA,MACZ;AAAA,IACJ;AAEA,SAAK;AAAA,MACD,KAAK,wBAAwB,uBAA0D;AAAA,QACnF,YAAY;AAAA,QACZ,YAAY,CAAC,EAAmB,YAAY;AAAA,QAC5C,QAAQ,CAAC,QAAQ,UAAU,OAAO,QAAQ,KAAK;AAAA,QAC/C,WAAW,CAAC,SAAS,UAAU,IAAI;AAAA,QACnC,UAAU,CAAC,WAAW;AAClB,eAAK,qBAAqB,yBAAyB,MAAM;AACzD,eAAK,uBAAuB,yBAAyB,MAAM;AAAA,QAC/D;AAAA,QACA,QAAQ,CAAC,QAAQ,UAAU;AACvB,eAAK,qBAAqB,oBAAoB,QAAQ,KAAK;AAC3D,eAAK,uBAAuB,oBAAoB,QAAQ,KAAK;AAAA,QACjE;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AACJ;AArDa,8BAAN;AAAA,EAEE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GALI;;;ACAN,IAAM,4BAAN,cAAwC,OAAO;AAAA,EAIlD,YACqB,UAA+CC,sBAC5B,WACH,gBACnC;AACE,UAAM;AAJW;AACmB;AACH;AAKjC,UAAM,EAAE,GAAG,KAAK,IAAI;AAAA,MAChB,CAAC;AAAA,MACDA;AAAA,MACA,KAAK;AAAA,IACT;AACA,SAAK,eAAe,UAAU,kCAAkC,IAAI;AAAA,EACxE;AAAA,EAES,aAAmB;AACxB,IAAC;AAAA,MACG,CAAC,2BAA2B;AAAA,MAC5B,CAAC,sBAAsB,EAAE,UAAU,oBAAoB,CAAC;AAAA,IAC5D,EAAmB,QAAQ,CAAC,eAAe,KAAK,UAAU,IAAI,UAAU,CAAC;AAEzE,SAAK,UAAU,IAAI,2BAA2B;AAAA,EAClD;AACJ;AA3BI,cADS,2BACO,cAAa;AAC7B,cAFS,2BAEO,QAAO,EAAmB;AAFjC,4BAAN;AAAA,EADN,YAAY,mBAAmB;AAAA,EAOvB,0BAAO,QAAQ;AAAA,EACf;AAAA,GAPI;;;ACNN,IAAM,sCAAsC;AAE5C,IAAMC,gBAAe,OAAO,mCAAmC;AAO/D,IAAMC,uBAAoD,CAAC;;;ACR3D,IAAM,wCAA6D;AAAA,EACtE,IAAI;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,UAAU,WAAW;AAC3B,UAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAE/D,WAAO,QAAQ,CAAC,WAAW;AA1BnC;AA2BY,uCAAqB,cAAc,MAAM,MAAzC,mBAA4C,MAAM,qBAAlD,mBAAoE;AAAA,IACxE,CAAC;AAED,WAAO;AAAA,EACX;AACJ;;;ACAO,IAAM,4BAAsC;AAAA,EAC/C,IAAI;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,UAAqB,WAAyC;AAnC5E;AAoCQ,UAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,UAAM,kBAAkB,SAAS,IAAI,gBAAgB;AACrD,UAAM,0BAA0B,SAAS,IAAI,uBAAuB;AAEpE,UAAM,sBAAsB,SAAS,IAAI,oBAAoB;AAE7D,QAAI,CAAC,OAAQ,QAAO;AAEpB,UAAM,EAAE,SAAS,IAAI;AAErB,UAAM,UAAoB,CAAC;AAE3B,aAAS,QAAQ,CAAC,UAAU;AACxB,YAAM,EAAE,QAAAC,QAAO,IAAI;AACnB,cAAQ,KAAKA,OAAM;AAAA,IACvB,CAAC;AAED,UAAM,SAAS,oBAAoB,iBAAiB,QAAQ;AAE5D,UAAM,EAAE,QAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI;AAEnD,UAAM,cAAc,wBAAwB,iBAAiB,EAAE,IAAI,0BAA0B,IAAI,OAAO,CAAC;AAGzG,UAAM,iBAAiB,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,QAAQ,WAAW,IAAI,MAAM,SAAS,qBAA8B,EAAE;AACzI,UAAM,qBAAqB,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,QAAQ,WAAW,IAAI,MAAM,SAAS,qBAA8B,EAAE;AAE7I,UAAM,SAAS,gBAAgB,CAAC,IAAI,iBAAY,aAAZ,YAAwB,CAAC,GAAI,gBAAgB,GAAG,YAAY,KAAK,GAAG,cAAc;AAEtH,QAAI,QAAQ;AACR,sBAAgB,aAAa;AAAA,QACzB,QAAQ;AAAA,QACR,eAAe;AAAA,UACX,IAAI,iBAAY,aAAZ,YAAwB,CAAC;AAAA,UAC7B;AAAA,UACA,GAAG,YAAY;AAAA,UACf,EAAE,IAAI,sCAAsC,IAAI,QAAQ,QAAQ;AAAA,QACpE;AAAA,QACA,eAAe;AAAA,UACX,IAAI,iBAAY,aAAZ,YAAwB,CAAC;AAAA,UAC7B;AAAA,UACA,GAAG,YAAY;AAAA,UACf,EAAE,IAAI,sCAAsC,IAAI,QAAQ,QAAQ;AAAA,QACpE;AAAA,MACJ,CAAC;AAED,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACX;AACJ;;;ACvEO,IAAM,gCAAgC;;;ACWtC,IAAM,+BAAyC;AAAA,EAClD,IAAI;AAAA,EACJ;AAAA,EACA,SAAS,OAAO,UAAqB,WAAsC;AACvE,UAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,UAAM,gBAAgB,SAAS,IAAI,aAAa;AAChD,UAAM,wBAAwB,SAAS,IAAI,sBAAsB;AAEjE,UAAM,iBAAiB,SAAS,IAAI,eAAe;AAEnD,UAAM,SAAS,sBAAsB,qBAAqB;AAC1D,QAAI,CAAC,OAAQ,QAAO;AAEpB,YAAQ,OAAO,OAAO;AAAA,MAClB,KAAK;AACD,uBAAe,KAAK;AAAA,UAChB,QAAQ,EAAE,OAAO,cAAc,EAAE,wBAAwB,EAAE;AAAA,UAC3D,UAAU,EAAE,OAAO,8BAA8B;AAAA,UACjD,SAAS,MAAM;AACX,2BAAe,mBAAmB,4BAA4B,IAAI,CAAC,CAAC;AAAA,UACxE;AAAA,UACA,OAAO;AAAA,QACX,CAAC;AACD;AAAA,MACJ,KAAK;AAAA,MACL;AACI,uBAAe,MAAM;AACrB;AAAA,IACR;AACA,WAAO;AAAA,EACX;AACJ;;;AClCO,IAAM,4BAAwD;AAAA,EACjE,IAAI;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,UAAqB,WAA4B;AAEvD,UAAM,iBAAiB,SAAS,IAAI,eAAe;AAEnD,QAAI,UAAU,MAAM;AAChB,aAAO;AAAA,IACX;AAEA,mBAAe,mBAAmB,4BAA4B,IAAI,CAAC,MAAM,CAAC;AAC1E,mBAAe,eAAe,6BAA6B,IAAI,EAAE,OAAO,OAAO,CAAC;AAChF,WAAO;AAAA,EACX;AACJ;;;ACpBA,IAAAC,gBAAiC;;;ACnBjC,IAAOC,wBAAQ;AAAA,EACb,iBAAiB;AAAA,EACjB,qBAAqB;AAAA,EACrB,8BAA8B;AAAA,EAC9B,yBAAyB;AAAA,EACzB,yBAAyB;AAC3B;;;ADmCY,IAAAC,sBAAA;AAlBL,IAAM,gBAAgB,MAAM;AAC/B,QAAM,iBAAiB,cAAc,eAAe;AACpD,QAAM,gBAAgB,cAAc,aAAa;AAEjD,QAAM,CAAC,QAAQ,SAAS,IAAI,cAAAC,QAAM,SAAS,CAAC;AAE5C,+BAAU,MAAM;AACZ,UAAM,MAAM,eAAe,QAAQ,UAAU,CAAC,UAAU;AACpD,gBAAU,KAAK;AAAA,IACnB,CAAC;AAED,WAAO,MAAM;AACT,UAAI,YAAY;AAAA,IACpB;AAAA,EACJ,GAAG,CAAC,cAAc,CAAC;AAEnB,SACI,6CAAC,SAAI,OAAO,EAAE,SAAS,SAAS,IAAI,UAAU,OAAO,GAAG,WAAWC,sBAAO,eACtE,wDAAC,SAAI,WAAWA,sBAAO,mBACnB;AAAA,iDAAC,SAAI,WAAWA,sBAAO,4BAA4B;AAAA,IACnD,6CAAC,SAAI,WAAWA,sBAAO,uBAAwB,aAAG,cAAc,EAAE,uBAAuB,CAAC,KAAK,MAAM,IAAI;AAAA,KAC7G,GACJ;AAER;;;AEhBO,IAAM,6BAAN,cAAyC,aAAa;AAAA,EAGzD,YAC8B,WACe,wBACc,0BACf,uBACC,wBACP,iBACQ,iBACR,iBACpC;AACE,UAAM;AAToB;AACe;AACc;AACf;AACC;AACP;AACQ;AACR;AAVtC,wBAAQ,uBAAsB,oBAAI,IAAY;AAc1C,SAAK,MAAM;AAAA,EACf;AAAA,EAEQ,QAAc;AAClB,SAAK,uBAAuB,sBAAgC,EAAmB,YAAY,EAAE,KAAK,UAAU,KAAK,QAAQ,CAAC,EAAE,UAAU,CAAC,aAAa,KAAK,QAAQ,QAAQ,CAAC;AAC1K,SAAK,uBAAuB,uBAAiC,EAAmB,YAAY,EAAE,KAAK,UAAU,KAAK,QAAQ,CAAC,EAAE,UAAU,CAAC,aAAa,KAAK,SAAS,QAAQ,CAAC;AAC5K,SAAK,uBAAuB,mBAA6B,EAAmB,YAAY,EAAE,QAAQ,CAAC,aAAa,KAAK,QAAQ,QAAQ,CAAC;AAEtI,SAAK,gBAAgB,2CAAyC,MAAM,gBAAgB,eAAe,KAAK,SAAS,CAAC;AAAA,EACtH;AAAA,EAEQ,SAAS,UAAoB;AACjC,UAAM,SAAS,SAAS,UAAU;AAClC,SAAK,sBAAsB,aAAa,MAAM;AAAA,EAClD;AAAA,EAEQ,QAAQ,UAA8B;AAC1C,QAAI,CAAC,UAAU;AACX;AAAA,IACJ;AAEA,UAAM,SAAS,SAAS,UAAU;AAClC,QAAI,KAAK,sBAAsB,IAAI,MAAM,KAAK,CAAC,KAAK,oBAAoB,IAAI,MAAM,GAAG;AACjF,WAAK,mBAAmB,MAAM;AAC9B,WAAK,oBAAoB,IAAI,MAAM;AAAA,IACvC;AAAA,EACJ;AAAA,EAEQ,eAAe,OAAc;AACjC,UAAM,UAAU,MAAM,qBAAqB;AAE3C,eAAW,UAAU,SAAS;AAC1B,UAAI,kBAAkB,oBAAoB;AACtC,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEQ,mBAAmB,QAAgB;AAtF/C;AAuFQ,UAAM,SAAQ,UAAK,sBAAsB,cAAc,MAAM,MAA/C,mBAAkD;AAChE,QAAI,CAAC,OAAO;AACR;AAAA,IACJ;AACA,UAAM,cAAc,MAAM,uBAAuB;AACjD,QAAI,CAAC,aAAa;AACd;AAAA,IACJ;AACA,QAAI;AACJ,SAAK;AAAA,MACD;AAAA,QACI,YAAY,eAAe,UAAU,MAAM;AACvC,eAAK,gBAAgB,gBAAgB,0BAA0B,IAAI;AAEnE,cAAI,KAAK,eAAe,KAAK,GAAG;AAC5B;AAAA,UACJ;AAEA,gBAAM,kBAAkB,YAAY,qBAAqB;AACzD,cAAI,gBAAgB,OAAO,GAAG;AAC1B,6EAAwB;AACxB;AAAA,UACJ;AAEA,gBAAM,SAAS,gBAAgB,OAAO,EAAE,KAAK,EAAE;AAC/C,cAAI,CAAC,QAAQ;AACT;AAAA,UACJ;AAEA,gBAAM,OAAO,OAAO;AACpB,gBAAM,eAAe,KAAK,uBAAuB,eAAe,IAAI;AACpE,cAAI,CAAC,cAAc;AACf;AAAA,UACJ;AAEA,gBAAM,EAAE,QAAAC,SAAQ,WAAW,WAAW,YAAY,IAAI;AAEtD,gBAAM,OAAQ,aAAgC;AAC9C,cAAI,QAAQ,KAAK,cAAc;AAC3B;AAAA,UACJ;AAEA,2EAAwB;AACxB,gBAAM,QAAQ,KAAK,yBAAyB,eAAeA,SAAQ,WAAW,WAAW,WAAW;AACpG,mCAAyB,KAAK,cAAc,KAAK,yBAAyB,oBAAoB,QAAQ;AAAA,YAClG,cAAc;AAAA,YACd,WAAW;AAAA,YACX,QAAQ,CAAC,GAAG,CAAC;AAAA,YACb,YAAY;AAAA,cACR,WAAW,SAAS,KAAK,mBAAmBA,SAAQ,WAAW,WAAW,WAAW;AAAA,YACzF;AAAA,UACJ,CAAC,CAAC;AAAA,QACN,CAAC;AAAA,MACL;AAAA,IACJ;AACA,SAAK;AAAA,MACD,YAAY,cAAc,UAAU,MAAM;AACtC,yEAAwB;AACxB,aAAK,gBAAgB,gBAAgB,0BAA0B,KAAK;AACpE,aAAK,gBAAgB,mBAAmB,4BAA4B,IAAI,CAAC,CAAC;AAAA,MAC9E,CAAC;AAAA,IACL;AACA,SAAK;AAAA,MACD,KAAK,gBAAgB,gBAAgB,UAAU,CAAC,UAAU;AACtD,YAAI,MAAM,wBAAwB,MAAM,OAAO;AAC3C,2EAAwB;AAAA,QAC5B;AAAA,MACJ,CAAC;AAAA,IACL;AACA,SAAK;AAAA,MACD,YAAY,UAAU,UAAU,MAAM;AAClC,yEAAwB;AAAA,MAC5B,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,mBAAmB,QAAgB,WAAmB,WAAmB,aAAqB;AAClG,WAAO;AAAA,MACH;AAAA,QACI,OAAO;AAAA,QACP,OAAO;AAAA,QACP,WAAW,0BAA0B;AAAA,QACrC,eAAe,EAAE,QAAQ,WAAW,UAAU;AAAA,QAC9C,SAAS;AAAA,MACb;AAAA,MACA;AAAA,QACI,OAAO;AAAA,QACP,OAAO;AAAA,QACP,WAAW,0BAA0B;AAAA,QACrC,eAAe,EAAE,QAAQ,UAAU,CAAC,EAAE,QAAQ,WAAW,UAAU,CAAC,EAAE;AAAA,QACtE,SAAS;AAAA,MACb;AAAA,MACA;AAAA,QACI,OAAO;AAAA,QACP,OAAO;AAAA,QACP,WAAW,uBAAuB;AAAA,QAClC,eAAe,EAAE,QAAQ,WAAW,UAAU;AAAA,QAC9C,SAAS;AAAA,MACb;AAAA,MACA;AAAA,QACI,OAAO;AAAA,QACP,OAAO;AAAA,QACP,WAAW,wBAAwB;AAAA,QACnC,eAAe,CAAC,EAAE,QAAQ,WAAW,UAAU,CAAC;AAAA,QAChD,SAAS;AAAA,MACb;AAAA,IACJ;AAAA,EACJ;AACJ;AApKa,6BAAN;AAAA,EAIE,0BAAO,QAAQ;AAAA,EACf;AAAA,EACA,0BAAO,4BAA4B;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AAAA,EACA,0BAAO,eAAe;AAAA,EACtB;AAAA,GAXI;;;ACTN,SAAS,2BACZ,UACA,wBACA,6BACyB;AACzB,QAAM,EAAE,MAAM,IAAI,QAAQ,OAAO,QAAQ,OAAO,QAAQ,GAAG,QAAQ,GAAG,QAAQ,EAAE,IAAI;AACpF,QAAM,gBAAgB,4BAA4B,WAAW;AAC7D,MAAI,iBAAiB,MAAM;AACvB;AAAA,EACJ;AAEA,QAAM,mBAAmB;AAAA,IACrB,cAAc;AAAA,IACd,cAAc;AAAA,IACd,EAAE,MAAM,GAAG;AAAA,IACX;AAAA,EACJ;AAEA,MAAI,EAAE,MAAM,KAAK,OAAO,OAAO,IAAI;AAEnC,QAAM,WAAW,4BAA4B,mBAAmB;AA0ChE,QAAM,aAAa,SAAS,iBAAiB,SAAS;AACtD,QAAM,cAAc,SAAS,qBAAqB,SAAS;AAE3D,MAAK,OAAO,QAAS,YAAY;AAC7B,WAAO,aAAa;AAAA,EACxB;AACA,MAAK,MAAM,SAAU,aAAa;AAC9B,UAAM,cAAc;AAAA,EACxB;AAEA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACJ;AAGO,SAAS,2BAA2B,WAA4B,wBAAuF;AAC1J,QAAM,EAAE,OAAO,GAAG,MAAM,GAAG,QAAQ,GAAG,SAAS,GAAG,QAAQ,OAAO,QAAQ,OAAO,QAAQ,GAAG,QAAQ,GAAG,QAAQ,EAAE,IAAI;AAEpH,QAAM,qBAAqB,uBAAuB,yBAAyB,MAAM,GAAG;AAEpF,MAAI,sBAAsB,MAAM;AAC5B;AAAA,EACJ;AAEA,QAAM,OAAO;AAAA,IACT,QAAQ,mBAAmB;AAAA,IAC3B,cAAc,YAAY,OAAO,mBAAmB,QAAQ,CAAC;AAAA,IAC7D,KAAK,mBAAmB;AAAA,IACxB,WAAW,YAAY,MAAM,mBAAmB,QAAQ,CAAC;AAAA,EAC7D;AAEA,QAAM,mBAAmB,uBAAuB,yBAAyB,OAAO,OAAO,MAAM,MAAM;AAEnG,MAAI,oBAAoB,MAAM;AAC1B;AAAA,EACJ;AAEA,QAAM,KAAK;AAAA,IACP,QAAQ,iBAAiB;AAAA,IACzB,cAAc,YAAY,OAAO,QAAQ,iBAAiB,QAAQ,CAAC;AAAA,IACnE,KAAK,iBAAiB;AAAA,IACtB,WAAW,YAAY,MAAM,SAAS,iBAAiB,QAAQ,CAAC;AAAA,EACpE;AAEA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACJ;;;AC3HO,IAAM,gCAAN,cAA4C,WAAoC;AAAA,EACnF,YACY,UAC+B,sBACE,wBACK,8BACD,8BAC/C;AACE,UAAM;AANE;AAC+B;AACE;AACK;AACD;AAI7C,SAAK,MAAM;AAAA,EACf;AAAA,EAEQ,QAAc;AAClB,SAAK,2BAA2B;AAAA,EACpC;AAAA,EAEQ,6BAA6B;AAEjC,SAAK,qBAAqB,uBAAuB,KAAK,SAAS,MAAM;AACrE,UAAM,OAAO,KAAK,qBAAqB,sBAAsB,KAAK,SAAS,MAAM;AACjF,eAAW,WAAW,MAAM;AACxB,YAAM,cAAc,KAAK,OAAO;AAChC,iBAAW,aAAa,YAAY,MAAM;AACtC,cAAM,cAAc,YAAY,KAAK,SAAS;AAC9C,oBAAY,YAAY,2BAA2B,YAAY,gBAAgB,KAAK,8BAA8B,KAAK,4BAA4B;AAAA,MACvJ;AAAA,IACJ;AAEA,SAAK,uBAAuB,oBAAoB,KAAK,SAAS,QAAQ,KAAK,qBAAqB,sBAAsB,KAAK,SAAS,MAAM,CAAC;AAC3I,SAAK,uBAAuB,uBAAuB,KAAK,SAAS,MAAM;AAAA,EAC3E;AACJ;AAhCa,gCAAN;AAAA,EAGE;AAAA,EACA;AAAA,EACA,0BAAO,4BAA4B;AAAA,EACnC,0BAAO,2BAA2B;AAAA,GAN9B;;;ACFN,SAAS,eAAe,eAA2C;AACtE,QAAM,iBAA6C,CAAC;AAEpD,gBAAc,QAAQ,CAAC,iBAAiB;AACpC,UAAM,EAAE,QAAQ,SAAS,IAAI;AAC7B,UAAM,EAAE,QAAQ,WAAW,WAAW,QAAQ,IAAI;AAClD,UAAM,iBAAiB,cAAc,GAAG,GAAG,SAAS,IAAI,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;AAEjF,UAAM,cAAc,SAAS,IAAI,CAAC,YAAY;AAC1C,YAAM,YAAY,QAAQ,aAAa,EAAE,MAAM,GAAG,KAAK,EAAE;AACzD,YAAM,EAAE,QAAAC,SAAQ,WAAAC,YAAW,UAAU,IAAI;AACzC,aAAO;AAAA,QACH,QAAAD;AAAA,QACA,WAAAC;AAAA,QACA;AAAA,QACA,WAAW;AAAA,UACP,GAAG;AAAA,UACH,MAAM,UAAU,OAAQ,eAAe;AAAA,UACvC,KAAK,UAAU,MAAO,eAAe;AAAA,QACzC;AAAA,QACA;AAAA,MACJ;AAAA,IACJ,CAAC;AAED,UAAM,aAAa;AAAA,MACf;AAAA,MACA;AAAA,MACA,WAAW;AAAA,MACX;AAAA,MACA,WAAW;AAAA,IACf;AAEA,mBAAe,KAAK;AAAA,MAChB,QAAQ;AAAA,MACR,UAAU;AAAA,IACd,CAAC;AAAA,EACL,CAAC;AAED,SAAO;AACX;AAEO,SAAS,eAAe,aAAyC;AACpE,QAAM,iBAA6C,CAAC;AAEpD,cAAY,QAAQ,CAAC,eAAe;AAChC,UAAM,EAAE,QAAQ,SAAS,IAAI;AAC7B,UAAM,EAAE,QAAQ,WAAW,WAAW,SAAS,WAAW,iBAAiB,EAAE,OAAO,GAAG,QAAQ,EAAE,EAAE,IAAI;AACvG,QAAI,kBAAkB,MAAM;AACxB;AAAA,IACJ;AACA,UAAM,cAAc,SAAS,IAAI,CAAC,WAAW;AACzC,YAAM,EAAE,UAAU,IAAI;AACtB,YAAM,EAAE,QAAAD,SAAQ,WAAAC,YAAW,UAAU,IAAI;AACzC,YAAM,eAAe,0BAA0B,aAAa,CAAC,GAAG,gBAAgB,eAAe,SAAS,GAAG,eAAe,UAAU,CAAC;AACrI,aAAO;AAAA,QACH,QAAAD;AAAA,QACA,WAAAC;AAAA,QACA;AAAA,QACA,WAAW;AAAA,QACX,SAAS;AAAA,MACb;AAAA,IACJ,CAAC;AAED,UAAM,eAAe;AAAA,MACjB;AAAA,MACA;AAAA,MACA,WAAW;AAAA,MACX;AAAA,MACA,WAAW;AAAA,QACP,MAAM;AAAA,QACN,KAAK;AAAA,MACT;AAAA,IACJ;AAEA,mBAAe,KAAK;AAAA,MAChB,QAAQ;AAAA,MACR,UAAU;AAAA,IACd,CAAC;AAAA,EACL,CAAC;AAED,SAAO;AACX;;;ACvEO,IAAM,2BAAqC;AAAA,EAC9C,IAAI;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,UAAqB,WAAwC;AACnE,UAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,UAAM,kBAAkB,SAAS,IAAI,gBAAgB;AACrD,UAAM,sBAAsB,SAAS,IAAI,oBAAoB;AAE7D,QAAI,CAAC,OAAQ,QAAO;AAEpB,UAAM,UAAoB,CAAC;AAC3B,WAAO,QAAQ,CAAC,EAAE,QAAQ,SAAS,MAAM;AACrC,cAAQ,KAAK,OAAO,MAAM;AAC1B,eAAS,QAAQ,CAAC,UAAU;AACxB,gBAAQ,KAAK,MAAM,MAAM;AAAA,MAC7B,CAAC;AAAA,IACL,CAAC;AAGD,UAAM,SAAS,oBAAoB,kBAAkB,MAAM;AAE3D,UAAM,EAAE,QAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI;AAEnD,UAAM,SAAS,eAAe,mBAAmB,wBAAwB,IAAI,EAAE,IAAI,MAAM,QAAQ,WAAW,SAAS,oBAA6B,CAAC;AAEnJ,QAAI,QAAQ;AACR,sBAAgB,aAAa;AAAA,QACzB,QAAQ;AAAA,QACR,eAAe;AAAA,UACX,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,IAAI,MAAM,QAAQ,WAAW,SAAS,eAAe,OAAqC,GAAG,sBAA+B,EAAE;AAAA,UAC1K,EAAE,IAAI,sCAAsC,IAAI,QAAQ,QAAQ;AAAA,QACpE;AAAA,QACA,eAAe;AAAA,UACX,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,IAAI,MAAM,QAAQ,WAAW,SAAS,oBAA6B,EAAE;AAAA,UACjH,EAAE,IAAI,sCAAsC,IAAI,QAAQ,QAAQ;AAAA,QACpE;AAAA,MACJ,CAAC;AAED,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACX;AACJ;;;ACzCO,IAAM,4BAAsC;AAAA,EAC/C,IAAI;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,UAAqB,WAAyC;AApC5E;AAqCQ,UAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,UAAM,kBAAkB,SAAS,IAAI,gBAAgB;AACrD,UAAM,sBAAsB,SAAS,IAAI,oBAAoB;AAC7D,UAAM,0BAA0B,SAAS,IAAI,uBAAuB;AAEpE,QAAI,CAAC,OAAQ,QAAO;AAIpB,UAAM,WAAW,OAAO;AAGxB,UAAM,UAAoB,SAAS,IAAI,CAAC,UAAU,MAAM,MAAM;AAG9D,UAAM,SAAS,oBAAoB,cAAc,QAAQ;AAEzD,UAAM,EAAE,QAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI;AAEnD,UAAM,cAAc,wBAAwB,iBAAiB,EAAE,IAAI,0BAA0B,IAAI,OAAO,CAAC;AAEzG,UAAM,iBAAiB,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,IAAI,MAAM,QAAQ,WAAW,SAAS,qBAA8B,EAAE;AACzI,UAAM,qBAAqB,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,IAAI,MAAM,QAAQ,WAAW,SAAS,qBAA8B,EAAE;AAE7I,UAAM,SAAS,gBAAgB,CAAC,IAAI,iBAAY,aAAZ,YAAwB,CAAC,GAAI,gBAAgB,GAAG,YAAY,KAAK,GAAG,cAAc;AAEtH,QAAI,QAAQ;AACR,sBAAgB,aAAa;AAAA,QACzB,QAAQ;AAAA,QACR,eAAe;AAAA,UACX,IAAI,iBAAY,aAAZ,YAAwB,CAAC;AAAA,UAC7B;AAAA,UACA,GAAI,YAAY;AAAA,UAChB,EAAE,IAAI,sCAAsC,IAAI,QAAQ,QAAQ;AAAA,QACpE;AAAA,QACA,eAAe;AAAA,UACX,IAAI,iBAAY,aAAZ,YAAwB,CAAC;AAAA,UAC7B;AAAA,UACA,GAAG,YAAY;AAAA,UACf,EAAE,IAAI,sCAAsC,IAAI,QAAQ,QAAQ;AAAA,QACpE;AAAA,MACJ,CAAC;AAED,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACX;AACJ;;;ACpDO,IAAM,2BAAqC;AAAA,EAC9C,IAAI;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,UAAqB,WAA6C;AACxE,UAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,UAAM,kBAAkB,SAAS,IAAI,gBAAgB;AAErD,QAAI,CAAC,OAAQ,QAAO;AAEpB,UAAM,sBAAsB,SAAS,IAAI,oBAAoB;AAE7D,UAAM,EAAE,QAAQ,WAAW,YAAY,YAAY,IAAI;AAEvD,UAAM,uBAAuB,EAAE,QAAQ,WAAW,WAAW;AAE7D,QAAI;AACJ,QAAI,iCAAyC;AACzC,eAAS,oBAAoB,qBAAqB,oBAAoB;AAAA,IAC1E,WAAW,kCAA0C;AACjD,eAAS,oBAAoB,qBAAqB,oBAAoB;AAAA,IAC1E,WAAW,+BAAuC;AAC9C,eAAS,oBAAoB,mBAAmB,oBAAoB;AAAA,IACxE,WAAW,8BAAsC;AAC7C,eAAS,oBAAoB,kBAAkB,oBAAoB;AAAA,IACvE;AAEA,QAAI,UAAU,MAAM;AAChB,aAAO;AAAA,IACX;AAEA,UAAM,EAAE,SAAS,MAAM,KAAK,IAAI;AAEhC,UAAM,SAAS,eAAe,mBAAmB,wBAAwB,IAAI,EAAE,IAAI,MAAM,QAAQ,WAAW,SAAS,sBAA+B,CAAC;AAErJ,QAAI,QAAQ;AACR,sBAAgB,aAAa;AAAA,QACzB,QAAQ;AAAA,QACR,eAAe;AAAA,UACX,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,IAAI,MAAM,QAAQ,WAAW,SAAS,sBAA+B,EAAE;AAAA,QACvH;AAAA,QACA,eAAe;AAAA,UACX,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,IAAI,MAAM,QAAQ,WAAW,SAAS,sBAA+B,EAAE;AAAA,QACvH;AAAA,MACJ,CAAC;AAED,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACX;AACJ;;;ACnDO,IAAM,yBAAmC;AAAA,EAC5C,IAAI;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,UAAqB,WAAsC;AACjE,UAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,UAAM,kBAAkB,SAAS,IAAI,gBAAgB;AACrD,UAAM,sBAAsB,SAAS,IAAI,oBAAoB;AAE7D,QAAI,CAAC,OAAQ,QAAO;AAEpB,UAAM,EAAE,SAAS,IAAI;AAKrB,UAAM,SAAS,oBAAoB,iBAAiB,QAA2B;AAE/E,UAAM,EAAE,QAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI;AAGnD,UAAM,SAAS,eAAe,mBAAmB,wBAAwB,IAAI,EAAE,QAAQ,WAAW,IAAI,MAAM,SAAS,qBAA8B,CAAC;AAEpJ,QAAI,QAAQ;AACR,sBAAgB,aAAa;AAAA,QACzB,QAAQ;AAAA,QACR,eAAe;AAAA,UACX,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,QAAQ,WAAW,IAAI,MAAM,SAAS,qBAA8B,EAAE;AAAA,UAClH,EAAE,IAAI,sCAAsC,IAAI,QAAQ,CAAC,MAAM,EAAE;AAAA,QACrE;AAAA,QACA,eAAe;AAAA,UACX,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,QAAQ,WAAW,IAAI,MAAM,SAAS,qBAA8B,EAAE;AAAA,UAClH,EAAE,IAAI,sCAAsC,IAAI,QAAQ,CAAC,MAAM,EAAE;AAAA,QACrE;AAAA,MACJ,CAAC;AAED,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACX;AACJ;;;ACzCO,IAAM,6BAAuC;AAAA,EAChD,IAAI;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,UAAqB,WAAwC;AACnE,UAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,UAAM,kBAAkB,SAAS,IAAI,gBAAgB;AACrD,UAAM,sBAAsB,SAAS,IAAI,oBAAoB;AAE7D,QAAI,CAAC,OAAQ,QAAO;AAEpB,UAAM,UAAoB,CAAC;AAC3B,WAAO,QAAQ,CAAC,EAAE,QAAQ,SAAS,MAAM;AACrC,cAAQ,KAAK,OAAO,MAAM;AAC1B,eAAS,QAAQ,CAAC,UAAU;AACxB,gBAAQ,KAAK,MAAM,MAAM;AAAA,MAC7B,CAAC;AAAA,IACL,CAAC;AAGD,UAAM,SAAS,oBAAoB,oBAAoB,MAAM;AAE7D,UAAM,EAAE,QAAQ,WAAW,MAAM,MAAM,QAAQ,IAAI;AAEnD,UAAM,SAAS,eAAe,mBAAmB,wBAAwB,IAAI,EAAE,IAAI,MAAM,QAAQ,WAAW,SAAS,sBAA+B,CAAC;AAErJ,QAAI,QAAQ;AACR,sBAAgB,aAAa;AAAA,QACzB,QAAQ;AAAA,QACR,eAAe;AAAA,UACX,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,IAAI,MAAM,QAAQ,WAAW,SAAS,eAAe,OAAqC,GAAG,oBAA6B,EAAE;AAAA,UACxK,EAAE,IAAI,sCAAsC,IAAI,QAAQ,QAAQ;AAAA,QACpE;AAAA,QACA,eAAe;AAAA,UACX,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,IAAI,MAAM,QAAQ,WAAW,SAAS,sBAA+B,EAAE;AAAA,UACnH,EAAE,IAAI,sCAAsC,IAAI,QAAQ,QAAQ;AAAA,QACpE;AAAA,MACJ,CAAC;AAED,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACX;AACJ;;;AC5BA,SAAS,mBAAmB,OAAe,QAAgB,cAAuE;AAC9H,QAAM,QAAQ,eAAe,KAAK,KAAK;AACvC,QAAM,eAAe,KAAK,IAAI,QAAQ,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,IAAI,SAAS,KAAK,IAAI,KAAK,CAAC;AAC1F,QAAM,gBAAgB,KAAK,IAAI,QAAQ,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,IAAI,SAAS,KAAK,IAAI,KAAK,CAAC;AAC3F,SAAO,EAAE,cAAc,cAAc;AACzC;AAWO,SAAS,qBACZ,UACA,UACA,kBACA,mBACA,OACF;AApEF;AAqEI,QAAM,EAAE,eAAe,aAAa,IAAI,mBAAmB,kBAAkB,mBAAmB,KAAK;AACrG,QAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAC/D,QAAM,gBAAgB,qBAAqB,cAAc,SAAS,MAAM;AACxE,MAAI,CAAC,eAAe;AAChB,WAAO;AAAA,EACX;AACA,QAAM,yBAAyB,cAAc,KAAK,2BAA2B;AAC7E,QAAM,YAAW,4BAAuB,iBAAiB,SAAS,SAAS,MAA1D,mBAA6D;AAC9E,MAAI,YAAY,MAAM;AAClB,WAAO;AAAA,EACX;AACA,QAAM,WAAW,SAAS,eAAe,SAAS,KAAK,SAAS,GAAG;AAEnE,QAAM,YAAY,SAAS,UAAU,OAAO,SAAS,UAAU,SAAS;AACxE,QAAM,aAAa,SAAS,UAAU,OAAO,SAAS,UAAU,SAAS;AACzE,QAAM,aAAa,eAAe;AAClC,QAAM,aAAa,KAAK,KAAK,KAAK,IAAI,WAAW,aAAa,UAAU,CAAC;AACzE,QAAM,QAAQ,aAAa;AAC3B,QAAM,YAAY,CAAE,SAAU,OAAO,MAAM,KAAK,IAAI,OAAQ;AAE5D,SAAO;AAAA,IACH,OAAO,mBAAmB;AAAA,IAC1B,QAAQ,oBAAoB;AAAA,EAChC;AACJ;AAEO,IAAM,+BAAN,cAA2C,WAAoC;AAAA,EAElF,YACqB,UACqC,yBACpB,iBACa,yBACb,iBACE,oBACG,sBACE,wBACP,iBACA,iBACM,gBACP,yBACE,WACrC;AACE,UAAM;AAdW;AACqC;AACpB;AACa;AACb;AACE;AACG;AACE;AACP;AACA;AACM;AAEL;AAdvC,wBAAiB;AAkBb,SAAK,sBAAsB,wBAAwB,sBAAsB,KAAK,SAAS,MAAM;AAE7F,SAAK,qBAAqB;AAC1B,SAAK,qBAAqB;AAC1B,SAAK,sBAAsB;AAC3B,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EAEA,MAAM,mBAAqC;AACvC,UAAM,QAAQ,MAAM,KAAK,mBAAmB,SAAS;AAAA,MACjD,UAAU;AAAA,MACV,QAAQ,+BAA+B,IAAI,CAAC,UAAU,IAAI,MAAM,QAAQ,UAAU,EAAE,CAAC,EAAE,EAAE,KAAK,GAAG;AAAA,IACrG,CAAC;AAED,UAAM,aAAa,MAAM;AACzB,QAAI,aAAa,2BAA2B;AACxC,WAAK,gBAAgB,KAAK;AAAA,QACtB;AAAA,QACA,SAAS,KAAK,eAAe,EAAE,gCAAgC,OAAO,yBAAyB,CAAC;AAAA,MACpG,CAAC;AACD,aAAO;AAAA,IACX,WAAW,eAAe,GAAG;AACzB,aAAO;AAAA,IACX;AAEA,UAAM,QAAQ,OAAO,SAAS,MAAM,KAAK,uBAAuB,IAAI,CAAC;AACrE,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,kBAAoC;AACtC,UAAM,QAAQ,MAAM,KAAK,mBAAmB,SAAS;AAAA,MACjD,UAAU;AAAA,MACV,QAAQ,+BAA+B,IAAI,CAAC,UAAU,IAAI,MAAM,QAAQ,UAAU,EAAE,CAAC,EAAE,EAAE,KAAK,GAAG;AAAA,IACrG,CAAC;AACD,UAAM,OAAO,MAAM,CAAC;AACpB,QAAI,MAAM;AACN,YAAM,KAAK,iBAAiB,IAAI;AAChC,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EAEA,sBAAsB,MAAY,UAA+B;AAC7D,WAAO,KAAK,iBAAiB,MAAM,QAAQ;AAAA,EAC/C;AAAA,EAEA,MAAM,uBAAuB,MAAY;AACrC,QAAI;AAEJ,QAAI;AACA,mBAAa,MAAM,KAAK,gBAAgB,UAAU,IAAI;AAAA,IAC1D,SAAS,OAAO;AACZ,YAAM,OAAQ,MAAgB;AAC9B,UAAI,sCAAkD;AAClD,aAAK,gBAAgB,KAAK;AAAA,UACtB;AAAA,UACA,SAAS,KAAK,eAAe,EAAE,+BAA+B,OAAO,4BAA4B,OAAO,KAAK,CAAC;AAAA,QAClH,CAAC;AAAA,MACL,WAAW,qCAAiD;AACxD,aAAK,gBAAgB,KAAK;AAAA,UACtB;AAAA,UACA,SAAS,KAAK,eAAe,EAAE,gCAAgC;AAAA,QACnE,CAAC;AAAA,MACL,WAAW,gCAA4C;AACnD,aAAK,gBAAgB,KAAK;AAAA,UACtB;AAAA,UACA,SAAS,KAAK,eAAe,EAAE,4BAA4B;AAAA,QAC/D,CAAC;AAAA,MACL;AAAA,IACJ;AAEA,QAAI,cAAc,MAAM;AACpB;AAAA,IACJ;AAEA,UAAM,OAAO,KAAK,aAAa;AAC/B,UAAM,EAAE,QAAQ,UAAU,IAAI;AAC9B,UAAM,EAAE,SAAS,iBAAiB,QAAQ,YAAY,IAAI;AAC1D,UAAM,EAAE,OAAO,QAAQ,MAAM,IAAI,MAAM,aAAa,eAAe,EAAE;AACrE,UAAM,EAAE,OAAO,YAAY,QAAQ,YAAY,IAAI,KAAK,SAAS;AAEjE,SAAK,gBAAgB,oBAAoB,QAAQ,iBAAiB,KAAK;AAEvE,QAAI,QAAQ;AACZ,QAAI,QAAQ,6BAA6B,SAAS,4BAA4B;AAC1E,YAAM,aAAa,4BAA4B;AAC/C,YAAM,cAAc,6BAA6B;AACjD,cAAQ,KAAK,IAAI,YAAY,WAAW;AAAA,IAC5C;AAEA,UAAM,iBAAiB,KAAK,kBAAkB,QAAQ,OAAO,SAAS,OAAO,YAAY,WAAW;AAEpG,QAAI,kBAAkB,MAAM;AACxB;AAAA,IACJ;AAEA,UAAM,oBAAmC;AAAA,MACrC;AAAA,MACA;AAAA,MACA,WAAW;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA,WAAW,2BAA2B,gBAAgB,KAAK,yBAAyB,KAAK,uBAAuB;AAAA,MAChH;AAAA,IACJ;AAEA,WAAO,KAAK,gBAAgB,eAAe,0BAA0B,IAAI;AAAA,MACrE;AAAA,MACA,UAAU,CAAC,iBAAiB;AAAA,IAChC,CAAgC;AAAA,EACpC;AAAA;AAAA,EAGA,MAAc,iBAAiB,MAAY,UAA+B;AApO9E;AAqOQ,QAAI;AACJ,QAAI;AACA,mBAAa,MAAM,KAAK,gBAAgB,UAAU,IAAI;AAAA,IAC1D,SAAS,OAAO;AACZ,YAAM,OAAQ,MAAgB;AAC9B,UAAI,sCAAkD;AAClD,aAAK,gBAAgB,KAAK;AAAA,UACtB;AAAA,UACA,SAAS,KAAK,eAAe,EAAE,+BAA+B,OAAO,4BAA4B,OAAO,KAAK,CAAC;AAAA,QAClH,CAAC;AAAA,MACL,WAAW,qCAAiD;AACxD,aAAK,gBAAgB,KAAK;AAAA,UACtB;AAAA,UACA,SAAS,KAAK,eAAe,EAAE,gCAAgC;AAAA,QACnE,CAAC;AAAA,MACL,WAAW,gCAA4C;AACnD,aAAK,gBAAgB,KAAK;AAAA,UACtB;AAAA,UACA,SAAS,KAAK,eAAe,EAAE,4BAA4B;AAAA,QAC/D,CAAC;AAAA,MACL;AAAA,IACJ;AAEA,QAAI,cAAc,MAAM;AACpB,aAAO;AAAA,IACX;AAEA,UAAM,EAAE,SAAS,iBAAiB,QAAQ,YAAY,IAAI;AAC1D,UAAM,EAAE,OAAO,QAAQ,MAAM,IAAI,MAAM,aAAa,eAAe,EAAE;AACrE,SAAK,gBAAgB,oBAAoB,QAAQ,iBAAiB,KAAK;AACvE,UAAM,YAAY,KAAK,oBAAoB,wBAAwB;AACnE,QAAI,CAAC,WAAW;AACZ,aAAO;AAAA,IACX;AACA,UAAM,eAAe,6BAA6B,IAAI,CAAC,CAAC;AAExD,UAAM,YAAY;AAAA,MACd,KAAK;AAAA,MACL;AAAA,QACI,QAAQ,KAAK,SAAS;AAAA,QACtB,WAAW,KAAK,SAAS,KAAK,eAAe,EAAE,WAAW;AAAA,QAC1D,KAAK,UAAU,QAAQ;AAAA,QACvB,KAAK,UAAU,QAAQ;AAAA,MAC3B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AACA,QAAI,CAAC,WAAW;AACZ,aAAO;AAAA,IACX;AACA,UAAM,eAAe;AAAA,MACjB,MAAM;AAAA,QACF,OAAO,UAAU;AAAA,QACjB,QAAQ,UAAU;AAAA,MACtB;AAAA,MACA,WAAW;AAAA,QACP;AAAA,QACA,WAAW;AAAA,MACf;AAAA,MACA,WAAW;AAAA,QACP;AAAA,QACA,WAAW;AAAA,MACf;AAAA,MACA,OAAO;AAAA,IACX;AACA,UAAM,kBAAkB;AAAA,MACpB,QAAQ,aAAa,UAAU;AAAA,MAC/B,WAAW,aAAa,UAAU;AAAA,MAClC,WAAW;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA,WAAW,8BAA8B,YAAY;AAAA,MACrD;AAAA,MACA;AAAA,MACA,OAAO;AAAA,MACP,aAAa;AAAA,MACb;AAAA;AAAA,MACA;AAAA,MACA,OAAO;AAAA,MACP,OAAO;AAAA,MACP,OAAO;AAAA,MACP,OAAO;AAAA,IACX;AAEA,UAAM,eAAe,eAAe,QAAQ,IAAI;AAAA,MAC5C,mBAAmB;AAAA,MACnB,UAAU,CAAC,eAAe;AAAA,MAC1B,WAAW;AAAA,QACP,WAAW;AAAA,QACX,aAAa;AAAA,QACb,WAAW;AAAA,MACf;AAAA,IACJ,CAAC;AAED,QAAI,cAAc;AACd,mBAAa,MAAM,YAAY;AAE/B,aAAO,KAAK,gBAAgB,mBAAmB,sBAAsB,IAAI;AAAA,QACrE,OAAO;AAAA,UACH,EAAC,0CAAU,QAAV,YAAiB,UAAU,QAAQ,SAAS,GAAG;AAAA,YAC5C,EAAC,0CAAU,QAAV,YAAiB,UAAU,QAAQ,YAAY,GAAG;AAAA,cAC/C,GAAI,aAAa,YAAY;AAAA,cAC7B,GAAG;AAAA,YACP;AAAA,UACJ;AAAA,QACJ;AAAA,QACA,QAAQ,qCAAU;AAAA,QAClB,WAAW,qCAAU;AAAA,MACzB,CAAC;AAAA,IACL;AAEA,WAAO;AAAA,EACX;AAAA;AAAA,EAGA,MAAM,qBAAqB,KAAa,UAA+B;AA1V3E;AA2VQ,UAAM,EAAE,OAAO,QAAQ,MAAM,IAAI,MAAM,aAAa,OAAO,EAAE;AAC7D,SAAK,gBAAgB,oBAAoB,sBAA0B,KAAK;AACxE,UAAM,YAAY,KAAK,oBAAoB,wBAAwB;AACnE,QAAI,CAAC,WAAW;AACZ,aAAO;AAAA,IACX;AACA,UAAM,eAAe,6BAA6B,IAAI,CAAC,CAAC;AAExD,UAAM,YAAY;AAAA,MACd,KAAK;AAAA,MACL;AAAA,QACI,QAAQ,KAAK,SAAS;AAAA,QACtB,WAAW,KAAK,SAAS,KAAK,eAAe,EAAE,WAAW;AAAA,QAC1D,KAAK,UAAU,QAAQ;AAAA,QACvB,KAAK,UAAU,QAAQ;AAAA,MAC3B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AACA,QAAI,CAAC,WAAW;AACZ,aAAO;AAAA,IACX;AACA,UAAM,eAAe;AAAA,MACjB,MAAM;AAAA,QACF,OAAO,UAAU;AAAA,QACjB,QAAQ,UAAU;AAAA,MACtB;AAAA,MACA,WAAW;AAAA,QACP;AAAA,QACA,WAAW;AAAA,MACf;AAAA,MACA,WAAW;AAAA,QACP;AAAA,QACA,WAAW;AAAA,MACf;AAAA,MACA,OAAO;AAAA,IACX;AACA,UAAM,kBAAkB;AAAA,MACpB,QAAQ,aAAa,UAAU;AAAA,MAC/B,WAAW,aAAa,UAAU;AAAA,MAClC,WAAW,iBAAiB;AAAA,MAC5B;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,MACR,WAAW,8BAA8B,YAAY;AAAA,MACrD;AAAA,MACA;AAAA,MACA,OAAO;AAAA,MACP,aAAa;AAAA,MACb;AAAA;AAAA,MACA;AAAA,MACA,OAAO;AAAA,MACP,OAAO;AAAA,MACP,OAAO;AAAA,MACP,OAAO;AAAA,IACX;AAEA,UAAM,eAAe,eAAe,QAAQ,IAAI;AAAA,MAC5C,mBAAmB;AAAA,MACnB,UAAU,CAAC,eAAe;AAAA,MAC1B,WAAW;AAAA,QACP,WAAW;AAAA,QACX,aAAa;AAAA,QACb,WAAW;AAAA,MACf;AAAA,IACJ,CAAC;AAED,QAAI,cAAc;AACd,mBAAa,MAAM,YAAY;AAC/B,aAAO,KAAK,gBAAgB,mBAAmB,sBAAsB,IAAI;AAAA,QACrE,OAAO;AAAA,UACH,EAAC,0CAAU,QAAV,YAAiB,UAAU,QAAQ,SAAS,GAAG;AAAA,YAC5C,EAAC,0CAAU,QAAV,YAAiB,UAAU,QAAQ,YAAY,GAAG;AAAA,cAC/C,GAAI,aAAa,YAAY;AAAA,cAC7B,GAAG;AAAA,YACP;AAAA,UACJ;AAAA,QACJ;AAAA,QACA,QAAQ,qCAAU;AAAA,QAClB,WAAW,qCAAU;AAAA,MACzB,CAAC;AAAA,IACL;AAEA,WAAO;AAAA,EACX;AAAA,EAEQ,eAAe;AACnB,UAAM,WAAW,KAAK,SAAS;AAC/B,UAAM,YAAY,SAAS,eAAe;AAC1C,UAAM,SAAS,SAAS,UAAU;AAClC,UAAM,YAAY,UAAU,WAAW;AAEvC,WAAO;AAAA,MACH;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,kBAAkB,YAAoB,aAAqB,YAAoB,aAAsD;AACzI,UAAM,aAAa,KAAK,oBAAoB,qBAAqB;AACjE,QAAI,QAAgB;AAAA,MAChB,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,aAAa;AAAA,MACb,WAAW;AAAA,IACf;AACA,QAAI,cAAc,WAAW,SAAS,GAAG;AACrC,cAAQ,WAAW,WAAW,SAAS,CAAC,EAAE;AAAA,IAC9C;AAEA,UAAM,iBAAiB,qBAAqB,KAAK,wBAAwB,WAAW,EAAG,UAAU,KAAK;AACtG,QAAI,kBAAkB,MAAM;AACxB;AAAA,IACJ;AAEA,QAAI,EAAE,aAAa,UAAU,QAAQ,OAAO,IAAI;AAEhD,QAAI,gBAAgB;AACpB,QAAI,SAAS,aAAa,YAAY;AAClC,eAAS,aAAa;AAEtB,UAAI,SAAS,GAAG;AACZ,iBAAS;AACT,qBAAa;AAAA,MACjB;AAEA,sBAAgB;AAAA,IACpB;AAEA,QAAI,SAAS,cAAc,aAAa;AACpC,eAAS,cAAc;AAEvB,UAAI,SAAS,GAAG;AACZ,iBAAS;AACT,sBAAc;AAAA,MAClB;AAEA,sBAAgB;AAAA,IACpB;AAEA,QAAI,eAAe;AACf,YAAM,WAAW,KAAK,wBAAwB,yBAAyB,QAAQ,MAAM;AACrF,UAAI,YAAY,MAAM;AAClB;AAAA,MACJ;AACA,eAAS,SAAS;AAClB,eAAS,SAAS;AAClB,oBAAc,SAAS;AACvB,iBAAW,SAAS;AAAA,IACxB;AAEA,UAAM,OAAO;AAAA,MACT,QAAQ;AAAA,MACR,cAAc;AAAA,MACd,KAAK;AAAA,MACL,WAAW;AAAA,IACf;AAEA,UAAM,mBAAmB,KAAK,wBAAwB,yBAAyB,SAAS,YAAY,SAAS,WAAW;AAExH,QAAI,oBAAoB,MAAM;AAC1B;AAAA,IACJ;AAEA,UAAM,KAAK;AAAA,MACP,QAAQ,iBAAiB;AAAA,MACzB,cAAc,SAAS,aAAa,iBAAiB;AAAA,MACrD,KAAK,iBAAiB;AAAA,MACtB,WAAW,SAAS,cAAc,iBAAiB;AAAA,IACvD;AAEA,WAAO;AAAA,MACH;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,uBAAuB;AAC3B,SAAK,cAAc,KAAK,uBAAuB,0BAA0B,UAAU,CAAC,WAAW;AAC3F,YAAM,EAAE,QAAQ,WAAW,YAAY,YAAY,IAAI;AAEvD,WAAK,gBAAgB,eAAe,yBAAyB,IAAI;AAAA,QAC7D;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ,CAAoC;AAAA,IACxC,CAAC,CAAC;AAAA,EACN;AAAA,EAEQ,uBAAuB;AAC3B,SAAK,cAAc,KAAK,uBAAuB,qBAAqB,UAAU,CAAC,WAAW;AACtF,YAAM,WAAqC,CAAC;AAE5C,UAAI,OAAO,WAAW,GAAG;AACrB;AAAA,MACJ;AAEA,MAAC,OAAwB,QAAQ,CAAC,UAAU;AACxC,cAAM,EAAE,QAAQ,WAAW,WAAW,aAAa,UAAU,IAAI;AACjE,YAAI,aAAa,MAAM;AACnB;AAAA,QACJ;AAEA,cAAM,eAAe,KAAK,qBAAqB,kBAAkB,EAAE,QAAQ,WAAW,UAAU,CAAC;AAIjG,YAAI,gBAAgB,QAAQ,aAAa,WAAW,KAAK,SAAS,QAAQ;AACtE;AAAA,QACJ;AAEA,cAAM,iBAAiB,2BAA2B,EAAE,GAAG,aAAa,WAAW,GAAG,UAAU,GAAG,KAAK,uBAAuB;AAE3H,YAAI,kBAAkB,MAAM;AACxB;AAAA,QACJ;AAMA,cAAM,aAAqC;AAAA,UACvC,GAAG;AAAA,UACH,WAAW,EAAE,GAAG,aAAa,WAAW,GAAG,WAAW,GAAG,2BAA2B,gBAAgB,KAAK,yBAAyB,KAAK,uBAAuB,EAAE;AAAA,UAChK,gBAAgB,EAAE,GAAG,eAAe;AAAA,QACxC;AAEA,iBAAS,KAAK,UAAU;AAAA,MAC5B,CAAC;AAED,UAAI,SAAS,SAAS,GAAG;AACrB,aAAK,gBAAgB,eAAe,uBAAuB,IAAI;AAAA,UAC3D,QAAQ,OAAO,CAAC,EAAE;AAAA,UAClB;AAAA,QACJ,CAA6B;AAAA,MACjC;AAAA,IACJ,CAAC,CAAC;AAAA,EACN;AAAA,EAEQ,wBAAwB;AAC5B,SAAK,cAAc,KAAK,uBAAuB,0BAA0B,UAAU,CAAC,WAAW;AAC3F,WAAK,gBAAgB,eAAe,yBAAyB,IAAI,MAAM;AACvE,YAAM,EAAE,QAAQ,WAAW,UAAU,IAAI,OAAO,CAAC,EAAE;AACnD,WAAK,gBAAgB,mBAAmB,4BAA4B,IAAI,CAAC,EAAE,QAAQ,WAAW,UAAU,CAAC,CAAC;AAAA,IAC9G,CAAC,CAAC;AAEF,SAAK,cAAc,KAAK,uBAAuB,4BAA4B,UAAU,CAAC,WAAW;AAC7F,WAAK,gBAAgB,eAAe,2BAA2B,IAAI,MAAM;AAAA,IAC7E,CAAC,CAAC;AAAA,EACN;AAAA,EAEQ,wBAAwB;AAC5B,SAAK;AAAA,MACD,KAAK,uBAAuB,OAAO,UAAU,CAAC,WAAW;AACrD,YAAI,UAAU,QAAQ,OAAO,WAAW,GAAG;AACvC,eAAK,gBAAgB,gBAAgB,0BAA0B,KAAK;AACpE,eAAK,qBAAqB,aAAa,CAAC,CAAC;AAAA,QAC7C,OAAO;AACH,eAAK,gBAAgB,gBAAgB,0BAA0B,IAAI;AACnE,eAAK,qBAAqB,aAAa,MAAM;AAAA,QACjD;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AACJ;AAtgBa,+BAAN;AAAA,EAIE,0BAAO,2BAA2B;AAAA,EAClC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,2BAAO,aAAa;AAAA,EACpB,2BAAO,uBAAuB;AAAA,EAC9B,2BAAO,QAAQ;AAAA,GAfX;;;ACjEN,SAAS,kBAAkB,UAAoB,UAA8B,MAA2B;AA9B/G;AA+BI,QAAI,wCAAM,MAAN,mBAAS,SAAT,mBAAe,WAAW,YAAW,OAAK,gBAAK,MAAL,mBAAQ,kBAAR,mBAAuB,YAAW,GAAG;AAC/E,UAAM,QAAQ,KAAK,EAAE,SAAU,KAAK,EAAE,cAAc,CAAC,CAAC;AACtD,UAAM,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACI,QAAQ,SAAS;AAAA,QACjB,WAAW,SAAS;AAAA,QACpB,KAAK,SAAS;AAAA,QACd,KAAK,SAAS;AAAA,MAClB;AAAA,MACA,MAAM,aAAc,KAAK;AAAA,MACzB,MAAM,aAAc,KAAK;AAAA,MACzB,MAAM,aAAc;AAAA,IACxB;AAEA,QAAI,WAAW;AACX,YAAM,UAAW,QAAQ,UAAU;AACnC,YAAM,UAAW,SAAS,UAAU;AACpC,YAAM,aAAc,KAAK,QAAQ,UAAU;AAC3C,YAAM,aAAc,KAAK,SAAS,UAAU;AAC5C,YAAM,UAAW,OAAO;AACxB,YAAM,UAAW,MAAM;AACvB,YAAM,aAAc,UAAU,YAAY;AAC1C,YAAM,aAAc,UAAU,YAAY;AAE1C,WAAK,EAAE,cAAc,SAAU,QAAQ;AACvC,WAAK,EAAE,cAAc,SAAU,SAAS;AACxC,aAAO;AAAA,IACX;AAAA,EACJ;AAEA,SAAO;AACX;AAEO,IAAM,2BAAN,cAAuC,WAAW;AAAA,EACrD,YACsC,iBACgB,0BACf,WACM,wBACM,uBACA,sBACjD;AACE,UAAM;AAP4B;AACgB;AACf;AACM;AACM;AACA;AAI/C,SAAK,kBAAkB;AACvB,SAAK,4BAA4B;AACjC,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EAEQ,mBAAmB;AACvB,SAAK,cAAc,KAAK,gBAAgB,sBAAsB,CAAC,gBAAgB;AAlFvF;AAmFY,UAAI,YAAY,OAAO,4BAA4B,IAAI;AACnD,cAAM,SAAS,YAAY;AAC3B,cAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,YAAI,WAAW,gCAA6C;AACxD,gBAAM,YAAY,KAAK,qBAAqB,iBAAiB;AAC7D,gBAAM,gBAAe,wDAAW,qBAAqB,kBAAhC,mBAA+C,uBAA/C,mBAAmE,WAAnE,YAA6E;AAClG,cAAI,eAAe,GAAG;AAClB,kBAAM,IAAI,MAAM,uCAAuC;AAAA,UAC3D;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,CAAC,CAAC;AAAA,EACN;AAAA,EAEQ,oBAAoB;AACxB,SAAK,cAAc,KAAK,qBAAqB,SAAS,UAAU,CAAC,UAAU;AACvE,UAAI,CAAC,MAAM,SAAS;AAChB,aAAK,uBAAuB,yBAAyB,8BAA8B;AAAA,MACvF,WAAW,MAAM,SAAS;AACtB,aAAK,uBAAuB,yBAAyB,8BAA8B;AACnF,aAAK,sBAAsB,uBAAuB,8BAA8B;AAChF,aAAK,uBAAuB,uBAAuB,8BAA8B;AAAA,MACrF;AAAA,IACJ,CAAC,CAAC;AAEF,SAAK,cAAc,KAAK,gBAAgB,kBAAkB,CAAC,gBAAgB;AACvE,UAAI,YAAY,OAAO,uBAAuB,IAAI;AAC9C,cAAM,SAAS,YAAY;AAC3B,cAAM,SAAS,OAAO;AACtB,YAAI,WAAW,6BAA6B;AACxC,eAAK,uBAAuB,yBAAyB,2BAA2B;AAChF,eAAK,sBAAsB,uBAAuB,2BAA2B;AAC7E,eAAK,uBAAuB,uBAAuB,2BAA2B;AAAA,QAClF;AAAA,MACJ;AAAA,IACJ,CAAC,CAAC;AAAA,EACN;AAAA,EAEQ,8BAA8B;AAClC,SAAK;AAAA,MACD,KAAK,yBAAyB;AAAA,QAC1B,kBAAkB;AAAA,QAClB;AAAA,UACI;AAAA,UACA;AAAA,UACA,SAAS,CAAC,MAAM,KAAK,SAAS;AAhIlD;AAiIwB,iBAAI,6BAAM,QAAK,UAAK,EAAE,kBAAP,mBAAsB,SAAQ;AACzC,kBAAI,CAAC,KAAK,kBAAkB;AACxB,qBAAK,mBAAmB,CAAC;AAAA,cAC7B;AACA,mBAAK,iBAAiB,KAAK,EAAE,GAAG,EAAE;AAElC,gCAAkB,KAAK,WAAW,EAAE,QAAQ,IAAI,QAAQ,WAAW,IAAI,WAAW,KAAK,IAAI,KAAK,KAAK,IAAI,IAAI,GAAG,IAAI;AAAA,YACxH;AAEA,mBAAO,KAAK,IAAI;AAAA,UACpB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AA/Ea,2BAAN;AAAA,EAEE;AAAA,EACA,0BAAO,uBAAuB;AAAA,EAC9B,0BAAO,QAAQ;AAAA,EACf;AAAA,EACA,0BAAO,oBAAoB;AAAA,EAC3B,0BAAO,oBAAoB;AAAA,GAPvB;;;AC7CN,IAAM,mCAAN,cAA+C,WAAW;AAAA,EAC7D,YAC+C,kBACR,WACrC;AACE,UAAM;AAHqC;AACR;AAInC,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EAEQ,qBAA2B;AAC/B,SAAK;AAAA,MACD,KAAK,iBAAiB,QAAQ;AAAA,QAC1B,IAAI;AAAA,QACJ,gBAAgB,CAAC,UAAU,WAAW,WAAW,cAAc;AAC3D,cAAI,aAAa,SAAS,EAAE,SAAS,CAAC,KAAK,KAAK,SAAS;AACrD,8BAAkB,KAAK,WAAW,EAAE,QAAQ,SAAS,QAAQ,WAAW,SAAS,WAAW,KAAK,IAAI,GAAG,IAAI;AAAA,UAChH,CAAC;AAAA,QACL;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AACJ;AAtBa,mCAAN;AAAA,EAEE,0BAAO,gBAAgB;AAAA,EACvB,0BAAO,QAAQ;AAAA,GAHX;;;ACEN,IAAM,gCAAN,cAA4C,WAAW;AAAA,EAG1D,YACyC,sBACE,uBACE,oBACH,uBACxC;AACE,UAAM;AAL+B;AACE;AACE;AACH;AAN1C,wBAAQ,gBAAe;AAAA,EAWvB;AAAA,EAEQ,aAAa;AAAA,EAErB;AAAA,EAEQ,kBAAkB;AAAA,EAE1B;AACJ;AArBa,gCAAN;AAAA,EAIE,0BAAO,mBAAmB;AAAA,EAC1B,0BAAO,qBAAqB;AAAA,EAC5B,0BAAO,uBAAuB;AAAA,EAC9B,0BAAO,oBAAoB;AAAA,GAPvB;;;ACGN,IAAM,0BAA+D;AAAA,EACxE,IAAI;AAAA,EACJ;AAAA,EACA,SAAS,OAAO,UAAU,WAAW;AA5BzC;AA6BQ,UAAM,wBAAwB,SAAS,IAAI,sBAAsB;AACjE,UAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAC/D,UAAM,gCAA+B;AAAA,MACjC,EAAmB;AAAA,MACnB;AAAA,MACA;AAAA,IACJ,MAJqC,mBAK/B,KAAK;AAEX,QAAI,CAAC,8BAA8B;AAC/B,aAAO;AAAA,IACX;AACA,UAAM,QAAQ,iCAAQ;AAEtB,QAAI,OAAO;AACP,YAAM,aAAa,MAAM,IAAI,CAAC,SAAS,6BAA6B,uBAAuB,IAAI,CAAC;AAEhG,cAAQ,MAAM,QAAQ,IAAI,UAAU,GAAG,MAAM,CAAC,WAAW,MAAM;AAAA,IACnE,OAAO;AACH,cAAO,kCAA6B,iBAAiB,MAA9C,YAAmD;AAAA,IAC9D;AAAA,EACJ;AACJ;AAEO,IAAM,yBAAmC;AAAA,EAC5C,IAAI;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,aAAa;AAxD3B;AAyDQ,UAAM,wBAAwB,SAAS,IAAI,sBAAsB;AACjE,UAAM,uBAAuB,SAAS,IAAI,qBAAqB;AAE/D,YAAO;AAAA,MACH,EAAmB;AAAA,MACnB;AAAA,MACA;AAAA,IACJ,MAJO,mBAKD,KAAK,8BACN,sBANE,YAMmB;AAAA,EAC9B;AACJ;;;ACpCA,IAAM,sBAAsB;AAE5B,SAAS,aAAa,QAAgB;AAClC,QAAM,MAAM,OAAO,MAAM,GAAG;AAC5B,QAAM,SAAS,KAAK,IAAI,CAAC,CAAC;AAC1B,QAAM,MAAM,OAAO;AACnB,QAAM,QAAQ,IAAI,WAAW,GAAG;AAEhC,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC1B,UAAM,CAAC,IAAI,OAAO,WAAW,CAAC;AAAA,EAClC;AAEA,SAAO,IAAI,KAAK,CAAC,KAAK,GAAG,EAAE,MAAM,oBAAoB,CAAC;AAC1D;AAEA,SAAS,sBAAsB,QAAgB;AAC3C,QAAM,OAAO,IAAI,cAAc,EAAE,CAAC,mBAAmB,GAAG,aAAa,MAAM,EAAE,CAAC;AAC9E,YAAU,UAAU,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,QAAQ;AAC7C,YAAQ,MAAM,8CAA8C,GAAG;AAAA,EACnE,CAAC;AACL;AAEA,SAAS,gBAAgB;AACrB,WAAS,qBAAqB;AAC1B,UAAMC,SAAQ,SAAS,cAAc,OAAO;AAC5C,IAAAA,OAAM,MAAM,WAAW;AACvB,IAAAA,OAAM,MAAM,SAAS;AACrB,IAAAA,OAAM,MAAM,QAAQ;AACpB,IAAAA,OAAM,MAAM,UAAU;AAEtB,WAAOA;AAAA,EACX;AAEA,QAAM,gBAAgB,SAAS;AAC/B,QAAM,QAAQ,mBAAmB;AACjC,WAAS,KAAK,YAAY,KAAK;AAC/B,QAAM,MAAM;AAEZ,SAAO,MAAM;AACT,UAAM,KAAK;AACX,aAAS,KAAK,YAAY,KAAK;AAC/B,QAAI,yBAAyB,aAAa;AACtC,oBAAc,MAAM;AAAA,IACxB;AAAA,EACJ;AACJ;AAEA,IAAM,gBAAuC;AAAA,EACzC,qBAAqB;AAAA,EACrB,qBAAqB;AAAA,EACrB,qBAAqB;AAAA,EACrB,qBAAqB;AACzB;AAEO,IAAM,mCAAN,cAA+C,WAAW;AAAA,EAQ7D,YACoC,wBACQ,uBACC,iBACI,4BACX,iBACpC;AACE,UAAM;AAN0B;AACQ;AACC;AACI;AACX;AAZtC,wBAAQ;AAeJ,SAAK,eAAe;AAAA,EACxB;AAAA,EAEA,IAAY,mBAAmB;AAC3B,WAAO,KAAK,gBAAgB,iBAAiB;AAAA,EACjD;AAAA;AAAA,EAGQ,iBAAiB;AACrB,SAAK,uBAAuB,iBAAiB;AAAA,MACzC,IAAI;AAAA,MAEJ,cAAc,CAAC,QAAQ,WAAW,OAAO,aAAa;AAClD,cAAM,gBAAgB,KAAK;AAC3B,YAAI,cAAc,SAAS,GAAG;AAE1B,gBAAM,CAAC,OAAO,IAAI;AAElB,cAAI,8BAA4B;AAC5B,kBAAM,SAAsC;AAAA,cACxC;AAAA,cACA,UAAU,CAAC,OAAO;AAAA,YACtB;AAEA,iBAAK,gBAAgB,eAAe,0BAA0B,IAAI,MAAM;AAAA,UAC5E;AAEA,qBAAW,MAAM;AAEb,kBAAM,UAAU,cAAc;AAC9B,gBAAI,QAAQ,yCACJ,QAAwB,2CAA4C;AACxE,oCAAuB,QAAwB,MAAM;AAAA,YACzD,OAAO;AACH,mBAAK,2BAA2B,UAAU,EAAE;AAAA,YAChD;AACA,oBAAQ;AAAA,UACZ,GAAG,GAAG;AAEN,gBAAM,cAAc;AAAA,YAChB,QAAQ,QAAQ;AAAA,YAChB,WAAW,QAAQ;AAAA,YACnB,UAAU,CAAC,OAAO;AAAA,UACtB;AAEA,eAAK,YAAY;AAAA,QACrB,OAAO;AAEH,gBAAM,cAAc,KAAK,+BAA+B,QAAQ,WAAW,KAAK;AAChF,eAAK,YAAY;AAAA,QACrB;AAAA,MACJ;AAAA,MAEA,cAAc,CAAC,WAAW,SAAS,MAAM,YAAY;AACjD,YAAI,CAAC,KAAK,WAAW;AACjB,iBAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,QAClC;AAEA,cAAM,EAAE,8BAA2B,UAAU,IAAI;AACjD,cAAM,EAAE,OAAO,UAAU,IAAI,aAAa,CAAC;AAC3C,cAAM,EAAE,OAAO,YAAY,QAAQ,UAAU,IAAI;AAEjD,cAAM,YAAY,KAAK,UAAU,YAC3B,KAAK,qCAAqC,EAAE,WAAW,QAAQ,WAAW,WAAW,GAAG,EAAE,WAAW,SAAS,CAAC,IAC/G,KAAK,qCAAqC,EAAE,SAAS,UAAU,oBAAiB;AAEtF,eAAO;AAAA,MACX;AAAA,MAEA,kBAAkB,CAAC,SAAsC,aAAqB;AAC1E,eAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,MAClC;AAAA,MAEA,qBAAqB,CAAC,YAAyC;AAC3D,YAAI,KAAK,WAAW;AAChB,iBAAO,KAAK,qCAAqC,EAAE,SAAS,WAAW,qBAAqB,cAAc,oBAAiB;AAAA,QAC/H,OAAO;AACH,iBAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,QAClC;AAAA,MACJ;AAAA,MAEA,cAAc,CAAC,SAAsC,UAAU;AAC3D,YAAI,KAAK,WAAW;AAChB,iBAAO,KAAK,qCAAqC,EAAE,SAAS,WAAW,qBAAqB,cAAc,oBAAiB;AAAA,QAC/H,OAAO;AAEH,gBAAM,SAAS,MAAM,OAAO,CAAC,SAAS,KAAK,KAAK,SAAS,OAAO,CAAC;AACjE,cAAI,OAAO,QAAQ;AACf,mBAAO;AAAA,cACH,OAAO,CAAC;AAAA,cACR,OAAO;AAAA,gBACH;AAAA,kBACI,IAAI,wBAAwB;AAAA,kBAC5B,QAAQ,EAAE,OAAO,OAAO;AAAA,gBAC5B;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAEA,eAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,MAClC;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEQ,+BAA+B,QAAgB,WAAmB,OAAe;AA/M7F;AAgNQ,UAAM,0BAAyB,UAAK,sBAAsB,cAAc,MAAM,MAA/C,mBAAkD,KAAK;AACtF,QAAI,CAAC,uBAAwB;AAE7B,UAAM,gBAAgB,uBAAuB,qBAAqB,KAAK;AACvE,QAAI,CAAC,eAAe;AAChB;AAAA,IACJ;AAEA,UAAM,EAAE,QAAQ,MAAM,QAAQ,KAAK,IAAI;AACvC,UAAM,WAAW,KAAK,gBAAgB,eAAe,QAAQ,SAAS;AAEtE,UAAM,oBAAqC,KAAK,iBAAiB,MAAM;AAEvE,WAAO,KAAK,QAAQ,EAAE,QAAQ,CAAC,cAAc;AACzC,YAAM,UAAU,SAAS,SAAS;AAClC,YAAM,EAAE,UAAU,IAAI;AACtB,UAAK,QAA0B,+BAA4C;AACvE;AAAA,MACJ;AACA,UAAI,CAAC,WAAW;AACZ;AAAA,MACJ;AACA,YAAM,EAAE,OAAO,GAAG,MAAM,GAAG,QAAQ,GAAG,SAAS,EAAE,IAAI;AACrD,YAAM,EAAE,eAAe,aAAa,eAAe,YAAY,IAAI;AAAA,QAC/D,eAAe;AAAA,QACf,aAAa,OAAO;AAAA,QACpB,eAAe;AAAA,QACf,aAAa,MAAM;AAAA,MACvB;AAEA,UAAI,UAAU,iBAAiB,eAAe,QAAQ,UAAU,iBAAiB,eAAe,MAAM;AAClG,0BAAkB,KAAK,OAAwB;AAAA,MACnD;AAAA,IACJ,CAAC;AAED,QAAI,kBAAkB,QAAQ;AAC1B,aAAO;AAAA,QACH,WAAW;AAAA,QACX,UAAU;AAAA,QACV;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,qCAAqC,cAG1C,UAAqB;AACpB,UAAM,EAAE,WAAW,QAAQ,IAAI;AAE/B,QAAI,cAAc,SAAS,SAAS,GAAG;AACnC,aAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,IAClC;AAEA,UAAM,EAAE,QAAQ,WAAW,MAAM,IAAI;AACrC,UAAM,SAAS,KAAK,sBAAsB,cAAc,MAAM;AAC9D,UAAM,yBAAyB,iCAAQ,KAAK;AAC5C,UAAM,yBAAyB,iCAAQ,KAAK;AAE5C,UAAM,WAAW,KAAK;AAEtB,QAAI,CAAC,0BAA0B,CAAC,wBAAwB;AACpD,aAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,IAClC;AAEA,UAAM,EAAE,SAAS,IAAI;AAErB,UAAM,aAAa,qBAAqB,KAAK;AAE7C,WAAO,KAAK,mBAAmB,UAAU;AAAA,MACrC;AAAA,MACA;AAAA,MACA,OAAO;AAAA,MACP,cAAc,CAAC,WAAW,mBAAmB;AA1RzD;AA2RgB,cAAM,YAAY,uBAAuB,qBAAqB;AAAA,UAC1D,UAAU,WAAW;AAAA,UACrB,QAAQ,WAAW;AAAA,UACnB,aAAa,WAAW;AAAA,UACxB,WAAW,WAAW;AAAA,QAC1B,CAAC;AAED,cAAM,eAAe;AAAA,UACjB,GAAG;AAAA,UACH,MAAM,uCAAW;AAAA,UACjB,KAAK,uCAAW;AAAA,QACpB;AAEA,eAAO;AAAA,UACH,WAAW;AAAA,UACX,iBAAgB,gCAA2B,cAAc,sBAAsB,MAA/D,YAAoE;AAAA,QACxF;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEQ,mBAAmB,UAA2B,SAQnD;AACC,UAAM;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAI;AAEJ,UAAM,QAAyB,CAAC;AAChC,UAAM,QAAyB,CAAC;AAEhC,UAAM,EAAE,gBAAgB,IAAI;AAE5B,aAAS,QAAQ,CAAC,YAAY;AAC1B,YAAM,EAAE,WAAW,eAAe,IAAI;AACtC,UAAI,CAAC,WAAW;AACZ;AAAA,MACJ;AACA,YAAM,mBAAmB,aAAa,WAAW,cAAc;AAC/D,YAAM,gBAAwC;AAAA,QAC1C,GAAG;AAAA,QACH;AAAA,QACA;AAAA,QACA,WAAW,QAAQ,QAAQ,YAAY,MAAM,iBAAiB;AAAA,QAC9D,WAAW,iBAAiB;AAAA,QAC5B,gBAAgB,iBAAiB;AAAA,MACrC;AAEA,UAAI,OAAO;AACP,cAAM,EAAE,MAAM,MAAM,QAAQ,IAAI,gBAAgB,iBAAiB,CAAC,aAAa,CAAoB;AACnG,cAAM,KAAK;AAAA,UACP,IAAI,wBAAwB;AAAA,UAC5B,QAAQ;AAAA,YACJ;AAAA,YACA;AAAA,YACA;AAAA,YACA,IAAI;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ,CAAC;AACD,cAAM,KAAK;AAAA,UACP,IAAI,wBAAwB;AAAA,UAC5B,QAAQ;AAAA,YACJ;AAAA,YACA;AAAA,YACA;AAAA,YACA,IAAI;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ,CAAC;AAAA,MACL,OAAO;AACH,cAAM,EAAE,MAAM,MAAM,QAAQ,IAAI,gBAAgB,cAAc,CAAC,aAAa,CAAoB;AAChG,cAAM,KAAK,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,IAAI,MAAM,QAAQ,WAAW,SAAS,qBAA8B,EAAE,CAAC;AAC9H,cAAM,KAAK,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,IAAI,MAAM,QAAQ,WAAW,SAAS,qBAA8B,EAAE,CAAC;AAAA,MAClI;AAAA,IACJ,CAAC;AAED,WAAO,EAAE,OAAO,MAAM;AAAA,EAC1B;AAAA;AAAA,EAGQ,qCACJ,cAMA,aAIF;AAhYN;AAiYQ,UAAM;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAI;AAEJ,UAAM;AAAA,MACF;AAAA,MACA;AAAA,IACJ,IAAI;AAEJ,QAAI,cAAc,SAAS,SAAS,GAAG;AACnC,aAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,IAClC;AAEA,UAAM,0BAAyB,UAAK,sBAAsB,cAAc,MAAM,MAA/C,mBAAkD,KAAK;AAEtF,QAAI,CAAC,0BAA0B,CAAC,KAAK,WAAW;AAC5C,aAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,IAClC;AAEA,UAAM,EAAE,SAAS,IAAI,KAAK;AAE1B,QAAI,CAAC,WAAW;AACZ,aAAO,KAAK,qCAAqC;AAAA,QAC7C,SAAS,EAAE,QAAQ,WAAW,OAAO,qBAAqB,UAAU,EAA+B;AAAA,QACnG;AAAA,MACJ,GAAG,QAAQ;AAAA,IACf;AAEA,UAAM,EAAE,QAAQ,CAAC,YAAY,YAAY,GAAG,QAAQ,IAAI,yBAAyB,CAAC,WAAW,UAAU,CAAC;AACxG,UAAM,EAAE,KAAK,SAAS,KAAK,QAAQ,IAAI,QAAQ,WAAW,UAAU,WAAW,WAAW;AAC1F,UAAM,EAAE,KAAK,UAAU,KAAK,SAAS,IAAI,QAAQ,aAAa,UAAU,aAAa,WAAW;AAEhG,UAAM,WAAW,uBAAuB,qBAAqB;AAAA,MACzD,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,aAAa;AAAA,MACb,WAAW;AAAA,IACf,CAAC;AACD,UAAM,YAAY,uBAAuB,qBAAqB;AAAA,MAC1D,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,aAAa;AAAA,MACb,WAAW;AAAA,IACf,CAAC;AAED,QAAI,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,WAAW;AAC5C,aAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,IAClC;AAEA,UAAM,aAAa,UAAU,SAAS,SAAS;AAC/C,UAAM,YAAY,UAAU,SAAS,SAAS;AAC9C,UAAM,YAAY,WAAW;AAC7B,UAAM,eAAe,WAAW;AAEhC,WAAO,KAAK,mBAAmB,UAAU;AAAA,MACrC;AAAA,MACA;AAAA,MACA,cAAc,CAAC,WAAW,mBAAgB;AA7btD,YAAAC,KAAA;AA6b0D;AAAA,UAC1C,WAAW;AAAA,YACP,GAAG;AAAA,YACH,QAAOA,MAAA,uCAAW,SAAX,OAAAA,MAAmB,KAAK;AAAA,YAC/B,OAAM,4CAAW,QAAX,YAAkB,KAAK;AAAA,UACjC;AAAA,UACA,gBAAgB;AAAA,YACZ,GAAG;AAAA,YACH,IAAI;AAAA,cACA,GAAG,eAAe;AAAA,cAClB,KAAK,eAAe,GAAG,MAAM;AAAA,cAC7B,QAAQ,eAAe,GAAG,SAAS;AAAA,YACvC;AAAA,YACA,MAAM;AAAA,cACF,GAAG,eAAe;AAAA,cAClB,KAAK,eAAe,KAAK,MAAM;AAAA,cAC/B,QAAQ,eAAe,KAAK,SAAS;AAAA,YACzC;AAAA,UACJ;AAAA,QACJ;AAAA;AAAA,MACA,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AACJ;AA9Xa,mCAAN;AAAA,EASE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAbI;;;AC7DN,IAAM,mCAAN,cAA+C,WAAW;AAAA,EAC7D,YAC6C,wBACD,uBACH,oBACI,wBACL,qBACtC;AACE,UAAM;AANmC;AACD;AACH;AACI;AACL;AAGpC,SAAK,oBAAoB;AACzB,SAAK,qBAAqB;AAC1B,SAAK,0BAA0B;AAC/B,SAAK,0BAA0B;AAAA,EACnC;AAAA,EAEQ,sBAAsB;AAC1B,UAAM,YAAY,KAAK,uBAAuB,sBAAgC,EAAmB,YAAY;AAC7G,UAAM,eAAe,KAAK,oBAAoB;AAC9C,UAAM,YAAY,cAAc,CAAC,WAAW,YAAY,CAAC;AAEzD,SAAK;AAAA,MACD,UACK;AAAA,QACG,UAAU,CAAC,CAAC,UAAU,CAAC,MAAM;AACzB,cAAI,CAAC,UAAU;AACX,iBAAK,uBAAuB,kBAAkB,KAAK;AACnD,mBAAO;AAAA,UACX;AAEA,iBAAO,SAAS,aAAa;AAAA,YACzB,IAAI,CAAC,UAAU;AACX,kBAAI,CAAC,OAAO;AACR,qBAAK,uBAAuB,kBAAkB,KAAK;AACnD;AAAA,cACJ;AAEA,oBAAM,SAAS,SAAS,UAAU;AAClC,oBAAM,YAAY,MAAM,WAAW;AAEnC,oBAAM,0BAA0B,KAAK,mBAChC,kBAAkB;AAAA,gBACf,IAAI,uBAAuB,MAAM,EAAE;AAAA,gBACnC,IAAI,wBAAwB,QAAQ,SAAS,EAAE;AAAA,cACnD,CAAC,EACA,MAAM,CAAC,eAAe,WAAW,KAAK;AAE3C,kBAAI,yBAAyB;AACzB,qBAAK,uBAAuB,kBAAkB,IAAI;AAAA,cACtD,OAAO;AACH,qBAAK,8BAA8B,UAAU,KAAK;AAAA,cACtD;AAAA,YACJ,CAAC;AAAA,UACL;AAAA,QACJ,CAAC;AAAA,MACL,EACC,UAAU;AAAA,IACnB;AAAA,EACJ;AAAA,EAEQ,8BAA8B,UAAoB,OAAkB;AACxE,SAAK,uBAAuB,kBAAkB,KAAK;AAEnD,UAAM,SAAS,SAAS,UAAU;AAClC,UAAM,YAAY,MAAM,WAAW;AACnC,UAAM,cAAc,KAAK,uBAAuB,eAAe,QAAQ,SAAS;AAChF,UAAM,oBAAoB,OAAO,OAAO,WAAW;AAEnD,UAAM,eAAe,KAAK,sBAAsB,cAAc,MAAM;AACpE,UAAM,QAAQ,6CAAc;AAE5B,QAAI,CAAC,OAAO;AACR;AAAA,IACJ;AAEA,UAAM,UAAU,MAAM,qBAAqB;AAE3C,YAAQ,QAAQ,CAAC,WAAW;AACxB,UACI,OAAO,qCACP,kBAAkB,KAAK,CAAC,SAAS,OAAO,KAAK,SAAS,KAAK,SAAS,CAAC,GACvE;AACE,cAAM,aAAa,MAAM;AAAA,MAC7B;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEQ,uBAAuB;AAC3B,UAAM,YAAY,KAAK,uBAAuB,sBAAgC,EAAmB,YAAY;AAC7G,UAAM,eAAe,KAAK,oBAAoB;AAE9C,UAAM,YAAY,cAAc,CAAC,WAAW,YAAY,CAAC;AAEzD,SAAK;AAAA,MACD,UACK;AAAA,QACG,UAAU,CAAC,CAAC,UAAU,CAAC,MAAM;AACzB,cAAI,CAAC,UAAU;AACX,iBAAK,uBAAuB,mBAAmB,KAAK;AACpD,mBAAO;AAAA,UACX;AAEA,iBAAO,SAAS,aAAa;AAAA,YACzB,IAAI,CAAC,UAAU;AACX,kBAAI,CAAC,OAAO;AACR,qBAAK,uBAAuB,mBAAmB,KAAK;AACpD;AAAA,cACJ;AAEA,oBAAM,SAAS,SAAS,UAAU;AAClC,oBAAM,YAAY,MAAM,WAAW;AAEnC,oBAAM,0BAA0B,KAAK,mBAChC,kBAAkB;AAAA,gBACf,IAAI,2BAA2B,MAAM,EAAE;AAAA,gBACvC,IAAI,wBAAwB,QAAQ,SAAS,EAAE;AAAA,cACnD,CAAC,EACA,MAAM,CAAC,eAAe,WAAW,KAAK;AAE3C,kBAAI,yBAAyB;AACzB,qBAAK,uBAAuB,mBAAmB,IAAI;AAAA,cACvD,OAAO;AACH,qBAAK,4BAA4B,UAAU,KAAK;AAAA,cACpD;AAAA,YACJ,CAAC;AAAA,UACL;AAAA,QACJ,CAAC;AAAA,MACL,EACC,UAAU;AAAA,IACnB;AAAA,EACJ;AAAA,EAEQ,4BAA4B,UAAoB,OAAkB;AACtE,SAAK,uBAAuB,mBAAmB,KAAK;AAEpD,UAAM,SAAS,SAAS,UAAU;AAClC,UAAM,YAAY,MAAM,WAAW;AACnC,UAAM,cAAc,KAAK,uBAAuB,eAAe,QAAQ,SAAS;AAChF,UAAM,oBAAoB,OAAO,OAAO,WAAW;AAEnD,UAAM,eAAe,KAAK,sBAAsB,cAAc,MAAM;AACpE,UAAM,QAAQ,6CAAc;AAE5B,QAAI,CAAC,OAAO;AACR;AAAA,IACJ;AAEA,UAAM,UAAU,MAAM,qBAAqB;AAE3C,YAAQ,QAAQ,CAAC,WAAW;AACxB,UACI,OAAO,qCACP,kBAAkB,KAAK,CAAC,SAAS,OAAO,KAAK,SAAS,KAAK,SAAS,CAAC,GACvE;AACE,cAAM,sBAAsB,MAAM;AAAA,MACtC;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEQ,4BAA4B;AAChC,UAAM,YAAY,KAAK,uBAAuB,sBAAgC,EAAmB,YAAY;AAC7G,UAAM,eAAe,KAAK,oBAAoB;AAC9C,SAAK;AAAA,MACD,cAAc,CAAC,WAAW,YAAY,CAAC,EAClC;AAAA,QACG,UAAU,CAAC,CAAC,UAAU,CAAC,MAAM;AACzB,cAAI,CAAC,SAAU,QAAO;AAEtB,iBAAO,SAAS,aAAa;AAAA,YACzB,UAAU,CAAC,UAAU;AACjB,kBAAI,CAAC,OAAO;AACR,uBAAO;AAAA,cACX;AAEA,oBAAM,SAAS,SAAS,UAAU;AAClC,oBAAM,YAAY,MAAM,WAAW;AACnC,oBAAM,eAAe,KAAK,sBAAsB,cAAc,MAAM;AACpE,oBAAM,QAAQ,6CAAc;AAE5B,kBAAI,CAAC,OAAO;AACR,uBAAO;AAAA,cACX;AAEA,oBAAM,cAAc,MAAM,uBAAuB;AAEjD,oBAAM,2BAA2B,KAAK,mBACjC,mBAAmB;AAAA,gBAChB,IAAI,uBAAuB,MAAM,EAAE;AAAA,gBACnC,IAAI,wBAAwB,QAAQ,SAAS,EAAE;AAAA,cACnD,CAAC,EACA;AAAA,gBACG,IAAI,CAAC,gBAAgB,YAAY,MAAM,CAAC,SAAS,KAAK,KAAK,CAAC;AAAA,gBAC5D,qBAAqB;AAAA,cACzB;AAEJ,qBAAO,yBAAyB;AAAA,gBAC5B,IAAI,CAAC,gBAAgB;AAAA,kBACjB;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,gBACJ,EAAE;AAAA,cACN;AAAA,YACJ,CAAC;AAAA,UACL;AAAA,QACJ,CAAC;AAAA,MACL,EACC,UAAU;AAAA,QACP,MAAM,CAAC,EAAE,YAAY,OAAO,aAAa,QAAQ,UAAU,MAAM;AAC7D,eAAK,uBAAuB,kBAAkB,UAAU;AAExD,gBAAM,UAAU,MAAM,qBAAqB;AAC3C,gBAAM,cAAc,KAAK,uBAAuB,eAAe,QAAQ,SAAS;AAChF,gBAAM,oBAAoB,OAAO,OAAO,WAAW;AAEnD,cAAI,YAAY;AACZ,iBAAK,uBAAuB,gBAAgB,iBAAiB;AAAA,UACjE,OAAO;AACH,oBAAQ,QAAQ,CAAC,WAAW;AACxB,kBACI,OAAO,qCACP,kBAAkB,KAAK,CAAC,SAAS,OAAO,KAAK,SAAS,KAAK,SAAS,CAAC,GACvE;AACE,sBAAM,aAAa,MAAM;AAAA,cAC7B;AAAA,YACJ,CAAC;AACD,wBAAY,qBAAqB;AAAA,UACrC;AAAA,QACJ;AAAA,QACA,UAAU,MAAM;AACZ,eAAK,uBAAuB,kBAAkB,IAAI;AAClD,gBAAM,WAAW,KAAK,uBAAuB,sBAAgC,EAAmB,YAAY;AAC5G,gBAAM,QAAQ,qCAAU;AACxB,gBAAM,SAAS,qCAAU;AACzB,gBAAM,YAAY,+BAAO;AACzB,cAAI,CAAC,UAAU,CAAC,WAAW;AACvB;AAAA,UACJ;AACA,gBAAM,cAAc,KAAK,uBAAuB,eAAe,QAAQ,SAAS;AAChF,gBAAM,oBAAoB,OAAO,OAAO,WAAW;AACnD,eAAK,uBAAuB,gBAAgB,iBAAiB;AAAA,QACjE;AAAA,MACJ,CAAC;AAAA,IACT;AAAA,EACJ;AAAA,EAEQ,4BAA4B;AAChC,UAAM,YAAY,KAAK,uBAAuB,sBAAgC,EAAmB,YAAY;AAC7G,UAAM,eAAe,KAAK,oBAAoB;AAE9C,SAAK;AAAA,MACD,cAAc,CAAC,WAAW,YAAY,CAAC,EAClC;AAAA,QACG,UAAU,CAAC,CAAC,UAAU,CAAC,MAAM;AACzB,cAAI,CAAC,UAAU;AACX,mBAAO;AAAA,UACX;AAEA,iBAAO,SAAS,aAAa;AAAA,YACzB,UAAU,CAAC,UAAU;AACjB,kBAAI,CAAC,OAAO;AACR,uBAAO;AAAA,cACX;AAEA,oBAAM,SAAS,SAAS,UAAU;AAClC,oBAAM,YAAY,MAAM,WAAW;AACnC,oBAAM,eAAe,KAAK,sBAAsB,cAAc,MAAM;AACpE,oBAAM,QAAQ,6CAAc;AAE5B,kBAAI,CAAC,OAAO;AACR,uBAAO;AAAA,cACX;AAEA,oBAAM,cAAc,MAAM,uBAAuB;AAEjD,oBAAM,kCAAkC,KAAK,mBACxC,mBAAmB;AAAA,gBAChB,IAAI,2BAA2B,MAAM,EAAE;AAAA,gBACvC,IAAI,wBAAwB,QAAQ,SAAS,EAAE;AAAA,cACnD,CAAC,EACA;AAAA,gBACG,IAAI,CAAC,gBAAgB,YAAY,MAAM,CAAC,SAAS,KAAK,KAAK,CAAC;AAAA,gBAC5D,qBAAqB;AAAA,cACzB;AAEJ,qBAAO,gCAAgC;AAAA,gBACnC,IAAI,CAAC,gBAAgB;AAAA,kBACjB;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,gBACJ,EAAE;AAAA,cACN;AAAA,YACJ,CAAC;AAAA,UACL;AAAA,QACJ,CAAC;AAAA,MACL,EACC,UAAU;AAAA,QACP,MAAM,CAAC,EAAE,YAAY,OAAO,aAAa,QAAQ,UAAU,MAAM;AAC7D,eAAK,uBAAuB,mBAAmB,UAAU;AAEzD,gBAAM,UAAU,MAAM,qBAAqB;AAC3C,gBAAM,cAAc,KAAK,uBAAuB,eAAe,QAAQ,SAAS;AAChF,gBAAM,oBAAoB,OAAO,OAAO,WAAW;AAEnD,cAAI,YAAY;AACZ,oBAAQ,QAAQ,CAAC,WAAW;AACxB,kBACI,OAAO,qCACP,kBAAkB,KAAK,CAAC,SAAS,OAAO,KAAK,SAAS,KAAK,SAAS,CAAC,GACvE;AACE,sBAAM,oBAAoB,MAAM;AAAA,cACpC;AAAA,YACJ,CAAC;AAED,iBAAK,uBAAuB,gBAAgB,iBAAiB;AAAA,UACjE,OAAO;AACH,oBAAQ,QAAQ,CAAC,WAAW;AACxB,kBACI,OAAO,qCACP,kBAAkB,KAAK,CAAC,SAAS,OAAO,KAAK,SAAS,KAAK,SAAS,CAAC,GACvE;AACE,sBAAM,sBAAsB,MAAM;AAAA,cACtC;AAAA,YACJ,CAAC;AAED,wBAAY,qBAAqB;AAAA,UACrC;AAAA,QACJ;AAAA,QACA,UAAU,MAAM;AACZ,gBAAM,WAAW,KAAK,uBAAuB,sBAAgC,EAAmB,YAAY;AAC5G,cAAI,CAAC,UAAU;AACX;AAAA,UACJ;AAEA,gBAAM,SAAS,SAAS,UAAU;AAClC,gBAAM,QAAQ,SAAS,eAAe;AACtC,cAAI,CAAC,OAAO;AACR;AAAA,UACJ;AAEA,gBAAM,YAAY,MAAM,WAAW;AACnC,gBAAM,eAAe,KAAK,sBAAsB,cAAc,MAAM;AACpE,gBAAM,QAAQ,6CAAc;AAE5B,cAAI,CAAC,OAAO;AACR;AAAA,UACJ;AAEA,gBAAM,cAAc,KAAK,uBAAuB,eAAe,QAAQ,SAAS;AAChF,gBAAM,oBAAoB,OAAO,OAAO,WAAW;AAEnD,eAAK,uBAAuB,mBAAmB,IAAI;AAEnD,gBAAM,UAAU,MAAM,qBAAqB;AAC3C,kBAAQ,QAAQ,CAAC,WAAW;AACxB,gBACI,OAAO,qCACP,kBAAkB,KAAK,CAAC,SAAS,OAAO,KAAK,SAAS,KAAK,SAAS,CAAC,GACvE;AACE,oBAAM,sBAAsB,MAAM;AAAA,YACtC;AAAA,UACJ,CAAC;AAAA,QACL;AAAA,MACJ,CAAC;AAAA,IACT;AAAA,EACJ;AACJ;AAhXa,mCAAN;AAAA,EAEE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,0BAAO,kBAAkB;AAAA,GANrB;;;ACFN,IAAM,iCAAN,cAA6C,WAAW;AAAA,EAC3D,YAC2D,+BACR,uBACN,wBACD,uBAC1C;AACE,UAAM;AALiD;AACR;AACN;AACD;AAIxC,SAAK,cAAc;AAAA,EACvB;AAAA,EAEQ,gBAAgB;AACpB,SAAK;AAAA,MACD,KAAK,8BAA8B,YAAY;AAAA,QAC3C,KAAK,8BAA8B,YAAY,mBAAmB,EAAE;AAAA,QACpE;AAAA,UACI,SAAS,CAAC,QAAQ,KAAK,SAAS;AAC5B,kBAAM,EAAE,QAAQ,OAAO,UAAU,IAAI;AACrC,kBAAM,WAAW,KAAK,uBAAuB,sBAAsB,MAAM;AACzE,kBAAM,cAAc,qCAAW;AAC/B,gBAAI,aAAa;AACb,0BAAY,MAAM,QAAQ,CAAC,OAAO;AAC9B,qBAAK,sBAAsB,cAAc,YAAY,KAAK,EAAE,GAAG,KAAK;AAAA,cACxE,CAAC;AAAA,YACL;AAEA,mBAAO,KAAK;AAAA,UAChB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAEA,SAAK;AAAA,MACD,KAAK,8BAA8B,YAAY;AAAA,QAC3C,KAAK,8BAA8B,YAAY,mBAAmB,EAAE;AAAA,QACpE;AAAA,UACI,SAAS,CAAC,OAAO,KAAK,SAAS;AAC3B,kBAAM,EAAE,QAAQ,UAAU,IAAI;AAC9B,kBAAM,WAAW,KAAK,sBAAsB,cAAc,MAAM;AAChE,gBAAI,CAAC,UAAU;AACX,qBAAO,KAAK,KAAK;AAAA,YACrB;AAEA,kBAAM,WAAW,SAAS,KAAK,2BAA2B,EAAE,iBAAiB,SAAS;AACtF,gBAAI,CAAC,UAAU;AACX,qBAAO,KAAK,KAAK;AAAA,YACrB;AACA,kBAAM,WAAW,KAAK,uBAAuB,sBAAsB,MAAM;AACzE,kBAAM,cAAc,qCAAW,IAAI;AACnC,gBAAI,CAAC,aAAa;AACd,qBAAO,KAAK,KAAK;AAAA,YACrB;AAEA,kBAAM,EAAE,QAAQ,OAAO,IAAI,SAAS;AACpC,kBAAM,WAAmB,QAAQ,EAAE,GAAG,MAAM,IAAI,EAAE,aAAa,GAAG,WAAW,GAAG,QAAQ,GAAG,UAAU,EAAE;AACvG,kBAAM,OAAO,YAAY,MAAM,IAAI,CAAC,QAAQ,YAAY,KAAK,GAAG,CAAC,EAAE,OAAO,CAAC,SAAS,KAAK,mCAA2C;AACpI,gBAAI,KAAK,QAAQ;AACb,mBAAK,QAAQ,CAAC,UAAU;AACpB,oBAAI,CAAC,MAAM,WAAW,MAAM,aAAa,MAAM,SAAS,MAAM,UAAU,IAAI,KAAK,MAAM,SAAS,MAAM,UAAU,GAAG,KAAK,MAAM,SAAS,MAAM,UAAU,KAAK,KAAK,MAAM,SAAS,MAAM,UAAU,MAAM,GAAG;AACrM,wBAAM,QAAQ,SAAS,SAAS,qBAAqB,MAAM,UAAU,MAAM,MAAM,UAAU,KAAK,QAAQ,QAAQ,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;AAC9H,wBAAM,MAAM,SAAS,SAAS,qBAAqB,MAAM,UAAU,OAAO,MAAM,UAAU,OAAO,MAAM,UAAU,MAAM,MAAM,UAAU,QAAQ,QAAQ,QAAQ,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;AAC7K,sBAAI,MAAM,SAAS,SAAS,aAAa;AACrC,6BAAS,cAAc,MAAM;AAAA,kBACjC;AAEA,sBAAI,MAAM,MAAM,SAAS,UAAU;AAC/B,6BAAS,WAAW,MAAM;AAAA,kBAC9B;AAEA,sBAAI,SAAS,SAAS,IAAI,KAAK;AAC3B,6BAAS,SAAS,IAAI;AAAA,kBAC1B;AAEA,sBAAI,SAAS,YAAY,IAAI,QAAQ;AACjC,6BAAS,YAAY,IAAI;AAAA,kBAC7B;AAAA,gBACJ;AAAA,cACJ,CAAC;AACD,qBAAO,KAAK,QAAQ;AAAA,YACxB;AAEA,mBAAO,KAAK,KAAK;AAAA,UACrB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AAxFa,iCAAN;AAAA,EAEE,0BAAO,4BAA4B;AAAA,EACnC,0BAAO,oBAAoB;AAAA,EAC3B;AAAA,EACA;AAAA,GALI;;;ACcb,IAAM,kBAAkB;AAAA,EACpB,iBAAiB;AAAA,EACjB,iBAAiB;AAAA,EACjB,iBAAiB;AAAA,EACjB,iBAAiB;AAAA,EAEjB,2BAA2B;AAAA,EAC3B,yBAAyB;AAAA,EACzB,2BAA2B;AAAA,EAC3B,4BAA4B;AAAA,EAE5B,sBAAsB;AAAA,EACtB,oBAAoB;AAAA,EACpB,wBAAwB;AAAA,EACxB,mBAAmB;AAAA,EAEnB,oBAAoB;AAAA,EACpB,8BAA8B;AAAA,EAC9B,8BAA8B;AAAA,EAC9B,oBAAoB;AAAA,EACpB,gBAAgB;AAAA,EAChB,gBAAgB;AAAA,EAChB,iBAAiB;AACrB;AAEA,IAAM,oBAAoB;AAAA,EACtB,sBAAsB;AAAA,EACtB,qBAAqB;AAAA,EACrB,sBAAsB;AAAA,EACtB,qBAAqB;AAAA,EACrB,8BAA8B;AAAA,EAC9B,6BAA6B;AACjC;AAEO,IAAM,0CAAN,cAAsD,WAAoC;AAAA,EAC7F,YACqB,UACuB,uBACN,iBACa,yBACO,yBACJ,0BACX,sBACE,wBACA,wBAC3C;AACE,UAAM;AAVW;AACuB;AACN;AACa;AACO;AACJ;AACX;AACE;AACA;AAIzC,SAAK,0BAA0B;AAC/B,SAAK,iBAAiB;AACtB,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EAEQ,4BAA4B;AAChC,SAAK;AAAA,MACD,KAAK,yBAAyB,iBAAiB;AAAA,QAE3C,cAAc,CAAC,gBAAgB;AAC3B,cAAI,CAAC,gBAAgB,SAAS,YAAY,EAAE,GAAG;AAC3C,mBAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,UAClC;AACA,cAAI,YAAY,UAAU,MAAM;AAC5B,mBAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,UAClC;AACA,gBAAM,MAAM,YAAY;AACxB,cAAI,QAAQ,iBAAiB,IAAI;AAC7B,mBAAO,KAAK,oBAAoB,YAAY,QAAmC,QAAQ;AAAA,UAC3F,WAAW,CAAC,gBAAgB,IAAI,gBAAgB,IAAI,iBAAiB,EAAE,EAAE,SAAS,GAAG,GAAG;AACpF,mBAAO,KAAK,sBAAsB,YAAY,MAAiC;AAAA,UACnF,WAAW,QAAQ,iBAAiB,IAAI;AACpC,mBAAO,KAAK,oBAAoB,YAAY,QAAmC,QAAQ;AAAA,UAC3F,WAAW,QAAQ,iBAAiB,IAAI;AACpC,mBAAO,KAAK,oBAAoB,YAAY,QAAsC,QAAQ;AAAA,UAC9F,WAAW,QAAQ,iBAAiB,IAAI;AACpC,mBAAO,KAAK,oBAAoB,YAAY,QAAsC,QAAQ;AAAA,UAC9F,WAAW,QAAQ,2BAA2B,IAAI;AAC9C,kBAAM,EAAE,MAAM,IAAI,YAAY;AAC9B,mBAAO,KAAK,kBAAkB,OAAO,kBAA4B;AAAA,UACrE,WAAW,QAAQ,yBAAyB,IAAI;AAC5C,kBAAM,EAAE,MAAM,IAAI,YAAY;AAC9B,mBAAO,KAAK,kBAAkB,OAAO,gBAA0B;AAAA,UACnE,WAAW,QAAQ,2BAA2B,IAAI;AAC9C,kBAAM,EAAE,MAAM,IAAI,YAAY;AAC9B,mBAAO,KAAK,kBAAkB,OAAO,kBAA4B;AAAA,UACrE,WAAW,QAAQ,4BAA4B,IAAI;AAC/C,kBAAM,EAAE,MAAM,IAAI,YAAY;AAC9B,mBAAO,KAAK,kBAAkB,OAAO,mBAA6B;AAAA,UACtE,WAAW,QAAQ,oBAAoB,MAAM,QAAQ,8BAA8B,IAAI;AACnF,kBAAM,SAAS,YAAY;AAC3B,kBAAM,EAAE,QAAQ,WAAW,OAAO,IAAI;AACtC,mBAAO,KAAK,6BAA6B,QAAQ,WAAW,MAAM;AAAA,UACtE,WAAW,QAAQ,8BAA8B,MAAM,QAAQ,oBAAoB,IAAI;AACnF,kBAAM,SAAS,YAAY;AAC3B,kBAAM,EAAE,QAAQ,WAAW,OAAO,IAAI;AACtC,mBAAO,KAAK,6BAA6B,QAAQ,WAAW,MAAM;AAAA,UACtE,WAAW,QAAQ,sBAAsB,MAAM,QAAQ,oBAAoB,MAAM,QAAQ,wBAAwB,MAAM,QAAQ,mBAAmB,IAAI;AAClJ,kBAAM,SAAS,YAAY;AAC3B,kBAAM,EAAE,QAAQ,WAAW,OAAO,IAAI;AACtC,kBAAM,QAAQ,QAAQ,sBAAsB,MAAM,QAAQ,oBAAoB;AAC9E,mBAAO,KAAK,gCAAgC,QAAQ,WAAW,QAAQ,KAAK;AAAA,UAChF;AAEA,iBAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,QAClC;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,kBAAkB,OAAe,MAAyB;AAC9D,UAAM,YAAY,sBAAsB,KAAK,sBAAsB;AAEnE,QAAI,aAAa,MAAM;AACnB,aAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,IAClC;AACA,UAAM,SAAS,UAAU;AACzB,UAAM,YAAY,UAAU;AAE5B,UAAM,QAAyB,CAAC;AAChC,UAAM,QAAyB,CAAC;AAEhC,UAAM,cAAc,KAAK,qBAAqB,eAAe,QAAQ,SAAS;AAE9E,UAAM,iBAA2C,CAAC;AAClD,UAAM,iBAA2C,CAAC;AAElD,WAAO,KAAK,WAAW,EAAE,QAAQ,CAAC,cAAc;AAC5C,YAAM,UAAU,YAAY,SAAS;AAErC,YAAM,EAAE,gBAAgB,oBAAoB,gBAAgB,mBAAmB,IAAI,KAAK,2BAA2B,OAAO,MAAM,OAAO;AAEvI,qBAAe,KAAK,GAAG,kBAAkB;AACzC,qBAAe,KAAK,GAAG,kBAAkB;AAAA,IAC7C,CAAC;AAED,QAAI,eAAe,WAAW,KAAK,eAAe,WAAW,GAAG;AAC5D,aAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,IAClC;AAEA,QAAI,eAAe,SAAS,GAAG;AAC3B,YAAM,eAAe,KAAK,qBAAqB,iBAAiB,cAAiC;AACjG,YAAM,EAAE,MAAM,MAAM,QAAQ,IAAI;AAChC,YAAM,KAAK,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,QAAQ,WAAW,IAAI,MAAM,SAAS,qBAA8B,EAAE,CAAC;AAC9H,YAAM,KAAK,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,QAAQ,WAAW,IAAI,MAAM,SAAS,qBAA8B,EAAE,CAAC;AAAA,IAClI;AAEA,QAAI,eAAe,SAAS,GAAG;AAC3B,YAAM,eAAe,KAAK,qBAAqB,iBAAiB,cAAiC;AACjG,YAAM,aAAa,aAAa;AAChC,YAAM,aAAa,aAAa;AAChC,YAAM,gBAAgB,aAAa;AACnC,YAAM,KAAK,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,QAAQ,WAAW,IAAI,YAAY,SAAS,eAAe,qBAA8B,EAAE,CAAC;AACnJ,YAAM,KAAK,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,QAAQ,WAAW,IAAI,YAAY,SAAS,eAAe,qBAA8B,EAAE,CAAC;AAAA,IACvJ;AAEA,UAAM,KAAK,EAAE,IAAI,sCAAsC,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC;AAC7E,UAAM,KAAK,EAAE,IAAI,sCAAsC,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC;AAE7E,WAAO;AAAA,MACH;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,2BAA2B,OAAe,MAAyB,SAAwB;AAC/F,UAAM,iBAA2C,CAAC;AAClD,UAAM,iBAA2C,CAAC;AAElD,UAAM,EAAE,gBAAgB,iCAA8C,WAAW,QAAQ,WAAW,UAAU,IAAI;AAClH,UAAM,EAAE,MAAM,GAAG,IAAI;AACrB,UAAM,EAAE,KAAK,SAAS,QAAQ,WAAW,IAAI;AAC7C,UAAM,EAAE,KAAK,OAAO,QAAQ,SAAS,IAAI;AAEzC,QAAI,kBAAkB,QAAQ,aAAa,MAAM;AAC7C,aAAO;AAAA,QACH;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,EAAE,UAAU,QAAQ,aAAa,UAAU,IAAI;AACrD,QAAI,oBAAqD;AACzD,QAAI,eAA0C;AAE9C,QAAI,SAAS,sBAAgC,WAAW,YAAY,SAAS,QAAQ;AACjF,UAAI,cAAc,eAAe,YAAY,WAAW;AAEpD,uBAAe,KAAK,EAAE,QAAQ,WAAW,UAAU,CAAC;AAAA,MACxD,OAAO;AAEH,cAAM,QAAQ,KAAK,WAAW,gBAAgB,WAAW,aAAa,WAAW,UAAU;AAC3F,4BAAoB,+BAAO;AAC3B,uBAAe,+BAAO;AAAA,MAC1B;AAAA,IACJ,WAAW,SAAS,oBAA8B,cAAc,eAAe,YAAY,WAAW;AAClG,UAAI,WAAW,YAAY,SAAS,QAAQ;AAExC,uBAAe,KAAK,EAAE,QAAQ,WAAW,UAAU,CAAC;AAAA,MACxD,OAAO;AAEH,cAAM,QAAQ,KAAK,WAAW,gBAAgB,WAAW,UAAU,QAAQ,UAAU;AACrF,4BAAoB,+BAAO;AAC3B,uBAAe,+BAAO;AAAA,MAC1B;AAAA,IACJ,WAAW,SAAS,oBAA8B;AAC9C,YAAM,QAAQ,KAAK,WAAW,gBAAgB,WAAW,UAAU,QAAQ,UAAU;AACrF,0BAAoB,+BAAO;AAC3B,qBAAe,+BAAO;AAAA,IAC1B,WAAW,SAAS,qBAA+B;AAC/C,YAAM,QAAQ,KAAK,WAAW,gBAAgB,WAAW,aAAa,WAAW,UAAU;AAC3F,0BAAoB,+BAAO;AAC3B,qBAAe,+BAAO;AAAA,IAC1B;AAEA,QAAI,qBAAqB,QAAQ,gBAAgB,MAAM;AACnD,YAAMC,gBAAe,2BAA2B,mBAAmB,KAAK,yBAAyB,KAAK,uBAAuB;AAC7H,qBAAe,KAAK,EAAE,GAAG,SAAS,gBAAgB,mBAAmB,WAAWA,cAAa,CAAC;AAAA,IAClG;AAEA,WAAO,EAAE,gBAAgB,eAAe;AAAA,EAC5C;AAAA,EAEQ,mBAAmB,WAAsC,gBAAiC,SAAwB;AACtH,UAAM,oBAAoB,2BAA2B,EAAE,GAAG,UAAU,GAAG,KAAK,uBAAuB;AACnG,QAAI,qBAAqB,MAAM;AAC3B,qBAAe,KAAK;AAAA,QAChB,GAAG;AAAA,QACH,gBAAgB;AAAA,MACpB,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAAA,EAGQ,6BAA6B,QAAgB,WAAmB,QAAkB;AACtF,UAAM,cAAc,KAAK,uBAAuB,eAAe,QAAQ,SAAS;AAChF,UAAM,iBAAkC,CAAC;AACzC,UAAM,oBAAqC,CAAC;AAE5C,WAAO,KAAK,WAAW,EAAE,QAAQ,CAAC,cAAc;AAC5C,YAAM,UAAU,YAAY,SAAS;AACrC,YAAM,EAAE,gBAAgB,WAAW,gCAA6C,IAAI;AACpF,UAAI,+BAA4C;AAC5C,aAAK,mBAAmB,WAAW,gBAAgB,OAAO;AAAA,MAC9D,OAAO;AACH,cAAM,EAAE,MAAM,GAAG,IAAI;AACrB,cAAM,EAAE,KAAK,SAAS,QAAQ,WAAW,IAAI;AAC7C,cAAM,EAAE,KAAK,OAAO,QAAQ,SAAS,IAAI;AACzC,iBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,gBAAM,QAAQ,OAAO,CAAC;AACtB,gBAAM,EAAE,UAAU,QAAQ,aAAa,UAAU,IAAI;AACrD,cAAI,WAAW,aAAa;AACxB;AAAA,UACJ;AACA,cAAI,mCAAgD;AAChD,gBAAIC,qBAAqD;AACzD,gBAAID,gBAA0C;AAC9C,gBAAI,cAAc,eAAe,cAAc,WAAW;AACtD,oBAAM,gBAAgB,KAAK,wBAAwB,qBAAqB,EAAE,aAAa,YAAY,WAAW,UAAU,KAAK,KAAK,QAAQ,GAAG,IAAI,CAAC;AAClJ,kBAAI,iBAAiB,MAAM;AACvB;AAAA,cACJ;AACA,cAAAA,gBAAe,EAAE,GAAG,WAAW,MAAM,cAAc,OAAO;AAAA,YAC9D;AACA,gBAAIA,iBAAgB,MAAM;AACtB,cAAAC,qBAAoB,2BAA2BD,eAAc,KAAK,uBAAuB;AACzF,kBAAIC,sBAAqB,QAAQD,iBAAgB,MAAM;AACnD,+BAAe,KAAK,EAAE,GAAG,SAAS,gBAAgBC,oBAAmB,WAAWD,cAAa,CAAC;AAC9F;AAAA,cACJ;AAAA,YACJ;AAEA,iBAAK,mBAAmB,WAAW,gBAAgB,OAAO;AAE1D;AAAA,UACJ;AACA,cAAI,cAAc,eAAe,YAAY,WAAW;AACpD;AAAA,UACJ;AACA,cAAI,oBAAqD;AACzD,cAAI,eAA0C;AAE9C,cAAI,cAAc,eAAe,cAAc,WAAW;AACtD,kBAAM,gBAAgB,KAAK,wBAAwB,qBAAqB,EAAE,aAAa,YAAY,WAAW,UAAU,KAAK,KAAK,QAAQ,GAAG,IAAI,CAAC;AAClJ,gBAAI,iBAAiB,MAAM;AACvB;AAAA,YACJ;AACA,2BAAe;AAAA,cACX,GAAG;AAAA,cACH,OAAO,+CAAe,WAAU;AAAA,cAChC,SAAQ,uCAAW,UAAS,KAAK,cAAc,OAAO,cAAc;AAAA,YACxE;AAAA,UACJ,WAAW,YAAY,eAAe,YAAY,WAAW;AACzD,kBAAM,gBAAgB,KAAK,wBAAwB,qBAAqB,EAAE,aAAa,WAAW,UAAU,UAAU,KAAK,KAAK,QAAQ,GAAG,IAAI,CAAC;AAChJ,gBAAI,iBAAiB,MAAM;AACvB;AAAA,YACJ;AACA,2BAAe;AAAA,cACX,GAAG;AAAA,cACH,MAAM,cAAc,WAAU,uCAAW,UAAS;AAAA,YACtD;AAAA,UACJ,OAAO;AACH,kBAAM,gBAAgB,KAAK,wBAAwB,qBAAqB,EAAE,aAAa,WAAW,UAAU,KAAK,KAAK,QAAQ,GAAG,IAAI,CAAC;AACtI,gBAAI,iBAAiB,MAAM;AACvB;AAAA,YACJ;AACA,2BAAe;AAAA,cACX,GAAG;AAAA,cACH,SAAQ,uCAAW,UAAS,KAAK,cAAc,OAAO,cAAc;AAAA,YACxE;AACA,gCAAoB,2BAA2B,cAAc,KAAK,uBAAuB;AACzF,gBAAI,qBAAqB,QAAQ,gBAAgB,MAAM;AACnD,gCAAkB,KAAK,EAAE,GAAG,SAAS,gBAAgB,mBAAmB,WAAW,aAAa,CAAC;AACjG;AAAA,YACJ;AAAA,UACJ;AAEA,cAAI,gBAAgB,MAAM;AACtB,gCAAoB,2BAA2B,cAAc,KAAK,uBAAuB;AAAA,UAC7F;AACA,cAAI,gBAAgB,QAAQ,qBAAqB,MAAM;AACnD,2BAAe,KAAK,EAAE,GAAG,SAAS,gBAAgB,mBAAmB,WAAW,aAAa,CAAC;AAC9F;AAAA,UACJ,OAAO;AACH,iBAAK,mBAAmB,WAAW,gBAAgB,OAAO;AAAA,UAC9D;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,CAAC;AAED,QAAI,eAAe,WAAW,KAAK,kBAAkB,WAAW,GAAG;AAC/D,aAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,IAClC;AAEA,UAAM,EAAE,OAAO,MAAM,IAAI,KAAK,2BAA2B,QAAQ,WAAW,cAAc;AAE1F,UAAM,WAA4B,CAAC;AACnC,UAAM,WAA4B,CAAC;AAEnC,QAAI,kBAAkB,SAAS,GAAG;AAC9B,YAAM,EAAE,OAAAE,QAAO,OAAAC,OAAM,IAAI,KAAK,2BAA2B,QAAQ,WAAW,iBAAiB;AAC7F,eAAS,KAAK,GAAGD,MAAK;AACtB,eAAS,KAAK,GAAGC,MAAK;AAAA,IAC1B;AAEA,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,2BAA2B,QAAgB,WAAmB,gBAAiC;AACnG,UAAM,eAAe,KAAK,qBAAqB,iBAAiB,cAAiC;AACjG,UAAM,EAAE,MAAM,MAAM,QAAQ,IAAI;AAChC,UAAM,QAAyB;AAAA,MAC3B,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,QAAQ,WAAW,IAAI,MAAM,SAAS,qBAA8B,EAAE;AAAA,MAClH,EAAE,IAAI,sCAAsC,IAAI,QAAQ,CAAC,MAAM,EAAE;AAAA,IACrE;AACA,UAAM,QAAyB;AAAA,MAC3B,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,QAAQ,WAAW,IAAI,MAAM,SAAS,qBAA8B,EAAE;AAAA,MAClH,EAAE,IAAI,sCAAsC,IAAI,QAAQ,CAAC,MAAM,EAAE;AAAA,IACrE;AAEA,WAAO;AAAA,MACH;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAGQ,6BAA6B,QAAgB,WAAmB,QAAkB;AACtF,UAAM,cAAc,KAAK,uBAAuB,eAAe,QAAQ,SAAS;AAEhF,UAAM,iBAAkC,CAAC;AACzC,UAAM,oBAAqC,CAAC;AAE5C,WAAO,KAAK,WAAW,EAAE,QAAQ,CAAC,cAAc;AAC5C,YAAM,UAAU,YAAY,SAAS;AACrC,YAAM,EAAE,gBAAgB,WAAW,gCAA6C,IAAI;AACpF,UAAI,+BAA4C;AAC5C,aAAK,mBAAmB,WAAW,gBAAgB,OAAO;AAAA,MAC9D,OAAO;AACH,cAAM,EAAE,MAAM,GAAG,IAAI;AACrB,cAAM,EAAE,KAAK,SAAS,QAAQ,WAAW,IAAI;AAC7C,cAAM,EAAE,KAAK,OAAO,QAAQ,SAAS,IAAI;AACzC,iBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,gBAAM,QAAQ,OAAO,CAAC;AACtB,gBAAM,EAAE,UAAU,QAAQ,aAAa,UAAU,IAAI;AACrD,cAAI,QAAQ,UAAU;AAClB;AAAA,UACJ;AACA,cAAI,mCAAgD;AAChD,gBAAIF,qBAAqD;AACzD,gBAAID,gBAA0C;AAC9C,gBAAI,WAAW,YAAY,WAAW,QAAQ;AAC1C,oBAAM,gBAAgB,KAAK,wBAAwB,qBAAqB,EAAE,aAAa,KAAK,QAAQ,WAAW,GAAG,QAAQ,UAAU,SAAS,OAAO,CAAC;AACrJ,kBAAI,iBAAiB,MAAM;AACvB;AAAA,cACJ;AACA,cAAAA,gBAAe,EAAE,GAAG,WAAW,KAAK,cAAc,OAAO;AAAA,YAC7D;AACA,gBAAIA,iBAAgB,MAAM;AACtB,cAAAC,qBAAoB,2BAA2BD,eAAc,KAAK,uBAAuB;AACzF,kBAAIC,sBAAqB,QAAQD,iBAAgB,MAAM;AACnD,+BAAe,KAAK,EAAE,GAAG,SAAS,gBAAgBC,oBAAmB,WAAWD,cAAa,CAAC;AAC9F;AAAA,cACJ;AAAA,YACJ;AAEA,iBAAK,mBAAmB,WAAW,gBAAgB,OAAO;AAE1D;AAAA,UACJ;AACA,cAAI,WAAW,YAAY,SAAS,QAAQ;AACxC;AAAA,UACJ;AACA,cAAI,oBAAqD;AACzD,cAAI,eAA0C;AAE9C,cAAI,WAAW,YAAY,WAAW,QAAQ;AAC1C,kBAAM,gBAAgB,KAAK,wBAAwB,qBAAqB,EAAE,aAAa,KAAK,QAAQ,WAAW,GAAG,QAAQ,UAAU,SAAS,OAAO,CAAC;AACrJ,gBAAI,iBAAiB,MAAM;AACvB;AAAA,YACJ;AACA,2BAAe;AAAA,cACX,GAAG;AAAA,cACH,MAAM,+CAAe,WAAU;AAAA,cAC/B,UAAS,uCAAW,WAAU,KAAK,cAAc,OAAO,cAAc;AAAA,YAC1E;AAAA,UACJ,WAAW,SAAS,YAAY,SAAS,QAAQ;AAC7C,kBAAM,gBAAgB,KAAK,wBAAwB,qBAAqB,EAAE,aAAa,KAAK,QAAQ,WAAW,GAAG,QAAQ,UAAU,QAAQ,MAAM,CAAC;AACnJ,gBAAI,iBAAiB,MAAM;AACvB;AAAA,YACJ;AACA,2BAAe;AAAA,cACX,GAAG;AAAA,cACH,KAAK,cAAc,WAAU,uCAAW,WAAU;AAAA,YACtD;AAAA,UACJ,OAAO;AACH,kBAAM,gBAAgB,KAAK,wBAAwB,qBAAqB,EAAE,aAAa,KAAK,QAAQ,WAAW,GAAG,QAAQ,UAAU,OAAO,CAAC;AAC5I,gBAAI,iBAAiB,MAAM;AACvB;AAAA,YACJ;AACA,2BAAe;AAAA,cACX,GAAG;AAAA,cACH,UAAS,uCAAW,WAAU,KAAK,cAAc,OAAO,cAAc;AAAA,YAC1E;AACA,gCAAoB,2BAA2B,cAAc,KAAK,uBAAuB;AACzF,gBAAI,qBAAqB,QAAQ,gBAAgB,MAAM;AACnD,gCAAkB,KAAK,EAAE,GAAG,SAAS,gBAAgB,mBAAmB,WAAW,aAAa,CAAC;AACjG;AAAA,YACJ;AAAA,UACJ;AAEA,cAAI,gBAAgB,MAAM;AACtB,gCAAoB,2BAA2B,cAAc,KAAK,uBAAuB;AAAA,UAC7F;AACA,cAAI,gBAAgB,QAAQ,qBAAqB,MAAM;AACnD,2BAAe,KAAK,EAAE,GAAG,SAAS,gBAAgB,mBAAmB,WAAW,aAAa,CAAC;AAC9F;AAAA,UACJ,OAAO;AACH,iBAAK,mBAAmB,WAAW,gBAAgB,OAAO;AAAA,UAC9D;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,CAAC;AAED,QAAI,eAAe,WAAW,KAAK,kBAAkB,WAAW,GAAG;AAC/D,aAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,IAClC;AAEA,UAAM,EAAE,OAAO,MAAM,IAAI,KAAK,2BAA2B,QAAQ,WAAW,cAAc;AAE1F,UAAM,WAA4B,CAAC;AACnC,UAAM,WAA4B,CAAC;AAEnC,QAAI,kBAAkB,SAAS,GAAG;AAC9B,YAAM,EAAE,OAAAE,QAAO,OAAAC,OAAM,IAAI,KAAK,2BAA2B,QAAQ,WAAW,iBAAiB;AAC7F,eAAS,KAAK,GAAGD,MAAK;AACtB,eAAS,KAAK,GAAGC,MAAK;AAAA,IAC1B;AAEA,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,gCAAgC,QAAgB,WAAmB,QAAkB,OAAgB;AACzG,UAAM,cAAc,KAAK,uBAAuB,eAAe,QAAQ,SAAS;AAEhF,UAAM,iBAAkC,CAAC;AAEzC,WAAO,KAAK,WAAW,EAAE,QAAQ,CAAC,cAAc;AAC5C,YAAM,UAAU,YAAY,SAAS;AACrC,YAAM,EAAE,gBAAgB,WAAW,gCAA6C,IAAI;AACpF,UAAI,+BAA4C;AAC5C,aAAK,mBAAmB,WAAW,gBAAgB,OAAO;AAAA,MAC9D,OAAO;AACH,cAAM,EAAE,MAAM,GAAG,IAAI;AACrB,cAAM,EAAE,KAAK,SAAS,QAAQ,WAAW,IAAI;AAC7C,cAAM,EAAE,KAAK,OAAO,QAAQ,SAAS,IAAI;AACzC,iBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,gBAAM,QAAQ,OAAO,CAAC;AACtB,gBAAM,EAAE,UAAU,QAAQ,aAAa,UAAU,IAAI;AAErD,cAAI,QAAQ,YAAY,WAAW,aAAa;AAC5C;AAAA,UACJ;AAEA,cAAI,mCAAgD;AAChD,gBAAK,WAAW,YAAY,SAAS,UAAY,cAAc,eAAe,YAAY,WAAY;AAClG,mBAAK,mBAAmB,WAAW,gBAAgB,OAAO;AAC1D;AAAA,YACJ;AAAA,UACJ;AAEA,gBAAM,eAAe,2BAA2B,EAAE,GAAG,eAAe,GAAG,KAAK,yBAAyB,KAAK,uBAAuB;AACjI,cAAI,gBAAgB,MAAM;AACtB,2BAAe,KAAK;AAAA,cAChB,GAAG;AAAA,cACH,WAAW;AAAA,YACf,CAAC;AACD;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,CAAC;AAED,QAAI,eAAe,WAAW,GAAG;AAC7B,aAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,IAClC;AAEA,WAAO,KAAK,2BAA2B,QAAQ,WAAW,cAAc;AAAA,EAC5E;AAAA,EAEQ,uBAAuB,QAA8D,MAA2B;AACpH,QAAI;AACJ,QAAI;AACJ,QAAI,SAAS,UAAU;AACnB,eAAU,OAAmC;AAC7C,kBAAa,OAAmC;AAAA,IACpD,OAAO;AACH,YAAM,YAAY,sBAAsB,KAAK,sBAAsB;AACnE,UAAI,aAAa,MAAM;AACnB;AAAA,MACJ;AACA,eAAS,UAAU;AACnB,kBAAY,UAAU;AAAA,IAC1B;AAEA,WAAO,EAAE,QAAQ,UAAU;AAAA,EAC/B;AAAA,EAEQ,sBAAsB,QAAmF;AAjlBrH;AAklBQ,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,UAAM,SAAS,sBAAsB,KAAK,sBAAsB;AAChE,QAAI,CAAC,QAAQ;AACT,aAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,IAClC;AAEA,UAAM,EAAE,QAAQ,UAAU,IAAI;AAE9B,UAAM,YAAW,gBAAK,sBAAsB,cAAc,MAAM,MAA/C,mBAAkD,KAAK,iCAAvD,mBAAqF;AACtG,QAAI,CAAC,UAAU;AACX,aAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,IAClC;AAEA,UAAM,gBAAgB,qBAAqB,UAAU,SAAS;AAC9D,QAAI,CAAC,eAAe;AAChB,aAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,IAClC;AAEA,UAAM,EAAE,QAAQ,MAAM,QAAQ,KAAK,IAAI;AACvC,UAAM,WAAW,KAAK,qBAAqB,eAAe,QAAQ,SAAS;AAC3E,UAAM,oBAAqC,CAAC;AAE5C,WAAO,KAAK,QAAQ,EAAE,QAAQ,CAAC,cAAc;AACzC,YAAM,UAAU,SAAS,SAAS;AAClC,UAAI,QAAQ,+BAA4C;AACpD;AAAA,MACJ;AACA,YAAM,EAAE,UAAU,IAAI;AAEtB,UAAI,CAAC,WAAW;AACZ;AAAA,MACJ;AAEA,YAAM,EAAE,OAAO,GAAG,MAAM,GAAG,QAAQ,GAAG,SAAS,EAAE,IAAI;AACrD,YAAM,EAAE,eAAe,aAAa,eAAe,YAAY,IAAI;AAAA,QAC/D,eAAe;AAAA,QACf,aAAa,OAAO;AAAA,QACpB,eAAe;AAAA,QACf,aAAa,MAAM;AAAA,MACvB;AAEA,UAAI,UAAU,iBAAiB,eAAe,QAAQ,UAAU,iBAAiB,eAAe,MAAM;AAClG,0BAAkB,KAAK,OAAO;AAAA,MAClC;AAAA,IACJ,CAAC;AAED,UAAM,QAAyB,CAAC;AAChC,UAAM,QAAyB,CAAC;AAChC,UAAM,YAAY,QAAQ,WAAW,UAAU;AAC/C,UAAM,YAAY,QAAQ,cAAc,UAAU;AAElD,UAAM,iBAAiB,kBAAkB,IAAI,CAAC,YAAY;AACtD,YAAM,oBAAoB,QAAQ;AAClC,YAAM,iBAAiB;AAAA,QACnB,IAAI,EAAE,GAAG,kBAAkB,IAAI,KAAK,kBAAkB,GAAG,MAAM,WAAW,QAAQ,kBAAkB,GAAG,SAAS,UAAU;AAAA,QAC1H,MAAM,EAAE,GAAG,kBAAkB,MAAM,KAAK,kBAAkB,KAAK,MAAM,WAAW,QAAQ,kBAAkB,KAAK,SAAS,UAAU;AAAA,MACtI;AACA,YAAM,YAAY,2BAA2B,gBAAgB,KAAK,yBAAyB,KAAK,uBAAuB;AACvH,YAAMC,UAAS;AAAA,QACX;AAAA,QACA;AAAA,QACA,WAAW,QAAQ;AAAA,QACnB;AAAA,QACA;AAAA,MACJ;AAEA,aAAOA;AAAA,IACX,CAAC;AACD,QAAI,eAAe,QAAQ;AAKvB,YAAM,eAAe,KAAK,qBAAqB,iBAAiB,cAAiC;AACjG,YAAM,EAAE,MAAM,MAAM,QAAQ,IAAI;AAChC,YAAM,KAAK,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,QAAQ,WAAW,IAAI,MAAM,SAAS,qBAA8B,EAAE,CAAC;AAC9H,YAAM,KAAK,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,QAAQ,WAAW,IAAI,MAAM,SAAS,qBAA8B,EAAE,CAAC;AAAA,IAOlI;AAGA,WAAO,EAAE,OAAO,MAAM;AAAA,EAC1B;AAAA,EAEQ,oBAAoB,QAA8D,MAA2B;AACjH,UAAM,MAAM,KAAK,uBAAuB,QAAQ,IAAI;AACpD,QAAI,OAAO,MAAM;AACb,aAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,IAClC;AACA,UAAM,EAAE,QAAQ,UAAU,IAAI;AAC9B,UAAM,EAAE,MAAM,IAAI;AAElB,UAAM,gBAAgB,MAAM;AAC5B,UAAM,cAAc,MAAM;AAE1B,UAAM,QAAyB,CAAC;AAChC,UAAM,QAAyB,CAAC;AAEhC,UAAM,OAAO,KAAK,qBAAqB,eAAe,QAAQ,SAAS;AACvE,UAAM,iBAA2C,CAAC;AAClD,UAAM,iBAA2C,CAAC;AAElD,WAAO,KAAK,IAAI,EAAE,QAAQ,CAAC,cAAc;AACrC,YAAM,UAAU,KAAK,SAAS;AAC9B,YAAM,EAAE,gBAAgB,WAAW,gCAA6C,IAAI;AAEpF,UAAI,kBAAkB,QAAQ,aAAa,MAAM;AAC7C;AAAA,MACJ;AACA,UAAI;AACJ,UAAI;AACJ,UAAI,SAAS,UAAU;AACnB,cAAM,QAAQ,KAAK,WAAW,gBAAgB,WAAW,eAAe,aAAa,UAAU;AAC/F,4BAAoB,+BAAO;AAC3B,uBAAe,+BAAO;AAAA,MAC1B,OAAO;AACH,cAAM,EAAE,MAAM,GAAG,IAAI;AACrB,cAAM,EAAE,KAAK,QAAQ,IAAI;AACzB,cAAM,EAAE,KAAK,MAAM,IAAI;AACvB,YAAI,iCAA8C,WAAW,iBAAiB,SAAS,aAAa;AAEhG,yBAAe,KAAK,EAAE,QAAQ,WAAW,UAAU,CAAC;AAAA,QACxD,OAAO;AACH,gBAAM,QAAQ,KAAK,WAAW,gBAAgB,WAAW,eAAe,aAAa,UAAU;AAC/F,8BAAoB,+BAAO;AAC3B,yBAAe,+BAAO;AAAA,QAC1B;AAAA,MACJ;AACA,UAAI,CAAC,qBAAqB,CAAC,cAAc;AACrC;AAAA,MACJ;AACA,YAAMA,UAAS,EAAE,QAAQ,WAAW,WAAW,WAAW,cAAc,gBAAgB,kBAAkB;AAC1G,qBAAe,KAAKA,OAAM;AAAA,IAC9B,CAAC;AAED,QAAI,eAAe,WAAW,KAAK,eAAe,WAAW,GAAG;AAC5D,aAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,IAClC;AAEA,QAAI,eAAe,SAAS,GAAG;AAC3B,YAAM,eAAe,KAAK,qBAAqB,iBAAiB,cAAiC;AACjG,YAAM,EAAE,MAAM,MAAM,QAAQ,IAAI;AAChC,YAAM,KAAK,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,QAAQ,WAAW,IAAI,MAAM,SAAS,qBAA8B,EAAE,CAAC;AAC9H,YAAM,KAAK,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,QAAQ,WAAW,IAAI,MAAM,SAAS,qBAA8B,EAAE,CAAC;AAAA,IAClI;AAEA,QAAI,eAAe,SAAS,GAAG;AAC3B,YAAM,eAAe,KAAK,qBAAqB,iBAAiB,cAAiC;AACjG,YAAM,aAAa,aAAa;AAChC,YAAM,aAAa,aAAa;AAChC,YAAM,gBAAgB,aAAa;AACnC,YAAM,KAAK,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,QAAQ,WAAW,IAAI,YAAY,SAAS,eAAe,qBAA8B,EAAE,CAAC;AACnJ,YAAM,KAAK,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,QAAQ,WAAW,IAAI,YAAY,SAAS,eAAe,qBAA8B,EAAE,CAAC;AAAA,IACvJ;AAEA,UAAM,KAAK,EAAE,IAAI,sCAAsC,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC;AAC7E,UAAM,KAAK,EAAE,IAAI,sCAAsC,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC;AAE7E,WAAO;AAAA,MACH;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,oBAAoB,QAA8D,MAA2B;AACjH,UAAM,MAAM,KAAK,uBAAuB,QAAQ,IAAI;AACpD,QAAI,OAAO,MAAM;AACb,aAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,IAClC;AACA,UAAM,EAAE,QAAQ,UAAU,IAAI;AAC9B,UAAM,EAAE,MAAM,IAAI;AAElB,UAAM,gBAAgB,MAAM;AAC5B,UAAM,cAAc,MAAM;AAE1B,UAAM,QAAyB,CAAC;AAChC,UAAM,QAAyB,CAAC;AAEhC,UAAM,OAAO,KAAK,qBAAqB,eAAe,QAAQ,SAAS;AACvE,UAAM,iBAA2C,CAAC;AAClD,UAAM,iBAA2C,CAAC;AAElD,WAAO,KAAK,IAAI,EAAE,QAAQ,CAAC,cAAc;AACrC,YAAM,UAAU,KAAK,SAAS;AAC9B,YAAM,EAAE,gBAAgB,WAAW,gCAA6C,IAAI;AAEpF,UAAI,kBAAkB,QAAQ,aAAa,MAAM;AAC7C;AAAA,MACJ;AACA,UAAI;AACJ,UAAI;AACJ,UAAI,SAAS,UAAU;AACnB,cAAM,QAAQ,KAAK,WAAW,gBAAgB,WAAW,eAAe,aAAa,UAAU;AAC/F,4BAAoB,+BAAO;AAC3B,uBAAe,+BAAO;AAAA,MAC1B,OAAO;AACH,cAAM,EAAE,MAAM,GAAG,IAAI;AACrB,cAAM,EAAE,QAAQ,WAAW,IAAI;AAC/B,cAAM,EAAE,QAAQ,SAAS,IAAI;AAC7B,YAAI,iCAA8C,cAAc,iBAAiB,YAAY,aAAa;AAEtG,yBAAe,KAAK,EAAE,QAAQ,WAAW,UAAU,CAAC;AAAA,QACxD,OAAO;AACH,gBAAM,QAAQ,KAAK,WAAW,gBAAgB,WAAW,eAAe,aAAa,UAAU;AAC/F,8BAAoB,+BAAO;AAC3B,yBAAe,+BAAO;AAAA,QAC1B;AAAA,MACJ;AAEA,UAAI,CAAC,qBAAqB,CAAC,cAAc;AACrC;AAAA,MACJ;AAEA,YAAMA,UAAS,EAAE,QAAQ,WAAW,WAAW,WAAW,cAAc,gBAAgB,kBAAkB;AAC1G,qBAAe,KAAKA,OAAM;AAAA,IAC9B,CAAC;AAED,QAAI,eAAe,WAAW,KAAK,eAAe,WAAW,GAAG;AAC5D,aAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE;AAAA,IAClC;AAEA,QAAI,eAAe,SAAS,GAAG;AAC3B,YAAM,eAAe,KAAK,qBAAqB,iBAAiB,cAAiC;AACjG,YAAM,EAAE,MAAM,MAAM,QAAQ,IAAI;AAChC,YAAM,KAAK,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,QAAQ,WAAW,IAAI,MAAM,SAAS,qBAA8B,EAAE,CAAC;AAC9H,YAAM,KAAK,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,QAAQ,WAAW,IAAI,MAAM,SAAS,qBAA8B,EAAE,CAAC;AAAA,IAClI;AAEA,QAAI,eAAe,SAAS,GAAG;AAC3B,YAAM,eAAe,KAAK,qBAAqB,iBAAiB,cAAiC;AACjG,YAAM,aAAa,aAAa;AAChC,YAAM,aAAa,aAAa;AAChC,YAAM,gBAAgB,aAAa;AACnC,YAAM,KAAK,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,QAAQ,WAAW,IAAI,YAAY,SAAS,eAAe,qBAA8B,EAAE,CAAC;AACnJ,YAAM,KAAK,EAAE,IAAI,wBAAwB,IAAI,QAAQ,EAAE,QAAQ,WAAW,IAAI,YAAY,SAAS,eAAe,qBAA8B,EAAE,CAAC;AAAA,IACvJ;AAEA,UAAM,KAAK,EAAE,IAAI,sCAAsC,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC;AAC7E,UAAM,KAAK,EAAE,IAAI,sCAAsC,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC;AAE7E,WAAO,EAAE,OAAO,MAAM;AAAA,EAC1B;AAAA,EAEQ,WAAW,gBAAuC,WAA4B,eAAuB,aAAqB,iCAA8C;AAC5K,UAAM,WAAW,cAAc,gBAAgB;AAE/C,UAAM,EAAE,MAAM,GAAG,IAAI;AAErB,UAAM,EAAE,QAAQ,WAAW,IAAI;AAC/B,UAAM,EAAE,QAAQ,SAAS,IAAI;AAE7B,QAAI,+BAA4C;AAC5C,aAAO;AAAA,QACH,mBAAmB,2BAA2B,EAAE,GAAG,UAAU,GAAG,KAAK,uBAAuB;AAAA,QAC5F,cAAc;AAAA,MAClB;AAAA,IACJ;AAEA,QAAI,oBAAqD;AACzD,QAAI,eAA0C;AAE9C,QAAI,cAAc,eAAe;AAQ7B,YAAM,gBAAgB,KAAK,wBAAwB,qBAAqB,EAAE,aAAa,eAAe,WAAW,aAAa,UAAU,KAAK,KAAK,QAAQ,GAAG,IAAI,CAAC;AAClK,UAAI,iBAAiB,MAAM;AACvB;AAAA,MACJ;AACA,qBAAe,EAAE,GAAG,WAAW,OAAO,UAAU,QAAQ,KAAK,cAAc,OAAO,cAAc,OAAO;AACvG,0BAAoB,2BAA2B,cAAc,KAAK,uBAAuB;AAAA,IAC7F,WAAW,YAAY,aAAa;AAEhC,UAAI,+BAA4C;AAC5C,4BAAoB;AAAA,UAChB,MAAM,EAAE,GAAG,KAAK;AAAA,UAChB,IAAI,EAAE,GAAG,IAAI,QAAQ,WAAW,SAAS;AAAA,QAC7C;AACA,uBAAe,2BAA2B,mBAAmB,KAAK,yBAAyB,KAAK,uBAAuB;AAAA,MAC3H,OAAO;AACH,eAAO;AAAA,UACH,mBAAmB,2BAA2B,EAAE,GAAG,UAAU,GAAG,KAAK,uBAAuB;AAAA,UAC5F,cAAc;AAAA,QAClB;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,qBAAqB,QAAQ,gBAAgB,MAAM;AACnD,aAAO;AAAA,QACH;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEQ,WAAW,gBAAuC,WAA4B,eAAuB,aAAqB,iCAA8C;AAC5K,UAAM,WAAW,cAAc,gBAAgB;AAC/C,UAAM,EAAE,MAAM,GAAG,IAAI;AACrB,UAAM,EAAE,QAAQ,WAAW,IAAI;AAC/B,UAAM,EAAE,QAAQ,SAAS,IAAI;AAC7B,QAAI,+BAA4C;AAC5C,aAAO;AAAA,QACH,mBAAmB,2BAA2B,EAAE,GAAG,UAAU,GAAG,KAAK,uBAAuB;AAAA,QAC5F,cAAc;AAAA,MAClB;AAAA,IACJ;AACA,QAAI,oBAAqD;AACzD,QAAI,eAA0C;AAE9C,QAAI,aAAa,aAAa;AAE1B,0BAAoB;AAAA,QAChB,MAAM,EAAE,GAAG,MAAM,QAAQ,aAAa,SAAS;AAAA,QAC/C,IAAI,EAAE,GAAG,IAAI,QAAQ,WAAW,SAAS;AAAA,MAC7C;AACA,qBAAe,2BAA2B,mBAAmB,KAAK,yBAAyB,KAAK,uBAAuB;AAAA,IAC3H,WAAW,cAAc,iBAAiB,YAAY,aAAa;AAE/D,aAAO;AAAA,IACX,WAAW,aAAa,iBAAiB,WAAW,aAAa;AAE7D,UAAI,+BAA4C;AAC5C,4BAAoB;AAAA,UAChB,MAAM,EAAE,GAAG,KAAK;AAAA,UAChB,IAAI,EAAE,GAAG,IAAI,QAAQ,WAAW,SAAS;AAAA,QAC7C;AACA,uBAAe,2BAA2B,mBAAmB,KAAK,yBAAyB,KAAK,uBAAuB;AAAA,MAC3H,OAAO;AACH,eAAO;AAAA,UACH,mBAAmB,2BAA2B,EAAE,GAAG,UAAU,GAAG,KAAK,uBAAuB;AAAA,UAC5F,cAAc;AAAA,QAClB;AAAA,MACJ;AAAA,IACJ,WAAW,cAAc,iBAAiB,cAAc,aAAa;AACjE,UAAI,eAAe,eAAe;AAC9B,uBAAe,EAAE,GAAG,WAAW,OAAO,UAAU,QAAQ,KAAK,eAAe,KAAK,aAAa;AAAA,MAClG,OAAO;AACH,cAAM,gBAAgB,KAAK,wBAAwB,qBAAqB,EAAE,aAAa,eAAe,WAAW,aAAa,GAAG,UAAU,KAAK,KAAK,QAAQ,GAAG,IAAI,CAAC;AACrK,YAAI,iBAAiB,MAAM;AACvB;AAAA,QACJ;AACA,uBAAe,EAAE,GAAG,WAAW,OAAO,UAAU,QAAQ,KAAK,cAAc,OAAO,cAAc,SAAS,eAAe,KAAK,aAAa;AAAA,MAC9I;AACA,0BAAoB,2BAA2B,cAAc,KAAK,uBAAuB;AAAA,IAC7F,WAAW,YAAY,iBAAiB,YAAY,eAAe,+BAA4C;AAE3G,YAAM,gBAAgB,KAAK,wBAAwB,qBAAqB;AAAA,QACpE,aAAa,gBAAgB;AAAA,QAC7B,WAAW,gBAAgB;AAAA,QAC3B,UAAU,KAAK;AAAA,QACf,QAAQ,GAAG;AAAA,MACf,CAAC;AAED,UAAI,iBAAiB,MAAM;AACvB;AAAA,MACJ;AACA,0BAAoB;AAAA,QAChB,MAAM,EAAE,GAAG,KAAK;AAAA,QAChB,IAAI,EAAE,GAAG,IAAI,QAAQ,gBAAgB,GAAG,cAAc,cAAc,OAAO,cAAc,OAAO;AAAA,MACpG;AACA,qBAAe,2BAA2B,mBAAmB,KAAK,yBAAyB,KAAK,uBAAuB;AAAA,IAC3H;AAEA,QAAI,qBAAqB,QAAQ,gBAAgB,MAAM;AACnD,aAAO;AAAA,QACH;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEQ,WAAW,gBAAuC,WAA4B,eAAuB,aAAqB,iCAA8C;AAC5K,UAAM,WAAW,cAAc,gBAAgB;AAE/C,UAAM,EAAE,MAAM,GAAG,IAAI;AAErB,UAAM,EAAE,KAAK,QAAQ,IAAI;AACzB,UAAM,EAAE,KAAK,MAAM,IAAI;AAEvB,QAAI,+BAA4C;AAC5C,aAAO;AAAA,QACH,mBAAmB,2BAA2B,EAAE,GAAG,UAAU,GAAG,KAAK,uBAAuB;AAAA,QAC5F,cAAc;AAAA,MAClB;AAAA,IACJ;AAEA,QAAI,oBAAqD;AACzD,QAAI,eAA0C;AAE9C,QAAI,WAAW,eAAe;AAE1B,YAAM,gBAAgB,KAAK,wBAAwB,qBAAqB,EAAE,UAAU,eAAe,QAAQ,aAAa,aAAa,KAAK,QAAQ,WAAW,GAAG,OAAO,CAAC;AACxK,UAAI,iBAAiB,MAAM;AACvB;AAAA,MACJ;AACA,qBAAe,EAAE,GAAG,WAAW,MAAM,UAAU,OAAO,KAAK,cAAc,OAAO,cAAc,OAAO;AACrG,0BAAoB,2BAA2B,cAAc,KAAK,uBAAuB;AAAA,IAC7F,WAAW,SAAS,aAAa;AAE7B,UAAI,+BAA4C;AAC5C,4BAAoB;AAAA,UAChB,MAAM,EAAE,GAAG,KAAK;AAAA,UAChB,IAAI;AAAA,YACA,GAAG;AAAA,YACH,KAAK,QAAQ;AAAA,UACjB;AAAA,QACJ;AACA,uBAAe,2BAA2B,mBAAmB,KAAK,yBAAyB,KAAK,uBAAuB;AAAA,MAC3H,OAAO;AACH,eAAO;AAAA,UACH,mBAAmB,2BAA2B,EAAE,GAAG,UAAU,GAAG,KAAK,uBAAuB;AAAA,UAC5F,cAAc;AAAA,QAClB;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,qBAAqB,QAAQ,gBAAgB,MAAM;AACnD,aAAO;AAAA,QACH;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEQ,WAAW,gBAAuC,WAA4B,eAAuB,aAAqB,iCAA8C;AAC5K,UAAM,WAAW,cAAc,gBAAgB;AAE/C,UAAM,EAAE,MAAM,GAAG,IAAI;AAErB,UAAM,EAAE,KAAK,QAAQ,IAAI;AACzB,UAAM,EAAE,KAAK,MAAM,IAAI;AAEvB,QAAI,+BAA4C;AAC5C,aAAO;AAAA,QACH,mBAAmB,2BAA2B,EAAE,GAAG,UAAU,GAAG,KAAK,uBAAuB;AAAA,QAC5F,cAAc;AAAA,MAClB;AAAA,IACJ;AAEA,QAAI,oBAAqD;AACzD,QAAI,eAA0C;AAE9C,QAAI,UAAU,aAAa;AAEvB,0BAAoB;AAAA,QAChB,MAAM,EAAE,GAAG,MAAM,KAAK,UAAU,SAAS;AAAA,QACzC,IAAI,EAAE,GAAG,IAAI,KAAK,QAAQ,SAAS;AAAA,MACvC;AACA,qBAAe,2BAA2B,mBAAmB,KAAK,yBAAyB,KAAK,uBAAuB;AAAA,IAC3H,WAAW,WAAW,iBAAiB,SAAS,aAAa;AAEzD,aAAO;AAAA,IACX,WAAW,UAAU,iBAAiB,QAAQ,aAAa;AAEvD,UAAI,+BAA4C;AAC5C,4BAAoB;AAAA,UAChB,MAAM,EAAE,GAAG,KAAK;AAAA,UAChB,IAAI,EAAE,GAAG,IAAI,KAAK,QAAQ,SAAS;AAAA,QACvC;AACA,uBAAe,2BAA2B,mBAAmB,KAAK,yBAAyB,KAAK,uBAAuB;AAAA,MAC3H,OAAO;AACH,eAAO;AAAA,UACH,mBAAmB,2BAA2B,EAAE,GAAG,UAAU,GAAG,KAAK,uBAAuB;AAAA,UAC5F,cAAc;AAAA,QAClB;AAAA,MACJ;AAAA,IACJ,WAAW,WAAW,iBAAiB,WAAW,aAAa;AAE3D,UAAI,YAAY,eAAe;AAC3B,uBAAe,EAAE,GAAG,WAAW,MAAM,UAAU,OAAO,KAAK,eAAe,KAAK,UAAU;AAAA,MAC7F,OAAO;AACH,cAAM,gBAAgB,KAAK,wBAAwB,qBAAqB,EAAE,UAAU,eAAe,QAAQ,UAAU,GAAG,aAAa,KAAK,QAAQ,WAAW,GAAG,OAAO,CAAC;AACxK,YAAI,iBAAiB,MAAM;AACvB;AAAA,QACJ;AACA,uBAAe,EAAE,GAAG,WAAW,MAAM,UAAU,OAAO,KAAK,cAAc,OAAO,cAAc,SAAS,eAAe,KAAK,UAAU;AAAA,MACzI;AACA,0BAAoB,2BAA2B,cAAc,KAAK,uBAAuB;AAAA,IAC7F,WAAW,SAAS,iBAAiB,SAAS,eAAe,+BAA4C;AAErG,YAAM,gBAAgB,KAAK,wBAAwB,qBAAqB,EAAE,aAAa,KAAK,QAAQ,WAAW,KAAK,QAAQ,UAAU,gBAAgB,GAAG,QAAQ,gBAAgB,EAAE,CAAC;AAEpL,UAAI,iBAAiB,MAAM;AACvB;AAAA,MACJ;AACA,0BAAoB;AAAA,QAChB,MAAM,EAAE,GAAG,KAAK;AAAA,QAChB,IAAI,EAAE,GAAG,IAAI,KAAK,gBAAgB,GAAG,WAAW,cAAc,OAAO,cAAc,OAAO;AAAA,MAC9F;AACA,qBAAe,2BAA2B,mBAAmB,KAAK,yBAAyB,KAAK,uBAAuB;AAAA,IAC3H;AAEA,QAAI,qBAAqB,QAAQ,gBAAgB,MAAM;AACnD,aAAO;AAAA,QACH;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEQ,mBAAmB;AACvB,SAAK;AAAA;AAAA;AAAA;AAAA,MAID,KAAK,gBAAgB,kBAAkB,CAAC,YAA0B;AAC9D,YAAI,QAAQ,OAAO,4BAA4B,IAAI;AAC/C,gBAAM,EAAE,QAAQ,UAAU,IAAI,QAAQ;AACtC,eAAK,gBAAgB,QAAQ,SAAS;AAAA,QAC1C;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,SAAK;AAAA,MACD,KAAK,SAAS,WAAW,UAAU,CAAC,cAAc;AAC9C,cAAM,EAAE,MAAM,OAAO,IAAI,KAAK;AAC9B,YAAI,WAAW;AACX,gBAAM,YAAY,KAAK,eAAe,EAAE,WAAW;AACnD,eAAK,gBAAgB,QAAQ,SAAS;AAAA,QAC1C,OAAO;AAEH,eAAK,eAAe,MAAM;AAAA,QAC9B;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,eAAe,YAA0B;AAC7C,eAAW,MAAM;AACb,YAAM,aAAa,KAAK,uBAAuB;AAC/C,YAAM,iBAAkC,CAAC;AAGzC,aAAO,KAAK,UAAU,EAAE,QAAQ,CAAC,WAAW;AACxC,cAAM,aAAa,WAAW,MAAM;AACpC,YAAI,cAAc,MAAM;AACpB;AAAA,QACJ;AAEA,eAAO,KAAK,UAAU,EAAE,QAAQ,CAAC,cAAc;AAC3C,gBAAM,cAAc,WAAW,SAAS,EAAE;AAC1C,cAAI,eAAe,MAAM;AACrB;AAAA,UACJ;AAEA,iBAAO,KAAK,WAAW,EAAE,QAAQ,CAAC,cAAc;AAC5C,gBAAI,WAAW,YAAY;AACvB,6BAAe,KAAK,YAAY,SAAS,CAAC;AAAA,YAC9C;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACL,CAAC;AAED,WAAK,uBAAuB,mBAAmB,cAAc;AAAA,IACjE,CAAC;AAAA,EACL;AAAA,EAEQ,gBAAgB,YAAoB,eAA6B;AAErE,eAAW,MAAM;AACb,YAAM,aAAa,KAAK,uBAAuB;AAC/C,YAAM,iBAAkC,CAAC;AACzC,YAAM,iBAAkC,CAAC;AAEzC,aAAO,KAAK,UAAU,EAAE,QAAQ,CAAC,WAAW;AACxC,cAAM,aAAa,WAAW,MAAM;AACpC,YAAI,cAAc,MAAM;AACpB;AAAA,QACJ;AACA,eAAO,KAAK,UAAU,EAAE,QAAQ,CAAC,cAAc;AAC3C,gBAAM,cAAc,WAAW,SAAS,EAAE;AAC1C,cAAI,eAAe,MAAM;AACrB;AAAA,UACJ;AACA,iBAAO,KAAK,WAAW,EAAE,QAAQ,CAAC,cAAc;AAC5C,gBAAI,WAAW,cAAc,cAAc,eAAe;AACtD,oBAAM,UAAU,YAAY,SAAS;AACrC,sBAAQ,YAAY,2BAA2B,QAAQ,gBAAgB,KAAK,yBAAyB,KAAK,uBAAuB;AACjI,6BAAe,KAAK,YAAY,SAAS,CAAC;AAAA,YAC9C,OAAO;AACH,6BAAe,KAAK,YAAY,SAAS,CAAC;AAAA,YAC9C;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACL,CAAC;AAED,WAAK,uBAAuB,mBAAmB,cAAc;AAC7D,WAAK,uBAAuB,gBAAgB,cAAc;AAAA,IAC9D,GAAG,CAAC;AAAA,EACR;AAAA,EAEQ,wBAAwB;AAC5B,SAAK;AAAA,MACD,KAAK,gBAAgB,kBAAkB,CAAC,YAA0B;AAC9D,YAAI,CAAC,kBAAkB,SAAS,QAAQ,EAAE,GAAG;AACzC;AAAA,QACJ;AAEA,4BAAoB,MAAM;AACtB,gBAAM,SAAS,QAAQ;AACvB,gBAAM,EAAE,QAAQ,WAAW,OAAO,IAAI;AACtC,eAAK,yBAAyB,QAAQ,WAAW,MAAM;AAAA,QAC3D,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,yBAAyB,QAAgB,WAAmB,QAAkB;AAClF,UAAM,cAAc,KAAK,uBAAuB,eAAe,QAAQ,SAAS;AAEhF,UAAM,iBAAkC,CAAC;AAEzC,WAAO,KAAK,WAAW,EAAE,QAAQ,CAAC,cAAc;AAC5C,YAAM,UAAU,YAAY,SAAS;AACrC,YAAM,EAAE,gBAAgB,WAAW,gCAA6C,IAAI;AACpF,UAAI,+BAA4C;AAC5C,eAAO;AAAA,MACX;AAEA,YAAM,EAAE,MAAM,GAAG,IAAI;AACrB,YAAM,EAAE,KAAK,SAAS,QAAQ,WAAW,IAAI;AAC7C,YAAM,EAAE,KAAK,OAAO,QAAQ,SAAS,IAAI;AACzC,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,cAAM,QAAQ,OAAO,CAAC;AACtB,cAAM,EAAE,UAAU,QAAQ,aAAa,UAAU,IAAI;AACrD,YAAI,UAAU;AAAA,UACV;AAAA,YACI;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACJ;AAAA,UACA;AAAA,YACI,UAAU;AAAA,YACV,QAAQ;AAAA,YACR,aAAa;AAAA,YACb,WAAW;AAAA,UACf;AAAA,QACJ,KAAK,UAAU,UAAU,aAAa,WAAW;AAC7C,gBAAM,mBAAmB;AACzB,gBAAM,eAAe,2BAA2B,gBAAgB,KAAK,yBAAyB,KAAK,uBAAuB;AAC1H,yBAAe,KAAK;AAAA,YAChB,GAAG;AAAA,YACH,WAAW;AAAA,cACP,GAAG;AAAA,cACH,OAAO,mBAAmB,uCAAW,QAAQ,6CAAc;AAAA,cAC3D,QAAQ,mBAAmB,uCAAW,SAAS,6CAAc;AAAA,YACjE;AAAA,UACJ,CAAC;AACD;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,CAAC;AAED,QAAI,eAAe,WAAW,GAAG;AAC7B;AAAA,IACJ;AAEA,SAAK,uBAAuB,iBAAiB,cAAc;AAE3D,SAAK,gBAAgB,mBAAmB,sCAAsC,IAAI,CAAC,MAAM,CAAC;AAAA,EAC9F;AACJ;AAlrCa,0CAAN;AAAA,EAGE;AAAA,EACA;AAAA,EACA;AAAA,EACA,0BAAO,2BAA2B;AAAA,EAClC,0BAAO,uBAAuB;AAAA,EAC9B;AAAA,EACA;AAAA,EACA;AAAA,GAVI;;;AChDN,IAAM,wBAAkC;AAAA,EAC3C,IAAI;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,aAAwB;AAC9B,UAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,UAAM,wBAAwB,SAAS,IAAI,oBAAoB;AAE/D,UAAM,WAAW,sBAAsB,iBAAiB;AAExD,QAAI,SAAS,WAAW,GAAG;AACvB,aAAO;AAAA,IACX;AAEA,UAAM,SAAS,SAAS,CAAC,EAAE;AAE3B,UAAM,cAAc,SAAS,IAAI,CAAC,YAAY;AAC1C,YAAM,EAAE,QAAAC,SAAQ,WAAW,WAAW,YAAY,IAAI;AAEtD,aAAO;AAAA,QACH,QAAAA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,WAAO,eAAe,eAA4C,0BAA0B,IAAI;AAAA,MAC5F;AAAA,MACA,UAAU;AAAA,IACd,CAAC;AAAA,EACL;AACJ;;;ACtBO,IAAM,sBAAgC;AAAA,EACzC,IAAI;AAAA,EACJ;AAAA,EACA,SAAS,CAAC,UAAqB,WAAuC;AAClE,UAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,UAAM,wBAAwB,SAAS,IAAI,oBAAoB;AAC/D,UAAM,yBAAyB,SAAS,IAAI,4BAA4B;AAExE,UAAM,EAAE,UAAU,IAAI;AAEtB,UAAM,WAAW,sBAAsB,iBAAiB;AAExD,QAAI,SAAS,WAAW,GAAG;AACvB,aAAO;AAAA,IACX;AAEA,UAAM,SAAS,SAAS,CAAC,EAAE;AAE3B,UAAM,cAAc,SAAS,IAAI,CAAC,YAAY;AAC1C,YAAM,EAAE,UAAU,IAAI;AACtB,UAAI,aAAa,MAAM;AACnB,eAAO;AAAA,MACX;AACA,YAAM,eAAe,EAAE,GAAG,UAAU;AAEpC,YAAM,EAAE,OAAO,GAAG,MAAM,EAAE,IAAI;AAE9B,UAAI,0BAA4B;AAC5B,qBAAa,MAAM,MAAM;AAAA,MAC7B,WAAW,4BAA8B;AACrC,qBAAa,MAAM,MAAM;AAAA,MAC7B,WAAW,4BAA8B;AACrC,qBAAa,OAAO,OAAO;AAAA,MAC/B,WAAW,6BAA+B;AACtC,qBAAa,OAAO,OAAO;AAAA,MAC/B;AAEA,aAAO;AAAA,QACH,GAAG;AAAA,QACH,WAAW;AAAA,QACX,gBAAgB,2BAA2B,cAAc,sBAAsB;AAAA,MACnF;AAAA,IACJ,CAAC,EAAE,OAAO,CAAC,YAAY,WAAW,IAAI;AAEtC,UAAM,SAAS,eAAe,mBAA6C,uBAAuB,IAAI;AAAA,MAClG;AAAA,MACA,UAAU;AAAA,IACd,CAAC;AAED,QAAI,QAAQ;AACR,qBAAe,mBAAmB,sCAAsC,IAAI,CAAC,MAAM,CAAC;AACpF,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACX;AACJ;;;AC/DO,IAAM,oBAAoB;AAC1B,IAAM,uBAAuB;AAE7B,SAAS,iBAAiB,UAAgC;AAC7D,SAAO;AAAA,IACH,IAAI;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,IACT,SAAS,wBAAwB,UAAU,EAAmB,YAAY;AAAA,IAC1E,WAAW,wBAAwB,UAAU,EAAE,eAAe,CAAC,0BAA0B,GAAG,gBAAgB,CAAC,uBAAuB,GAAG,YAAY,CAAC,kCAAkC,EAAE,CAAC;AAAA,EAC7L;AACJ;AAEO,SAAS,4BAA4B,WAAiC;AACzE,SAAO;AAAA,IACH,IAAI,wBAAwB;AAAA,IAC5B,OAAO;AAAA,IACP;AAAA,IACA,SAAS,wBAAwB,WAAW,EAAmB,YAAY;AAAA,EAC/E;AACJ;AAEO,SAAS,2BAA2B,WAAiC;AACxE,SAAO;AAAA,IACH,IAAI,uBAAuB;AAAA,IAC3B,OAAO;AAAA,IACP;AAAA,IACA,SAAS,wBAAwB,WAAW,EAAmB,YAAY;AAAA,EAC/E;AACJ;;;AClCA,IAAAC,iBAA2C;;;ACpB3C,IAAOC,wBAAQ;AAAA,EACb,oBAAoB;AAAA,EACpB,wBAAwB;AAAA,EACxB,0BAA0B;AAAA,EAC1B,yBAAyB;AAAA,EACzB,4BAA4B;AAAA,EAC5B,uBAAuB;AAAA,EACvB,+BAA+B;AAAA,EAC/B,0BAA0B;AAAA,EAC1B,gCAAgC;AAAA,EAChC,0BAA0B;AAAA,EAC1B,yBAAyB;AAAA,EACzB,yBAAyB;AAAA,EACzB,yBAAyB;AAAA,EACzB,kBAAkB;AAAA,EAClB,uBAAuB;AACzB;;;ACSA,IAAAC,gBAAoC;AAwHhB,IAAAC,uBAAA;AAhHb,IAAM,qBAAqB,CAAC,UAAoC;AAjCvE;AAkCI,QAAM,iBAAiB,cAAc,eAAe;AACpD,QAAM,gBAAgB,cAAc,aAAa;AACjD,QAAM,wBAAwB,cAAc,sBAAsB;AAClE,QAAM,uBAAuB,cAAc,qBAAqB;AAEhE,QAAM,EAAE,SAAS,IAAI;AAErB,QAAM,eAAe,SAAS,CAAC;AAE/B,MAAI,gBAAgB,MAAM;AACtB;AAAA,EACJ;AAEA,QAAM,EAAE,OAAO,IAAI;AAEnB,QAAM,eAAe,qBAAqB,cAAc,MAAM;AAC9D,QAAM,QAAQ,6CAAc;AAC5B,MAAI,SAAS,MAAM;AACf;AAAA,EACJ;AACA,QAAM,cAAc,MAAM,uBAAuB;AAEjD,QAAM,CAAC,YAAY,aAAa,QAAI,wBAAS,IAAI;AAEjD,QAAM,QAAO,kBAAa,eAAb;AACb,QAAM,CAAC,OAAO,QAAQ,QAAI,wBAAS,IAAI;AAEvC,WAASC,iBAAgB,SAAkCC,wBAA0E;AACjI,UAAM,SAAoC,CAAC;AAC3C,YAAQ,QAAQ,CAAC,WAAW;AACxB,YAAM,EAAE,KAAK,IAAI;AAEjB,YAAM,cAAcA,uBAAsB,eAAe,IAAI;AAE7D,UAAI,eAAe,MAAM;AACrB,eAAO,KAAK,IAAI;AAChB,eAAO;AAAA,MACX;AAEA,YAAM,EAAE,QAAAC,SAAQ,WAAW,WAAW,aAAa,YAAY,eAAe,IAAI;AAElF,aAAO,KAAK;AAAA,QACR,QAAAA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ,CAAC;AAAA,IACL,CAAC;AAED,WAAO;AAAA,EACX;AAEA,+BAAU,MAAM;AACZ,UAAM,yBAAyB,YAAY,cAAc,UAAU,CAAC,eAAe;AAC/E,UAAI,eAAe,MAAM;AACrB,sBAAc,KAAK;AAAA,MACvB;AAAA,IACJ,CAAC;AAED,UAAM,wBAAwB,YAAY,aAAa,UAAU,CAAC,UAAU;AA/FpF,UAAAC;AAgGY,YAAM,EAAE,QAAQ,IAAI;AACpB,YAAM,SAASH,iBAAgB,SAAS,qBAAqB;AAE7D,UAAI,OAAO,WAAW,GAAG;AACrB,sBAAc,KAAK;AAAA,MACvB,WAAW,OAAO,UAAU,GAAG;AAC3B,sBAAc,IAAI;AAClB,cAAM,eAAaG,MAAA,OAAO,CAAC,MAAR,gBAAAA,IAAW;AAC9B,iBAAS,UAAU;AAAA,MACvB;AAAA,IACJ,CAAC;AAED,WAAO,MAAM;AACT,4BAAsB,YAAY;AAClC,6BAAuB,YAAY;AAAA,IACvC;AAAA,EACJ,GAAG,CAAC,CAAC;AAEL,WAAS,aAAaC,QAAkC;AACpD,aAAUA,MAAgC;AAE1C,UAAM,gBAAgB,sBAAsB,iBAAiB;AAC7D,QAAI,cAAc,WAAW,GAAG;AAC5B;AAAA,IACJ;AAEA,UAAM,eAAe,cAAc,IAAI,CAAC,YAAY;AAChD,aAAO;AAAA,QACH,QAAQ,QAAQ;AAAA,QAChB,WAAW,QAAQ;AAAA,QACnB,WAAW,QAAQ;AAAA,QACnB,YAAYA;AAAA,MAChB;AAAA,IACJ,CAAC;AAED,mBAAe,eAAe,uBAAuB,IAAI;AAAA,MACrD,QAAQ,cAAc,CAAC,EAAE;AAAA,MACzB,UAAU;AAAA,IACd,CAAC;AAAA,EACL;AAEA,QAAM,cAAc,CAAC,WAAoB;AACrC,WAAO,SAAS,UAAU;AAAA,EAC9B;AAEA,SACI,+CAAC,SAAI,WAAW,KAAKC,sBAAO,sBAAsBA,sBAAO,sBAAsB,GAAG,OAAO,EAAE,SAAS,YAAY,UAAU,EAAE,GACxH;AAAA,kDAAC,SAAI,WAAWA,sBAAO,qBACnB,wDAAC,SAAI,WAAW,KAAKA,sBAAO,wBAAwBA,sBAAO,qBAAqB,GAC5E,wDAAC,SAAK,wBAAc,EAAE,sBAAsB,GAAE,GAClD,GACJ;AAAA,IACA,8CAAC,SAAI,WAAW,KAAKA,sBAAO,mBAAmB,GAC3C,wDAAC,SAAI,WAAW,KAAKA,sBAAO,sBAAsB,GAC9C,yDAAC,cAAW,OAAc,UAAU,cAAc,WAAU,YACxD;AAAA,oDAAC,SAAM,uBAAqC,wBAAc,EAAE,qBAAqB,GAAE;AAAA,MACnF,8CAAC,SAAM,2BAAyC,wBAAc,EAAE,yBAAyB,GAAE;AAAA,MAC3F,8CAAC,SAAM,uBAAqC,wBAAc,EAAE,qBAAqB,GAAE;AAAA,OACvF,GACJ,GACJ;AAAA,KACJ;AAER;;;AFtHQ,IAAAC,uBAAA;AAjBD,IAAM,oBAAoB,MAAM;AACnC,QAAM,wBAAwB,cAAc,sBAAsB;AAClE,QAAM,gBAAgB,sBAAsB,iBAAiB;AAE7D,QAAM,CAAC,UAAU,WAAW,QAAI,yBAA0B,aAAa;AAEvE,gCAAU,MAAM;AACZ,UAAM,eAAe,sBAAsB,OAAO,UAAU,CAACC,cAAa;AACtE,kBAAYA,SAAQ;AAAA,IACxB,CAAC;AAED,WAAO,MAAM;AACT,mBAAa,YAAY;AAAA,IAC7B;AAAA,EACJ,GAAG,CAAC,CAAC;AAEL,SAAO,CAAC,EAAC,qCAAU,WACf,+CAAC,SAAI,WAAWC,sBAAO,kBACnB;AAAA,kDAAC,sBAAmB,UAAoB;AAAA,IACxC,8CAAC,sBAAmB,UAAoB;AAAA,KAC5C;AAER;;;AGzBO,IAAM,aAA6B;AAAA,EACtC,4CAAiC,GAAG;AAAA,IAChC,CAAC,oBAAoB,GAAG;AAAA,MACpB,OAAO;AAAA,MACP,iBAAiB;AAAA,MACjB,CAAC,wBAAwB,EAAE,GAAG;AAAA,QAC1B,OAAO;AAAA,QACP,iBAAiB;AAAA,MACrB;AAAA,MACA,CAAC,uBAAuB,EAAE,GAAG;AAAA,QACzB,OAAO;AAAA,QACP,iBAAiB;AAAA,MACrB;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACbO,SAAS,wBAAwB,gBAA0C;AAC9E,SACI,CAAC,eAAe,gBAAgB,sBAAsB,KACtD,CAAC,eAAe,gBAAgB,gBAAgB,KAChD,CAAC,eAAe,gBAAgB,qBAAqB,KACrD,eAAe,gBAAgB,wBAAwB;AAE/D;AAEO,IAAM,8BAAyE;AAAA,EAClF,IAAI,oBAAoB;AAAA,EACxB,aAAa;AAAA,EACb,OAAO;AAAA,EACP;AAAA,EACA,UAAU;AAAA,EACV,eAAe;AAAA,EACf,kBAAkB;AAAA,IACd;AAAA,EACJ;AACJ;AAEO,IAAM,4BAAuE;AAAA,EAChF,IAAI,oBAAoB;AAAA,EACxB,aAAa;AAAA,EACb,OAAO;AAAA,EACP;AAAA,EACA,UAAU;AAAA,EACV,eAAe;AAAA,EACf,kBAAkB;AAAA,IACd;AAAA,EACJ;AACJ;AAEO,IAAM,8BAAyE;AAAA,EAClF,IAAI,oBAAoB;AAAA,EACxB,aAAa;AAAA,EACb,OAAO;AAAA,EACP;AAAA,EACA,UAAU;AAAA,EACV,eAAe;AAAA,EACf,kBAAkB;AAAA,IACd;AAAA,EACJ;AACJ;AAEO,IAAM,+BAA0E;AAAA,EACnF,IAAI,oBAAoB;AAAA,EACxB,aAAa;AAAA,EACb,OAAO;AAAA,EACP;AAAA,EACA,UAAU;AAAA,EACV,eAAe;AAAA,EACf,kBAAkB;AAAA,IACd;AAAA,EACJ;AACJ;AACO,IAAM,6BAA4C;AAAA,EACrD,IAAI,sBAAsB;AAAA,EAC1B,aAAa;AAAA,EACb,OAAO;AAAA;AAAA,EAEP,eAAe;AAAA,EACf;AAAA,EACA;AACJ;;;AC9CO,IAAM,2BAAN,cAAuC,WAAW;AAAA,EACrD,YAC+C,mBACL,qBACJ,iBACC,kBACM,wBACS,0BACpD;AACE,UAAM;AAPqC;AACL;AACJ;AACC;AACM;AACS;AAIlD,SAAK,MAAM;AAAA,EACf;AAAA,EAEQ,wBAA8B;AAClC,UAAM,mBAAmB,KAAK;AAC9B,SAAK,cAAc,iBAAiB,SAAS,mBAAmB,wBAAc,CAAC;AAC/E,SAAK,cAAc,iBAAiB,SAAS,+BAA+B,iBAAiB,CAAC;AAAA,EAClG;AAAA,EAEQ,aAAmB;AACvB,SAAK,oBAAoB,UAAU,UAAU;AAAA,EACjD;AAAA,EAEQ,gBAAgB;AACpB;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,EAAE,QAAQ,CAAC,YAAY,KAAK,cAAc,KAAK,gBAAgB,gBAAgB,OAAO,CAAC,CAAC;AAAA,EAC5F;AAAA,EAEQ,iBAAuB;AAC3B;AAAA;AAAA,MAEI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,EAAE,QAAQ,CAAC,SAAS;AAChB,WAAK,cAAc,KAAK,iBAAiB,iBAAiB,IAAI,CAAC;AAAA,IACnE,CAAC;AAAA,EACL;AAAA,EAEQ,QAAc;AAClB,SAAK,cAAc;AACnB,SAAK,sBAAsB;AAC3B,SAAK,WAAW;AAChB,SAAK,eAAe;AAAA,EACxB;AACJ;AA7Da,2BAAN;AAAA,EAEE,0BAAO,gBAAgB;AAAA,EACvB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,0BAAO,uBAAuB;AAAA,GAP1B;;;AC2EN,SAAS,wBAAwB,kBAAqC,OAAc,UAA+B,WAAsB,cAAiD;AAC7L,QAAM,EAAE,QAAQ,OAAO,IAAI,MAAM,iBAAiB;AAClD,QAAM,WAAW,MAAM,sCAAwC;AAE/D,QAAM,SAAS,UAAU,UAAU;AACnC,QAAM,EAAE,aAAa,qBAAqB,UAAU,kBAAkB,QAAQ,YAAY,QAAQ,WAAW,IAAI;AAIjH,QAAM,WAAW;AAAA,IACb,MAAM;AAAA;AAAA,IACN,KAAK;AAAA,EACT;AAEA,MAAI,CAAC,UAAU;AACX,WAAO;AAAA,MACH,GAAG;AAAA,MACH;AAAA,IACJ;AAAA,EACJ;AACA,QAAM,EAAE,MAAM,OAAO,KAAK,OAAO,IAAI;AACrC,MAAI,EAAE,KAAK,eAAe,MAAM,gBAAgB,iBAAiB,gBAAgB,IAAI;AAErF,QAAM,EAAE,kBAAkB,sBAAsB,wBAAwB,IAAI,gBAAgB,CAAC;AAC7F,QAAM,EAAE,gBAAgB,mBAAmB,IAAI;AAC/C,QAAM,mBAAmB;AAAA,IACrB,KAAK;AAAA,IACL,MAAM;AAAA,EACV;AACA,MAAI,sBAAsB;AACtB,QAAI,MAAM,SAAS,iBAAiB,GAAG,GAAG;AACtC,uBAAiB,MAAM,qBAAqB;AAAA,IAChD;AACA,QAAI,MAAM,SAAS,iBAAiB,IAAI,GAAG;AACvC,uBAAiB,OAAO,qBAAqB;AAAA,IACjD;AAAA,EACJ;AACA,MAAI,4BAA4B,+BAAoC;AAChE,sBAAkB;AAAA,EACtB;AACA,MAAI,4BAA4B,2BAAkC;AAC9D,sBAAkB;AAAA,EACtB;AAEA,MAAI,aAAqB;AACzB,MAAI,cAAsB;AAK1B,QAAM,eAAe,SAAS,UAAU,mBAAmB,UAAU,IAAI;AACzE,QAAM,eAAe,SAAS,UAAU,sBAAsB,UAAU,IAAI;AAC5E,QAAM,aAAa,SAAS,UAAU,gBAAgB,IAAI;AAC1D,QAAM,aAAa,SAAS,UAAU,mBAAmB,IAAI;AAE7D,MAAI,eAAe,GAAG;AAClB,aAAS,OAAO;AAChB,kBAAc,OAAO,mBAAmB;AACxC,mBAAe,QAAQ,mBAAmB;AAAA,EAC9C,OAAO;AAIH,UAAM,eAAe,QAAQ,eAAe;AAC5C,UAAM,gBAAgB,SAAS,eAAe;AAC9C,QAAI,QAAQ,YAAY;AACpB,mBAAa,eAAe;AAC5B,oBAAc,gBAAgB;AAAA,IAClC,WAAW,QAAQ,cAAc,SAAS,YAAY;AAClD,mBAAa,eAAe;AAC5B,oBAAc,KAAK,IAAI,iBAAiB,QAAQ,mBAAmB,MAAM;AAAA,IAC7E,WAAW,OAAO,YAAY;AAC1B,eAAS,OAAO;AAChB,mBAAa,KAAK,KAAK,OAAO,mBAAmB,QAAQ,cAAc;AACvE,oBAAc,KAAK,KAAK,QAAQ,mBAAmB,QAAQ,cAAc;AAAA,IAC7E;AAAA,EACJ;AAEA,MAAI,YAAoB;AACxB,MAAI,eAAuB;AAC3B,MAAI,eAAe,GAAG;AAClB,aAAS,MAAM;AACf,iBAAa,MAAM,mBAAmB;AACtC,oBAAgB,SAAS,mBAAmB;AAAA,EAChD,OAAO;AACH,UAAM,cAAc,OAAO,eAAe;AAC1C,UAAM,iBAAiB,UAAU,eAAe;AAChD,QAAI,SAAS,YAAY;AACrB,kBAAY,cAAc;AAC1B,qBAAe,iBAAiB;AAAA,IACpC,WAAW,OAAO,cAAc,UAAU,YAAY;AAClD,kBAAY,cAAc;AAC1B,qBAAe,KAAK,IAAI,gBAAgB,SAAS,mBAAmB,MAAM;AAAA,IAC9E,WAAW,MAAM,YAAY;AACzB,eAAS,MAAM;AACf,kBAAY,KAAK,KAAK,MAAM,mBAAmB,QAAQ,aAAa;AACpE,qBAAe,KAAK,KAAK,SAAS,mBAAmB,QAAQ,aAAa;AAAA,IAC9E;AAAA,EACJ;AAEA,eAAa,KAAK,IAAI,YAAY,iBAAiB,IAAI;AACvD,cAAY,KAAK,IAAI,WAAW,iBAAiB,GAAG;AACpD,gBAAc,KAAK,IAAI,aAAa,iBAAiB,IAAI;AACzD,iBAAe,KAAK,IAAI,cAAc,iBAAiB,GAAG;AAE1D,QAAM,KAAK;AAAA,IACP,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK;AAAA,IACL,QAAQ;AAAA,IACR;AAAA,EACJ;AACA,SAAO;AACX;AAUA,IAAM,eAAe,CACjB,aACA,YACA,UACA,WACA,iBACkB;AAClB,QAAM,EAAE,MAAM,IAAI;AAClB,QAAM,EAAE,MAAM,KAAK,OAAO,QAAQ,MAAM,IAAI;AAC5C,QAAM,qBAAwC;AAAA,IAC1C;AAAA,IACA,OAAO,OAAO;AAAA,IACd;AAAA,IACA,QAAQ,MAAM;AAAA,EAClB;AAEA,QAAM,cAAc,wBAAwB,oBAAoB,OAAO,UAAU,WAAW,YAAY;AACxG,QAAM,EAAE,QAAQ,OAAO,IAAI,MAAM,iBAAiB;AAElD,QAAM,SAA0B;AAAA,IAC5B,QAAQ,YAAY;AAAA,IACpB,MAAM,YAAY;AAAA,IAClB,QAAQ,YAAY;AAAA,IACpB,MAAM,YAAY;AAAA,IAClB,QAAQ;AAAA,IACR,OAAO,QAAQ;AAAA,IACf,QAAQ,SAAS;AAAA,IACjB,UAAU,YAAY;AAAA,EAC1B;AAEA,SAAO;AACX;AAMO,IAAM,oCAAN,cAAgD,WAAW;AAAA,EAqB9D,YAC2C,uBACP,wBACC,iBACD,wBACgB,wBACT,sBACM,mBAC/C;AACE,UAAM;AARiC;AACP;AACC;AACD;AACgB;AACT;AACM;AAxBjD;AAAA;AAAA;AAAA,wBAAQ,gBAAuE,oBAAI,IAAI;AAIvF;AAAA;AAAA;AAAA,wBAAQ,oBAAqD,oBAAI,IAAI;AAErE,wBAAQ,qBAAoB,IAAI,QAAgD;AAChF,4CAAmB,KAAK,kBAAkB,aAAa;AAEvD,wBAAQ,SAAQ,IAAI,QAAuF;AAC3G,wBAAO,QAAO,KAAK,MAAM,aAAa;AAEtC,wBAAQ,YAAW,IAAI,QAA2D;AAClF,mCAAU,KAAK,SAAS,aAAa;AAErC,wBAAQ,UAAqC,CAAC;AAY1C,SAAK,oBAAoB;AACzB,SAAK,uBAAuB;AAC5B,SAAK,gBAAgB;AACrB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EAEQ,mBAAmB;AACvB,SAAK,kBAAkB,WAAW,KAAK,OAAO,CAAC,MAAM,sBAA8B,GAAG,KAAK,CAAC,CAAC,EAAE,UAAU,MAAM;AAC3G,WAAK,sBAAsB;AAAA,IAC/B,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOQ,WAAW,QAAgB,WAAmB;AAClD,QAAI,UAAU,KAAK,aAAa,IAAI,MAAM;AAC1C,QAAI,CAAC,SAAS;AACV,gBAAU,oBAAI,IAAI;AAClB,WAAK,aAAa,IAAI,QAAQ,OAAO;AAAA,IACzC;AAEA,QAAI,aAAa,QAAQ,IAAI,SAAS;AACtC,QAAI,CAAC,YAAY;AACb,mBAAa,oBAAI,IAAI;AACrB,cAAQ,IAAI,WAAW,UAAU;AAAA,IACrC;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,gBAAgB,IAAY;AACxB,WAAO,KAAK,iBAAiB,IAAI,EAAE;AAAA,EACvC;AAAA,EAEQ,uCAAuC,QAA0B;AACrE,QAAI,UAAU,MAAM;AAChB;AAAA,IACJ;AAEA,UAAM,aAAa,KAAK,sBAAsB,cAAc,MAAM;AAElE,UAAM,QAAQ,yCAAY;AAE1B,QAAI,cAAc,QAAQ,SAAS,MAAM;AACrC,aAAO;AAAA,IACX;AAEA,UAAM,cAAc,MAAM,uBAAuB;AACjD,UAAM,SAAS,WAAW,OAAO,iBAAiB;AAElD,WAAO,EAAE,OAAO,aAAa,YAAY,OAAO;AAAA,EACpD;AAAA,EAEQ,kBAAkB,IAAY;AAClC,QAAI;AACJ,SAAK,OAAO,QAAQ,CAAC,SAAS;AAC1B,cAAQ,KAAK,mBAAmB,EAAE;AAAA,IACtC,CAAC;AAED,WAAO;AAAA,EACX;AAAA;AAAA,EAGQ,sBAAsB;AAC1B,SAAK;AAAA;AAAA,MAGD,KAAK,uBAAuB,KAAK,UAAU,CAAC,WAA6B;AAErE,QAAC,OAAQ,QAAQ,CAAC,UAAU;AA3X5C;AA4XoB,gBAAM,EAAE,QAAQ,WAAW,UAAU,IAAI;AACzC,gBAAM,SAAS,sBAAsB,KAAK,wBAAwB,EAAE,QAAQ,UAAU,CAAC;AACvF,gBAAM,gBAAgB,KAAK,uBAAuB,kBAAkB,KAAK;AAEzE,gBAAM,WAAW,KAAK,uBAAuB,QAAkB,QAAQ,EAAmB,YAAY;AACtG,cAAI,CAAC,UAAU;AACX;AAAA,UACJ;AAEA,gBAAM,gBAAgB,SAAS,eAAe,EAAE,WAAW;AAE3D,cAAI,CAAC,iBAAiB,CAAC,QAAQ;AAC3B;AAAA,UACJ;AAEA,gBAAM,YAAW,UAAK,sBAAsB,cAAc,MAAM,MAA/C,mBAAkD,KAAK,6BAA6B,iBAAiB;AACtH,cAAI,CAAC,UAAU;AACX;AAAA,UACJ;AAEA,gBAAM,EAAE,WAAW,aAAa,KAAK,IAAI;AAEzC,cAAI,uCAA+C,uCAA+C;AAC9F;AAAA,UACJ;AAEA,gBAAM,eAAe,KAAK,uCAAuC,MAAM;AAEvE,cAAI,gBAAgB,MAAM;AACtB;AAAA,UACJ;AACA,gBAAM,EAAE,OAAO,OAAO,IAAI;AAE1B,cAAI,aAAa,MAAM;AACnB,mBAAO;AAAA,UACX;AAEA,cAAI,kBAAkB,WAAW;AAC7B;AAAA,UACJ;AAEA,gBAAM,EAAE,MAAM,KAAK,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO,MAAM,IAAI;AAExE,gBAAM,eAAe,kCAAkC,EAAE,QAAQ,WAAW,UAAU,CAAC;AAEvF,gBAAM,YAAY,MAAM,UAAU,YAAY;AAE9C,cAAI,aAAa,MAAM;AACnB,sBAAU,iBAAiB,EAAE,MAAM,KAAK,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO,MAAM,CAAC;AAC1F;AAAA,UACJ;AAEA,gBAAM,cAA0B;AAAA,YAC5B;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA,QAAQ,KAAK,uBAAuB,gBAAgB,QAAQ,SAAS,EAAE,SAAS;AAAA,UACpF;AAEA,gBAAM,UAAU;AAEhB,cAAI,SAAS;AACT,kBAAM,kBAAkB,OAAQ,KAAgC,kBAAkB;AAClF,wBAAY,OAAO;AACnB,wBAAY,gBAAgB;AAC5B,gBAAI,QAAS,KAAgC,QAAQ;AACjD,0BAAY,SAAU,KAAgC;AAAA,YAC1D;AACA,wBAAY,aAAa;AACzB,wBAAY,cAAc;AAC1B,wBAAY,gBAAgB;AAC5B,wBAAY,SAAS;AAAA,UACzB;AAEA,gBAAM,OAAO,IAAI,KAAK,cAAc,WAAW;AAE/C,cAAI,SAAS;AACT,iBAAK,2BAA8B;AAAA,UACvC;AAEA,gBAAM,UAAU,MAAM,0BAA0B;AAChD,cAAI,cAAc,mBAAmB,OAAO;AACxC,kBAAM,oBAAoB,IAAI;AAAA,UAClC;AACA,gBAAMC,OAAM,KAAK,WAAW,QAAQ,SAAS;AAC7C,gBAAM,uBAAuB,IAAI,qBAAqB;AACtD,gBAAM,eAAe,aAAa,MAAM,aAAa,YAAY,SAAS,UAAU,OAAO,SAAS;AACpG,gBAAM,YAAY,IAAI,gBAAiC,YAAY;AAEnE,gBAAM,OAA4B;AAAA,YAC9B,SAAS;AAAA,YACT;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACJ;AAEA,eAAK,uBAAuB,YAAY;AAAA,YACpC;AAAA,YACA,IAAI;AAAA,YACJ,cAAc,cAAc;AAAA,YAC5B,eAAe,CAAC,QAAQ;AACpB,qBAAO,cAAc,IAAI,aAAa,IAAI,MAAM,GAAG,CAAC;AAAA,YACxD;AAAA,YACA,eAAe,CAAC,QAAmC;AAC/C,qBAAO,cAAc,IAAI,aAAa,IAAI,MAAM,GAAG,CAAC;AAAA,YACxD;AAAA,YACA,aAAa,CAAC,QAAmC;AAC7C,qBAAO,cAAc,IAAI,aAAa,IAAI,MAAM,GAAG,CAAC;AAAA,YACxD;AAAA,YACA,SAAS,CAAC,QAAoB;AAC1B,qBAAO,cAAc,IAAI,WAAW,IAAI,MAAM,GAAG,CAAC;AAAA,YACtD;AAAA,YACA,QAAO,WAAAA,KAAI,IAAI,SAAS,MAAjB,mBAAoB,UAApB,YAA6B,KAAK,kBAAkB,SAAS;AAAA,YACpE;AAAA,YACA;AAAA,UACJ,CAAC;AAED,gBAAM,WAAW,KAAK,mBAAmB,eAAe,MAAM;AAC1D,kBAAM,cAAc,aAAa,MAAM,aAAa,YAAY,SAAS,UAAU,OAAO,SAAS;AACnG,sBAAU;AAAA,cACN;AAAA,YACJ;AAAA,UACJ,CAAC;AAED,+BAAqB,IAAI,MAAM;AAC3B,iBAAK,uBAAuB,eAAe,SAAS;AAAA,UACxD,CAAC;AACD,sBAAY,qBAAqB,IAAI,QAAQ;AAC7C,eAAK,iBAAiB,IAAI,WAAW,IAAI;AACzC,UAAAA,KAAI,IAAI,WAAW;AAAA,YACf,GAAGA,KAAI,IAAI,SAAS;AAAA,UACxB,CAAC;AAAA,QACL,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAGA,SAAK;AAAA,MACD,KAAK,uBAAuB,QAAQ,UAAU,CAAC,WAAW;AACtD,QAAC,OAAQ,QAAQ,CAAC,UAAU;AACxB,gBAAM,EAAE,QAAQ,WAAW,UAAU,IAAI;AACzC,gBAAM,eAAe,kCAAkC,EAAE,QAAQ,WAAW,UAAU,CAAC;AAEvF,gBAAM,eAAe,KAAK,uCAAuC,MAAM;AACvE,cAAI,gBAAgB,MAAM;AACtB;AAAA,UACJ;AACA,gBAAM,EAAE,aAAa,MAAM,IAAI;AAC/B,gBAAM,YAAY,MAAM,UAAU,YAAY;AAC9C,cAAI,uCAAW,MAAM;AACjB,wBAAY,kBAAkB,CAAC,uCAAW,IAAI,CAAC;AAAA,UACnD;AAAA,QACJ,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,wBAAwB;AAC5B,UAAM,cAAc,CAAC,QAAgB,cAAsB;AA5hBnE;AA6hBY,YAAM,eAAe,KAAK,uCAAuC,MAAM;AACvE,YAAMA,OAAM,KAAK,WAAW,QAAQ,SAAS;AAC7C,YAAM,MAAM,MAAM,KAAKA,KAAI,KAAK,CAAC;AACjC,YAAM,SAAS,sBAAsB,KAAK,wBAAwB,EAAE,QAAQ,UAAU,CAAC;AACvF,YAAM,YAAW,UAAK,sBAAsB,cAAc,MAAM,MAA/C,mBAAkD,KAAK,6BAA6B,iBAAiB;AACtH,UAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,UAAU;AACvC;AAAA,MACJ;AACA,UAAI,QAAQ,CAAC,OAAO;AAChB,cAAM,eAAe,KAAK,iBAAiB,IAAI,EAAE;AACjD,YAAI,cAAc;AACd,gBAAM,WAAW,aAAa,aAAa,MAAM,aAAa,YAAY,SAAS,UAAU,OAAO,WAAW,YAAY;AAC3H,uBAAa,UAAU,KAAK,QAAQ;AAAA,QACxC;AAAA,MACJ,CAAC;AAAA,IACL;AAGA,SAAK;AAAA,MACD,KAAK,uBAAuB,sBAAgC,EAAmB,YAAY,EAAE;AAAA,QACzF,UAAU,CAAC,aAAa,WAAW,SAAS,eAAe,GAAG,IAAI,CAAC;AAAA,QACnE,IAAI,CAAC,cAAc;AACf,cAAI,CAAC,UAAW,QAAO;AACvB,gBAAM,SAAS,UAAU,UAAU;AACnC,gBAAM,SAAS,KAAK,sBAAsB,cAAc,MAAM;AAC9D,iBAAO,SAAS,EAAE,QAAQ,QAAQ,WAAW,UAAU,WAAW,EAAE,IAAI;AAAA,QAC5E,CAAC;AAAA,QACD;AAAA,UAAU,CAAC,WACP,SACM,iBAAiB,OAAO,OAAO,MAAM,sCAAwC,EAAG,cAAc,EAC3F,KAAK,IAAI,OAAO,EAAE,QAAQ,OAAO,QAAQ,WAAW,OAAO,UAAU,EAAE,CAAC,IAC3E,GAAG,IAAI;AAAA,QACjB;AAAA,MACJ,EAAE,UAAU,CAAC,UAAU;AACnB,YAAI,CAAC,MAAO;AAEZ,cAAM,EAAE,QAAQ,UAAU,IAAI;AAC9B,oBAAY,QAAQ,SAAS;AAAA,MACjC,CAAC;AAAA,IACL;AAKA,SAAK,cAAc,KAAK,gBAAgB,kBAAkB,CAAC,gBAAgB;AAzkBnF;AA0kBY,UAAI,YAAY,OAAO,sBAAsB,IAAI;AAC7C,cAAM,SAAU,YAAY;AAC5B,cAAM,EAAE,OAAO,IAAI;AACnB,cAAM,aAAa,MAAM,MAAK,gBAAK,aAAa,IAAI,MAAM,MAA5B,mBAA+B,WAA/B,YAAyC,CAAC,CAAC;AACzE,mBAAW,QAAQ,CAAC,cAAc;AAC9B,sBAAY,QAAQ,SAAS;AAAA,QACjC,CAAC;AAAA,MACL,WAAW,YAAY,OAAO,kBAAkB,IAAI;AAChD,cAAM,EAAE,QAAQ,UAAU,IAAI,YAAY;AAC1C,oBAAY,QAAQ,SAAS;AAAA,MACjC;AAAA,IACJ,CAAC,CAAC;AAAA,EAEN;AAAA,EAEQ,aAAa,UAAqB,QAAiD;AAzlB/F;AA0lBQ,UAAM,EAAE,QAAQ,MAAM,QAAQ,KAAK,IAAI;AACvC,UAAM,0BAAyB,UAAK,sBAAsB,cAAc,MAAM,MAA/C,mBAAkD,KAAK;AACtF,QAAI,0BAA0B,MAAM;AAChC;AAAA,IACJ;AACA,UAAM,QAAQ,uBAAuB,yBAAyB,QAAQ,MAAM;AAC5E,QAAI,SAAS,MAAM;AACf;AAAA,IACJ;AAEA,UAAM,OAAO;AAAA,MACT,QAAQ,MAAM;AAAA,MACd,cAAc,SAAS,MAAM;AAAA,MAC7B,KAAK,MAAM;AAAA,MACX,WAAW,SAAS,MAAM;AAAA,IAC9B;AAEA,UAAM,MAAM,uBAAuB,yBAAyB,MAAM,IAAI;AAEtE,QAAI,OAAO,MAAM;AACb;AAAA,IACJ;AAEA,UAAM,KAAK;AAAA,MACP,QAAQ,IAAI;AAAA,MACZ,cAAc,OAAO,IAAI;AAAA,MACzB,KAAK,IAAI;AAAA,MACT,WAAW,OAAO,IAAI;AAAA,IAC1B;AAEA,WAAO;AAAA,MACH;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,yBAAyB;AAC7B,SAAK;AAAA,MACD,KAAK,uBAAuB,QAAQ,UAAU,CAAC,WAAW;AACtD,QAAC,OAAQ,QAAQ,CAAC,SAAS;AACvB,gBAAM,eAAe,KAAK,uBAAuB,kBAAkB,IAAI;AAEvE,cAAI,CAAC,cAAc;AACf;AAAA,UACJ;AAEA,cAAI,aAAa,uCAA+C,aAAa,uCAA+C;AACxH;AAAA,UACJ;AAEA,gBAAM,WAAW;AAAA,YACb,GAAG,aAAa;AAAA,UACpB;AACA,eAAK,kBAAkB,KAAK,EAAE,IAAI,KAAK,WAAW,OAAO,SAAS,CAAC;AAAA,QACvE,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,kBAAkB;AACtB,SAAK;AAAA,MACD,KAAK,uBAAuB,QAAQ,UAAU,CAAC,WAAW;AACtD,eAAO,QAAQ,CAAC,UAAU;AACtB,eAAK,WAAW,MAAM,SAAS;AAAA,QACnC,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEA,oBAAoB,QAAgB,WAAmB,IAAY,OAA4B;AAC3F,UAAM,OAAO,KAAK,iBAAiB,IAAI,EAAE;AACzC,UAAM,eAAe,KAAK,uCAAuC,MAAM;AACvE,QAAI,QAAQ,cAAc;AACtB,YAAM,EAAE,MAAM,IAAI;AAClB,YAAM,eAAe,kCAAkC,EAAE,QAAQ,WAAW,WAAW,GAAG,CAAC;AAC3F,YAAM,YAAY,MAAM,UAAU,YAAY;AAC9C,UAAI,aAAa,qBAAqB,MAAM;AACxC,kBAAU,SAAS,KAAK;AAAA,MAC5B;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAGA,sBAAsB,OAAwB,QAAiB;AAC3D,UAAM,SAAS,sBAAsB,KAAK,wBAAwB;AAAA,MAC9D,QAAQ,MAAM;AAAA,MACd,WAAW,MAAM;AAAA,IACrB,CAAC;AACD,QAAI,CAAC,QAAQ;AACT,YAAM,IAAI,MAAM,6BAA6B;AAAA,IACjD;AAEA,UAAM,EAAE,QAAQ,UAAU,IAAI;AAC9B,UAAM,EAAE,cAAc,cAAc,MAAM,iBAAiB,KAAK,IAAI;AACpE,UAAM,KAAK,0BAAU,iBAAiB;AAEtC,UAAM,iBAAiB,KAAK,aAAa,cAAc,MAAM;AAC7D,QAAI,kBAAkB,MAAM;AACxB;AAAA,IACJ;AACA,UAAMA,OAAM,KAAK,WAAW,QAAQ,SAAS;AAC7C,IAAAA,KAAI,IAAI,IAAI,KAAK;AAEjB,UAAM,oBAAoC;AAAA,MACtC;AAAA,MACA;AAAA,MACA,WAAW;AAAA,MACX,aAAa,MAAM;AAAA,MACnB;AAAA,MACA;AAAA,MACA,WAAW;AAAA,QACP,MAAM,aAAa;AAAA,QACnB,KAAK,aAAa;AAAA,QAClB,OAAO,aAAa,OAAO,aAAa;AAAA,QACxC,QAAQ,aAAa,OAAO,aAAa;AAAA,MAC7C;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAIA,SAAK,gBAAgB,eAAe,0BAA0B,IAAI;AAAA,MAC9D;AAAA,MACA,UAAU,CAAC,iBAAiB;AAAA,IAChC,CAAgC;AAEhC,SAAK,MAAM,KAAK,EAAE,QAAQ,WAAW,GAAG,CAAC;AAEzC,WAAO;AAAA,MACH;AAAA,MACA,SAAS,MAAM;AACX,aAAK,WAAW,IAAI,IAAI;AAAA,MAC5B;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,WAAW,IAAY,gBAAgB,OAAO;AAClD,UAAM,OAAO,KAAK,iBAAiB,IAAI,EAAE;AACzC,QAAI,CAAC,MAAM;AACP;AAAA,IACJ;AACA,UAAM,EAAE,QAAQ,UAAU,IAAI;AAC9B,SAAK,iBAAiB,OAAO,EAAE;AAE/B,SAAK,QAAQ,QAAQ;AACrB,UAAM,eAAe,KAAK,uCAAuC,MAAM;AACvE,QAAI,cAAc;AACd,mBAAa,MAAM,aAAa,KAAK,IAAI;AAAA,IAC7C;AAEA,QAAI,eAAe;AACf,YAAMA,OAAM,KAAK,WAAW,QAAQ,SAAS;AAC7C,MAAAA,KAAI,OAAO,EAAE;AACb,YAAM,QAAQ,KAAK,uBAAuB,kBAAkB,EAAE,QAAQ,WAAW,WAAW,GAAG,CAAC;AAChG,UAAI,CAAC,OAAO;AACR;AAAA,MACJ;AACA,YAAM,SAAS,KAAK,qBAAqB,iBAAiB,CAAC,KAAK,CAAC;AAEjE,YAAM,EAAE,MAAM,QAAQ,IAAI;AAC1B,WAAK,gBAAgB,mBAAmB,wBAAwB,IAAI,EAAE,QAAQ,WAAW,IAAI,MAAM,SAAS,qBAA8B,CAAC;AAAA,IAC/I;AAAA,EACJ;AAAA,EAEA,QAAQ,MAA6C;AACjD,SAAK,OAAO,KAAK,IAAI;AAErB,WAAO;AAAA,MACH,SAAS,MAAM;AACX,cAAM,QAAQ,KAAK,OAAO,UAAU,CAAC,MAAM,MAAM,IAAI;AACrD,aAAK,OAAO,OAAO,OAAO,CAAC;AAAA,MAC/B;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAGA,mBAAmB,OAAe,QAAyB,WAAgC,QAAiB;AA3wBhH;AA4wBQ,UAAM,SAAS,sBAAsB,KAAK,wBAAwB;AAAA,MAC9D,QAAQ,OAAO;AAAA,MACf,WAAW,OAAO;AAAA,IACtB,CAAC;AACD,QAAI,CAAC,QAAQ;AACT,YAAM,IAAI,MAAM,6BAA6B;AAAA,IACjD;AACA,UAAM,EAAE,QAAQ,UAAU,IAAI;AAC9B,UAAM,eAAe,KAAK,uCAAuC,MAAM;AACvE,QAAI,CAAC,aAAc;AACnB,UAAM,gBAAgB,KAAK,sBAAsB,cAAc,MAAM;AACrE,QAAI,CAAC,cAAe;AACpB,UAAM,iBAAgB,UAAK,sBAAsB,cAAc,MAAM,MAA/C,mBAAkD,KAAK,6BAA6B,qBAAqB;AAC/H,QAAI,CAAC,cAAe;AAEpB,UAAM,EAAE,cAAc,MAAM,iBAAiB,KAAK,IAAI;AACtD,UAAM,KAAK,0BAAU,iBAAiB;AAEtC,UAAM,EAAE,UAAU,eAAe,WAAW,UAAU,IAAI,KAAK,6BAA6B,OAAO,eAAe,cAAc,QAAQ;AACxI,UAAM,iBAAiB,KAAK,aAAa,eAAe,MAAM;AAC9D,QAAI,kBAAkB,MAAM;AACxB;AAAA,IACJ;AACA,UAAMA,OAAM,KAAK,WAAW,QAAQ,SAAS;AAC7C,IAAAA,KAAI,IAAI,IAAI,MAAM;AAElB,UAAM,QAAQ,aAAa;AAC3B,UAAM,EAAE,OAAO,IAAI,MAAM,iBAAiB;AAC1C,UAAM,kBAAkB,wBAAwB,eAAe,WAAW,MAAM;AAEhF,UAAM,oBAAoC;AAAA,MACtC;AAAA,MACA;AAAA,MACA,WAAW;AAAA,MACX,aAAa,OAAO;AAAA,MACpB;AAAA,MACA;AAAA,MACA,WAAW;AAAA,QACP,MAAM,gBAAgB;AAAA,QACtB,KAAK,gBAAgB;AAAA,QACrB,OAAO,gBAAgB;AAAA,QACvB,QAAQ,gBAAgB;AAAA,MAC5B;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAEA;AACI,YAAM,EAAE,QAAAC,SAAQ,WAAAC,YAAW,UAAU,IAAI;AACzC,YAAMC,UAAS,sBAAsB,KAAK,wBAAwB,EAAE,QAAAF,SAAQ,WAAAC,WAAU,CAAC;AACvF,YAAM,gBAAgB;AAEtB,YAAM,WAAW,KAAK,uBAAuB,QAAkBD,SAAQ,EAAmB,YAAY;AACtG,UAAI,CAAC,UAAU;AACX;AAAA,MACJ;AAEA,YAAM,gBAAgB,SAAS,eAAe,EAAE,WAAW;AAE3D,UAAI,CAAC,iBAAiB,CAACE,SAAQ;AAC3B;AAAA,MACJ;AAEA,YAAM,mBAAkB,UAAK,sBAAsB,cAAcF,OAAM,MAA/C,mBAAkD,KAAK;AAC/E,UAAI,CAAC,iBAAiB;AAClB;AAAA,MACJ;AACA,YAAMG,iBAAgB,gBAAgB,qBAAqBF,UAAS;AACpE,UAAI,CAACE,gBAAe;AAChB;AAAA,MACJ;AAEA,YAAM,EAAE,WAAW,aAAa,MAAAC,MAAK,IAAI;AAEzC,UAAI,uCAA+C,uCAA+C;AAC9F;AAAA,MACJ;AAEA,YAAMC,gBAAe,KAAK,uCAAuCL,OAAM;AAEvE,UAAIK,iBAAgB,MAAM;AACtB;AAAA,MACJ;AACA,YAAM,EAAE,OAAAC,QAAO,OAAO,IAAID;AAE1B,UAAI,aAAa,MAAM;AACnB;AAAA,MACJ;AAEA,UAAI,kBAAkBJ,YAAW;AAC7B;AAAA,MACJ;AAEA,YAAM,EAAE,MAAM,KAAK,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO,MAAM,IAAI;AAExE,YAAM,eAAe,kCAAkC,EAAE,QAAAD,SAAQ,WAAAC,YAAW,UAAU,CAAC;AAEvF,YAAM,YAAYK,OAAM,UAAU,YAAY;AAE9C,UAAI,aAAa,MAAM;AACnB,kBAAU,iBAAiB,EAAE,MAAM,KAAK,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO,MAAM,CAAC;AAC1F;AAAA,MACJ;AAEA,YAAM,YAAwB;AAAA,QAC1B;AAAA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,QAAQ,KAAK,uBAAuB,gBAAgBN,SAAQC,UAAS,EAAE,SAAS;AAAA,MACpF;AAEA,YAAM,UAAU;AAEhB,UAAI,SAAS;AACT,cAAM,kBAAkBG,QAAQA,MAAgC,kBAAkB;AAClF,kBAAU,OAAO;AACjB,kBAAU,gBAAgB;AAC1B,YAAIA,SAASA,MAAgC,QAAQ;AACjD,oBAAU,SAAUA,MAAgC;AAAA,QACxD;AACA,kBAAU,aAAa;AACvB,kBAAU,cAAc;AACxB,kBAAU,gBAAgB;AAC1B,kBAAU,SAAS;AAAA,MACvB;AAEA,YAAM,UAAU,IAAI,KAAK,cAAc,SAAS;AAEhD,UAAI,SAAS;AACT,gBAAQ,2BAA8B;AAAA,MAC1C;AAEA,MAAAE,OAAM,UAAU,SAAS,0BAA0B;AACnD,UAAI,cAAc,mBAAmB,OAAO;AACxC,QAAAA,OAAM,oBAAoB,OAAO;AAAA,MACrC;AACA,YAAMP,OAAM,KAAK,WAAWC,SAAQC,UAAS;AAC7C,YAAM,uBAAuB,IAAI,qBAAqB;AAEtD,YAAM,WAAWK,OAAM,gBAAgB;AACvC,YAAM,EAAE,gBAAgB,mBAAmB,IAAIH,eAAc;AAE7D,YAAM,mBAAsC;AAAA,QACxC,KAAK;AAAA,QACL,MAAM;AAAA,QACN,QAAQ,SAAS;AAAA,QACjB,OAAO,SAAS;AAAA,MACpB;AAEA,YAAM,eAAe;AAAA,QACjB,SAAS;AAAA,QACT,MAAM;AAAA,QACN;AAAA,QACA;AAAA,QACA,QAAAH;AAAA,QACA,WAAAC;AAAA,MACJ;AAEA,YAAM,iBAAiB,aAAa,SAASI,cAAa,YAAYF,eAAc,UAAUD,QAAO,WAAW,YAAY;AAC5H,YAAM,YAAY,IAAI,gBAAiC,cAAc;AACrE,mBAAa,YAAY;AAGzB,UAAI,cAAyB;AAAA,QACzB;AAAA,QACA,IAAI;AAAA,QACJ,cAAc,cAAc;AAAA,QAC5B,eAAe,MAAM;AAAA,QAAE;AAAA,QACvB,eAAe,MAAM;AAAA,QAAE;AAAA,QACvB,aAAa,MAAM;AAAA,QAAE;AAAA,QACrB,SAAS,CAAC,QAAoB;AAC1B,iBAAO,cAAc,IAAI,WAAW,IAAI,MAAM,GAAG,CAAC;AAAA,QACtD;AAAA,QACA,QAAO,WAAAH,KAAI,IAAI,SAAS,MAAjB,mBAAoB,UAApB,YAA6B,KAAK,kBAAkB,SAAS;AAAA,QACpE,MAAAK;AAAA,QACA,QAAAJ;AAAA,MACJ;AACA,UAAI,OAAO,kBAAkB;AACzB,sBAAc;AAAA,UACV,GAAG;AAAA,UACH,eAAe,CAAC,QAAQ;AACpB,mBAAO,cAAc,IAAI,aAAa,IAAI,MAAM,GAAG,CAAC;AAAA,UACxD;AAAA,UACA,eAAe,CAAC,QAAmC;AAC/C,mBAAO,cAAc,IAAI,aAAa,IAAI,MAAM,GAAG,CAAC;AAAA,UACxD;AAAA,UACA,aAAa,CAAC,QAAmC;AAC7C,mBAAO,cAAc,IAAI,aAAa,IAAI,MAAM,GAAG,CAAC;AAAA,UACxD;AAAA,QACJ;AAAA,MACJ;AACA,WAAK,uBAAuB,YAAY,WAAW;AAEnD,WAAK,cAAc,UAAU,UAAU,CAAC,gBAAgB;AA98BpE,YAAAO,KAAAC,KAAAC,KAAAC;AA+8BgB,cAAM,gBAAgB,wBAAwB;AAAA,UAC1C,QAAQ;AAAA,UACR,QAAQ,YAAY;AAAA,UACpB,QAAQ,YAAY;AAAA,UACpB,MAAM,YAAY;AAAA,UAClB,MAAM,YAAY;AAAA,UAClB,QAAOH,MAAA,UAAU,UAAV,OAAAA,MAAmB,YAAY;AAAA,UACtC,SAAQC,MAAA,UAAU,WAAV,OAAAA,MAAoB,YAAY;AAAA,UACxC,UAAU;AAAA,YACN,MAAM,cAAc,SAAS;AAAA,YAC7B,KAAK,cAAc,SAAS;AAAA,UAChC;AAAA,QACJ,GAAG,SAAS;AACZ,cAAMG,gBAAe,kCAAkC,EAAE,QAAAX,SAAQ,WAAAC,YAAW,UAAU,CAAC;AACvF,cAAM,UAAU,IAAI,KAAKU,eAAc;AAAA,UACnC,MAAM,cAAc;AAAA,UACpB,KAAK,cAAc;AAAA,UACnB,QAAOF,MAAA,UAAU,UAAV,OAAAA,MAAmB,YAAY;AAAA,UACtC,SAAQC,MAAA,UAAU,WAAV,OAAAA,MAAoB,YAAY;AAAA,UACxC,QAAQ,KAAK,uBAAuB,gBAAgBV,SAAQC,UAAS,EAAE,SAAS;AAAA,QACpF,CAAC;AACD,cAAM,SAAS,aAAa,SAASI,cAAa,YAAYF,eAAc,UAAUD,QAAO,WAAW,YAAY;AACpH,kBAAU,KAAK,MAAM;AAAA,MACzB,CAAC,CAAC;AACF,YAAM,OAAM,UAAK,sBAAsB,cAAcF,OAAM,MAA/C,mBAAkD,KAAK;AAEnE,iCAAK,iBAAiB,UAAU,CAAC,aAAa;AAC1C,YAAI,CAAC,SAAU;AACf,YAAIG,eAAc,YAAY,SAAS,SAAS;AAC5C,eAAK,WAAW,IAAI,IAAI;AAAA,QAC5B;AAAA,MACJ;AAEA,YAAM,WAAW,QAAQ,mBAAmB,eAAe,MAAM;AAC7D,cAAM,cAAc,aAAa,SAASE,cAAa,YAAYF,eAAc,UAAUD,QAAO,WAAW,YAAY;AACzH,kBAAU;AAAA,UACN;AAAA,QACJ;AAAA,MACJ,CAAC;AAED,2BAAqB,IAAI,MAAM;AAC3B,aAAK,uBAAuB,eAAe,SAAS;AAAA,MACxD,CAAC;AACD,kBAAY,qBAAqB,IAAI,QAAQ;AAC7C,WAAK,iBAAiB,IAAI,WAAW,YAAY;AACjD,MAAAH,KAAI,IAAI,WAAW;AAAA,QACf,GAAGA,KAAI,IAAI,SAAS;AAAA,MACxB,CAAC;AAAA,IACL;AAEA,WAAO;AAAA,MACH;AAAA,MACA,SAAS,MAAM;AACX,aAAK,WAAW,IAAI,IAAI;AAAA,MAC5B;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,0BAA0B,QAAgB,QAAyB,gBAA4B,QAAiB;AAzgCpH;AA0gCQ,UAAM,SAAS,sBAAsB,KAAK,wBAAwB;AAAA,MAC9D,QAAQ,OAAO;AAAA,MACf,WAAW,OAAO;AAAA,IACtB,CAAC;AACD,QAAI,CAAC,QAAQ;AACT,YAAM,IAAI,MAAM,6BAA6B;AAAA,IACjD;AACA,UAAM,EAAE,QAAQ,UAAU,IAAI;AAC9B,UAAM,eAAe,KAAK,uCAAuC,MAAM;AACvE,QAAI,CAAC,aAAc;AACnB,UAAM,gBAAgB,KAAK,sBAAsB,cAAc,MAAM;AACrE,QAAI,CAAC,cAAe;AACpB,UAAM,iBAAgB,UAAK,sBAAsB,cAAc,MAAM,MAA/C,mBAAkD,KAAK,6BAA6B,qBAAqB;AAC/H,QAAI,CAAC,cAAe;AAEpB,UAAM,EAAE,cAAc,MAAM,iBAAiB,KAAK,IAAI;AACtD,UAAM,KAAK,0BAAU,iBAAiB;AAGtC,UAAM,EAAE,UAAU,eAAe,WAAW,UAAU,IAAI,KAAK,6BAA6B;AAAA,MACxF,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,aAAa;AAAA,MACb,WAAW;AAAA,IACf,GAAG,eAAe,cAAc,QAAQ;AACxC,UAAM,qBAAqB;AAC3B,uBAAmB,SAAS;AAE5B,UAAM,iBAAiB,KAAK,aAAa,eAAe,MAAM;AAC9D,QAAI,kBAAkB,MAAM;AACxB;AAAA,IACJ;AAEA,UAAMA,OAAM,KAAK,WAAW,QAAQ,SAAS;AAC7C,IAAAA,KAAI,IAAI,IAAI,MAAM;AAElB,UAAM,oBAAoC;AAAA,MACtC;AAAA,MACA;AAAA,MACA,WAAW;AAAA,MACX,aAAa,OAAO;AAAA,MACpB;AAAA,MACA;AAAA,MACA,WAAW;AAAA,QACP,MAAM,mBAAmB;AAAA,QACzB,KAAK,mBAAmB;AAAA,QACxB,OAAO,mBAAmB;AAAA,QAC1B,QAAQ,mBAAmB;AAAA,MAC/B;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAEA;AACI,YAAM,EAAE,QAAAC,SAAQ,WAAAC,YAAW,UAAU,IAAI;AACzC,YAAMC,UAAS,sBAAsB,KAAK,wBAAwB,EAAE,QAAAF,SAAQ,WAAAC,WAAU,CAAC;AAEvF,YAAM,gBAAgB;AAEtB,YAAM,WAAW,KAAK,uBAAuB,QAAkBD,SAAQ,EAAmB,YAAY;AACtG,UAAI,CAAC,UAAU;AACX;AAAA,MACJ;AAEA,YAAM,gBAAgB,SAAS,eAAe,EAAE,WAAW;AAE3D,UAAI,CAAC,iBAAiB,CAACE,SAAQ;AAC3B;AAAA,MACJ;AAEA,YAAM,mBAAkB,UAAK,sBAAsB,cAAcF,OAAM,MAA/C,mBAAkD,KAAK;AAC/E,UAAI,CAAC,iBAAiB;AAClB;AAAA,MACJ;AACA,YAAM,WAAW,gBAAgB,qBAAqBC,UAAS;AAC/D,UAAI,CAAC,UAAU;AACX;AAAA,MACJ;AAEA,YAAM,EAAE,WAAW,MAAAG,MAAK,IAAI;AAE5B,YAAMC,gBAAe,KAAK,uCAAuCL,OAAM;AAEvE,UAAIK,iBAAgB,MAAM;AACtB;AAAA,MACJ;AACA,YAAM,EAAE,OAAO,OAAO,IAAIA;AAE1B,UAAI,aAAa,MAAM;AACnB;AAAA,MACJ;AAEA,UAAI,kBAAkBJ,YAAW;AAC7B;AAAA,MACJ;AAEA,YAAM,EAAE,MAAM,KAAK,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO,MAAM,IAAI;AAExE,YAAM,eAAe,kCAAkC,EAAE,QAAAD,SAAQ,WAAAC,YAAW,UAAU,CAAC;AAEvF,YAAM,YAAY,MAAM,UAAU,YAAY;AAE9C,UAAI,aAAa,MAAM;AACnB,kBAAU,iBAAiB,EAAE,MAAM,KAAK,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO,MAAM,CAAC;AAC1F;AAAA,MACJ;AAEA,YAAM,gBAAgB,wBAAwB;AAAA,QAC1C,QAAQ;AAAA,QACR,QAAQ,mBAAmB;AAAA,QAC3B,QAAQ;AAAA,QACR,MAAM,cAAc;AAAA,QACpB,MAAM,cAAc;AAAA,QACpB,OAAO,eAAe;AAAA,QACtB,QAAQ,eAAe;AAAA,QACvB,UAAU;AAAA,UACN,MAAM,cAAc,SAAS;AAAA,UAC7B,KAAK,cAAc,SAAS;AAAA,QAChC;AAAA,MACJ,GAAG,cAAc;AACjB,YAAM,mBAA+B;AAAA,QACjC,MAAM,cAAc;AAAA,QACpB,KAAK,cAAc;AAAA,QACnB,OAAO,cAAc;AAAA,QACrB,QAAQ,cAAc;AAAA,QACtB,QAAQ,KAAK,uBAAuB,gBAAgBD,SAAQC,UAAS,EAAE,SAAS;AAAA,MACpF;AAEA,YAAM,UAAU,IAAI,KAAK,cAAc,gBAAgB;AACvD,YAAM,UAAU,SAAS,0BAA0B;AACnD,UAAI,cAAc,mBAAmB,OAAO;AACxC,cAAM,oBAAoB,OAAO;AAAA,MACrC;AACA,YAAMF,OAAM,KAAK,WAAWC,SAAQC,UAAS;AAC7C,YAAM,uBAAuB,IAAI,qBAAqB;AAEtD,YAAM,WAAW,MAAM,gBAAgB;AACvC,YAAM,mBAAsC;AAAA,QACxC,KAAK;AAAA;AAAA,QACL,MAAM,SAAS;AAAA,QACf,QAAQ,SAAS;AAAA,QACjB,OAAO,SAAS;AAAA,MACpB;AACA,YAAM,eAAe;AAAA,QACjB,SAAS;AAAA,QACT,MAAM;AAAA;AAAA,QAEN,QAAAD;AAAA,QACA,WAAAC;AAAA,QACA;AAAA,QACA,WAAW;AAAA,QACX,yBAAyB;AAAA,MAC7B;AAEA,YAAM,iBAAiB,aAAa,SAASI,cAAa,YAAY,SAAS,UAAUH,QAAO,WAAW,YAAY;AACvH,YAAM,YAAY,IAAI,gBAAiC,cAAc;AACrE,mBAAa,YAAY;AAEzB,UAAI,cAAyB;AAAA,QACzB;AAAA,QACA,IAAI;AAAA,QACJ,cAAc,cAAc;AAAA,QAC5B,eAAe,MAAM;AAAA,QAAE;AAAA,QACvB,eAAe,MAAM;AAAA,QAAE;AAAA,QACvB,aAAa,MAAM;AAAA,QAAE;AAAA,QACrB,SAAS,CAAC,QAAoB;AAC1B,iBAAO,cAAc,IAAI,WAAW,IAAI,MAAM,GAAG,CAAC;AAAA,QACtD;AAAA,QACA,QAAO,WAAAH,KAAI,IAAI,SAAS,MAAjB,mBAAoB,UAApB,YAA6B,KAAK,kBAAkB,SAAS;AAAA,QACpE,MAAAK;AAAA,QACA,QAAAJ;AAAA,MACJ;AACA,UAAI,OAAO,kBAAkB;AACzB,sBAAc;AAAA,UACV,GAAG;AAAA,UACH,eAAe,CAAC,QAAQ;AACpB,mBAAO,cAAc,IAAI,aAAa,IAAI,MAAM,GAAG,CAAC;AAAA,UACxD;AAAA,UACA,eAAe,CAAC,QAAmC;AAC/C,mBAAO,cAAc,IAAI,aAAa,IAAI,MAAM,GAAG,CAAC;AAAA,UACxD;AAAA,UACA,aAAa,CAAC,QAAmC;AAC7C,mBAAO,cAAc,IAAI,aAAa,IAAI,MAAM,GAAG,CAAC;AAAA,UACxD;AAAA,QACJ;AAAA,MACJ;AACA,WAAK,uBAAuB,YAAY,WAAW;AAEnD,YAAM,WAAW,QAAQ,mBAAmB,eAAe,MAAM;AAC7D,cAAM,cAAc,aAAa,SAASK,cAAa,YAAY,SAAS,UAAUH,QAAO,WAAW,YAAY;AACpH,kBAAU;AAAA,UACN;AAAA,QACJ;AAAA,MACJ,CAAC;AAED,WAAK,cAAc,UAAU,UAAU,CAAC,iBAAiB;AACrD,cAAMU,iBAAgB,wBAAwB;AAAA,UAC1C,QAAQ;AAAA,UACR,QAAQ,aAAa;AAAA,UACrB,QAAQ;AAAA,UACR,MAAM,aAAa;AAAA,UACnB,MAAM,aAAa;AAAA,UACnB,OAAO,eAAe;AAAA,UACtB,QAAQ,eAAe;AAAA,UACvB,UAAU;AAAA,YACN,MAAM,cAAc,SAAS;AAAA,YAC7B,KAAK,cAAc,SAAS;AAAA,UAChC;AAAA,QACJ,GAAG,cAAc;AACjB,cAAMD,gBAAe,kCAAkC,EAAE,QAAAX,SAAQ,WAAAC,YAAW,UAAU,CAAC;AACvF,cAAM,UAAU,IAAI,KAAKU,eAAc;AAAA,UACnC,MAAMC,eAAc;AAAA,UACpB,KAAK;AAAA,UACL,OAAO,eAAe;AAAA,UACtB,QAAQ,eAAe;AAAA,UACvB,QAAQ,KAAK,uBAAuB,gBAAgBZ,SAAQC,UAAS,EAAE,SAAS;AAAA,QACpF,CAAC;AACD,cAAM,SAAS,aAAa,SAASI,cAAa,YAAY,SAAS,UAAUH,QAAO,WAAW,YAAY;AAC/G,kBAAU,KAAK,MAAM;AAAA,MACzB,CAAC,CAAC;AAEF,YAAM,OAAM,UAAK,sBAAsB,cAAcF,OAAM,MAA/C,mBAAkD,KAAK;AACnE,iCAAK,iBAAiB,UAAU,CAACa,cAAa;AAC1C,YAAI,CAACA,UAAU;AACf,YAAI,cAAc,YAAYA,UAAS,SAAS;AAC5C,eAAK,WAAW,IAAI,IAAI;AAAA,QAC5B;AAAA,MACJ;AAEA,2BAAqB,IAAI,MAAM;AAC3B,aAAK,uBAAuB,eAAe,SAAS;AAAA,MACxD,CAAC;AACD,kBAAY,qBAAqB,IAAI,QAAQ;AAC7C,WAAK,iBAAiB,IAAI,WAAW,YAAY;AACjD,MAAAd,KAAI,IAAI,WAAW;AAAA,QACf,GAAGA,KAAI,IAAI,SAAS;AAAA,MACxB,CAAC;AAAA,IACL;AAEA,WAAO;AAAA,MACH;AAAA,MACA,SAAS,MAAM;AACX,aAAK,WAAW,IAAI,IAAI;AAAA,MAC5B;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYQ,6BACJ,OACA,eACA,UACF;AACE,QAAI,EAAE,UAAU,YAAY,IAAI;AAChC,UAAM,eAAe,uBAAuB,UAAU,aAAa,QAAQ;AAC3E,UAAM,cAAc,IAAI,gBAAgB,YAAY;AAEpD,UAAM,mBAAmB,uBAAuB,MAAM,QAAQ,MAAM,WAAW,QAAQ;AACvF,UAAM,kBAAkB,IAAI,gBAAgB,gBAAgB;AAE5D,UAAM,iBAAiB,MAAM;AACzB,YAAMe,gBAAe,uBAAuB,UAAU,aAAa,QAAQ;AAC3E,YAAMC,oBAAmB,uBAAuB,MAAM,QAAQ,MAAM,WAAW,QAAQ;AAEvF,kBAAY,KAAKD,aAAY;AAC7B,sBAAgB,KAAKC,iBAAgB;AAAA,IACzC;AAEA,UAAM,aAAa,IAAI,qBAAqB;AAC5C,eAAW,IAAI,cAAc,OAAO,YAAY,UAAU,MAAM,eAAe,CAAC,CAAC;AAEjF,eAAW,IAAI,KAAK,gBAAgB,kBAAkB,CAAC,gBAAgB;AACnE,UAAI,YAAY,OAAO,kCAAkC,IAAI;AACzD,cAAM,SAAS,YAAY;AAC3B,YAAI,OAAO,mBAAmB,UAAU,CAAC,SAAS,KAAK,QAAQ,QAAQ,IAAI,IAAI;AAC3E,yBAAe;AACf;AAAA,QACJ;AAAA,MACJ;AAEA,UACI,iCAAiC,QAAQ,YAAY,EAAE,IAAI,MAC3D,YAAY,OAAO,mBAAmB,MACtC,YAAY,OAAO,sBAAsB,IAC3C;AACE,uBAAe;AAAA,MACnB;AAAA,IACJ,CAAC,CAAC;AAEF,UAAM,eAAe,CAAC,QAAgB,WAAmB;AACrD,iBAAW;AACX,oBAAc;AAEd,qBAAe;AAAA,IACnB;AAEA,UAAM,cAAc,MAAM;AACtB,aAAO;AAAA,QACH,QAAQ;AAAA,QACR,OAAO,iBAAiB,QAAQ,aAAa;AAAA,QAC7C,QAAQ,iBAAiB,SAAS,aAAa;AAAA,QAC/C,UAAU;AAAA,UACN,MAAM;AAAA,UACN,KAAK;AAAA,QACT;AAAA,QACA,QAAQ,aAAa;AAAA,QACrB,QAAQ,aAAa;AAAA,QACrB,MAAM,iBAAiB;AAAA,QACvB,MAAM,iBAAiB;AAAA,MAC3B;AAAA,IACJ;AACA,UAAM,YAAY,YAAY;AAAA,MAC1B,IAAI,CAAC,YAAY;AACb,cAAMA,oBAAmB,uBAAuB,MAAM,QAAQ,MAAM,WAAW,QAAQ;AACvF,eAAO;AAAA,UACH,QAAQ;AAAA,UACR,OAAOA,kBAAiB,QAAQ,QAAQ;AAAA,UACxC,QAAQA,kBAAiB,SAAS,QAAQ;AAAA,UAC1C,UAAU;AAAA,YACN,MAAM;AAAA,YACN,KAAK;AAAA,UACT;AAAA,UACA,QAAQ,QAAQ;AAAA,UAChB,QAAQ,QAAQ;AAAA,UAChB,MAAMA,kBAAiB;AAAA,UACvB,MAAMA,kBAAiB;AAAA,QAC3B;AAAA,MACJ,CAAC;AAAA,IACL;AACA,UAAM,WAA4B,YAAY;AAE9C,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AACJ;AAnlCa,oCAAN;AAAA,EAsBE,0BAAO,qBAAqB;AAAA,EAC5B;AAAA,EACA,0BAAO,eAAe;AAAA,EACtB;AAAA,EACA,0BAAO,qBAAqB;AAAA,EAC5B;AAAA,EACA,0BAAO,gBAAgB;AAAA,GA5BnB;AA8lCb,SAAS,uBACL,KACA,KACA,UACiB;AACjB,QAAM,mBAAmB,SAAS,wBAAwB,KAAK,GAAG;AAClE,QAAM,WAAW,iBAAiB,mBAAmB,iBAAiB,YAAY;AAElF,SAAO;AAAA,IACH,MAAM,SAAS;AAAA,IACf,OAAO,SAAS;AAAA,IAChB,KAAK,SAAS;AAAA,IACd,QAAQ,SAAS;AAAA,EACrB;AACJ;AAEA,SAAS,wBAAwB,eAAgC,WAAiC,OAAiC;AAl4CnI;AAm4CI,UAAQ,wBAAS;AAEjB,QAAM,aAAa,cAAc,OAAO,cAAc;AACtD,QAAM,cAAc,cAAc,OAAO,cAAc;AACvD,QAAM,YAAW,4CAAW,UAAX,YAAoB;AACrC,QAAM,aAAY,4CAAW,WAAX,YAAqB;AAEvC,MAAI,UAAU;AACd,MAAI,SAAS;AAEb,MAAI,WAAW;AACX,QAAI,UAAU,uBAAuB,SAAS;AAC1C,YAAM,UAAU,gBAAgB,UAAU,SAAS,aAAa,KAAK;AACrE,gBAAU,cAAc,OAAO,UAAU;AAAA,IAC7C,OAAO;AAEH,gBAAU,cAAc,SAAS,gBAAgB,UAAU,SAAS,UAAU;AAAA,IAClF;AAEA,QAAI,UAAU,wBAAwB,UAAU;AAC5C,YAAM,UAAU,gBAAgB,UAAU,SAAS,cAAc,KAAK;AACtE,eAAS,cAAc,OAAO,UAAU;AAAA,IAC5C,OAAO;AACH,eAAS,cAAc,SAAS,gBAAgB,UAAU,SAAS,WAAW;AAAA,IAClF;AAAA,EACJ;AAEA,SAAO;AAAA,IACH,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,MAAM,cAAc;AAAA,IACpB,MAAM,cAAc;AAAA,IACpB,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,UAAU;AAAA,MACN,MAAM,cAAc,SAAS;AAAA,MAC7B,KAAK,cAAc,SAAS;AAAA,IAChC;AAAA,EACJ;AACJ;AAEA,SAAS,gBAAgB,OAAoC,YAA4B;AACrF,MAAI,UAAU,OAAW,QAAO;AAGhC,MAAI,OAAO,UAAU,SAAU,QAAO;AAGtC,QAAM,aAAa,OAAO,WAAW,KAAK;AAC1C,SAAQ,aAAa,aAAc;AACvC;;;ACt4CA,IAAMC,eAAc;AAGb,IAAM,8BAAN,cAA0C,OAAO;AAAA,EAIpD,YACqB,UAAiDC,sBACtC,WACY,uBACP,gBACnC;AACE,UAAM;AALW;AACW;AACY;AACP;AAKjC,UAAM,EAAE,MAAM,GAAG,KAAK,IAAI;AAAA,MACtB,CAAC;AAAA,MACDA;AAAA,MACA,KAAK;AAAA,IACT;AACA,QAAI,MAAM;AACN,WAAK,eAAe,UAAU,QAAQ,MAAM,EAAE,OAAO,KAAK,CAAC;AAAA,IAC/D;AACA,SAAK,eAAe,UAAU,qCAAqC,IAAI;AAAA,EAC3E;AAAA,EAES,aAAmB;AACxB,yBAAqB,KAAK,WAAW;AAAA,MACjC,CAAC,iCAAiC;AAAA,MAClC,CAAC,wBAAwB;AAAA,MACzB,CAAC,0BAA0B;AAAA,MAC3B,CAAC,8BAA8B;AAAA,MAC/B,CAAC,gCAAgC;AAAA,MACjC,CAAC,gCAAgC;AAAA,MACjC,CAAC,wBAAwB;AAAA,MACzB,CAAC,6BAA6B;AAAA,MAC9B,CAAC,gCAAgC;AAAA,IACrC,CAAC;AAED,sBAAkB,KAAK,WAAW;AAAA,MAC9B,CAAC,iCAAiC;AAAA,IACtC,CAAC;AAAA,EACL;AAAA,EAES,UAAgB;AACrB,sBAAkB,KAAK,WAAW;AAAA,MAC9B,CAAC,gCAAgC;AAAA,IACrC,CAAC;AAAA,EACL;AAAA,EAES,aAAmB;AACxB,SAAK,uBAAuB;AAE5B,sBAAkB,KAAK,WAAW;AAAA,MAC9B,CAAC,gCAAgC;AAAA,MACjC,CAAC,8BAA8B;AAAA,MAC/B,CAAC,wBAAwB;AAAA,MACzB,CAAC,wBAAwB;AAAA,MACzB,CAAC,6BAA6B;AAAA,MAC9B,CAAC,gCAAgC;AAAA,IACrC,CAAC;AAAA,EACL;AAAA,EAES,WAAiB;AACtB,SAAK,UAAU,IAAI,0BAA0B;AAAA,EACjD;AAAA,EAEQ,yBAA+B;AACnC,IAAC;AAAA,MACG,CAAC,4BAA4B;AAAA,MAC7B,CAAC,uCAAuC;AAAA,MACxC,CAAC,6BAA6B;AAAA,IAClC,EAAmB,QAAQ,CAAC,MAAM;AAC9B,WAAK,cAAc,KAAK,sBAAsB,qBAAqB,EAAmB,cAAc,CAAC,CAAC;AAAA,IAC1G,CAAC;AAAA,EACL;AACJ;AAzEI,cADS,6BACO,QAAO,EAAmB;AAC1C,cAFS,6BAEO,cAAaD;AAFpB,8BAAN;AAAA,EADN,YAAY,qBAAqB,yBAAyB,uBAAuB,yBAAyB;AAAA,EAOlG,0BAAO,QAAQ;AAAA,EACf;AAAA,EACA;AAAA,GARI;",
  "names": ["import_react", "import_react", "import_jsx_runtime", "drawings", "import_react", "import_jsx_runtime", "unitId", "subUnitId", "drawingId", "groupBtnShow", "ungroupBtnShow", "groupShow", "import_react", "import_jsx_runtime", "width", "height", "drawingParam", "transform", "originWidth", "originHeight", "originX", "originY", "originRotation", "drawings", "import_react", "import_jsx_runtime", "import_jsx_runtime", "drawings", "import_react", "import_jsx_runtime", "visible", "configSymbol", "defaultPluginConfig", "import_jsx_runtime", "drawing", "left", "top", "height", "width", "angle", "left", "top", "defaultPluginConfig", "configSymbol", "defaultPluginConfig", "SheetDrawingAnchorType", "map", "defaultPluginConfig", "configSymbol", "defaultPluginConfig", "unitId", "import_react", "index_module_default", "import_jsx_runtime", "React", "index_module_default", "unitId", "unitId", "subUnitId", "input", "_a", "newTransform", "newSheetTransform", "redos", "undos", "params", "unitId", "import_react", "index_module_default", "import_react", "import_jsx_runtime", "getUpdateParams", "drawingManagerService", "unitId", "_a", "value", "index_module_default", "import_jsx_runtime", "drawings", "index_module_default", "map", "unitId", "subUnitId", "target", "skeletonParam", "data", "renderObject", "scene", "_a", "_b", "_c", "_d", "rectShapeKey", "calcOffsetPos", "skeleton", "topLeftCoord", "rightBottomCoord", "PLUGIN_NAME", "defaultPluginConfig"]
}
