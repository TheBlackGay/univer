{
  "version": 3,
  "sources": ["../../packages-experimental/sheets-source-binding/src/model/binding-model.ts", "../../packages-experimental/sheets-source-binding/src/types.ts", "../../packages-experimental/sheets-source-binding/src/controllers/binding-manager.ts", "../../packages-experimental/sheets-source-binding/src/model/source-model.ts", "../../packages-experimental/sheets-source-binding/src/controllers/source-manager.ts", "../../packages-experimental/sheets-source-binding/src/services/source-binding-service.ts", "../../packages-experimental/sheets-source-binding/src/plugin.ts", "../../packages/sheets-thread-comment-ui/src/types/const.ts", "../../packages/sheets-thread-comment-ui/src/services/sheets-thread-comment-popup.service.ts", "../../packages/sheets-thread-comment-ui/src/commands/operations/comment.operation.ts", "../../packages/sheets-thread-comment-ui/src/controllers/config.schema.ts", "../../packages/sheets-thread-comment-ui/src/controllers/render-controllers/render.controller.ts", "../../packages/sheets-thread-comment-ui/src/controllers/sheets-thread-comment-copy-paste.controller.ts", "../../packages/sheets-thread-comment-ui/src/controllers/sheets-thread-comment-hover.controller.ts", "../../packages/sheets-thread-comment-ui/src/controllers/sheets-thread-comment-popup.controller.ts", "../../packages/sheets-thread-comment-ui/src/controllers/sheets-thread-comment-remove.controller.ts", "../../packages/sheets-thread-comment-ui/src/views/sheets-thread-comment-cell/index.tsx", "../../packages/sheets-thread-comment-ui/src/views/sheets-thread-comment-panel/index.tsx", "../../packages/sheets-thread-comment-ui/src/controllers/menu.ts", "../../packages/sheets-thread-comment-ui/src/controllers/menu.schema.ts", "../../packages/sheets-thread-comment-ui/src/controllers/sheets-thread-comment.controller.ts", "../../packages/sheets-thread-comment-ui/src/plugin.ts", "../../packages/sheets-zen-editor/src/controllers/config.schema.ts", "../../packages/sheets-zen-editor/src/commands/commands/zen-editor.command.ts", "../../packages/sheets-zen-editor/src/views/zen-editor/ZenEditor.tsx", "../../packages/sheets-zen-editor/src/services/zen-editor.service.ts", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/sheets-zen-editor/src/views/zen-editor/index.module.less", "../../packages/sheets-zen-editor/src/views/menu.ts", "../../packages/sheets-zen-editor/src/controllers/menu.schema.ts", "../../packages/sheets-zen-editor/src/controllers/shortcuts/zen-editor.shortcut.ts", "../../packages/sheets-zen-editor/src/controllers/zen-editor-ui.controller.ts", "../../packages/sheets-zen-editor/src/controllers/zen-editor.controller.ts", "../../packages/sheets-zen-editor/src/plugin.ts", "../../packages/sheets/src/facade/f-defined-name.ts", "../../packages/sheets/src/facade/f-permission.ts", "../../packages/sheets/src/facade/utils.ts", "../../packages/sheets/src/facade/f-range.ts", "../../packages/sheets/src/facade/f-selection.ts", "../../packages/sheets/src/facade/f-worksheet.ts", "../../packages/sheets/src/facade/f-workbook.ts", "../../packages/sheets/src/facade/f-univer.ts", "../../packages/sheets/src/facade/f-enum.ts", "../../packages/sheets/src/facade/f-event.ts", "../../packages/sheets/src/facade/f-sheet-hooks.ts", "../../packages/ui/src/facade/f-menu-builder.ts", "../../packages/ui/src/facade/f-shortcut.ts", "../../packages/ui/src/facade/f-univer.ts", "../../packages/ui/src/facade/f-hooks.ts", "../../packages/ui/src/facade/f-enum.ts", "../../packages/docs-ui/src/facade/f-document.ts", "../../packages/docs-ui/src/facade/f-univer.ts", "../../packages/sheets-ui/src/facade/f-univer.ts", "../../packages/sheets-ui/src/facade/f-workbook.ts", "../../packages/sheets-ui/src/facade/f-worksheet.ts", "../../packages/sheets-ui/src/facade/f-permission.ts", "../../packages/sheets-ui/src/facade/f-sheet-hooks.ts", "../../packages/sheets-ui/src/facade/f-event.ts", "../../packages/sheets-ui/src/facade/f-range.ts", "../../packages/sheets-data-validation/src/facade/f-data-validation-builder.ts", "../../packages/sheets-data-validation/src/facade/f-data-validation.ts", "../../packages/sheets-data-validation/src/facade/f-range.ts", "../../packages/sheets-data-validation/src/facade/f-univer.ts", "../../packages/sheets-data-validation/src/facade/f-workbook.ts", "../../packages/sheets-data-validation/src/facade/f-worksheet.ts", "../../packages/sheets-data-validation/src/facade/f-event.ts", "../../packages/engine-formula/src/facade/f-formula.ts", "../../packages/engine-formula/src/facade/f-univer.ts", "../../packages/sheets-filter/src/facade/f-filter.ts", "../../packages/sheets-filter/src/facade/f-range.ts", "../../packages/sheets-filter/src/facade/f-worksheet.ts", "../../packages/sheets-filter/src/facade/f-enum.ts", "../../packages/sheets-filter/src/facade/f-event.ts", "../../packages/sheets-formula/src/facade/f-univer.ts", "../../packages/sheets-formula/src/facade/f-formula.ts", "../../packages/sheets-numfmt/src/facade/f-range.ts", "../../packages/sheets-numfmt/src/facade/f-workbook.ts", "../../packages/sheets-hyper-link/src/facade/f-workbook.ts", "../../packages/sheets-hyper-link/src/facade/f-worksheet.ts", "../../packages/sheets-hyper-link/src/facade/f-range.ts", "../../packages/sheets-hyper-link/src/facade/f-event.ts", "../../packages/sheets-hyper-link/src/facade/f-univer.ts", "../../packages/sheets-hyper-link-ui/src/facade/f-workbook.ts", "../../packages/sheets-thread-comment/src/facade/f-thread-comment.ts", "../../packages/sheets-thread-comment/src/facade/f-range.ts", "../../packages/sheets-thread-comment/src/facade/f-workbook.ts", "../../packages/sheets-thread-comment/src/facade/f-worksheet.ts", "../../packages/sheets-thread-comment/src/facade/f-event.ts", "../../packages/sheets-thread-comment/src/facade/f-univer.ts", "../../packages/sheets-conditional-formatting/src/facade/f-conditional-formatting-builder.ts", "../../packages/sheets-conditional-formatting/src/facade/f-range.ts", "../../packages/sheets-conditional-formatting/src/facade/f-workbook.ts", "../../packages/sheets-conditional-formatting/src/facade/f-worksheet.ts", "../../packages/sheets-conditional-formatting/src/facade/f-enum.ts", "../../packages/sheets-find-replace/src/facade/f-text-finder.ts", "../../packages/sheets-find-replace/src/facade/f-univer.ts", "../../packages/sheets-drawing-ui/src/facade/f-over-grid-image.ts", "../../packages/sheets-drawing-ui/src/facade/f-worksheet.ts", "../../packages/sheets-drawing-ui/src/facade/f-enum.ts", "../../packages/sheets-drawing-ui/src/facade/f-event.ts", "../../packages/sheets-drawing-ui/src/facade/f-univer.ts", "../../packages/sheets-drawing-ui/src/facade/f-range.ts", "../../packages/sheets-zen-editor/src/facade/f-univer.ts", "../../packages/sheets-zen-editor/src/facade/f-workbook.ts", "../../packages-experimental/sheets-source-binding/src/facade/f-enum.ts", "../../packages-experimental/sheets-source-binding/src/facade/f-workbook.ts", "../../packages-experimental/sheets-source-binding/src/facade/f-worksheet.ts", "../../packages/sheets-crosshair-highlight/src/facade/f-univer.ts", "../../packages/sheets-sort/src/facade/f-range.ts", "../../packages/sheets-sort/src/facade/f-worksheet.ts", "../../packages/sheets-sort/src/facade/f-event.ts"],
  "sourcesContent": ["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICellBindingNode, IDataBindingModelMatrix } from '../types';\n\nexport class SheetBindingModel {\n    private _matrix: IDataBindingModelMatrix = {};\n\n    private _nodeMap: Map<string, ICellBindingNode> = new Map();\n\n    private _sourceIdMap: Map<string, string[]> = new Map();\n\n    constructor(json?: ICellBindingNode[]) {\n        if (json) {\n            this._init(json);\n        }\n    }\n\n    _init(json: ICellBindingNode[]): void {\n        this.fromJSON(json);\n    }\n\n    getBindingNodesBySourceId(sourceId: string): ICellBindingNode[] | undefined {\n        const nodeIds = this._sourceIdMap.get(sourceId);\n        if (nodeIds) {\n            return nodeIds.map((nodeId) => this._nodeMap.get(nodeId)) as ICellBindingNode[];\n        }\n        return undefined;\n    }\n\n    public setBindingNode(row: number, column: number, node: ICellBindingNode): void {\n        if (!this._matrix[row]) {\n            this._matrix[row] = {};\n        }\n\n        if (!this._matrix[row][column]) {\n            this._matrix[row][column] = node;\n        }\n        this._nodeMap.set(node.nodeId, node);\n        // update sourceId map, keep the sourceId and nodeId mapping\n        const nodeIds = this._sourceIdMap.get(node.sourceId);\n        if (nodeIds) {\n            nodeIds.push(node.nodeId);\n        } else {\n            this._sourceIdMap.set(node.sourceId, [node.nodeId]);\n        }\n    }\n\n    public getBindingNode(row: number, column: number): ICellBindingNode {\n        return this._matrix[row]?.[column];\n    }\n\n    public removeBindingNode(row: number, column: number): void {\n        const node = this._matrix[row]?.[column];\n        if (node) {\n            // @ts-ignore\n            this._matrix[row][column] = undefined;\n            this._nodeMap.delete(node.nodeId);\n            const nodeIds = this._sourceIdMap.get(node.sourceId);\n            if (nodeIds) {\n                const index = nodeIds.indexOf(node.nodeId);\n                if (index >= 0) {\n                    nodeIds.splice(index, 1);\n                }\n                if (nodeIds.length === 0) {\n                    this._sourceIdMap.delete(node.sourceId);\n                }\n            }\n        }\n    }\n\n    public getBindingNodeById(nodeId: string): ICellBindingNode | undefined {\n        return this._nodeMap.get(nodeId);\n    }\n\n    fromJSON(nodes: ICellBindingNode[]): void {\n        nodes.forEach((node) => {\n            this.setBindingNode(node.row, node.column, node);\n        });\n    }\n\n    toJSON(): ICellBindingNode[] {\n        return Array.from(this._nodeMap.values());\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Represents the type of data binding node.Which config the array or object like data source or path.\n */\nexport enum DataBindingNodeTypeEnum {\n    /**\n     * The array like data source.\n     */\n    List = 'list',\n\n    // Cell = 'cell',\n    /**\n     * The object like data source.\n     */\n    Object = 'object',\n}\n\nexport enum ListDataBindingNodeDirectionEnum {\n    Horizontal = 'horizontal',\n    Vertical = 'vertical',\n}\n/**\n * Represents the type of data binding node.Which config show Binding path or value.\n */\nexport enum BindModeEnum {\n    /**\n     * The path mode, show the binding path.\n     */\n    Path = 'path',\n    /**\n     * The value mode, show the binding value.\n     */\n    Value = 'value',\n}\n\nexport type sourceDataType = string | number | boolean | object | null;\n\nexport interface IDataSource {\n    id: string;\n    getData(row: number, column: number): sourceDataType;\n\n}\n\nexport interface IListDataSource extends IDataSource {\n    getLength(): number;\n    getColumns(): string[];\n}\nexport interface IDataBindingModelMatrix {\n    [row: number]: {\n        [column: number]: ICellBindingNode;\n    };\n}\n\nexport interface IDataBindingModel {\n    themeName?: string;\n    matrix: IDataBindingModelMatrix;\n    setBindingNode(row: number, column: number, node: ICellBindingNode): void;\n\n}\n\n/**\n * The binding node of cell, which config the source id, path, row, column.\n */\nexport interface ICellBindingNodeParam {\n    /**\n     * The binding node type, the node type should be same as provide source type.\n     */\n    type: DataBindingNodeTypeEnum;\n    /**\n     * The path of the binding node, the path should be same as provide source path.\n     * @example\n     * for object type : the source is :{user: {name :'Tom'}}, we can set path 'user.name' to represent the Tom.\n     * for list type : the source is :{fields:['name', 'age'], records:[['Tom', 18],['Jerry', 20]]}, we can set path 'name' to represent the all names in data.\n     */\n    path: string;\n    /**\n     * The source id of the binding node, the source id should be same as provide source id.\n     */\n    sourceId: string;\n    /**\n     * The target row of the binding node.\n     */\n    row: number;\n    /**\n     * The target column of the binding node.\n     */\n    column: number;\n     /**\n      * Whether treat the data as date.\n      */\n    isDate?: boolean;\n    nodeId?: string; // optional in ICellBindingNodeParam\n\n    /**\n     * The formatter of the binding node, the formatter will be applied to the binding value.\n     */\n    formatter?: string;\n}\n\nexport interface ICellBindingNode extends ICellBindingNodeParam {\n    /**\n     * The node id of ICellBindingNode, if not provide, will generate a random id.\n     */\n    nodeId: string;\n}\nexport interface IListDataBindingNode extends ICellBindingNode {\n    type: DataBindingNodeTypeEnum.List;\n    limit?: number;\n    direction?: ListDataBindingNodeDirectionEnum;\n    range?: { startRow: number; startColumn: number; endRow: number; endColumn: number };\n    displayName?: string;\n    /**\n     * Whether contain header in the list data binding node.\n     */\n    containHeader?: boolean;\n}\n\nexport interface IDataBindingService {\n    /**\n     * A flag to control show path or show value\n     */\n    isBindingMode: boolean;\n    /**\n     * Change the binding mode\n     * @param {BindModeEnum} mode Update the binding mode\n     */\n    setBindingMode(mode: BindModeEnum): void;\n\n}\n\nexport interface IListSourceInfo {\n    sourceId: string;\n    sourceType: DataBindingNodeTypeEnum.List;\n    fields: string[];\n    recordCount: number;\n\n    // range: null|{startRow:number, startColumn:number, endRow:number, endColumn:number};\n}\n\nexport interface IObjectSourceInfo {\n    sourceId: string;\n    sourceType: DataBindingNodeTypeEnum.Object;\n\n}\n\nexport type ISourceEvent = (IListSourceInfo | IObjectSourceInfo) & {\n    unitId: string;\n    changeType: BindingSourceChangeTypeEnum;\n    oldRecordCount?: number;\n};\n\nexport interface IListSourceData {\n    fields: string[];\n    records: any[][] | Record<string | number, any>[];\n}\n\nexport enum BindingSourceChangeTypeEnum {\n    Add = 'add',\n    Remove = 'remove',\n    Update = 'update',\n}\n\nexport interface ISourceJSON {\n    id: string;\n    type: DataBindingNodeTypeEnum;\n}\n\nexport interface ICellBindingJSON {\n    [subUnitId: string]: ICellBindingNode[];\n}\n\nexport interface ISourceBindingInfo {\n    source: ISourceJSON[];\n    cellBinding: ICellBindingJSON;\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IMutationInfo } from '@univerjs/core';\nimport type { ICellBindingJSON, ICellBindingNode, ICellBindingNodeParam, IListDataBindingNode } from '../types';\nimport { Disposable, generateRandomId, Inject, IUniverInstanceService, Range } from '@univerjs/core';\n\nimport { ClearSelectionAllCommand, ClearSelectionContentCommand, getSheetCommandTarget, SheetInterceptorService, SheetsSelectionsService } from '@univerjs/sheets';\nimport { Subject } from 'rxjs';\nimport { SheetBindingModel } from '../model/binding-model';\nimport { BindingSourceChangeTypeEnum, DataBindingNodeTypeEnum } from '../types';\n\nexport interface IBindingNodeInfo {\n    unitId: string;\n    subunitId: string;\n    sourceId: string;\n    nodeId: string;\n    row: number;\n    column: number;\n}\n\nexport class SheetsBindingManager extends Disposable {\n    modelMap: Map<string, Map<string, SheetBindingModel>> = new Map();\n\n    private _cellBindInfoUpdate$ = new Subject<IBindingNodeInfo & {\n        changeType: BindingSourceChangeTypeEnum;\n        oldSourceId?: string;\n        containHeader?: boolean;\n        oldNodeContainHeader?: boolean;\n    }>();\n\n    cellBindInfoUpdate$ = this._cellBindInfoUpdate$.asObservable();\n\n    constructor(\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @Inject(SheetInterceptorService) private readonly _sheetInterceptorService: SheetInterceptorService,\n        @Inject(SheetsSelectionsService) private readonly _sheetsSelectionsService: SheetsSelectionsService\n    ) {\n        super();\n        this._initRemoveCommand();\n    }\n\n    private _initRemoveCommand() {\n        this.disposeWithMe(\n            this._sheetInterceptorService.interceptCommand({\n                getMutations: (command) => {\n                    const redos: IMutationInfo[] = [];\n                    const undos: IMutationInfo[] = [];\n                    const selections = this._sheetsSelectionsService.getCurrentSelections();\n                    const target = getSheetCommandTarget(this._univerInstanceService);\n                    if (!target || !selections || selections.length === 0) {\n                        return {\n                            redos: [],\n                            undos: [],\n                        };\n                    }\n                    const { unitId, subUnitId } = target;\n                    if (command.id === ClearSelectionContentCommand.id || command.id === ClearSelectionAllCommand.id) {\n                        selections.forEach(({ range }) => {\n                            Range.foreach(range, (row, column) => {\n                                const node = this.getBindingNode(unitId, subUnitId, row, column);\n                                if (node) {\n                                    this.removeBindingNode(unitId, subUnitId, row, column);\n                                }\n                            });\n                        });\n                    }\n                    return { redos, undos };\n                },\n            })\n        );\n    }\n\n    getBindingModelBySourceId(sourceId: string) {\n        const rs: IBindingNodeInfo[] = [];\n        this.modelMap.forEach((subMap, unitId) => {\n            subMap.forEach((model, subunitId) => {\n                const nodes = model.getBindingNodesBySourceId(sourceId);\n                if (nodes) {\n                    for (const node of nodes) {\n                        rs.push({\n                            unitId,\n                            subunitId,\n                            sourceId,\n                            nodeId: node.nodeId!,\n                            row: node.row,\n                            column: node.column,\n                        });\n                    }\n                }\n            });\n        });\n        return rs;\n    }\n\n    addModel(unitId: string, subunitId: string, model: SheetBindingModel): void {\n        if (!this.modelMap.has(unitId)) {\n            this.modelMap.set(unitId, new Map());\n        }\n        this.modelMap.get(unitId)?.set(subunitId, model);\n    }\n\n    getModel(unitId: string, subunitId: string): SheetBindingModel | undefined {\n        return this.modelMap.get(unitId)?.get(subunitId);\n    }\n\n    setBindingNode(unitId: string, subunitId: string, node: ICellBindingNodeParam): void {\n        let model = this.getModel(unitId, subunitId);\n        if (!model) {\n            model = new SheetBindingModel();\n            this.addModel(unitId, subunitId, model);\n        }\n        if (!node.nodeId) {\n            node.nodeId = generateRandomId();\n        }\n        const { row, column } = node;\n        if (row === undefined || column === undefined) {\n            throw new Error('row and column is required');\n        }\n        const oldNode = model.getBindingNode(row, column);\n        const containHeader = node.type === DataBindingNodeTypeEnum.List ? Boolean((node as IListDataBindingNode).containHeader) : false;\n        model.setBindingNode(row, column, { ...node, row, column } as ICellBindingNode);\n        this._cellBindInfoUpdate$.next({\n            unitId,\n            subunitId,\n            sourceId: node.sourceId,\n            nodeId: node.nodeId,\n            row,\n            column,\n            containHeader,\n            changeType: oldNode ? BindingSourceChangeTypeEnum.Update : BindingSourceChangeTypeEnum.Add,\n            oldSourceId: oldNode?.sourceId,\n            oldNodeContainHeader: oldNode?.type === DataBindingNodeTypeEnum.List ? Boolean((oldNode as IListDataBindingNode).containHeader) : false,\n        });\n    }\n\n    removeBindingNode(unitId: string, subunitId: string, row: number, column: number): void {\n        const model = this.getModel(unitId, subunitId);\n        if (model) {\n            const node = model.getBindingNode(row, column);\n            if (node) {\n                model.removeBindingNode(row, column);\n                this._cellBindInfoUpdate$.next({\n                    unitId,\n                    subunitId,\n                    sourceId: node.sourceId,\n                    nodeId: node.nodeId!,\n                    row,\n                    column,\n                    changeType: BindingSourceChangeTypeEnum.Remove,\n                });\n            }\n        }\n    }\n\n    getBindingNode(unitId: string, subunitId: string, row: number, column: number): ICellBindingNode | undefined {\n        const model = this.getModel(unitId, subunitId);\n        if (model) {\n            return model.getBindingNode(row, column);\n        }\n        return undefined;\n    }\n\n    getBindingNodeById(unitId: string, subunitId: string, nodeId: string): ICellBindingNode | undefined {\n        const model = this.getModel(unitId, subunitId);\n        if (model) {\n            return model.getBindingNodeById(nodeId);\n        }\n        return undefined;\n    }\n\n    createModel(unitId: string, subunitId: string, json?: ICellBindingNode[]): SheetBindingModel {\n        const model = new SheetBindingModel(json);\n        this.addModel(unitId, subunitId, model);\n        return model;\n    }\n\n    toJSON(unitId: string) {\n        const rs: ICellBindingJSON = {};\n        const subMap = this.modelMap.get(unitId);\n        if (subMap) {\n            subMap.forEach((model, subunitId) => {\n                rs[subunitId] = model.toJSON();\n            });\n        }\n        return rs;\n    }\n\n    fromJSON(unitId: string, json: ICellBindingJSON) {\n        Object.entries(json).forEach(([subunitId, nodes]) => {\n            this.createModel(unitId, subunitId, nodes);\n        });\n    }\n\n    override dispose(): void {\n        this.modelMap.clear();\n        this._cellBindInfoUpdate$.complete();\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICellBindingNode, IListDataBindingNode, IListSourceData, IListSourceInfo, IObjectSourceInfo, ISourceJSON } from '../types';\nimport { CellValueType, type ICellData } from '@univerjs/core';\nimport { DataBindingNodeTypeEnum } from '../types';\n\nfunction isValidDate(date: Date): date is Date {\n    return date instanceof Date && !isNaN(date.getTime());\n}\n\nfunction transformDate(dateString: string | number): number | string {\n    const date = new Date(dateString);\n    if (!isValidDate(date)) {\n        return dateString;\n    }\n    const baseDate = new Date(Date.UTC(1900, 0, 1, 0, 0, 0)); // January 1, 1900, UTC at midnight\n    const leapDayDate = new Date(Date.UTC(1900, 1, 28, 0, 0, 0)); // February 28, 1900, UTC at midnight\n\n    // Calculate the difference in milliseconds between the input date and the base date\n    const diffMilliseconds = date.getTime() - baseDate.getTime();\n    let dayDifference = diffMilliseconds / (1000 * 3600 * 24);\n\n    // Adjusting for the Excel leap year bug\n    if (date > leapDayDate) {\n        dayDifference += 1;\n    }\n\n    return dayDifference + 1; // Excel serial number starts from 1\n}\n\nexport abstract class SourceModelBase {\n    protected _data: any;\n    readonly id: string;\n    private _hasData: boolean = false;\n    readonly type: DataBindingNodeTypeEnum;\n    constructor(id: string) {\n        this.id = id;\n    }\n\n    getId() {\n        return this.id;\n    }\n\n    getType(): DataBindingNodeTypeEnum {\n        return this.type;\n    }\n\n    hasData(): boolean {\n        return this._hasData;\n    }\n\n    setSourceData(data: any): void {\n        this._data = data;\n        this._hasData = true;\n    }\n\n    toJSON(): ISourceJSON {\n        return {\n            id: this.id,\n            type: this.type,\n        };\n    }\n\n    fromJSON(info: ISourceJSON): void {\n        // @ts-ignore\n        this.id = info.id;\n        // @ts-ignore\n        this.type = info.type;\n    }\n\n    abstract getSourceInfo(): any;\n\n    abstract getData(node: ICellBindingNode, row: number, col: number): ICellData | null;\n}\n\nexport class ListSourceModel extends SourceModelBase {\n    override readonly type = DataBindingNodeTypeEnum.List;\n    private _isListObject: boolean;\n    private _fieldIndexMap: Map<string, number> = new Map();\n    protected override _data: IListSourceData = { fields: [], records: [] };\n    constructor(id: string, isListObject?: boolean) {\n        super(id);\n        this._isListObject = isListObject ?? true;\n    }\n\n    /**\n     * Toggle the list object mode. The default value is true.\n     * In the list object mode, the records is an array of objects. Such as [{name: 'Tom', age: 20}, {name: 'Jerry', age: 18}].\n     * In the list array mode, the records is an array of arrays. Such as [['Tom', 20], ['Jerry', 18]].\n     */\n    toggleListObject(isListObject: boolean) {\n        this._isListObject = isListObject;\n    }\n\n    getData(node: IListDataBindingNode, row: number): ICellData | null {\n        const { path, row: baseRow, containHeader } = node;\n        const colIndex = this._fieldIndexMap.get(path)!;\n        const rowIndex = row - baseRow;\n        if (containHeader && rowIndex === 0) {\n            return {\n                v: this._data.fields[colIndex],\n            };\n        }\n        let data;\n        const offset = containHeader ? 1 : 0;\n        if (this._isListObject) {\n            data = (this._data.records as Record<string | number, any>)[rowIndex - offset][path];\n        } else {\n            data = this._data.records[rowIndex - offset][colIndex];\n        }\n\n        if (node.isDate === true) {\n            const formatter = node.formatter || 'yyyy-m-d am/pm h:mm';\n            return {\n                v: transformDate(data),\n                s: {\n                    n: {\n                        pattern: formatter,\n                    },\n                },\n                t: CellValueType.NUMBER,\n            };\n        } else {\n            if (node.formatter) {\n                return {\n                    v: data,\n                    s: {\n                        n: {\n                            pattern: node.formatter,\n                        },\n                    },\n                };\n            }\n\n            return {\n                t: typeof data === 'number' ? CellValueType.NUMBER : CellValueType.STRING,\n                v: data,\n            };\n        }\n    }\n\n    override setSourceData(data: IListSourceData): void {\n        super.setSourceData(data);\n        const { fields } = data;\n        this._fieldIndexMap.clear();\n        fields.forEach((field, index) => {\n            this._fieldIndexMap.set(field, index);\n        });\n    }\n\n    override getSourceInfo(): IListSourceInfo {\n        return {\n            sourceId: this.id,\n            sourceType: this.type,\n            fields: this._data.fields,\n            recordCount: this._data.records.length,\n        };\n    }\n}\n\nexport class ObjectSourceModel extends SourceModelBase {\n    override readonly type = DataBindingNodeTypeEnum.Object;\n    constructor(id: string) {\n        super(id);\n    }\n\n    getData(node: ICellBindingNode): ICellData | null {\n        const path = node.path;\n        const paths = path.split('.');\n        let data = this._data;\n        for (const p of paths) {\n            data = data[p];\n            if (data === undefined) {\n                return null;\n            }\n        }\n        if (node.isDate === true) {\n            const formatter = node.formatter || 'yyyy-m-d am/pm h:mm';\n            return {\n                v: transformDate(data),\n                s: {\n                    n: {\n                        pattern: formatter,\n                    },\n                },\n                t: CellValueType.NUMBER,\n            };\n        } else {\n            if (node.formatter) {\n                return {\n                    v: data,\n                    s: {\n                        n: {\n                            pattern: node.formatter,\n                        },\n                    },\n                };\n            }\n            return {\n                v: data,\n                t: typeof data === 'number' ? CellValueType.NUMBER : CellValueType.STRING,\n            };\n        }\n    }\n\n    override getSourceInfo(): IObjectSourceInfo {\n        return {\n            sourceId: this.id,\n            sourceType: DataBindingNodeTypeEnum.Object,\n        };\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ISourceEvent, ISourceJSON } from '../types';\nimport { Disposable, generateRandomId } from '@univerjs/core';\nimport { Subject } from 'rxjs';\nimport { ListSourceModel, ObjectSourceModel, SourceModelBase } from '../model/source-model';\nimport { BindingSourceChangeTypeEnum, DataBindingNodeTypeEnum } from '../types';\n\nexport class SheetsSourceManager extends Disposable {\n    sourceMap: Map<string, Map<string, SourceModelBase>> = new Map();\n    private _sourceDataUpdate$ = new Subject<ISourceEvent>();\n    sourceDataUpdate$ = this._sourceDataUpdate$.asObservable();\n    constructor() {\n        super();\n    }\n\n    private _ensureUnitMap(unitId: string): Map<string, SourceModelBase> {\n        let unit = this.sourceMap.get(unitId);\n        if (!unit) {\n            unit = new Map();\n            this.sourceMap.set(unitId, unit);\n        }\n        return unit;\n    }\n\n    private _getUnitMap(unitId: string): Map<string, SourceModelBase> | undefined {\n        return this.sourceMap.get(unitId);\n    }\n\n    public getSource(unitId: string, id: string): SourceModelBase | undefined {\n        const unitMap = this._getUnitMap(unitId);\n        return unitMap?.get(id);\n    }\n\n    createSource(unitId: string, type: DataBindingNodeTypeEnum, isListObject?: boolean, id?: string): SourceModelBase {\n        const sourceId = id === undefined ? generateRandomId() : id;\n        let source;\n        switch (type) {\n            case DataBindingNodeTypeEnum.List:\n                source = new ListSourceModel(sourceId, isListObject);\n                break;\n            case DataBindingNodeTypeEnum.Object:\n                source = new ObjectSourceModel(sourceId);\n                break;\n\n            default:\n                throw new Error(`Invalid source type: ${type}`);\n        }\n        const unitMap = this._ensureUnitMap(unitId);\n        unitMap.set(sourceId, source);\n        return source;\n    }\n\n    updateSourceData(unitId: string, idOrInstance: string | SourceModelBase, data: any): void {\n        const unitMap = this._getUnitMap(unitId);\n        const sourceId = idOrInstance instanceof SourceModelBase ? idOrInstance.getId() : idOrInstance;\n        const source = unitMap?.get(sourceId);\n        if (source) {\n            source.setSourceData(data);\n            this._sourceDataUpdate$.next({ ...source.getSourceInfo(), unitId, changeType: BindingSourceChangeTypeEnum.Add });\n        } else {\n            throw new Error(`Source not found: ${sourceId}`);\n        }\n    }\n\n    removeSource(unitId: string, id: string): void {\n        const unitMap = this._getUnitMap(unitId);\n        const source = unitMap?.get(id);\n        if (source) {\n            unitMap?.delete(id);\n            this._sourceDataUpdate$.next({ ...source.getSourceInfo(), unitId, changeType: BindingSourceChangeTypeEnum.Remove });\n        }\n    }\n\n    toJSON(unitId: string): ISourceJSON[] {\n        const sourceList: ISourceJSON[] = [];\n        const unitMap = this._getUnitMap(unitId);\n        if (unitMap) {\n            for (const source of unitMap.values()) {\n                sourceList.push(source.toJSON());\n            }\n        }\n        return sourceList;\n    }\n\n    fromJSON(unitId: string, sources: ISourceJSON[]): void {\n        const unitMap = this._ensureUnitMap(unitId);\n        for (const source of sources) {\n            let model: SourceModelBase;\n            switch (source.type) {\n                case DataBindingNodeTypeEnum.List:\n                    model = new ListSourceModel(source.id);\n                    break;\n                case DataBindingNodeTypeEnum.Object:\n                    model = new ObjectSourceModel(source.id);\n                    break;\n                default:\n                    throw new Error(`Invalid source type: ${source.type}`);\n            }\n            model.fromJSON(source);\n            unitMap.set(source.id, model);\n        }\n    }\n\n    override dispose(): void {\n        this._sourceDataUpdate$.complete();\n        this.sourceMap.clear();\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICellBindingNodeParam, IListDataBindingNode, IListSourceInfo, ISourceBindingInfo } from '../types';\nimport { Disposable, Inject, InterceptorEffectEnum, RTree } from '@univerjs/core';\nimport { INTERCEPTOR_POINT, SheetInterceptorService } from '@univerjs/sheets';\n\nimport { SheetsBindingManager } from '../controllers/binding-manager';\nimport { SheetsSourceManager } from '../controllers/source-manager';\nimport { BindingSourceChangeTypeEnum, BindModeEnum, DataBindingNodeTypeEnum } from '../types';\n\nexport class SheetsSourceBindService extends Disposable {\n    private _bindingModel: BindModeEnum = BindModeEnum.Value;\n    private _bindModelRTreeCollection = new Map<string, RTree>();\n    constructor(\n        @Inject(SheetInterceptorService) private _sheetInterceptorService: SheetInterceptorService,\n        @Inject(SheetsBindingManager) private _sheetsBindingManager: SheetsBindingManager,\n        @Inject(SheetsSourceManager) private _sheetsSourceManager: SheetsSourceManager\n    ) {\n        super();\n        this._registerInterceptor();\n        this._registerSourceChange();\n    }\n\n    /**\n     * Set the binding model to path mode, in this mode, the binding path will show in the cell.\n     */\n    usePathMode() {\n        this._bindingModel = BindModeEnum.Path;\n    }\n\n    /**\n     * Set the binding model to value mode, in this mode, the value of source will show in the cell.\n     */\n    useValueMode() {\n        this._bindingModel = BindModeEnum.Value;\n    }\n\n    /**\n     * Get the current binding model.\n     * @returns the current binding model\n     */\n    getBindingModel() {\n        return this._bindingModel;\n    }\n\n    createBindModel(unitId: string, subUnitId: string) {\n        return this._sheetsBindingManager.createModel(unitId, subUnitId);\n    }\n\n    setBindingNode(unitId: string, subUnitId: string, node: ICellBindingNodeParam) {\n        this._sheetsBindingManager.setBindingNode(unitId, subUnitId, node);\n    }\n\n    removeBindingNode(unitId: string, subUnitId: string, row: number, column: number) {\n        this._sheetsBindingManager.removeBindingNode(unitId, subUnitId, row, column);\n    }\n\n    getBindingNode(unitId: string, subUnitId: string, row: number, column: number) {\n        return this._sheetsBindingManager.getBindingNode(unitId, subUnitId, row, column);\n    }\n\n    getSource(unitId: string, id: string) {\n        return this._sheetsSourceManager.getSource(unitId, id);\n    }\n\n    createSource(unitId: string, type: DataBindingNodeTypeEnum, isListObject?: boolean, id?: string) {\n        return this._sheetsSourceManager.createSource(unitId, type, isListObject, id);\n    }\n\n    getSourceBindingPathInfo(unitId: string) {\n        return {\n            source: this._sheetsSourceManager.toJSON(unitId),\n            cellBinding: this._sheetsBindingManager.toJSON(unitId),\n        };\n    }\n\n    loadSourceBindingPathInfo(unitId: string, obj: ISourceBindingInfo) {\n        this._sheetsSourceManager.fromJSON(unitId, obj.source);\n        this._sheetsBindingManager.fromJSON(unitId, obj.cellBinding);\n    }\n\n    private _ensureRTreeCollection(unitId: string) {\n        if (!this._bindModelRTreeCollection.has(unitId)) {\n            this._bindModelRTreeCollection.set(unitId, new RTree());\n        }\n        return this._bindModelRTreeCollection.get(unitId) as RTree;\n    }\n\n    private _getRTeeCollection(unitId: string) {\n        return this._bindModelRTreeCollection.get(unitId);\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    private _registerSourceChange() {\n        // Update the RTree collection when the source data updated\n        // eslint-disable-next-line complexity\n        this.disposeWithMe(this._sheetsSourceManager.sourceDataUpdate$.subscribe((sourceInfo) => {\n            const { sourceId, sourceType, unitId: sourceUnitId, changeType } = sourceInfo;\n\n            if (sourceType === DataBindingNodeTypeEnum.List) {\n                // Remove the old data\n                if (changeType === BindingSourceChangeTypeEnum.Remove) {\n                    const nodeInfo = this._sheetsBindingManager.getBindingModelBySourceId(sourceId);\n                    const recordCount = sourceInfo.recordCount;\n                    for (const { unitId, subunitId, nodeId, row, column } of nodeInfo) {\n                        const rTreeCollection = this._getRTeeCollection(sourceUnitId);\n                        const node = this._sheetsBindingManager.getBindingNodeById(unitId, subunitId, nodeId);\n                        if (rTreeCollection && node?.type === DataBindingNodeTypeEnum.List) {\n                            const offset = (node as IListDataBindingNode).containHeader ? 0 : 1;\n                            const range = { startRow: row, startColumn: column, endRow: row + recordCount - offset, endColumn: column };\n                            rTreeCollection.remove({ unitId, sheetId: subunitId, id: nodeId, range });\n                        }\n                    }\n                    return;\n                }\n                if (changeType === BindingSourceChangeTypeEnum.Update) {\n                    const oldRecordCount = sourceInfo.oldRecordCount!;\n                    const nodeInfo = this._sheetsBindingManager.getBindingModelBySourceId(sourceId);\n                    for (const { unitId, subunitId, nodeId, row, column } of nodeInfo) {\n                        const rTreeCollection = this._getRTeeCollection(sourceUnitId);\n                        const node = this._sheetsBindingManager.getBindingNodeById(unitId, subunitId, nodeId);\n                        if (rTreeCollection && node?.type === DataBindingNodeTypeEnum.List) {\n                            const offset = (node as IListDataBindingNode).containHeader ? 0 : 1;\n                            const oldRange = { startRow: row, startColumn: column, endRow: row + oldRecordCount - offset, endColumn: column };\n                            const range = { startRow: row, startColumn: column, endRow: row + sourceInfo.recordCount - offset, endColumn: column };\n                            rTreeCollection.remove({ unitId, sheetId: subunitId, id: nodeId, range: oldRange });\n                            rTreeCollection.insert({ unitId, sheetId: subunitId, id: nodeId, range });\n                        }\n                    }\n                    return;\n                }\n\n                // Add the new data\n                const source = this._sheetsSourceManager.getSource(sourceUnitId, sourceId);\n                if (source && source.hasData()) {\n                    const sourceInfo = source.getSourceInfo() as IListSourceInfo;\n                    const recordCount = sourceInfo.recordCount;\n                    const nodeInfo = this._sheetsBindingManager.getBindingModelBySourceId(sourceId);\n\n                    for (const { unitId, subunitId, nodeId, row, column } of nodeInfo) {\n                        const rTreeCollection = this._ensureRTreeCollection(unitId);\n                        const node = this._sheetsBindingManager.getBindingNodeById(unitId, subunitId, nodeId);\n                        if (rTreeCollection && node?.type === DataBindingNodeTypeEnum.List) {\n                            const offset = (node as IListDataBindingNode).containHeader ? 0 : 1;\n                            const range = { startRow: row, startColumn: column, endRow: row + recordCount - offset, endColumn: column };\n                            rTreeCollection.insert({ unitId, sheetId: subunitId, id: nodeId, range });\n                        }\n                    }\n                }\n            }\n        }));\n\n        // Update the RTree collection when the binding node updated\n        this.disposeWithMe(this._sheetsBindingManager.cellBindInfoUpdate$.subscribe((nodeInfo) => {\n            const { unitId, subunitId, sourceId, nodeId, row, column, changeType, containHeader } = nodeInfo;\n            const rTreeCollection = this._ensureRTreeCollection(unitId);\n            const source = this._sheetsSourceManager.getSource(unitId, sourceId);\n\n            if (source && source.hasData()) {\n                const sourceInfo = source.getSourceInfo() as IListSourceInfo;\n                if (sourceInfo.sourceType === DataBindingNodeTypeEnum.List) {\n                    const recordCount = sourceInfo.recordCount;\n                    const offset = containHeader ? 0 : 1;\n                    const range = { startRow: row, startColumn: column, endRow: row + recordCount - offset, endColumn: column };\n                    if (changeType === BindingSourceChangeTypeEnum.Add) {\n                        rTreeCollection.insert({ unitId, sheetId: subunitId, id: nodeId, range });\n                    } else if (changeType === BindingSourceChangeTypeEnum.Remove) {\n                        rTreeCollection.remove({ unitId, sheetId: subunitId, id: nodeId, range });\n                    } else if (changeType === BindingSourceChangeTypeEnum.Update) {\n                        const oldSourceId = nodeInfo.oldSourceId!;\n                        const offset = nodeInfo.oldNodeContainHeader ? 0 : 1;\n                        // remove the old range\n                        const oldSource = this._sheetsSourceManager.getSource(unitId, oldSourceId);\n                        if (oldSource && oldSource.hasData()) {\n                            const oldSourceInfo = oldSource.getSourceInfo() as IListSourceInfo;\n                            const oldRecordCount = oldSourceInfo.recordCount;\n                            const oldRange = { startRow: row, startColumn: column, endRow: row + oldRecordCount - offset, endColumn: column };\n                            rTreeCollection.remove({ unitId, sheetId: subunitId, id: nodeId, range: oldRange });\n                        }\n                        rTreeCollection.insert({ unitId, sheetId: subunitId, id: nodeId, range });\n                    }\n                }\n            }\n        }));\n    }\n\n    private _getPathModeCellValue(unitId: string, subUnitId: string, row: number, col: number) {\n        const model = this._sheetsBindingManager.getModel(unitId, subUnitId);\n        const node = model?.getBindingNode(row, col);\n        if (node) {\n            const nodeType = node.type;\n            if (nodeType === DataBindingNodeTypeEnum.List) {\n                return {\n                    v: `#{${node.path}}`,\n                    s: { cl: { rgb: 'blue' } },\n                };\n            } else if (nodeType === DataBindingNodeTypeEnum.Object) {\n                return {\n                    v: `[${node.path}]`,\n                    s: { cl: { rgb: 'blue' } },\n                };\n            }\n        }\n    }\n\n    private _getValueModeCellValue(unitId: string, subUnitId: string, row: number, col: number) {\n        const model = this._sheetsBindingManager.getModel(unitId, subUnitId);\n        // object mode\n        if (model) {\n            const node = model.getBindingNode(row, col);\n            if (node) {\n                const { sourceId } = node;\n                const source = this._sheetsSourceManager.getSource(unitId, sourceId);\n                if (source && source.hasData()) {\n                    return source?.getData(node, row, col) || { v: '' };\n                }\n            }\n        }\n        const rTreeCollection = this._getRTeeCollection(unitId);\n        if (model && rTreeCollection) {\n            const range = { startRow: row, startColumn: col, endRow: row, endColumn: col };\n            const nodeIds = Array.from(rTreeCollection.bulkSearch([{ unitId, sheetId: subUnitId, range }]));\n            if (nodeIds.length > 0) {\n                const node = model.getBindingNodeById(nodeIds[0] as string);\n                if (node) {\n                    const { sourceId } = node;\n                    const source = this._sheetsSourceManager.getSource(unitId, sourceId);\n                    if (source && source.hasData()) {\n                        return source?.getData(node, row, col) || { v: '' };\n                    }\n                }\n            }\n        }\n    }\n\n    getBindingModelBySourceId(sourceId: string) {\n        return this._sheetsBindingManager.getBindingModelBySourceId(sourceId);\n    }\n\n    private _registerInterceptor() {\n        this.disposeWithMe(this._sheetInterceptorService.intercept(INTERCEPTOR_POINT.CELL_CONTENT, {\n            effect: InterceptorEffectEnum.Value | InterceptorEffectEnum.Style,\n            priority: 102,\n            handler: (cell, context, next) => {\n                const { row, col, unitId, subUnitId, workbook } = context;\n                let value = null;\n                if (this._bindingModel === BindModeEnum.Path) {\n                    value = this._getPathModeCellValue(unitId, subUnitId, row, col);\n                } else {\n                    value = this._getValueModeCellValue(unitId, subUnitId, row, col);\n                }\n                if (value !== null) {\n                    const defaultStyle = (typeof cell?.s === 'string' ? workbook.getStyles().get(cell?.s) : cell?.s) || {};\n                    const newStyle = { ...defaultStyle };\n                    if (value && value.s) {\n                        Object.assign(newStyle, value.s);\n                    }\n                    return next({ ...cell, ...value, s: newStyle });\n                }\n\n                return next(cell);\n            },\n        }));\n    }\n\n    override dispose(): void {\n        this._bindModelRTreeCollection.clear();\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport { IConfigService, Inject, Injector, Plugin, touchDependencies, UniverInstanceType } from '@univerjs/core';\nimport { SheetsBindingManager } from './controllers/binding-manager';\nimport { SheetsSourceManager } from './controllers/source-manager';\nimport { SheetsSourceBindService } from './services/source-binding-service';\n\ninterface IUniverSheetsBindingSourceConfig {}\n\nexport class UniverSheetsBindingSourcePlugin extends Plugin {\n    static override type = UniverInstanceType.UNIVER_SHEET;\n    static override pluginName = 'SHEET_BINDING_SOURCE_PLUGIN';\n\n    constructor(\n        private readonly _config: Partial<IUniverSheetsBindingSourceConfig> = {},\n        @Inject(Injector) override readonly _injector: Injector,\n        @IConfigService private readonly _configService: IConfigService\n    ) {\n        super();\n    }\n\n    override onStarting(): void {\n        ([\n            [SheetsBindingManager],\n            [SheetsSourceManager],\n            [SheetsSourceBindService],\n        ] as Dependency[]).forEach((d) => this._injector.add(d));\n    }\n\n    override onReady(): void {\n        touchDependencies(this._injector, [\n            [SheetsBindingManager],\n            [SheetsSourceManager],\n            [SheetsSourceBindService],\n        ]);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const SHEETS_THREAD_COMMENT_MODAL = 'univer.sheet.thread-comment-modal';\nexport const COMMENT_SINGLE_ICON = 'comment-single';\nexport const SHEETS_THREAD_COMMENT = 'SHEET_THREAD_COMMENT';\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, Nullable } from '@univerjs/core';\nimport type { ISheetLocationBase } from '@univerjs/sheets';\nimport { Disposable, DisposableCollection, Inject } from '@univerjs/core';\nimport { SheetCanvasPopManagerService } from '@univerjs/sheets-ui';\nimport { IZenZoneService } from '@univerjs/ui';\nimport { BehaviorSubject } from 'rxjs';\nimport { SHEETS_THREAD_COMMENT_MODAL } from '../types/const';\n\nexport interface IThreadCommentPopup extends ISheetLocationBase {\n    commentId?: string;\n    // when triggered by hover, temp is set to be `true`\n    temp?: boolean;\n    trigger?: string;\n}\n\nexport class SheetsThreadCommentPopupService extends Disposable {\n    private _lastPopup: Nullable<IDisposable> = null;\n    private _activePopup: Nullable<IThreadCommentPopup>;\n    private _activePopup$ = new BehaviorSubject<Nullable<IThreadCommentPopup>>(null);\n\n    activePopup$ = this._activePopup$.asObservable();\n\n    get activePopup() {\n        return this._activePopup;\n    }\n\n    constructor(\n        @Inject(SheetCanvasPopManagerService) private readonly _canvasPopupManagerService: SheetCanvasPopManagerService,\n        @IZenZoneService private readonly _zenZoneService: IZenZoneService\n    ) {\n        super();\n        this._initZenVisible();\n\n        this.disposeWithMe(() => {\n            this._activePopup$.complete();\n        });\n    }\n\n    private _initZenVisible() {\n        this.disposeWithMe(this._zenZoneService.visible$.subscribe((visible) => {\n            if (visible) {\n                this.hidePopup();\n            }\n        }));\n    }\n\n    showPopup(location: IThreadCommentPopup, onHide?: () => void) {\n        const { row, col, unitId, subUnitId } = location;\n        if (\n            this._activePopup &&\n            row === this._activePopup.row &&\n            col === this._activePopup.col &&\n            unitId === this._activePopup.unitId &&\n            subUnitId === this.activePopup?.subUnitId\n        ) {\n            this._activePopup = location;\n            this._activePopup$.next(location);\n            return;\n        }\n        if (this._lastPopup) {\n            this._lastPopup.dispose();\n        };\n        if (this._zenZoneService.visible) {\n            return;\n        }\n\n        this._activePopup = location;\n        this._activePopup$.next(location);\n\n        const popupDisposable = this._canvasPopupManagerService.attachPopupToCell(\n            row,\n            col,\n            {\n                componentKey: SHEETS_THREAD_COMMENT_MODAL,\n                onClickOutside: () => {\n                    this.hidePopup();\n                },\n                direction: 'horizontal',\n                excludeOutside: [\n                    ...Array.from(document.querySelectorAll('.univer-thread-comment')),\n                    document.getElementById('thread-comment-add'),\n                ].filter(Boolean) as HTMLElement[],\n            }\n        );\n\n        if (!popupDisposable) {\n            throw new Error('[SheetsThreadCommentPopupService]: cannot show popup!');\n        }\n\n        const disposableCollection = new DisposableCollection();\n        disposableCollection.add(popupDisposable);\n        disposableCollection.add({\n            dispose: () => {\n                onHide?.();\n            },\n        });\n\n        this._lastPopup = disposableCollection;\n    }\n\n    hidePopup() {\n        if (!this._activePopup) {\n            return;\n        }\n        if (this._lastPopup) {\n            this._lastPopup.dispose();\n        }\n        this._lastPopup = null;\n\n        this._activePopup = null;\n        this._activePopup$.next(null);\n    }\n\n    persistPopup() {\n        if (!this._activePopup || !this._activePopup.temp) {\n            return;\n        }\n        this._activePopup = {\n            ...this._activePopup,\n            temp: false,\n        };\n\n        this._activePopup$.next(this._activePopup);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommand } from '@univerjs/core';\nimport type { ISheetLocation } from '@univerjs/sheets';\nimport { CommandType, IUniverInstanceService } from '@univerjs/core';\nimport { getSheetCommandTarget, SheetsSelectionsService } from '@univerjs/sheets';\nimport { SheetsThreadCommentModel } from '@univerjs/sheets-thread-comment';\nimport { ThreadCommentPanelService } from '@univerjs/thread-comment-ui';\nimport { SheetsThreadCommentPopupService } from '../../services/sheets-thread-comment-popup.service';\n\nexport const ShowAddSheetCommentModalOperation: ICommand = {\n    type: CommandType.OPERATION,\n    id: 'sheets.operation.show-comment-modal',\n    handler(accessor) {\n        const selectionManagerService = accessor.get(SheetsSelectionsService);\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n\n        const sheetsThreadCommentPopupService = accessor.get(SheetsThreadCommentPopupService);\n        const threadCommentPanelService = accessor.get(ThreadCommentPanelService);\n        const activeCell = selectionManagerService.getCurrentLastSelection()?.primary;\n        const model = accessor.get(SheetsThreadCommentModel);\n\n        if (!activeCell) {\n            return false;\n        }\n\n        const result = getSheetCommandTarget(univerInstanceService);\n        if (!result) {\n            return false;\n        }\n\n        const { workbook, worksheet, unitId, subUnitId } = result;\n        const location: ISheetLocation = {\n            workbook,\n            worksheet,\n            unitId,\n            subUnitId,\n            row: activeCell.startRow,\n            col: activeCell.startColumn,\n        };\n\n        sheetsThreadCommentPopupService.showPopup(location);\n        const rootId = model.getByLocation(unitId, subUnitId, activeCell.startRow, activeCell.startColumn);\n        if (rootId) {\n            threadCommentPanelService.setActiveComment({\n                unitId,\n                subUnitId,\n                commentId: rootId,\n                trigger: 'context-menu',\n            });\n        }\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DependencyOverride } from '@univerjs/core';\nimport type { MenuConfig } from '@univerjs/ui';\n\nexport const SHEETS_THREAD_COMMENT_UI_PLUGIN_CONFIG_KEY = 'sheets-thread-comment.config';\n\nexport const configSymbol = Symbol(SHEETS_THREAD_COMMENT_UI_PLUGIN_CONFIG_KEY);\n\nexport interface IUniverSheetsThreadCommentUIConfig {\n    menu?: MenuConfig;\n    overrides?: DependencyOverride;\n}\n\nexport const defaultPluginConfig: IUniverSheetsThreadCommentUIConfig = {};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Workbook } from '@univerjs/core';\nimport { Disposable, Inject, InterceptorEffectEnum, IUniverInstanceService, UniverInstanceType } from '@univerjs/core';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { INTERCEPTOR_POINT, SheetInterceptorService } from '@univerjs/sheets';\nimport { SheetsThreadCommentModel } from '@univerjs/sheets-thread-comment';\nimport { debounceTime } from 'rxjs';\n\nexport class SheetsThreadCommentRenderController extends Disposable {\n    constructor(\n        @Inject(SheetInterceptorService) private readonly _sheetInterceptorService: SheetInterceptorService,\n        @Inject(SheetsThreadCommentModel) private readonly _sheetsThreadCommentModel: SheetsThreadCommentModel,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService\n    ) {\n        super();\n        this._initViewModelIntercept();\n        this._initSkeletonChange();\n    }\n\n    private _initViewModelIntercept() {\n        this.disposeWithMe(\n            this._sheetInterceptorService.intercept(\n                INTERCEPTOR_POINT.CELL_CONTENT,\n                {\n                    effect: InterceptorEffectEnum.Style,\n                    handler: (cell, pos, next) => {\n                        const { row, col, unitId, subUnitId } = pos;\n                        if (this._sheetsThreadCommentModel.showCommentMarker(unitId, subUnitId, row, col)) {\n                            return next({\n                                ...cell,\n                                markers: {\n                                    ...cell?.markers,\n                                    tr: {\n                                        color: '#FFBD37',\n                                        size: 6,\n                                    },\n                                },\n                            });\n                        }\n\n                        return next(cell);\n                    },\n                    priority: 100,\n                }\n            )\n        );\n    }\n\n    private _initSkeletonChange() {\n        const markSkeletonDirty = () => {\n            const workbook = this._univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET);\n            if (!workbook) return;\n            const unitId = workbook.getUnitId();\n            const currentRender = this._renderManagerService.getRenderById(unitId);\n            currentRender?.mainComponent?.makeForceDirty();\n        };\n\n        this.disposeWithMe(this._sheetsThreadCommentModel.commentUpdate$.pipe(debounceTime(16)).subscribe(() => {\n            markSkeletonDirty();\n        }));\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IMutationInfo, IRange, Nullable } from '@univerjs/core';\nimport { Disposable, Inject, Range } from '@univerjs/core';\nimport { serializeRange, singleReferenceToGrid } from '@univerjs/engine-formula';\nimport { SheetsThreadCommentModel } from '@univerjs/sheets-thread-comment';\nimport { COPY_TYPE, ISheetClipboardService } from '@univerjs/sheets-ui';\nimport { AddCommentMutation, DeleteCommentMutation, type IThreadComment, IThreadCommentDataSourceService } from '@univerjs/thread-comment';\nimport { SHEETS_THREAD_COMMENT } from '../types/const';\n\nconst transformRef = (ref: string, source: { row: number; column: number }, target: { row: number; column: number }) => {\n    const refObj = singleReferenceToGrid(ref);\n    const offsetRow = target.row - source.row;\n    const offsetCol = target.column - source.column;\n    const targetRange = {\n        startColumn: refObj.column + offsetCol,\n        startRow: refObj.row + offsetRow,\n        endColumn: refObj.column + offsetCol,\n        endRow: refObj.row + offsetRow,\n    };\n    return serializeRange(targetRange);\n};\n\nexport class SheetsThreadCommentCopyPasteController extends Disposable {\n    private _copyInfo: Nullable<{\n        unitId: string;\n        subUnitId: string;\n        range: IRange;\n    }>;\n\n    constructor(\n        @Inject(ISheetClipboardService) private _sheetClipboardService: ISheetClipboardService,\n        @Inject(SheetsThreadCommentModel) private _sheetsThreadCommentModel: SheetsThreadCommentModel,\n        @IThreadCommentDataSourceService private _threadCommentDataSourceService: IThreadCommentDataSourceService\n    ) {\n        super();\n        this._initClipboardHook();\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    private _initClipboardHook() {\n        this.disposeWithMe(\n            this._sheetClipboardService.addClipboardHook({\n                id: SHEETS_THREAD_COMMENT,\n                onBeforeCopy: (unitId, subUnitId, range) => {\n                    this._copyInfo = {\n                        unitId,\n                        subUnitId,\n                        range,\n                    };\n                },\n\n                // eslint-disable-next-line max-lines-per-function\n                onPasteCells: (_pasteFrom, pasteTo, _data, payload) => {\n                    const { unitId: targetUnitId, subUnitId: targetSubUnitId, range } = pasteTo;\n                    const targetPos = {\n                        row: range.rows[0],\n                        column: range.cols[0],\n                    };\n                    if (payload.copyType === COPY_TYPE.CUT && this._copyInfo) {\n                        const { range, unitId: sourceUnitId, subUnitId: sourceSubUnitId } = this._copyInfo;\n                        const sourcePos = {\n                            row: range.startRow,\n                            column: range.startColumn,\n                        };\n                        if (!(targetUnitId === sourceUnitId && targetSubUnitId === sourceSubUnitId)) {\n                            const roots: IThreadComment[] = [];\n\n                            Range.foreach(range, (row, col) => {\n                                const comments = this._sheetsThreadCommentModel.getAllByLocation(sourceUnitId, sourceSubUnitId, row, col);\n                                if (this._threadCommentDataSourceService.syncUpdateMutationToColla) {\n                                    comments.forEach((comment) => {\n                                        roots.push(comment);\n                                    });\n                                } else {\n                                    comments.forEach(({ children, ...comment }) => {\n                                        if (!comment.parentId) {\n                                            roots.push(comment);\n                                        }\n                                    });\n                                }\n                            });\n\n                            const sourceRedos: IMutationInfo[] = [];\n                            const sourceUndos: IMutationInfo[] = [];\n                            const targetRedos: IMutationInfo[] = [];\n                            const targetUndos: IMutationInfo[] = [];\n\n                            const handleCommentItem = (item: IThreadComment) => {\n                                sourceRedos.unshift({\n                                    id: DeleteCommentMutation.id,\n                                    params: {\n                                        unitId: sourceUnitId,\n                                        subUnitId: sourceSubUnitId,\n                                        commentId: item.id,\n                                    },\n                                });\n                                targetRedos.push({\n                                    id: AddCommentMutation.id,\n                                    params: {\n                                        unitId: targetUnitId,\n                                        subUnitId: targetSubUnitId,\n                                        comment: {\n                                            ...item,\n                                            ref: transformRef(item.ref, sourcePos, targetPos),\n                                            unitId: targetUnitId,\n                                            subUnitId: targetSubUnitId,\n                                        },\n                                        sync: true,\n                                    },\n                                });\n                                sourceUndos.push({\n                                    id: AddCommentMutation.id,\n                                    params: {\n                                        unitId: sourceUnitId,\n                                        subUnitId: sourceSubUnitId,\n                                        comment: item,\n                                        sync: true,\n                                    },\n                                });\n                                targetUndos.unshift({\n                                    id: DeleteCommentMutation.id,\n                                    params: {\n                                        unitId: targetUnitId,\n                                        subUnitId: targetSubUnitId,\n                                        commentId: item.id,\n                                    },\n                                });\n                            };\n\n                            roots.forEach((root) => {\n                                handleCommentItem(root);\n                            });\n\n                            return {\n                                redos: [...sourceRedos, ...targetRedos],\n                                undos: [...targetUndos, ...sourceUndos],\n                            };\n                        }\n                    }\n\n                    return {\n                        redos: [],\n                        undos: [],\n                    };\n                },\n            })\n        );\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Disposable, Inject } from '@univerjs/core';\nimport { RangeProtectionPermissionViewPoint, SheetPermissionCheckController, WorkbookCommentPermission, WorksheetViewPermission } from '@univerjs/sheets';\nimport { SheetsThreadCommentModel } from '@univerjs/sheets-thread-comment';\nimport { HoverManagerService } from '@univerjs/sheets-ui';\nimport { debounceTime } from 'rxjs';\nimport { SheetsThreadCommentPopupService } from '../services/sheets-thread-comment-popup.service';\n\nexport class SheetsThreadCommentHoverController extends Disposable {\n    constructor(\n        @Inject(HoverManagerService) private readonly _hoverManagerService: HoverManagerService,\n        @Inject(SheetsThreadCommentPopupService) private readonly _sheetsThreadCommentPopupService: SheetsThreadCommentPopupService,\n        @Inject(SheetsThreadCommentModel) private readonly _sheetsThreadCommentModel: SheetsThreadCommentModel,\n        @Inject(SheetPermissionCheckController) private readonly _sheetPermissionCheckController: SheetPermissionCheckController\n    ) {\n        super();\n        this._initHoverEvent();\n    }\n\n    private _initHoverEvent() {\n        this.disposeWithMe(\n            this._hoverManagerService.currentCell$.pipe(debounceTime(100)).subscribe((cell) => {\n                const currentPopup = this._sheetsThreadCommentPopupService.activePopup;\n                if (cell && ((currentPopup && currentPopup.temp) || !currentPopup)) {\n                    const { location } = cell;\n                    const { unitId, subUnitId, row, col } = location;\n\n                    const commentId = this._sheetsThreadCommentModel.getByLocation(unitId, subUnitId, row, col);\n\n                    if (commentId) {\n                        const commentPermission = this._sheetPermissionCheckController.permissionCheckWithRanges({\n                            workbookTypes: [WorkbookCommentPermission],\n                            worksheetTypes: [WorksheetViewPermission],\n                            rangeTypes: [RangeProtectionPermissionViewPoint],\n                        }, [{ startRow: row, startColumn: col, endRow: row, endColumn: col }]);\n                        if (!commentPermission) {\n                            return;\n                        }\n                        const comment = this._sheetsThreadCommentModel.getComment(unitId, subUnitId, commentId);\n                        if (comment && !comment.resolved) {\n                            this._sheetsThreadCommentPopupService.showPopup({\n                                unitId,\n                                subUnitId,\n                                row,\n                                col,\n                                commentId,\n                                temp: true,\n                            });\n                        }\n                    } else {\n                        if (currentPopup) {\n                            this._sheetsThreadCommentPopupService.hidePopup();\n                        }\n                    }\n                }\n            })\n        );\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Nullable, Workbook } from '@univerjs/core';\nimport type { ISelectionWithStyle } from '@univerjs/sheets';\nimport type { IDeleteCommentMutationParams } from '@univerjs/thread-comment';\nimport { Disposable, ICommandService, Inject, IUniverInstanceService, RANGE_TYPE, Rectangle, UniverInstanceType } from '@univerjs/core';\nimport { singleReferenceToGrid } from '@univerjs/engine-formula';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { RangeProtectionPermissionViewPoint, SetWorksheetActiveOperation, SheetPermissionCheckController, SheetsSelectionsService, WorkbookCommentPermission, WorksheetViewPermission } from '@univerjs/sheets';\nimport { SheetsThreadCommentModel } from '@univerjs/sheets-thread-comment';\nimport { IEditorBridgeService, IMarkSelectionService, ScrollToRangeOperation, SheetSkeletonManagerService } from '@univerjs/sheets-ui';\nimport { DeleteCommentMutation } from '@univerjs/thread-comment';\nimport { SetActiveCommentOperation, ThreadCommentPanelService } from '@univerjs/thread-comment-ui';\nimport { debounceTime } from 'rxjs';\nimport { SheetsThreadCommentPopupService } from '../services/sheets-thread-comment-popup.service';\n\ninterface ISelectionShapeInfo {\n    shapeId: string;\n    unitId: string;\n    subUnitId: string;\n    commentId: string;\n}\n\nexport class SheetsThreadCommentPopupController extends Disposable {\n    private _isSwitchToCommenting = false;\n    private _selectionShapeInfo: Nullable<ISelectionShapeInfo> = null;\n\n    constructor(\n        @ICommandService private readonly _commandService: ICommandService,\n        @Inject(SheetsThreadCommentPopupService) private readonly _sheetsThreadCommentPopupService: SheetsThreadCommentPopupService,\n        @Inject(SheetsThreadCommentModel) private readonly _sheetsThreadCommentModel: SheetsThreadCommentModel,\n        @Inject(ThreadCommentPanelService) private readonly _threadCommentPanelService: ThreadCommentPanelService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @Inject(SheetPermissionCheckController) private readonly _sheetPermissionCheckController: SheetPermissionCheckController,\n        @IMarkSelectionService private readonly _markSelectionService: IMarkSelectionService,\n        @Inject(SheetsSelectionsService) private readonly _sheetSelectionService: SheetsSelectionsService,\n        @IEditorBridgeService private readonly _editorBridgeService: IEditorBridgeService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService\n    ) {\n        super();\n\n        this._initCommandListener();\n        this._initPanelListener();\n        this._initMarkSelection();\n        this._initSelectionUpdateListener();\n        this._initEditorBridge();\n    }\n\n    private _handleSelectionChange(selections: ISelectionWithStyle[], unitId: string, subUnitId: string) {\n        const range = selections[0]?.range;\n        const render = this._renderManagerService.getRenderById(unitId);\n        const skeleton = render?.with(SheetSkeletonManagerService).getSkeletonParam(subUnitId)?.skeleton;\n        if (!skeleton) {\n            return;\n        }\n\n        if (!range) {\n            return;\n        }\n        const actualCell = skeleton.getCellWithCoordByIndex(range.startRow, range.startColumn);\n\n        const rangeType = range.rangeType ?? RANGE_TYPE.NORMAL;\n        if ((rangeType !== RANGE_TYPE.NORMAL || range.endColumn - range.startColumn > 0 || range.endRow - range.startRow > 0) && !((actualCell.isMerged || actualCell.isMergedMainCell) && Rectangle.equals(actualCell.mergeInfo, range))) {\n            if (this._threadCommentPanelService.activeCommentId) {\n                this._commandService.executeCommand(SetActiveCommentOperation.id);\n            }\n            return;\n        }\n\n        const row = actualCell.actualRow;\n        const col = actualCell.actualColumn;\n        if (!this._sheetsThreadCommentModel.showCommentMarker(unitId, subUnitId, row, col)) {\n            if (this._threadCommentPanelService.activeCommentId) {\n                this._commandService.executeCommand(SetActiveCommentOperation.id);\n            }\n            return;\n        }\n\n        const commentId = this._sheetsThreadCommentModel.getByLocation(unitId, subUnitId, row, col);\n        if (commentId) {\n            this._commandService.executeCommand(SetActiveCommentOperation.id, {\n                unitId,\n                subUnitId,\n                commentId,\n            });\n        }\n    }\n\n    private _initSelectionUpdateListener() {\n        this.disposeWithMe(\n            this._sheetSelectionService.selectionMoveEnd$.subscribe((selections) => {\n                if (this._isSwitchToCommenting) {\n                    return;\n                }\n                const current = this._sheetSelectionService.currentSelectionParam;\n                if (!current) {\n                    return;\n                }\n                this._handleSelectionChange(selections, current.unitId, current.sheetId);\n            })\n        );\n    }\n\n    private _initEditorBridge() {\n        this.disposeWithMe(\n            this._editorBridgeService.visible$.subscribe((visible) => {\n                if (visible.visible) {\n                    this._sheetsThreadCommentPopupService.hidePopup();\n                }\n            })\n        );\n    }\n\n    private _initCommandListener() {\n        this._commandService.onCommandExecuted((commandInfo) => {\n            if (commandInfo.id === DeleteCommentMutation.id) {\n                const params = commandInfo.params as IDeleteCommentMutationParams;\n                const active = this._sheetsThreadCommentPopupService.activePopup;\n                if (!active) {\n                    return;\n                }\n                const { unitId, subUnitId, commentId } = active;\n                if (params.unitId === unitId && params.subUnitId === subUnitId && params.commentId === commentId) {\n                    this._sheetsThreadCommentPopupService.hidePopup();\n                }\n            }\n        });\n    }\n\n    private _initPanelListener() {\n        this.disposeWithMe(this._threadCommentPanelService.activeCommentId$.subscribe(async (commentInfo) => {\n            if (commentInfo) {\n                const { unitId, subUnitId, commentId, trigger } = commentInfo;\n                const comment = this._sheetsThreadCommentModel.getComment(unitId, subUnitId, commentId);\n                if (!comment || comment.resolved) {\n                    return;\n                }\n\n                const currentUnit = this._univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET);\n                if (!currentUnit) {\n                    return;\n                }\n                const currentUnitId = currentUnit.getUnitId();\n                if (currentUnitId !== unitId) {\n                    return;\n                }\n                this._isSwitchToCommenting = true;\n                const currentSheetId = currentUnit.getActiveSheet()?.getSheetId();\n                if (currentSheetId !== subUnitId) {\n                    await this._commandService.executeCommand(SetWorksheetActiveOperation.id, {\n                        unitId,\n                        subUnitId,\n                    });\n                }\n                this._isSwitchToCommenting = false;\n\n                const location = singleReferenceToGrid(comment.ref);\n\n                const { row, column: col } = location;\n                const commentPermission = this._sheetPermissionCheckController.permissionCheckWithRanges({\n                    workbookTypes: [WorkbookCommentPermission],\n                    worksheetTypes: [WorksheetViewPermission],\n                    rangeTypes: [RangeProtectionPermissionViewPoint],\n                }, [{ startRow: row, startColumn: col, endRow: row, endColumn: col }]);\n\n                if (!commentPermission) {\n                    return;\n                }\n\n                const GAP = 1;\n                await this._commandService.executeCommand(ScrollToRangeOperation.id, {\n                    range: {\n                        startRow: Math.max(location.row - GAP, 0),\n                        endRow: location.row + GAP,\n                        startColumn: Math.max(location.column - GAP, 0),\n                        endColumn: location.column + GAP,\n                    },\n                });\n                if (this._editorBridgeService.isVisible().visible) {\n                    return;\n                }\n\n                this._sheetsThreadCommentPopupService.showPopup({\n                    unitId,\n                    subUnitId,\n                    row: location.row,\n                    col: location.column,\n                    commentId: comment.id,\n                    trigger,\n                });\n            } else {\n                this._sheetsThreadCommentPopupService.hidePopup();\n            }\n        }));\n    }\n\n    private _initMarkSelection() {\n        this.disposeWithMe(this._threadCommentPanelService.activeCommentId$.pipe(debounceTime(100)).subscribe((activeComment) => {\n            if (!activeComment) {\n                if (this._selectionShapeInfo) {\n                    this._markSelectionService.removeShape(this._selectionShapeInfo.shapeId);\n                    this._selectionShapeInfo = null;\n                }\n                return;\n            }\n\n            const { unitId, subUnitId, commentId } = activeComment;\n            if (this._selectionShapeInfo) {\n                this._markSelectionService.removeShape(this._selectionShapeInfo.shapeId);\n                this._selectionShapeInfo = null;\n            }\n\n            const comment = this._sheetsThreadCommentModel.getComment(unitId, subUnitId, commentId);\n            if (!comment) {\n                return;\n            }\n\n            const location = singleReferenceToGrid(comment.ref);\n\n            const { row, column } = location;\n            if (Number.isNaN(row) || Number.isNaN(column)) {\n                return null;\n            }\n\n            const worksheet = this._univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET)?.getSheetBySheetId(subUnitId);\n\n            const mergeInfo = worksheet?.getMergedCell(row, column) ?? {\n                startColumn: column,\n                endColumn: column,\n                startRow: row,\n                endRow: row,\n            };\n\n            // TODO: use evented: false to solve this problem later\n            const shapeId = this._markSelectionService.addShape(\n                {\n                    range: mergeInfo,\n                    style: {\n                        // hasAutoFill: false,\n                        fill: 'rgb(255, 189, 55, 0.35)',\n                        strokeWidth: 1,\n                        stroke: '#FFBD37',\n                        widgets: {},\n                    },\n                    primary: null,\n                },\n                [],\n                -1\n            );\n            if (!shapeId) {\n                return;\n            }\n\n            this._selectionShapeInfo = {\n                ...activeComment,\n                shapeId,\n            };\n        }));\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Workbook } from '@univerjs/core';\nimport type { IRemoveSheetCommandParams } from '@univerjs/sheets';\nimport type { IDeleteCommentMutationParams } from '@univerjs/thread-comment';\nimport { Disposable, Inject, IUniverInstanceService, UniverInstanceType } from '@univerjs/core';\nimport { RemoveSheetCommand, SheetInterceptorService } from '@univerjs/sheets';\nimport { AddCommentMutation, DeleteCommentMutation, IThreadCommentDataSourceService, ThreadCommentModel } from '@univerjs/thread-comment';\n\nexport class ThreadCommentRemoveSheetsController extends Disposable {\n    constructor(\n        @Inject(SheetInterceptorService) private _sheetInterceptorService: SheetInterceptorService,\n        @IUniverInstanceService private _univerInstanceService: IUniverInstanceService,\n        @Inject(ThreadCommentModel) private _threadCommentModel: ThreadCommentModel,\n        @IThreadCommentDataSourceService private _threadCommentDataSourceService: IThreadCommentDataSourceService\n    ) {\n        super();\n        this._initSheetChange();\n    }\n\n    private _initSheetChange() {\n        this.disposeWithMe(\n            this._sheetInterceptorService.interceptCommand({\n                getMutations: (commandInfo) => {\n                    if (commandInfo.id === RemoveSheetCommand.id) {\n                        const params = commandInfo.params as IRemoveSheetCommandParams;\n                        const workbook = params.unitId ? this._univerInstanceService.getUnit<Workbook>(params.unitId) : this._univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET);\n                        if (!workbook) {\n                            return { redos: [], undos: [] };\n                        }\n                        const unitId = workbook.getUnitId();\n                        const subUnitId = params.subUnitId || workbook.getActiveSheet()?.getSheetId();\n                        if (!subUnitId) {\n                            return { redos: [], undos: [] };\n                        }\n                        const commentMap = this._threadCommentModel.ensureMap(unitId, subUnitId);\n\n                        const comments = Array.from(commentMap.values()).filter((comment) => !comment.parentId);\n                        const ids = comments.map((comment) => comment.id);\n                        const shouldSync = this._threadCommentDataSourceService.syncUpdateMutationToColla;\n\n                        const redos = ids.map((id) => ({\n                            id: DeleteCommentMutation.id,\n                            params: {\n                                unitId,\n                                subUnitId,\n                                commentId: id,\n                            } as IDeleteCommentMutationParams,\n                        }));\n\n                        const undos = comments.map(({ children, ...comment }) => ({\n                            id: AddCommentMutation.id,\n                            params: {\n                                unitId,\n                                subUnitId,\n                                comment: {\n                                    ...comment,\n                                    children: shouldSync ? children : undefined,\n                                },\n                                sync: !shouldSync,\n                            },\n                        }));\n                        return { redos, undos };\n                    }\n                    return { redos: [], undos: [] };\n                },\n            })\n        );\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Workbook } from '@univerjs/core';\nimport { IUniverInstanceService, Tools, UniverInstanceType } from '@univerjs/core';\nimport { SheetsThreadCommentModel } from '@univerjs/sheets-thread-comment';\nimport { ThreadCommentTree } from '@univerjs/thread-comment-ui';\nimport { useDependency, useObservable } from '@univerjs/ui';\nimport { SheetsThreadCommentPopupService } from '../../services/sheets-thread-comment-popup.service';\n\nexport const SheetsThreadCommentCell = () => {\n    const univerInstanceService = useDependency(IUniverInstanceService);\n    const sheetsThreadCommentPopupService = useDependency(SheetsThreadCommentPopupService);\n    const activePopup = useObservable(sheetsThreadCommentPopupService.activePopup$);\n    const sheetThreadCommentModel = useDependency(SheetsThreadCommentModel);\n    useObservable(sheetThreadCommentModel.commentUpdate$);\n    if (!activePopup) {\n        return null;\n    }\n    const { row, col, unitId, subUnitId, trigger } = activePopup;\n    const rootId = sheetThreadCommentModel.getByLocation(unitId, subUnitId, row, col);\n    const ref = `${Tools.chatAtABC(col)}${row + 1}`;\n    const onClose = () => {\n        sheetsThreadCommentPopupService.hidePopup();\n    };\n\n    const getSubUnitName = (id: string) => {\n        return univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET)?.getSheetBySheetId(id)?.getName() ?? '';\n    };\n\n    return (\n        <ThreadCommentTree\n            onClick={() => {\n                sheetsThreadCommentPopupService.persistPopup();\n            }}\n            prefix=\"cell\"\n            id={rootId}\n            unitId={unitId}\n            subUnitId={subUnitId}\n            type={UniverInstanceType.UNIVER_SHEET}\n            refStr={ref}\n            onClose={onClose}\n            getSubUnitName={getSubUnitName}\n            autoFocus={trigger === 'context-menu'}\n        />\n    );\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Workbook } from '@univerjs/core';\nimport type { IThreadComment } from '@univerjs/thread-comment';\nimport { ICommandService, IUniverInstanceService, UniverInstanceType } from '@univerjs/core';\nimport { singleReferenceToGrid } from '@univerjs/engine-formula';\nimport { IMarkSelectionService } from '@univerjs/sheets-ui';\nimport { ThreadCommentPanel, ThreadCommentPanelService } from '@univerjs/thread-comment-ui';\nimport { useDependency, useObservable } from '@univerjs/ui';\nimport React, { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { map } from 'rxjs';\nimport { ShowAddSheetCommentModalOperation } from '../../commands/operations/comment.operation';\nimport { SheetsThreadCommentPopupService } from '../../services/sheets-thread-comment-popup.service';\n\nexport const SheetsThreadCommentPanel = () => {\n    const markSelectionService = useDependency(IMarkSelectionService);\n    const univerInstanceService = useDependency(IUniverInstanceService);\n    const sheetsThreadCommentPopupService = useDependency(SheetsThreadCommentPopupService);\n    const workbook = univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET)!;\n    const unitId = workbook.getUnitId();\n    const commandService = useDependency(ICommandService);\n    const subUnitId$ = useMemo(() => workbook.activeSheet$.pipe(map((i) => i?.getSheetId())), [workbook.activeSheet$]);\n    const subUnitId = useObservable(subUnitId$, workbook.getActiveSheet()?.getSheetId());\n    const hoverShapeId = useRef<string | null>(null);\n    const panelService = useDependency(ThreadCommentPanelService);\n    const activeCommentId = useObservable(panelService.activeCommentId$);\n    const panelVisible = useObservable(panelService.panelVisible$, panelService.panelVisible);\n    const sortComments = useCallback((comments: IThreadComment[]) => {\n        const worksheets = workbook.getSheets();\n        const sheetIndex: Record<string, number> = {};\n        worksheets.forEach((sheet, i) => {\n            sheetIndex[sheet.getSheetId()] = i;\n        });\n\n        const sort = (comments: IThreadComment[]) => {\n            return comments.map((comment) => {\n                const ref = singleReferenceToGrid(comment.ref);\n                const p = [sheetIndex[comment.subUnitId] ?? 0, ref.row, ref.column];\n                return { ...comment, p };\n            }).sort((pre, aft) => {\n                if (pre.p[0] === aft.p[0]) {\n                    if (pre.p[1] === aft.p[1]) {\n                        return pre.p[2] - aft.p[2];\n                    }\n                    return pre.p[1] - aft.p[1];\n                }\n\n                return pre.p[0] - aft.p[0];\n            });\n        };\n\n        return [\n            ...sort(comments.filter((comment) => !comment.resolved)),\n            ...sort(comments.filter((comment) => comment.resolved)),\n        ];\n    }, [workbook]);\n\n    const showShape = useCallback((comment: IThreadComment) => {\n        if (comment.unitId === unitId && comment.subUnitId === subUnitId && !comment.resolved) {\n            const { row, column } = singleReferenceToGrid(comment.ref);\n            const worksheet = workbook.getSheetBySheetId(comment.subUnitId);\n            const mergeInfo = worksheet?.getMergedCell(row, column) ?? {\n                startColumn: column,\n                endColumn: column,\n                startRow: row,\n                endRow: row,\n            };\n            if (!Number.isNaN(row) && !Number.isNaN(column)) {\n                return markSelectionService.addShape({\n                    range: mergeInfo,\n                    style: {\n                        // hasAutoFill: false,\n                        fill: 'rgb(255, 189, 55, 0.35)',\n                        strokeWidth: 1,\n                        stroke: '#FFBD37',\n                        widgets: {},\n                    },\n                    primary: null,\n                });\n            }\n        }\n        return null;\n    }, [markSelectionService, subUnitId, unitId]);\n\n    const getSubUnitName = (id: string) => {\n        return workbook.getSheetBySheetId(id)?.getName() ?? '';\n    };\n\n    const handleAdd = () => {\n        commandService.executeCommand(ShowAddSheetCommentModalOperation.id);\n    };\n\n    const handleHover = (comment: IThreadComment) => {\n        if (\n            activeCommentId &&\n            activeCommentId.unitId === comment.unitId &&\n            activeCommentId.subUnitId === comment.subUnitId &&\n            activeCommentId.commentId === comment.id\n        ) {\n            return;\n        }\n\n        if (hoverShapeId.current) {\n            markSelectionService.removeShape(hoverShapeId.current);\n            hoverShapeId.current = null;\n        }\n\n        hoverShapeId.current = showShape(comment);\n    };\n\n    const handleLeave = () => {\n        if (hoverShapeId.current) {\n            markSelectionService.removeShape(hoverShapeId.current);\n            hoverShapeId.current = null;\n        }\n    };\n\n    const handleResolve = (id: string, resolved: boolean) => {\n        if (resolved) {\n            sheetsThreadCommentPopupService.hidePopup();\n        }\n    };\n\n    useEffect(() => {\n        if (!panelVisible && hoverShapeId.current) {\n            markSelectionService.removeShape(hoverShapeId.current);\n        }\n    }, [markSelectionService, panelVisible]);\n\n    return (\n        <ThreadCommentPanel\n            unitId={unitId}\n            subUnitId$={subUnitId$}\n            type={UniverInstanceType.UNIVER_SHEET}\n            onAdd={handleAdd}\n            getSubUnitName={getSubUnitName}\n            onResolve={handleResolve}\n            sortComments={sortComments}\n            onItemEnter={handleHover}\n            onItemLeave={handleLeave}\n            onDeleteComment={() => {\n                handleLeave();\n                return true;\n            }}\n        />\n    );\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor } from '@univerjs/core';\nimport type { IMenuItem, IShortcutItem } from '@univerjs/ui';\nimport { UniverInstanceType } from '@univerjs/core';\nimport { RangeProtectionPermissionViewPoint, WorkbookCommentPermission, WorksheetViewPermission } from '@univerjs/sheets';\nimport { getCurrentRangeDisable$, whenSheetEditorFocused } from '@univerjs/sheets-ui';\nimport { ToggleSheetCommentPanelOperation } from '@univerjs/thread-comment-ui';\nimport { getMenuHiddenObservable, KeyCode, MenuItemType, MetaKeys } from '@univerjs/ui';\nimport { ShowAddSheetCommentModalOperation } from '../commands/operations/comment.operation';\nimport { COMMENT_SINGLE_ICON } from '../types/const';\n\nexport const threadCommentMenuFactory = (accessor: IAccessor) => {\n    return {\n        id: ShowAddSheetCommentModalOperation.id,\n        type: MenuItemType.BUTTON,\n        icon: COMMENT_SINGLE_ICON,\n        title: 'sheetThreadComment.menu.addComment',\n        hidden$: getMenuHiddenObservable(accessor, UniverInstanceType.UNIVER_SHEET),\n        disabled$: getCurrentRangeDisable$(accessor, {\n            workbookTypes: [WorkbookCommentPermission],\n            worksheetTypes: [WorksheetViewPermission],\n            rangeTypes: [RangeProtectionPermissionViewPoint],\n        }),\n    } as IMenuItem;\n};\n\nexport const threadPanelMenuFactory = (accessor: IAccessor) => {\n    return {\n        id: ToggleSheetCommentPanelOperation.id,\n        type: MenuItemType.BUTTON,\n        icon: COMMENT_SINGLE_ICON,\n        tooltip: 'sheetThreadComment.menu.commentManagement',\n        disabled$: getCurrentRangeDisable$(accessor, {\n            workbookTypes: [WorkbookCommentPermission],\n            worksheetTypes: [WorksheetViewPermission],\n            rangeTypes: [RangeProtectionPermissionViewPoint],\n        }),\n        hidden$: getMenuHiddenObservable(accessor, UniverInstanceType.UNIVER_SHEET),\n\n    };\n};\n\nexport const AddCommentShortcut: IShortcutItem = {\n    id: ShowAddSheetCommentModalOperation.id,\n    binding: KeyCode.M | MetaKeys.CTRL_COMMAND | MetaKeys.ALT,\n    preconditions: whenSheetEditorFocused,\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { MenuSchemaType } from '@univerjs/ui';\nimport { ToggleSheetCommentPanelOperation } from '@univerjs/thread-comment-ui';\nimport { ContextMenuGroup, ContextMenuPosition, RibbonStartGroup } from '@univerjs/ui';\nimport { ShowAddSheetCommentModalOperation } from '../commands/operations/comment.operation';\nimport { threadCommentMenuFactory, threadPanelMenuFactory } from './menu';\n\nexport const menuSchema: MenuSchemaType = {\n    [RibbonStartGroup.OTHERS]: {\n        [ToggleSheetCommentPanelOperation.id]: {\n            order: 1,\n            menuItemFactory: threadPanelMenuFactory,\n        },\n    },\n    [ContextMenuPosition.MAIN_AREA]: {\n        [ContextMenuGroup.OTHERS]: {\n            [ShowAddSheetCommentModalOperation.id]: {\n                order: 0,\n                menuItemFactory: threadCommentMenuFactory,\n            },\n        },\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Disposable, Inject } from '@univerjs/core';\nimport { CommentSingle } from '@univerjs/icons';\nimport { THREAD_COMMENT_PANEL } from '@univerjs/thread-comment-ui';\nimport { ComponentManager, IMenuManagerService, IShortcutService } from '@univerjs/ui';\nimport { COMMENT_SINGLE_ICON, SHEETS_THREAD_COMMENT_MODAL } from '../types/const';\nimport { SheetsThreadCommentCell } from '../views/sheets-thread-comment-cell';\nimport { SheetsThreadCommentPanel } from '../views/sheets-thread-comment-panel';\nimport { AddCommentShortcut } from './menu';\nimport { menuSchema } from './menu.schema';\n\nexport class SheetsThreadCommentController extends Disposable {\n    constructor(\n        @IMenuManagerService private readonly _menuManagerService: IMenuManagerService,\n        @Inject(ComponentManager) private readonly _componentManager: ComponentManager,\n        @IShortcutService private readonly _shortcutService: IShortcutService\n    ) {\n        super();\n        this._initMenu();\n        this._initShortcut();\n        this._initComponent();\n    }\n\n    private _initShortcut() {\n        this._shortcutService.registerShortcut(AddCommentShortcut);\n    }\n\n    private _initMenu() {\n        this._menuManagerService.mergeMenu(menuSchema);\n    }\n\n    private _initComponent() {\n        ([\n            [SHEETS_THREAD_COMMENT_MODAL, SheetsThreadCommentCell],\n            [THREAD_COMMENT_PANEL, SheetsThreadCommentPanel],\n            [COMMENT_SINGLE_ICON, CommentSingle],\n        ] as const).forEach(([key, comp]) => {\n            this._componentManager.register(key, comp);\n        });\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport type { IUniverSheetsThreadCommentUIConfig } from './controllers/config.schema';\nimport { DependentOn, ICommandService, IConfigService, Inject, Injector, merge, Plugin, UniverInstanceType } from '@univerjs/core';\nimport { UniverSheetsThreadCommentPlugin } from '@univerjs/sheets-thread-comment';\nimport { UniverThreadCommentUIPlugin } from '@univerjs/thread-comment-ui';\nimport { ShowAddSheetCommentModalOperation } from './commands/operations/comment.operation';\nimport { defaultPluginConfig, SHEETS_THREAD_COMMENT_UI_PLUGIN_CONFIG_KEY } from './controllers/config.schema';\nimport { SheetsThreadCommentRenderController } from './controllers/render-controllers/render.controller';\nimport { SheetsThreadCommentCopyPasteController } from './controllers/sheets-thread-comment-copy-paste.controller';\nimport { SheetsThreadCommentHoverController } from './controllers/sheets-thread-comment-hover.controller';\nimport { SheetsThreadCommentPopupController } from './controllers/sheets-thread-comment-popup.controller';\nimport { ThreadCommentRemoveSheetsController } from './controllers/sheets-thread-comment-remove.controller';\nimport { SheetsThreadCommentController } from './controllers/sheets-thread-comment.controller';\nimport { SheetsThreadCommentPopupService } from './services/sheets-thread-comment-popup.service';\nimport { SHEETS_THREAD_COMMENT } from './types/const';\n\n@DependentOn(UniverThreadCommentUIPlugin, UniverSheetsThreadCommentPlugin)\nexport class UniverSheetsThreadCommentUIPlugin extends Plugin {\n    static override pluginName = SHEETS_THREAD_COMMENT;\n    static override type = UniverInstanceType.UNIVER_SHEET;\n\n    constructor(\n        private readonly _config: Partial<IUniverSheetsThreadCommentUIConfig> = defaultPluginConfig,\n        @Inject(Injector) protected override _injector: Injector,\n        @Inject(ICommandService) protected _commandService: ICommandService,\n        @IConfigService private readonly _configService: IConfigService\n    ) {\n        super();\n\n        // Manage the plugin configuration.\n        const { menu, ...rest } = merge(\n            {},\n            defaultPluginConfig,\n            this._config\n        );\n        if (menu) {\n            this._configService.setConfig('menu', menu, { merge: true });\n        }\n        this._configService.setConfig(SHEETS_THREAD_COMMENT_UI_PLUGIN_CONFIG_KEY, rest);\n    }\n\n    override onStarting(): void {\n        ([\n            [SheetsThreadCommentController],\n            [SheetsThreadCommentRenderController],\n            [SheetsThreadCommentCopyPasteController],\n            [SheetsThreadCommentHoverController],\n            [ThreadCommentRemoveSheetsController],\n            [SheetsThreadCommentPopupController],\n            [SheetsThreadCommentPopupService],\n        ] as Dependency[]).forEach((dep) => {\n            this._injector.add(dep);\n        });\n\n        [ShowAddSheetCommentModalOperation].forEach((command) => {\n            this._commandService.registerCommand(command);\n        });\n\n        this._injector.get(SheetsThreadCommentController);\n    }\n\n    override onReady(): void {\n        this._injector.get(SheetsThreadCommentRenderController);\n        this._injector.get(ThreadCommentRemoveSheetsController);\n    }\n\n    override onRendered(): void {\n        this._injector.get(SheetsThreadCommentCopyPasteController);\n        this._injector.get(SheetsThreadCommentHoverController);\n        this._injector.get(SheetsThreadCommentPopupController);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { MenuConfig } from '@univerjs/ui';\n\nexport const SHEETS_ZEN_EDITOR_PLUGIN_CONFIG_KEY = 'sheets-zen-editor.config';\n\nexport const configSymbol = Symbol(SHEETS_ZEN_EDITOR_PLUGIN_CONFIG_KEY);\n\nexport interface IUniverSheetsZenEditorConfig {\n    menu?: MenuConfig;\n}\n\nexport const defaultPluginConfig: IUniverSheetsZenEditorConfig = {};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommand, Workbook } from '@univerjs/core';\nimport { CommandType, delayAnimationFrame, DOCS_ZEN_EDITOR_UNIT_ID_KEY, DocumentDataModel, DocumentFlavor, IUniverInstanceService, Tools, UniverInstanceType } from '@univerjs/core';\nimport { IEditorService } from '@univerjs/docs-ui';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { EditingRenderController, IEditorBridgeService } from '@univerjs/sheets-ui';\nimport { ISidebarService, IZenZoneService } from '@univerjs/ui';\n\nexport const OpenZenEditorCommand: ICommand = {\n    id: 'zen-editor.command.open-zen-editor',\n    type: CommandType.COMMAND,\n    handler: async (accessor) => {\n        const zenZoneService = accessor.get(IZenZoneService);\n        const editorService = accessor.get(IEditorService);\n        const editorBridgeService = accessor.get(IEditorBridgeService);\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        const sideBarService = accessor.get(ISidebarService);\n\n        if (sideBarService.visible) {\n            sideBarService.close();\n            await delayAnimationFrame();\n        }\n\n        zenZoneService.open();\n\n        const editor = editorService.getEditor(DOCS_ZEN_EDITOR_UNIT_ID_KEY);\n\n        if (editor == null) {\n            return false;\n        }\n        const editCellState = editorBridgeService.getLatestEditCellState();\n\n        if (editCellState == null) {\n            return false;\n        }\n\n        const snapshot = editCellState.documentLayoutObject.documentModel?.getSnapshot();\n\n        if (snapshot == null) {\n            return false;\n        }\n\n        univerInstanceService.focusUnit(DOCS_ZEN_EDITOR_UNIT_ID_KEY);\n\n        const { body, drawings, drawingsOrder, tableSource, settings } = Tools.deepClone(snapshot);\n\n        const originSnapshot = editor.getDocumentData();\n\n        const newSnapshot = {\n            ...originSnapshot,\n            body,\n            drawings,\n            drawingsOrder,\n            tableSource,\n            settings,\n        };\n\n        const textRanges = [\n            {\n                startOffset: 0,\n                endOffset: 0,\n                collapsed: true,\n            },\n        ];\n        editor.focus();\n        editor.setDocumentData(newSnapshot, textRanges);\n        // Need to clear undo/redo service when open zen mode.\n        editor.clearUndoRedoHistory();\n\n        return true;\n    },\n};\n\nexport const CancelZenEditCommand: ICommand = {\n    id: 'zen-editor.command.cancel-zen-edit',\n    type: CommandType.COMMAND,\n    handler: async (accessor) => {\n        const zenZoneEditorService = accessor.get(IZenZoneService);\n        const editorBridgeService = accessor.get(IEditorBridgeService);\n        const univerInstanceManager = accessor.get(IUniverInstanceService);\n        const sideBarService = accessor.get(ISidebarService);\n\n        if (sideBarService.visible) {\n            sideBarService.close();\n            await delayAnimationFrame();\n        }\n        zenZoneEditorService.close();\n\n        const currentSheetInstance = univerInstanceManager.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET);\n        if (currentSheetInstance) {\n            univerInstanceManager.focusUnit(currentSheetInstance.getUnitId());\n            editorBridgeService.refreshEditCellState();\n\n            return true;\n        }\n\n        return false;\n    },\n};\n\nexport const ConfirmZenEditCommand: ICommand = {\n    id: 'zen-editor.command.confirm-zen-edit',\n\n    type: CommandType.COMMAND,\n\n    handler: async (accessor) => {\n        const zenZoneEditorService = accessor.get(IZenZoneService);\n        const editorBridgeService = accessor.get(IEditorBridgeService);\n        const univerInstanceManager = accessor.get(IUniverInstanceService);\n        const editorService = accessor.get(IEditorService);\n        const sideBarService = accessor.get(ISidebarService);\n\n        if (sideBarService.visible) {\n            sideBarService.close();\n            await delayAnimationFrame();\n        }\n        zenZoneEditorService.close();\n\n        const editor = editorService.getEditor(DOCS_ZEN_EDITOR_UNIT_ID_KEY);\n\n        if (editor == null) {\n            return false;\n        }\n\n        const renderManagerService = accessor.get(IRenderManagerService);\n\n        const currentSheetInstance = univerInstanceManager.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET);\n        if (currentSheetInstance) {\n            const currentSheetId = currentSheetInstance.getUnitId();\n\n            const editingRenderController = renderManagerService.getRenderById(currentSheetId)?.with(EditingRenderController);\n\n            if (editingRenderController) {\n                const snapshot = Tools.deepClone(editor.getDocumentData());\n                // Maybe we need a third Document flavor for sheet editor?\n                snapshot.documentStyle.documentFlavor = DocumentFlavor.UNSPECIFIED;\n                editingRenderController.submitCellData(new DocumentDataModel(snapshot));\n            }\n\n            univerInstanceManager.focusUnit(currentSheetInstance.getUnitId());\n            editorBridgeService.refreshEditCellState();\n            return true;\n        }\n\n        return false;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDocumentData } from '@univerjs/core';\nimport { DEFAULT_EMPTY_DOCUMENT_VALUE, DOCS_ZEN_EDITOR_UNIT_ID_KEY, DocumentFlavor, ICommandService } from '@univerjs/core';\nimport { clsx } from '@univerjs/design';\nimport { IEditorService } from '@univerjs/docs-ui';\nimport { CheckMarkSingle, CloseSingle } from '@univerjs/icons';\nimport { useDependency } from '@univerjs/ui';\nimport { useEffect, useRef } from 'react';\nimport { CancelZenEditCommand, ConfirmZenEditCommand } from '../../commands/commands/zen-editor.command';\nimport { IZenEditorManagerService } from '../../services/zen-editor.service';\nimport styles from './index.module.less';\n\nconst COMPONENT_PREFIX = 'ZEN_EDITOR_PLUGIN_';\n\nexport const ZEN_EDITOR_COMPONENT = `${COMPONENT_PREFIX}ZEN_EDITOR_COMPONENT`;\n\nconst INITIAL_SNAPSHOT: IDocumentData = {\n    id: DOCS_ZEN_EDITOR_UNIT_ID_KEY,\n    body: {\n        dataStream: `${DEFAULT_EMPTY_DOCUMENT_VALUE}`,\n        textRuns: [],\n        tables: [],\n        customBlocks: [],\n        paragraphs: [\n            {\n                startIndex: 0,\n            },\n        ],\n        sectionBreaks: [{\n            startIndex: 1,\n        }],\n    },\n    tableSource: {},\n    documentStyle: {\n        pageSize: {\n            width: 595,\n            height: Number.POSITIVE_INFINITY,\n        },\n        documentFlavor: DocumentFlavor.MODERN,\n        marginTop: 0,\n        marginBottom: 0,\n        marginRight: 0,\n        marginLeft: 0,\n        renderConfig: {\n            vertexAngle: 0,\n            centerAngle: 0,\n        },\n    },\n    drawings: {},\n    drawingsOrder: [],\n};\n\nexport function ZenEditor() {\n    const editorRef = useRef<HTMLDivElement>(null);\n    const zenEditorService = useDependency(IZenEditorManagerService);\n    const editorService = useDependency(IEditorService);\n\n    const commandService = useDependency(ICommandService);\n\n    useEffect(() => {\n        const editorDom = editorRef.current;\n\n        if (!editorDom) {\n            return;\n        }\n\n        const registerSubscription = editorService.register({\n            editorUnitId: DOCS_ZEN_EDITOR_UNIT_ID_KEY,\n            initialSnapshot: INITIAL_SNAPSHOT,\n            scrollBar: true,\n            backScrollOffset: 100,\n        }, editorDom);\n\n        const resizeObserver = new ResizeObserver(() => {\n            zenEditorService.setPosition(editorDom.getBoundingClientRect());\n        });\n\n        resizeObserver.observe(editorDom);\n\n        // Clean up on unmount\n        return () => {\n            registerSubscription.dispose();\n            resizeObserver.unobserve(editorDom);\n        };\n    }, []); // Empty dependency array means this effect runs once on mount and clean up on unmount\n\n    function handleCloseBtnClick() {\n        const editor = editorService.getEditor(DOCS_ZEN_EDITOR_UNIT_ID_KEY);\n        editor?.blur();\n        commandService.executeCommand(CancelZenEditCommand.id);\n    }\n\n    function handleConfirmBtnClick() {\n        const editor = editorService.getEditor(DOCS_ZEN_EDITOR_UNIT_ID_KEY);\n        editor?.blur();\n        commandService.executeCommand(ConfirmZenEditCommand.id);\n    }\n\n    return (\n        <div className={styles.zenEditor}>\n            <div className={styles.zenEditorIconWrapper}>\n                <span\n                    className={clsx(styles.zenEditorIconContainer, styles.zenEditorIconError)}\n                    onClick={handleCloseBtnClick}\n                >\n                    <CloseSingle style={{ fontSize: '22px' }} />\n                </span>\n\n                <span\n                    className={clsx(styles.zenEditorIconContainer, styles.zenEditorIconSuccess)}\n                    onClick={handleConfirmBtnClick}\n                >\n                    <CheckMarkSingle style={{ fontSize: '22px' }} />\n                </span>\n            </div>\n            <div className={styles.zenEditorCanvasContainer} ref={editorRef} />\n        </div>\n    );\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createIdentifier } from '@univerjs/core';\nimport { BehaviorSubject } from 'rxjs';\nimport type { IDisposable, Nullable } from '@univerjs/core';\nimport type { Observable } from 'rxjs';\n\nexport interface IZenEditorManagerService {\n    position$: Observable<Nullable<DOMRect>>;\n\n    dispose(): void;\n    setPosition(param: DOMRect): void;\n    getPosition(): Readonly<Nullable<DOMRect>>;\n}\n\nexport class ZenEditorManagerService implements IDisposable {\n    private _position: Nullable<DOMRect> = null;\n\n    private readonly _position$ = new BehaviorSubject<Nullable<DOMRect>>(null);\n    readonly position$ = this._position$.asObservable();\n\n    dispose(): void {\n        this._position$.complete();\n        this._position = null;\n    }\n\n    setPosition(param: DOMRect) {\n        this._position = param;\n\n        this._refresh(param);\n    }\n\n    getPosition(): Readonly<Nullable<DOMRect>> {\n        return this._position;\n    }\n\n    private _refresh(param: DOMRect): void {\n        this._position$.next(param);\n    }\n}\n\nexport const IZenEditorManagerService = createIdentifier<ZenEditorManagerService>(\n    'univer.sheet-zen-editor-manager.service'\n);\n", "export default {\n  \"zenEditor\": \"univer-zen-editor\",\n  \"zenEditorIconWrapper\": \"univer-zen-editor-icon-wrapper\",\n  \"zenEditorIconContainer\": \"univer-zen-editor-icon-container\",\n  \"zenEditorIconSuccess\": \"univer-zen-editor-icon-success\",\n  \"zenEditorIconError\": \"univer-zen-editor-icon-error\",\n  \"zenEditorCanvasContainer\": \"univer-zen-editor-canvas-container\"\n};import \"ni:sha-256;TlAiRMYbFRy8pzfk3Lp3Wdg_XRH341pDcGY6PqXF-Qg\";", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor } from '@univerjs/core';\nimport type { IMenuButtonItem } from '@univerjs/ui';\nimport { RangeProtectionPermissionEditPoint, WorkbookEditablePermission, WorksheetEditPermission, WorksheetSetCellStylePermission, WorksheetSetCellValuePermission } from '@univerjs/sheets';\nimport { getCurrentExclusiveRangeInterest$, getCurrentRangeDisable$, IEditorBridgeService } from '@univerjs/sheets-ui';\nimport { MenuItemType } from '@univerjs/ui';\nimport { map, switchMap } from 'rxjs';\nimport { OpenZenEditorCommand } from '../commands/commands/zen-editor.command';\n\nexport function ZenEditorMenuItemFactory(accessor: IAccessor): IMenuButtonItem {\n    const editorBridgeService = accessor.get(IEditorBridgeService);\n    return {\n        id: OpenZenEditorCommand.id,\n        type: MenuItemType.BUTTON,\n        title: 'rightClick.zenEditor',\n        icon: 'AmplifySingle',\n        hidden$: getCurrentExclusiveRangeInterest$(accessor),\n        disabled$: editorBridgeService.currentEditCell$.pipe(\n            switchMap((cell) => getCurrentRangeDisable$(accessor, { workbookTypes: [WorkbookEditablePermission], worksheetTypes: [WorksheetEditPermission, WorksheetSetCellValuePermission, WorksheetSetCellStylePermission], rangeTypes: [RangeProtectionPermissionEditPoint] })\n                .pipe(map((disabled) => disabled || (cell?.documentLayoutObject.documentModel?.getBody()?.customBlocks?.length ?? 0) > 0)))\n        ),\n    };\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { MenuSchemaType } from '@univerjs/ui';\nimport { ContextMenuGroup, ContextMenuPosition } from '@univerjs/ui';\nimport { OpenZenEditorCommand } from '../commands/commands/zen-editor.command';\nimport { ZenEditorMenuItemFactory } from '../views/menu';\n\nexport const menuSchema: MenuSchemaType = {\n    [ContextMenuPosition.MAIN_AREA]: {\n        [ContextMenuGroup.OTHERS]: {\n            [OpenZenEditorCommand.id]: {\n                order: 2,\n                menuItemFactory: ZenEditorMenuItemFactory,\n            },\n        },\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IContextService } from '@univerjs/core';\nimport { EDITOR_ACTIVATED, FOCUSING_DOC, FOCUSING_EDITOR_STANDALONE, FOCUSING_UNIVER_EDITOR } from '@univerjs/core';\nimport { type IShortcutItem, KeyCode, MetaKeys } from '@univerjs/ui';\n\nimport { CancelZenEditCommand, ConfirmZenEditCommand } from '../../commands/commands/zen-editor.command';\n\nexport const ZenEditorConfirmShortcut: IShortcutItem = {\n    id: ConfirmZenEditCommand.id,\n    description: 'shortcut.sheet.zen-edit-confirm',\n    group: '4_sheet-edit',\n    preconditions: (contextService) => whenZenEditorActivated(contextService),\n    binding: KeyCode.ENTER | MetaKeys.ALT,\n};\n\nexport const ZenEditorCancelShortcut: IShortcutItem = {\n    id: CancelZenEditCommand.id,\n    description: 'shortcut.sheet.zen-edit-cancel',\n    group: '4_sheet-edit',\n    preconditions: (contextService) => whenZenEditorActivated(contextService),\n    binding: KeyCode.ESC,\n};\n\n/**\n * Requires the currently focused unit to be Doc and the zen editor is activated.\n * @param contextService\n * @returns\n */\nexport function whenZenEditorActivated(contextService: IContextService) {\n    return (\n        contextService.getContextValue(FOCUSING_DOC) &&\n        contextService.getContextValue(FOCUSING_UNIVER_EDITOR) &&\n        contextService.getContextValue(EDITOR_ACTIVATED) &&\n        !contextService.getContextValue(FOCUSING_EDITOR_STANDALONE)\n    );\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Disposable, ICommandService } from '@univerjs/core';\nimport { IMenuManagerService, IShortcutService, IZenZoneService } from '@univerjs/ui';\n\nimport { CancelZenEditCommand, ConfirmZenEditCommand, OpenZenEditorCommand } from '../commands/commands/zen-editor.command';\nimport { ZEN_EDITOR_COMPONENT, ZenEditor } from '../views/zen-editor';\nimport { menuSchema } from './menu.schema';\nimport { ZenEditorCancelShortcut, ZenEditorConfirmShortcut } from './shortcuts/zen-editor.shortcut';\n\nexport class ZenEditorUIController extends Disposable {\n    constructor(\n        @IZenZoneService private readonly _zenZoneService: IZenZoneService,\n        @ICommandService private readonly _commandService: ICommandService,\n        @IMenuManagerService private readonly _menuManagerService: IMenuManagerService,\n        @IShortcutService private readonly _shortcutService: IShortcutService\n    ) {\n        super();\n\n        this._initialize();\n    }\n\n    private _initialize(): void {\n        this._initCustomComponents();\n        this._initCommands();\n        this._initMenus();\n        this._initShortcuts();\n    }\n\n    private _initCustomComponents(): void {\n        this.disposeWithMe(this._zenZoneService.set(ZEN_EDITOR_COMPONENT, ZenEditor));\n    }\n\n    private _initCommands(): void {\n        [OpenZenEditorCommand, CancelZenEditCommand, ConfirmZenEditCommand].forEach((c) => {\n            this.disposeWithMe(this._commandService.registerCommand(c));\n        });\n    }\n\n    private _initMenus(): void {\n        this._menuManagerService.mergeMenu(menuSchema);\n    }\n\n    private _initShortcuts(): void {\n        [ZenEditorConfirmShortcut, ZenEditorCancelShortcut].forEach((item) => {\n            this.disposeWithMe(this._shortcutService.registerShortcut(item));\n        });\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ITextRange } from '@univerjs/core';\nimport type { IDocObjectParam } from '@univerjs/docs-ui';\nimport type { Viewport } from '@univerjs/engine-render';\nimport {\n    DOCS_ZEN_EDITOR_UNIT_ID_KEY,\n    RxDisposable,\n} from '@univerjs/core';\nimport { VIEWPORT_KEY as DOC_VIEWPORT_KEY, DocBackScrollRenderController } from '@univerjs/docs-ui';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { getEditorObject } from '@univerjs/sheets-ui';\n\nimport { takeUntil } from 'rxjs';\nimport { IZenEditorManagerService } from '../services/zen-editor.service';\n\nexport class ZenEditorController extends RxDisposable {\n    constructor(\n        @IZenEditorManagerService private readonly _zenEditorManagerService: IZenEditorManagerService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService\n    ) {\n        super();\n\n        this._initialize();\n    }\n\n    private _initialize() {\n        this._syncZenEditorSize();\n    }\n\n    // Listen to changes in the size of the zen editor container to set the size of the editor.\n    private _syncZenEditorSize() {\n        this._zenEditorManagerService.position$.pipe(takeUntil(this.dispose$)).subscribe((position) => {\n            if (position == null) {\n                return;\n            }\n\n            const { width, height } = position;\n\n            const editorObject = getEditorObject(DOCS_ZEN_EDITOR_UNIT_ID_KEY, this._renderManagerService);\n\n            if (editorObject == null) {\n                return;\n            }\n\n            // resize canvas\n            requestIdleCallback(() => {\n                editorObject.engine.resizeBySize(width, height);\n                this._calculatePagePosition(editorObject);\n                this._scrollToTop();\n            });\n        });\n    }\n\n    private _calculatePagePosition(currentRender: IDocObjectParam) {\n        const { document: docsComponent, scene, docBackground } = currentRender;\n\n        const parent = scene?.getParent();\n\n        const { width: docsWidth, height: docsHeight, pageMarginLeft, pageMarginTop } = docsComponent;\n        if (parent == null || docsWidth === Number.POSITIVE_INFINITY || docsHeight === Number.POSITIVE_INFINITY) {\n            return;\n        }\n        const { width: engineWidth, height: engineHeight } = parent;\n\n        let docsLeft = 0;\n        const docsTop = pageMarginTop;\n\n        let sceneWidth = 0;\n\n        let sceneHeight = 0;\n\n        let scrollToX = Number.POSITIVE_INFINITY;\n\n        const { scaleX, scaleY } = scene.getAncestorScale();\n\n        if (engineWidth > (docsWidth + pageMarginLeft * 2) * scaleX) {\n            docsLeft = engineWidth / 2 - (docsWidth * scaleX) / 2;\n            docsLeft /= scaleX;\n            sceneWidth = (engineWidth - pageMarginLeft * 2) / scaleX;\n\n            scrollToX = 0;\n        } else {\n            docsLeft = pageMarginLeft;\n            sceneWidth = docsWidth + pageMarginLeft * 2;\n\n            scrollToX = (sceneWidth - engineWidth / scaleX) / 2;\n        }\n\n        if (engineHeight > docsHeight) {\n            sceneHeight = (engineHeight - pageMarginTop * 2) / scaleY;\n        } else {\n            sceneHeight = docsHeight + pageMarginTop * 2;\n        }\n\n        scene.resize(sceneWidth, sceneHeight);\n        docsComponent.translate(docsLeft, docsTop);\n        docBackground.translate(docsLeft, docsTop);\n\n        const viewport = scene.getViewport(DOC_VIEWPORT_KEY.VIEW_MAIN) as Viewport;\n        if (scrollToX !== Number.POSITIVE_INFINITY && viewport != null) {\n            const actualX = viewport.transScroll2ViewportScrollValue(scrollToX, 0).x;\n            viewport.scrollToBarPos({\n                x: actualX,\n            });\n        }\n\n        return this;\n    }\n\n    private _scrollToTop() {\n        const backScrollController = this._renderManagerService.getRenderById(DOCS_ZEN_EDITOR_UNIT_ID_KEY)?.with(DocBackScrollRenderController);\n        const textRange = {\n            startOffset: 0,\n            endOffset: 0,\n        };\n        if (backScrollController) {\n            backScrollController.scrollToRange(textRange as ITextRange);\n        }\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport type { IUniverSheetsZenEditorConfig } from './controllers/config.schema';\n\nimport { IConfigService, Inject, Injector, merge, Plugin, UniverInstanceType } from '@univerjs/core';\nimport { defaultPluginConfig, SHEETS_ZEN_EDITOR_PLUGIN_CONFIG_KEY } from './controllers/config.schema';\nimport { ZenEditorUIController } from './controllers/zen-editor-ui.controller';\nimport { ZenEditorController } from './controllers/zen-editor.controller';\nimport { IZenEditorManagerService, ZenEditorManagerService } from './services/zen-editor.service';\n\nexport class UniverSheetsZenEditorPlugin extends Plugin {\n    static override pluginName = 'SHEET_ZEN_EDITOR_PLUGIN';\n    static override type = UniverInstanceType.UNIVER_SHEET;\n\n    constructor(\n        private readonly _config: Partial<IUniverSheetsZenEditorConfig> = defaultPluginConfig,\n        @Inject(Injector) override readonly _injector: Injector,\n        @IConfigService private readonly _configService: IConfigService\n    ) {\n        super();\n\n        // Manage the plugin configuration.\n        const { menu, ...rest } = merge(\n            {},\n            defaultPluginConfig,\n            this._config\n        );\n        if (menu) {\n            this._configService.setConfig('menu', menu, { merge: true });\n        }\n        this._configService.setConfig(SHEETS_ZEN_EDITOR_PLUGIN_CONFIG_KEY, rest);\n\n        this._initializeDependencies(this._injector);\n    }\n\n    private _initializeDependencies(injector: Injector) {\n        const dependencies: Dependency[] = [\n            [ZenEditorUIController],\n            [ZenEditorController],\n            [IZenEditorManagerService, { useClass: ZenEditorManagerService }],\n        ];\n\n        dependencies.forEach((dependency) => injector.add(dependency));\n    }\n\n    override onReady(): void {\n        this._injector.get(ZenEditorUIController);\n    }\n\n    override onSteady(): void {\n        this._injector.get(ZenEditorController);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ISetDefinedNameMutationParam } from '@univerjs/engine-formula';\nimport type { FWorksheet } from './f-worksheet';\nimport { generateRandomId, IAuthzIoService, ICommandService, Inject, Injector, IPermissionService, LocaleService } from '@univerjs/core';\nimport { FBase } from '@univerjs/core/facade';\nimport { IDefinedNamesService, serializeRange } from '@univerjs/engine-formula';\nimport { RangeProtectionRuleModel, RemoveDefinedNameCommand, SCOPE_WORKBOOK_VALUE_DEFINED_NAME, SetDefinedNameCommand, WorksheetProtectionPointModel, WorksheetProtectionRuleModel } from '@univerjs/sheets';\n\n/**\n * Get defined name field name\n * @param {string} unitId - unit id\n * @param {LocaleService} localeService - locale service\n * @param {IDefinedNamesService} definedNamesService - defined names service\n * @returns {string} field name\n */\nfunction getDefinedNameFieldName(unitId: string, localeService: LocaleService, definedNamesService: IDefinedNamesService): string {\n    const definedNameMap = definedNamesService.getDefinedNameMap(unitId);\n    if (definedNameMap == null) {\n        return localeService.t('definedName.defaultName') + 1;\n    }\n    const definedNames = Array.from(Object.values(definedNameMap));\n    const count = definedNames.length + 1;\n    const name = localeService.t('definedName.defaultName') + count;\n    if (definedNamesService.getValueByName(unitId, name) == null) {\n        return name;\n    }\n\n    let i = count + 1;\n    while (true) {\n        const newName = localeService.t('definedName.defaultName') + i;\n        if (definedNamesService.getValueByName(unitId, newName) == null) {\n            return newName;\n        }\n        i++;\n    }\n}\n\n/**\n * @hideconstructor\n */\nexport class FDefinedNameBuilder {\n    private _definedNameParam: ISetDefinedNameMutationParam;\n\n    constructor() {\n        this._definedNameParam = {\n            id: generateRandomId(10),\n            unitId: '',\n            name: '',\n            formulaOrRefString: '',\n        };\n    }\n\n    /**\n     * Sets the name of the defined name builder.\n     * @param {string} name The name of the defined name.\n     * @returns {FDefinedNameBuilder} The instance of `FDefinedNameBuilder` for method chaining.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedNameBuilder = univerAPI.newDefinedName()\n     *   .setName('MyDefinedName')\n     *   .build();\n     * workbook.insertDefinedNameBuilder(definedNameBuilder);\n     * ```\n     */\n    setName(name: string): FDefinedNameBuilder {\n        this._definedNameParam.name = name;\n        return this;\n    }\n\n    /**\n     * Sets the formula of the defined name builder.\n     * @param {string }formula The formula of the defined name.\n     * @returns {FDefinedNameBuilder} The instance of `FDefinedNameBuilder` for method chaining.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedNameBuilder = univerAPI.newDefinedName()\n     *   .setFormula('SUM(Sheet1!$A$1)')\n     *   .setName('MyDefinedName')\n     *   .build();\n     * workbook.insertDefinedNameBuilder(definedNameBuilder);\n     * ```\n     */\n    setFormula(formula: string): FDefinedNameBuilder {\n        this._definedNameParam.formulaOrRefString = `=${formula}`;\n        return this;\n    }\n\n    /**\n     * Sets the reference of the defined name builder.\n     * @param {string} a1Notation The reference of the defined name.\n     * @returns {FDefinedNameBuilder} The instance of `FDefinedNameBuilder` for method chaining.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedNameBuilder = univerAPI.newDefinedName()\n     *   .setRef('Sheet1!$A$1')\n     *   .build();\n     * workbook.insertDefinedNameBuilder(definedNameBuilder);\n     * ```\n     */\n    setRef(a1Notation: string): FDefinedNameBuilder {\n        this._definedNameParam.formulaOrRefString = a1Notation;\n        return this;\n    }\n\n    /**\n     * Sets the reference of the defined name builder by range .\n     * @param {number} row The start row of the range.\n     * @param {number} column The start column of the range.\n     * @param {number} numRows The number of rows in the range.\n     * @param {number} numColumns The number of columns in the range.\n     * @returns {FDefinedNameBuilder} The instance of `FDefinedNameBuilder` for method chaining.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedNameBuilder = univerAPI.newDefinedName()\n     *   .setRefByRange(1, 3, 2, 5)\n     *   .build();\n     * workbook.insertDefinedNameBuilder(definedNameBuilder);\n     * ```\n     */\n    setRefByRange(row: number, column: number, numRows: number, numColumns: number): FDefinedNameBuilder {\n        this._definedNameParam.formulaOrRefString = serializeRange({\n            startRow: row,\n            endRow: row + (numRows ?? 1) - 1,\n            startColumn: column,\n            endColumn: column + (numColumns ?? 1) - 1,\n        });\n        return this;\n    }\n\n    /**\n     * Sets the comment of the defined name builder.\n     * @param {string} comment The comment of the defined name.\n     * @returns {FDefinedNameBuilder} The instance of `FDefinedNameBuilder` for method chaining.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedNameBuilder = univerAPI.newDefinedName()\n     *   .setComment('This is a comment')\n     *   .build();\n     * workbook.insertDefinedNameBuilder(definedNameBuilder);\n     * ```\n     */\n    setComment(comment: string): FDefinedNameBuilder {\n        this._definedNameParam.comment = comment;\n        return this;\n    }\n\n    /**\n     * Sets the hidden status of the defined name builder.\n     * @param {boolean} hidden The hidden status of the defined name.\n     * @returns {FDefinedNameBuilder} The instance of `FDefinedNameBuilder` for method chaining.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedNameBuilder = univerAPI.newDefinedName()\n     *   .setHidden(true)\n     *   .build();\n     * workbook.insertDefinedNameBuilder(definedNameBuilder);\n     * ```\n     */\n    setHidden(hidden: boolean): FDefinedNameBuilder {\n        this._definedNameParam.hidden = hidden;\n        return this;\n    }\n\n    /**\n     * Builds the defined name parameter.\n     * @returns {ISetDefinedNameMutationParam} The defined name mutation parameter.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedNameBuilder = univerAPI.newDefinedName()\n     *   .setRef('Sheet1!$A$1')\n     *   .setName('MyDefinedName')\n     *   .setComment('This is a comment')\n     *   .build();\n     * workbook.insertDefinedNameBuilder(definedNameBuilder);\n     * ```\n     */\n    build(): ISetDefinedNameMutationParam {\n        return this._definedNameParam;\n    }\n\n    /**\n     * Loads the defined name mutation parameter.\n     * @param {ISetDefinedNameMutationParam} param - defined name mutation parameter\n     * @returns {FDefinedNameBuilder} The instance of `FDefinedNameBuilder` for method chaining.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedNameParam = {\n     *   id: '4TMPceoqg8',\n     *   unitId: workbook.getId(),\n     *   name: 'MyDefinedName',\n     *   formulaOrRefString: 'Sheet1!$A$1',\n     * }\n     * const definedNameBuilder = univerAPI.newDefinedName()\n     *   .load(definedNameParam)\n     *   .build();\n     * workbook.insertDefinedNameBuilder(definedNameBuilder);\n     * ```\n     */\n    load(param: ISetDefinedNameMutationParam): FDefinedNameBuilder {\n        this._definedNameParam = param;\n        return this;\n    }\n}\n\n/**\n * @hideconstructor\n */\nexport class FDefinedName extends FBase {\n    constructor(\n        protected _definedNameParam: ISetDefinedNameMutationParam,\n        @Inject(Injector) protected readonly _injector: Injector,\n        @ICommandService protected readonly _commandService: ICommandService,\n        @IPermissionService protected readonly _permissionService: IPermissionService,\n        @Inject(WorksheetProtectionRuleModel) protected readonly _worksheetProtectionRuleModel: WorksheetProtectionRuleModel,\n        @Inject(RangeProtectionRuleModel) protected readonly _rangeProtectionRuleModel: RangeProtectionRuleModel,\n        @Inject(WorksheetProtectionPointModel) protected readonly _worksheetProtectionPointRuleModel: WorksheetProtectionPointModel,\n        @Inject(IAuthzIoService) protected readonly _authzIoService: IAuthzIoService,\n        @Inject(LocaleService) protected readonly _localeService: LocaleService,\n        @IDefinedNamesService protected readonly _definedNamesService: IDefinedNamesService\n    ) {\n        super();\n    }\n\n    private _apply(): void {\n        if (this._definedNameParam.name === '') {\n            this._definedNameParam.name = getDefinedNameFieldName(this._definedNameParam.unitId, this._localeService, this._definedNamesService);\n        }\n        this._commandService.syncExecuteCommand(SetDefinedNameCommand.id, this._definedNameParam);\n    }\n\n    /**\n     * Gets the name of the defined name.\n     * @returns {string} The name of the defined name.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedName = workbook.getDefinedNames()[0];\n     * console.log(definedName?.getName());\n     * ```\n     */\n    getName(): string {\n        return this._definedNameParam.name;\n    }\n\n    /**\n     * Sets the name of the defined name.\n     * @param {string} name The name of the defined name.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedName = workbook.getDefinedNames()[0];\n     * definedName?.setName('NewDefinedName');\n     * ```\n     */\n    setName(name: string): void {\n        this._definedNameParam.name = name;\n        this._apply();\n    }\n\n    /**\n     * Sets the formula of the defined name.\n     * @param {string} formula The formula of the defined name.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedName = workbook.getDefinedNames()[0];\n     * definedName?.setFormula('SUM(Sheet1!$A$1)');\n     * ```\n     */\n    setFormula(formula: string): void {\n        this._definedNameParam.formulaOrRefString = `=${formula}`;\n        this._apply();\n    }\n\n    /**\n     * Sets the reference of the defined name.\n     * @param {string} refString The reference of the defined name.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedName = workbook.getDefinedNames()[0];\n     * definedName?.setRef('Sheet1!$A$1');\n     * ```\n     */\n    setRef(refString: string): void {\n        this._definedNameParam.formulaOrRefString = refString;\n        this._apply();\n    }\n\n    /**\n     * Gets the formula or reference string of the defined name.\n     * @returns {string} The formula or reference string of the defined name.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedName = workbook.getDefinedNames()[0];\n     * console.log(definedName?.getFormulaOrRefString());\n     * ```\n     */\n    getFormulaOrRefString(): string {\n        return this._definedNameParam.formulaOrRefString;\n    }\n\n    /**\n     * Sets the reference of the defined name by range.\n     * @param {number} row The start row of the range.\n     * @param {number} column The start column of the range.\n     * @param {number} numRows The number of rows in the range.\n     * @param {number} numColumns The number of columns in the range.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedName = workbook.getDefinedNames()[0];\n     * definedName?.setRefByRange(1, 3, 2, 5);\n     * ```\n     */\n    setRefByRange(row: number, column: number, numRows: number, numColumns: number): void {\n        this._definedNameParam.formulaOrRefString = serializeRange({\n            startRow: row,\n            endRow: row + (numRows ?? 1) - 1,\n            startColumn: column,\n            endColumn: column + (numColumns ?? 1) - 1,\n        });\n        this._apply();\n    }\n\n    /**\n     * Gets the comment of the defined name.\n     * @returns {string | undefined} The comment of the defined name.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedName = workbook.getDefinedNames()[0];\n     * console.log(definedName?.getComment());\n     * ```\n     */\n    getComment(): string | undefined {\n        return this._definedNameParam.comment;\n    }\n\n    /**\n     * Sets the comment of the defined name.\n     * @param {string} comment The comment of the defined name.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedName = workbook.getDefinedNames()[0];\n     * definedName?.setComment('This is a comment');\n     * ```\n     */\n    setComment(comment: string): void {\n        this._definedNameParam.comment = comment;\n        this._apply();\n    }\n\n    /**\n     * Sets the scope of the defined name to the worksheet.\n     * @param {FWorksheet} worksheet The worksheet to set the scope to.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const worksheet = workbook.getSheets()[0];\n     * const definedName = workbook.getDefinedNames()[0];\n     * definedName?.setScopeToWorksheet(worksheet);\n     * ```\n     */\n    setScopeToWorksheet(worksheet: FWorksheet): void {\n        this._definedNameParam.localSheetId = worksheet.getSheetId();\n        this._apply();\n    }\n\n    /**\n     * Sets the scope of the defined name to the workbook.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedName = workbook.getDefinedNames()[0];\n     * definedName?.setScopeToWorkbook();\n     * ```\n     */\n    setScopeToWorkbook(): void {\n        this._definedNameParam.localSheetId = SCOPE_WORKBOOK_VALUE_DEFINED_NAME;\n        this._apply();\n    }\n\n    /**\n     * Sets the hidden status of the defined name.\n     * @param {boolean} hidden The hidden status of the defined name.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedName = workbook.getDefinedNames()[0];\n     * definedName?.setHidden(true);\n     * ```\n     */\n    setHidden(hidden: boolean): void {\n        this._definedNameParam.hidden = hidden;\n        this._apply();\n    }\n\n    /**\n     * Deletes the defined name.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedName = workbook.getDefinedNames()[0];\n     * definedName?.delete();\n     * ```\n     */\n    delete(): void {\n        this._commandService.syncExecuteCommand(RemoveDefinedNameCommand.id, this._definedNameParam);\n    }\n\n    /**\n     * Gets the local sheet id of the defined name.\n     * @returns {string | undefined} The local sheet id of the defined name.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedName = workbook.getDefinedNames()[0];\n     * console.log(definedName?.getLocalSheetId());\n     * ```\n     */\n    getLocalSheetId(): string | undefined {\n        return this._definedNameParam.localSheetId;\n    }\n\n    /**\n     * Checks if the defined name is in the workbook scope.\n     * @returns {boolean} True if the defined name is in the workbook scope, false otherwise.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedName = workbook.getDefinedNames()[0];\n     * console.log(definedName?.isWorkbookScope());\n     * ```\n     */\n    isWorkbookScope(): boolean {\n        return this._definedNameParam.localSheetId === SCOPE_WORKBOOK_VALUE_DEFINED_NAME;\n    }\n\n    /**\n     * Converts the defined name to a defined name builder.\n     * @returns {FDefinedNameBuilder} The defined name builder.\n     * @example\n     * ```ts\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const definedName = workbook.getDefinedNames()[0];\n     * if (!definedName) return;\n     * const definedNameBuilder = definedName\n     *   .toBuilder()\n     *   .setName('NewDefinedName')\n     *   .setFormula('SUM(Sheet1!$A$1)')\n     *   .build();\n     * workbook.updateDefinedNameBuilder(definedNameBuilder);\n     * ```\n     */\n    toBuilder(): FDefinedNameBuilder {\n        const builder = this._injector.createInstance(FDefinedNameBuilder);\n        builder.load(this._definedNameParam);\n        return builder;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { RangePermissionPointConstructor, WorkbookPermissionPointConstructor, WorkSheetPermissionPointConstructor } from '@univerjs/core';\nimport type { ISetWorksheetPermissionPointsMutationParams } from '@univerjs/sheets';\nimport type { Observable } from 'rxjs';\nimport type { FRange } from './f-range';\nimport { generateRandomId, IAuthzIoService, ICommandService, Inject, Injector, IPermissionService, Rectangle } from '@univerjs/core';\nimport { FBase } from '@univerjs/core/facade';\nimport { AddRangeProtectionMutation, AddWorksheetProtectionMutation, DeleteRangeProtectionMutation, DeleteWorksheetProtectionMutation, getAllWorksheetPermissionPoint, getAllWorksheetPermissionPointByPointPanel, PermissionPointsDefinitions, RangeProtectionRuleModel, SetRangeProtectionMutation, SetWorksheetPermissionPointsMutation, UnitObject, WorkbookEditablePermission, WorksheetEditPermission, WorksheetProtectionPointModel, WorksheetProtectionRuleModel, WorksheetViewPermission } from '@univerjs/sheets';\n\n/**\n * @description Used to generate permission instances to control permissions for the entire workbook\n * @hideconstructor\n */\nexport class FPermission extends FBase {\n    /**\n     * Permission point definition, can read the point constructor want to modify from here\n     */\n    public permissionPointsDefinition = PermissionPointsDefinitions;\n    /**\n     * An observable object used to monitor permission change events within a range, thereby triggering corresponding subsequent processing.\n     */\n    public rangeRuleChangedAfterAuth$: Observable<string>;\n    /**\n     * An observable object used to monitor permission change events within a worksheet, thereby triggering corresponding subsequent processing.\n     */\n    public sheetRuleChangedAfterAuth$: Observable<string>;\n\n    constructor(\n        @Inject(Injector) protected readonly _injector: Injector,\n        @ICommandService protected readonly _commandService: ICommandService,\n        @IPermissionService protected readonly _permissionService: IPermissionService,\n        @Inject(WorksheetProtectionRuleModel) protected readonly _worksheetProtectionRuleModel: WorksheetProtectionRuleModel,\n        @Inject(RangeProtectionRuleModel) protected readonly _rangeProtectionRuleModel: RangeProtectionRuleModel,\n        @Inject(WorksheetProtectionPointModel) protected readonly _worksheetProtectionPointRuleModel: WorksheetProtectionPointModel,\n        @Inject(IAuthzIoService) protected readonly _authzIoService: IAuthzIoService\n    ) {\n        super();\n        this.rangeRuleChangedAfterAuth$ = this._rangeProtectionRuleModel.ruleRefresh$;\n        this.sheetRuleChangedAfterAuth$ = this._worksheetProtectionRuleModel.ruleRefresh$;\n    }\n\n    /**\n     * Configures a specific permission point for a workbook.\n     * This function sets or updates a permission point for a workbook identified by `unitId`.\n     * It creates a new permission point if it does not already exist, and updates the point with the provided value.\n     * @param {string} unitId - The unique identifier of the workbook for which the permission is being set.\n     * @param {WorkbookPermissionPointConstructor} FPointClass - The constructor function for creating a permission point instance. Other point constructors can See the [permission-point documentation](https://github.com/dream-num/univer/tree/dev/packages/sheets/src/services/permission/permission-point) for more details.\n     * @param {boolean} value - The boolean value to determine whether the permission point is enabled or disabled.\n     *\n     * @example\n     * ```typescript\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const permission = workbook.getPermission();\n     * const unitId = workbook.getId();\n     * permission.setWorkbookPermissionPoint(unitId, permission.permissionPointsDefinition.WorkbookEditablePermission, false)\n     * ```\n     */\n    setWorkbookPermissionPoint(unitId: string, FPointClass: WorkbookPermissionPointConstructor, value: boolean): void {\n        const instance = new FPointClass(unitId);\n        const permissionPoint = this._permissionService.getPermissionPoint(instance.id);\n        if (!permissionPoint) {\n            this._permissionService.addPermissionPoint(instance);\n        }\n        this._permissionService.updatePermissionPoint(instance.id, value);\n    }\n\n    /**\n     * This function is used to set whether the workbook can be edited\n     * @param {string} unitId - The unique identifier of the workbook for which the permission is being set.\n     * @param {boolean} value - A value that controls whether the workbook can be edited\n     *\n     * @example\n     * ```typescript\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const permission = workbook.getPermission();\n     * const unitId = workbook.getId();\n     * permission.setWorkbookEditPermission(unitId, false);\n     * ```\n     */\n    setWorkbookEditPermission(unitId: string, value: boolean): void {\n        this.setWorkbookPermissionPoint(unitId, WorkbookEditablePermission, value);\n    }\n\n    /**\n     * This function is used to add a base permission for a worksheet.\n     * Note that after adding, only the background mask of the permission module will be rendered. If you want to modify the function permissions,\n     * you need to modify the permission points with the permissionId returned by this function.\n     * @param {string} unitId - The unique identifier of the workbook for which the permission is being set.\n     * @param {string} subUnitId - The unique identifier of the worksheet for which the permission is being set.\n     * @returns {Promise<string | undefined>} - Returns the `permissionId` if the permission is successfully added. If the operation fails or no result is returned, it resolves to `undefined`.\n     *\n     * @example\n     * ```typescript\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const permission = workbook.getPermission();\n     * const unitId = workbook.getId();\n     * const worksheet = workbook.getActiveSheet();\n     * const subUnitId = worksheet.getSheetId();\n     * // Note that there will be no permission changes after this step is completed. It only returns an ID for subsequent permission changes.\n     * // For details, please see the example of the **`setWorksheetPermissionPoint`** API.\n     * const permissionId = await permission.addWorksheetBasePermission(unitId, subUnitId)\n     * // Can still edit and read it.\n     * console.log('debugger', permissionId)\n     * ```\n     */\n    async addWorksheetBasePermission(unitId: string, subUnitId: string): Promise<string | undefined> {\n        const hasRangeProtection = this._rangeProtectionRuleModel.getSubunitRuleList(unitId, subUnitId).length > 0;\n        if (hasRangeProtection) {\n            throw new Error('sheet protection cannot intersect with range protection');\n        }\n        const permissionId = await this._authzIoService.create({\n            objectType: UnitObject.Worksheet,\n            worksheetObject: {\n                collaborators: [],\n                unitID: unitId,\n                strategies: [],\n                name: '',\n                scope: undefined,\n            },\n        });\n        const res = this._commandService.syncExecuteCommand(AddWorksheetProtectionMutation.id, {\n            unitId,\n            subUnitId,\n            rule: {\n                permissionId,\n                unitType: UnitObject.Worksheet,\n                unitId,\n                subUnitId,\n            },\n        });\n        if (res) {\n            return permissionId;\n        }\n    }\n\n    /**\n     * Delete the entire table protection set for the worksheet and reset the point permissions of the worksheet to true\n     * @param {string} unitId - The unique identifier of the workbook for which the permission is being set.\n     * @param {string} subUnitId - The unique identifier of the worksheet for which the permission is being set.\n     *\n     * @example\n     * ```typescript\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const permission = workbook.getPermission();\n     * const unitId = workbook.getId();\n     * const worksheet = workbook.getActiveSheet();\n     * const subUnitId = worksheet.getSheetId();\n     * permission.removeWorksheetPermission(unitId, subUnitId);\n     * ```\n     */\n    removeWorksheetPermission(unitId: string, subUnitId: string): void {\n        this._commandService.syncExecuteCommand(DeleteWorksheetProtectionMutation.id, {\n            unitId,\n            subUnitId,\n        });\n\n        [...getAllWorksheetPermissionPoint(), ...getAllWorksheetPermissionPointByPointPanel()].forEach((F) => {\n            const instance = new F(unitId, subUnitId);\n            this._permissionService.updatePermissionPoint(instance.id, true);\n        });\n        this._worksheetProtectionPointRuleModel.deleteRule(unitId, subUnitId);\n    }\n\n    /**\n     * Sets the worksheet permission point by updating or adding the permission point for the worksheet.\n     * If the worksheet doesn't have a base permission, it creates one to used render\n     * @param {string} unitId - The unique identifier of the workbook.\n     * @param {string} subUnitId - The unique identifier of the worksheet.\n     * @param {WorkSheetPermissionPointConstructor} FPointClass - The constructor for the permission point class.\n     *    See the [permission-point documentation](https://github.com/dream-num/univer/tree/dev/packages/sheets/src/services/permission/permission-point) for more details.\n     * @param {boolean} value - The new permission value to be set for the worksheet.\n     * @returns {Promise<string | undefined>} - Returns the `permissionId` if the permission point is successfully set or created. If no permission is set, it resolves to `undefined`.\n     *\n     * @example\n     * ```typescript\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const permission = workbook.getPermission();\n     * const unitId = workbook.getId();\n     * const worksheet = workbook.getActiveSheet();\n     * const subUnitId = worksheet.getSheetId();\n     * const permissionId = await permission.addWorksheetBasePermission(unitId, subUnitId)\n     * // After this line of code , the worksheet will no longer be editable\n     * permission.setWorksheetPermissionPoint(unitId, subUnitId, permission.permissionPointsDefinition.WorksheetEditPermission, false);\n     * ```\n     */\n    async setWorksheetPermissionPoint(unitId: string, subUnitId: string, FPointClass: WorkSheetPermissionPointConstructor, value: boolean): Promise<string | undefined> {\n        const hasBasePermission = this._worksheetProtectionRuleModel.getRule(unitId, subUnitId);\n        let permissionId;\n        const isBasePoint = FPointClass === WorksheetEditPermission || FPointClass === WorksheetViewPermission;\n        if (isBasePoint) {\n            if (!hasBasePermission) {\n                const hasRangeProtection = this._rangeProtectionRuleModel.getSubunitRuleList(unitId, subUnitId).length > 0;\n                if (hasRangeProtection) {\n                    throw new Error('sheet protection cannot intersect with range protection');\n                }\n                permissionId = await this.addWorksheetBasePermission(unitId, subUnitId);\n            } else {\n                permissionId = hasBasePermission.permissionId;\n            }\n        } else {\n            const rule = this._worksheetProtectionPointRuleModel.getRule(unitId, subUnitId);\n            if (!rule) {\n                permissionId = await this._authzIoService.create({\n                    objectType: UnitObject.Worksheet,\n                    worksheetObject: {\n                        collaborators: [],\n                        unitID: unitId,\n                        strategies: [],\n                        name: '',\n                        scope: undefined,\n                    },\n                });\n                this._commandService.syncExecuteCommand<ISetWorksheetPermissionPointsMutationParams>(SetWorksheetPermissionPointsMutation.id, { unitId, subUnitId, rule: { unitId, subUnitId, permissionId } });\n            } else {\n                permissionId = rule.permissionId;\n            }\n        }\n\n        const instance = new FPointClass(unitId, subUnitId);\n        const permissionPoint = this._permissionService.getPermissionPoint(instance.id);\n        if (!permissionPoint) {\n            this._permissionService.addPermissionPoint(instance);\n        }\n        this._permissionService.updatePermissionPoint(instance.id, value);\n\n        return permissionId;\n    }\n\n    /**\n     * Adds a range protection to the worksheet.\n     * Note that after adding, only the background mask of the permission module will be rendered. If you want to modify the function permissions,\n     * you need to modify the permission points with the permissionId returned by this function.\n     * @param {string} unitId - The unique identifier of the workbook.\n     * @param {string} subUnitId - The unique identifier of the worksheet.\n     * @param {FRange[]} ranges - The ranges to be protected.\n     * @returns {Promise<{ permissionId: string, ruleId: string } | undefined>} - Returns an object containing the `permissionId` and `ruleId` if the range protection is successfully added. If the operation fails or no result is returned, it resolves to `undefined`. permissionId is used to stitch permission point ID\uFF0CruleId is used to store permission rules\n     *\n     * @example\n     * ```typescript\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const permission = workbook.getPermission();\n     * const unitId = workbook.getId();\n     * const worksheet = workbook.getActiveSheet();\n     * const subUnitId = worksheet.getSheetId();\n     * const range = worksheet.getRange('A1:B2');\n     * const ranges = [];\n     * ranges.push(range);\n     * // Note that there will be no permission changes after this step is completed. It only returns an ID for subsequent permission changes.\n     * // For details, please see the example of the **`setRangeProtectionPermissionPoint`** API.\n     * const res = await permission.addRangeBaseProtection(unitId, subUnitId, ranges);\n     * const {permissionId, ruleId} = res;\n     * console.log('debugger', permissionId, ruleId);\n     * ```\n     */\n    async addRangeBaseProtection(unitId: string, subUnitId: string, ranges: FRange[]): Promise<{\n        permissionId: string;\n        ruleId: string;\n    } | undefined> {\n        // The permission ID generation here only provides the most basic permission type. If need collaborators later, need to expand this\n        const permissionId = await this._authzIoService.create({\n            objectType: UnitObject.SelectRange,\n            selectRangeObject: {\n                collaborators: [],\n                unitID: unitId,\n                name: '',\n                scope: undefined,\n            },\n        });\n        const ruleId = `ruleId_${generateRandomId(6)}`;\n        const worksheetProtection = this._worksheetProtectionRuleModel.getRule(unitId, subUnitId);\n        if (worksheetProtection) {\n            throw new Error('sheet protection cannot intersect with range protection');\n        }\n        const subunitRuleList = this._rangeProtectionRuleModel.getSubunitRuleList(unitId, subUnitId);\n        const overlap = subunitRuleList.some((rule) => {\n            return rule.ranges.some((range) => {\n                return ranges.some((newRange) => {\n                    return Rectangle.intersects(newRange.getRange(), range);\n                });\n            });\n        });\n        if (overlap) {\n            throw new Error('range protection cannot intersect');\n        }\n        const res = this._commandService.syncExecuteCommand(AddRangeProtectionMutation.id, {\n            unitId,\n            subUnitId,\n            rules: [{\n                permissionId,\n                unitType: UnitObject.SelectRange,\n                unitId,\n                subUnitId,\n                ranges: ranges.map((range) => range.getRange()),\n                id: ruleId,\n            }],\n        });\n        if (res) {\n            return {\n                permissionId,\n                ruleId,\n            };\n        }\n    }\n\n    /**\n     * Removes the range protection from the worksheet.\n     * @param {string} unitId - The unique identifier of the workbook.\n     * @param {string} subUnitId - The unique identifier of the worksheet.\n     * @param {string[]} ruleIds - The rule IDs of the range protection to be removed.\n     *\n     * @example\n     * ```typescript\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const permission = workbook.getPermission();\n     * const unitId = workbook.getId();\n     * const worksheet = workbook.getActiveSheet();\n     * const subUnitId = worksheet.getSheetId();\n     * const range = worksheet.getRange('A1:B2');\n     * const ranges = [];\n     * ranges.push(range);\n     * const res = await permission.addRangeBaseProtection(unitId, subUnitId, ranges);\n     * const ruleId = res.ruleId;\n     * permission.removeRangeProtection(unitId, subUnitId, [ruleId]);\n     * ```\n     */\n    removeRangeProtection(unitId: string, subUnitId: string, ruleIds: string[]): void {\n        const res = this._commandService.syncExecuteCommand(DeleteRangeProtectionMutation.id, {\n            unitId,\n            subUnitId,\n            ruleIds,\n        });\n        if (res) {\n            const ruleList = this._rangeProtectionRuleModel.getSubunitRuleList(unitId, subUnitId);\n            if (ruleList.length === 0) {\n                // because this rule is attached to other protection, if other protection is deleted, this rule should be deleted.\n                this._worksheetProtectionPointRuleModel.deleteRule(unitId, subUnitId);\n                [...getAllWorksheetPermissionPointByPointPanel()].forEach((F) => {\n                    const instance = new F(unitId, subUnitId);\n                    this._permissionService.updatePermissionPoint(instance.id, instance.value);\n                });\n            }\n        }\n    }\n\n    /**\n     * Modify the permission points of a custom area\n     * @param {string} unitId - The unique identifier of the workbook.\n     * @param {string} subUnitId - The unique identifier of the worksheet within the workbook.\n     * @param {string} permissionId - The unique identifier of the permission that controls access to the range.\n     * @param {RangePermissionPointConstructor} FPointClass - The constructor for the range permission point class.\n     *    See the [permission-point documentation](https://github.com/dream-num/univer/tree/dev/packages/sheets/src/services/permission/permission-point) for more details.\n     * @param {boolean} value - The new permission value to be set for the range (e.g., true for allowing access, false for restricting access).\n     *\n     * @example\n     * ```typescript\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const permission = workbook.getPermission();\n     * const unitId = workbook.getId();\n     * const worksheet = workbook.getActiveSheet();\n     * const subUnitId = worksheet.getSheetId();\n     * const range = worksheet.getRange('A1:B2');\n     * const ranges = [];\n     * ranges.push(range);\n     * // Note that there will be no permission changes after this step is completed. It only returns an ID for subsequent permission changes.\n     * // For details, please see the example of the **`setRangeProtectionPermissionPoint`** API.\n     * const res = await permission.addRangeBaseProtection(unitId, subUnitId, ranges);\n     * const {permissionId, ruleId} = res;\n     * // After passing the following line of code, the range set above will become uneditable\n     * permission.setRangeProtectionPermissionPoint(unitId,subUnitId,permissionId, permission.permissionPointsDefinition.RangeProtectionPermissionEditPoint, false);\n     * ```\n     */\n    setRangeProtectionPermissionPoint(unitId: string, subUnitId: string, permissionId: string, FPointClass: RangePermissionPointConstructor, value: boolean): void {\n        const instance = new FPointClass(unitId, subUnitId, permissionId);\n        const permissionPoint = this._permissionService.getPermissionPoint(instance.id);\n        if (!permissionPoint) {\n            this._permissionService.addPermissionPoint(instance);\n        }\n        this._permissionService.updatePermissionPoint(instance.id, value);\n    }\n\n    /**\n     * Sets the ranges for range protection in a worksheet.\n     *\n     * This method finds the rule by unitId, subUnitId, and ruleId, and updates the rule with the provided ranges.\n     * It checks for overlaps with existing ranges in the same subunit and shows an error message if any overlap is detected.\n     * If no overlap is found, it executes the command to update the range protection with the new ranges.\n     * @param {string} unitId - The unique identifier of the workbook.\n     * @param {string} subUnitId - The unique identifier of the worksheet within the workbook.\n     * @param {string} ruleId - The ruleId of the range protection rule that is being updated.\n     * @param {FRange[]} ranges - The array of new ranges to be set for the range protection rule.\n     *\n     * @example\n     * ```typescript\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const permission = workbook.getPermission();\n     * const unitId = workbook.getId();\n     * const worksheet = workbook.getActiveSheet();\n     * const subUnitId = worksheet.getSheetId();\n     * const range = worksheet.getRange('A1:B2');\n     * const ranges = [];\n     * ranges.push(range);\n     * const res = await permission.addRangeBaseProtection(unitId, subUnitId, ranges);\n     * const {permissionId, ruleId} = res;\n     * const newRange = worksheet.getRange('C1:D2');\n     * permission.setRangeProtectionRanges(unitId, subUnitId, ruleId, [newRange]);\n     * ```\n     */\n    setRangeProtectionRanges(unitId: string, subUnitId: string, ruleId: string, ranges: FRange[]): void {\n        const rule = this._rangeProtectionRuleModel.getRule(unitId, subUnitId, ruleId);\n        if (rule) {\n            const subunitRuleList = this._rangeProtectionRuleModel.getSubunitRuleList(unitId, subUnitId).filter((r) => r.id !== ruleId);\n            const overlap = subunitRuleList.some((rule) => {\n                return rule.ranges.some((range) => {\n                    return ranges.some((newRange) => {\n                        return Rectangle.intersects(newRange.getRange(), range);\n                    });\n                });\n            });\n            if (overlap) {\n                throw new Error('range protection cannot intersect');\n            }\n            this._commandService.syncExecuteCommand(SetRangeProtectionMutation.id, {\n                unitId,\n                subUnitId,\n                ruleId,\n                rule: {\n                    ...rule,\n                    ranges: ranges.map((range) => range.getRange()),\n                },\n            });\n        }\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CellValue, ICellData, IObjectMatrixPrimitiveType, IRange, IRangeWithCoord, Nullable, Worksheet } from '@univerjs/core';\nimport {\n    HorizontalAlign,\n    isCellV,\n    isFormulaString,\n    isICellData,\n    ObjectMatrix,\n    RANGE_TYPE,\n    Tools,\n    VerticalAlign,\n} from '@univerjs/core';\n\nexport type FDefaultAlignment = 'general';\nexport type FHorizontalAlignment = 'left' | 'center' | 'normal';\nexport type FVerticalAlignment = 'top' | 'middle' | 'bottom';\n\n/**\n * Transform the Facade API horizontal alignment to the Univer Core horizontal alignment.\n * @param {FHorizontalAlignment} value - The Facade API horizontal alignment.\n * @returns {HorizontalAlign} The Univer Core horizontal alignment.\n */\nexport function transformFacadeHorizontalAlignment(value: FHorizontalAlignment): HorizontalAlign {\n    switch (value) {\n        case 'left':\n            return HorizontalAlign.LEFT;\n        case 'center':\n            return HorizontalAlign.CENTER;\n        case 'normal':\n            return HorizontalAlign.RIGHT;\n        default:\n            throw new Error(`Invalid horizontal alignment: ${value}`);\n    }\n}\n\n/**\n * Transform the Univer Core horizontal alignment to the Facade API horizontal alignment.\n * @param {HorizontalAlign} value - The Univer Core horizontal alignment.\n * @returns {FHorizontalAlignment} The Facade API horizontal alignment.\n */\nexport function transformCoreHorizontalAlignment(value: HorizontalAlign): FHorizontalAlignment | FDefaultAlignment {\n    switch (value) {\n        case HorizontalAlign.LEFT:\n            return 'left';\n        case HorizontalAlign.CENTER:\n            return 'center';\n        case HorizontalAlign.RIGHT:\n            return 'normal';\n        default:\n            return 'general';\n    }\n}\n\n/**\n * Transform the Facade API vertical alignment to the Univer Core vertical alignment.\n * @param {FVerticalAlignment} value - The Facade API vertical alignment.\n * @returns {VerticalAlign} The Univer Core vertical alignment.\n */\nexport function transformFacadeVerticalAlignment(value: FVerticalAlignment): VerticalAlign {\n    switch (value) {\n        case 'top':\n            return VerticalAlign.TOP;\n        case 'middle':\n            return VerticalAlign.MIDDLE;\n        case 'bottom':\n            return VerticalAlign.BOTTOM;\n        default:\n            throw new Error(`Invalid vertical alignment: ${value}`);\n    }\n}\n\n/**\n * Transform the Univer Core vertical alignment to the Facade API vertical alignment.\n * @param {VerticalAlign} value - The Univer Core vertical alignment.\n * @returns {FVerticalAlignment} The Facade API vertical alignment.\n */\nexport function transformCoreVerticalAlignment(value: VerticalAlign): FVerticalAlignment | FDefaultAlignment {\n    switch (value) {\n        case VerticalAlign.TOP:\n            return 'top';\n        case VerticalAlign.MIDDLE:\n            return 'middle';\n        case VerticalAlign.BOTTOM:\n            return 'bottom';\n        default:\n            return 'general';\n    }\n}\n\n/**\n * Covert cell value to cell data.\n * @param {CellValue | ICellData} value - The cell value.\n * @returns {ICellData} The cell data.\n */\nexport function covertCellValue(value: CellValue | ICellData): ICellData {\n    if (isFormulaString(value)) {\n        return {\n            f: value as string,\n            v: null,\n            p: null,\n        };\n    }\n    if (isCellV(value)) {\n        return {\n            v: value as Nullable<CellValue>,\n            p: null,\n            f: null,\n        };\n    }\n    if (isICellData(value)) {\n        return value;\n    }\n\n    // maybe {}\n    return value as ICellData;\n}\n\n/**\n * Covert cell value array or matrix to cell data.\n * @param {CellValue[][] | IObjectMatrixPrimitiveType<CellValue> | ICellData[][] | IObjectMatrixPrimitiveType<ICellData>} value - The cell value array or matrix.\n * @param {IRange} range - The range.\n * @returns {IObjectMatrixPrimitiveType<ICellData>} The cell data matrix.\n */\nexport function covertCellValues(\n    value:\n        | CellValue[][]\n        | IObjectMatrixPrimitiveType<CellValue>\n        | ICellData[][]\n        | IObjectMatrixPrimitiveType<ICellData>,\n    range: IRange\n): IObjectMatrixPrimitiveType<ICellData> {\n    const cellValue = new ObjectMatrix<ICellData>();\n    const { startRow, startColumn, endRow, endColumn } = range;\n\n    if (Tools.isArray(value)) {\n        for (let r = 0; r <= endRow - startRow; r++) {\n            for (let c = 0; c <= endColumn - startColumn; c++) {\n                cellValue.setValue(r + startRow, c + startColumn, covertCellValue(value[r][c]));\n            }\n        }\n    } else {\n        const valueMatrix = new ObjectMatrix(value as IObjectMatrixPrimitiveType<ICellData | CellValue>);\n        valueMatrix.forValue((r, c, v) => {\n            cellValue.setValue(r, c, covertCellValue(v));\n        });\n    }\n\n    return cellValue.getMatrix();\n}\n\n/**\n * Judge whether the range is merged.\n * @param {IRangeWithCoord} mergeInfo - The merge info.\n * @param {IRange} range - The range.\n * @returns {boolean} Whether the range is merged.\n */\nexport function isCellMerged(mergeInfo: IRangeWithCoord, range: IRange): boolean {\n    if (!isSingleCell(mergeInfo, range)) {\n        return false;\n    }\n    return range.startColumn !== range.endColumn || range.startRow !== range.endRow;\n}\n\n/**\n * Judge whether the range is single cell.\n * @param {IRangeWithCoord} mergeInfo - The merge info.\n * @param {IRange} range - The range.\n * @returns {boolean} Whether the range is single cell.\n */\nexport function isSingleCell(mergeInfo: IRangeWithCoord, range: IRange): boolean {\n    return mergeInfo.startColumn === range.startColumn\n        && mergeInfo.endColumn === range.endColumn\n        && mergeInfo.startRow === range.startRow\n        && mergeInfo.endRow === range.endRow;\n}\n\n/**\n * Covert the range to row range.\n * @param {IRange} range - The range.\n * @param {Worksheet} worksheet - The worksheet.\n * @returns {IRange} The row range.\n */\nexport function covertToRowRange(range: IRange, worksheet: Worksheet): IRange {\n    return {\n        startRow: range.startRow,\n        endRow: range.endRow,\n        startColumn: 0,\n        endColumn: worksheet.getColumnCount() - 1,\n        rangeType: RANGE_TYPE.ROW,\n    };\n}\n\n/**\n * Covert the range to column range.\n * @param {IRange} range - The range.\n * @param {Worksheet} worksheet - The worksheet.\n * @returns {IRange} The column range.\n */\nexport function covertToColRange(range: IRange, worksheet: Worksheet): IRange {\n    return {\n        startRow: 0,\n        endRow: worksheet.getRowCount() - 1,\n        startColumn: range.startColumn,\n        endColumn: range.endColumn,\n        rangeType: RANGE_TYPE.COLUMN,\n    };\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { AbsoluteRefType, BorderStyleTypes, BorderType, CellValue, CustomData, ICellData, IColorStyle, IDocumentData, IObjectMatrixPrimitiveType, IRange, IStyleData, ITextDecoration, Nullable, Workbook, Worksheet } from '@univerjs/core';\nimport type { ISetBorderBasicCommandParams, ISetHorizontalTextAlignCommandParams, ISetRangeValuesCommandParams, ISetSelectionsOperationParams, ISetStyleCommandParams, ISetTextRotationCommandParams, ISetTextWrapCommandParams, ISetVerticalTextAlignCommandParams, IStyleTypeValue, SplitDelimiterEnum } from '@univerjs/sheets';\nimport type { IFacadeClearOptions } from './f-worksheet';\nimport type { FHorizontalAlignment, FVerticalAlignment } from './utils';\nimport { BooleanNumber, DEFAULT_STYLES, Dimension, ICommandService, Inject, Injector, isNullCell, Rectangle, RichTextValue, TextStyleValue, WrapStrategy } from '@univerjs/core';\nimport { FBaseInitialable } from '@univerjs/core/facade';\nimport { FormulaDataModel, serializeRange, serializeRangeWithSheet } from '@univerjs/engine-formula';\nimport { addMergeCellsUtil, ClearSelectionAllCommand, ClearSelectionContentCommand, ClearSelectionFormatCommand, DeleteRangeMoveLeftCommand, DeleteRangeMoveUpCommand, DeleteWorksheetRangeThemeStyleCommand, getAddMergeMutationRangeByType, getPrimaryForRange, InsertRangeMoveDownCommand, InsertRangeMoveRightCommand, RemoveWorksheetMergeCommand, SetBorderBasicCommand, SetHorizontalTextAlignCommand, SetRangeValuesCommand, SetSelectionsOperation, SetStyleCommand, SetTextRotationCommand, SetTextWrapCommand, SetVerticalTextAlignCommand, SetWorksheetRangeThemeStyleCommand, SheetRangeThemeService, SplitTextToColumnsCommand } from '@univerjs/sheets';\nimport { FWorkbook } from './f-workbook';\nimport { covertCellValue, covertCellValues, transformCoreHorizontalAlignment, transformCoreVerticalAlignment, transformFacadeHorizontalAlignment, transformFacadeVerticalAlignment } from './utils';\n\nexport type FontLine = 'none' | 'underline' | 'line-through';\nexport type FontStyle = 'normal' | 'italic';\nexport type FontWeight = 'normal' | 'bold';\n\n/**\n * Represents a range of cells in a sheet. You can call methods on this Facade API object\n * to read contents or manipulate the range.\n *\n * @hideconstructor\n */\nexport class FRange extends FBaseInitialable {\n    constructor(\n        protected readonly _workbook: Workbook,\n        protected readonly _worksheet: Worksheet,\n        protected readonly _range: IRange,\n        @Inject(Injector) protected override readonly _injector: Injector,\n        @ICommandService protected readonly _commandService: ICommandService,\n        @Inject(FormulaDataModel) protected readonly _formulaDataModel: FormulaDataModel\n    ) {\n        super(_injector);\n    }\n\n    /**\n     * Get the unit ID of the current workbook\n     * @returns {string} The unit ID of the workbook\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getUnitId());\n     * ```\n     */\n    getUnitId(): string {\n        return this._workbook.getUnitId();\n    }\n\n    /**\n     * Gets the name of the worksheet\n     * @returns {string} The name of the worksheet\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getSheetName());\n     * ```\n     */\n    getSheetName(): string {\n        return this._worksheet.getName();\n    }\n\n    /**\n     * Gets the ID of the worksheet\n     * @returns {string} The ID of the worksheet\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getSheetId());\n     * ```\n     */\n    getSheetId(): string {\n        return this._worksheet.getSheetId();\n    }\n\n    /**\n     * Gets the area where the statement is applied\n     * @returns {IRange} The area where the statement is applied\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * const range = fRange.getRange();\n     * const { startRow, startColumn, endRow, endColumn } = range;\n     * console.log(range);\n     * ```\n     */\n    getRange(): IRange {\n        return this._range;\n    }\n\n    /**\n     * Gets the starting row index of the range. index starts at 0.\n     * @returns {number} The starting row index of the range.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getRow()); // 0\n     * ```\n     */\n    getRow(): number {\n        return this._range.startRow;\n    }\n\n    /**\n     * Gets the ending row index of the range. index starts at 0.\n     * @returns {number} The ending row index of the range.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getLastRow()); // 1\n     * ```\n     */\n    getLastRow(): number {\n        return this._range.endRow;\n    }\n\n    /**\n     * Gets the starting column index of the range. index starts at 0.\n     * @returns {number} The starting column index of the range.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getColumn()); // 0\n     * ```\n     */\n    getColumn(): number {\n        return this._range.startColumn;\n    }\n\n    /**\n     * Gets the ending column index of the range. index starts at 0.\n     * @returns {number} The ending column index of the range.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getLastColumn()); // 1\n     * ```\n     */\n    getLastColumn(): number {\n        return this._range.endColumn;\n    }\n\n    /**\n     * Gets the width of the applied area\n     * @returns {number} The width of the area\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getWidth());\n     * ```\n     */\n    getWidth(): number {\n        return this._range.endColumn - this._range.startColumn + 1;\n    }\n\n    /**\n     * Gets the height of the applied area\n     * @returns {number} The height of the area\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getHeight());\n     * ```\n     */\n    getHeight(): number {\n        return this._range.endRow - this._range.startRow + 1;\n    }\n\n    /**\n     * Return range whether this range is merged\n     * @returns {boolean} if true is merged\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.isMerged());\n     * // merge cells A1:B2\n     * fRange.merge();\n     * console.log(fRange.isMerged());\n     * ```\n     */\n    isMerged(): boolean {\n        const { startColumn, startRow, endColumn, endRow } = this._range;\n        const mergedCells = this._worksheet.getMergedCellRange(startRow, startColumn, endRow, endColumn);\n        return mergedCells.some((range) => Rectangle.equals(range, this._range));\n    }\n\n    /**\n     * Return first cell style data in this range\n     * @returns {IStyleData | null} The cell style data\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getCellStyleData());\n     * ```\n     */\n    getCellStyleData(): IStyleData | null {\n        const cell = this.getCellData();\n        const styles = this._workbook.getStyles();\n        if (cell && styles) {\n            return styles.getStyleByCell(cell) ?? null;\n        }\n\n        return null;\n    }\n\n    /**\n     * Return first cell style in this range\n     * @returns {TextStyleValue | null} The cell style\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getCellStyle());\n     * ```\n     */\n    getCellStyle(): TextStyleValue | null {\n        const data = this.getCellStyleData();\n        return data ? TextStyleValue.create(data) : null;\n    }\n\n    /**\n     * Returns the cell styles for the cells in the range.\n     * @returns {Array<Array<TextStyleValue | null>>} A two-dimensional array of cell styles.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getCellStyles());\n     * ```\n     */\n    getCellStyles(): Array<Array<TextStyleValue | null>> {\n        const cells = this.getCellDatas();\n        const styles = this._workbook.getStyles();\n        return cells.map((row) => row.map((cell) => {\n            if (!cell) return null;\n            const style = styles.getStyleByCell(cell);\n            return style ? TextStyleValue.create(style) : null;\n        }));\n    }\n\n    /**\n     * Return first cell value in this range\n     * @returns {CellValue | null} The cell value\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getValue());\n     *\n     * // set the first cell value to 123\n     * fRange.setValueForCell(123);\n     * console.log(fRange.getValue()); // 123\n     * ```\n     */\n    getValue(): CellValue | null;\n    /**\n     * Return first cell value in this range\n     * @param {boolean} includeRichText Should the returns of this func to include rich text\n     * @returns {CellValue | RichTextValue | null} The cell value\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getValue(true));\n     *\n     * // set the first cell value to 123\n     * const richText = univerAPI.newRichText({ body: { dataStream: 'Hello World\\r\\n' } })\n     *   .setStyle(0, 1, { bl: 1, cl: { rgb: '#c81e1e' } })\n     *   .setStyle(6, 7, { bl: 1, cl: { rgb: '#c81e1e' } });\n     * fRange.setRichTextValueForCell(richText);\n     * console.log(fRange.getValue(true).toPlainText()); // Hello World\n     * ```\n     */\n    getValue(includeRichText: true): Nullable<CellValue | RichTextValue>;\n    getValue(includeRichText?: boolean): Nullable<CellValue | RichTextValue> {\n        if (includeRichText) {\n            return this.getValueAndRichTextValue();\n        }\n\n        return this._worksheet.getCell(this._range.startRow, this._range.startColumn)?.v ?? null;\n    }\n\n    /**\n     * Returns the raw value of the top-left cell in the range. Empty cells return `null`.\n     * @returns {Nullable<CellValue>} The raw value of the cell. Returns `null` if the cell is empty.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setValueForCell({\n     *   v: 0.2,\n     *   s: {\n     *     n: {\n     *       pattern: '0%',\n     *     },\n     *   },\n     * });\n     * console.log(fRange.getRawValue()); // 0.2\n     * ```\n     */\n    getRawValue(): Nullable<CellValue> {\n        const cell = this._worksheet.getCellMatrix().getValue(this._range.startRow, this._range.startColumn);\n        if (cell?.p && cell.p.body?.dataStream) return cell.p.body.dataStream;\n        if (cell?.v) return cell.v;\n        return null;\n    }\n\n    /**\n     * Returns the displayed value of the top-left cell in the range. The value is a String. Empty cells return an empty string.\n     * @returns {string} The displayed value of the cell. Returns an empty string if the cell is empty.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setValueForCell({\n     *   v: 0.2,\n     *   s: {\n     *     n: {\n     *       pattern: '0%',\n     *     },\n     *   },\n     * });\n     * console.log(fRange.getDisplayValue()); // 20%\n     * ```\n     */\n    getDisplayValue(): string {\n        const cell = this._worksheet.getCell(this._range.startRow, this._range.startColumn);\n        if (cell?.p && cell.p.body?.dataStream) return cell.p.body.dataStream;\n        if (cell?.v) return String(cell.v);\n        return '';\n    }\n\n    /**\n     * Returns the cell values for the cells in the range.\n     * @returns {Nullable<CellValue>[][]} A two-dimensional array of cell values.\n     * @example\n     * ```ts\n     * // Get plain values\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getValues());\n     * ```\n     */\n    getValues(): Nullable<CellValue>[][];\n    /**\n     * Returns the cell values for the cells in the range.\n     * @param {boolean} includeRichText Should the returns of this func to include rich text\n     * @returns {Nullable<RichTextValue | CellValue>[][]} A two-dimensional array of cell values.\n     * @example\n     * ```ts\n     * // Get values with rich text if available\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getValues(true));\n     * ```\n     */\n    getValues(includeRichText: true): (Nullable<RichTextValue | CellValue>)[][];\n    getValues(includeRichText?: true): (Nullable<RichTextValue | CellValue>)[][] {\n        if (includeRichText) {\n            return this.getValueAndRichTextValues();\n        }\n\n        const { startRow, endRow, startColumn, endColumn } = this._range;\n        const range: Array<Array<Nullable<CellValue>>> = [];\n\n        for (let r = startRow; r <= endRow; r++) {\n            const row: Array<Nullable<CellValue>> = [];\n\n            for (let c = startColumn; c <= endColumn; c++) {\n                row.push(this._worksheet.getCell(r, c)?.v ?? null);\n            }\n\n            range.push(row);\n        }\n        return range;\n    }\n\n    /**\n     * Returns a two-dimensional array of the range raw values. Empty cells return `null`.\n     * @returns {Array<Array<Nullable<CellValue>>>} The raw value of the cell. Returns `null` if the cell is empty.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setValues([\n     *   [\n     *     {\n     *       v: 0.2,\n     *       s: {\n     *         n: {\n     *           pattern: '0%',\n     *         },\n     *       },\n     *     },\n     *     {\n     *       v: 45658,\n     *       s: {\n     *         n: {\n     *           pattern: 'yyyy-mm-dd',\n     *         },\n     *       },\n     *     }\n     *   ],\n     *   [\n     *     {\n     *       v: 1234.567,\n     *       s: {\n     *         n: {\n     *           pattern: '#,##0.00',\n     *         }\n     *       }\n     *     },\n     *     null,\n     *   ],\n     * ]);\n     * console.log(fRange.getRawValues()); // [[0.2, 45658], [1234.567, null]]\n     * ```\n     */\n    getRawValues(): Array<Array<Nullable<CellValue>>> {\n        const cellMatrix = this._worksheet.getCellMatrix();\n        const { startRow, endRow, startColumn, endColumn } = this._range;\n        const values: Array<Array<Nullable<CellValue>>> = [];\n\n        for (let r = startRow; r <= endRow; r++) {\n            const row: Array<Nullable<CellValue>> = [];\n\n            for (let c = startColumn; c <= endColumn; c++) {\n                const cell = cellMatrix.getValue(r, c);\n                if (cell?.p && cell.p.body?.dataStream) {\n                    row.push(cell.p.body.dataStream);\n                } else if (cell?.v) {\n                    row.push(cell.v);\n                } else {\n                    row.push(null);\n                }\n            }\n\n            values.push(row);\n        }\n\n        return values;\n    }\n\n    /**\n     * Returns a two-dimensional array of the range displayed values. Empty cells return an empty string.\n     * @returns {string[][]} A two-dimensional array of values.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setValues([\n     *   [\n     *     {\n     *       v: 0.2,\n     *       s: {\n     *         n: {\n     *           pattern: '0%',\n     *         },\n     *       },\n     *     },\n     *     {\n     *       v: 45658,\n     *       s: {\n     *         n: {\n     *           pattern: 'yyyy-mm-dd',\n     *         },\n     *       },\n     *     }\n     *   ],\n     *   [\n     *     {\n     *       v: 1234.567,\n     *       s: {\n     *         n: {\n     *           pattern: '#,##0.00',\n     *         }\n     *       }\n     *     },\n     *     null,\n     *   ],\n     * ]);\n     * console.log(fRange.getDisplayValues()); // [['20%', '2025-01-01'], ['1,234.57', '']]\n     * ```\n     */\n    getDisplayValues(): string[][] {\n        const { startRow, endRow, startColumn, endColumn } = this._range;\n        const values: string[][] = [];\n\n        for (let r = startRow; r <= endRow; r++) {\n            const row: string[] = [];\n\n            for (let c = startColumn; c <= endColumn; c++) {\n                const cell = this._worksheet.getCell(r, c);\n\n                if (cell?.p && cell.p.body?.dataStream) {\n                    row.push(cell.p.body.dataStream);\n                } else if (cell?.v) {\n                    row.push(String(cell.v));\n                } else {\n                    row.push('');\n                }\n            }\n\n            values.push(row);\n        }\n\n        return values;\n    }\n\n    /**\n     * Return first cell model data in this range\n     * @returns {ICellData | null} The cell model data\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getCellData());\n     * ```\n     */\n    getCellData(): ICellData | null {\n        return this._worksheet.getCell(this._range.startRow, this._range.startColumn) ?? null;\n    }\n\n    /**\n     * Alias for getCellDataGrid.\n     * @returns {Nullable<ICellData>[][]} A two-dimensional array of cell data.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getCellDatas());\n     * ```\n     */\n    getCellDatas(): Nullable<ICellData>[][] {\n        return this.getCellDataGrid();\n    }\n\n    /**\n     * Returns the cell data for the cells in the range.\n     * @returns {Nullable<ICellData>[][]} A two-dimensional array of cell data.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getCellDataGrid());\n     * ```\n     */\n    getCellDataGrid(): Nullable<ICellData>[][] {\n        const { startRow, endRow, startColumn, endColumn } = this._range;\n        const range: Nullable<ICellData>[][] = [];\n\n        for (let r = startRow; r <= endRow; r++) {\n            const row: Nullable<ICellData>[] = [];\n            for (let c = startColumn; c <= endColumn; c++) {\n                row.push(this._worksheet.getCellRaw(r, c));\n            }\n            range.push(row);\n        }\n        return range;\n    }\n\n    /**\n     * Returns the rich text value for the cell at the start of this range.\n     * @returns {Nullable<RichTextValue>} The rich text value\n     * @internal\n     * @beta\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getRichTextValue());\n     * ```\n     */\n    private getRichTextValue(): Nullable<RichTextValue> {\n        const data = this.getCellData();\n        if (data?.p) {\n            return new RichTextValue(data.p);\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns the rich text value for the cells in the range.\n     * @returns {Nullable<RichTextValue>[][]} A two-dimensional array of RichTextValue objects.\n     * @internal\n     * @beta\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getRichTextValues());\n     * ```\n     */\n    private getRichTextValues(): Nullable<RichTextValue>[][] {\n        const dataGrid = this.getCellDataGrid();\n        return dataGrid.map((row) => row.map((data) => data?.p ? new RichTextValue(data.p) : null));\n    }\n\n    /**\n     * Returns the value and rich text value for the cell at the start of this range.\n     * @returns {Nullable<CellValue | RichTextValue>} The value and rich text value\n     * @internal\n     * @beta\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getValueAndRichTextValue());\n     * ```\n     */\n    private getValueAndRichTextValue(): Nullable<CellValue | RichTextValue> {\n        const cell = this.getCellData();\n        return cell?.p ? new RichTextValue(cell.p) : cell?.v;\n    }\n\n    /**\n     * Returns the value and rich text value for the cells in the range.\n     * @returns {Nullable<CellValue | RichTextValue>[][]} A two-dimensional array of value and rich text value\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getValueAndRichTextValues());\n     * ```\n     */\n    getValueAndRichTextValues(): Nullable<CellValue | RichTextValue>[][] {\n        const dataGrid = this.getCellDatas();\n        return dataGrid.map((row) => row.map((data) => data?.p ? new RichTextValue(data.p) : data?.v));\n    }\n\n    /**\n     * Returns the formula (A1 notation) of the top-left cell in the range, or an empty string if the cell is empty or doesn't contain a formula.\n     * @returns {string} The formula for the cell.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getFormula());\n     * ```\n     */\n    getFormula(): string {\n        return this._formulaDataModel.getFormulaStringByCell(\n            this._range.startRow,\n            this._range.startColumn,\n            this._worksheet.getSheetId(),\n            this._workbook.getUnitId()\n        ) ?? '';\n    }\n\n    /**\n     * Returns the formulas (A1 notation) for the cells in the range. Entries in the 2D array are empty strings for cells with no formula.\n     * @returns {string[][]} A two-dimensional array of formulas in string format.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getFormulas());\n     * ```\n     */\n    getFormulas(): string[][] {\n        const formulas: string[][] = [];\n\n        const { startRow, endRow, startColumn, endColumn } = this._range;\n        const sheetId = this._worksheet.getSheetId();\n        const unitId = this._workbook.getUnitId();\n\n        for (let row = startRow; row <= endRow; row++) {\n            const rowFormulas: string[] = [];\n\n            for (let col = startColumn; col <= endColumn; col++) {\n                const formulaString = this._formulaDataModel.getFormulaStringByCell(row, col, sheetId, unitId);\n                rowFormulas.push(formulaString || '');\n            }\n\n            formulas.push(rowFormulas);\n        }\n\n        return formulas;\n    }\n\n    /**\n     * Gets whether text wrapping is enabled for top-left cell in the range.\n     * @returns {boolean} whether text wrapping is enabled for the cell.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getWrap());\n     * ```\n     */\n    getWrap(): boolean {\n        return this._worksheet.getRange(this._range).getWrap() === BooleanNumber.TRUE;\n    }\n\n    /**\n     * Gets whether text wrapping is enabled for cells in the range.\n     * @returns {boolean[][]} A two-dimensional array of whether text wrapping is enabled for each cell in the range.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getWraps());\n     */\n    getWraps(): boolean[][] {\n        const cells = this.getCellDatas();\n        const styles = this._workbook.getStyles();\n        return cells.map((row) => row.map((cell) => styles.getStyleByCell(cell)?.tb === WrapStrategy.WRAP));\n    }\n\n    /**\n     * Returns the text wrapping strategy for the top left cell of the range.\n     * @returns {WrapStrategy} The text wrapping strategy\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getWrapStrategy());\n     * ```\n     */\n    getWrapStrategy(): WrapStrategy {\n        return this._worksheet.getRange(this._range).getWrapStrategy();\n    }\n\n    /**\n     * Returns the horizontal alignment of the text (left/center/right) of the top-left cell in the range.\n     * @returns {string} The horizontal alignment of the text in the cell.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getHorizontalAlignment());\n     * ```\n     */\n    getHorizontalAlignment(): string {\n        const coreHorizontalAlignment = this._worksheet.getRange(this._range).getHorizontalAlignment();\n        return transformCoreHorizontalAlignment(coreHorizontalAlignment);\n    }\n\n    /**\n     * Returns the horizontal alignments of the cells in the range.\n     * @returns {string[][]} A two-dimensional array of horizontal alignments of text associated with cells in the range.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getHorizontalAlignments());\n     * ```\n     */\n    getHorizontalAlignments(): string[][] {\n        const coreHorizontalAlignments = this._worksheet.getRange(this._range).getHorizontalAlignments();\n        return coreHorizontalAlignments.map((row) => row.map((alignment) => transformCoreHorizontalAlignment(alignment)));\n    }\n\n    /**\n     * Returns the vertical alignment (top/middle/bottom) of the top-left cell in the range.\n     * @returns {string} The vertical alignment of the text in the cell.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getVerticalAlignment());\n     * ```\n     */\n    getVerticalAlignment(): string {\n        return transformCoreVerticalAlignment(this._worksheet.getRange(this._range).getVerticalAlignment());\n    }\n\n    /**\n     * Returns the vertical alignments of the cells in the range.\n     * @returns {string[][]} A two-dimensional array of vertical alignments of text associated with cells in the range.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getVerticalAlignments());\n     * ```\n     */\n    getVerticalAlignments(): string[][] {\n        const coreVerticalAlignments = this._worksheet.getRange(this._range).getVerticalAlignments();\n        return coreVerticalAlignments.map((row) => row.map((alignment) => transformCoreVerticalAlignment(alignment)));\n    }\n\n    /**\n     * Set custom meta data for first cell in current range.\n     * @param {CustomData} data The custom meta data\n     * @returns {FRange} This range, for chaining\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setCustomMetaData({ key: 'value' });\n     * console.log(fRange.getCustomMetaData());\n     * ```\n     */\n    setCustomMetaData(data: CustomData): FRange {\n        return this.setValue({\n            custom: data,\n        });\n    }\n\n    /**\n     * Set custom meta data for current range.\n     * @param {CustomData[][]} datas The custom meta data\n     * @returns {FRange} This range, for chaining\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setCustomMetaDatas([\n     *   [{ key: 'value' }, { key: 'value2' }],\n     *   [{ key: 'value3' }, { key: 'value4' }],\n     * ]);\n     * console.log(fRange.getCustomMetaDatas());\n     * ```\n     */\n    setCustomMetaDatas(datas: CustomData[][]): FRange {\n        return this.setValues(datas.map((row) => row.map((data) => ({ custom: data }))));\n    }\n\n    /**\n     * Returns the custom meta data for the cell at the start of this range.\n     * @returns {CustomData | null} The custom meta data\n     * @example\n     * ```\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getCustomMetaData());\n     * ```\n     */\n    getCustomMetaData(): CustomData | null {\n        const cell = this.getCellData();\n        return cell?.custom ?? null;\n    }\n\n    /**\n     * Returns the custom meta data for the cells in the range.\n     * @returns {CustomData[][]} A two-dimensional array of custom meta data\n     * @example\n     * ```\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getCustomMetaDatas());\n     * ```\n     */\n    getCustomMetaDatas(): Nullable<CustomData>[][] {\n        const dataGrid = this.getCellDataGrid();\n        return dataGrid.map((row) => row.map((data) => data?.custom ?? null));\n    }\n\n    /**\n     * Sets basic border properties for the current range.\n     * @param {BorderType} type The type of border to apply\n     * @param {BorderStyleTypes} style The border style\n     * @param {string} [color] Optional border color in CSS notation\n     * @returns {FRange} This range, for chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setBorder(univerAPI.Enum.BorderType.ALL, univerAPI.Enum.BorderStyleTypes.THIN, '#ff0000');\n     * ```\n     */\n    setBorder(type: BorderType, style: BorderStyleTypes, color?: string): FRange {\n        this._commandService.syncExecuteCommand(SetBorderBasicCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            ranges: [this._range],\n            value: {\n                type,\n                style,\n                color,\n            },\n        } as ISetBorderBasicCommandParams);\n        return this;\n    }\n\n    // #region editing\n\n    /**\n     * Returns the background color of the top-left cell in the range.\n     * @returns {string} The color code of the background.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getBackground());\n     * ```\n     */\n    getBackground(): string {\n        const style = this.getCellStyle();\n        return style?.background?.rgb ?? DEFAULT_STYLES.bg.rgb;\n    }\n\n    /**\n     * Returns the background colors of the cells in the range.\n     * @returns {string[][]} A two-dimensional array of color codes of the backgrounds.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getBackgrounds());\n     * ```\n     */\n    getBackgrounds(): string[][] {\n        const styles = this.getCellStyles();\n        return styles.map((row) => row.map((style) => style?.background?.rgb ?? DEFAULT_STYLES.bg.rgb));\n    }\n\n    /**\n     * Set background color for current range.\n     * @param {string} color The background color\n     * @returns {FRange} This range, for chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setBackgroundColor('red');\n     * ```\n     */\n    setBackgroundColor(color: string): FRange {\n        this._commandService.syncExecuteCommand(SetStyleCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: this._range,\n            style: {\n                type: 'bg',\n                value: {\n                    rgb: color,\n                },\n            },\n        } as ISetStyleCommandParams<IColorStyle>);\n        return this;\n    }\n\n    /**\n     * Set background color for current range.\n     * @param {string} color The background color\n     * @returns {FRange} This range, for chaining\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setBackground('red');\n     * ```\n     */\n    setBackground(color: string): FRange {\n        this.setBackgroundColor(color);\n        return this;\n    }\n\n    /**\n     * Set rotation for text in current range.\n     * @param {number} rotation - The rotation angle in degrees\n     * @returns This range, for chaining\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setTextRotation(45);\n     * ```\n     */\n    setTextRotation(rotation: number): FRange {\n        this._commandService.syncExecuteCommand(SetTextRotationCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: this._range,\n            value: rotation,\n        } as ISetTextRotationCommandParams);\n        return this;\n    }\n\n    /**\n     * Sets the value of the range.\n     * @param {CellValue | ICellData} value The value can be a number, string, boolean, or standard cell format. If it begins with `=`, it is interpreted as a formula. The value is tiled to all cells in the range.\n     * @returns {FRange} This range, for chaining\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('B2');\n     * fRange.setValue(123);\n     *\n     * // or\n     * fRange.setValue({ v: 234, s: { bg: { rgb: '#ff0000' } } });\n     * ```\n     */\n    setValue(value: CellValue | ICellData): FRange {\n        const realValue = covertCellValue(value);\n\n        if (!realValue) {\n            throw new Error('Invalid value');\n        }\n\n        this._commandService.syncExecuteCommand(SetRangeValuesCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: this._range,\n            value: realValue,\n        });\n\n        return this;\n    }\n\n    /**\n     * Set new value for current cell, first cell in this range.\n     * @param {CellValue | ICellData} value  The value can be a number, string, boolean, or standard cell format. If it begins with `=`, it is interpreted as a formula. The value is tiled to all cells in the range.\n     * @returns {FRange} This range, for chaining\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setValueForCell(123);\n     *\n     * // or\n     * fRange.setValueForCell({ v: 234, s: { bg: { rgb: '#ff0000' } } });\n     * ```\n     */\n    setValueForCell(value: CellValue | ICellData): FRange {\n        const realValue = covertCellValue(value);\n\n        if (!realValue) {\n            throw new Error('Invalid value');\n        }\n\n        this._commandService.syncExecuteCommand(SetRangeValuesCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: {\n                startColumn: this._range.startColumn,\n                startRow: this._range.startRow,\n                endColumn: this._range.startColumn,\n                endRow: this._range.startRow,\n            },\n            value: realValue,\n        });\n\n        return this;\n    }\n\n    /**\n     * Set the rich text value for the cell at the start of this range.\n     * @param {RichTextValue | IDocumentData} value The rich text value\n     * @returns {FRange} The range\n     * @example\n     * ```\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getValue(true));\n     *\n     * // Set A1 cell value to rich text\n     * const richText = univerAPI.newRichText()\n     *   .insertText('Hello World')\n     *   .setStyle(0, 1, { bl: 1, cl: { rgb: '#c81e1e' } })\n     *   .setStyle(6, 7, { bl: 1, cl: { rgb: '#c81e1e' } });\n     * fRange.setRichTextValueForCell(richText);\n     * console.log(fRange.getValue(true).toPlainText()); // Hello World\n     * ```\n     */\n    setRichTextValueForCell(value: RichTextValue | IDocumentData): FRange {\n        const p = value instanceof RichTextValue ? value.getData() : value;\n        const params: ISetRangeValuesCommandParams = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: {\n                startColumn: this._range.startColumn,\n                startRow: this._range.startRow,\n                endColumn: this._range.startColumn,\n                endRow: this._range.startRow,\n            },\n            value: { p },\n        };\n        this._commandService.syncExecuteCommand(SetRangeValuesCommand.id, params);\n        return this;\n    }\n\n    /**\n     * Set the rich text value for the cells in the range.\n     * @param {RichTextValue[][]} values The rich text value\n     * @returns {FRange} The range\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getValue(true));\n     *\n     * // Set A1:B2 cell value to rich text\n     * const richText = univerAPI.newRichText()\n     *   .insertText('Hello World')\n     *   .setStyle(0, 1, { bl: 1, cl: { rgb: '#c81e1e' } })\n     *   .setStyle(6, 7, { bl: 1, cl: { rgb: '#c81e1e' } });\n     * fRange.setRichTextValues([\n     *   [richText, richText],\n     *   [null, null]\n     * ]);\n     * console.log(fRange.getValue(true).toPlainText()); // Hello World\n     * ```\n     */\n    setRichTextValues(values: (RichTextValue | IDocumentData)[][]): FRange {\n        const cellDatas = values.map((row) => row.map((item) => item && { p: item instanceof RichTextValue ? item.getData() : item }));\n        const realValue = covertCellValues(cellDatas, this._range);\n\n        const params: ISetRangeValuesCommandParams = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: this._range,\n            value: realValue,\n        };\n        this._commandService.syncExecuteCommand(SetRangeValuesCommand.id, params);\n        return this;\n    }\n\n    /**\n     * Set the cell wrap of the given range.\n     * Cells with wrap enabled (the default) resize to display their full content. Cells with wrap disabled display as much as possible in the cell without resizing or running to multiple lines.\n     * @param {boolean} isWrapEnabled Whether to enable wrap\n     * @returns {FRange} this range, for chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setWrap(true);\n     * console.log(fRange.getWrap());\n     * ```\n     */\n    setWrap(isWrapEnabled: boolean): FRange {\n        this._commandService.syncExecuteCommand(SetTextWrapCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: this._range,\n            value: isWrapEnabled ? WrapStrategy.WRAP : WrapStrategy.UNSPECIFIED,\n        } as ISetTextWrapCommandParams);\n\n        return this;\n    }\n\n    /**\n     * Sets the text wrapping strategy for the cells in the range.\n     * @param {WrapStrategy} strategy The text wrapping strategy\n     * @returns {FRange} this range, for chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setWrapStrategy(univerAPI.Enum.WrapStrategy.WRAP);\n     * console.log(fRange.getWrapStrategy());\n     * ```\n     */\n    setWrapStrategy(strategy: WrapStrategy): FRange {\n        this._commandService.syncExecuteCommand(SetTextWrapCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: this._range,\n            value: strategy,\n        } as ISetTextWrapCommandParams);\n\n        return this;\n    }\n\n    /**\n     * Set the vertical (top to bottom) alignment for the given range (top/middle/bottom).\n     * @param {\"top\" | \"middle\" | \"bottom\"} alignment The vertical alignment\n     * @returns {FRange} this range, for chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setVerticalAlignment('top');\n     * ```\n     */\n    setVerticalAlignment(alignment: FVerticalAlignment): FRange {\n        this._commandService.syncExecuteCommand(SetVerticalTextAlignCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: this._range,\n            value: transformFacadeVerticalAlignment(alignment),\n        } as ISetVerticalTextAlignCommandParams);\n\n        return this;\n    }\n\n    /**\n     * Set the horizontal (left to right) alignment for the given range (left/center/right).\n     * @param {\"left\" | \"center\" | \"normal\"} alignment The horizontal alignment\n     * @returns {FRange} this range, for chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setHorizontalAlignment('left');\n     * ```\n     */\n    setHorizontalAlignment(alignment: FHorizontalAlignment): FRange {\n        this._commandService.syncExecuteCommand(SetHorizontalTextAlignCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: this._range,\n            value: transformFacadeHorizontalAlignment(alignment),\n        } as ISetHorizontalTextAlignCommandParams);\n\n        return this;\n    }\n\n    /**\n     * Sets a different value for each cell in the range. The value can be a two-dimensional array or a standard range matrix (must match the dimensions of this range), consisting of numbers, strings, Boolean values or Composed of standard cell formats. If a value begins with `=`, it is interpreted as a formula.\n     * @param {CellValue[][] | IObjectMatrixPrimitiveType<CellValue> | ICellData[][] | IObjectMatrixPrimitiveType<ICellData>} value The value can be a two-dimensional array or a standard range matrix (must match the dimensions of this range), consisting of numbers, strings, Boolean values or Composed of standard cell formats.\n     * @returns {FRange} This range, for chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setValues([\n     *   [1, { v: 2, s: { bg: { rgb: '#ff0000' } } }],\n     *   [3, 4]\n     * ]);\n     * ```\n     */\n    setValues(\n        value:\n            | CellValue[][]\n            | IObjectMatrixPrimitiveType<CellValue>\n            | ICellData[][]\n            | IObjectMatrixPrimitiveType<ICellData>\n    ): FRange {\n        const realValue = covertCellValues(value, this._range);\n\n        this._commandService.syncExecuteCommand(SetRangeValuesCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: this._range,\n            value: realValue,\n        });\n\n        return this;\n    }\n\n    /**\n     * Sets the font weight for the given range (normal/bold),\n     * @param {FontWeight|null} fontWeight The font weight, either 'normal' or 'bold'; a null value resets the font weight.\n     * @returns {FRange} This range, for chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setFontWeight('bold');\n     * ```\n     */\n    setFontWeight(fontWeight: FontWeight | null): this {\n        let value: BooleanNumber | null;\n        if (fontWeight === 'bold') {\n            value = BooleanNumber.TRUE;\n        } else if (fontWeight === 'normal') {\n            value = BooleanNumber.FALSE;\n        } else if (fontWeight === null) {\n            value = null;\n        } else {\n            throw new Error('Invalid fontWeight');\n        }\n\n        const style: IStyleTypeValue<BooleanNumber | null> = {\n            type: 'bl',\n            value,\n        };\n\n        const setStyleParams: ISetStyleCommandParams<BooleanNumber | null> = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: this._range,\n            style,\n        };\n\n        this._commandService.syncExecuteCommand(SetStyleCommand.id, setStyleParams);\n\n        return this;\n    }\n\n    /**\n     * Sets the font style for the given range ('italic' or 'normal').\n     * @param {FontStyle|null} fontStyle The font style, either 'italic' or 'normal'; a null value resets the font style.\n     * @returns {FRange} This range, for chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setFontStyle('italic');\n     * ```\n     */\n    setFontStyle(fontStyle: FontStyle | null): this {\n        let value: BooleanNumber | null;\n        if (fontStyle === 'italic') {\n            value = BooleanNumber.TRUE;\n        } else if (fontStyle === 'normal') {\n            value = BooleanNumber.FALSE;\n        } else if (fontStyle === null) {\n            value = null;\n        } else {\n            throw new Error('Invalid fontStyle');\n        }\n\n        const style: IStyleTypeValue<BooleanNumber | null> = {\n            type: 'it',\n            value,\n        };\n\n        const setStyleParams: ISetStyleCommandParams<BooleanNumber | null> = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: this._range,\n            style,\n        };\n\n        this._commandService.syncExecuteCommand(SetStyleCommand.id, setStyleParams);\n\n        return this;\n    }\n\n    /**\n     * Sets the font line style of the given range ('underline', 'line-through', or 'none').\n     * @param {FontLine|null} fontLine The font line style, either 'underline', 'line-through', or 'none'; a null value resets the font line style.\n     * @returns {FRange} This range, for chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setFontLine('underline');\n     * ```\n     */\n    setFontLine(fontLine: FontLine | null): this {\n        if (fontLine === 'underline') {\n            this._setFontUnderline({\n                s: BooleanNumber.TRUE,\n            });\n        } else if (fontLine === 'line-through') {\n            this._setFontStrikethrough({\n                s: BooleanNumber.TRUE,\n            });\n        } else if (fontLine === 'none') {\n            this._setFontUnderline({\n                s: BooleanNumber.FALSE,\n            });\n            this._setFontStrikethrough({\n                s: BooleanNumber.FALSE,\n            });\n        } else if (fontLine === null) {\n            this._setFontUnderline(null);\n            this._setFontStrikethrough(null);\n        } else {\n            throw new Error('Invalid fontLine');\n        }\n        return this;\n    }\n\n    /**\n     * Sets the font underline style of the given ITextDecoration\n     * @param {ITextDecoration|null} value The font underline style of the given ITextDecoration; a null value resets the font underline style\n     * @returns {void}\n     */\n    private _setFontUnderline(value: ITextDecoration | null): void {\n        const style: IStyleTypeValue<ITextDecoration | null> = {\n            type: 'ul',\n            value,\n        };\n        const setStyleParams: ISetStyleCommandParams<ITextDecoration | null> = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: this._range,\n            style,\n        };\n\n        this._commandService.syncExecuteCommand(SetStyleCommand.id, setStyleParams);\n    }\n\n    /**\n     * Sets the font strikethrough style of the given ITextDecoration\n     * @param {ITextDecoration|null} value The font strikethrough style of the given ITextDecoration; a null value resets the font strikethrough style\n     * @returns {void}\n     */\n    private _setFontStrikethrough(value: ITextDecoration | null): void {\n        const style: IStyleTypeValue<ITextDecoration | null> = {\n            type: 'st',\n            value,\n        };\n        const setStyleParams: ISetStyleCommandParams<ITextDecoration | null> = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: this._range,\n            style,\n        };\n\n        this._commandService.syncExecuteCommand(SetStyleCommand.id, setStyleParams);\n    }\n\n    /**\n     * Sets the font family, such as \"Arial\" or \"Helvetica\".\n     * @param {string|null} fontFamily The font family to set; a null value resets the font family.\n     * @returns {FRange} This range, for chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setFontFamily('Arial');\n     * ```\n     */\n    setFontFamily(fontFamily: string | null): this {\n        const style: IStyleTypeValue<string | null> = {\n            type: 'ff',\n            value: fontFamily,\n        };\n        const setStyleParams: ISetStyleCommandParams<string | null> = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: this._range,\n            style,\n        };\n\n        this._commandService.syncExecuteCommand(SetStyleCommand.id, setStyleParams);\n\n        return this;\n    }\n\n    /**\n     * Sets the font size, with the size being the point size to use.\n     * @param {number|null} size A font size in point size. A null value resets the font size.\n     * @returns {FRange} This range, for chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setFontSize(24);\n     * ```\n     */\n    setFontSize(size: number | null): this {\n        const style: IStyleTypeValue<number | null> = {\n            type: 'fs',\n            value: size,\n        };\n        const setStyleParams: ISetStyleCommandParams<number | null> = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: this._range,\n            style,\n        };\n\n        this._commandService.syncExecuteCommand(SetStyleCommand.id, setStyleParams);\n\n        return this;\n    }\n\n    /**\n     * Sets the font color in CSS notation (such as '#ffffff' or 'white').\n     * @param {string|null} color The font color in CSS notation (such as '#ffffff' or 'white'); a null value resets the color.\n     * @returns {FRange} This range, for chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setFontColor('#ff0000');\n     * ```\n     */\n    setFontColor(color: string | null): this {\n        const value: IColorStyle | null = color === null ? null : { rgb: color };\n        const style: IStyleTypeValue<IColorStyle | null> = {\n            type: 'cl',\n            value,\n        };\n\n        const setStyleParams: ISetStyleCommandParams<IColorStyle | null> = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: this._range,\n            style,\n        };\n\n        this._commandService.syncExecuteCommand(SetStyleCommand.id, setStyleParams);\n\n        return this;\n    }\n\n    // #endregion editing\n\n    //#region Merge cell\n\n    /**\n     * Merge cells in a range into one merged cell\n     * @param {boolean} [defaultMerge] - If true, only the value in the upper left cell is retained.\n     * @returns {FRange} This range, for chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.merge();\n     * console.log(fRange.isMerged());\n     * ```\n     */\n    merge(defaultMerge: boolean = true): FRange {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n\n        addMergeCellsUtil(this._injector, unitId, subUnitId, [this._range], defaultMerge);\n\n        return this;\n    }\n\n    /**\n     * Merges cells in a range horizontally.\n     * @param {boolean} [defaultMerge] - If true, only the value in the upper left cell is retained.\n     * @returns {FRange} This range, for chaining\n     * @example\n     * ```ts\n     * // Assume the active sheet is a new sheet with no merged cells.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.mergeAcross();\n     * // There will be two merged cells. A1:B1 and A2:B2.\n     * const mergeData = fWorksheet.getMergeData();\n     * mergeData.forEach((item) => {\n     *   console.log(item.getA1Notation());\n     * });\n     * ```\n     */\n    mergeAcross(defaultMerge: boolean = true): FRange {\n        const ranges = getAddMergeMutationRangeByType([this._range], Dimension.ROWS);\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n\n        addMergeCellsUtil(this._injector, unitId, subUnitId, ranges, defaultMerge);\n\n        return this;\n    }\n\n    /**\n     * Merges cells in a range vertically.\n     * @param {boolean} [defaultMerge] - If true, only the value in the upper left cell is retained.\n     * @returns {FRange} This range, for chaining\n     * @example\n     * ```ts\n     * // Assume the active sheet is a new sheet with no merged cells.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.mergeVertically();\n     * // There will be two merged cells. A1:A2 and B1:B2.\n     * const mergeData = fWorksheet.getMergeData();\n     * mergeData.forEach((item) => {\n     *   console.log(item.getA1Notation());\n     * });\n     * ```\n     */\n    mergeVertically(defaultMerge: boolean = true): FRange {\n        const ranges = getAddMergeMutationRangeByType([this._range], Dimension.COLUMNS);\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n\n        addMergeCellsUtil(this._injector, unitId, subUnitId, ranges, defaultMerge);\n\n        return this;\n    }\n\n    /**\n     * Returns true if cells in the current range overlap a merged cell.\n     * @returns {boolean} is overlap with a merged cell\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.merge();\n     * const anchor = fWorksheet.getRange('A1');\n     * console.log(anchor.isPartOfMerge()); // true\n     * ```\n     */\n    isPartOfMerge(): boolean {\n        const { startRow, startColumn, endRow, endColumn } = this._range;\n        return this._worksheet.getMergedCellRange(startRow, startColumn, endRow, endColumn).length > 0;\n    }\n\n    /**\n     * Break all horizontally- or vertically-merged cells contained within the range list into individual cells again.\n     * @returns {FRange} This range, for chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.merge();\n     * const anchor = fWorksheet.getRange('A1');\n     * console.log(anchor.isPartOfMerge()); // true\n     * fRange.breakApart();\n     * console.log(anchor.isPartOfMerge()); // false\n     * ```\n     */\n    breakApart(): FRange {\n        this._commandService.syncExecuteCommand(RemoveWorksheetMergeCommand.id, { ranges: [this._range] });\n        return this;\n    }\n\n    //#endregion\n\n    /**\n     * Iterate cells in this range. Merged cells will be respected.\n     * @param {Function} callback the callback function to be called for each cell in the range\n     * @param {number} callback.row the row number of the cell\n     * @param {number} callback.col the column number of the cell\n     * @param {ICellData} callback.cell the cell data\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.forEach((row, col, cell) => {\n     *   console.log(row, col, cell);\n     * });\n     * ```\n     */\n    forEach(callback: (row: number, col: number, cell: ICellData) => void): void {\n        // Iterate each cell in this range.\n        const { startColumn, startRow, endColumn, endRow } = this._range;\n        this._worksheet\n            .getMatrixWithMergedCells(startRow, startColumn, endRow, endColumn)\n            .forValue((row, col, value) => {\n                callback(row, col, value);\n            });\n    }\n\n    /**\n     * Returns a string description of the range, in A1 notation.\n     * @param {boolean} [withSheet] - If true, the sheet name is included in the A1 notation.\n     * @param {AbsoluteRefType} [startAbsoluteRefType] - The absolute reference type for the start cell.\n     * @param {AbsoluteRefType} [endAbsoluteRefType] - The absolute reference type for the end cell.\n     * @returns {string} The A1 notation of the range.\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // By default, the A1 notation is returned without the sheet name and without absolute reference types.\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getA1Notation()); // A1:B2\n     *\n     * // By setting withSheet to true, the sheet name is included in the A1 notation.\n     * fWorksheet.setName('Sheet1');\n     * console.log(fRange.getA1Notation(true)); // Sheet1!A1:B2\n     *\n     * // By setting startAbsoluteRefType, the absolute reference type for the start cell is included in the A1 notation.\n     * console.log(fRange.getA1Notation(false, univerAPI.Enum.AbsoluteRefType.ROW)); // A$1:B2\n     * console.log(fRange.getA1Notation(false, univerAPI.Enum.AbsoluteRefType.COLUMN)); // $A1:B2\n     * console.log(fRange.getA1Notation(false, univerAPI.Enum.AbsoluteRefType.ALL)); // $A$1:B2\n     *\n     * // By setting endAbsoluteRefType, the absolute reference type for the end cell is included in the A1 notation.\n     * console.log(fRange.getA1Notation(false, null, univerAPI.Enum.AbsoluteRefType.ROW)); // A1:B$2\n     * console.log(fRange.getA1Notation(false, null, univerAPI.Enum.AbsoluteRefType.COLUMN)); // A1:$B2\n     * console.log(fRange.getA1Notation(false, null, univerAPI.Enum.AbsoluteRefType.ALL)); // A1:$B$2\n     *\n     * // By setting all parameters example\n     * console.log(fRange.getA1Notation(true, univerAPI.Enum.AbsoluteRefType.ALL, univerAPI.Enum.AbsoluteRefType.ALL)); // Sheet1!$A$1:$B$2\n     * ```\n     */\n    getA1Notation(withSheet?: boolean, startAbsoluteRefType?: AbsoluteRefType, endAbsoluteRefType?: AbsoluteRefType): string {\n        const range = {\n            ...this._range,\n            startAbsoluteRefType,\n            endAbsoluteRefType,\n        };\n\n        return withSheet ? serializeRangeWithSheet(this._worksheet.getName(), range) : serializeRange(range);\n    }\n\n    /**\n     * Sets the specified range as the active range, with the top left cell in the range as the current cell.\n     * @returns {FRange}  This range, for chaining.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.activate(); // the active cell will be A1\n     * ```\n     */\n    activate(): FRange {\n        const fWorkbook = this._injector.createInstance(FWorkbook, this._workbook);\n        fWorkbook.setActiveRange(this);\n        return this;\n    }\n\n    /**\n     * Sets the specified cell as the current cell.\n     * If the specified cell is present in an existing range, then that range becomes the active range with the cell as the current cell.\n     * If the specified cell is not part of an existing range, then a new range is created with the cell as the active range and the current cell.\n     * @returns {FRange}  This range, for chaining.\n     * @description If the range is not a single cell, an error will be thrown.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set the range A1:B2 as the active range, default active cell is A1\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.activate();\n     * console.log(fWorksheet.getActiveRange().getA1Notation()); // A1:B2\n     * console.log(fWorksheet.getActiveCell().getA1Notation()); // A1\n     *\n     * // Set the cell B2 as the active cell\n     * // Because B2 is in the active range A1:B2, the active range will not change, and the active cell will be changed to B2\n     * const cell = fWorksheet.getRange('B2');\n     * cell.activateAsCurrentCell();\n     * console.log(fWorksheet.getActiveRange().getA1Notation()); // A1:B2\n     * console.log(fWorksheet.getActiveCell().getA1Notation()); // B2\n     *\n     * // Set the cell C3 as the active cell\n     * // Because C3 is not in the active range A1:B2, a new active range C3:C3 will be created, and the active cell will be changed to C3\n     * const cell2 = fWorksheet.getRange('C3');\n     * cell2.activateAsCurrentCell();\n     * console.log(fWorksheet.getActiveRange().getA1Notation()); // C3:C3\n     * console.log(fWorksheet.getActiveCell().getA1Notation()); // C3\n     * ```\n     */\n    activateAsCurrentCell(): FRange {\n        const mergeInfo = this._worksheet.getMergedCell(this._range.startRow, this._range.startColumn);\n        // the range is a merge cell or single cell\n        const valid = (mergeInfo && Rectangle.equals(mergeInfo, this._range)) ||\n            (!mergeInfo && this._range.startRow === this._range.endRow && this._range.startColumn === this._range.endColumn);\n\n        if (valid) {\n            const fWorkbook = this._injector.createInstance(FWorkbook, this._workbook);\n            const activeRange = fWorkbook.getActiveRange();\n\n            if (!activeRange || activeRange.getUnitId() !== this.getUnitId() || activeRange.getSheetId() !== this.getSheetId()) {\n                return this.activate();\n            }\n\n            if (Rectangle.contains(activeRange.getRange(), this._range)) {\n                const setSelectionOperationParams: ISetSelectionsOperationParams = {\n                    unitId: this.getUnitId(),\n                    subUnitId: this.getSheetId(),\n                    selections: [\n                        {\n                            range: activeRange.getRange(),\n                            primary: getPrimaryForRange(this.getRange(), this._worksheet),\n                            style: null,\n                        },\n                    ],\n                };\n\n                this._commandService.syncExecuteCommand(SetSelectionsOperation.id, setSelectionOperationParams);\n\n                return this;\n            }\n\n            return this.activate();\n        } else {\n            throw new Error('The range is not a single cell');\n        }\n    }\n\n    /**\n     * Splits a column of text into multiple columns based on an auto-detected delimiter.\n     * @param {boolean} [treatMultipleDelimitersAsOne] Whether to treat multiple continuous delimiters as one. The default value is false.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // A1:A3 has following values:\n     * //    A    |\n     * //  1,2,3  |\n     * //  4,,5,6 |\n     * const fRange = fWorksheet.getRange('A1:A3');\n     * fRange.setValues([\n     *   ['A'],\n     *   ['1,2,3'],\n     *   ['4,,5,6']\n     * ]);\n     *\n     * // After calling splitTextToColumns(true), the range will be:\n     * //  A |   |\n     * //  1 | 2 | 3\n     * //  4 | 5 | 6\n     * fRange.splitTextToColumns(true);\n     *\n     * // After calling splitTextToColumns(false), the range will be:\n     * //  A |   |   |\n     * //  1 | 2 | 3 |\n     * //  4 |   | 5 | 6\n     * fRange.splitTextToColumns(false);\n     * ```\n     */\n    splitTextToColumns(treatMultipleDelimitersAsOne?: boolean): void;\n    /**\n     * Splits a column of text into multiple columns based on a specified delimiter.\n     * @param {boolean} [treatMultipleDelimitersAsOne] Whether to treat multiple continuous delimiters as one. The default value is false.\n     * @param {SplitDelimiterEnum} [delimiter] The delimiter to use to split the text. The default delimiter is Tab(1)\u3001Comma(2)\u3001Semicolon(4)\u3001Space(8)\u3001Custom(16).A delimiter like 6 (SplitDelimiterEnum.Comma|SplitDelimiterEnum.Semicolon) means using Comma and Semicolon to split the text.\n     * @example Show how to split text to columns with combined delimiter. The bit operations are used to combine the delimiters.\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // A1:A3 has following values:\n     * //     A   |\n     * //  1;;2;3 |\n     * //  1;,2;3 |\n     * const fRange = fWorksheet.getRange('A1:A3');\n     * fRange.setValues([\n     *   ['A'],\n     *   ['1;;2;3'],\n     *   ['1;,2;3']\n     * ]);\n     *\n     * // After calling splitTextToColumns(false, univerAPI.Enum.SplitDelimiterType.Semicolon|univerAPI.Enum.SplitDelimiterType.Comma), the range will be:\n     * //  A |   |   |\n     * //  1 |   | 2 | 3\n     * //  1 |   | 2 | 3\n     * fRange.splitTextToColumns(false, univerAPI.Enum.SplitDelimiterType.Semicolon|univerAPI.Enum.SplitDelimiterType.Comma);\n     *\n     * // After calling splitTextToColumns(true, univerAPI.Enum.SplitDelimiterType.Semicolon|univerAPI.Enum.SplitDelimiterType.Comma), the range will be:\n     * //  A |   |\n     * //  1 | 2 | 3\n     * //  1 | 2 | 3\n     * fRange.splitTextToColumns(true, univerAPI.Enum.SplitDelimiterType.Semicolon|univerAPI.Enum.SplitDelimiterType.Comma);\n     * ```\n     */\n    splitTextToColumns(treatMultipleDelimitersAsOne?: boolean, delimiter?: SplitDelimiterEnum): void;\n    /**\n     * Splits a column of text into multiple columns based on a custom specified delimiter.\n     * @param {boolean} [treatMultipleDelimitersAsOne] Whether to treat multiple continuous delimiters as one. The default value is false.\n     * @param {SplitDelimiterEnum} [delimiter] The delimiter to use to split the text. The default delimiter is Tab(1)\u3001Comma(2)\u3001Semicolon(4)\u3001Space(8)\u3001Custom(16).A delimiter like 6 (SplitDelimiterEnum.Comma|SplitDelimiterEnum.Semicolon) means using Comma and Semicolon to split the text.\n     * @param {string} [customDelimiter] The custom delimiter to split the text. An error will be thrown if custom delimiter is set but the customDelimiter is not a character.\n     * @example Show how to split text to columns with custom delimiter\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // A1:A3 has following values:\n     * //     A   |\n     * //  1#2#3  |\n     * //  4##5#6 |\n     * const fRange = fWorksheet.getRange('A1:A3');\n     * fRange.setValues([\n     *   ['A'],\n     *   ['1#2#3'],\n     *   ['4##5#6']\n     * ]);\n     *\n     * // After calling splitTextToColumns(false, univerAPI.Enum.SplitDelimiterType.Custom, '#'), the range will be:\n     * //  A |   |   |\n     * //  1 | 2 | 3 |\n     * //  4 |   | 5 | 6\n     * fRange.splitTextToColumns(false, univerAPI.Enum.SplitDelimiterType.Custom, '#');\n     *\n     * // After calling splitTextToColumns(true, univerAPI.Enum.SplitDelimiterType.Custom, '#'), the range will be:\n     * //  A |   |\n     * //  1 | 2 | 3\n     * //  4 | 5 | 6\n     * fRange.splitTextToColumns(true, univerAPI.Enum.SplitDelimiterType.Custom, '#');\n     * ```\n     */\n    splitTextToColumns(treatMultipleDelimitersAsOne?: boolean, delimiter?: SplitDelimiterEnum, customDelimiter?: string): void {\n        this._commandService.syncExecuteCommand(SplitTextToColumnsCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: this._range,\n            delimiter,\n            customDelimiter,\n            treatMultipleDelimitersAsOne,\n        });\n    }\n\n    /**\n     * Set the theme style for the range.\n     * @param {string|undefined} themeName The name of the theme style to apply.If a undefined value is passed, the theme style will be removed if it exist.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:E20');\n     * fRange.useThemeStyle('default');\n     * ```\n     */\n    useThemeStyle(themeName: string | undefined): void {\n        if (themeName === null || themeName === undefined) {\n            const usedThemeName = this.getUsedThemeStyle();\n            if (usedThemeName) {\n                this.removeThemeStyle(usedThemeName);\n            }\n        } else {\n            this._commandService.syncExecuteCommand(SetWorksheetRangeThemeStyleCommand.id, {\n                unitId: this._workbook.getUnitId(),\n                subUnitId: this._worksheet.getSheetId(),\n                range: this._range,\n                themeName,\n            });\n        }\n    }\n\n    /**\n     * Remove the theme style for the range.\n     * @param {string} themeName The name of the theme style to remove.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:E20');\n     * fRange.removeThemeStyle('default');\n     * ```\n     */\n    removeThemeStyle(themeName: string): void {\n        this._commandService.syncExecuteCommand(DeleteWorksheetRangeThemeStyleCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: this._range,\n            themeName,\n        });\n    }\n\n    /**\n     * Gets the theme style applied to the range.\n     * @returns {string | undefined} The name of the theme style applied to the range or not exist.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:E20');\n     * console.log(fRange.getUsedThemeStyle()); // undefined\n     * fRange.useThemeStyle('default');\n     * console.log(fRange.getUsedThemeStyle()); // 'default'\n     * ```\n     */\n    getUsedThemeStyle(): string | undefined {\n        return this._injector.get(SheetRangeThemeService).getAppliedRangeThemeStyle({\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: this._range,\n        });\n    }\n\n    /**\n     * Clears content and formatting information of the range. Or Optionally clears only the contents or only the formatting.\n     * @param {IFacadeClearOptions} [options] - Options for clearing the range. If not provided, the contents and formatting are cleared both.\n     * @param {boolean} [options.contentsOnly] - If true, the contents of the range are cleared. If false, the contents and formatting are cleared. Default is false.\n     * @param {boolean} [options.formatOnly] - If true, the formatting of the range is cleared. If false, the contents and formatting are cleared. Default is false.\n     * @returns {FWorksheet} Returns the current worksheet instance for method chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorkSheet.getRange('A1:D10');\n     *\n     * // clear the content and format of the range A1:D10\n     * fRange.clear();\n     *\n     * // clear the content only of the range A1:D10\n     * fRange.clear({ contentsOnly: true });\n     * ```\n     */\n    clear(options?: IFacadeClearOptions): FRange {\n        if (options && options.contentsOnly && !options.formatOnly) {\n            return this.clearContent();\n        }\n\n        if (options && options.formatOnly && !options.contentsOnly) {\n            return this.clearFormat();\n        }\n\n        this._commandService.syncExecuteCommand(ClearSelectionAllCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            ranges: [this._range],\n            options,\n        });\n        return this;\n    }\n\n    /**\n     * Clears content of the range, while preserving formatting information.\n     * @returns {FWorksheet} Returns the current worksheet instance for method chaining\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorkSheet.getRange('A1:D10');\n     *\n     * // clear the content only of the range A1:D10\n     * fRange.clearContent();\n     * ```\n     */\n    clearContent(): FRange {\n        this._commandService.syncExecuteCommand(ClearSelectionContentCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            ranges: [this._range],\n        });\n        return this;\n    }\n\n    /**\n     * Clears formatting information of the range, while preserving contents.\n     * @returns {FWorksheet} Returns the current worksheet instance for method chaining\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorkSheet.getRange('A1:D10');\n     * // clear the format only of the range A1:D10\n     * fRange.clearFormat();\n     * ```\n     */\n    clearFormat(): FRange {\n        this._commandService.syncExecuteCommand(ClearSelectionFormatCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            ranges: [this._range],\n        });\n        return this;\n    }\n\n    /**\n     * Inserts empty cells into this range. Existing data in the sheet along the provided dimension is shifted away from the inserted range.\n     * @param {Dimension} shiftDimension - The dimension along which to shift existing data.\n     * @example\n     * ```ts\n     * // Assume the active sheet empty sheet.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const values = [\n     *   [1, 2, 3, 4],\n     *   [2, 3, 4, 5],\n     *   [3, 4, 5, 6],\n     *   [4, 5, 6, 7],\n     *   [5, 6, 7, 8],\n     * ];\n     *\n     * // Set the range A1:D5 with some values, the range A1:D5 will be:\n     * // 1 | 2 | 3 | 4\n     * // 2 | 3 | 4 | 5\n     * // 3 | 4 | 5 | 6\n     * // 4 | 5 | 6 | 7\n     * // 5 | 6 | 7 | 8\n     * const fRange = fWorksheet.getRange('A1:D5');\n     * fRange.setValues(values);\n     * console.log(fWorksheet.getRange('A1:D5').getValues()); // [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8]]\n     *\n     * // Insert the empty cells into the range A1:B2 along the columns dimension, the range A1:D5 will be:\n     * //   |   | 1 | 2\n     * //   |   | 2 | 3\n     * // 3 | 4 | 5 | 6\n     * // 4 | 5 | 6 | 7\n     * // 5 | 6 | 7 | 8\n     * const fRange2 = fWorksheet.getRange('A1:B2');\n     * fRange2.insertCells(univerAPI.Enum.Dimension.COLUMNS);\n     * console.log(fWorksheet.getRange('A1:D5').getValues()); // [[null, null, 1, 2], [null, null, 2, 3], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8]]\n     *\n     * // Set the range A1:D5 values again, the range A1:D5 will be:\n     * // 1 | 2 | 3 | 4\n     * // 2 | 3 | 4 | 5\n     * // 3 | 4 | 5 | 6\n     * // 4 | 5 | 6 | 7\n     * // 5 | 6 | 7 | 8\n     * fRange.setValues(values);\n     *\n     * // Insert the empty cells into the range A1:B2 along the rows dimension, the range A1:D5 will be:\n     * //   |   | 3 | 4\n     * //   |   | 4 | 5\n     * // 1 | 2 | 5 | 6\n     * // 2 | 3 | 6 | 7\n     * // 3 | 4 | 7 | 8\n     * const fRange3 = fWorksheet.getRange('A1:B2');\n     * fRange3.insertCells(univerAPI.Enum.Dimension.ROWS);\n     * console.log(fWorksheet.getRange('A1:D5').getValues()); // [[null, null, 3, 4], [null, null, 4, 5], [1, 2, 5, 6], [2, 3, 6, 7], [3, 4, 7, 8]]\n     * ```\n     */\n    insertCells(shiftDimension: Dimension): void {\n        if (shiftDimension === Dimension.ROWS) {\n            this._commandService.executeCommand(InsertRangeMoveDownCommand.id, {\n                range: this._range,\n            });\n        } else {\n            this._commandService.executeCommand(InsertRangeMoveRightCommand.id, {\n                range: this._range,\n            });\n        }\n    }\n\n    /**\n     * Deletes this range of cells. Existing data in the sheet along the provided dimension is shifted towards the deleted range.\n     * @param {Dimension} shiftDimension - The dimension along which to shift existing data.\n     * @example\n     * ```ts\n     * // Assume the active sheet empty sheet.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const values = [\n     *   [1, 2, 3, 4],\n     *   [2, 3, 4, 5],\n     *   [3, 4, 5, 6],\n     *   [4, 5, 6, 7],\n     *   [5, 6, 7, 8],\n     * ];\n     *\n     * // Set the range A1:D5 with some values, the range A1:D5 will be:\n     * // 1 | 2 | 3 | 4\n     * // 2 | 3 | 4 | 5\n     * // 3 | 4 | 5 | 6\n     * // 4 | 5 | 6 | 7\n     * // 5 | 6 | 7 | 8\n     * const fRange = fWorksheet.getRange('A1:D5');\n     * fRange.setValues(values);\n     * console.log(fWorksheet.getRange('A1:D5').getValues()); // [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8]]\n     *\n     * // Delete the range A1:B2 along the columns dimension, the range A1:D5 will be:\n     * // 3 | 4 |   |\n     * // 4 | 5 |   |\n     * // 3 | 4 | 5 | 6\n     * // 4 | 5 | 6 | 7\n     * // 5 | 6 | 7 | 8\n     * const fRange2 = fWorksheet.getRange('A1:B2');\n     * fRange2.deleteCells(univerAPI.Enum.Dimension.COLUMNS);\n     * console.log(fWorksheet.getRange('A1:D5').getValues()); // [[3, 4, null, null], [4, 5, null, null], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8]]\n     *\n     * // Set the range A1:D5 values again, the range A1:D5 will be:\n     * // 1 | 2 | 3 | 4\n     * // 2 | 3 | 4 | 5\n     * // 3 | 4 | 5 | 6\n     * // 4 | 5 | 6 | 7\n     * // 5 | 6 | 7 | 8\n     * fRange.setValues(values);\n     *\n     * // Delete the range A1:B2 along the rows dimension, the range A1:D5 will be:\n     * // 3 | 4 | 3 | 4\n     * // 4 | 5 | 4 | 5\n     * // 5 | 6 | 5 | 6\n     * //   |   | 6 | 7\n     * //   |   | 7 | 8\n     * const fRange3 = fWorksheet.getRange('A1:B2');\n     * fRange3.deleteCells(univerAPI.Enum.Dimension.ROWS);\n     * console.log(fWorksheet.getRange('A1:D5').getValues()); // [[3, 4, 3, 4], [4, 5, 4, 5], [5, 6, 5, 6], [null, null, 6, 7], [null, null, 7, 8]]\n     * ```\n     */\n    deleteCells(shiftDimension: Dimension): void {\n        if (shiftDimension === Dimension.ROWS) {\n            this._commandService.executeCommand(DeleteRangeMoveUpCommand.id, {\n                range: this._range,\n            });\n        } else {\n            this._commandService.executeCommand(DeleteRangeMoveLeftCommand.id, {\n                range: this._range,\n            });\n        }\n    }\n\n    /**\n     * Returns a copy of the range expanded `Direction.UP` and `Direction.DOWN` if the specified dimension is `Dimension.ROWS`, or `Direction.NEXT` and `Direction.PREVIOUS` if the dimension is `Dimension.COLUMNS`.\n     * The expansion of the range is based on detecting data next to the range that is organized like a table.\n     * The expanded range covers all adjacent cells with data in them along the specified dimension including the table boundaries.\n     * If the original range is surrounded by empty cells along the specified dimension, the range itself is returned.\n     * @param {Dimension} [dimension] - The dimension along which to expand the range. If not provided, the range will be expanded in both dimensions.\n     * @returns {FRange} The range's data region or a range covering each column or each row spanned by the original range.\n     * @example\n     * ```ts\n     * // Assume the active sheet is a new sheet with no data.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set the range A1:D4 with some values, the range A1:D4 will be:\n     * //  |     |     |\n     * //  |     | 100 |\n     * //  | 100 |     | 100\n     * //  |     | 100 |\n     * fWorksheet.getRange('C2').setValue(100);\n     * fWorksheet.getRange('B3').setValue(100);\n     * fWorksheet.getRange('D3').setValue(100);\n     * fWorksheet.getRange('C4').setValue(100);\n     *\n     * // Get C3 data region along the rows dimension, the range will be C2:D4\n     * const range = fWorksheet.getRange('C3').getDataRegion(univerAPI.Enum.Dimension.ROWS);\n     * console.log(range.getA1Notation()); // C2:C4\n     *\n     * // Get C3 data region along the columns dimension, the range will be B3:D3\n     * const range2 = fWorksheet.getRange('C3').getDataRegion(univerAPI.Enum.Dimension.COLUMNS);\n     * console.log(range2.getA1Notation()); // B3:D3\n     *\n     * // Get C3 data region along the both dimension, the range will be B2:D4\n     * const range3 = fWorksheet.getRange('C3').getDataRegion();\n     * console.log(range3.getA1Notation()); // B2:D4\n     * ```\n     */\n    // eslint-disable-next-line complexity\n    getDataRegion(dimension?: Dimension): FRange {\n        const { startRow, startColumn, endRow, endColumn } = this._range;\n        const maxRows = this._worksheet.getMaxRows();\n        const maxColumns = this._worksheet.getMaxColumns();\n        const cellMatrix = this._worksheet.getCellMatrix();\n\n        // If the original range is surrounded by empty cells along the specified dimension, the range itself is returned.\n        let newStartRow = startRow;\n        let newStartColumn = startColumn;\n        let newEndRow = endRow;\n        let newEndColumn = endColumn;\n\n        // Four directions or dimension rows\n        if (dimension !== Dimension.COLUMNS) {\n            let topRowHasValue = false;\n            let bottomRowHasValue = false;\n\n            for (let c = startColumn; c <= endColumn; c++) {\n                if (startRow > 0 && !isNullCell(cellMatrix.getValue(startRow - 1, c))) {\n                    topRowHasValue = true;\n                }\n\n                if (endRow < maxRows - 1 && !isNullCell(cellMatrix.getValue(endRow + 1, c))) {\n                    bottomRowHasValue = true;\n                }\n\n                if (topRowHasValue && bottomRowHasValue) {\n                    break;\n                }\n            }\n\n            if (topRowHasValue) {\n                newStartRow = startRow - 1;\n            }\n\n            if (bottomRowHasValue) {\n                newEndRow = endRow + 1;\n            }\n        }\n\n        // Four directions or dimension columns\n        if (dimension !== Dimension.ROWS) {\n            let leftColumnHasValue = false;\n            let rightColumnHasValue = false;\n\n            for (let r = startRow; r <= endRow; r++) {\n                if (startColumn > 0 && !isNullCell(cellMatrix.getValue(r, startColumn - 1))) {\n                    leftColumnHasValue = true;\n                }\n\n                if (endColumn < maxColumns - 1 && !isNullCell(cellMatrix.getValue(r, endColumn + 1))) {\n                    rightColumnHasValue = true;\n                }\n\n                if (leftColumnHasValue && rightColumnHasValue) {\n                    break;\n                }\n            }\n\n            if (leftColumnHasValue) {\n                newStartColumn = startColumn - 1;\n            }\n\n            if (rightColumnHasValue) {\n                newEndColumn = endColumn + 1;\n            }\n        }\n\n        return this._injector.createInstance(FRange, this._workbook, this._worksheet, {\n            startRow: newStartRow,\n            startColumn: newStartColumn,\n            endRow: newEndRow,\n            endColumn: newEndColumn,\n        });\n    }\n\n    /**\n     * Returns true if the range is totally blank.\n     * @returns {boolean} true if the range is blank; false otherwise.\n     * @example\n     * ```ts\n     * // Assume the active sheet is a new sheet with no data.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.isBlank()); // true\n     *\n     * // Set the range A1:B2 with some values\n     * fRange.setValueForCell(123);\n     * console.log(fRange.isBlank()); // false\n     * ```\n     */\n    isBlank(): boolean {\n        const cellMatrix = this._worksheet.getCellMatrix();\n        const { startRow, startColumn, endRow, endColumn } = this._range;\n\n        let isBlank = true;\n\n        for (let r = startRow; r <= endRow; r++) {\n            for (let c = startColumn; c <= endColumn; c++) {\n                if (!isNullCell(cellMatrix.getValue(r, c))) {\n                    isBlank = false;\n                    break;\n                }\n            }\n\n            if (!isBlank) {\n                break;\n            }\n        }\n\n        return isBlank;\n    }\n\n    /**\n     * Returns a new range that is offset from this range by the given number of rows and columns (which can be negative).\n     * The new range is the same size as the original range.\n     * @param {number} rowOffset - The number of rows down from the range's top-left cell; negative values represent rows up from the range's top-left cell.\n     * @param {number} columnOffset - The number of columns right from the range's top-left cell; negative values represent columns left from the range's top-left cell.\n     * @returns {FRange} The new range.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getA1Notation()); // A1:B2\n     *\n     * // Offset the range by 1 row and 1 column\n     * const newRange = fRange.offset(1, 1);\n     * console.log(newRange.getA1Notation()); // B2:C3\n     * ```\n     */\n    offset(rowOffset: number, columnOffset: number): FRange;\n    /**\n     * Returns a new range that is relative to the current range, whose upper left point is offset from the current range by the given rows and columns, and with the given height in cells.\n     * @param {number} rowOffset - The number of rows down from the range's top-left cell; negative values represent rows up from the range's top-left cell.\n     * @param {number} columnOffset - The number of columns right from the range's top-left cell; negative values represent columns left from the range's top-left cell.\n     * @param {number} numRows - The height in rows of the new range.\n     * @returns {FRange} The new range.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getA1Notation()); // A1:B2\n     *\n     * // Offset the range by 1 row and 1 column, and set the height of the new range to 3\n     * const newRange = fRange.offset(1, 1, 3);\n     * console.log(newRange.getA1Notation()); // B2:C4\n     * ```\n     */\n    offset(rowOffset: number, columnOffset: number, numRows: number): FRange;\n    /**\n     * Returns a new range that is relative to the current range, whose upper left point is offset from the current range by the given rows and columns, and with the given height and width in cells.\n     * @param {number} rowOffset - The number of rows down from the range's top-left cell; negative values represent rows up from the range's top-left cell.\n     * @param {number} columnOffset - The number of columns right from the range's top-left cell; negative values represent columns left from the range's top-left cell.\n     * @param {number} numRows - The height in rows of the new range.\n     * @param {number} numColumns - The width in columns of the new range.\n     * @returns {FRange} The new range.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getA1Notation()); // A1:B2\n     *\n     * // Offset the range by 1 row and 1 column, and set the height of the new range to 3 and the width to 3\n     * const newRange = fRange.offset(1, 1, 3, 3);\n     * console.log(newRange.getA1Notation()); // B2:D4\n     * ```\n     */\n    offset(rowOffset: number, columnOffset: number, numRows?: number, numColumns?: number): FRange {\n        const { startRow, startColumn, endRow, endColumn } = this._range;\n\n        const newStartRow = startRow + rowOffset;\n        const newStartColumn = startColumn + columnOffset;\n        const newEndRow = numRows ? newStartRow + numRows - 1 : endRow + rowOffset;\n        const newEndColumn = numColumns ? newStartColumn + numColumns - 1 : endColumn + columnOffset;\n\n        if (newStartRow < 0 || newStartColumn < 0 || newEndRow < 0 || newEndColumn < 0) {\n            throw new Error('The row or column index is out of range');\n        }\n\n        return this._injector.createInstance(FRange, this._workbook, this._worksheet, {\n            startRow: newStartRow,\n            startColumn: newStartColumn,\n            endRow: newEndRow,\n            endColumn: newEndColumn,\n        });\n    }\n\n    /**\n     * Updates the formula for this range. The given formula must be in A1 notation.\n     * @param {string} formula - A string representing the formula to set for the cell.\n     * @returns {FRange} This range instance for chaining.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1');\n     * fRange.setFormula('=SUM(A2:A5)');\n     * console.log(fRange.getFormula()); // '=SUM(A2:A5)'\n     * ```\n     */\n    setFormula(formula: string): FRange {\n        return this.setValue({\n            f: formula,\n        });\n    }\n\n    /**\n     * Sets a rectangular grid of formulas (must match dimensions of this range). The given formulas must be in A1 notation.\n     * @param {string[][]} formulas - A two-dimensional string array of formulas.\n     * @returns {FRange} This range instance for chaining.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setFormulas([\n     *   ['=SUM(A2:A5)', '=SUM(B2:B5)'],\n     *   ['=SUM(A6:A9)', '=SUM(B6:B9)'],\n     * ]);\n     * console.log(fRange.getFormulas()); // [['=SUM(A2:A5)', '=SUM(B2:B5)'], ['=SUM(A6:A9)', '=SUM(B6:B9)']]\n     * ```\n     */\n    setFormulas(formulas: string[][]): FRange {\n        return this.setValues(formulas.map((row) => row.map((formula) => ({ f: formula }))));\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Direction, ISelectionCell, Nullable, Workbook, Worksheet } from '@univerjs/core';\nimport type { ISelectionWithStyle, ISetSelectionsOperationParams } from '@univerjs/sheets';\nimport { ICommandService, Inject, Injector, Rectangle } from '@univerjs/core';\nimport { getNextPrimaryCell, getPrimaryForRange, SetSelectionsOperation } from '@univerjs/sheets';\n\nimport { FRange } from './f-range';\nimport { FWorkbook } from './f-workbook';\nimport { FWorksheet } from './f-worksheet';\n\n/**\n * Represents the active selection in the sheet.\n *\n * @example\n * ```ts\n * const fWorkbook = univerAPI.getActiveWorkbook()\n * const fWorksheet = fWorkbook.getActiveSheet()\n * const fSelection = fWorksheet.getSelection();\n * const activeRange = fSelection.getActiveRange();\n * console.log(activeRange);\n * ```\n * @hideconstructor\n */\nexport class FSelection {\n    constructor(\n        private readonly _workbook: Workbook,\n        private readonly _worksheet: Worksheet,\n        private readonly _selections: Readonly<ISelectionWithStyle[]>,\n        @Inject(Injector) private readonly _injector: Injector\n    ) {\n        // empty\n    }\n\n    /**\n     * Represents the active selection in the sheet. Which means the selection contains the active cell.\n     * @returns {FRange | null} The active selection.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A10:B11');\n     * fRange.activate();\n     * const fSelection = fWorksheet.getSelection();\n     * console.log(fSelection.getActiveRange().getA1Notation()); // A10:B11\n     * ```\n     */\n    getActiveRange(): FRange | null {\n        const active = this._selections.find((selection) => !!selection.primary);\n        if (!active) {\n            return null;\n        }\n\n        return this._injector.createInstance(FRange, this._workbook, this._worksheet, active.range);\n    }\n\n    /**\n     * Represents the active selection list in the sheet.\n     * @returns {FRange[]} The active selection list.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fSelection = fWorksheet.getSelection();\n     * const activeRangeList = fSelection.getActiveRangeList();\n     * activeRangeList.forEach((range) => {\n     *   console.log(range.getA1Notation());\n     * });\n     * ```\n     */\n    getActiveRangeList(): FRange[] {\n        return this._selections.map((selection) => {\n            return this._injector.createInstance(FRange, this._workbook, this._worksheet, selection.range);\n        });\n    }\n\n    /**\n     * Represents the current select cell in the sheet.\n     * @returns {ISelectionCell} The current select cell info.Pay attention to the type of the return value.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A10:B11');\n     * fRange.activate();\n     * const fSelection = fWorksheet.getSelection();\n     * const currentCell = fSelection.getCurrentCell();\n     * const { actualRow, actualColumn } = currentCell;\n     * console.log(currentCell);\n     * console.log(`actualRow: ${actualRow}, actualColumn: ${actualColumn}`); // actualRow: 9, actualColumn: 0\n     * ```\n     */\n    getCurrentCell(): Nullable<ISelectionCell> {\n        const current = this._selections.find((selection) => !!selection.primary);\n        if (!current) {\n            return null;\n        }\n\n        return current.primary;\n    }\n\n    /**\n     * Returns the active sheet in the spreadsheet.\n     * @returns {FWorksheet} The active sheet in the spreadsheet.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fSelection = fWorksheet.getSelection();\n     * const activeSheet = fSelection.getActiveSheet();\n     * console.log(activeSheet.equalTo(fWorksheet)); // true\n     * ```\n     */\n    getActiveSheet(): FWorksheet {\n        const fWorkbook = this._injector.createInstance(FWorkbook, this._workbook);\n        return this._injector.createInstance(FWorksheet, fWorkbook, this._workbook, this._worksheet);\n    }\n\n    /**\n     * Update the primary cell in the selection. if the primary cell not exists in selections, add it to the selections and clear the old selections.\n     * @param {FRange} cell The new primary cell to update.\n     * @returns {FSelection} The new selection after updating the primary cell.Because the selection is immutable, the return value is a new selection.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A10:B11');\n     * fRange.activate();\n     * const cell = fWorksheet.getRange('B11');\n     *\n     * let fSelection = fWorksheet.getSelection();\n     * fSelection = fSelection.updatePrimaryCell(cell);\n     *\n     * const currentCell = fSelection.getCurrentCell();\n     * const { actualRow, actualColumn } = currentCell;\n     * console.log(currentCell);\n     * console.log(`actualRow: ${actualRow}, actualColumn: ${actualColumn}`); // actualRow: 10, actualColumn: 1\n     * ```\n     */\n    updatePrimaryCell(cell: FRange): FSelection {\n        const commandService = this._injector.get(ICommandService);\n        let newSelections = [];\n        let hasSetPrimary = false;\n        for (const { range, style } of this._selections) {\n            if (Rectangle.contains(range, cell.getRange())) {\n                newSelections.push({\n                    range,\n                    primary: getPrimaryForRange(cell.getRange(), this._worksheet),\n                    style,\n                });\n                hasSetPrimary = true;\n            } else {\n                newSelections.push({\n                    range,\n                    primary: null,\n                    style,\n                });\n            }\n        }\n\n        if (!hasSetPrimary) {\n            newSelections = [\n                {\n                    range: cell.getRange(),\n                    primary: getPrimaryForRange(cell.getRange(), this._worksheet),\n                },\n            ];\n        }\n\n        const setSelectionOperationParams: ISetSelectionsOperationParams = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            selections: newSelections,\n        };\n\n        commandService.syncExecuteCommand(SetSelectionsOperation.id, setSelectionOperationParams);\n        return new FSelection(this._workbook, this._worksheet, newSelections, this._injector);\n    }\n\n    /**\n     * Get the next primary cell in the specified direction. If the primary cell not exists in selections, return null.\n     * The next primary cell in the specified direction is the next cell only within the current selection range.\n     * For example, if the current selection is A1:B2, and the primary cell is B1, the next cell in the right direction is A2 instead of C1.\n     * @param {Direction} direction The direction to move the primary cell.The enum value is maybe one of the following: UP(0),RIGHT(1), DOWN(2), LEFT(3).\n     * @returns {FRange | null} The next primary cell in the specified direction.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * // make sure the active cell is A1 and selection is A1:B2\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.activate();\n     *\n     * // get the next cell in the right direction, and update the primary cell to the next cell, now the active cell is B1\n     * let fSelection = fWorksheet.getSelection();\n     * const nextCell = fSelection.getNextDataRange(univerAPI.Enum.Direction.RIGHT);\n     * console.log(nextCell?.getA1Notation()); // B1\n     * fSelection = fSelection.updatePrimaryCell(nextCell);\n     *\n     * // get the next cell in the right direction, the next cell is A2\n     * const nextCell2 = fSelection.getNextDataRange(univerAPI.Enum.Direction.RIGHT);\n     * console.log(nextCell2?.getA1Notation()); // A2\n     * ```\n     */\n    getNextDataRange(direction: Direction): FRange | null {\n        const active = this._selections.find((selection) => !!selection.primary);\n        if (!active) {\n            return null;\n        }\n\n        const range = getNextPrimaryCell(this._selections.concat(), direction, this._worksheet);\n        if (range) {\n            return this._injector.createInstance(FRange, this._workbook, this._worksheet, range);\n        }\n        return null;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CellValue, CustomData, ICellData, IColumnData, IColumnRange, IDisposable, IFreeze, IObjectArrayPrimitiveType, IRange, IRowData, IRowRange, IStyleData, Nullable, Workbook, Worksheet } from '@univerjs/core';\nimport type { ISetColDataCommandParams, ISetGridlinesColorCommandParams, ISetRangeValuesMutationParams, ISetRowDataCommandParams, ISetTextWrapCommandParams, IToggleGridlinesCommandParams } from '@univerjs/sheets';\nimport type { FDefinedName } from './f-defined-name';\nimport type { FWorkbook } from './f-workbook';\nimport { BooleanNumber, Direction, ICommandService, ILogService, Inject, Injector, ObjectMatrix, RANGE_TYPE, WrapStrategy } from '@univerjs/core';\nimport { FBaseInitialable } from '@univerjs/core/facade';\nimport { deserializeRangeWithSheet } from '@univerjs/engine-formula';\nimport { AppendRowCommand, CancelFrozenCommand, ClearSelectionAllCommand, ClearSelectionContentCommand, ClearSelectionFormatCommand, copyRangeStyles, InsertColByRangeCommand, InsertRowByRangeCommand, MoveColsCommand, MoveRowsCommand, RemoveColByRangeCommand, RemoveRowByRangeCommand, SetColDataCommand, SetColHiddenCommand, SetColWidthCommand, SetFrozenCommand, SetGridlinesColorCommand, SetRangeValuesMutation, SetRowDataCommand, SetRowHeightCommand, SetRowHiddenCommand, SetSpecificColsVisibleCommand, SetSpecificRowsVisibleCommand, SetTabColorCommand, SetTextWrapCommand, SetWorksheetDefaultStyleMutation, SetWorksheetHideCommand, SetWorksheetNameCommand, SetWorksheetRowIsAutoHeightCommand, SetWorksheetRowIsAutoHeightMutation, SetWorksheetShowCommand, SheetsSelectionsService, ToggleGridlinesCommand } from '@univerjs/sheets';\nimport { FDefinedNameBuilder } from './f-defined-name';\nimport { FRange } from './f-range';\nimport { FSelection } from './f-selection';\nimport { covertCellValue, covertToColRange, covertToRowRange } from './utils';\n\nexport interface IFacadeClearOptions {\n    contentsOnly?: boolean;\n    formatOnly?: boolean;\n}\n\n/**\n * A Facade API object bounded to a worksheet. It provides a set of methods to interact with the worksheet.\n * @hideconstructor\n */\nexport class FWorksheet extends FBaseInitialable {\n    /**\n     * Creates a new worksheet facade instance\n     * @param {FWorkbook} _fWorkbook - The facade workbook instance\n     * @param {Workbook} _workbook - The workbook instance\n     * @param {Worksheet} _worksheet - The worksheet instance\n     * @param {Injector} _injector - The injector instance\n     * @param {SheetsSelectionsService} _selectionManagerService - The selection manager service\n     * @param {ILogService} _logService - The log service\n     * @param {ICommandService} _commandService - The command service\n     */\n    constructor(\n        protected readonly _fWorkbook: FWorkbook,\n        protected readonly _workbook: Workbook,\n        protected readonly _worksheet: Worksheet,\n        @Inject(Injector) protected override readonly _injector: Injector,\n        @Inject(SheetsSelectionsService) protected readonly _selectionManagerService: SheetsSelectionsService,\n        @Inject(ILogService) protected readonly _logService: ILogService,\n        @ICommandService protected readonly _commandService: ICommandService\n    ) {\n        super(_injector);\n    }\n\n    /**\n     * Get the worksheet instance.\n     * @returns {Worksheet} The worksheet instance.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * const sheet = fWorksheet.getSheet();\n     * console.log(sheet);\n     * ```\n     */\n    getSheet(): Worksheet {\n        return this._worksheet;\n    }\n\n    /**\n     * Get the injector instance.\n     * @returns {Injector} The injector instance.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * const injector = fWorksheet.getInject();\n     * console.log(injector);\n     * ```\n     */\n    getInject(): Injector {\n        return this._injector;\n    }\n\n    /**\n     * Get the workbook instance.\n     * @returns {Workbook} The workbook instance.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * const workbook = fWorksheet.getWorkbook();\n     * console.log(workbook);\n     * ```\n     */\n    getWorkbook(): Workbook {\n        return this._workbook;\n    }\n\n    /**\n     * Get the worksheet id.\n     * @returns {string} The id of the worksheet.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * const sheetId = fWorksheet.getSheetId();\n     * console.log(sheetId);\n     * ```\n     */\n    getSheetId(): string {\n        return this._worksheet.getSheetId();\n    }\n\n    /**\n     * Get the worksheet name.\n     * @returns {string} The name of the worksheet.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * const sheetName = fWorksheet.getSheetName();\n     * console.log(sheetName);\n     * ```\n     */\n    getSheetName(): string {\n        return this._worksheet.getName();\n    }\n\n    /**\n     * Get the current selection of the worksheet.\n     * @returns {FSelection} return the current selections of the worksheet or null if there is no selection.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * const selection = fWorksheet.getSelection();\n     * console.log(selection);\n     * ```\n     */\n    getSelection(): FSelection | null {\n        const selections = this._selectionManagerService.getCurrentSelections();\n        if (!selections) {\n            return null;\n        }\n\n        return this._injector.createInstance(FSelection, this._workbook, this._worksheet, selections);\n    }\n\n    // #region rows\n\n    // #region default style\n\n    /**\n     * Get the default style of the worksheet.\n     * @returns {IStyleData} Default style of the worksheet.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * const defaultStyle = fWorksheet.getDefaultStyle();\n     * console.log(defaultStyle);\n     * ```\n     */\n    getDefaultStyle(): Nullable<IStyleData> | string {\n        return this._worksheet.getDefaultCellStyle();\n    }\n\n    /**\n     * Get the default style of the worksheet row\n     * @param {number} index - The row index\n     * @param {boolean} [keepRaw] - If true, return the raw style data maybe the style name or style data, otherwise return the data from row manager\n     * @returns {(Nullable<IStyleData> | string)} The default style of the worksheet row name or style data\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Get default style for row 0 (1)\n     * const rowStyle = fWorksheet.getRowDefaultStyle(0);\n     * console.log(rowStyle);\n     * // Get raw style data for row 0\n     * const rawRowStyle = fWorksheet.getRowDefaultStyle(0, true);\n     * console.log(rawRowStyle);\n     * ```\n     */\n    getRowDefaultStyle(index: number, keepRaw: boolean = false): Nullable<IStyleData> | string {\n        // TODO@VicKun4937: should use function overload here\n        return keepRaw ? this._worksheet.getRowStyle(index, keepRaw) : this._worksheet.getRowStyle(index);\n    }\n\n    /**\n     * Get the default style of the worksheet column\n     * @param {number} index - The column index\n     * @param {boolean} [keepRaw] - If true, return the raw style data maybe the style name or style data, otherwise return the data from col manager\n     * @returns {(Nullable<IStyleData> | string)} The default style of the worksheet column name or style data\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Get default style for column 0 (A)\n     * const colStyle = fWorksheet.getColumnDefaultStyle(0);\n     * console.log(colStyle);\n     * // Get raw style data for column 0\n     * const rawColStyle = fWorksheet.getColumnDefaultStyle(0, true);\n     * console.log(rawColStyle);\n     * ```\n     */\n    getColumnDefaultStyle(index: number, keepRaw: boolean = false): Nullable<IStyleData> | string {\n        // TODO@VicKun4937: should use function overload here\n        return keepRaw ? this._worksheet.getColumnStyle(index, keepRaw) : this._worksheet.getColumnStyle(index);\n    }\n\n    /**\n     * Set the default style of the worksheet\n     * @param {string} style - The style to set\n     * @returns {FWorksheet} This worksheet instance for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * fWorksheet.setDefaultStyle('default');\n     * // or\n     * // fWorksheet.setDefaultStyle({fs: 12, ff: 'Arial'});\n     * ```\n     */\n    setDefaultStyle(style: string | Nullable<IStyleData>): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        this._commandService.syncExecuteCommand(SetWorksheetDefaultStyleMutation.id, {\n            unitId,\n            subUnitId,\n            defaultStyle: style,\n        });\n        this._worksheet.setDefaultCellStyle(style);\n        return this;\n    }\n\n    /**\n     * Set the default style of the worksheet row\n     * @param {number} index - The row index\n     * @param {string | Nullable<IStyleData>} style - The style name or style data\n     * @returns {FWorksheet} This sheet, for chaining.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * fWorksheet.setColumnDefaultStyle(0, 'default');\n     * // or\n     * // fWorksheet.setColumnDefaultStyle(0, {fs: 12, ff: 'Arial'});\n     * ```\n     */\n    setColumnDefaultStyle(index: number, style: string | Nullable<IStyleData>): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n\n        const params: ISetColDataCommandParams = {\n            unitId,\n            subUnitId,\n            columnData: {\n                [index]: {\n                    s: style,\n                },\n            },\n        };\n\n        this._commandService.syncExecuteCommand(SetColDataCommand.id, params);\n        return this;\n    }\n\n    /**\n     * Set the default style of the worksheet column\n     * @param {number} index - The column index\n     * @param {string | Nullable<IStyleData>} style - The style name or style data\n     * @returns {FWorksheet} This sheet, for chaining.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * fWorksheet.setRowDefaultStyle(0, 'default');\n     * // or\n     * // fWorksheet.setRowDefaultStyle(0, {fs: 12, ff: 'Arial'});\n     * ```\n     */\n    setRowDefaultStyle(index: number, style: string | Nullable<IStyleData>): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n\n        const params: ISetRowDataCommandParams = {\n            unitId,\n            subUnitId,\n            rowData: {\n                [index]: {\n                    s: style,\n                },\n            },\n        };\n\n        this._commandService.syncExecuteCommand(SetRowDataCommand.id, params);\n        return this;\n    }\n\n    // #endregion\n\n    /**\n     * Returns a Range object representing a single cell at the specified row and column.\n     * @param {number} row - The row index of the cell.\n     * @param {number} column - The column index of the cell.\n     * @returns {FRange} A Range object representing the specified cell.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Get range for cell at row 0, column 0 (A1)\n     * const range = fWorksheet.getRange(0, 0);\n     * console.log(range);\n     * ```\n     */\n    getRange(row: number, column: number): FRange;\n    /**\n     * Returns a Range object representing a range starting at the specified row and column, with the specified number of rows.\n     * @param {number} row - The starting row index of the range.\n     * @param {number} column - The starting column index of the range.\n     * @param {number} numRows - The number of rows in the range.\n     * @returns {FRange} A Range object representing the specified range.\n     */\n    getRange(row: number, column: number, numRows: number): FRange;\n    /**\n     * Returns a Range object representing a range starting at the specified row and column, with the specified number of rows and columns.\n     * @param {number} row - The starting row index of the range.\n     * @param {number} column - The starting column index of the range.\n     * @param {number} numRows - The number of rows in the range.\n     * @param {number} numColumns - The number of columns in the range.\n     * @returns {FRange} A Range object representing the specified range.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Get range for cells A1:C3\n     * const range = fWorksheet.getRange(0, 0, 3, 3);\n     * console.log(range);\n     * ```\n     */\n    getRange(row: number, column: number, numRows: number, numColumns: number): FRange;\n    /**\n     * Returns a Range object specified by A1 notation.\n     * @param {string} a1Notation - A string representing a range in A1 notation.\n     * @returns {FRange} A Range object representing the specified range.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Get range for cells A1:C3\n     * const range = fWorksheet.getRange(\"A1:C3\");\n     * console.log(range);\n     * // Get range for a single cell\n     * const cell = fWorksheet.getRange(\"B2\");\n     * console.log(cell);\n     * // Get range with sheet name\n     * const sheetName = fWorksheet.getSheetName();\n     * const rangeWithSheet = fWorksheet.getRange(`${sheetName}!A1:C3`);\n     * console.log(rangeWithSheet);\n     * ```\n     */\n    getRange(a1Notation: string): FRange;\n    /**\n     * Returns a Range object for the specified range.\n     * @param {IRange} range - The range specification.\n     * @returns {FRange} A Range object representing the specified range.\n     */\n    getRange(range: IRange): FRange;\n    getRange(rowOrA1Notation: IRange | number | string, column?: number, numRows?: number, numColumns?: number): FRange {\n        let range: IRange;\n        let sheet: Worksheet;\n\n        if (typeof rowOrA1Notation === 'object') {\n            range = rowOrA1Notation;\n            sheet = this._worksheet;\n        } else if (typeof rowOrA1Notation === 'string') {\n            // A1 notation\n            const { range: parsedRange, sheetName } = deserializeRangeWithSheet(rowOrA1Notation);\n\n            const rangeSheet = sheetName ? this._workbook.getSheetBySheetName(sheetName) : this._worksheet;\n            if (!rangeSheet) {\n                throw new Error('Range not found');\n            }\n            sheet = rangeSheet;\n\n            range = {\n                ...parsedRange,\n                unitId: this._workbook.getUnitId(),\n                sheetId: sheet.getSheetId(),\n                // Use the current range instead of the future actual range to match Apps Script behavior.\n                // Users can create the latest range in real time when needed.\n                rangeType: RANGE_TYPE.NORMAL,\n                startRow: parsedRange.rangeType === RANGE_TYPE.COLUMN ? 0 : parsedRange.startRow,\n                endRow: parsedRange.rangeType === RANGE_TYPE.COLUMN ? sheet.getMaxRows() - 1 : parsedRange.endRow,\n                startColumn: parsedRange.rangeType === RANGE_TYPE.ROW ? 0 : parsedRange.startColumn,\n                endColumn: parsedRange.rangeType === RANGE_TYPE.ROW ? sheet.getMaxColumns() - 1 : parsedRange.endColumn,\n            };\n        } else if (typeof rowOrA1Notation === 'number' && column !== undefined) {\n            sheet = this._worksheet;\n            // Range\n            range = {\n                startRow: rowOrA1Notation,\n                endRow: rowOrA1Notation + (numRows ?? 1) - 1,\n                startColumn: column,\n                endColumn: column + (numColumns ?? 1) - 1,\n                unitId: this._workbook.getUnitId(),\n                sheetId: this._worksheet.getSheetId(),\n            };\n        } else {\n            throw new Error('Invalid range specification');\n        }\n\n        return this._injector.createInstance(FRange, this._workbook, sheet, range);\n    }\n\n    /**\n     * Returns the current number of columns in the sheet, regardless of content.\n     * @returns {number} The maximum columns count of the sheet\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * const totalColumns = fWorksheet.getMaxColumns();\n     * console.log(`Sheet has ${totalColumns} columns`);\n     * ```\n     */\n    getMaxColumns(): number {\n        return this._worksheet.getMaxColumns();\n    }\n\n    /**\n     * Returns the current number of rows in the sheet, regardless of content.\n     * @returns {number}The maximum rows count of the sheet\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * const totalRows = fWorksheet.getMaxRows();\n     * console.log(`Sheet has ${totalRows} rows`);\n     * ```\n     */\n    getMaxRows(): number {\n        return this._worksheet.getMaxRows();\n    }\n\n    /**\n     * Inserts a row after the given row position.\n     * @param {number} afterPosition - The row after which the new row should be added, starting at 0 for the first row.\n     * @returns {FWorksheet} This sheet, for chaining.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Insert a row after the third row\n     * fWorksheet.insertRowAfter(2);\n     * // Insert a row after the first row\n     * fWorksheet.insertRowAfter(0);\n     * ```\n     */\n    insertRowAfter(afterPosition: number): FWorksheet {\n        return this.insertRowsAfter(afterPosition, 1);\n    }\n\n    /**\n     * Inserts a row before the given row position.\n     * @param {number} beforePosition - The row before which the new row should be added, starting at 0 for the first row.\n     * @returns {FWorksheet} This sheet, for chaining.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Insert a row before the third row\n     * fWorksheet.insertRowBefore(2);\n     * // Insert a row before the first row\n     * fWorksheet.insertRowBefore(0);\n     * ```\n     */\n    insertRowBefore(beforePosition: number): FWorksheet {\n        return this.insertRowsBefore(beforePosition, 1);\n    }\n\n    /**\n     * Inserts one or more consecutive blank rows in a sheet starting at the specified location.\n     * @param {number} rowIndex - The index indicating where to insert a row, starting at 0 for the first row.\n     * @param {number} numRows - The number of rows to insert.\n     * @returns {FWorksheet} This sheet, for chaining.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Insert 3 rows before the third row\n     * fWorksheet.insertRows(2, 3);\n     * // Insert 1 row before the first row\n     * fWorksheet.insertRows(0);\n     * ```\n     */\n    insertRows(rowIndex: number, numRows: number = 1): FWorksheet {\n        return this.insertRowsBefore(rowIndex, numRows);\n    }\n\n    /**\n     * Inserts a number of rows after the given row position.\n     * @param {number} afterPosition - The row after which the new rows should be added, starting at 0 for the first row.\n     * @param {number} howMany - The number of rows to insert.\n     * @returns {FWorksheet} This sheet, for chaining.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Insert 3 rows after the third row\n     * fWorksheet.insertRowsAfter(2, 3);\n     * // Insert 1 row after the first row\n     * fWorksheet.insertRowsAfter(0, 1);\n     * ```\n     */\n    insertRowsAfter(afterPosition: number, howMany: number): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const direction = Direction.DOWN;\n\n        const startRow = afterPosition + 1;\n        const endRow = afterPosition + howMany;\n        const startColumn = 0;\n        const endColumn = this._worksheet.getColumnCount() - 1;\n\n        // copy styles of the row below\n        const cellValue = copyRangeStyles(this._worksheet, startRow, endRow, startColumn, endColumn, true, afterPosition);\n\n        this._commandService.syncExecuteCommand(InsertRowByRangeCommand.id, {\n            unitId,\n            subUnitId,\n            direction,\n            range: {\n                startRow,\n                endRow,\n                startColumn,\n                endColumn,\n            },\n            cellValue,\n        });\n\n        return this;\n    }\n\n    /**\n     * Inserts a number of rows before the given row position.\n     * @param {number} beforePosition - The row before which the new rows should be added, starting at 0 for the first row.\n     * @param {number} howMany - The number of rows to insert.\n     * @returns {FWorksheet} This sheet, for chaining.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Insert 3 rows before the third row\n     * fWorksheet.insertRowsBefore(2, 3);\n     * // Insert 1 row before the first row\n     * fWorksheet.insertRowsBefore(0, 1);\n     * ```\n     */\n    insertRowsBefore(beforePosition: number, howMany: number): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const direction = Direction.UP;\n\n        const startRow = beforePosition;\n        const endRow = beforePosition + howMany - 1;\n        const startColumn = 0;\n        const endColumn = this._worksheet.getColumnCount() - 1;\n\n        // copy styles of the row above\n        const cellValue = copyRangeStyles(this._worksheet, startRow, endRow, startColumn, endColumn, true, beforePosition - 1);\n\n        this._commandService.syncExecuteCommand(InsertRowByRangeCommand.id, {\n            unitId,\n            subUnitId,\n            direction,\n            range: {\n                startRow,\n                endRow,\n                startColumn,\n                endColumn,\n            },\n            cellValue,\n        });\n\n        return this;\n    }\n\n    /**\n     * Deletes the row at the given row position.\n     * @param {number} rowPosition - The position of the row, starting at 0 for the first row.\n     * @returns {FWorksheet} This sheet, for chaining.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Delete the third row\n     * fWorksheet.deleteRow(2);\n     * // Delete the first row\n     * fWorksheet.deleteRow(0);\n     * ```\n     */\n    deleteRow(rowPosition: number): FWorksheet {\n        return this.deleteRows(rowPosition, 1);\n    }\n\n    /**\n     * Deletes a number of rows starting at the given row position.\n     * @param {number} rowPosition - The position of the first row to delete, starting at 0 for the first row.\n     * @param {number} howMany - The number of rows to delete.\n     * @returns {FWorksheet} This sheet, for chaining.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Delete 3 rows at row index 2 (rows 3-5)\n     * fWorksheet.deleteRows(2, 3);\n     * // Delete 1 row at row index 0 (first row)\n     * fWorksheet.deleteRows(0, 1);\n     * ```\n     */\n    deleteRows(rowPosition: number, howMany: number): FWorksheet {\n        const range = {\n            startRow: rowPosition,\n            endRow: rowPosition + howMany - 1,\n            startColumn: 0,\n            endColumn: this._worksheet.getColumnCount() - 1,\n        };\n\n        this._commandService.syncExecuteCommand(RemoveRowByRangeCommand.id, {\n            range,\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n        });\n\n        return this;\n    }\n\n    /**\n     * Moves the rows selected by the given range to the position indicated by the destinationIndex. The rowSpec itself does not have to exactly represent an entire row or group of rows to move\u2014it selects all rows that the range spans.\n     * @param {FRange} rowSpec - A range spanning the rows that should be moved.\n     * @param {number} destinationIndex - The index that the rows should be moved to. Note that this index is based on the coordinates before the rows are moved. Existing data is shifted down to make room for the moved rows while the source rows are removed from the grid. Therefore, the data may end up at a different index than originally specified. Use 0-index for this method.\n     * @returns {FWorksheet} This sheet, for chaining.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Move 3 rows at row index 2 (rows 3-5) to row index 0\n     * const rowSpec1 = fWorksheet.getRange('3:5');\n     * fWorksheet.moveRows(rowSpec1, 0);\n     * // Move 1 row at row index 0 (first row) to row index 2\n     * const rowSpec2 = fWorksheet.getRange('1:1');\n     * fWorksheet.moveRows(rowSpec2, 2);\n     * ```\n     */\n    moveRows(rowSpec: FRange, destinationIndex: number): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const range = covertToRowRange(rowSpec.getRange(), this._worksheet);\n        const fromRange = range;\n        const toRange = {\n            startRow: destinationIndex,\n            endRow: destinationIndex,\n            startColumn: range.startColumn,\n            endColumn: range.endColumn,\n        };\n\n        this._commandService.syncExecuteCommand(MoveRowsCommand.id, {\n            unitId,\n            subUnitId,\n            range,\n            fromRange,\n            toRange,\n        });\n\n        return this;\n    }\n\n    /**\n     * Hides the rows in the given range.\n     * @param {FRange} row - The row range to hide.\n     * @returns {FWorksheet} This sheet, for chaining.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Hide 3 rows starting from row index 1 (rows 2-4)\n     * const row1 = fWorksheet.getRange('2:4');\n     * fWorksheet.hideRow(row1);\n     * // Hide single row at index 0 (first row)\n     * const row2 = fWorksheet.getRange('1:1');\n     * fWorksheet.hideRow(row2);\n     * ```\n     */\n    hideRow(row: FRange): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const range = covertToRowRange(row.getRange(), this._worksheet);\n\n        this._commandService.syncExecuteCommand(SetRowHiddenCommand.id, {\n            unitId,\n            subUnitId,\n            ranges: [range],\n        });\n\n        return this;\n    }\n\n    /**\n     * Hides one or more consecutive rows starting at the given index. Use 0-index for this method\n     * @param {number} rowIndex - The starting index of the rows to hide\n     * @param {number} numRow - The number of rows to hide\n     * @returns {FWorksheet} This sheet, for chaining.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Hide 3 rows starting from row index 1 (rows 2-4)\n     * fWorksheet.hideRows(1, 3);\n     * // Hide single row at index 0 (first row)\n     * fWorksheet.hideRows(0);\n     * ```\n     */\n    hideRows(rowIndex: number, numRow: number = 1): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const range: IRange = {\n            startRow: rowIndex,\n            endRow: rowIndex + numRow - 1,\n            startColumn: 0,\n            endColumn: this._worksheet.getColumnCount() - 1,\n            rangeType: RANGE_TYPE.ROW,\n        };\n\n        this._commandService.syncExecuteCommand(SetRowHiddenCommand.id, {\n            unitId,\n            subUnitId,\n            ranges: [range],\n        });\n        return this;\n    }\n\n    /**\n     * Make the row in the given range visible.\n     * @param {FRange} row - The range to unhide, if hidden.\n     * @returns {FWorksheet} This sheet, for chaining.\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Unhide 3 rows starting from row index 1 (rows 2-4)\n     * const row1 = fWorksheet.getRange('2:4');\n     * fWorksheet.unhideRow(row1);\n     * // Unhide single row at index 0 (first row)\n     * const row2 = fWorksheet.getRange('1:1');\n     * fWorksheet.unhideRow(row2);\n     * ```\n     */\n    unhideRow(row: FRange): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const range = covertToRowRange(row.getRange(), this._worksheet);\n\n        this._commandService.syncExecuteCommand(SetSpecificRowsVisibleCommand.id, {\n            unitId,\n            subUnitId,\n            ranges: [range],\n        });\n\n        return this;\n    }\n\n    /**\n     * Scrolling sheet to make specific rows visible.\n     * @param {number} rowIndex - The starting index of the rows\n     * @param {number} numRows - The number of rows\n     * @returns {FWorksheet} This worksheet instance for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Show 3 rows starting from row index 1 (rows 2-4)\n     * fWorksheet.showRows(1, 3);\n     * // Show single row at index 0 (first row)\n     * fWorksheet.showRows(0);\n     * ```\n     */\n    showRows(rowIndex: number, numRows: number = 1): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const range: IRange = {\n            startRow: rowIndex,\n            endRow: rowIndex + numRows - 1,\n            startColumn: 0,\n            endColumn: this._worksheet.getColumnCount() - 1,\n            rangeType: RANGE_TYPE.ROW,\n        };\n\n        this._commandService.syncExecuteCommand(SetSpecificRowsVisibleCommand.id, {\n            unitId,\n            subUnitId,\n            ranges: [range],\n        });\n\n        return this;\n    }\n\n    /**\n     * Sets the row height of the given row in pixels. By default, rows grow to fit cell contents. If you want to force rows to a specified height, use setRowHeightsForced(startRow, numRows, height).\n     * @param {number} rowPosition - The row position to change.\n     * @param {number} height - The height in pixels to set it to.\n     * @returns {FWorksheet} This worksheet instance for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Set the height of the second row to 30 pixels\n     * fWorksheet.setRowHeight(1, 30);\n     * // Set the height of the first row to 20 pixels\n     * fWorksheet.setRowHeight(0, 20);\n     * ```\n     */\n    setRowHeight(rowPosition: number, height: number): FWorksheet {\n        return this.setRowHeights(rowPosition, 1, height);\n    }\n\n    /**\n     * Make certain row wrap and auto height.\n     * @param {number} rowPosition - The row position to change.\n     * @param {BooleanNumber} auto - Whether to auto fit the row height.\n     * @returns {FWorksheet} This worksheet instance for chaining\n     * @example\n     * ```ts\n     * const fWorkSheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * fWorkSheet.autoFitRow(24);\n     * ```\n     */\n    autoFitRow(rowPosition: number, auto: BooleanNumber = BooleanNumber.TRUE): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const ranges = [{\n            startRow: rowPosition,\n            endRow: rowPosition,\n            startColumn: 0,\n            endColumn: this._worksheet.getColumnCount() - 1,\n        }];\n        this._commandService.syncExecuteCommand(SetTextWrapCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: ranges[0],\n            value: WrapStrategy.WRAP,\n        } as ISetTextWrapCommandParams);\n        this._commandService.syncExecuteCommand(SetWorksheetRowIsAutoHeightMutation.id, {\n            unitId,\n            subUnitId,\n            ranges,\n            autoHeightInfo: auto,\n        });\n        return this;\n    }\n\n    /**\n     * Sets the height of the given rows in pixels.\n     * By default, rows grow to fit cell contents. If you want to force rows to a specified height, use setRowHeightsForced(startRow, numRows, height).\n     * @param {number} startRow - The starting row position to change\n     * @param {number} numRows - The number of rows to change\n     * @param {number} height - The height in pixels to set it to\n     * @returns {FWorksheet} This worksheet instance for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * fWorksheet.setRowHeights(1, 10, 30);\n     * ```\n     */\n    setRowHeights(startRow: number, numRows: number, height: number): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const rowManager = this._worksheet.getRowManager();\n\n        const autoHeightRanges: IRange[] = [];\n        const rowHeightRanges: IRange[] = [];\n\n        for (let i = startRow; i < startRow + numRows; i++) {\n            const autoRowHeight = rowManager.getRow(i)?.ah || this._worksheet.getConfig().defaultRowHeight;\n            const range = {\n                startRow: i,\n                endRow: i,\n                startColumn: 0,\n                endColumn: this._worksheet.getColumnCount() - 1,\n            };\n\n            // if the new height is less than the current height, set auto height\n            if (height <= autoRowHeight) {\n                autoHeightRanges.push(range);\n            } else { // if the new height is greater than the current height, set the new height\n                rowHeightRanges.push(range);\n            }\n        }\n\n        if (rowHeightRanges.length > 0) {\n            this._commandService.syncExecuteCommand(SetRowHeightCommand.id, {\n                unitId,\n                subUnitId,\n                ranges: rowHeightRanges,\n                value: height,\n            });\n        }\n\n        if (autoHeightRanges.length > 0) {\n            this._commandService.syncExecuteCommand(SetWorksheetRowIsAutoHeightCommand.id, {\n                unitId,\n                subUnitId,\n                ranges: autoHeightRanges,\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * Gets the height in pixels of the given row.\n     * @param {number} rowPosition - The position of the row to examine. index starts at 0.\n     * @returns {number} The height in pixels of the given row.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set the value of the cell A1 to 'Hello, Univer!', set the font size to 30 and font weight to bold\n     * const fRange = fWorksheet.getRange('A1');\n     * fRange.setValue('Hello, Univer!').setFontSize(30).setFontWeight('bold');\n     *\n     * // Get the height of the first row\n     * console.log(fWorksheet.getRowHeight(0));\n     * ```\n     */\n    getRowHeight(rowPosition: number): number {\n        return this._worksheet.getRowHeight(rowPosition);\n    }\n\n    /**\n     * Sets the height of the given rows to auto.\n     * @param {number} startRow - The starting row position to change\n     * @param {number} numRows - The number of rows to change\n     * @returns {FWorksheet} This worksheet instance for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * fWorksheet.setRowAutoHeight(1, 10);\n     * ```\n     */\n    setRowAutoHeight(startRow: number, numRows: number): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const ranges = [\n            {\n                startRow,\n                endRow: startRow + numRows - 1,\n                startColumn: 0,\n                endColumn: this._worksheet.getColumnCount() - 1,\n            },\n        ];\n\n        this._commandService.syncExecuteCommand(SetWorksheetRowIsAutoHeightCommand.id, {\n            unitId,\n            subUnitId,\n            ranges,\n        });\n\n        return this;\n    }\n\n    /**\n     * Sets the height of the given ranges to auto.\n     * @param {IRange[]} ranges - The ranges to change\n     * @returns {FWorksheet} This worksheet instance for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * const ranges = [\n     * { startRow: 1, endRow: 10, startColumn: 0, endColumn: 10 },\n     * { startRow: 11, endRow: 20, startColumn: 0, endColumn: 10 },\n     * ]\n     * fWorksheet.setRangesAutoHeight(ranges);\n     * ```\n     */\n    setRangesAutoHeight(ranges: IRange[]): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        this._commandService.syncExecuteCommand(SetWorksheetRowIsAutoHeightCommand.id, {\n            unitId,\n            subUnitId,\n            ranges,\n        });\n\n        return this;\n    }\n\n    /**\n     * Sets the height of the given rows in pixels. By default, rows grow to fit cell contents. When you use setRowHeightsForced, rows are forced to the specified height even if the cell contents are taller than the row height.\n     * @param {number} startRow - The starting row position to change\n     * @param {number} numRows - The number of rows to change\n     * @param {number} height - The height in pixels to set it to\n     * @returns {FWorksheet} This worksheet instance for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * fWorksheet.setRowHeightsForced(1, 10, 30);\n     * ```\n     */\n    setRowHeightsForced(startRow: number, numRows: number, height: number): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const ranges = [\n            {\n                startRow,\n                endRow: startRow + numRows - 1,\n                startColumn: 0,\n                endColumn: this._worksheet.getColumnCount() - 1,\n            },\n        ];\n\n        this._commandService.syncExecuteCommand(SetRowHeightCommand.id, {\n            unitId,\n            subUnitId,\n            ranges,\n            value: height,\n        });\n\n        return this;\n    }\n\n    // #endregion\n\n    /**\n     * Set custom properties for given rows.\n     * @param {IObjectArrayPrimitiveType<CustomData>} custom - The custom properties to set\n     * @returns {FWorksheet} This worksheet instance for chaining\n     * @example\n     * ```typescript\n     * const fWorkSheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * fWorkSheet.setRowCustom({ 0: { key: 'value' } });\n     * ```\n     */\n    setRowCustom(custom: IObjectArrayPrimitiveType<CustomData>): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n\n        const rowData: IObjectArrayPrimitiveType<Nullable<IRowData>> = {};\n        for (const [rowIndex, customData] of Object.entries(custom)) {\n            rowData[Number(rowIndex)] = {\n                custom: customData,\n            };\n        }\n\n        const params: ISetRowDataCommandParams = {\n            unitId,\n            subUnitId,\n            rowData,\n        };\n\n        this._commandService.syncExecuteCommand(SetRowDataCommand.id, params);\n\n        return this;\n    }\n\n    // #region Column\n\n    /**\n     * Inserts a column after the given column position.\n     * @param {number} afterPosition - The column after which the new column should be added, starting at 0 for the first column\n     * @returns {FWorksheet} This worksheet instance for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Insert a column after column C\n     * fWorksheet.insertColumnAfter(2);\n     * // Insert a column after column A\n     * fWorksheet.insertColumnAfter(0);\n     * ```\n     */\n    insertColumnAfter(afterPosition: number): FWorksheet {\n        return this.insertColumnsAfter(afterPosition, 1);\n    }\n\n    /**\n     * Inserts a column before the given column position.\n     * @param {number} beforePosition - The column before which the new column should be added, starting at 0 for the first column\n     * @returns {FWorksheet} This worksheet instance for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Insert a column before column C\n     * fWorksheet.insertColumnBefore(2);\n     * // Insert a column before column A\n     * fWorksheet.insertColumnBefore(0);\n     * ```\n     */\n    insertColumnBefore(beforePosition: number): FWorksheet {\n        return this.insertColumnsBefore(beforePosition, 1);\n    }\n\n    /**\n     * Inserts one or more consecutive blank columns in a sheet starting at the specified location.\n     * @param {number} columnIndex - The index indicating where to insert a column, starting at 0 for the first column\n     * @param {number} numColumns - The number of columns to insert\n     * @returns {FWorksheet} This sheet, for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Insert 3 columns before column C\n     * fWorksheet.insertColumns(2, 3);\n     * // Insert 1 column before column A\n     * fWorksheet.insertColumns(0);\n     * ```\n     */\n    insertColumns(columnIndex: number, numColumns: number = 1): FWorksheet {\n        return this.insertColumnsBefore(columnIndex, numColumns);\n    }\n\n    /**\n     * Inserts a given number of columns after the given column position.\n     * @param {number} afterPosition - The column after which the new columns should be added, starting at 0 for the first column\n     * @param {number} howMany - The number of columns to insert\n     * @returns {FWorksheet} This sheet, for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Insert 3 columns after column C\n     * fWorksheet.insertColumnsAfter(2, 3);\n     * // Insert 1 column after column A\n     * fWorksheet.insertColumnsAfter(0, 1);\n     * ```\n     */\n    insertColumnsAfter(afterPosition: number, howMany: number): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const direction = Direction.RIGHT;\n\n        const startRow = 0;\n        const endRow = this._worksheet.getRowCount() - 1;\n        const startColumn = afterPosition + 1;\n        const endColumn = afterPosition + howMany;\n\n        // copy styles of the column to the right\n        const cellValue = copyRangeStyles(this._worksheet, startRow, endRow, startColumn, endColumn, false, afterPosition);\n\n        this._commandService.syncExecuteCommand(InsertColByRangeCommand.id, {\n            unitId,\n            subUnitId,\n            direction,\n            range: {\n                startRow,\n                endRow,\n                startColumn,\n                endColumn,\n            },\n            cellValue,\n        });\n\n        return this;\n    }\n\n    /**\n     * Inserts a number of columns before the given column position.\n     * @param {number} beforePosition - The column before which the new columns should be added, starting at 0 for the first column\n     * @param {number} howMany - The number of columns to insert\n     * @returns {FWorksheet} This sheet, for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Insert 3 columns before column C\n     * fWorksheet.insertColumnsBefore(2, 3);\n     * // Insert 1 column before column A\n     * fWorksheet.insertColumnsBefore(0, 1);\n     * ```\n     */\n    insertColumnsBefore(beforePosition: number, howMany: number): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const direction = Direction.LEFT;\n\n        const startRow = 0;\n        const endRow = this._worksheet.getRowCount() - 1;\n        const startColumn = beforePosition;\n        const endColumn = beforePosition + howMany - 1;\n\n        // copy styles of the column to the left\n        const cellValue = copyRangeStyles(this._worksheet, startRow, endRow, startColumn, endColumn, false, beforePosition - 1);\n\n        this._commandService.syncExecuteCommand(InsertColByRangeCommand.id, {\n            unitId,\n            subUnitId,\n            direction,\n            range: {\n                startRow,\n                endRow,\n                startColumn,\n                endColumn,\n            },\n            cellValue,\n        });\n\n        return this;\n    }\n\n    /**\n     * Deletes the column at the given column position.\n     * @param {number} columnPosition - The position of the column, starting at 0 for the first column\n     * @returns {FWorksheet} This sheet, for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Delete column C\n     * fWorksheet.deleteColumn(2);\n     * // Delete column A\n     * fWorksheet.deleteColumn(0);\n     * ```\n     */\n    deleteColumn(columnPosition: number): FWorksheet {\n        return this.deleteColumns(columnPosition, 1);\n    }\n\n    /**\n     * Deletes a number of columns starting at the given column position.\n     * @param {number} columnPosition - The position of the first column to delete, starting at 0 for the first column\n     * @param {number} howMany - The number of columns to delete\n     * @returns {FWorksheet} This sheet, for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Delete 3 columns at column index 2 (columns C, D, E)\n     * fWorksheet.deleteColumns(2, 3);\n     * // Delete 1 column at column index 0 (column A)\n     * fWorksheet.deleteColumns(0, 1);\n     * ```\n     */\n    deleteColumns(columnPosition: number, howMany: number): FWorksheet {\n        const range = {\n            startRow: 0,\n            endRow: this._worksheet.getRowCount() - 1,\n            startColumn: columnPosition,\n            endColumn: columnPosition + howMany - 1,\n        };\n\n        this._commandService.syncExecuteCommand(RemoveColByRangeCommand.id, {\n            range,\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n        });\n\n        return this;\n    }\n\n    /**\n     * Moves the columns selected by the given range to the position indicated by the destinationIndex. The columnSpec itself does not have to exactly represent an entire column or group of columns to move\u2014it selects all columns that the range spans.\n     * @param {FRange} columnSpec - A range spanning the columns that should be moved\n     * @param {number} destinationIndex - The index that the columns should be moved to. Note that this index is based on the coordinates before the columns are moved. Existing data is shifted right to make room for the moved columns while the source columns are removed from the grid. Therefore, the data may end up at a different index than originally specified. Use 0-index for this method\n     * @returns {FWorksheet} This sheet, for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Move columns C, D, E to column index 2 (columns B, C, D)\n     * const columnSpec1 = fWorksheet.getRange('C:E');\n     * fWorksheet.moveColumns(columnSpec1, 1);\n     * // Move column F to column index 0 (column A)\n     * const columnSpec2 = fWorksheet.getRange('F:F');\n     * fWorksheet.moveColumns(columnSpec2, 0);\n     * ```\n     */\n    moveColumns(columnSpec: FRange, destinationIndex: number): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const range = covertToColRange(columnSpec.getRange(), this._worksheet);\n        const fromRange = range;\n        const toRange = {\n            startRow: 0,\n            endRow: this._worksheet.getRowCount() - 1,\n            startColumn: destinationIndex,\n            endColumn: destinationIndex,\n        };\n\n        this._commandService.syncExecuteCommand(MoveColsCommand.id, {\n            unitId,\n            subUnitId,\n            range,\n            fromRange,\n            toRange,\n        });\n\n        return this;\n    }\n\n    /**\n     * Hides the column or columns in the given range.\n     * @param {FRange} column - The column range to hide\n     * @returns {FWorksheet} This sheet, for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Hide columns C, D, E\n     * const column1 = fWorksheet.getRange('C:E');\n     * fWorksheet.hideColumn(column1);\n     * // Hide column A\n     * const column2 = fWorksheet.getRange('A:A');\n     * fWorksheet.hideColumn(column2);\n     * ```\n     */\n    hideColumn(column: FRange): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const range = covertToColRange(column.getRange(), this._worksheet);\n\n        this._commandService.syncExecuteCommand(SetColHiddenCommand.id, {\n            unitId,\n            subUnitId,\n            ranges: [range],\n        });\n\n        return this;\n    }\n\n    /**\n     * Hides one or more consecutive columns starting at the given index. Use 0-index for this method\n     * @param {number} columnIndex - The starting index of the columns to hide\n     * @param {number} numColumn - The number of columns to hide\n     * @returns {FWorksheet} This sheet, for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Hide columns C, D, E\n     * fWorksheet.hideColumns(2, 3);\n     * // Hide column A\n     * fWorksheet.hideColumns(0, 1);\n     * ```\n     */\n    hideColumns(columnIndex: number, numColumn: number = 1): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const range: IRange = {\n            startRow: 0,\n            endRow: this._worksheet.getRowCount() - 1,\n            startColumn: columnIndex,\n            endColumn: columnIndex + numColumn - 1,\n            rangeType: RANGE_TYPE.COLUMN,\n        };\n\n        this._commandService.syncExecuteCommand(SetColHiddenCommand.id, {\n            unitId,\n            subUnitId,\n            ranges: [range],\n        });\n\n        return this;\n    }\n\n    /**\n     * Show the column in the given range.\n     * @param {FRange} column - The range to unhide, if hidden\n     * @returns {FWorksheet} This sheet, for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Unhide columns C, D, E\n     * const column1 = fWorksheet.getRange('C:E');\n     * fWorksheet.unhideColumn(column1);\n     * // Unhide column A\n     * const column2 = fWorksheet.getRange('A:A');\n     * fWorksheet.unhideColumn(column2);\n     * ```\n     */\n    unhideColumn(column: FRange): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const range = covertToColRange(column.getRange(), this._worksheet);\n\n        this._commandService.syncExecuteCommand(SetSpecificColsVisibleCommand.id, {\n            unitId,\n            subUnitId,\n            ranges: [range],\n        });\n\n        return this;\n    }\n\n    /**\n     * Show one or more consecutive columns starting at the given index. Use 0-index for this method\n     * @param {number} columnIndex - The starting index of the columns to unhide\n     * @param {number} numColumns - The number of columns to unhide\n     * @returns {FWorksheet} This sheet, for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Unhide columns C, D, E\n     * fWorksheet.showColumns(2, 3);\n     * // Unhide column A\n     * fWorksheet.showColumns(0, 1);\n     * ```\n     */\n    showColumns(columnIndex: number, numColumns: number = 1): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const range: IRange = {\n            startRow: 0,\n            endRow: this._worksheet.getRowCount() - 1,\n            startColumn: columnIndex,\n            endColumn: columnIndex + numColumns - 1,\n            rangeType: RANGE_TYPE.COLUMN,\n        };\n\n        this._commandService.syncExecuteCommand(SetSpecificColsVisibleCommand.id, {\n            unitId,\n            subUnitId,\n            ranges: [range],\n        });\n\n        return this;\n    }\n\n    /**\n     * Sets the width of the given column in pixels.\n     * @param {number} columnPosition - The position of the given column to set\n     * @param {number} width - The width in pixels to set it to\n     * @returns {FWorksheet} This sheet, for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Set width of column B to 100 pixels\n     * fWorksheet.setColumnWidth(1, 100);\n     * ```\n     */\n    setColumnWidth(columnPosition: number, width: number): FWorksheet {\n        return this.setColumnWidths(columnPosition, 1, width);\n    }\n\n    /**\n     * Sets the width of the given columns in pixels.\n     * @param {number} startColumn - The starting column position to change\n     * @param {number} numColumn - The number of columns to change\n     * @param {number} width - The width in pixels to set it to\n     * @returns {FWorksheet} This sheet, for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Set width of columns B-D (index 1-3) to 100 pixels\n     * fWorksheet.setColumnWidths(1, 3, 100);\n     * ```\n     */\n    setColumnWidths(startColumn: number, numColumn: number, width: number): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const ranges = [\n            {\n                startColumn,\n                endColumn: startColumn + numColumn - 1,\n                startRow: 0,\n                endRow: this._worksheet.getRowCount() - 1,\n            },\n        ];\n\n        this._commandService.syncExecuteCommand(SetColWidthCommand.id, {\n            unitId,\n            subUnitId,\n            ranges,\n            value: width,\n        });\n\n        return this;\n    }\n\n    /**\n     * Gets the width in pixels of the given column.\n     * @param {number} columnPosition - The position of the column to examine. index starts at 0.\n     * @returns {number} The width of the column in pixels\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set the long text value in cell A1\n     * const fRange = fWorksheet.getRange('A1');\n     * fRange.setValue('Whenever it is a damp, drizzly November in my soul...');\n     *\n     * // Set the column A to a width which fits the text\n     * fWorksheet.autoResizeColumn(0);\n     *\n     * // Get the width of the column A\n     * console.log(fWorksheet.getColumnWidth(0));\n     * ```\n     */\n    getColumnWidth(columnPosition: number): number {\n        return this._worksheet.getColumnWidth(columnPosition);\n    }\n\n    // #endregion\n\n    /**\n     * Set custom properties for given columns.\n     * @param {IObjectArrayPrimitiveType<CustomData>} custom - The custom properties to set\n     * @returns {FWorksheet} This worksheet instance for chaining\n     * @example\n     * ```ts\n     * const fWorkSheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * fWorkSheet.setColumnCustom({ 0: { key: 'value' } });\n     * ```\n     */\n    setColumnCustom(custom: IObjectArrayPrimitiveType<CustomData>): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n\n        const columnData: IObjectArrayPrimitiveType<Nullable<IColumnData>> = {};\n        for (const [columnIndex, customData] of Object.entries(custom)) {\n            columnData[Number(columnIndex)] = {\n                custom: customData,\n            };\n        }\n\n        const params: ISetColDataCommandParams = {\n            unitId,\n            subUnitId,\n            columnData,\n        };\n\n        this._commandService.syncExecuteCommand(SetColDataCommand.id, params);\n\n        return this;\n    }\n\n    // #region merge cells\n\n    /**\n     * Get all merged cells in the current worksheet\n     * @returns {FRange[]} All the merged cells in the worksheet\n     * @example\n     * ```ts\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Get all merged ranges in the sheet\n     * const mergedData = fWorksheet.getMergeData();\n     * // Process each merged range\n     * mergedData.forEach(range => {\n     *   console.log(range.getA1Notation());\n     * });\n     * ```\n     */\n    getMergeData(): FRange[] {\n        return this._worksheet.getMergeData().map((merge) => this._injector.createInstance(FRange, this._workbook, this._worksheet, merge));\n    }\n\n    /**\n     * Get all merged cells in the current sheet\n     * @returns {FRange[]} all merged cells\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Get all merged ranges in the sheet\n     * const mergedRanges = fWorksheet.getMergedRanges();\n     * // Process each merged range\n     * mergedRanges.forEach(range => {\n     *   console.log(range.getA1Notation());\n     * });\n     * ```\n     */\n    getMergedRanges(): FRange[] {\n        const snapshot = this._worksheet.getSnapshot();\n        return snapshot.mergeData.map((merge) => this._injector.createInstance(FRange, this._workbook, this._worksheet, merge));\n    }\n\n    /**\n     * Get the merged cell data of the specified row and column.\n     * @param {number} row - The row index\n     * @param {number} column - The column index\n     * @returns {FRange|undefined} The merged cell data, or undefined if the cell is not merged\n     * @example\n     * ```ts\n     * const fWorkSheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * const merge = fWorkSheet.getCellMergeData(0, 0);\n     * if (merge) {\n     *   console.log('Merged range:', merge.getA1Notation());\n     * }\n     * ```\n     */\n    getCellMergeData(row: number, column: number): FRange | undefined {\n        const worksheet = this._worksheet;\n        const mergeData = worksheet.getMergedCell(row, column);\n        if (mergeData) {\n            return this._injector.createInstance(FRange, this._workbook, this._worksheet, mergeData);\n        }\n    }\n\n    // #endregion\n\n    /**\n     * Returns the selected range in the active sheet, or null if there is no active range.\n     * @returns {FRange | null} the active range\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Get the currently active range\n     * const activeRange = fWorksheet.getActiveRange();\n     * if (activeRange) {\n     *   console.log('Active range:', activeRange.getA1Notation());\n     * }\n     * ```\n     */\n    getActiveRange(): FRange | null {\n        return this._fWorkbook.getActiveRange();\n    }\n\n    /**\n     * Sets the active selection region for this sheet.\n     * @param {FRange} range - The range to set as the active selection\n     * @returns {FWorksheet} This sheet, for chaining\n     * @example\n     * ```ts\n     * const fWorkSheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * fWorkSheet.setActiveRange(fWorkSheet.getRange('A10:B10'));\n     * ```\n     */\n    setActiveRange(range: FRange): FWorksheet {\n        const { unitId, sheetId } = range.getRange();\n\n        if (unitId !== this._workbook.getUnitId() || sheetId !== this._worksheet.getSheetId()) {\n            throw new Error('Specified range must be part of the sheet.');\n        }\n\n        this._fWorkbook.setActiveRange(range);\n        return this;\n    }\n\n    /**\n     * Returns the active cell in this sheet.\n     * @returns {FRange | null} The active cell\n     * @example\n     * ```typescript\n     * const fWorkSheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * console.log(fWorkSheet.getActiveCell().getA1Notation());\n     * ```\n     */\n    getActiveCell(): FRange | null {\n        return this._fWorkbook.getActiveCell();\n    }\n\n    /**\n     * Sets the active selection region for this sheet.\n     * @param range - The range to set as the active selection\n     * @returns This sheet, for chaining\n     * @example\n     * ```ts\n     * const fWorkSheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * fWorkSheet.setActiveSelection(fWorkSheet.getRange('A10:B10'));\n     * ```\n     */\n    setActiveSelection = this.setActiveRange;\n\n    /**\n     * Sets the frozen state of the current sheet.\n     * @param {IFreeze} freeze - the scrolling viewport start range and count of freezed rows and columns.\n     * that means if you want to freeze the first 3 rows and 2 columns, you should set freeze as { startRow: 3, startColumn: 2, xSplit: 2, ySplit: 3 }\n     * @deprecated use `setFrozenRows` and `setFrozenColumns` instead.\n     * @returns {FWorksheet} This worksheet instance for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Freeze first 3 rows and 2 columns\n     * fWorksheet.setFreeze({\n     *   startRow: 3,\n     *   startColumn: 2,\n     *   xSplit: 2,\n     *   ySplit: 3\n     * });\n     * ```\n     */\n    setFreeze(freeze: IFreeze): FWorksheet {\n        this._logService.warn('setFreeze is deprecated, use setFrozenRows and setFrozenColumns instead');\n        this._commandService.syncExecuteCommand(SetFrozenCommand.id, {\n            ...freeze,\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this.getSheetId(),\n        });\n        return this;\n    }\n\n    /**\n     * Cancels the frozen state of the current sheet.\n     * @returns {FWorksheet} This worksheet instance for chaining\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Cancel freeze\n     * fWorksheet.cancelFreeze();\n     * ```\n     */\n    cancelFreeze(): FWorksheet {\n        this._commandService.syncExecuteCommand(CancelFrozenCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this.getSheetId(),\n        });\n\n        return this;\n    }\n\n    /**\n     * Get the freeze state of the current sheet.\n     * @returns {IFreeze} The freeze state of the current sheet\n     * @example\n     * ```typescript\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Get the freeze state of the current sheet\n     * const freeze = fWorksheet.getFreeze();\n     * console.log(freeze);\n     * ```\n     */\n    getFreeze(): IFreeze {\n        return this._worksheet.getFreeze();\n    }\n\n    /**\n     * Set the number of frozen columns.\n     * @param columns - The number of columns to freeze.\n     * To unfreeze all columns, set this value to 0.\n     * @returns {FWorksheet} This FWorksheet instance.\n     * @example\n     * ```typescript\n     * const fWorkSheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // freeze the first 3 columns.\n     * fWorkSheet.setFrozenColumns(3);\n     * ```\n     */\n    setFrozenColumns(columns: number): FWorksheet;\n\n    /**\n     * Set freeze column, then the range from startColumn to endColumn will be fixed.\n     * e.g. setFrozenColumns(0, 2) will fix the column range from 0 to 2.\n     * e.g. setFrozenColumns(2, 3) will fix the column range from 2 to 3, And column from 0 to 1 will be invisible.\n     * @param startColumn - The start column of the range to freeze\n     * @param endColumn - The end column of the range to freeze\n     * @returns {FWorksheet} This FWorksheet instance.\n     * @example\n     * ```typescript\n     * const fWorkSheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // freeze the column B and C, and column A will be invisible.\n     * fWorkSheet.setFrozenColumns(1, 2);\n     * ```\n     */\n    setFrozenColumns(startColumn: number, endColumn: number): FWorksheet;\n    setFrozenColumns(...args: [number] | [number, number]): FWorksheet {\n        const freezeCfg = this.getFreeze();\n        if (arguments.length === 1) {\n            const columns = args[0];\n            this.setFreeze({\n                ...freezeCfg,\n                startColumn: columns > 0 ? columns : -1,\n                xSplit: columns,\n            });\n        } else if (arguments.length === 2) {\n            let [startColumn = 0, endColumn = 0] = args;\n            if (startColumn > endColumn) {\n                [startColumn, endColumn] = [endColumn, startColumn];\n            }\n            this._commandService.syncExecuteCommand(SetFrozenCommand.id, {\n                startColumn: endColumn + 1,\n                xSplit: endColumn - startColumn + 1,\n                startRow: freezeCfg.startRow,\n                ySplit: freezeCfg.ySplit,\n                unitId: this._workbook.getUnitId(),\n                subUnitId: this.getSheetId(),\n            });\n        }\n        return this;\n    }\n\n    /**\n     * Set the number of frozen rows.\n     * @param rows - The number of rows to freeze.\n     * To unfreeze all rows, set this value to 0.\n     * @returns {FWorksheet} This FWorksheet instance.\n     * @example\n     * ```typescript\n     * const fWorkSheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // freeze the first 3 rows.\n     * fWorkSheet.setFrozenRows(3);\n     * ```\n     */\n    setFrozenRows(rows: number): FWorksheet;\n\n    /**\n     * Set freeze row, then the range from startRow to endRow will be fixed.\n     * e.g. setFrozenRows(0, 2) will fix the row range from 0 to 2.\n     * e.g. setFrozenRows(2, 3) will fix the row range from 2 to 3, And row from 0 to 1 will be invisible.\n     * @param startRow - The start row of the range to freeze\n     * @param endRow - The end row of the range to freeze\n     * @returns {FWorksheet} This FWorksheet instance.\n     * @example\n     * ```typescript\n     * const fWorkSheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // freeze the second and third rows, and the first row will be invisible.\n     * fWorkSheet.setFrozenRows(1, 2);\n     * ```\n     */\n    setFrozenRows(startRow: number, endRow: number): FWorksheet;\n    setFrozenRows(...args: [number] | [number, number]): FWorksheet {\n        const freezeCfg = this.getFreeze();\n        if (arguments.length === 1) {\n            const rows = args[0];\n            this.setFreeze({\n                ...freezeCfg,\n                startRow: rows > 0 ? rows : -1,\n                ySplit: rows,\n            });\n        } else if (arguments.length === 2) {\n            let [startRow = 0, endRow = 0] = args;\n            if (startRow > endRow) {\n                [startRow, endRow] = [endRow, startRow];\n            }\n            this._commandService.syncExecuteCommand(SetFrozenCommand.id, {\n                startRow: endRow + 1,\n                ySplit: endRow - startRow + 1,\n                startColumn: freezeCfg.startColumn,\n                xSplit: freezeCfg.xSplit,\n                unitId: this._workbook.getUnitId(),\n                subUnitId: this.getSheetId(),\n            });\n        }\n        return this;\n    }\n\n    /**\n     * Get the number of frozen columns.\n     * @returns {number} The number of frozen columns, returns 0 if no columns are frozen.\n     * @example\n     * ```typescript\n     * const fWorkSheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Get the number of frozen columns\n     * const frozenColumns = fWorkSheet.getFrozenColumns();\n     * console.log(frozenColumns);\n     * ```\n     */\n    getFrozenColumns(): number {\n        const freeze = this.getFreeze();\n        if (freeze.startColumn === -1) {\n            return 0;\n        }\n        return freeze.startColumn;\n    }\n\n    /**\n     * Get the number of frozen rows.\n     * @returns {number} The number of frozen rows. returns 0 if no rows are frozen.\n     * @example\n     * ```typescript\n     * const fWorkSheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Get the number of frozen rows\n     * const frozenRows = fWorkSheet.getFrozenRows();\n     * console.log(frozenRows);\n     * ```\n     */\n    getFrozenRows(): number {\n        const freeze = this.getFreeze();\n        if (freeze.startRow === -1) {\n            return 0;\n        }\n        return freeze.startRow;\n    }\n\n    /**\n     * Get freezed rows.\n     * @returns {IRowRange} The range of the frozen rows.\n     * @example\n     * ```ts\n     * const fWorkSheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Get the range of the frozen rows\n     * const frozenRows = fWorkSheet.getFrozenRowRange();\n     * console.log(frozenRows);\n     * ```\n     */\n    getFrozenRowRange(): IRowRange {\n        const cfg = this._worksheet.getFreeze();\n        return {\n            startRow: cfg.startRow - cfg.ySplit,\n            endRow: cfg.startRow - 1,\n        };\n    }\n\n    /**\n     * Get freezed columns\n     * @returns {IColumnRange} The range of the frozen columns.\n     * @example\n     * ```ts\n     * const fWorkSheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // Get the range of the frozen columns\n     * const frozenColumns = fWorkSheet.getFrozenColumnRange();\n     * console.log(frozenColumns);\n     * ```\n     */\n    getFrozenColumnRange(): IColumnRange {\n        const cfg = this._worksheet.getFreeze();\n        return {\n            startColumn: cfg.startColumn - cfg.xSplit,\n            endColumn: cfg.startColumn - 1,\n        };\n    }\n\n    /**\n     * Returns true if the sheet's gridlines are hidden; otherwise returns false. Gridlines are visible by default.\n     * @returns {boolean} True if the sheet's gridlines are hidden; otherwise false.\n     * @example\n     * ```ts\n     * const fWorkSheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // check if the gridlines are hidden\n     * if (fWorkSheet.hasHiddenGridLines()) {\n     *    console.log('Gridlines are hidden');\n     * }\n     * ```\n     */\n    hasHiddenGridLines(): boolean {\n        return this._worksheet.getConfig().showGridlines === BooleanNumber.FALSE;\n    }\n\n    /**\n     * Hides or reveals the sheet gridlines.\n     * @param {boolean} hidden - If `true`, hide gridlines in this sheet; otherwise show the gridlines.\n     * @returns {FWorksheet} Returns the current worksheet instance for method chaining\n     * @example\n     * ``` ts\n     * const fWorkSheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // hide the gridlines\n     * fWorkSheet.setHiddenGridlines(true);\n     * ```\n     */\n    setHiddenGridlines(hidden: boolean): FWorksheet {\n        this._commandService.syncExecuteCommand(ToggleGridlinesCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            showGridlines: hidden ? BooleanNumber.FALSE : BooleanNumber.TRUE,\n        } as IToggleGridlinesCommandParams);\n        return this;\n    }\n\n    /**\n     * Set the color of the gridlines in the sheet.\n     * @param {string|undefined} color - The color to set for the gridlines.Undefined or null to reset to the default color.\n     * @returns {FWorksheet} Returns the current worksheet instance for method chaining\n     * @example\n     * ```ts\n     * const fWorkSheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * // set the gridlines color to red\n     * fWorkSheet.setGridLinesColor('#ff0000');\n     * ```\n     */\n    setGridLinesColor(color: string | undefined): FWorksheet {\n        this._commandService.syncExecuteCommand(SetGridlinesColorCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            color,\n        } as ISetGridlinesColorCommandParams);\n        return this;\n    }\n\n    /**\n     * Get the color of the gridlines in the sheet.\n     * @returns {string | undefined} The color of the gridlines in the sheet or undefined. The default color is 'rgb(214, 216, 219)'.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * // get the gridlines color of the sheet\n     * console.log(fWorkSheet.getGridLinesColor());\n     * ```\n     */\n    getGridLinesColor(): string | undefined {\n        return this._worksheet.getGridlinesColor() as string | undefined;\n    }\n\n    /**\n     * Sets the sheet tab color.\n     * @param {string|null|undefined} color - A color code in CSS notation (like '#ffffff' or 'white'), or null to reset the tab color.\n     * @returns {FWorksheet} Returns the current worksheet instance for method chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * // set the tab color to red\n     * fWorkSheet.setTabColor('#ff0000');\n     * ```\n     */\n    setTabColor(color: string): FWorksheet {\n        this._commandService.syncExecuteCommand(SetTabColorCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            value: color,\n        });\n        return this;\n    }\n\n    /**\n     * Get the tab color of the sheet.\n     * @returns {string} The tab color of the sheet or undefined.\n     * The default color is css style property 'unset'.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * // get the tab color of the sheet\n     * console.log(fWorkSheet.getTabColor());\n     * ```\n     */\n    getTabColor(): string | undefined {\n        return this._worksheet.getTabColor() as string | undefined;\n    }\n\n    // eslint-disable-next-line\n    /**\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.SheetValueChanged, (params) => {})` instead\n     */\n    onCellDataChange(callback: (cellValue: ObjectMatrix<Nullable<ICellData>>) => void): IDisposable {\n        const commandService = this._injector.get(ICommandService);\n        return commandService.onCommandExecuted((command) => {\n            if (command.id === SetRangeValuesMutation.id) {\n                const params = command.params as ISetRangeValuesMutationParams;\n                if (\n                    params.unitId === this._workbook.getUnitId() &&\n                    params.subUnitId === this._worksheet.getSheetId() &&\n                    params.cellValue\n                ) {\n                    callback(new ObjectMatrix(params.cellValue));\n                }\n            }\n        });\n    }\n\n    // eslint-disable-next-line\n    /**\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.BeforeSheetEditEnd, (params) => {})` instead\n     */\n    onBeforeCellDataChange(callback: (cellValue: ObjectMatrix<Nullable<ICellData>>) => void): IDisposable {\n        const commandService = this._injector.get(ICommandService);\n        return commandService.beforeCommandExecuted((command) => {\n            if (command.id === SetRangeValuesMutation.id) {\n                const params = command.params as ISetRangeValuesMutationParams;\n                if (params.unitId === this._workbook.getUnitId() && params.subUnitId === this._worksheet.getSheetId() && params.cellValue) {\n                    callback(new ObjectMatrix(params.cellValue));\n                }\n            }\n        });\n    }\n\n    /**\n     * Hides this sheet. Has no effect if the sheet is already hidden. If this method is called on the only visible sheet, it throws an exception.\n     * @returns {FWorksheet} Returns the current worksheet instance for method chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * // hide the active sheet\n     * fWorkSheet.hideSheet();\n     * ```\n     */\n    hideSheet(): FWorksheet {\n        const commandService = this._injector.get(ICommandService);\n        const workbook = this._workbook;\n        const sheets = workbook.getSheets();\n        const visibleSheets = sheets.filter((sheet) => sheet.isSheetHidden() !== BooleanNumber.TRUE);\n        if (visibleSheets.length <= 1) {\n            throw new Error('Cannot hide the only visible sheet');\n        }\n\n        commandService.syncExecuteCommand(SetWorksheetHideCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n        });\n\n        return this;\n    }\n\n    /**\n     * Shows this sheet. Has no effect if the sheet is already visible.\n     * @returns {FWorksheet} Returns the current worksheet instance for method chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheets = fWorkbook.getSheets();\n     * // show the last sheet\n     * fWorkSheets[fWorkSheets.length - 1].showSheet();\n     * ```\n     */\n    showSheet(): FWorksheet {\n        const commandService = this._injector.get(ICommandService);\n        commandService.syncExecuteCommand(SetWorksheetShowCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n        });\n        return this;\n    }\n\n    /**\n     * Returns true if the sheet is currently hidden.\n     * @returns {boolean} True if the sheet is hidden; otherwise, false.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheets = fWorkbook.getSheets();\n     * // check if the last sheet is hidden\n     * console.log(fWorkSheets[fWorkSheets.length - 1].isSheetHidden());\n     * ```\n     */\n    isSheetHidden(): boolean {\n        return Boolean(this._worksheet.isSheetHidden() === BooleanNumber.TRUE);\n    }\n\n    /**\n     * Sets the sheet name.\n     * @param {string} name - The new name for the sheet.\n     * @returns {FWorksheet} Returns the current worksheet instance for method chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * // set the sheet name to 'Sheet1'\n     * fWorkSheet.setName('NewSheet1');\n     * ```\n     */\n    setName(name: string): FWorksheet {\n        this._commandService.syncExecuteCommand(SetWorksheetNameCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            name,\n        });\n\n        return this;\n    }\n\n    /**\n     * Activates this sheet. Does not alter the sheet itself, only the parent's notion of the active sheet.\n     * @returns {FWorksheet} Current sheet, for chaining.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheets = fWorkbook.getSheets();\n     * // activate the last sheet\n     * fWorkSheets[fWorkSheets.length - 1].activate();\n     * ```\n     */\n    activate(): FWorksheet {\n        this._fWorkbook.setActiveSheet(this);\n        return this;\n    }\n\n    /**\n     * Gets the position of the sheet in its parent spreadsheet. Starts at 0.\n     * @returns {number} The position of the sheet in its parent spreadsheet.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * // get the position of the active sheet\n     * const position = fWorkSheet.getIndex();\n     * console.log(position);\n     * ```\n     */\n    getIndex(): number {\n        return this._workbook.getSheetIndex(this._worksheet);\n    }\n\n    /**\n     * Clears the sheet of content and formatting information.Or Optionally clears only the contents or only the formatting.\n     * @param {IFacadeClearOptions} [options] - Options for clearing the sheet. If not provided, the contents and formatting are cleared both.\n     * @param {boolean} [options.contentsOnly] - If true, the contents of the sheet are cleared. If false, the contents and formatting are cleared. Default is false.\n     * @param {boolean} [options.formatOnly] - If true, the formatting of the sheet is cleared. If false, the contents and formatting are cleared. Default is false.\n     * @returns {FWorksheet} Returns the current worksheet instance for method chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * // clear the sheet of content and formatting information\n     * fWorkSheet.clear();\n     * // clear the sheet of content only\n     * fWorkSheet.clear({ contentsOnly: true });\n     * ```\n     */\n    clear(options?: IFacadeClearOptions): FWorksheet {\n        if (options && options.contentsOnly && !options.formatOnly) {\n            return this.clearContents();\n        }\n\n        if (options && options.formatOnly && !options.contentsOnly) {\n            return this.clearFormats();\n        }\n\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const commandService = this._injector.get(ICommandService);\n\n        const range = {\n            startRow: 0,\n            endRow: this._worksheet.getRowCount() - 1,\n            startColumn: 0,\n            endColumn: this._worksheet.getColumnCount() - 1,\n        };\n\n        commandService.syncExecuteCommand(ClearSelectionAllCommand.id, {\n            unitId,\n            subUnitId,\n            ranges: [range],\n            options,\n        });\n        return this;\n    }\n\n    /**\n     * Clears the sheet of contents, while preserving formatting information.\n     * @returns {FWorksheet} Returns the current worksheet instance for method chaining\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * // clear the sheet of content only\n     * fWorkSheet.clearContents();\n     * ```\n     */\n    clearContents(): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const commandService = this._injector.get(ICommandService);\n\n        const range = {\n            startRow: 0,\n            endRow: this._worksheet.getRowCount() - 1,\n            startColumn: 0,\n            endColumn: this._worksheet.getColumnCount() - 1,\n        };\n\n        commandService.syncExecuteCommand(ClearSelectionContentCommand.id, {\n            unitId,\n            subUnitId,\n            ranges: [range],\n        });\n        return this;\n    }\n\n    /**\n     * Clears the sheet of formatting, while preserving contents.\n     * @returns {FWorksheet} Returns the current worksheet instance for method chaining\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * // clear the sheet of formatting only\n     * fWorkSheet.clearFormats();\n     * ```\n     */\n    clearFormats(): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const commandService = this._injector.get(ICommandService);\n\n        const range = {\n            startRow: 0,\n            endRow: this._worksheet.getRowCount() - 1,\n            startColumn: 0,\n            endColumn: this._worksheet.getColumnCount() - 1,\n        };\n\n        commandService.syncExecuteCommand(ClearSelectionFormatCommand.id, {\n            unitId,\n            subUnitId,\n            ranges: [range],\n        });\n\n        return this;\n    }\n\n    /**\n     * Returns a Range corresponding to the dimensions in which data is present.\n     * This is functionally equivalent to creating a Range bounded by A1 and (Sheet.getLastColumns(), Sheet.getLastRows()).\n     * @returns {FRange} The range of the data in the sheet.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * // Assume the sheet is a empty sheet\n     * const cellRange = fWorkSheet.getRange('J50');\n     * cellRange.setValue('Hello World');\n     * console.log(fWorkSheet.getDataRange().getA1Notation()); // A1:J50\n     * ```\n     */\n    getDataRange(): FRange {\n        const lastRow = this.getLastRows();\n        const lastColumn = this.getLastColumns();\n        return this.getRange(0, 0, lastRow + 1, lastColumn + 1);\n    }\n\n    /**\n     * @deprecated use `getLastColumn` instead.\n     * Returns the column index of the last column that contains content.\n     * @returns {number} the column index of the last column that contains content.\n     */\n    getLastColumns(): number {\n        return this._worksheet.getLastColumnWithContent();\n    }\n\n    /**\n     * Returns the column index of the last column that contains content.\n     * @returns {number} the column index of the last column that contains content.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * // Assume the sheet is a empty sheet\n     * const cellRange = fWorkSheet.getRange('J50');\n     * cellRange.setValue('Hello World');\n     * console.log(fWorkSheet.getLastColumn()); // 9\n     * ```\n     */\n    getLastColumn(): number {\n        return this._worksheet.getLastColumnWithContent();\n    }\n\n    /**\n     * @deprecated use `getLastRow` instead.\n     * Returns the row index of the last row that contains content.\n     * @returns {number} the row index of the last row that contains content.\n     */\n    getLastRows(): number {\n        return this._worksheet.getLastRowWithContent();\n    }\n\n    /**\n     * Returns the row index of the last row that contains content.\n     * @returns {number} the row index of the last row that contains content.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * // Assume the sheet is a empty sheet\n     * const cellRange = fWorkSheet.getRange('J50');\n     * cellRange.setValue('Hello World');\n     * console.log(fWorkSheet.getLastRow()); // 49\n     * ```\n     */\n    getLastRow(): number {\n        return this._worksheet.getLastRowWithContent();\n    }\n\n    /**\n     * Judge whether provided FWorksheet is equal to current.\n     * @param {FWorksheet} other - the FWorksheet to compare with.\n     * @returns {boolean} true if the FWorksheet is equal to the current FWorksheet, false otherwise.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const sheets = fWorkbook.getSheets();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * console.log(fWorkSheet.equalTo(sheets[0])); // true, if the active sheet is the first sheet.\n     * ```\n     */\n    equalTo(other: FWorksheet): boolean {\n        if (other instanceof FWorksheet) {\n            return this._worksheet.getSheetId() === other.getSheetId() && this._workbook.getUnitId() === other.getWorkbook().getUnitId();\n        }\n        return false;\n    }\n\n    /**\n     * Insert a defined name for worksheet.\n     * @param {string} name - The name of the defined name to insert\n     * @param {string} formulaOrRefString - The formula(=sum(A2:b10)) or reference(A1) string of the defined name to insert\n     * @example\n     * ```ts\n     * // The code below inserts a defined name\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * fWorksheet.insertDefinedName('MyDefinedName', 'Sheet1!A1');\n     * ```\n     */\n    insertDefinedName(name: string, formulaOrRefString: string): void {\n        const definedNameBuilder = this._injector.createInstance(FDefinedNameBuilder);\n        const param = definedNameBuilder.setName(name).setRef(formulaOrRefString).build();\n        param.localSheetId = this.getSheetId();\n        this._fWorkbook.insertDefinedNameBuilder(param);\n    }\n\n    /**\n     * Get all the defined names in the worksheet.\n     * @returns {FDefinedName[]} All the defined names in the worksheet\n     * @example\n     * ```ts\n     * // The code below gets all the defined names in the worksheet\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * const definedNames = fWorksheet.getDefinedNames();\n     * console.log(definedNames);\n     * ```\n     */\n    getDefinedNames(): FDefinedName[] {\n        const names = this._fWorkbook.getDefinedNames();\n        return names.filter((name) => name.getLocalSheetId() === this.getSheetId());\n    }\n\n    /**\n     * Set custom metadata of worksheet\n     * @param {CustomData | undefined} custom - custom metadata\n     * @returns {FWorksheet} Current worksheet, for chaining.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * fWorkSheet.setCustomMetadata({ key: 'value' });\n     * ```\n     */\n    setCustomMetadata(custom: CustomData | undefined): FWorksheet {\n        this._worksheet.setCustomMetadata(custom);\n        return this;\n    }\n\n    /**\n     * Get custom metadata of worksheet\n     * @returns {CustomData | undefined} custom metadata\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * const custom = fWorkSheet.getCustomMetadata();\n     * console.log(custom);\n     * ```\n     */\n    getCustomMetadata(): CustomData | undefined {\n        return this._worksheet.getCustomMetadata();\n    }\n\n    /**\n     * Set custom metadata of row\n     * @param {number} index - row index\n     * @param {CustomData | undefined} custom - custom metadata\n     * @returns {FWorksheet} Current worksheet, for chaining.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * fWorkSheet.setRowCustomMetadata(0, { key: 'value' });\n     * ```\n     */\n    setRowCustomMetadata(index: number, custom: CustomData | undefined): FWorksheet {\n        this._worksheet.getRowManager().setCustomMetadata(index, custom);\n        return this;\n    }\n\n    /**\n     * Set custom metadata of column\n     * @param {number} index - column index\n     * @param {CustomData | undefined} custom - custom metadata\n     * @returns {FWorksheet} Current worksheet, for chaining.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * fWorkSheet.setColumnCustomMetadata(0, { key: 'value' });\n     * ```\n     */\n    setColumnCustomMetadata(index: number, custom: CustomData | undefined): FWorksheet {\n        this._worksheet.getColumnManager().setCustomMetadata(index, custom);\n        return this;\n    }\n\n    /**\n     * Get custom metadata of row\n     * @param {number} index - row index\n     * @returns {CustomData | undefined} custom metadata\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * const custom = fWorkSheet.getRowCustomMetadata(0);\n     * console.log(custom);\n     * ```\n     */\n    getRowCustomMetadata(index: number): CustomData | undefined {\n        return this._worksheet.getRowManager().getCustomMetadata(index);\n    }\n\n    /**\n     * Get custom metadata of column\n     * @param {number} index - column index\n     * @returns {CustomData | undefined} custom metadata\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * const custom = fWorkSheet.getColumnCustomMetadata(0);\n     * console.log(custom);\n     * ```\n     */\n    getColumnCustomMetadata(index: number): CustomData | undefined {\n        return this._worksheet.getColumnManager().getCustomMetadata(index);\n    }\n\n    /**\n     * Appends a row to the bottom of the current data region in the sheet. If a cell's content begins with =, it's interpreted as a formula.\n     * @param {CellValue[]} rowContents - An array of values for the new row.\n     * @returns {FWorksheet} Returns the current worksheet instance for method chaining.\n     * @example\n     * ```ts\n     * // Appends a new row with 4 columns to the bottom of the current\n     * // data region in the sheet containing the values in the array.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorkSheet = fWorkbook.getActiveSheet();\n     * fWorkSheet.appendRow([1, 'Hello Univer', true, '=A1']);\n     * ```\n     */\n    appendRow(rowContents: CellValue[]): FWorksheet {\n        const hasValue = this._worksheet.getCellMatrix().hasValue();\n        const lastRow = this._worksheet.getLastRowWithContent();\n        const maxRows = this._worksheet.getRowCount();\n        const maxColumns = this._worksheet.getColumnCount();\n\n        const row = hasValue ? lastRow + 1 : lastRow;\n        const cellMatrix = new ObjectMatrix<ICellData>();\n\n        for (let c = 0; c < rowContents.length; c++) {\n            cellMatrix.setValue(row, c, covertCellValue(rowContents[c]));\n        }\n\n        this._commandService.syncExecuteCommand(AppendRowCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            cellValue: cellMatrix.getMatrix(),\n            insertRowNums: row > maxRows - 1 ? 1 : 0,\n            insertColumnNums: rowContents.length > maxColumns ? rowContents.length - maxColumns : 0,\n            maxRows,\n            maxColumns,\n        });\n        return this;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CommandListener, CustomData, ICommandInfo, IDisposable, IRange, IWorkbookData, LocaleType, Workbook } from '@univerjs/core';\nimport type { ISetDefinedNameMutationParam } from '@univerjs/engine-formula';\nimport type { IRangeThemeStyleJSON, ISetSelectionsOperationParams, ISheetCommandSharedParams } from '@univerjs/sheets';\nimport type { FontLine as _FontLine } from './f-range';\nimport { ICommandService, ILogService, Inject, Injector, IPermissionService, IResourceLoaderService, IUniverInstanceService, LocaleService, mergeWorksheetSnapshotWithDefault, RANGE_TYPE, RedoCommand, toDisposable, UndoCommand, UniverInstanceType } from '@univerjs/core';\nimport { FBaseInitialable } from '@univerjs/core/facade';\nimport { IDefinedNamesService } from '@univerjs/engine-formula';\nimport { CopySheetCommand, getPrimaryForRange, InsertSheetCommand, RangeThemeStyle, RegisterWorksheetRangeThemeStyleCommand, RemoveSheetCommand, SCOPE_WORKBOOK_VALUE_DEFINED_NAME, SetDefinedNameCommand, SetSelectionsOperation, SetWorksheetActiveOperation, SetWorksheetOrderCommand, SheetRangeThemeService, SheetsSelectionsService, UnregisterWorksheetRangeThemeStyleCommand, WorkbookEditablePermission } from '@univerjs/sheets';\nimport { FDefinedName, FDefinedNameBuilder } from './f-defined-name';\nimport { FPermission } from './f-permission';\nimport { FRange } from './f-range';\nimport { FWorksheet } from './f-worksheet';\n\n/**\n * Facade API object bounded to a workbook. It provides a set of methods to interact with the workbook.\n * @hideconstructor\n */\nexport class FWorkbook extends FBaseInitialable {\n    readonly id: string;\n\n    constructor(\n        protected readonly _workbook: Workbook,\n        @Inject(Injector) protected override readonly _injector: Injector,\n        @Inject(IResourceLoaderService) protected readonly _resourceLoaderService: IResourceLoaderService,\n        @Inject(SheetsSelectionsService) protected readonly _selectionManagerService: SheetsSelectionsService,\n        @IUniverInstanceService protected readonly _univerInstanceService: IUniverInstanceService,\n        @ICommandService protected readonly _commandService: ICommandService,\n        @IPermissionService protected readonly _permissionService: IPermissionService,\n        @ILogService protected readonly _logService: ILogService,\n        @Inject(LocaleService) protected readonly _localeService: LocaleService,\n        @IDefinedNamesService protected readonly _definedNamesService: IDefinedNamesService\n    ) {\n        super(_injector);\n\n        this.id = this._workbook.getUnitId();\n    }\n\n    /**\n     * Get the Workbook instance.\n     * @returns {Workbook} The Workbook instance.\n     * @example\n     * ```ts\n     * // The code below gets the Workbook instance\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const workbook = fWorkbook.getWorkbook();\n     * console.log(workbook);\n     * ```\n     */\n    getWorkbook(): Workbook {\n        return this._workbook;\n    }\n\n    /**\n     * Get the id of the workbook.\n     * @returns {string} The id of the workbook.\n     * @example\n     * ```ts\n     * // The code below gets the id of the workbook\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const unitId = fWorkbook.getId();\n     * console.log(unitId);\n     * ```\n     */\n    getId(): string {\n        return this.id;\n    }\n\n    /**\n     * Get the name of the workbook.\n     * @returns {string} The name of the workbook.\n     * @example\n     * ```ts\n     * // The code below gets the name of the workbook\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const name = fWorkbook.getName();\n     * console.log(name);\n     * ```\n     */\n    getName(): string {\n        return this._workbook.name;\n    }\n\n    /**\n     * Set the name of the workbook.\n     * @param {string} name The new name of the workbook.\n     * @example\n     * ```ts\n     * // The code below sets the name of the workbook\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.setName('MyWorkbook');\n     * ```\n     */\n    setName(name: string): void {\n        this._workbook.setName(name);\n    }\n\n    /**\n     * Save workbook snapshot data, including conditional formatting, data validation, and other plugin data.\n     * @returns {IWorkbookData} Workbook snapshot data\n     * @example\n     * ```ts\n     * // The code below saves the workbook snapshot data\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const snapshot = fWorkbook.save();\n     * console.log(snapshot);\n     * ```\n     */\n    save(): IWorkbookData {\n        const snapshot = this._resourceLoaderService.saveUnit<IWorkbookData>(this._workbook.getUnitId())!;\n        return snapshot;\n    }\n\n    /**\n     * @deprecated use 'save' instead.\n     * @returns {IWorkbookData} Workbook snapshot data\n     * @memberof FWorkbook\n     * @example\n     * ```ts\n     * // The code below saves the workbook snapshot data\n     * const activeSpreadsheet = univerAPI.getActiveWorkbook();\n     * const snapshot = activeSpreadsheet.getSnapshot();\n     * ```\n     */\n    getSnapshot(): IWorkbookData {\n        this._logService.warn('use \\'save\\' instead of \\'getSnapshot\\'');\n        return this.save();\n    }\n\n    /**\n     * Get the active sheet of the workbook.\n     * @returns {FWorksheet} The active sheet of the workbook\n     * @example\n     * ```ts\n     * // The code below gets the active sheet of the workbook\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * console.log(fWorksheet);\n     * ```\n     */\n    getActiveSheet(): FWorksheet {\n        const activeSheet = this._workbook.getActiveSheet();\n        return this._injector.createInstance(FWorksheet, this, this._workbook, activeSheet);\n    }\n\n    /**\n     * Gets all the worksheets in this workbook\n     * @returns {FWorksheet[]} An array of all the worksheets in the workbook\n     * @example\n     * ```ts\n     * // The code below gets all the worksheets in the workbook\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const sheets = fWorkbook.getSheets();\n     * console.log(sheets);\n     * ```\n     */\n    getSheets(): FWorksheet[] {\n        return this._workbook.getSheets().map((sheet) => {\n            return this._injector.createInstance(FWorksheet, this, this._workbook, sheet);\n        });\n    }\n\n    /**\n     * Create a new worksheet and returns a handle to it.\n     * @param {string} name Name of the new sheet\n     * @param {number} rows How many rows would the new sheet have\n     * @param {number} column How many columns would the new sheet have\n     * @returns {FWorksheet} The new created sheet\n     * @example\n     * ```ts\n     * // The code below creates a new sheet\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const newSheet = fWorkbook.create('MyNewSheet', 10, 10);\n     * console.log(newSheet);\n     * ```\n     */\n    create(name: string, rows: number, column: number): FWorksheet {\n        const newSheet = mergeWorksheetSnapshotWithDefault({});\n        newSheet.rowCount = rows;\n        newSheet.columnCount = column;\n        newSheet.name = name;\n        newSheet.id = name.toLowerCase().replace(/ /g, '-');\n\n        this._commandService.syncExecuteCommand(InsertSheetCommand.id, {\n            unitId: this.id,\n            index: this._workbook.getSheets().length,\n            sheet: newSheet,\n        });\n\n        this._commandService.syncExecuteCommand(SetWorksheetActiveOperation.id, {\n            unitId: this.id,\n            subUnitId: this._workbook.getSheets()[this._workbook.getSheets().length - 1].getSheetId(),\n        });\n\n        const worksheet = this._workbook.getActiveSheet();\n        if (!worksheet) {\n            throw new Error('No active sheet found');\n        }\n\n        return this._injector.createInstance(FWorksheet, this, this._workbook, worksheet);\n    }\n\n    /**\n     * Get a worksheet by sheet id.\n     * @param {string} sheetId The id of the sheet to get.\n     * @returns {FWorksheet | null} The worksheet with given sheet id\n     * @example\n     * ```ts\n     * // The code below gets a worksheet by sheet id\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const sheet = fWorkbook.getSheetBySheetId('sheetId');\n     * console.log(sheet);\n     * ```\n     */\n    getSheetBySheetId(sheetId: string): FWorksheet | null {\n        const worksheet = this._workbook.getSheetBySheetId(sheetId);\n        if (!worksheet) {\n            return null;\n        }\n\n        return this._injector.createInstance(FWorksheet, this, this._workbook, worksheet);\n    }\n\n    /**\n     * Get a worksheet by sheet name.\n     * @param {string} name The name of the sheet to get.\n     * @returns {FWorksheet | null} The worksheet with given sheet name\n     * @example\n     * ```ts\n     * // The code below gets a worksheet by sheet name\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const sheet = fWorkbook.getSheetByName('Sheet1');\n     * console.log(sheet);\n     * ```\n     */\n    getSheetByName(name: string): FWorksheet | null {\n        const worksheet = this._workbook.getSheetBySheetName(name);\n        if (!worksheet) {\n            return null;\n        }\n\n        return this._injector.createInstance(FWorksheet, this, this._workbook, worksheet);\n    }\n\n    /**\n     * Sets the given worksheet to be the active worksheet in the workbook.\n     * @param {FWorksheet | string} sheet The instance or id of the worksheet to set as active.\n     * @returns {FWorksheet} The active worksheet\n     * @example\n     * ```ts\n     * // The code below sets the given worksheet to be the active worksheet\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const sheet = fWorkbook.getSheets()[1];\n     * fWorkbook.setActiveSheet(sheet);\n     * ```\n     */\n    setActiveSheet(sheet: FWorksheet | string): FWorksheet {\n        this._commandService.syncExecuteCommand(SetWorksheetActiveOperation.id, {\n            unitId: this.id,\n            subUnitId: typeof sheet === 'string' ? sheet : sheet.getSheetId(),\n        });\n\n        return typeof sheet === 'string' ? this.getSheetBySheetId(sheet)! : sheet;\n    }\n\n    /**\n     * Inserts a new worksheet into the workbook.\n     * Using a default sheet name. The new sheet becomes the active sheet\n     * @param {string} [sheetName] The name of the new sheet\n     * @returns {FWorksheet} The new sheet\n     * @example\n     * ```ts\n     * // The code below inserts a new sheet into the workbook\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.insertSheet();\n     *\n     * // The code below inserts a new sheet into the workbook, using a custom name\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.insertSheet('MyNewSheet');\n     * ```\n     */\n    insertSheet(sheetName?: string): FWorksheet {\n        if (sheetName != null) {\n            this._commandService.syncExecuteCommand(InsertSheetCommand.id, { sheet: { name: sheetName } });\n        } else {\n            this._commandService.syncExecuteCommand(InsertSheetCommand.id);\n        }\n\n        const unitId = this.id;\n        const subUnitId = this._workbook.getSheets()[this._workbook.getSheets().length - 1].getSheetId();\n\n        this._commandService.syncExecuteCommand(SetWorksheetActiveOperation.id, {\n            unitId,\n            subUnitId,\n        });\n        const worksheet = this._workbook.getActiveSheet();\n        if (!worksheet) {\n            throw new Error('No active sheet found');\n        }\n\n        return this._injector.createInstance(FWorksheet, this, this._workbook, worksheet);\n    }\n\n    /**\n     * Deletes the specified worksheet.\n     * @param {FWorksheet | string} sheet The instance or id of the worksheet to delete.\n     * @returns {boolean} True if the worksheet was deleted, false otherwise.\n     * @example\n     * ```ts\n     * // The code below deletes the specified worksheet\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const sheet = fWorkbook.getSheets()[1];\n     * fWorkbook.deleteSheet(sheet);\n     *\n     * // The code below deletes the specified worksheet by id\n     * // fWorkbook.deleteSheet(sheet.getSheetId());\n     * ```\n     */\n    deleteSheet(sheet: FWorksheet | string): boolean {\n        const unitId = this.id;\n        const subUnitId = typeof sheet === 'string' ? sheet : sheet.getSheetId();\n        return this._commandService.syncExecuteCommand(RemoveSheetCommand.id, {\n            unitId,\n            subUnitId,\n        });\n    }\n\n    // #region editing\n    /**\n     * Undo the last action.\n     * @returns {FWorkbook} A promise that resolves to true if the undo was successful, false otherwise.\n     * @example\n     * ```ts\n     * // The code below undoes the last action\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.undo();\n     * ```\n     */\n    undo(): FWorkbook {\n        this._univerInstanceService.focusUnit(this.id);\n        this._commandService.syncExecuteCommand(UndoCommand.id);\n        return this;\n    }\n\n    /**\n     * Redo the last undone action.\n     * @returns {FWorkbook} A promise that resolves to true if the redo was successful, false otherwise.\n     * @example\n     * ```ts\n     * // The code below redoes the last undone action\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.redo();\n     * ```\n     */\n    redo(): FWorkbook {\n        this._univerInstanceService.focusUnit(this.id);\n        this._commandService.syncExecuteCommand(RedoCommand.id);\n        return this;\n    }\n\n    /**\n     * Callback for command execution.\n     * @callback onBeforeCommandExecuteCallback\n     * @param {ICommandInfo<ISheetCommandSharedParams>} command The command that was executed.\n     */\n\n    /**\n     * Register a callback that will be triggered before invoking a command targeting the Univer sheet.\n     * @param {onBeforeCommandExecuteCallback} callback the callback.\n     * @returns {IDisposable} A function to dispose the listening.\n     * @example\n     * ```ts\n     * // The code below registers a callback that will be triggered before invoking a command targeting the Univer sheet\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.onBeforeCommandExecute((command) => {\n     *   console.log('Before command execute:', command);\n     * });\n     * ```\n     */\n    onBeforeCommandExecute(callback: CommandListener): IDisposable {\n        return this._commandService.beforeCommandExecuted((command) => {\n            if ((command as ICommandInfo<ISheetCommandSharedParams>).params?.unitId !== this.id) {\n                return;\n            }\n\n            callback(command);\n        });\n    }\n\n    /**\n     * Callback for command execution.\n     * @callback onCommandExecutedCallback\n     * @param {ICommandInfo<ISheetCommandSharedParams>} command The command that was executed\n     */\n\n    /**\n     * Register a callback that will be triggered when a command is invoked targeting the Univer sheet.\n     * @param {onCommandExecutedCallback} callback the callback.\n     * @returns {IDisposable} A function to dispose the listening.\n     * @example\n     * ```ts\n     * // The code below registers a callback that will be triggered when a command is invoked targeting the Univer sheet\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.onCommandExecuted((command) => {\n     *   console.log('Command executed:', command);\n     * });\n     * ```\n     */\n    onCommandExecuted(callback: CommandListener): IDisposable {\n        return this._commandService.onCommandExecuted((command) => {\n            if ((command as ICommandInfo<ISheetCommandSharedParams>).params?.unitId !== this.id) {\n                return;\n            }\n\n            callback(command);\n        });\n    }\n\n    /**\n     * Callback for selection changes.\n     * @callback onSelectionChangeCallback\n     * @param {IRange[]} selections The new selection.\n     */\n\n    /**\n     * Register a callback that will be triggered when the selection changes.\n     * @param {onSelectionChangeCallback} callback The callback.\n     * @returns {IDisposable} A function to dispose the listening\n     * @example\n     * ```ts\n     * // The code below registers a callback that will be triggered when the selection changes\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.onSelectionChange((selections) => {\n     *   console.log('Selection changed:', selections);\n     * });\n     * ```\n     */\n    onSelectionChange(callback: (selections: IRange[]) => void): IDisposable {\n        return toDisposable(\n            this._selectionManagerService.selectionMoveEnd$.subscribe((selections) => {\n                if (this._univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET)!.getUnitId() !== this.id) {\n                    return;\n                }\n\n                if (!selections?.length) {\n                    callback([]);\n                } else {\n                    // TODO@wzhudev: filtered out ranges changes not other currently sheet\n                    callback(selections!.map((s) => s.range));\n                }\n            })\n        );\n    }\n\n    /**\n     * Used to modify the editing permissions of the workbook. When the value is false, editing is not allowed.\n     * @param {boolean} value  editable value want to set\n     * @returns {FWorkbook} FWorkbook instance\n     * @example\n     * ```ts\n     * // The code below sets the editing permissions of the workbook\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.setEditable(false);\n     * ```\n     */\n    setEditable(value: boolean): FWorkbook {\n        const instance = new WorkbookEditablePermission(this._workbook.getUnitId());\n        const editPermissionPoint = this._permissionService.getPermissionPoint(instance.id);\n        if (!editPermissionPoint) {\n            this._permissionService.addPermissionPoint(instance);\n        }\n        this._permissionService.updatePermissionPoint(instance.id, value);\n\n        return this;\n    }\n\n    /**\n     * Sets the selection region for active sheet.\n     * @param {FRange} range The range to set as the active selection.\n     * @returns {FWorkbook} FWorkbook instance\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const range = fWorkbook.getActiveSheet().getRange('A10:B10');\n     * fWorkbook.setActiveRange(range);\n     * ```\n     */\n    setActiveRange(range: FRange): FWorkbook {\n        // In theory, FRange should belong to a specific context, rather than getting the currently active sheet\n        const sheet = this.getActiveSheet();\n        const sheetId = range.getRange().sheetId || sheet.getSheetId();\n\n        const worksheet = sheetId ? this._workbook.getSheetBySheetId(sheetId) : this._workbook.getActiveSheet(true);\n        if (!worksheet) {\n            throw new Error('No active sheet found');\n        }\n\n        // if the range is not in the current sheet, set the active sheet to the range's sheet\n        if (worksheet.getSheetId() !== sheet.getSheetId()) {\n            this.setActiveSheet(this._injector.createInstance(FWorksheet, this, this._workbook, worksheet));\n        }\n\n        const setSelectionOperationParams: ISetSelectionsOperationParams = {\n            unitId: this.getId(),\n            subUnitId: sheetId,\n\n            selections: [range].map((r) => ({ range: r.getRange(), primary: getPrimaryForRange(r.getRange(), worksheet), style: null })),\n        };\n\n        this._commandService.syncExecuteCommand(SetSelectionsOperation.id, setSelectionOperationParams);\n\n        return this;\n    }\n\n    /**\n     * Returns the selected range in the active sheet, or null if there is no active range.\n     * @returns {FRange | null} The active range\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const activeRange = fWorkbook.getActiveRange();\n     * console.log(activeRange);\n     * ```\n     */\n    // could sheet have no active range ?\n    getActiveRange(): FRange | null {\n        const activeSheet = this._workbook.getActiveSheet();\n        const selections = this._selectionManagerService.getCurrentSelections();\n        const active = selections.find((selection) => !!selection.primary);\n        if (!active) {\n            return null;\n        }\n\n        return this._injector.createInstance(FRange, this._workbook, activeSheet, active.range);\n    }\n\n    /**\n     * Returns the active cell in this spreadsheet.\n     * @returns {FRange | null} The active cell\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * console.log(fWorkbook.getActiveCell().getA1Notation());\n     * ```\n     */\n    getActiveCell(): FRange | null {\n        const activeSheet = this._workbook.getActiveSheet();\n        const selections = this._selectionManagerService.getCurrentSelections();\n        const active = selections.find((selection) => !!selection.primary);\n        if (!active) {\n            return null;\n        }\n\n        const cell: IRange = {\n            ...active.primary!,\n            rangeType: RANGE_TYPE.NORMAL,\n        };\n\n        return this._injector.createInstance(FRange, this._workbook, activeSheet, cell);\n    }\n\n    /**\n     * Deletes the currently active sheet.\n     * @returns {boolean} true if the sheet was deleted, false otherwise\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.deleteActiveSheet();\n     * ```\n     */\n    deleteActiveSheet(): boolean {\n        const sheet = this.getActiveSheet();\n        return this.deleteSheet(sheet);\n    }\n\n    /**\n     * Duplicates the given worksheet.\n     * @param {FWorksheet} sheet The worksheet to duplicate.\n     * @returns {FWorksheet} The duplicated worksheet\n     * @example\n     * ```ts\n     * // The code below duplicates the given worksheet\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const activeSheet = fWorkbook.getActiveSheet();\n     * const duplicatedSheet = fWorkbook.duplicateSheet(activeSheet);\n     * console.log(duplicatedSheet);\n     * ```\n     */\n    duplicateSheet(sheet: FWorksheet): FWorksheet {\n        this._commandService.syncExecuteCommand(CopySheetCommand.id, {\n            unitId: sheet.getWorkbook().getUnitId(),\n            subUnitId: sheet.getSheetId(),\n        });\n\n        return this._injector.createInstance(FWorksheet, this, this._workbook, this._workbook.getActiveSheet());\n    }\n\n    /**\n     * Duplicates the active sheet.\n     * @returns {FWorksheet} The duplicated worksheet\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const duplicatedSheet = fWorkbook.duplicateActiveSheet();\n     * console.log(duplicatedSheet);\n     * ```\n     */\n    duplicateActiveSheet(): FWorksheet {\n        const sheet = this.getActiveSheet();\n        return this.duplicateSheet(sheet);\n    }\n\n    /**\n     * Get the number of sheets in the workbook.\n     * @returns {number} The number of sheets in the workbook\n     * @example\n     * ```ts\n     * // The code below gets the number of sheets in the workbook\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * console.log(fWorkbook.getNumSheets());\n     * ```\n     */\n    getNumSheets(): number {\n        return this._workbook.getSheets().length;\n    }\n\n    /**\n     * Get the locale of the workbook.\n     * @returns {LocaleType} The locale of the workbook\n     * @example\n     * ```ts\n     * // The code below gets the locale of the workbook\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * console.log(fWorkbook.getLocale());\n     * ```\n     */\n    getLocale(): LocaleType {\n        return this._localeService.getCurrentLocale();\n    }\n\n    /**\n     * @deprecated use `setSpreadsheetLocale` instead.\n     * @param {LocaleType} locale - The locale to set\n     */\n    setLocale(locale: LocaleType): void {\n        this._localeService.setLocale(locale);\n    }\n\n    /**\n     * Set the locale of the workbook.\n     * @param {LocaleType} locale The locale to set\n     * @returns {FWorkbook} This workbook, for chaining\n     * @example\n     * ```ts\n     * // The code below sets the locale of the workbook\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.setSpreadsheetLocale(univerAPI.Enum.LocaleType.EN_US);\n     * console.log(fWorkbook.getLocale());\n     * ```\n     */\n    setSpreadsheetLocale(locale: LocaleType): FWorkbook {\n        this._localeService.setLocale(locale);\n        return this;\n    }\n\n    /**\n     * Get the URL of the workbook.\n     * @returns {string} The URL of the workbook\n     * @example\n     * ```ts\n     * // The code below gets the URL of the workbook\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const url = fWorkbook.getUrl();\n     * console.log(url);\n     * ```\n     */\n    getUrl(): string {\n        return location.href;\n    }\n\n    /**\n     * Move the sheet to the specified index.\n     * @param {FWorksheet} sheet The sheet to move\n     * @param {number} index The index to move the sheet to\n     * @returns {FWorkbook} This workbook, for chaining\n     * @example\n     * ```ts\n     * // The code below moves the sheet to the specified index\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const sheet = fWorkbook.getActiveSheet();\n     * fWorkbook.moveSheet(sheet, 1);\n     * ```\n     */\n    moveSheet(sheet: FWorksheet, index: number): FWorkbook {\n        let sheetIndexVal = index;\n        if (sheetIndexVal < 0) {\n            sheetIndexVal = 0;\n        } else if (sheetIndexVal > this._workbook.getSheets().length - 1) {\n            sheetIndexVal = this._workbook.getSheets().length - 1;\n        }\n        this._commandService.syncExecuteCommand(SetWorksheetOrderCommand.id, {\n            unitId: sheet.getWorkbook().getUnitId(),\n            order: sheetIndexVal,\n            subUnitId: sheet.getSheetId(),\n        });\n        return this;\n    }\n\n    /**\n     * Move the active sheet to the specified index.\n     * @param {number} index The index to move the active sheet to\n     * @returns {FWorkbook} This workbook, for chaining\n     * @example\n     * ```ts\n     * // The code below moves the active sheet to the specified index\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.moveActiveSheet(1);\n     * ```\n     */\n    moveActiveSheet(index: number): FWorkbook {\n        const sheet = this.getActiveSheet();\n        return this.moveSheet(sheet, index);\n    }\n\n    /**\n     * Get the PermissionInstance.\n     * @returns {FPermission} - The PermissionInstance.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const permission = fWorkbook.getPermission();\n     * console.log(permission);\n     * ```\n     */\n    getPermission(): FPermission {\n        return this._injector.createInstance(FPermission);\n    }\n\n    /**\n     * Get the defined name by name.\n     * @param {string} name The name of the defined name to get\n     * @returns {FDefinedName | null} The defined name with the given name\n     * @example\n     * ```ts\n     * // The code below gets the defined name by name\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const definedName = fWorkbook.getDefinedName('MyDefinedName');\n     * console.log(definedName);\n     * ```\n     */\n    getDefinedName(name: string): FDefinedName | null {\n        const definedName = this._definedNamesService.getValueByName(this.id, name);\n        if (!definedName) {\n            return null;\n        }\n\n        return this._injector.createInstance(FDefinedName, { ...definedName, unitId: this.id });\n    }\n\n    /**\n     * Get all the defined names in the workbook.\n     * @returns {FDefinedName[]} All the defined names in the workbook\n     * @example\n     * ```ts\n     * // The code below gets all the defined names in the workbook\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const definedNames = fWorkbook.getDefinedNames();\n     * console.log(definedNames);\n     * ```\n     */\n    getDefinedNames(): FDefinedName[] {\n        const definedNames = this._definedNamesService.getDefinedNameMap(this.id);\n        if (!definedNames) {\n            return [];\n        }\n        return Object.values(definedNames).map((definedName) => {\n            return this._injector.createInstance(FDefinedName, { ...definedName, unitId: this.id });\n        });\n    }\n\n    /**\n     * Insert a defined name.\n     * @param {string} name The name of the defined name to insert\n     * @param {string} formulaOrRefString The formula(=sum(A2:b10)) or reference(A1) string of the defined name to insert\n     * @returns {FWorkbook} The current FWorkbook instance\n     * @example\n     * ```ts\n     * // The code below inserts a defined name\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.insertDefinedName('MyDefinedName', 'Sheet1!A1');\n     * ```\n     */\n    insertDefinedName(name: string, formulaOrRefString: string): FWorkbook {\n        const definedNameBuilder = this._injector.createInstance(FDefinedNameBuilder);\n        const param = definedNameBuilder.setName(name).setRef(formulaOrRefString).build();\n        param.localSheetId = SCOPE_WORKBOOK_VALUE_DEFINED_NAME;\n        this.insertDefinedNameBuilder(param);\n        return this;\n    }\n\n    /**\n     * Delete the defined name with the given name.\n     * @param {string} name The name of the defined name to delete\n     * @returns {boolean} true if the defined name was deleted, false otherwise\n     * @example\n     * ```ts\n     * // The code below deletes the defined name with the given name\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.deleteDefinedName('MyDefinedName');\n     * ```\n     */\n    deleteDefinedName(name: string): boolean {\n        const definedName = this.getDefinedName(name);\n        if (definedName) {\n            definedName.delete();\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Insert a defined name by builder param.\n     * @param {ISetDefinedNameMutationParam} param The param to insert the defined name\n     * @returns {void}\n     * @example\n     * ```ts\n     * // The code below inserts a defined name by builder param\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const definedNameBuilder = univerAPI.newDefinedName()\n     *   .setRef('Sheet1!$A$1')\n     *   .setName('MyDefinedName')\n     *   .setComment('This is a comment')\n     *   .build();\n     * fWorkbook.insertDefinedNameBuilder(definedNameBuilder);\n     * ```\n     */\n    insertDefinedNameBuilder(param: ISetDefinedNameMutationParam): void {\n        param.unitId = this.getId();\n        this._commandService.syncExecuteCommand(SetDefinedNameCommand.id, param);\n    }\n\n    /**\n     * Update the defined name with the given name.\n     * @param {ISetDefinedNameMutationParam} param The param to insert the defined name\n     * @returns {void}\n     * @example\n     * ```ts\n     * // The code below updates the defined name with the given name\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const definedNameBuilder = fWorkbook.getDefinedName('MyDefinedName').toBuilder();\n     * const param = definedNameBuilder.setRef('Sheet1!A2')\n     *   .setName('NewDefinedName')\n     *   .build();\n     * fWorkbook.updateDefinedNameBuilder(param);\n     * ```\n     */\n    updateDefinedNameBuilder(param: ISetDefinedNameMutationParam): void {\n        this._commandService.syncExecuteCommand(SetDefinedNameCommand.id, param);\n    }\n\n    /**\n     * Gets the registered range themes.\n     * @returns {string[]} The name list of registered range themes.\n     * @example\n     * ```ts\n     * // The code below gets the registered range themes\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const themes = fWorkbook.getRegisteredRangeThemes();\n     * console.log(themes);\n     * ```\n     */\n    getRegisteredRangeThemes(): string[] {\n        return this._injector.get(SheetRangeThemeService).getRegisteredRangeThemes();\n    }\n\n    /**\n     * Register a custom range theme style.\n     * @param {RangeThemeStyle} rangeThemeStyle The range theme style to register\n     * @returns {void}\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const rangeThemeStyle = fWorkbook.createRangeThemeStyle('MyTheme', {\n     *   secondRowStyle: {\n     *     bg: {\n     *       rgb: 'rgb(214,231,241)',\n     *     },\n     *   },\n     * });\n     * fWorkbook.registerRangeTheme(rangeThemeStyle);\n     * ```\n     */\n    registerRangeTheme(rangeThemeStyle: RangeThemeStyle): void {\n        this._commandService.syncExecuteCommand(RegisterWorksheetRangeThemeStyleCommand.id, {\n            unitId: this.getId(),\n            rangeThemeStyle,\n        });\n    }\n\n    /**\n     * Unregister a custom range theme style.\n     * @param {string} themeName The name of the theme to unregister\n     * @returns {void}\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.unregisterRangeTheme('MyTheme');\n     * ```\n     */\n    unregisterRangeTheme(themeName: string): void {\n        this._commandService.syncExecuteCommand(UnregisterWorksheetRangeThemeStyleCommand.id, {\n            unitId: this.getId(),\n            themeName,\n        });\n    }\n\n    /**\n     * Create a range theme style.\n     * @param {string} themeName - The name of the theme to register\n     * @param {Omit<IRangeThemeStyleJSON, 'name'>} themeStyleJson - The theme style json to register\n     * @returns {RangeThemeStyle} - The created range theme style\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const rangeThemeStyle = fWorkbook.createRangeThemeStyle('MyTheme', {\n     *   secondRowStyle: {\n     *     bg: {\n     *       rgb: 'rgb(214,231,241)',\n     *     },\n     *   },\n     * });\n     * console.log(rangeThemeStyle);\n     * ```\n     */\n    createRangeThemeStyle(themeName: string, themeStyleJson?: Omit<IRangeThemeStyleJSON, 'name'>): RangeThemeStyle {\n        return new RangeThemeStyle(themeName, themeStyleJson);\n    }\n\n    /**\n     * Set custom metadata of workbook\n     * @param {CustomData | undefined} custom custom metadata\n     * @returns {FWorkbook} FWorkbook\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.setCustomMetadata({ key: 'value' });\n     * ```\n     */\n    setCustomMetadata(custom: CustomData | undefined): FWorkbook {\n        this._workbook.setCustomMetadata(custom);\n        return this;\n    }\n\n    /**\n     * Get custom metadata of workbook\n     * @returns {CustomData | undefined} custom metadata\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const custom = fWorkbook.getCustomMetadata();\n     * console.log(custom);\n     * ```\n     */\n    getCustomMetadata(): CustomData | undefined {\n        return this._workbook.getCustomMetadata();\n    }\n}\n\n/**\n * @ignore\n */\n// eslint-disable-next-line ts/no-namespace\nexport namespace FWorkbook {\n    export type FontLine = _FontLine;\n    export type FontStyle = _FontLine;\n    export type FontWeight = _FontLine;\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommandInfo, ICreateUnitOptions, IDisposable, Injector, IWorkbookData, Nullable, Workbook } from '@univerjs/core';\nimport type { CommandListenerValueChange, IInsertSheetCommandParams, IRemoveSheetCommandParams, ISetGridlinesColorCommandParams, ISetTabColorMutationParams, ISetWorksheetActivateCommandParams, ISetWorksheetHideMutationParams, ISetWorksheetNameCommandParams, ISetWorksheetOrderMutationParams, IToggleGridlinesCommandParams } from '@univerjs/sheets';\nimport type { IBeforeActiveSheetChangeEvent, IBeforeGridlineColorChanged, IBeforeGridlineEnableChange, IBeforeSheetCreateEventParams, IBeforeSheetDeleteEvent, IBeforeSheetHideChangeEvent, IBeforeSheetMoveEvent, IBeforeSheetNameChangeEvent, IBeforeSheetTabColorChangeEvent, ISheetCreatedEventParams } from './f-event';\nimport type { FRange } from './f-range';\nimport type { FWorksheet } from './f-worksheet';\nimport { CanceledError, ICommandService, IUniverInstanceService, toDisposable, UniverInstanceType } from '@univerjs/core';\nimport { FUniver } from '@univerjs/core/facade';\nimport { COMMAND_LISTENER_VALUE_CHANGE, getValueChangedEffectedRange, InsertSheetCommand, RemoveSheetCommand, SetGridlinesColorCommand, SetTabColorMutation, SetWorksheetActiveOperation, SetWorksheetHideMutation, SetWorksheetNameCommand, SetWorksheetOrderMutation, ToggleGridlinesCommand } from '@univerjs/sheets';\nimport { FDefinedNameBuilder } from './f-defined-name';\nimport { FPermission } from './f-permission';\nimport { FWorkbook } from './f-workbook';\n\n/**\n * @ignore\n */\nexport interface IFUniverSheetsMixin {\n    /**\n     * @deprecated use `univerAPI.createWorkbook` instead.\n     */\n    createUniverSheet(data: Partial<IWorkbookData>): FWorkbook;\n\n    /**\n     * Create a new spreadsheet and get the API handler of that spreadsheet.\n     * @param {Partial<IWorkbookData>} data The snapshot of the spreadsheet.\n     * @param {ICreateUnitOptions} options The options of creating the spreadsheet.\n     * @returns {FWorkbook} FWorkbook API instance.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.createWorkbook({ id: 'Sheet1', name: 'Sheet1' });\n     * console.log(fWorkbook);\n     * ```\n     *\n     * Add you can make the workbook not as the active workbook by setting options:\n     * ```ts\n     * const fWorkbook = univerAPI.createWorkbook({ id: 'Sheet1', name: 'Sheet1' }, { makeCurrent: false });\n     * console.log(fWorkbook);\n     * ```\n     */\n    createWorkbook(data: Partial<IWorkbookData>, options?: ICreateUnitOptions): FWorkbook;\n\n    /**\n     * Get the currently focused Univer spreadsheet.\n     * @returns {FWorkbook | null} The currently focused Univer spreadsheet.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * console.log(fWorkbook);\n     * ```\n     */\n    getActiveWorkbook(): FWorkbook | null;\n\n    /**\n     * @deprecated use `univerAPI.getActiveWorkbook` instead\n     */\n    getActiveUniverSheet(): FWorkbook | null;\n\n    /**\n     * Get the spreadsheet API handler by the spreadsheet id.\n     * @param {string} id The spreadsheet id.\n     * @returns {FWorkbook | null} The spreadsheet API instance.\n     *\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getUniverSheet('Sheet1');\n     * console.log(fWorkbook);\n     *\n     * const fWorkbook = univerAPI.getWorkbook('Sheet1');\n     * console.log(fWorkbook);\n     * ```\n     */\n    getUniverSheet(id: string): FWorkbook | null;\n\n    getWorkbook(id: string): FWorkbook | null;\n\n    /**\n     * Get the PermissionInstance.\n     * @deprecated This function is deprecated and will be removed in version 0.6.0. Please use the function with the same name on the `FWorkbook` instance instead.\n     */\n    getPermission(): FPermission;\n\n    /**\n     * @deprecated Use `univerAPI.addEvent(univerAPI.Event.UnitCreated, () => {})`\n     */\n    onUniverSheetCreated(callback: (workbook: FWorkbook) => void): IDisposable;\n\n    /**\n     * Create a new defined name builder.\n     * @returns {FDefinedNameBuilder} - The defined name builder.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const definedNameBuilder = univerAPI.newDefinedName()\n     *   .setRef('Sheet1!$A$1')\n     *   .setName('MyDefinedName')\n     *   .setComment('This is a comment');\n     * console.log(definedNameBuilder);\n     * fWorkbook.insertDefinedNameBuilder(definedNameBuilder.build());\n     * ```\n     */\n    newDefinedName(): FDefinedNameBuilder;\n\n    /**\n     * Get the target of the sheet.\n     * @param {string} unitId - The unitId of the sheet.\n     * @param {string} subUnitId - The subUnitId of the sheet.\n     * @returns {Nullable<{ workbook: FWorkbook; worksheet: FWorksheet }>} - The target of the sheet.\n     * @example\n     * ```ts\n     * const unitId = 'workbook-01';\n     * const subUnitId = 'sheet-0001';\n     * const target = univerAPI.getSheetTarget(unitId, subUnitId);\n     * if (!target) return;\n     * const { workbook, worksheet } = target;\n     * console.log(workbook, worksheet);\n     * ```\n     */\n    getSheetTarget(unitId: string, subUnitId: string): Nullable<{ workbook: FWorkbook; worksheet: FWorksheet }>;\n\n    /**\n     * Get the target of the sheet.\n     * @param {ICommandInfo<object>} commandInfo - The commandInfo of the command.\n     * @returns {Nullable<{ workbook: FWorkbook; worksheet: FWorksheet }>} - The target of the sheet.\n     * @example\n     * ```ts\n     * univerAPI.addEvent(univerAPI.Event.CommandExecuted, (commandInfo) => {\n     *   const target = univerAPI.getCommandSheetTarget(commandInfo);\n     *   if (!target) return;\n     *   const { workbook, worksheet } = target;\n     *   console.log(workbook, worksheet);\n     * });\n     * ```\n     */\n    getCommandSheetTarget(commandInfo: ICommandInfo<object>): Nullable<{ workbook: FWorkbook; worksheet: FWorksheet }>;\n\n    /**\n     * Get the active sheet.\n     * @returns {Nullable<{ workbook: FWorkbook; worksheet: FWorksheet }>} The active sheet.\n     * @example\n     * ```ts\n     * const target = univerAPI.getActiveSheet();\n     * if (!target) return;\n     * const { workbook, worksheet } = target;\n     * console.log(workbook, worksheet);\n     * ```\n     */\n    getActiveSheet(): Nullable<{ workbook: FWorkbook; worksheet: FWorksheet }>;\n}\n\nexport class FUniverSheetsMixin extends FUniver implements IFUniverSheetsMixin {\n    override getCommandSheetTarget(commandInfo: ICommandInfo<object>): Nullable<{ workbook: FWorkbook; worksheet: FWorksheet }> {\n        const params = commandInfo.params as { unitId: string; subUnitId: string; sheetId: string };\n        if (!params) return this.getActiveSheet();\n        const workbook = params.unitId ? this.getUniverSheet(params.unitId) : this.getActiveWorkbook?.();\n        if (!workbook) {\n            return;\n        }\n\n        const worksheet = workbook.getSheetBySheetId(params.subUnitId || params.sheetId) || workbook.getActiveSheet();\n        if (!worksheet) {\n            return;\n        }\n\n        return { workbook, worksheet };\n    }\n\n    override getSheetTarget(unitId: string, subUnitId: string): Nullable<{ workbook: FWorkbook; worksheet: FWorksheet }> {\n        const workbook = this.getUniverSheet(unitId);\n        if (!workbook) {\n            return;\n        }\n\n        const worksheet = workbook.getSheetBySheetId(subUnitId);\n        if (!worksheet) {\n            return;\n        }\n\n        return { workbook, worksheet };\n    }\n\n    private _initWorkbookEvent(injector: Injector): void {\n        const univerInstanceService = injector.get(IUniverInstanceService);\n\n        // Register workbook disposed event handler\n        this.registerEventHandler(\n            this.Event.WorkbookDisposed,\n            () => univerInstanceService.unitDisposed$.subscribe((unit) => {\n                if (unit.type === UniverInstanceType.UNIVER_SHEET) {\n                    this.fireEvent(this.Event.WorkbookDisposed, {\n                        unitId: unit.getUnitId(),\n                        unitType: unit.type,\n                        snapshot: unit.getSnapshot() as IWorkbookData,\n                    });\n                }\n            })\n        );\n\n        // Register workbook created event handler\n        this.registerEventHandler(\n            this.Event.WorkbookCreated,\n            () => univerInstanceService.unitAdded$.subscribe((unit) => {\n                if (unit.type === UniverInstanceType.UNIVER_SHEET) {\n                    const workbook = unit as Workbook;\n                    const workbookUnit = injector.createInstance(FWorkbook, workbook);\n                    this.fireEvent(this.Event.WorkbookCreated, {\n                        unitId: unit.getUnitId(),\n                        type: unit.type,\n                        workbook: workbookUnit,\n                        unit: workbookUnit,\n                    });\n                }\n            })\n        );\n    }\n\n    /**\n     * @ignore\n     */\n    // eslint-disable-next-line max-lines-per-function\n    override _initialize(injector: Injector): void {\n        const commandService = injector.get(ICommandService);\n\n        this.registerEventHandler(\n            this.Event.BeforeSheetCreate,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id === InsertSheetCommand.id) {\n                    const params = (commandInfo.params) as IInsertSheetCommandParams;\n                    const { unitId, index, sheet } = params || {};\n                    const workbook = unitId ? this.getUniverSheet(unitId) : this.getActiveWorkbook?.();\n                    if (!workbook) {\n                        return;\n                    }\n                    const eventParams: IBeforeSheetCreateEventParams = {\n                        workbook,\n                        index,\n                        sheet,\n                    };\n                    this.fireEvent(this.Event.BeforeSheetCreate, eventParams);\n                    // cancel this command\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeActiveSheetChange,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id === SetWorksheetActiveOperation.id) {\n                    const { subUnitId: sheetId, unitId } = commandInfo.params as ISetWorksheetActivateCommandParams;\n                    const workbook = unitId ? this.getUniverSheet(unitId) : this.getActiveWorkbook?.();\n                    if (!workbook || !sheetId) return;\n                    const activeSheet = workbook.getSheetBySheetId(sheetId);\n                    const oldActiveSheet = workbook.getActiveSheet();\n                    if (!activeSheet || !oldActiveSheet) return;\n                    const eventParams: IBeforeActiveSheetChangeEvent = {\n                        workbook,\n                        activeSheet,\n                        oldActiveSheet,\n                    };\n                    this.fireEvent(this.Event.BeforeActiveSheetChange, eventParams);\n                    // cancel this command\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeSheetDelete,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id === RemoveSheetCommand.id) {\n                    const target = this.getCommandSheetTarget(commandInfo);\n                    if (!target) return;\n                    const { workbook, worksheet } = target;\n                    const eventParams: IBeforeSheetDeleteEvent = {\n                        workbook,\n                        worksheet,\n                    };\n                    this.fireEvent(this.Event.BeforeSheetDelete, eventParams);\n                    // cancel this command\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeSheetMove,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id === SetWorksheetOrderMutation.id) {\n                    const { fromOrder, toOrder } = commandInfo.params as ISetWorksheetOrderMutationParams;\n                    const target = this.getCommandSheetTarget(commandInfo);\n                    if (!target) return;\n                    const eventParams: IBeforeSheetMoveEvent = {\n                        workbook: target.workbook,\n                        worksheet: target.worksheet,\n                        newIndex: toOrder,\n                        oldIndex: fromOrder,\n                    };\n                    this.fireEvent(this.Event.BeforeSheetMove, eventParams);\n                    // cancel this command\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeSheetNameChange,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id === SetWorksheetNameCommand.id) {\n                    const { name } = commandInfo.params as ISetWorksheetNameCommandParams;\n                    const target = this.getCommandSheetTarget(commandInfo);\n                    if (!target) return;\n                    const eventParams: IBeforeSheetNameChangeEvent = {\n                        workbook: target.workbook,\n                        worksheet: target.worksheet,\n                        newName: name,\n                        oldName: target.worksheet.getSheetName(),\n                    };\n                    this.fireEvent(this.Event.BeforeSheetNameChange, eventParams);\n                    // cancel this command\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeSheetTabColorChange,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id === SetTabColorMutation.id) {\n                    const { color } = commandInfo.params as ISetTabColorMutationParams;\n                    const target = this.getCommandSheetTarget(commandInfo);\n                    if (!target) return;\n                    const eventParams: IBeforeSheetTabColorChangeEvent = {\n                        workbook: target.workbook,\n                        worksheet: target.worksheet,\n                        newColor: color,\n                        oldColor: target.worksheet.getTabColor(),\n                    };\n                    this.fireEvent(this.Event.BeforeSheetTabColorChange, eventParams);\n                    // cancel this command\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeSheetHideChange,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id === SetWorksheetHideMutation.id) {\n                    const { hidden } = commandInfo.params as ISetWorksheetHideMutationParams;\n                    const target = this.getCommandSheetTarget(commandInfo);\n                    if (!target) return;\n                    const eventParams: IBeforeSheetHideChangeEvent = {\n                        workbook: target.workbook,\n                        worksheet: target.worksheet,\n                        hidden: Boolean(hidden),\n                    };\n                    this.fireEvent(this.Event.BeforeSheetHideChange, eventParams);\n                    // cancel this command\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeGridlineColorChange,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id === SetGridlinesColorCommand.id) {\n                    const target = this.getCommandSheetTarget(commandInfo);\n                    if (!target) return;\n                    const eventParams: IBeforeGridlineColorChanged = {\n                        ...target,\n                        color: (commandInfo.params as ISetGridlinesColorCommandParams)?.color,\n                    };\n                    this.fireEvent(this.Event.BeforeGridlineColorChange, eventParams);\n                    // cancel this command\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeGridlineEnableChange,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id === ToggleGridlinesCommand.id) {\n                    const target = this.getCommandSheetTarget(commandInfo);\n                    if (!target) return;\n                    const eventParams: IBeforeGridlineEnableChange = {\n                        ...target,\n                        enabled: Boolean((commandInfo.params as IToggleGridlinesCommandParams)?.showGridlines) ?? !target.worksheet.hasHiddenGridLines(),\n                    };\n                    this.fireEvent(this.Event.BeforeGridlineEnableChange, eventParams);\n                    // cancel this command\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.SheetValueChanged,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (COMMAND_LISTENER_VALUE_CHANGE.indexOf(commandInfo.id) > -1) {\n                    const sheet = this.getActiveSheet();\n                    if (!sheet) return;\n                    const ranges = getValueChangedEffectedRange(commandInfo)\n                        .map(\n                            (range) => this.getWorkbook(range.unitId)\n                                ?.getSheetBySheetId(range.subUnitId)\n                                ?.getRange(range.range)\n                        )\n                        .filter(Boolean) as FRange[];\n                    if (!ranges.length) return;\n                    this.fireEvent(this.Event.SheetValueChanged, {\n                        payload: commandInfo as CommandListenerValueChange,\n                        effectedRanges: ranges,\n                    });\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.SheetCreated,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id === InsertSheetCommand.id) {\n                    const params = commandInfo.params as IInsertSheetCommandParams;\n                    const { unitId } = params || {};\n                    const workbook = unitId ? this.getUniverSheet(unitId) : this.getActiveWorkbook?.();\n                    if (!workbook) {\n                        return;\n                    }\n                    const worksheet = workbook.getActiveSheet();\n                    if (!worksheet) {\n                        return;\n                    }\n                    const eventParams: ISheetCreatedEventParams = {\n                        workbook,\n                        worksheet,\n                    };\n                    this.fireEvent(\n                        this.Event.SheetCreated,\n                        eventParams\n                    );\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.ActiveSheetChanged,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id === SetWorksheetActiveOperation.id) {\n                    const target = this.getActiveSheet();\n                    if (!target) return;\n                    const { workbook, worksheet: activeSheet } = target;\n                    this._fireActiveSheetChanged(workbook, activeSheet);\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.SheetDeleted,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id === RemoveSheetCommand.id) {\n                    const { subUnitId: sheetId, unitId } = commandInfo.params as IRemoveSheetCommandParams;\n                    const workbook = unitId ? this.getUniverSheet(unitId) : this.getActiveWorkbook?.();\n                    if (!workbook || !sheetId) return;\n                    this._fireSheetDeleted(workbook, sheetId);\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.SheetMoved,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id === SetWorksheetOrderMutation.id) {\n                    const { toOrder: toIndex } = commandInfo.params as ISetWorksheetOrderMutationParams;\n                    const target = this.getCommandSheetTarget(commandInfo);\n                    if (!target) return;\n                    this._fireSheetMoved(target.workbook, target.worksheet, toIndex);\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.SheetNameChanged,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id === SetWorksheetNameCommand.id) {\n                    const { name } = commandInfo.params as ISetWorksheetNameCommandParams;\n                    const target = this.getCommandSheetTarget(commandInfo);\n                    if (!target) return;\n                    this._fireSheetNameChanged(target.workbook, target.worksheet, name);\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.SheetTabColorChanged,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id === SetTabColorMutation.id) {\n                    const { color } = commandInfo.params as ISetTabColorMutationParams;\n                    const target = this.getCommandSheetTarget(commandInfo);\n                    if (!target) return;\n                    this._fireSheetTabColorChanged(target.workbook, target.worksheet, color);\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.SheetHideChanged,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id === SetWorksheetHideMutation.id) {\n                    const { hidden } = commandInfo.params as ISetWorksheetHideMutationParams;\n                    const target = this.getCommandSheetTarget(commandInfo);\n                    if (!target) return;\n                    this._fireSheetHideChanged(target.workbook, target.worksheet, !!hidden);\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.GridlineChanged,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id === SetGridlinesColorCommand.id || commandInfo.id === ToggleGridlinesCommand.id) {\n                    const target = this.getCommandSheetTarget(commandInfo);\n                    if (!target) return;\n                    this.fireEvent(this.Event.GridlineChanged, {\n                        ...target,\n                        enabled: !target.worksheet.hasHiddenGridLines(),\n                        color: target.worksheet.getGridLinesColor(),\n                    });\n                }\n            })\n        );\n\n        this._initWorkbookEvent(injector);\n    }\n\n    override createUniverSheet(data: Partial<IWorkbookData>, options?: ICreateUnitOptions): FWorkbook {\n        const instanceService = this._injector.get(IUniverInstanceService);\n        const workbook = instanceService.createUnit<IWorkbookData, Workbook>(UniverInstanceType.UNIVER_SHEET, data, options);\n        return this._injector.createInstance(FWorkbook, workbook);\n    };\n\n    override createWorkbook(data: Partial<IWorkbookData>, options?: ICreateUnitOptions): FWorkbook {\n        return this.createUniverSheet(data, options);\n    }\n\n    override getActiveWorkbook(): FWorkbook | null {\n        const workbook = this._univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET);\n        if (!workbook) {\n            return null;\n        }\n\n        return this._injector.createInstance(FWorkbook, workbook);\n    }\n\n    override getActiveUniverSheet(): FWorkbook | null {\n        return this.getActiveWorkbook();\n    }\n\n    override getUniverSheet(id: string): FWorkbook | null {\n        const workbook = this._univerInstanceService.getUnit<Workbook>(id, UniverInstanceType.UNIVER_SHEET);\n        if (!workbook) {\n            return null;\n        }\n\n        return this._injector.createInstance(FWorkbook, workbook);\n    }\n\n    override getWorkbook(id: string): FWorkbook | null {\n        return this.getUniverSheet(id);\n    }\n\n    override getPermission(): FPermission {\n        return this._injector.createInstance(FPermission);\n    }\n\n    override onUniverSheetCreated(callback: (workbook: FWorkbook) => void): IDisposable {\n        const subscription = this._univerInstanceService.getTypeOfUnitAdded$<Workbook>(UniverInstanceType.UNIVER_SHEET).subscribe((workbook) => {\n            const fworkbook = this._injector.createInstance(FWorkbook, workbook);\n            callback(fworkbook);\n        });\n\n        return toDisposable(subscription);\n    }\n\n    override newDefinedName(): FDefinedNameBuilder {\n        return this._injector.createInstance(FDefinedNameBuilder);\n    }\n\n    override getActiveSheet(): Nullable<{ workbook: FWorkbook; worksheet: FWorksheet }> {\n        const workbook = this.getActiveWorkbook();\n        if (!workbook) {\n            return null;\n        }\n        const worksheet = workbook.getActiveSheet();\n        if (!worksheet) {\n            return null;\n        }\n        return { workbook, worksheet };\n    }\n\n    private _fireActiveSheetChanged(workbook: FWorkbook, newActiveSheet: FWorksheet): void {\n        this.fireEvent(this.Event.ActiveSheetChanged, {\n            workbook,\n            activeSheet: newActiveSheet,\n        });\n    }\n\n    private _fireSheetDeleted(workbook: FWorkbook, sheetId: string): void {\n        this.fireEvent(this.Event.SheetDeleted, {\n            workbook,\n            sheetId,\n        });\n    }\n\n    private _fireSheetMoved(workbook: FWorkbook, worksheet: FWorksheet, toIndex: number): void {\n        this.fireEvent(this.Event.SheetMoved, {\n            workbook,\n            worksheet,\n            newIndex: toIndex,\n        });\n    }\n\n    private _fireSheetNameChanged(workbook: FWorkbook, worksheet: FWorksheet, newName: string): void {\n        this.fireEvent(this.Event.SheetNameChanged, {\n            workbook,\n            worksheet,\n            newName,\n        });\n    }\n\n    private _fireSheetTabColorChanged(workbook: FWorkbook, worksheet: FWorksheet, newColor: string): void {\n        this.fireEvent(this.Event.SheetTabColorChanged, {\n            workbook,\n            worksheet,\n            newColor,\n        });\n    }\n\n    private _fireSheetHideChanged(workbook: FWorkbook, worksheet: FWorksheet, hidden: boolean): void {\n        this.fireEvent(this.Event.SheetHideChanged, {\n            workbook,\n            worksheet,\n            hidden,\n        });\n    }\n}\n\nFUniver.extend(FUniverSheetsMixin);\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FUniver extends IFUniverSheetsMixin { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FEnum } from '@univerjs/core/facade';\nimport { SheetSkeletonChangeType, SheetValueChangeType, SplitDelimiterEnum } from '@univerjs/sheets';\n\n/**\n * @ignore\n */\nexport interface IFSheetsEnum {\n    /**\n     * Sheet value change command types. These commands affect the content or style of cells.\n     * Includes operations like setting cell values, moving ranges, merging cells, and applying styles.\n     */\n    SheetValueChangeType: typeof SheetValueChangeType;\n\n    /**\n     * Sheet skeleton change command types. These commands affect the structure of the worksheet.\n     * Includes operations like changing row/column dimensions, visibility, and grid properties.\n     */\n    SheetSkeletonChangeType: typeof SheetSkeletonChangeType;\n\n    /**\n     * Split delimiter types.\n     */\n    SplitDelimiterType: typeof SplitDelimiterEnum;\n}\n\nexport class FSheetsEnum implements IFSheetsEnum {\n    get SheetValueChangeType(): typeof SheetValueChangeType {\n        return SheetValueChangeType;\n    }\n\n    get SheetSkeletonChangeType(): typeof SheetSkeletonChangeType {\n        return SheetSkeletonChangeType;\n    }\n\n    get SplitDelimiterType(): typeof SplitDelimiterEnum {\n        return SplitDelimiterEnum;\n    }\n}\n\nFEnum.extend(FSheetsEnum);\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    export interface FEnum extends IFSheetsEnum {\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IWorkbookData, IWorksheetData, UniverInstanceType } from '@univerjs/core';\nimport type { IEventBase } from '@univerjs/core/facade';\nimport type { CommandListenerValueChange } from '@univerjs/sheets';\nimport type { FRange } from './f-range';\nimport type { FWorkbook } from './f-workbook';\nimport type { FWorksheet } from './f-worksheet';\nimport { FEventName } from '@univerjs/core/facade';\n\n/**\n * Interface for sheet-related events\n * Provides event names for sheet creation, workbook creation, and gridline changes\n * @ignore\n */\nexport interface IFSheetEventMixin {\n    /**\n     * Event fired after a sheet is created\n     * @see {@link ISheetCreatedEventParams}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.SheetCreated, (params) => {\n     *   const { workbook, worksheet } = params;\n     *   console.log('sheet created', params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get SheetCreated(): 'SheetCreated';\n\n    /**\n     * Event fired before a sheet is created\n     * @see {@link IBeforeSheetCreateEventParams}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeSheetCreate, (params) => {\n     *   const { workbook, index, sheet } = params;\n     *   console.log('before sheet create', params);\n     *\n     *   // Cancel the sheet creation operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get BeforeSheetCreate(): 'BeforeSheetCreate';\n\n    /**\n     * Event fired before the active sheet changes\n     * @see {@link IBeforeActiveSheetChangeEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeActiveSheetChange, (params) => {\n     *   const { workbook, activeSheet, oldActiveSheet } = params;\n     *   console.log('before active sheet change', params);\n     *\n     *   // Cancel the active sheet change operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get BeforeActiveSheetChange(): 'BeforeActiveSheetChange';\n\n    /**\n     * Event fired after the active sheet changes\n     * @see {@link IActiveSheetChangedEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.ActiveSheetChanged, (params) => {\n     *   const { workbook, activeSheet } = params;\n     *   console.log('after active sheet changed', params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get ActiveSheetChanged(): 'ActiveSheetChanged';\n\n    /**\n     * Event fired after a sheet is deleted\n     * @see {@link ISheetDeletedEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.SheetDeleted, (params) => {\n     *   const { workbook, sheetId } = params;\n     *   console.log('sheet deleted', params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get SheetDeleted(): 'SheetDeleted';\n\n    /**\n     * Event fired before a sheet is deleted\n     * @see {@link IBeforeSheetDeleteEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeSheetDelete, (params) => {\n     *   const { workbook, worksheet } = params;\n     *   console.log('before sheet delete', params);\n     *\n     *   // Cancel the sheet deletion operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get BeforeSheetDelete(): 'BeforeSheetDelete';\n\n    /**\n     * Event fired after a sheet is moved\n     * @see {@link ISheetMovedEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.SheetMoved, (params) => {\n     *   const { workbook, worksheet, newIndex } = params;\n     *   console.log('sheet moved', params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get SheetMoved(): 'SheetMoved';\n\n    /**\n     * Event fired before a sheet is moved\n     * @see {@link IBeforeSheetMoveEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeSheetMove, (params) => {\n     *   const { workbook, worksheet, newIndex, oldIndex } = params;\n     *   console.log('before sheet move', params);\n     *\n     *   // Cancel the sheet move operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get BeforeSheetMove(): 'BeforeSheetMove';\n\n    /**\n     * Event fired after a sheet name is changed\n     * @see {@link ISheetNameChangedEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.SheetNameChanged, (params) => {\n     *   const { workbook, worksheet, newName } = params;\n     *   console.log('sheet name changed', params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get SheetNameChanged(): 'SheetNameChanged';\n\n    /**\n     * Event fired before a sheet name is changed\n     * @see {@link IBeforeSheetNameChangeEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeSheetNameChange, (params) => {\n     *   const { workbook, worksheet, newName, oldName } = params;\n     *   console.log('before sheet name change', params);\n     *\n     *   // Cancel the sheet name change operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get BeforeSheetNameChange(): 'BeforeSheetNameChange';\n\n    /**\n     * Event fired after a sheet tab color is changed\n     * @see {@link ISheetTabColorChangedEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.SheetTabColorChanged, (params) => {\n     *   const { workbook, worksheet, newColor } = params;\n     *   console.log('sheet tab color changed', params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get SheetTabColorChanged(): 'SheetTabColorChanged';\n\n    /**\n     * Event fired before a sheet tab color is changed\n     * @see {@link IBeforeSheetTabColorChangeEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeSheetTabColorChange, (params) => {\n     *   const { workbook, worksheet, newColor, oldColor } = params;\n     *   console.log('before sheet tab color change', params);\n     *\n     *   // Cancel the sheet tab color change operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get BeforeSheetTabColorChange(): 'BeforeSheetTabColorChange';\n\n    /**\n     * Event fired after a sheet is hidden\n     * @see {@link ISheetHideChangedEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.SheetHideChanged, (params) => {\n     *   const { workbook, worksheet, hidden } = params;\n     *   console.log('sheet hide changed', params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get SheetHideChanged(): 'SheetHideChanged';\n\n    /**\n     * Event fired before a sheet is hidden\n     * @see {@link IBeforeSheetHideChangeEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeSheetHideChange, (params) => {\n     *   const { workbook, worksheet, hidden } = params;\n     *   console.log('before sheet hide change', params);\n     *\n     *   // Cancel the sheet hide operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get BeforeSheetHideChange(): 'BeforeSheetHideChange';\n\n    /**\n     * Event fired after a workbook is created\n     * @see {@link IWorkbookCreateParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.WorkbookCreated, (params) => {\n     *   const { unitId, type, workbook, unit } = params;\n     *   console.log('workbook created', params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get WorkbookCreated(): 'WorkbookCreated';\n\n    /**\n     * Event fired after a workbook is disposed\n     * @see {@link IWorkbookDisposedEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.WorkbookDisposed, (params) => {\n     *   const { unitId, unitType, snapshot } = params;\n     *   console.log('workbook disposed', params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get WorkbookDisposed(): 'WorkbookDisposed';\n\n    /**\n     * Event fired when gridline changed\n     * @see {@link IGridlineChangedEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.GridlineChanged, (params) => {\n     *   const { workbook, worksheet, enabled, color } = params;\n     *   console.log('gridline changed', params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get GridlineChanged(): 'GridlineChanged';\n\n    /**\n     * Event fired before gridline enable changed\n     * @see {@link IBeforeGridlineEnableChange}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeGridlineEnableChange, (params) => {\n     *   const { workbook, worksheet, enabled } = params;\n     *   console.log('before gridline enable change', params);\n     *\n     *   // Cancel the gridline enable change operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get BeforeGridlineEnableChange(): 'BeforeGridlineEnableChange';\n\n    /**\n     * Event fired before gridline color changed\n     * @see {@link IBeforeGridlineColorChanged}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeGridlineColorChange, (params) => {\n     *   const { workbook, worksheet, color } = params;\n     *   console.log('before gridline color change', params);\n     *\n     *   // Cancel the gridline color change operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get BeforeGridlineColorChange(): 'BeforeGridlineColorChange';\n\n    /**\n     * Event fired when sheet value changed\n     * @see {@link ISheetValueChangedEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.SheetValueChanged, (params)=> {\n     *   const { effectedRanges, payload } = params;\n     *   console.log('sheet value changed', params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly SheetValueChanged: 'SheetValueChanged';\n}\n\n/**\n * Interface for workbook creation parameters\n * Extends the base event interface and includes workbook initialization details\n */\nexport interface IWorkbookCreateParam extends IEventBase {\n    /** Unique identifier for the workbook unit */\n    unitId: string;\n    /** Type identifier specifying this is a sheet instance */\n    type: UniverInstanceType.UNIVER_SHEET;\n    /** The workbook instance being created */\n    workbook: FWorkbook;\n    /** The workbook unit reference */\n    unit: FWorkbook;\n}\n\n/**\n * Interface for workbook disposal event\n * Contains information about the disposed workbook including its snapshot data\n */\nexport interface IWorkbookDisposedEvent extends IEventBase {\n    /** Unique identifier of the disposed workbook unit */\n    unitId: string;\n    /** Type identifier specifying this was a sheet instance */\n    unitType: UniverInstanceType.UNIVER_SHEET;\n    /** Snapshot data of the workbook at the time of disposal */\n    snapshot: IWorkbookData;\n}\n\n/**\n * Interface for gridline change event\n * Triggered when gridline visibility or color changes in a worksheet\n */\nexport interface IGridlineChangedEvent extends IEventBase {\n    /** The workbook instance containing the worksheet */\n    workbook: FWorkbook;\n    /** The worksheet where gridline changes occurred */\n    worksheet: FWorksheet;\n    /** Flag indicating whether gridlines are enabled or disabled */\n    enabled: boolean;\n    /** The color of the gridlines, undefined if using default color */\n    color: string | undefined;\n}\n\n/**\n * Interface for event before gridline enable/disable\n * Triggered before changing the gridline visibility state\n */\nexport interface IBeforeGridlineEnableChange extends IEventBase {\n    /** The workbook instance containing the worksheet */\n    workbook: FWorkbook;\n    /** The worksheet where gridline state will change */\n    worksheet: FWorksheet;\n    /** The new enabled state to be applied */\n    enabled: boolean;\n}\n\n/**\n * Interface for event before gridline color change\n * Triggered before changing the gridline color\n */\nexport interface IBeforeGridlineColorChanged extends IEventBase {\n    /** The workbook instance containing the worksheet */\n    workbook: FWorkbook;\n    /** The worksheet where gridline color will change */\n    worksheet: FWorksheet;\n    /** The new color to be applied, undefined to use default color */\n    color: string | undefined;\n}\n\n/**\n * Interface for event parameters triggered before creating a new worksheet\n * Extends the base event interface and includes workbook and worksheet details\n */\nexport interface IBeforeSheetCreateEventParams extends IEventBase {\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** Optional index where the new sheet will be inserted */\n    index?: number;\n    /** Optional initial worksheet data */\n    sheet?: IWorksheetData;\n}\n\n/**\n * Interface for event parameters triggered after a worksheet is created\n * Extends the base event interface and includes workbook and worksheet details\n */\nexport interface ISheetCreatedEventParams extends IEventBase {\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** The newly created worksheet */\n    worksheet: FWorksheet;\n}\n\n/**\n * Interface for sheet active change event\n * Contains information about the sheet that will become active\n */\nexport interface IBeforeActiveSheetChangeEvent extends IEventBase {\n    /** The workbook instance containing the worksheet */\n    workbook: FWorkbook;\n    /** The worksheet that will become active */\n    activeSheet: FWorksheet;\n    /** The currently active worksheet */\n    oldActiveSheet: FWorksheet;\n}\n\n/**\n * Interface for sheet active changed event\n * Contains information about the newly activated sheet\n */\nexport interface IActiveSheetChangedEvent extends IEventBase {\n    /** The workbook instance containing the worksheet */\n    workbook: FWorkbook;\n    /** The worksheet that has become active */\n    activeSheet: FWorksheet;\n}\n\n/**\n * Interface for sheet deletion event\n * Contains information about the sheet that was deleted\n */\nexport interface ISheetDeletedEvent extends IEventBase {\n    /** The workbook instance containing the worksheet */\n    workbook: FWorkbook;\n    /** The worksheet that was deleted */\n    sheetId: string;\n}\n\n/**\n * Interface for before sheet deletion event\n * Contains information about the sheet that will be deleted\n */\nexport interface IBeforeSheetDeleteEvent extends IEventBase {\n    /** The workbook instance containing the worksheet */\n    workbook: FWorkbook;\n    /** The worksheet that will be deleted */\n    worksheet: FWorksheet;\n}\n\n/**\n * Interface for sheet moved event\n * Contains information about the sheet movement\n */\nexport interface ISheetMovedEvent extends IEventBase {\n    /** The workbook instance containing the worksheet */\n    workbook: FWorkbook;\n    /** The worksheet that was moved */\n    worksheet: FWorksheet;\n    /** The new position index of the sheet */\n    newIndex: number;\n}\n\n/**\n * Interface for before sheet move event\n * Contains information about the planned sheet movement\n */\nexport interface IBeforeSheetMoveEvent extends IEventBase {\n    /** The workbook instance containing the worksheet */\n    workbook: FWorkbook;\n    /** The worksheet that will be moved */\n    worksheet: FWorksheet;\n    /** The target position index for the sheet */\n    newIndex: number;\n    /** The current position index of the sheet */\n    oldIndex: number;\n}\n\n/**\n * Interface for sheet name change event\n * Contains information about the sheet name change\n */\nexport interface ISheetNameChangedEvent extends IEventBase {\n    /** The workbook instance containing the worksheet */\n    workbook: FWorkbook;\n    /** The worksheet whose name was changed */\n    worksheet: FWorksheet;\n    /** The new name of the sheet */\n    newName: string;\n}\n\n/**\n * Interface for before sheet name change event\n * Contains information about the planned sheet name change\n */\nexport interface IBeforeSheetNameChangeEvent extends IEventBase {\n    /** The workbook instance containing the worksheet */\n    workbook: FWorkbook;\n    /** The worksheet whose name will be changed */\n    worksheet: FWorksheet;\n    /** The new name to be applied */\n    newName: string;\n    /** The current name of the sheet */\n    oldName: string;\n}\n\n/**\n * Interface for sheet tab color change event\n * Contains information about the sheet tab color change\n */\nexport interface ISheetTabColorChangedEvent extends IEventBase {\n    /** The workbook instance containing the worksheet */\n    workbook: FWorkbook;\n    /** The worksheet whose tab color was changed */\n    worksheet: FWorksheet;\n    /** The new color of the sheet tab */\n    newColor: string | undefined;\n}\n\n/**\n * Interface for before sheet tab color change event\n * Contains information about the planned sheet tab color change\n */\nexport interface IBeforeSheetTabColorChangeEvent extends IEventBase {\n    /** The workbook instance containing the worksheet */\n    workbook: FWorkbook;\n    /** The worksheet whose tab color will be changed */\n    worksheet: FWorksheet;\n    /** The new color to be applied */\n    newColor: string | undefined;\n    /** The current color of the sheet tab */\n    oldColor: string | undefined;\n}\n\n/**\n * Interface for sheet hide state change event\n * Contains information about the sheet visibility change\n */\nexport interface ISheetHideChangedEvent extends IEventBase {\n    /** The workbook instance containing the worksheet */\n    workbook: FWorkbook;\n    /** The worksheet whose visibility was changed */\n    worksheet: FWorksheet;\n    /** The new visibility state */\n    hidden: boolean;\n}\n\n/**\n * Interface for before sheet hide state change event\n * Contains information about the planned sheet visibility change\n */\nexport interface IBeforeSheetHideChangeEvent extends IEventBase {\n    /** The workbook instance containing the worksheet */\n    workbook: FWorkbook;\n    /** The worksheet whose visibility will be changed */\n    worksheet: FWorksheet;\n    /** The new visibility state to be applied */\n    hidden: boolean;\n}\n\n/**\n * Interface for sheet value changed event\n * Contains information about the sheet value change\n */\nexport interface ISheetValueChangedEvent extends IEventBase {\n    /** The affected ranges of the sheet */\n    effectedRanges: FRange[];\n    /** The payload of the value change */\n    payload: CommandListenerValueChange;\n}\n\n/**\n * Configuration interface for sheet-related events\n * Provides event names and their corresponding event parameter interfaces\n * @ignore\n */\nexport interface ISheetEventParamConfig {\n    /** Event fired after a worksheet is created */\n    SheetCreated: ISheetCreatedEventParams;\n    /** Event fired before creating a worksheet */\n    BeforeSheetCreate: IBeforeSheetCreateEventParams;\n    /** Event fired after a workbook is created */\n    WorkbookCreated: IWorkbookCreateParam;\n    /** Event fired when a workbook is disposed */\n    WorkbookDisposed: IWorkbookDisposedEvent;\n    /** Event fired when gridline changed */\n    GridlineChanged: IGridlineChangedEvent;\n    /** Event fired before gridline enable changed */\n    BeforeGridlineEnableChange: IBeforeGridlineEnableChange;\n    /** Event fired before gridline color changed */\n    BeforeGridlineColorChange: IBeforeGridlineColorChanged;\n    /** Event fired before active sheet changes */\n    BeforeActiveSheetChange: IBeforeActiveSheetChangeEvent;\n    /** Event fired after active sheet changed */\n    ActiveSheetChanged: IActiveSheetChangedEvent;\n    /** Event fired after a sheet is deleted */\n    SheetDeleted: ISheetDeletedEvent;\n    /** Event fired before a sheet is deleted */\n    BeforeSheetDelete: IBeforeSheetDeleteEvent;\n    /** Event fired after a sheet is moved */\n    SheetMoved: ISheetMovedEvent;\n    /** Event fired before a sheet is moved */\n    BeforeSheetMove: IBeforeSheetMoveEvent;\n    /** Event fired after a sheet name is changed */\n    SheetNameChanged: ISheetNameChangedEvent;\n    /** Event fired before a sheet name is changed */\n    BeforeSheetNameChange: IBeforeSheetNameChangeEvent;\n    /** Event fired after a sheet tab color is changed */\n    SheetTabColorChanged: ISheetTabColorChangedEvent;\n    /** Event fired before a sheet tab color is changed */\n    BeforeSheetTabColorChange: IBeforeSheetTabColorChangeEvent;\n    /** Event fired after a sheet visibility is changed */\n    SheetHideChanged: ISheetHideChangedEvent;\n    /** Event fired before a sheet visibility is changed */\n    BeforeSheetHideChange: IBeforeSheetHideChangeEvent;\n    /** Event fired after a sheet value is changed */\n    SheetValueChanged: ISheetValueChangedEvent;\n}\n\nexport class FSheetEventName implements IFSheetEventMixin {\n    get SheetCreated(): 'SheetCreated' {\n        return 'SheetCreated' as const;\n    }\n\n    get BeforeSheetCreate(): 'BeforeSheetCreate' {\n        return 'BeforeSheetCreate' as const;\n    }\n\n    get WorkbookCreated(): 'WorkbookCreated' {\n        return 'WorkbookCreated' as const;\n    }\n\n    get WorkbookDisposed(): 'WorkbookDisposed' {\n        return 'WorkbookDisposed' as const;\n    }\n\n    get GridlineChanged(): 'GridlineChanged' {\n        return 'GridlineChanged' as const;\n    }\n\n    get BeforeGridlineEnableChange(): 'BeforeGridlineEnableChange' {\n        return 'BeforeGridlineEnableChange' as const;\n    }\n\n    get BeforeGridlineColorChange(): 'BeforeGridlineColorChange' {\n        return 'BeforeGridlineColorChange' as const;\n    }\n\n    get BeforeActiveSheetChange(): 'BeforeActiveSheetChange' {\n        return 'BeforeActiveSheetChange' as const;\n    }\n\n    get ActiveSheetChanged(): 'ActiveSheetChanged' {\n        return 'ActiveSheetChanged' as const;\n    }\n\n    get SheetDeleted(): 'SheetDeleted' {\n        return 'SheetDeleted' as const;\n    }\n\n    get BeforeSheetDelete(): 'BeforeSheetDelete' {\n        return 'BeforeSheetDelete' as const;\n    }\n\n    get SheetMoved(): 'SheetMoved' {\n        return 'SheetMoved' as const;\n    }\n\n    get BeforeSheetMove(): 'BeforeSheetMove' {\n        return 'BeforeSheetMove' as const;\n    }\n\n    get SheetNameChanged(): 'SheetNameChanged' {\n        return 'SheetNameChanged' as const;\n    }\n\n    get BeforeSheetNameChange(): 'BeforeSheetNameChange' {\n        return 'BeforeSheetNameChange' as const;\n    }\n\n    get SheetTabColorChanged(): 'SheetTabColorChanged' {\n        return 'SheetTabColorChanged' as const;\n    }\n\n    get BeforeSheetTabColorChange(): 'BeforeSheetTabColorChange' {\n        return 'BeforeSheetTabColorChange' as const;\n    }\n\n    get SheetHideChanged(): 'SheetHideChanged' {\n        return 'SheetHideChanged' as const;\n    }\n\n    get BeforeSheetHideChange(): 'BeforeSheetHideChange' {\n        return 'BeforeSheetHideChange' as const;\n    }\n\n    get SheetValueChanged(): 'SheetValueChanged' {\n        return 'SheetValueChanged' as const;\n    }\n}\n\nFEventName.extend(FSheetEventName);\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FEventName extends IFSheetEventMixin { }\n    interface IEventParamConfig extends ISheetEventParamConfig { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Inject, Injector } from '@univerjs/core';\nimport { FBase } from '@univerjs/core/facade';\n\n/**\n * @hideconstructor\n */\nexport class FSheetHooks extends FBase {\n    constructor(\n        @Inject(Injector) protected readonly _injector: Injector\n    ) {\n        super();\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor } from '@univerjs/core';\nimport type { IMenuButtonItem, IMenuItem, MenuSchemaType } from '@univerjs/ui';\nimport { CommandType, ICommandService, Inject, Injector, Tools } from '@univerjs/core';\nimport { FBase } from '@univerjs/core/facade';\nimport { IMenuManagerService, MenuItemType, MenuManagerPosition, RibbonPosition, RibbonStartGroup } from '@univerjs/ui';\n\n/**\n * @ignore\n */\nexport interface IFacadeMenuItem {\n    /**\n     * The unique identifier of the menu item.\n     */\n    id: string;\n    /**\n     * Icon of the menu item.\n     */\n    icon?: string;\n    /**\n     * Title of the menu item.\n     */\n    title: string;\n    /**\n     * The tooltip to show when the mouse hovers over the menu item.\n     */\n    tooltip?: string;\n    /**\n     * The command to execute when the menu item is clicked. It can also be a callback function to\n     * execute any custom logic.\n     */\n    action: string | (() => void);\n    /**\n     * The order of the menu item in the submenu.\n     */\n    order?: number;\n}\n\n/**\n * @ignore\n */\nexport interface IFacadeSubmenuItem {\n    /**\n     * The unique identifier of the menu item.\n     */\n    id: string;\n    /**\n     * Icon of the menu item.\n     */\n    icon?: string;\n    /**\n     * Title of the menu item.\n     */\n    title: string;\n    /**\n     * The tooltip to show when the mouse hovers over the menu item.\n     */\n    tooltip?: string;\n    /**\n     * The order of the menu item in the submenu.\n     */\n    order?: number;\n}\n\n/**\n * @ignore\n */\ntype FAllMenu = FMenu | FSubmenu;\n\n/**\n * @ignore\n */\nabstract class FMenuBase extends FBase {\n    protected abstract readonly _menuManagerService: IMenuManagerService;\n    abstract __getSchema(): { [key: string]: MenuSchemaType };\n\n    /**\n     * Append the menu to any menu position on Univer UI.\n     * @param {string | string[]} path - Some predefined path to append the menu. The paths can be an array,\n     * or an array joined by `|` separator. Since lots of submenus reuse the same name,\n     * you may need to specify their parent menus as well.\n     *\n     * @example\n     * ```typescript\n     * // This menu item will appear on every `contextMenu.others` section.\n     * univerAPI.createMenu({\n     *   id: 'custom-menu-id-1',\n     *   title: 'Custom Menu 1',\n     *   action: () => {\n     *     console.log('Custom Menu 1 clicked');\n     *   },\n     * }).appendTo('contextMenu.others');\n     *\n     * // This menu item will only appear on the `contextMenu.others` section on the main area.\n     * univerAPI.createMenu({\n     *   id: 'custom-menu-id-2',\n     *   title: 'Custom Menu 2',\n     *   action: () => {\n     *     console.log('Custom Menu 2 clicked');\n     *   },\n     * }).appendTo(['contextMenu.mainArea', 'contextMenu.others']);\n     * ```\n     */\n    appendTo(path: string | string[]): void {\n        const paths = typeof path === 'string' ? path.split('|') : path;\n        const len = paths.length;\n\n        // eslint-disable-next-line ts/no-explicit-any\n        const menuConfig: Record<string, any> = {};\n        let obj = menuConfig;\n\n        const schema = this.__getSchema();\n        paths.forEach((p, index) => {\n            if (index === len - 1) {\n                obj[p] = schema;\n            } else {\n                obj[p] = {};\n            }\n            obj = obj[p];\n        });\n\n        this._menuManagerService.mergeMenu(menuConfig);\n    }\n}\n\n/**\n * This is the builder for adding a menu to Univer. You shall never construct this\n * class by yourself. Instead, call `createMenu` of {@link FUniver} to create a instance.\n *\n * Please notice that until the `appendTo` method is called, the menu item is not added to the UI.\n *\n * Please note that this menu cannot have submenus. If you want to\n * have submenus, please use {@link FSubmenu}.\n *\n * @hideconstructor\n */\nexport class FMenu extends FMenuBase {\n    static RibbonStartGroup = RibbonStartGroup;\n    static RibbonPosition = RibbonPosition;\n    static MenuManagerPosition = MenuManagerPosition;\n\n    private _commandToRegister = new Map<string, (accessor: IAccessor) => void>();\n    private _buildingSchema: {\n        order?: number;\n        menuItemFactory?: (accessor: IAccessor) => IMenuItem;\n    };\n\n    constructor(\n        private readonly _item: IFacadeMenuItem,\n        @Inject(Injector) protected readonly _injector: Injector,\n        @ICommandService protected readonly _commandService: ICommandService,\n        @IMenuManagerService protected readonly _menuManagerService: IMenuManagerService\n    ) {\n        super();\n\n        const commandId = typeof _item.action === 'string' ? _item.action : Tools.generateRandomId(12);\n        if (commandId !== _item.action) {\n            this._commandToRegister.set(commandId, _item.action as unknown as () => void);\n        }\n\n        this._buildingSchema = {\n            // eslint-disable-next-line ts/explicit-function-return-type\n            menuItemFactory: () => ({\n                id: _item.id,\n                type: MenuItemType.BUTTON, // we only support button for now\n                icon: _item.icon,\n                title: _item.title,\n                tooltip: _item.tooltip,\n                commandId,\n            } as IMenuButtonItem),\n        };\n\n        if (typeof _item.order !== 'undefined') {\n            this._buildingSchema.order = _item.order;\n        }\n    }\n\n    /**\n     * @ignore\n     */\n    __getSchema(): { [key: string]: MenuSchemaType } {\n        this._commandToRegister.forEach((command, id) => {\n            if (!this._commandService.hasCommand(id)) {\n                this._commandService.registerCommand({\n                    id,\n                    type: CommandType.COMMAND,\n                    handler: command,\n                });\n            }\n        });\n\n        return { [this._item.id]: this._buildingSchema };\n    }\n}\n\n/**\n * This is the builder for add a menu that can contains submenus to Univer. You shall\n * never construct this class by yourself. Instead, call `createSubmenu` of {@link FUniver} to\n * create a instance.\n *\n * Please notice that until the `appendTo` method is called, the menu item is not added to the UI.\n *\n * @hideconstructor\n */\nexport class FSubmenu extends FMenuBase {\n    private _menuByGroups: FAllMenu[][] = [];\n    private _submenus: FAllMenu[] = [];\n\n    private _buildingSchema: {\n        order?: number;\n        menuItemFactory?: (accessor: IAccessor) => IMenuItem;\n    };\n\n    constructor(\n        private readonly _item: IFacadeSubmenuItem,\n        @Inject(Injector) protected readonly _injector: Injector,\n        @IMenuManagerService protected readonly _menuManagerService: IMenuManagerService\n    ) {\n        super();\n\n        this._buildingSchema = {\n            // eslint-disable-next-line ts/explicit-function-return-type\n            menuItemFactory: () => ({\n                id: _item.id,\n                type: MenuItemType.SUBITEMS,\n                icon: _item.icon,\n                title: _item.title,\n                tooltip: _item.tooltip,\n            }),\n        };\n\n        if (typeof _item.order !== 'undefined') {\n            this._buildingSchema.order = _item.order;\n        }\n    }\n\n    /**\n     * Add a menu to the submenu. It can be a {@link FMenu} or a {@link FSubmenu}.\n     * @param {FMenu | FSubmenu} submenu - Menu to add to the submenu.\n     * @returns {FSubmenu} The FSubmenu itself for chaining calls.\n     * @example\n     * ```typescript\n     * // Create two leaf menus.\n     * const menu1 = univerAPI.createMenu({\n     *   id: 'submenu-nested-1',\n     *   title: 'Item 1',\n     *   action: () => {\n     *     console.log('Item 1 clicked');\n     *   }\n     * });\n     * const menu2 = univerAPI.createMenu({\n     *   id: 'submenu-nested-2',\n     *   title: 'Item 2',\n     *   action: () => {\n     *     console.log('Item 2 clicked');\n     *   }\n     * });\n     *\n     * // Add the leaf menus to a submenu.\n     * const submenu = univerAPI.createSubmenu({ id: 'submenu-nested', title: 'Nested Submenu' })\n     *   .addSubmenu(menu1)\n     *   .addSeparator()\n     *   .addSubmenu(menu2);\n     *\n     * // Create a root submenu append to the `contextMenu.others` section.\n     * univerAPI.createSubmenu({ id: 'custom-submenu', title: 'Custom Submenu' })\n     *   .addSubmenu(submenu)\n     *   .appendTo('contextMenu.others');\n     * ```\n     */\n    addSubmenu(submenu: FMenu | FSubmenu): this {\n        this._submenus.push(submenu);\n        return this;\n    }\n\n    /**\n     * Add a separator to the submenu.\n     * @returns {FSubmenu} The FSubmenu itself for chaining calls.\n     * @example\n     * ```typescript\n     * // Create two leaf menus.\n     * const menu1 = univerAPI.createMenu({\n     *   id: 'submenu-nested-1',\n     *   title: 'Item 1',\n     *   action: () => {\n     *     console.log('Item 1 clicked');\n     *   }\n     * });\n     * const menu2 = univerAPI.createMenu({\n     *   id: 'submenu-nested-2',\n     *   title: 'Item 2',\n     *   action: () => {\n     *     console.log('Item 2 clicked');\n     *   }\n     * });\n     *\n     * // Add the leaf menus to a submenu and add a separator between them.\n     * // Append the submenu to the `contextMenu.others` section.\n     * univerAPI.createSubmenu({ id: 'submenu-nested', title: 'Nested Submenu' })\n     *   .addSubmenu(menu1)\n     *   .addSeparator()\n     *   .addSubmenu(menu2)\n     *   .appendTo('contextMenu.others');\n     * ```\n     */\n    addSeparator(): this {\n        this._menuByGroups.push(this._submenus);\n        this._submenus = [];\n        return this;\n    }\n\n    /**\n     * @ignore\n     */\n    __getSchema(): { [key: string]: MenuSchemaType } {\n        const schema: { [key: string]: MenuSchemaType } = {};\n        this.addSeparator();\n        this._menuByGroups.forEach((group, index) => {\n            const groupSchema: MenuSchemaType = {};\n            group.forEach((menu) => {\n                Object.assign(groupSchema, menu.__getSchema());\n            });\n\n            schema[`${this._item.id}-group-${index}`] = groupSchema;\n        });\n\n        return { [this._item.id]: Object.assign(this._buildingSchema, schema) };\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, Workbook } from '@univerjs/core';\nimport type { IShortcutItem } from '@univerjs/ui';\nimport { Inject, Injector, IUniverInstanceService, UniverInstanceType } from '@univerjs/core';\nimport { FBase } from '@univerjs/core/facade';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { IShortcutService } from '@univerjs/ui';\n\n/**\n * The Facade API object to handle shortcuts in Univer\n * @hideconstructor\n */\nexport class FShortcut extends FBase {\n    private _forceDisableDisposable: IDisposable | null = null;\n\n    constructor(\n        @Inject(Injector) protected readonly _injector: Injector,\n        @Inject(IRenderManagerService) private _renderManagerService: IRenderManagerService,\n        @IUniverInstanceService protected readonly _univerInstanceService: IUniverInstanceService,\n        @IShortcutService protected readonly _shortcutService: IShortcutService\n    ) {\n        super();\n    }\n\n    /**\n     * Enable shortcuts of Univer.\n     * @returns {FShortcut} The Facade API instance itself for chaining.\n     *\n     * @example\n     * ```typescript\n     * fShortcut.enableShortcut(); // Use the FShortcut instance used by disableShortcut before, do not create a new instance\n     * ```\n     */\n    enableShortcut(): this {\n        this._forceDisableDisposable?.dispose();\n        this._forceDisableDisposable = null;\n        return this;\n    }\n\n    /**\n     * Disable shortcuts of Univer.\n     * @returns {FShortcut} The Facade API instance itself for chaining.\n     *\n     * @example\n     * ```typescript\n     * const fShortcut = univerAPI.getShortcut();\n     * fShortcut.disableShortcut();\n     * ```\n     */\n    disableShortcut(): this {\n        if (!this._forceDisableDisposable) {\n            this._forceDisableDisposable = this._shortcutService.forceDisable();\n        }\n\n        return this;\n    }\n\n    /**\n     * Trigger shortcut of Univer by a KeyboardEvent and return the matched shortcut item.\n     * @param {KeyboardEvent} e - The KeyboardEvent to trigger.\n     * @returns {IShortcutItem<object> | undefined} The matched shortcut item.\n     *\n     * @example\n     * ```typescript\n     * // Assum the current sheet is empty sheet.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1');\n     *\n     * // Set A1 cell active and set value to 'Hello Univer'.\n     * fRange.activate();\n     * fRange.setValue('Hello Univer');\n     * console.log(fRange.getCellStyle().bold); // false\n     *\n     * // Set A1 cell bold by shortcut.\n     * const fShortcut = univerAPI.getShortcut();\n     * const pseudoEvent = new KeyboardEvent('keydown', {\n     *   key: 'b',\n     *   ctrlKey: true,\n     *   keyCode: univerAPI.Enum.KeyCode.B\n     * });\n     * const ifShortcutItem = fShortcut.triggerShortcut(pseudoEvent);\n     * if (ifShortcutItem) {\n     *   const commandId = ifShortcutItem.id;\n     *   console.log(fRange.getCellStyle().bold); // true\n     * }\n     * ```\n     */\n    triggerShortcut(e: KeyboardEvent): IShortcutItem<object> | undefined {\n        const workbook = this._univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET);\n        if (!workbook) {\n            return;\n        }\n\n        const renderUnit = this._renderManagerService.getRenderById(workbook.getUnitId());\n        if (!renderUnit) {\n            return;\n        }\n\n        const canvas = renderUnit.engine.getCanvasElement();\n        canvas.dispatchEvent(e);\n\n        return this._shortcutService.dispatch(e);\n    }\n\n    /**\n     * Dispatch a KeyboardEvent to the shortcut service and return the matched shortcut item.\n     * @param {KeyboardEvent} e - The KeyboardEvent to dispatch.\n     * @returns {IShortcutItem<object> | undefined} The matched shortcut item.\n     *\n     * @example\n     * ```typescript\n     * const fShortcut = univerAPI.getShortcut();\n     * const pseudoEvent = new KeyboardEvent('keydown', { key: 's', ctrlKey: true });\n     * const ifShortcutItem = fShortcut.dispatchShortcutEvent(pseudoEvent);\n     * if (ifShortcutItem) {\n     *   const commandId = ifShortcutItem.id;\n     *   // Do something with the commandId.\n     * }\n     * ```\n     */\n    dispatchShortcutEvent(e: KeyboardEvent): IShortcutItem<object> | undefined {\n        return this._shortcutService.dispatch(e);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable } from '@univerjs/core';\nimport type { IMessageProps } from '@univerjs/design';\nimport type { BuiltInUIPart, ComponentType, IComponentOptions, IDialogPartMethodOptions, ISidebarMethodOptions } from '@univerjs/ui';\nimport type { IFacadeMenuItem, IFacadeSubmenuItem } from './f-menu-builder';\nimport { FUniver } from '@univerjs/core/facade';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { ComponentManager, connectInjector, CopyCommand, IDialogService, IMessageService, ISidebarService, IUIPartsService, PasteCommand } from '@univerjs/ui';\nimport { FMenu, FSubmenu } from './f-menu-builder';\nimport { FShortcut } from './f-shortcut';\n\n/**\n * @ignore\n */\nexport interface IFUniverUIMixin {\n    /**\n     * Return the URL of the current page.\n     * @returns {URL} the [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL) object\n     * @example\n     * ```ts\n     * console.log(univerAPI.getURL());\n     * ```\n     */\n    getURL(): URL;\n\n    /**\n     * Get the Shortcut handler to interact with Univer's shortcut functionalities.\n     * @returns the {@link FShortcut} object\n     * @example\n     * ```ts\n     * const fShortcut = univerAPI.getShortcut();\n     *\n     * // Disable shortcuts of Univer\n     * fShortcut.disableShortcut();\n     *\n     * // Enable shortcuts of Univer\n     * fShortcut.enableShortcut();\n     *\n     * // Trigger a shortcut\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1');\n     * fRange.activate();\n     * fRange.setValue('Hello Univer');\n     * console.log(fRange.getCellStyle().bold); // false\n     * const pseudoEvent = new KeyboardEvent('keydown', {\n     *   key: 'b',\n     *   ctrlKey: true,\n     *   keyCode: univerAPI.Enum.KeyCode.B\n     * });\n     * const ifShortcutItem = fShortcut.triggerShortcut(pseudoEvent);\n     * if (ifShortcutItem) {\n     *   const commandId = ifShortcutItem.id;\n     *   console.log(fRange.getCellStyle().bold); // true\n     * }\n     * ```\n     */\n    getShortcut(): FShortcut;\n\n    /**\n     * Copy the current selected content of the currently focused unit into your system clipboard.\n     * @returns {Promise<boolean>} whether the copy operation is successful\n     * @example\n     * ```ts\n     * // Prevent failure due to loss of focus when executing copy and paste code in the console,\n     * // this example listens for the cell click event and executes the copy and paste code.\n     * univerAPI.addEvent(univerAPI.Event.CellClicked, async (params) => {\n     *   const fWorkbook = univerAPI.getActiveWorkbook();\n     *   const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     *   // Copy the range A1:B2 to the clipboard\n     *   const fRange = fWorksheet.getRange('A1:B2');\n     *   fRange.activate().setValues([\n     *     [1, 2],\n     *     [3, 4]\n     *   ]);\n     *   await univerAPI.copy();\n     *\n     *   // Paste the copied content to the range C1:D2\n     *   const fRange2 = fWorksheet.getRange('C1');\n     *   fRange2.activate();\n     *   await univerAPI.paste();\n     *\n     *   // Check the pasted content\n     *   console.log(fWorksheet.getRange('C1:D2').getValues()); // [[1, 2], [3, 4]]\n     * });\n     * ```\n     */\n    copy(): Promise<boolean>;\n\n    /**\n     * Paste into the current selected position of the currently focused unit from your system clipboard.\n     * @returns {Promise<boolean>} whether the paste operation is successful\n     * @example\n     * ```ts\n     * // Prevent failure due to loss of focus when executing copy and paste code in the console,\n     * // this example listens for the cell click event and executes the copy and paste code.\n     * univerAPI.addEvent(univerAPI.Event.CellClicked, async (params) => {\n     *   const fWorkbook = univerAPI.getActiveWorkbook();\n     *   const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     *   // Copy the range A1:B2 to the clipboard\n     *   const fRange = fWorksheet.getRange('A1:B2');\n     *   fRange.activate().setValues([\n     *     [1, 2],\n     *     [3, 4]\n     *   ]);\n     *   await univerAPI.copy();\n     *\n     *   // Paste the copied content to the range C1:D2\n     *   const fRange2 = fWorksheet.getRange('C1');\n     *   fRange2.activate();\n     *   await univerAPI.paste();\n     *\n     *   // Check the pasted content\n     *   console.log(fWorksheet.getRange('C1:D2').getValues()); // [[1, 2], [3, 4]]\n     * });\n     * ```\n     */\n    paste(): Promise<boolean>;\n\n    /**\n     * Create a menu build object. You can insert new menus into the UI.\n     * @param {IFacadeMenuItem} menuItem the menu item\n     * @returns the {@link FMenu} object\n     * @example\n     * ```ts\n     * // Univer Icon can be viewed at https://univer.ai/en-US/icons\n     * import { SmileSingle } from '@univerjs/icons'\n     *\n     * // Create a custom menu with an univer icon\n     * univerAPI.registerComponent('custom-menu-icon', SmileSingle);\n     * univerAPI.createMenu({\n     *   id: 'custom-menu',\n     *   icon: 'custom-menu-icon',\n     *   title: 'Custom Menu',\n     *   tooltip: 'Custom Menu Tooltip',\n     *   action: () => {\n     *     console.log('Custom Menu Clicked');\n     *   },\n     * }).appendTo('ribbon.start.others');\n     *\n     * // Or\n     * // Create a custom menu with an image icon\n     * univerAPI.registerComponent('custom-menu-icon', () => {\n     *   return <img src=\"https://avatars.githubusercontent.com/u/61444807?s=48&v=4\" alt=\"\" style={{ width: '16px', height: '16px' }} />;\n     * });\n     * univerAPI.createMenu({\n     *   id: 'custom-menu',\n     *   icon: 'custom-menu-icon',\n     *   title: 'Custom Menu',\n     *   tooltip: 'Custom Menu Tooltip',\n     *   action: () => {\n     *     console.log('Custom Menu Clicked');\n     *   },\n     * }).appendTo('ribbon.start.others');\n     *\n     * // Or\n     * // Create a custom menu without an icon\n     * univerAPI.createMenu({\n     *   id: 'custom-menu',\n     *   title: 'Custom Menu',\n     *   tooltip: 'Custom Menu Tooltip',\n     *   action: () => {\n     *     console.log('Custom Menu Clicked');\n     *   },\n     * }).appendTo('ribbon.start.others');\n     * ```\n     */\n    createMenu(menuItem: IFacadeMenuItem): FMenu;\n\n    /**\n     * Create a menu that contains submenus, and later you can append this menu and its submenus to the UI.\n     * @param {IFacadeSubmenuItem} submenuItem the submenu item\n     * @returns the {@link FSubmenu} object\n     * @example\n     * ```ts\n     * // Create two leaf menus.\n     * const menu1 = univerAPI.createMenu({\n     *   id: 'submenu-nested-1',\n     *   title: 'Item 1',\n     *   action: () => {\n     *     console.log('Item 1 clicked');\n     *   }\n     * });\n     * const menu2 = univerAPI.createMenu({\n     *   id: 'submenu-nested-2',\n     *   title: 'Item 2',\n     *   action: () => {\n     *     console.log('Item 2 clicked');\n     *   }\n     * });\n     *\n     * // Add the leaf menus to a submenu.\n     * const submenu = univerAPI.createSubmenu({ id: 'submenu-nested', title: 'Nested Submenu' })\n     *   .addSubmenu(menu1)\n     *   .addSeparator()\n     *   .addSubmenu(menu2);\n     *\n     * // Create a root submenu append to the `contextMenu.others` section.\n     * univerAPI.createSubmenu({ id: 'custom-submenu', title: 'Custom Submenu' })\n     *   .addSubmenu(submenu)\n     *   .appendTo('contextMenu.others');\n     * ```\n     */\n    createSubmenu(submenuItem: IFacadeSubmenuItem): FSubmenu;\n\n    /**\n     * Open a sidebar.\n     * @deprecated Please use `univerAPI.openSidebar` instead.\n     * @param {ISidebarMethodOptions} params the sidebar options\n     * @returns {IDisposable} the disposable object\n     */\n    openSiderbar(params: ISidebarMethodOptions): IDisposable;\n\n    /**\n     * Open a sidebar.\n     * @param {ISidebarMethodOptions} params the sidebar options\n     * @returns {IDisposable} the disposable object\n     * @example\n     * ```ts\n     * univerAPI.openSidebar({\n     *   id: 'mock-sidebar-id',\n     *   width: 300,\n     *   header: {\n     *     label: 'Sidebar Header',\n     *   },\n     *   children: {\n     *     label: 'Sidebar Content',\n     *   },\n     *   footer: {\n     *     label: 'Sidebar Footer',\n     *   },\n     *   onClose: () => {\n     *     console.log('Sidebar closed')\n     *   },\n     * });\n     * ```\n     */\n    openSidebar(params: ISidebarMethodOptions): IDisposable;\n\n    /**\n     * Open a dialog.\n     * @param {IDialogPartMethodOptions} dialog the dialog options\n     * @returns {IDisposable} the disposable object\n     * @example\n     * ```ts\n     * import { Button } from '@univerjs/design';\n     *\n     * univerAPI.openDialog({\n     *   id: 'mock-dialog-id',\n     *   width: 500,\n     *   title: {\n     *     label: 'Dialog Title',\n     *   },\n     *   children: {\n     *     label: 'Dialog Content',\n     *   },\n     *   footer: {\n     *     title: (\n     *       <>\n     *         <Button onClick={() => { console.log('Cancel clicked') }}>Cancel</Button>\n     *         <Button type=\"primary\" onClick={() => { console.log('Confirm clicked') }} style={{marginLeft: '10px'}}>Confirm</Button>\n     *       </>\n     *     )\n     *   },\n     *   draggable: true,\n     *   mask: true,\n     *   maskClosable: true,\n     * });\n     * ```\n     */\n    openDialog(dialog: IDialogPartMethodOptions): IDisposable;\n\n    /**\n     * Get the component manager\n     * @returns {ComponentManager} The component manager\n     * @example\n     * ```ts\n     * const componentManager = univerAPI.getComponentManager();\n     * console.log(componentManager);\n     * ```\n     */\n    getComponentManager(): ComponentManager;\n\n    /**\n     * Show a message.\n     * @returns {FUniver} the {@link FUniver} instance for chaining\n     * @example\n     * ```ts\n     * univerAPI.showMessage({\n     *   content: 'Success',\n     *   type: 'success',\n     *   duration: 3000,\n     * });\n     * ```\n     */\n    showMessage(options: IMessageProps): FUniver;\n\n    /**\n     * Set the visibility of a built-in UI part.\n     * @param {BuiltInUIPart} key the built-in UI part\n     * @param {boolean} visible the visibility\n     * @returns the {@link FUniver} instance for chaining\n     * example\n     * ```ts\n     * // Hide header, footer, and toolbar\n     * univerAPI.setUIVisible(univerAPI.Enum.BuiltInUIPart.HEADER, false)\n     *   .setUIVisible(univerAPI.Enum.BuiltInUIPart.FOOTER, false)\n     *   .setUIVisible(univerAPI.Enum.BuiltInUIPart.TOOLBAR, false);\n     *\n     * // Show in 3 seconds\n     * setTimeout(() => {\n     *   univerAPI.setUIVisible(univerAPI.Enum.BuiltInUIPart.HEADER, true)\n     *     .setUIVisible(univerAPI.Enum.BuiltInUIPart.FOOTER, true)\n     *     .setUIVisible(univerAPI.Enum.BuiltInUIPart.TOOLBAR, true);\n     * }, 3000);\n     * ```\n     */\n    setUIVisible(key: BuiltInUIPart, visible: boolean): FUniver;\n\n    /**\n     * Get the visibility of a built-in UI part.\n     * @param {BuiltInUIPart} key the built-in UI part\n     * @returns {boolean} the visibility\n     * @example\n     * ```ts\n     * // Hide header\n     * univerAPI.setUIVisible(univerAPI.Enum.BuiltInUIPart.HEADER, false);\n     * console.log(univerAPI.isUIVisible(univerAPI.Enum.BuiltInUIPart.HEADER)); // false\n     * ```\n     */\n    isUIVisible(key: BuiltInUIPart): boolean;\n\n    /**\n     * Register an component to a built-in UI part\n     * @param {BuiltInUIPart} key the built-in UI part\n     * @param component the react component\n     * @example\n     * ```ts\n     * univerAPI.registerUIPart(univerAPI.Enum.BuiltInUIPart.CUSTOM_HEADER, () => React.createElement('h1', null, 'Custom Header'));\n     * ```\n     */\n    registerUIPart(key: BuiltInUIPart, component: any): IDisposable;\n\n    /**\n     * Register an component.\n     * @param {string} name - The name of the component.\n     * @param {ComponentType} component - The component.\n     * @param {IComponentOptions} [options] - The options of the component.\n     * @returns {IDisposable} The disposable object.\n     * @example\n     * ```ts\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     *\n     * // Register a range loading component\n     * const RangeLoading = () => {\n     *   const divStyle = {\n     *     width: '100%',\n     *     height: '100%',\n     *     backgroundColor: '#fff',\n     *     border: '1px solid #ccc',\n     *     boxSizing: 'border-box' as const,\n     *     display: 'flex',\n     *     justifyContent: 'center',\n     *     alignItems: 'center',\n     *     textAlign: 'center' as const,\n     *     transformOrigin: 'top left',\n     *   };\n     *\n     *   return (\n     *     <div style={divStyle}>\n     *       Loading...\n     *     </div>\n     *   );\n     * };\n     * univerAPI.registerComponent('RangeLoading', RangeLoading);\n     *\n     * // Add the range loading component covering the range A1:C3\n     * const range = fWorksheet.getRange('A1:C3');\n     * const disposeable = fWorksheet.addFloatDomToRange(range, { componentKey: 'RangeLoading' }, {}, 'myRangeLoading');\n     *\n     * setTimeout(() => {\n     *   disposeable?.dispose();\n     * }, 2000);\n     * ```\n     */\n    registerComponent(name: string, component: ComponentType, options?: IComponentOptions): IDisposable;\n\n    /**\n     * Set a unit as the current unit and render a unit in the workbench's main area. If you have multiple units in Univer,\n     * you should call this method to render the unit.\n     * @param {string} unitId Unit to be rendered.\n     *\n     * @example\n     * Let's assume you have created two units, `unit1` and `unit2`. Univer is rendering `unit1` and you want to\n     * render `unit2`.\n     *\n     * ```ts\n     * univerAPI.setCurrent('unit2');\n     * ```\n     *\n     * This will render `unit2` in the workbench's main area.\n     */\n    setCurrent(unitId: string): void;\n}\n\n/**\n * @ignore\n */\nexport class FUniverUIMixin extends FUniver implements IFUniverUIMixin {\n    override getURL(): URL {\n        return new URL(window.location.href);\n    }\n\n    override getShortcut(): FShortcut {\n        return this._injector.createInstance(FShortcut);\n    }\n\n    override copy(): Promise<boolean> {\n        return this._commandService.executeCommand(CopyCommand.id);\n    }\n\n    override paste(): Promise<boolean> {\n        return this._commandService.executeCommand(PasteCommand.id);\n    }\n\n    override createMenu(menuItem: IFacadeMenuItem): FMenu {\n        return this._injector.createInstance(FMenu, menuItem);\n    }\n\n    override createSubmenu(submenuItem: IFacadeSubmenuItem): FSubmenu {\n        return this._injector.createInstance(FSubmenu, submenuItem);\n    }\n\n    override openSiderbar(params: ISidebarMethodOptions): IDisposable {\n        const sideBarService = this._injector.get(ISidebarService);\n        return sideBarService.open(params);\n    }\n\n    override openSidebar(params: ISidebarMethodOptions): IDisposable {\n        return this.openSiderbar(params);\n    }\n\n    override openDialog(dialog: IDialogPartMethodOptions): IDisposable {\n        const dialogService = this._injector.get(IDialogService);\n        const disposable = dialogService.open({\n            ...dialog,\n            onClose: () => {\n                disposable.dispose();\n            },\n        });\n        return disposable;\n    }\n\n    override getComponentManager(): ComponentManager {\n        return this._injector.get(ComponentManager);\n    }\n\n    override showMessage(options: IMessageProps): FUniver {\n        const messageService = this._injector.get(IMessageService);\n        messageService.show(options);\n        return this;\n    }\n\n    override setUIVisible(ui: BuiltInUIPart, visible: boolean): FUniver {\n        const uiPartService = this._injector.get(IUIPartsService);\n        uiPartService.setUIVisible(ui, visible);\n        return this;\n    }\n\n    override isUIVisible(ui: BuiltInUIPart): boolean {\n        const uiPartService = this._injector.get(IUIPartsService);\n        return uiPartService.isUIVisible(ui);\n    }\n\n    override registerUIPart(key: BuiltInUIPart, component: any): IDisposable {\n        const uiPartService = this._injector.get(IUIPartsService);\n        return uiPartService.registerComponent(key, () => connectInjector(component, this._injector));\n    }\n\n    override registerComponent(name: string, component: any, options?: IComponentOptions): IDisposable {\n        const componentManager = this._injector.get(ComponentManager);\n        return this.disposeWithMe(componentManager.register(name, component, options));\n    }\n\n    override setCurrent(unitId: string): void {\n        const rendererManagerService = this._injector.get(IRenderManagerService);\n        const renderUnit = rendererManagerService.getRenderById(unitId);\n        if (!renderUnit) {\n            throw new Error('Unit not found');\n        }\n\n        this._univerInstanceService.setCurrentUnitForType(unitId);\n    }\n}\n\nFUniver.extend(FUniverUIMixin);\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FUniver extends IFUniverUIMixin { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable } from '@univerjs/core';\nimport { ICommandService } from '@univerjs/core';\nimport { FHooks } from '@univerjs/core/facade';\nimport { CopyCommand, PasteCommand, SheetPasteShortKeyCommandName } from '@univerjs/ui';\n\n/**\n * @ignore\n */\nexport interface IFHooksSheetsUIMixin {\n    /**\n     * The onBeforeCopy event is fired before a copy operation is performed.\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.BeforeClipboardChange, (params) => {})` instead\n     * @param callback Callback function that will be called when the event is fired\n     * @returns A disposable object that can be used to unsubscribe from the event\n     */\n    onBeforeCopy(callback: () => void): IDisposable;\n\n    /**\n     * The onCopy event is fired after a copy operation is performed.\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.ClipboardChanged, (params) => {})` instead\n     * @param callback Callback function that will be called when the event is fired\n     * @returns A disposable object that can be used to unsubscribe from the event\n     */\n    onCopy(callback: () => void): IDisposable;\n\n    /**\n     * The onBeforePaste event is fired before a paste operation is performed.\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.BeforeClipboardPaste, (params) => {})` instead\n     * @param callback Callback function that will be called when the event is fired\n     * @returns A disposable object that can be used to unsubscribe from the event\n     */\n    onBeforePaste(callback: () => void): IDisposable;\n\n    /**\n     * The onPaste event is fired after a paste operation is performed.\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.ClipboardPasted, (params) => {})` instead\n     * @param callback Callback function that will be called when the event is fired\n     * @returns A disposable object that can be used to unsubscribe from the event\n     */\n    onPaste(callback: () => void): IDisposable;\n}\n\n/**\n * @ignore\n */\nexport class FHooksSheetsMixin extends FHooks implements IFHooksSheetsUIMixin {\n    override onBeforeCopy(callback: () => void): IDisposable {\n        const commandService = this._injector.get(ICommandService);\n\n        return commandService.beforeCommandExecuted((command) => {\n            if (command.id === CopyCommand.id) {\n                callback();\n            }\n        });\n    }\n\n    override onCopy(callback: () => void): IDisposable {\n        const commandService = this._injector.get(ICommandService);\n\n        return commandService.onCommandExecuted((command) => {\n            if (command.id === CopyCommand.id) {\n                callback();\n            }\n        });\n    }\n\n    override onBeforePaste(callback: () => void): IDisposable {\n        const commandService = this._injector.get(ICommandService);\n\n        return commandService.beforeCommandExecuted((command) => {\n            if (command.id === PasteCommand.id) {\n                callback();\n            }\n        });\n    }\n\n    override onPaste(callback: () => void): IDisposable {\n        const commandService = this._injector.get(ICommandService);\n\n        return commandService.onCommandExecuted((command) => {\n            if (command.id === PasteCommand.id || command.id === SheetPasteShortKeyCommandName) {\n                callback();\n            }\n        });\n    }\n}\n\nFHooks.extend(FHooksSheetsMixin);\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FHooks extends IFHooksSheetsUIMixin {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FEnum } from '@univerjs/core/facade';\nimport { BuiltInUIPart, KeyCode } from '@univerjs/ui';\n\n/**\n * @ignore\n */\ninterface IFUIEnumMixin {\n    /**\n     * Built-in UI parts.\n     */\n    get BuiltInUIPart(): typeof BuiltInUIPart;\n\n    /**\n     * Key codes.\n     */\n    get KeyCode(): typeof KeyCode;\n}\n\n/**\n * @ignore\n */\nexport class FUIEnum extends FEnum implements IFUIEnumMixin {\n    override get BuiltInUIPart(): typeof BuiltInUIPart {\n        return BuiltInUIPart;\n    };\n\n    override get KeyCode(): typeof KeyCode {\n        return KeyCode;\n    }\n}\n\nFEnum.extend(FUIEnum);\n\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FEnum extends IFUIEnumMixin {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DocumentDataModel, IDocumentData } from '@univerjs/core';\nimport {\n    DOC_RANGE_TYPE,\n    ICommandService,\n    Inject,\n    Injector,\n    IResourceManagerService,\n    IUniverInstanceService,\n    RedoCommand,\n    UndoCommand,\n    UniverInstanceType,\n} from '@univerjs/core';\nimport { DocSelectionRenderService, InsertCommand } from '@univerjs/docs-ui';\nimport { IRenderManagerService } from '@univerjs/engine-render';\n\n/**\n * @hideconstructor\n */\nexport class FDocument {\n    readonly id: string;\n\n    constructor(\n        private readonly _documentDataModel: DocumentDataModel,\n        @Inject(Injector) protected readonly _injector: Injector,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @ICommandService private readonly _commandService: ICommandService,\n        @IResourceManagerService private readonly _resourceManagerService: IResourceManagerService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService\n    ) {\n        this.id = this._documentDataModel.getUnitId();\n    }\n\n    getId(): string {\n        return this._documentDataModel.getUnitId();\n    }\n\n    getName(): string {\n        return this.getSnapshot().title || '';\n    }\n\n    getSnapshot(): IDocumentData {\n        const resources = this._resourceManagerService.getResourcesByType(this.id, UniverInstanceType.UNIVER_DOC);\n        const snapshot = this._documentDataModel.getSnapshot() as IDocumentData;\n        snapshot.resources = resources;\n        return snapshot;\n    }\n\n    undo(): Promise<boolean> {\n        this._univerInstanceService.focusUnit(this.id);\n        return this._commandService.executeCommand(UndoCommand.id);\n    }\n\n    redo(): Promise<boolean> {\n        this._univerInstanceService.focusUnit(this.id);\n        return this._commandService.executeCommand(RedoCommand.id);\n    }\n\n    /**\n     * Adds the specified text to the end of this text region.\n     * @param text - The text to be added to the end of this text region.\n     */\n    appendText(text: string): Promise<boolean> {\n        const unitId = this.id;\n\n        const { body } = this.getSnapshot();\n\n        if (!body) {\n            throw new Error('The document body is empty');\n        }\n\n        const lastPosition = body.dataStream.length - 2;\n\n        const activeRange = {\n            startOffset: lastPosition,\n            endOffset: lastPosition,\n            collapsed: true,\n            segmentId: '',\n        };\n\n        const { segmentId } = activeRange;\n\n        return this._commandService.executeCommand(InsertCommand.id, {\n            unitId,\n            body: {\n                dataStream: text,\n            },\n            range: activeRange,\n            segmentId,\n        });\n    }\n\n    /**\n     * Sets the selection to a specified text range in the document.\n     * @param startOffset - The starting offset of the selection in the document.\n     * @param endOffset - The ending offset of the selection in the document.\n     * @example\n     * ```typescript\n     * document.setSelection(10, 20);\n     * ```\n     */\n    setSelection(startOffset: number, endOffset: number): void {\n        // TODO: @jocs...\n        const docSelectionRenderService = this._renderManagerService.getRenderById(this.getId())?.with(DocSelectionRenderService);\n        docSelectionRenderService?.removeAllRanges();\n        docSelectionRenderService?.addDocRanges(\n            [\n                {\n                    startOffset,\n                    endOffset,\n                    rangeType: DOC_RANGE_TYPE.TEXT,\n                },\n            ],\n            true\n        );\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DocumentDataModel, IDocumentData } from '@univerjs/core';\nimport { UniverInstanceType } from '@univerjs/core';\nimport { FUniver } from '@univerjs/core/facade';\nimport { FDocument } from './f-document';\n\n/**\n * @ignore\n */\nexport interface IFUniverDocsUIMixin {\n    /**\n     * Create a new document and get the API handler of that document.\n     *\n     * @param {Partial<IDocumentData>} data The snapshot of the document.\n     * @returns {FDocument} FDocument API instance.\n     */\n    createUniverDoc(data: Partial<IDocumentData>): FDocument;\n    /**\n     * Get the document API handler by the document id.\n     *\n     * @param {string} id The document id.\n     * @returns {FDocument | null} The document API instance.\n     */\n    getUniverDoc(id: string): FDocument | null;\n    /**\n     * Get the currently focused Univer document.\n     *\n     * @returns {FDocument | null} The currently focused Univer document.\n     */\n    getActiveDocument(): FDocument | null;\n}\n\nexport class FUniverDocsMixin extends FUniver implements IFUniverDocsUIMixin {\n    override createUniverDoc(data: Partial<IDocumentData>): FDocument {\n        const document = this._univerInstanceService.createUnit<IDocumentData, DocumentDataModel>(UniverInstanceType.UNIVER_DOC, data);\n        return this._injector.createInstance(FDocument, document);\n    }\n\n    override getActiveDocument(): FDocument | null {\n        const document = this._univerInstanceService.getCurrentUnitForType<DocumentDataModel>(UniverInstanceType.UNIVER_DOC);\n        if (!document) {\n            return null;\n        }\n\n        return this._injector.createInstance(FDocument, document);\n    }\n\n    override getUniverDoc(id: string): FDocument | null {\n        const document = this._univerInstanceService.getUniverDocInstance(id);\n        if (!document) {\n            return null;\n        }\n\n        return this._injector.createInstance(FDocument, document);\n    }\n}\n\nFUniver.extend(FUniverDocsMixin);\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FUniver extends IFUniverDocsUIMixin {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DocumentDataModel, IDisposable, Injector, Nullable } from '@univerjs/core';\nimport type { IRichTextEditingMutationParams } from '@univerjs/docs';\nimport type {\n    IColumnsHeaderCfgParam,\n    IRender,\n    IRowsHeaderCfgParam,\n    RenderComponentType,\n    SheetComponent,\n    SheetExtension,\n    SpreadsheetColumnHeader,\n    SpreadsheetRowHeader,\n} from '@univerjs/engine-render';\nimport type { CommandListenerSkeletonChange } from '@univerjs/sheets';\nimport type { IEditorBridgeServiceVisibleParam, ISetZoomRatioCommandParams, ISheetPasteByShortKeyParams, IViewportScrollState } from '@univerjs/sheets-ui';\nimport type { FRange } from '@univerjs/sheets/facade';\nimport type { IBeforeClipboardChangeParam, IBeforeClipboardPasteParam, IBeforeSheetEditEndEventParams, IBeforeSheetEditStartEventParams, ISheetEditChangingEventParams, ISheetEditEndedEventParams, ISheetEditStartedEventParams, ISheetZoomEvent } from './f-event';\nimport { CanceledError, DisposableCollection, DOCS_NORMAL_EDITOR_UNIT_ID_KEY, ICommandService, ILogService, IUniverInstanceService, LifecycleService, LifecycleStages, RichTextValue, toDisposable, UniverInstanceType } from '@univerjs/core';\nimport { FUniver } from '@univerjs/core/facade';\nimport { RichTextEditingMutation } from '@univerjs/docs';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { COMMAND_LISTENER_SKELETON_CHANGE, getSkeletonChangedEffectedRange, SheetsSelectionsService } from '@univerjs/sheets';\nimport { DragManagerService, HoverManagerService, IEditorBridgeService, ISheetClipboardService, SetCellEditVisibleOperation, SetZoomRatioCommand, SHEET_VIEW_KEY, SheetPasteShortKeyCommand, SheetScrollManagerService, SheetSkeletonManagerService } from '@univerjs/sheets-ui';\nimport { FSheetHooks } from '@univerjs/sheets/facade';\nimport { CopyCommand, CutCommand, HTML_CLIPBOARD_MIME_TYPE, IClipboardInterfaceService, KeyCode, PasteCommand, PLAIN_TEXT_CLIPBOARD_MIME_TYPE, supportClipboardAPI } from '@univerjs/ui';\nimport { combineLatest, filter } from 'rxjs';\n\n/**\n * @ignore\n */\nexport interface IFUniverSheetsUIMixin {\n    /**\n     * @deprecated use same API in FWorkSheet.\n     * Customize the column header of the spreadsheet.\n     * @param {IColumnsHeaderCfgParam} cfg The configuration of the column header.\n     * @example\n     * ```typescript\n     * univerAPI.customizeColumnHeader({ headerStyle: { fontColor: '#fff', size: 40, backgroundColor: '#4e69ee', fontSize: 9 }, columnsCfg: ['MokaII', undefined, null, { text: 'Size', textAlign: 'left' }] });\n     * ```\n     */\n    customizeColumnHeader(cfg: IColumnsHeaderCfgParam): void;\n\n    /**\n     * @deprecated use same API in FWorkSheet.\n     * Customize the row header of the spreadsheet.\n     * @param {IRowsHeaderCfgParam} cfg The configuration of the row header.\n     * @example\n     * ```typescript\n     * univerAPI.customizeRowHeader({ headerStyle: { backgroundColor: 'pink', fontSize: 9 }, rowsCfg: ['MokaII', undefined, null, { text: 'Size', textAlign: 'left' }] });\n     * ```\n     */\n    customizeRowHeader(cfg: IRowsHeaderCfgParam): void;\n\n    /**\n     * Register sheet row header render extensions.\n     * @param {string} unitId The unit id of the spreadsheet.\n     * @param {SheetExtension[]} extensions The extensions to register.\n     * @returns {IDisposable} The disposable instance.\n     */\n    registerSheetRowHeaderExtension(unitId: string, ...extensions: SheetExtension[]): IDisposable;\n    /**\n     * Register sheet column header render extensions.\n     * @param {string} unitId The unit id of the spreadsheet.\n     * @param {SheetExtension[]} extensions The extensions to register.\n     * @returns {IDisposable} The disposable instance.\n     */\n    registerSheetColumnHeaderExtension(unitId: string, ...extensions: SheetExtension[]): IDisposable;\n    /**\n     * Register sheet main render extensions.\n     * @param {string} unitId The unit id of the spreadsheet.\n     * @param {SheetExtension[]} extensions The extensions to register.\n     * @returns {IDisposable} The disposable instance.\n     */\n    registerSheetMainExtension(unitId: string, ...extensions: SheetExtension[]): IDisposable;\n\n    /**\n     * @deprecated use `univerAPI.addEvent` as instead.\n     */\n    getSheetHooks(): FSheetHooks;\n}\n\nexport class FUniverSheetsUIMixin extends FUniver implements IFUniverSheetsUIMixin {\n    // eslint-disable-next-line max-lines-per-function\n    private _initSheetUIEvent(injector: Injector): void {\n        const commandService = injector.get(ICommandService);\n\n        // Edit events\n        this.registerEventHandler(\n            this.Event.BeforeSheetEditStart,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== SetCellEditVisibleOperation.id) return;\n\n                const target = this.getActiveSheet();\n                if (!target) return;\n\n                const { workbook, worksheet } = target;\n                const editorBridgeService = injector.get(IEditorBridgeService);\n                const params = commandInfo.params as IEditorBridgeServiceVisibleParam;\n                const { visible, keycode, eventType } = params;\n                const loc = editorBridgeService.getEditLocation()!;\n\n                if (visible) {\n                    const eventParams: IBeforeSheetEditStartEventParams = {\n                        row: loc.row,\n                        column: loc.column,\n                        eventType,\n                        keycode,\n                        workbook,\n                        worksheet,\n                        isZenEditor: false,\n                    };\n                    this.fireEvent(this.Event.BeforeSheetEditStart, eventParams);\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeSheetEditEnd,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== SetCellEditVisibleOperation.id) return;\n\n                const target = this.getActiveSheet();\n                if (!target) return;\n\n                const { workbook, worksheet } = target;\n                const editorBridgeService = injector.get(IEditorBridgeService);\n                const univerInstanceService = injector.get(IUniverInstanceService);\n                const params = commandInfo.params as IEditorBridgeServiceVisibleParam;\n                const { visible, keycode, eventType } = params;\n                const loc = editorBridgeService.getEditLocation()!;\n\n                if (!visible) {\n                    const eventParams: IBeforeSheetEditEndEventParams = {\n                        row: loc.row,\n                        column: loc.column,\n                        eventType,\n                        keycode,\n                        workbook,\n                        worksheet,\n                        isZenEditor: false,\n                        value: RichTextValue.create(univerInstanceService.getUnit<DocumentDataModel>(DOCS_NORMAL_EDITOR_UNIT_ID_KEY)!.getSnapshot()),\n                        isConfirm: keycode !== KeyCode.ESC,\n                    };\n                    this.fireEvent(this.Event.BeforeSheetEditEnd, eventParams);\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.SheetEditStarted,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== SetCellEditVisibleOperation.id) return;\n\n                const target = this.getCommandSheetTarget(commandInfo);\n                if (!target) return;\n\n                const { workbook, worksheet } = target;\n                const editorBridgeService = injector.get(IEditorBridgeService);\n                const params = commandInfo.params as IEditorBridgeServiceVisibleParam;\n                const { visible, keycode, eventType } = params;\n                const loc = editorBridgeService.getEditLocation()!;\n\n                if (visible) {\n                    const eventParams: ISheetEditStartedEventParams = {\n                        row: loc.row,\n                        column: loc.column,\n                        eventType,\n                        keycode,\n                        workbook,\n                        worksheet,\n                        isZenEditor: false,\n                    };\n                    this.fireEvent(this.Event.SheetEditStarted, eventParams);\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.SheetEditEnded,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== SetCellEditVisibleOperation.id) return;\n\n                const target = this.getCommandSheetTarget(commandInfo);\n                if (!target) return;\n\n                const { workbook, worksheet } = target;\n                const editorBridgeService = injector.get(IEditorBridgeService);\n                const params = commandInfo.params as IEditorBridgeServiceVisibleParam;\n                const { visible, keycode, eventType } = params;\n                const loc = editorBridgeService.getEditLocation()!;\n\n                if (!visible) {\n                    const eventParams: ISheetEditEndedEventParams = {\n                        row: loc.row,\n                        column: loc.column,\n                        eventType,\n                        keycode,\n                        workbook,\n                        worksheet,\n                        isZenEditor: false,\n                        isConfirm: keycode !== KeyCode.ESC,\n                    };\n                    this.fireEvent(this.Event.SheetEditEnded, eventParams);\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.SheetEditChanging,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== RichTextEditingMutation.id) return;\n\n                const target = this.getActiveSheet();\n                if (!target) return;\n\n                const { workbook, worksheet } = target;\n                const editorBridgeService = injector.get(IEditorBridgeService);\n                const univerInstanceService = injector.get(IUniverInstanceService);\n                const params = commandInfo.params as IRichTextEditingMutationParams;\n                if (!editorBridgeService.isVisible().visible) return;\n\n                const { unitId } = params;\n                if (unitId === DOCS_NORMAL_EDITOR_UNIT_ID_KEY) {\n                    const { row, column } = editorBridgeService.getEditLocation()!;\n                    const eventParams: ISheetEditChangingEventParams = {\n                        workbook,\n                        worksheet,\n                        row,\n                        column,\n                        value: RichTextValue.create(univerInstanceService.getUnit<DocumentDataModel>(DOCS_NORMAL_EDITOR_UNIT_ID_KEY)!.getSnapshot()),\n                        isZenEditor: false,\n                    };\n                    this.fireEvent(this.Event.SheetEditChanging, eventParams);\n                }\n            })\n        );\n\n        // Zoom events\n        this.registerEventHandler(\n            this.Event.BeforeSheetZoomChange,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== SetZoomRatioCommand.id) return;\n\n                const target = this.getCommandSheetTarget(commandInfo);\n                if (!target) return;\n\n                const { workbook, worksheet } = target;\n                const eventParams: ISheetZoomEvent = {\n                    zoom: (commandInfo.params as ISetZoomRatioCommandParams).zoomRatio,\n                    workbook,\n                    worksheet,\n                };\n                this.fireEvent(this.Event.BeforeSheetZoomChange, eventParams);\n                if (eventParams.cancel) {\n                    throw new CanceledError();\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.SheetZoomChanged,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== SetZoomRatioCommand.id) return;\n\n                const target = this.getCommandSheetTarget(commandInfo);\n                if (!target) return;\n\n                const { workbook, worksheet } = target;\n                this.fireEvent(this.Event.SheetZoomChanged, {\n                    zoom: worksheet.getZoom(),\n                    workbook,\n                    worksheet,\n                });\n            })\n        );\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    private _initObserverListener(injector: Injector): void {\n        const renderManagerService = injector.get(IRenderManagerService);\n\n        const lifeCycleService = injector.get(LifecycleService);\n        const disposable = new DisposableCollection();\n\n        // eslint-disable-next-line max-lines-per-function\n        this.disposeWithMe(lifeCycleService.lifecycle$.subscribe((lifecycle) => {\n            if (lifecycle !== LifecycleStages.Rendered) return;\n            disposable.dispose();\n            const hoverManagerService = injector.get(HoverManagerService);\n            const dragManagerService = injector.get(DragManagerService);\n            if (!hoverManagerService) return;\n\n            // Cell events\n            this.registerEventHandler(\n                this.Event.CellClicked,\n                () => hoverManagerService.currentClickedCell$\n                    ?.pipe(filter((cell) => !!cell))\n                    .subscribe((cell) => {\n                        const baseParams = this.getSheetTarget(cell.location.unitId, cell.location.subUnitId);\n                        if (!baseParams) return;\n                        this.fireEvent(this.Event.CellClicked, {\n                            ...baseParams,\n                            ...cell,\n                            row: cell.location.row,\n                            column: cell.location.col,\n                        });\n                    })\n            );\n\n            this.registerEventHandler(\n                this.Event.CellHover,\n                () => hoverManagerService.currentRichText$\n                    ?.pipe(filter((cell) => !!cell))\n                    .subscribe((cell) => {\n                        const baseParams = this.getSheetTarget(cell.unitId, cell.subUnitId);\n                        if (!baseParams) return;\n                        this.fireEvent(this.Event.CellHover, {\n                            ...baseParams,\n                            ...cell,\n                            row: cell.row,\n                            column: cell.col,\n                        });\n                    })\n            );\n\n            this.registerEventHandler(\n                this.Event.CellPointerDown,\n                () => hoverManagerService.currentPointerDownCell$\n                    ?.pipe(filter((cell) => !!cell))\n                    .subscribe((cell) => {\n                        const baseParams = this.getSheetTarget(cell.unitId, cell.subUnitId);\n                        if (!baseParams) return;\n                        this.fireEvent(this.Event.CellPointerDown, {\n                            ...baseParams,\n                            ...cell,\n                            row: cell.row,\n                            column: cell.col,\n                        });\n                    })\n            );\n\n            this.registerEventHandler(\n                this.Event.CellPointerUp,\n                () => hoverManagerService.currentPointerUpCell$\n                    ?.pipe(filter((cell) => !!cell))\n                    .subscribe((cell) => {\n                        const baseParams = this.getSheetTarget(cell.unitId, cell.subUnitId);\n                        if (!baseParams) return;\n                        this.fireEvent(this.Event.CellPointerUp, {\n                            ...baseParams,\n                            ...cell,\n                            row: cell.row,\n                            column: cell.col,\n                        });\n                    })\n            );\n\n            this.registerEventHandler(\n                this.Event.CellPointerMove,\n                () => hoverManagerService.currentCellPosWithEvent$\n                    ?.pipe(filter((cell) => !!cell))\n                    .subscribe((cell) => {\n                        const baseParams = this.getSheetTarget(cell.unitId, cell.subUnitId);\n                        if (!baseParams) return;\n                        this.fireEvent(this.Event.CellPointerMove, {\n                            ...baseParams,\n                            ...cell,\n                            row: cell.row,\n                            column: cell.col,\n                        });\n                    })\n            );\n\n            // Drag events\n            this.registerEventHandler(\n                this.Event.DragOver,\n                () => dragManagerService.currentCell$\n                    ?.pipe(filter((cell) => !!cell))\n                    .subscribe((cell) => {\n                        const baseParams = this.getSheetTarget(cell.location.unitId, cell.location.subUnitId);\n                        if (!baseParams) return;\n                        this.fireEvent(this.Event.DragOver, {\n                            ...baseParams,\n                            ...cell,\n                            row: cell.location.row,\n                            column: cell.location.col,\n                        });\n                    })\n            );\n\n            this.registerEventHandler(\n                this.Event.Drop,\n                () => dragManagerService.endCell$\n                    ?.pipe(filter((cell) => !!cell))\n                    .subscribe((cell) => {\n                        const baseParams = this.getSheetTarget(cell.location.unitId, cell.location.subUnitId);\n                        if (!baseParams) return;\n                        this.fireEvent(this.Event.Drop, {\n                            ...baseParams,\n                            ...cell,\n                            row: cell.location.row,\n                            column: cell.location.col,\n                        });\n                    })\n            );\n\n            // Row Header events\n            this.registerEventHandler(\n                this.Event.RowHeaderClick,\n                () => hoverManagerService.currentRowHeaderClick$\n                    ?.pipe(filter((header) => !!header))\n                    .subscribe((header) => {\n                        const baseParams = this.getSheetTarget(header.unitId, header.subUnitId);\n                        if (!baseParams) return;\n                        this.fireEvent(this.Event.RowHeaderClick, {\n                            ...baseParams,\n                            row: header.index,\n                        });\n                    })\n            );\n\n            this.registerEventHandler(\n                this.Event.RowHeaderPointerDown,\n                () => hoverManagerService.currentRowHeaderPointerDown$\n                    ?.pipe(filter((header) => !!header))\n                    .subscribe((header) => {\n                        const baseParams = this.getSheetTarget(header.unitId, header.subUnitId);\n                        if (!baseParams) return;\n                        this.fireEvent(this.Event.RowHeaderPointerDown, {\n                            ...baseParams,\n                            row: header.index,\n                        });\n                    })\n            );\n\n            this.registerEventHandler(\n                this.Event.RowHeaderPointerUp,\n                () => hoverManagerService.currentRowHeaderPointerUp$\n                    ?.pipe(filter((header) => !!header))\n                    .subscribe((header) => {\n                        const baseParams = this.getSheetTarget(header.unitId, header.subUnitId);\n                        if (!baseParams) return;\n                        this.fireEvent(this.Event.RowHeaderPointerUp, {\n                            ...baseParams,\n                            row: header.index,\n                        });\n                    })\n            );\n\n            this.registerEventHandler(\n                this.Event.RowHeaderHover,\n                () => hoverManagerService.currentHoveredRowHeader$\n                    ?.pipe(filter((header) => !!header))\n                    .subscribe((header) => {\n                        const baseParams = this.getSheetTarget(header.unitId, header.subUnitId);\n                        if (!baseParams) return;\n                        this.fireEvent(this.Event.RowHeaderHover, {\n                            ...baseParams,\n                            row: header.index,\n                        });\n                    })\n            );\n\n            // Column Header events\n            this.registerEventHandler(\n                this.Event.ColumnHeaderClick,\n                () => hoverManagerService.currentColHeaderClick$\n                    ?.pipe(filter((header) => !!header))\n                    .subscribe((header) => {\n                        const baseParams = this.getSheetTarget(header.unitId, header.subUnitId);\n                        if (!baseParams) return;\n                        this.fireEvent(this.Event.ColumnHeaderClick, {\n                            ...baseParams,\n                            column: header.index,\n                        });\n                    })\n            );\n\n            this.registerEventHandler(\n                this.Event.ColumnHeaderPointerDown,\n                () => hoverManagerService.currentColHeaderPointerDown$\n                    ?.pipe(filter((header) => !!header))\n                    .subscribe((header) => {\n                        const baseParams = this.getSheetTarget(header.unitId, header.subUnitId);\n                        if (!baseParams) return;\n                        this.fireEvent(this.Event.ColumnHeaderPointerDown, {\n                            ...baseParams,\n                            column: header.index,\n                        });\n                    })\n            );\n\n            this.registerEventHandler(\n                this.Event.ColumnHeaderPointerUp,\n                () => hoverManagerService.currentColHeaderPointerUp$\n                    ?.pipe(filter((header) => !!header))\n                    .subscribe((header) => {\n                        const baseParams = this.getSheetTarget(header.unitId, header.subUnitId);\n                        if (!baseParams) return;\n                        this.fireEvent(this.Event.ColumnHeaderPointerUp, {\n                            ...baseParams,\n                            column: header.index,\n                        });\n                    })\n            );\n\n            this.registerEventHandler(\n                this.Event.ColumnHeaderHover,\n                () => hoverManagerService.currentHoveredColHeader$\n                    ?.pipe(filter((header) => !!header))\n                    .subscribe((header) => {\n                        const baseParams = this.getSheetTarget(header.unitId, header.subUnitId);\n                        if (!baseParams) return;\n                        this.fireEvent(this.Event.ColumnHeaderHover, {\n                            ...baseParams,\n                            column: header.index,\n                        });\n                    })\n            );\n        }));\n        this.disposeWithMe(disposable);\n\n        // UI Events in renderUnit\n        const unitMap = new Map<string, IDisposable>();\n        let sheetRenderUnit: Nullable<IRender>;\n        const combined$ = combineLatest([\n            renderManagerService.created$,\n            lifeCycleService.lifecycle$,\n        ]);\n        // eslint-disable-next-line max-lines-per-function\n        this.disposeWithMe(combined$.subscribe(([created, lifecycle]) => {\n            // univer & univer-pro are not same in life cycle.\n\n            // for pro\n            // type     2   2   1   1\n            // stage    1   2   2   2\n            // for univer\n            // type     2   1   1   1\n            // stage    1   1   1   2\n\n            if (created.type === UniverInstanceType.UNIVER_SHEET) {\n                sheetRenderUnit = created;\n            }\n            if (lifecycle <= LifecycleStages.Rendered) return;\n            if (!sheetRenderUnit) return;\n\n            const disposable = new DisposableCollection();\n            const workbook = this.getWorkbook(sheetRenderUnit.unitId);\n            if (!workbook) return;\n\n            if (unitMap.get(sheetRenderUnit.unitId)) {\n                unitMap.get(sheetRenderUnit.unitId)?.dispose();\n            }\n            unitMap.set(sheetRenderUnit.unitId, disposable);\n            const scrollManagerService = sheetRenderUnit.with(SheetScrollManagerService);\n            const selectionService = sheetRenderUnit.with(SheetsSelectionsService);\n\n            // Register scroll event handler\n            disposable.add(this.registerEventHandler(\n                this.Event.Scroll,\n                () => scrollManagerService.validViewportScrollInfo$.subscribe((params: Nullable<IViewportScrollState>) => {\n                    if (!params) return;\n                    this.fireEvent(this.Event.Scroll, {\n                        workbook,\n                        worksheet: workbook.getActiveSheet(),\n                        ...params,\n                    });\n                })\n            ));\n\n            // Register selection event handlers\n            disposable.add(this.registerEventHandler(\n                this.Event.SelectionMoveStart,\n                () => selectionService.selectionMoveStart$.subscribe((selections) => {\n                    this.fireEvent(this.Event.SelectionMoveStart, {\n                        workbook,\n                        worksheet: workbook.getActiveSheet(),\n                        selections: selections?.map((s) => s.range) ?? [],\n                    });\n                })\n            ));\n\n            disposable.add(this.registerEventHandler(\n                this.Event.SelectionMoving,\n                () => selectionService.selectionMoving$.subscribe((selections) => {\n                    this.fireEvent(this.Event.SelectionMoving, {\n                        workbook,\n                        worksheet: workbook.getActiveSheet(),\n                        selections: selections?.map((s) => s.range) ?? [],\n                    });\n                })\n            ));\n\n            disposable.add(this.registerEventHandler(\n                this.Event.SelectionMoveEnd,\n                () => selectionService.selectionMoveEnd$.subscribe((selections) => {\n                    this.fireEvent(this.Event.SelectionMoveEnd, {\n                        workbook,\n                        worksheet: workbook.getActiveSheet(),\n                        selections: selections?.map((s) => s.range) ?? [],\n                    });\n                })\n            ));\n\n            disposable.add(this.registerEventHandler(\n                this.Event.SelectionChanged,\n                () => selectionService.selectionChanged$.subscribe((selections) => {\n                    this.fireEvent(this.Event.SelectionChanged, {\n                        workbook,\n                        worksheet: workbook.getActiveSheet(),\n                        selections: selections?.map((s) => s.range) ?? [],\n                    });\n                })\n            ));\n            // for pro, in pro, life cycle & created$ is not same as univer sdk\n            // if not clear sheetRenderUnit, that would cause event bind twice!\n            sheetRenderUnit = null;\n            this.disposeWithMe(disposable);\n        }));\n\n        this.disposeWithMe(renderManagerService.disposed$.subscribe((unitId) => {\n            unitMap.get(unitId)?.dispose();\n            unitMap.delete(unitId);\n        }));\n\n        this.disposeWithMe(() => {\n            unitMap.forEach((disposable) => {\n                disposable.dispose();\n            });\n        });\n    }\n\n    /**\n     * @ignore\n     */\n\n    override _initialize(injector: Injector): void {\n        this._initSheetUIEvent(injector);\n        this._initObserverListener(injector);\n        const commandService = injector.get(ICommandService);\n\n        this.registerEventHandler(\n            this.Event.BeforeClipboardChange,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                switch (commandInfo.id) {\n                    case CopyCommand.id:\n                    case CutCommand.id:\n                        this._beforeClipboardChange();\n                        break;\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.ClipboardChanged,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                switch (commandInfo.id) {\n                    case CopyCommand.id:\n                    case CutCommand.id:\n                        this._clipboardChanged();\n                        break;\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeClipboardPaste,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                switch (commandInfo.id) {\n                    case SheetPasteShortKeyCommand.id:\n                        this._beforeClipboardPaste(commandInfo.params);\n                        break;\n                    case PasteCommand.id:\n                        this._beforeClipboardPasteAsync();\n                        break;\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.ClipboardPasted,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                switch (commandInfo.id) {\n                    case SheetPasteShortKeyCommand.id:\n                        this._clipboardPaste(commandInfo.params);\n                        break;\n                    case PasteCommand.id:\n                        this._clipboardPasteAsync();\n                        break;\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.SheetSkeletonChanged,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (COMMAND_LISTENER_SKELETON_CHANGE.indexOf(commandInfo.id) > -1) {\n                    const sheet = this.getActiveSheet();\n                    if (!sheet) return;\n                    const ranges = getSkeletonChangedEffectedRange(commandInfo, sheet.worksheet.getMaxColumns())\n                        .map((range) => this.getWorkbook(range.unitId)?.getSheetBySheetId(range.subUnitId)?.getRange(range.range))\n                        .filter(Boolean) as FRange[];\n                    if (!ranges.length) return;\n\n                    this.fireEvent(this.Event.SheetSkeletonChanged, {\n                        workbook: sheet.workbook,\n                        worksheet: sheet.worksheet,\n                        payload: commandInfo as CommandListenerSkeletonChange,\n                        skeleton: sheet.worksheet.getSkeleton()!,\n                        effectedRanges: ranges,\n                    });\n                }\n            })\n        );\n    }\n\n    private _generateClipboardCopyParam(): IBeforeClipboardChangeParam | undefined {\n        const workbook = this.getActiveWorkbook();\n        const worksheet = workbook?.getActiveSheet();\n        const range = workbook?.getActiveRange();\n        if (!workbook || !worksheet || !range) {\n            return;\n        }\n\n        const clipboardService = this._injector.get(ISheetClipboardService);\n        const content = clipboardService.generateCopyContent(workbook.getId(), worksheet.getSheetId(), range.getRange());\n        if (!content) {\n            return;\n        }\n        const { html, plain } = content;\n        const eventParams: IBeforeClipboardChangeParam = {\n            workbook,\n            worksheet,\n            text: plain,\n            html,\n            fromSheet: worksheet,\n            fromRange: range,\n        };\n        return eventParams;\n    }\n\n    private _beforeClipboardChange(): void {\n        const eventParams = this._generateClipboardCopyParam();\n        if (!eventParams) return;\n\n        this.fireEvent(this.Event.BeforeClipboardChange, eventParams);\n        if (eventParams.cancel) {\n            throw new CanceledError();\n        }\n    }\n\n    private _clipboardChanged(): void {\n        const eventParams = this._generateClipboardCopyParam();\n        if (!eventParams) return;\n\n        this.fireEvent(this.Event.ClipboardChanged, eventParams);\n    }\n\n    private _generateClipboardPasteParam(params?: ISheetPasteByShortKeyParams): IBeforeClipboardPasteParam | undefined {\n        if (!params) {\n            return;\n        }\n        const { htmlContent, textContent } = params as ISheetPasteByShortKeyParams;\n        const workbook = this.getActiveWorkbook();\n        const worksheet = workbook?.getActiveSheet();\n        if (!workbook || !worksheet) {\n            return;\n        }\n        const eventParams: IBeforeClipboardPasteParam = {\n            workbook,\n            worksheet,\n            text: textContent,\n            html: htmlContent,\n        };\n        return eventParams;\n    }\n\n    private async _generateClipboardPasteParamAsync(): Promise<IBeforeClipboardPasteParam | undefined> {\n        const workbook = this.getActiveWorkbook();\n        const worksheet = workbook?.getActiveSheet();\n        if (!workbook || !worksheet) {\n            return;\n        }\n        const clipboardInterfaceService = this._injector.get(IClipboardInterfaceService);\n        const clipboardItems = await clipboardInterfaceService.read();\n        const item = clipboardItems[0];\n        let eventParams;\n        if (item) {\n            const types = item.types;\n            const text =\n                types.indexOf(PLAIN_TEXT_CLIPBOARD_MIME_TYPE) !== -1\n                    ? await item.getType(PLAIN_TEXT_CLIPBOARD_MIME_TYPE).then((blob) => blob && blob.text())\n                    : '';\n            const html =\n                types.indexOf(HTML_CLIPBOARD_MIME_TYPE) !== -1\n                    ? await item.getType(HTML_CLIPBOARD_MIME_TYPE).then((blob) => blob && blob.text())\n                    : '';\n            eventParams = {\n                workbook,\n                worksheet,\n                text,\n                html,\n            };\n        }\n        return eventParams;\n    }\n\n    private _beforeClipboardPaste(params?: ISheetPasteByShortKeyParams): void {\n        const eventParams = this._generateClipboardPasteParam(params);\n        if (!eventParams) return;\n        this.fireEvent(this.Event.BeforeClipboardPaste, eventParams);\n        if (eventParams.cancel) {\n            throw new CanceledError();\n        }\n    }\n\n    private _clipboardPaste(params?: ISheetPasteByShortKeyParams): void {\n        const eventParams = this._generateClipboardPasteParam(params);\n        if (!eventParams) return;\n        this.fireEvent(this.Event.ClipboardPasted, eventParams);\n        if (eventParams.cancel) {\n            throw new CanceledError();\n        }\n    }\n\n    private async _beforeClipboardPasteAsync(): Promise<void> {\n        if (!supportClipboardAPI()) {\n            const logService = this._injector.get(ILogService);\n            logService.warn('[Facade]: The navigator object only supports the browser environment');\n            return;\n        }\n        const eventParams = await this._generateClipboardPasteParamAsync();\n        if (!eventParams) return;\n        this.fireEvent(this.Event.BeforeClipboardPaste, eventParams);\n        if (eventParams.cancel) {\n            throw new CanceledError();\n        }\n    }\n\n    private async _clipboardPasteAsync(): Promise<void> {\n        if (!supportClipboardAPI()) {\n            const logService = this._injector.get(ILogService);\n            logService.warn('[Facade]: The navigator object only supports the browser environment');\n            return;\n        }\n        const eventParams = await this._generateClipboardPasteParamAsync();\n        if (!eventParams) return;\n        this.fireEvent(this.Event.ClipboardPasted, eventParams);\n        if (eventParams.cancel) {\n            throw new CanceledError();\n        }\n    }\n\n    override customizeColumnHeader(cfg: IColumnsHeaderCfgParam): void {\n        const wb = this.getActiveWorkbook();\n        if (!wb) {\n            console.error('WorkBook not exist');\n            return;\n        }\n        const unitId = wb?.getId();\n        const renderManagerService = this._injector.get(IRenderManagerService);\n        const activeSheet = wb.getActiveSheet();\n        const subUnitId = activeSheet.getSheetId();\n        const render = renderManagerService.getRenderById(unitId);\n        if (render && cfg.headerStyle?.size) {\n            const skm = render.with(SheetSkeletonManagerService);\n            skm.setColumnHeaderSize(render, subUnitId, cfg.headerStyle?.size);\n            activeSheet?.refreshCanvas();\n        }\n\n        const sheetColumn = this._getSheetRenderComponent(unitId, SHEET_VIEW_KEY.COLUMN) as SpreadsheetColumnHeader;\n        sheetColumn.setCustomHeader(cfg);\n        activeSheet?.refreshCanvas();\n    }\n\n    override customizeRowHeader(cfg: IRowsHeaderCfgParam): void {\n        const wb = this.getActiveWorkbook();\n        if (!wb) {\n            console.error('WorkBook not exist');\n            return;\n        }\n        const unitId = wb?.getId();\n        const sheetRow = this._getSheetRenderComponent(unitId, SHEET_VIEW_KEY.ROW) as SpreadsheetRowHeader;\n        sheetRow.setCustomHeader(cfg);\n    }\n\n    override registerSheetRowHeaderExtension(unitId: string, ...extensions: SheetExtension[]): IDisposable {\n        const sheetComponent = this._getSheetRenderComponent(unitId, SHEET_VIEW_KEY.ROW) as SheetComponent;\n        const registerDisposable = sheetComponent.register(...extensions);\n\n        return toDisposable(() => {\n            registerDisposable.dispose();\n            sheetComponent.makeDirty(true);\n        });\n    }\n\n    override registerSheetColumnHeaderExtension(unitId: string, ...extensions: SheetExtension[]): IDisposable {\n        const sheetComponent = this._getSheetRenderComponent(unitId, SHEET_VIEW_KEY.COLUMN) as SheetComponent;\n        const registerDisposable = sheetComponent.register(...extensions);\n\n        return toDisposable(() => {\n            registerDisposable.dispose();\n            sheetComponent.makeDirty(true);\n        });\n    }\n\n    override registerSheetMainExtension(unitId: string, ...extensions: SheetExtension[]): IDisposable {\n        const sheetComponent = this._getSheetRenderComponent(unitId, SHEET_VIEW_KEY.MAIN) as SheetComponent;\n        const registerDisposable = sheetComponent.register(...extensions);\n\n        return toDisposable(() => {\n            registerDisposable.dispose();\n            sheetComponent.makeDirty(true);\n        });\n    }\n\n    /**\n     * Get sheet render component from render by unitId and view key.\n     * @private\n     * @param {string} unitId The unit id of the spreadsheet.\n     * @param {SHEET_VIEW_KEY} viewKey The view key of the spreadsheet.\n     * @returns {Nullable<RenderComponentType>} The render component.\n     */\n    private _getSheetRenderComponent(unitId: string, viewKey: SHEET_VIEW_KEY): Nullable<RenderComponentType> {\n        const renderManagerService = this._injector.get(IRenderManagerService);\n        const render = renderManagerService.getRenderById(unitId);\n        if (!render) {\n            throw new Error(`Render Unit with unitId ${unitId} not found`);\n        }\n\n        const { components } = render;\n\n        const renderComponent = components.get(viewKey);\n        if (!renderComponent) {\n            throw new Error('Render component not found');\n        }\n\n        return renderComponent;\n    }\n\n    /**\n     * Get sheet hooks.\n     * @returns {FSheetHooks} FSheetHooks instance\n     */\n    override getSheetHooks(): FSheetHooks {\n        return this._injector.createInstance(FSheetHooks);\n    }\n}\n\nFUniver.extend(FUniverSheetsUIMixin);\n\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FUniver extends IFUniverSheetsUIMixin { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, Nullable } from '@univerjs/core';\nimport type { IMouseEvent, IPointerEvent, RenderManagerService } from '@univerjs/engine-render';\nimport type { ICellPosWithEvent, IDragCellPosition, IEditorBridgeServiceVisibleParam, IHoverRichTextInfo, IHoverRichTextPosition, IScrollState, SheetSelectionRenderService } from '@univerjs/sheets-ui';\n\nimport type { IDialogPartMethodOptions, ISidebarMethodOptions } from '@univerjs/ui';\nimport type { ICellEventParam } from './f-event';\nimport { awaitTime, ICommandService, ILogService, toDisposable } from '@univerjs/core';\nimport { DeviceInputEventType, IRenderManagerService } from '@univerjs/engine-render';\nimport { DragManagerService, HoverManagerService, ISheetSelectionRenderService, SetCellEditVisibleOperation, SheetScrollManagerService } from '@univerjs/sheets-ui';\nimport { FWorkbook } from '@univerjs/sheets/facade';\nimport { IDialogService, ISidebarService, KeyCode } from '@univerjs/ui';\nimport { filter } from 'rxjs';\n\n/**\n * @ignore\n */\nexport interface IFWorkbookSheetsUIMixin {\n    /**\n     * Open a sidebar.\n     * @deprecated use `univerAPI.openSidebar` instead\n     * @param {ISidebarMethodOptions} params the sidebar options\n     * @returns {IDisposable} the disposable object\n     * @example\n     * ```ts\n     * univerAPI.openSidebar({\n     *   id: 'mock-sidebar-id',\n     *   width: 300,\n     *   header: {\n     *     label: 'Sidebar Header',\n     *   },\n     *   children: {\n     *     label: 'Sidebar Content',\n     *   },\n     *   footer: {\n     *     label: 'Sidebar Footer',\n     *   },\n     *   onClose: () => {\n     *     console.log('Sidebar closed')\n     *   },\n     * });\n     * ```\n     */\n    openSiderbar(params: ISidebarMethodOptions): IDisposable;\n\n    /**\n     * Open a dialog.\n     * @deprecated use `univerAPI.openDialog` instead\n     * @param {IDialogPartMethodOptions} dialog the dialog options\n     * @returns {IDisposable} the disposable object\n     * @example\n     * ```ts\n     * import { Button } from '@univerjs/design';\n     *\n     * univerAPI.openDialog({\n     *   id: 'mock-dialog-id',\n     *   width: 500,\n     *   title: {\n     *     label: 'Dialog Title',\n     *   },\n     *   children: {\n     *     label: 'Dialog Content',\n     *   },\n     *   footer: {\n     *     title: (\n     *       <>\n     *         <Button onClick={() => { console.log('Cancel clicked') }}>Cancel</Button>\n     *         <Button type=\"primary\" onClick={() => { console.log('Confirm clicked') }} style={{marginLeft: '10px'}}>Confirm</Button>\n     *       </>\n     *     )\n     *   },\n     *   draggable: true,\n     *   mask: true,\n     *   maskClosable: true,\n     * });\n     * ```\n     */\n    openDialog(dialog: IDialogPartMethodOptions): IDisposable;\n\n    /**\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.CellClicked, (params) => {})` instead\n     */\n    onCellClick(callback: (cell: IHoverRichTextInfo) => void): IDisposable;\n\n    /**\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.CellHover, (params) => {})` instead\n     */\n    onCellHover(callback: (cell: IHoverRichTextPosition) => void): IDisposable;\n\n    /**\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.CellPointerMove, (params) => {})` instead\n     */\n    onCellPointerMove(callback: (cell: ICellPosWithEvent, event: IPointerEvent | IMouseEvent) => void): IDisposable;\n\n    /**\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.CellPointerDown, (params) => {})` instead\n     */\n    onCellPointerDown(callback: (cell: ICellPosWithEvent) => void): IDisposable;\n\n    /**\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.CellPointerUp, (params) => {})` instead\n     */\n    onCellPointerUp(callback: (cell: ICellPosWithEvent) => void): IDisposable;\n\n    /**\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.DragOver, (params) => {})` instead\n     */\n    onDragOver(callback: (cell: IDragCellPosition) => void): IDisposable;\n\n    /**\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.Drop, (params) => {})` instead\n     */\n    onDrop(callback: (cell: IDragCellPosition) => void): IDisposable;\n\n    /**\n     * Start the editing process of the current active cell\n     * @returns {boolean} Whether the editing process is started successfully\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.startEditing();\n     * ```\n     */\n    startEditing(): boolean;\n\n    /**\n     * @deprecated Use `endEditingAsync` as instead\n     */\n    endEditing(save?: boolean): Promise<boolean>;\n\n    /**\n     * @async\n     * End the editing process of the current active cell\n     * @param {boolean} save - Whether to save the changes, default is true\n     * @returns {Promise<boolean>} Whether the editing process is ended successfully\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * await fWorkbook.endEditingAsync(false);\n     * ```\n     */\n    endEditingAsync(save?: boolean): Promise<boolean>;\n\n    /**\n     * Get scroll state of specified sheet.\n     * @param {string} sheetId - sheet id\n     * @returns {IScrollState} scroll state\n     * @example\n     * ``` ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // scroll to cell D10\n     * fWorksheet.scrollToCell(9, 3);\n     *\n     * // get scroll state\n     * const scrollState = fWorkbook.getScrollStateBySheetId(fWorksheet.getSheetId());\n     * const { offsetX, offsetY, sheetViewStartRow, sheetViewStartColumn } = scrollState;\n     * console.log(scrollState); // sheetViewStartRow: 9, sheetViewStartColumn: 3, offsetX: 0, offsetY: 0\n     * ```\n     */\n    getScrollStateBySheetId(sheetId: string): Nullable<IScrollState>;\n\n    /**\n     * Disable selection. After disabled, there would be no response for selection.\n     * @returns {FWorkbook} FWorkbook instance for chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.disableSelection();\n     * ```\n     */\n    disableSelection(): FWorkbook;\n\n    /**\n     * Enable selection. After this you can select range.\n     * @returns {FWorkbook} FWorkbook instance for chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.enableSelection();\n     * ```\n     */\n    enableSelection(): FWorkbook;\n\n    /**\n     * Set selection invisible, Unlike disableSelection, selection still works, you just can not see them.\n     * @returns {FWorkbook} FWorkbook instance for chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.transparentSelection();\n     * ```\n     */\n    transparentSelection(): FWorkbook;\n\n    /**\n     * Set selection visible.\n     * @returns {FWorkbook} FWorkbook instance for chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * fWorkbook.showSelection();\n     * ```\n     */\n    showSelection(): FWorkbook;\n}\n\nexport class FWorkbookSheetsUIMixin extends FWorkbook implements IFWorkbookSheetsUIMixin {\n    override openSiderbar(params: ISidebarMethodOptions): IDisposable {\n        this._logDeprecation('openSiderbar');\n\n        const sideBarService = this._injector.get(ISidebarService);\n        return sideBarService.open(params);\n    }\n\n    override openDialog(dialog: IDialogPartMethodOptions): IDisposable {\n        this._logDeprecation('openDialog');\n\n        const dialogService = this._injector.get(IDialogService);\n        const disposable = dialogService.open({\n            ...dialog,\n            onClose: () => {\n                disposable.dispose();\n            },\n        });\n\n        return disposable;\n    }\n\n    private _logDeprecation(name: string): void {\n        const logService = this._injector.get(ILogService);\n\n        logService.warn('[FWorkbook]', `${name} is deprecated. Please use the function of the same name on \"FUniver\".`);\n    }\n\n    generateCellParams(cell: IHoverRichTextPosition | ICellPosWithEvent): ICellEventParam {\n        const worksheet = this.getActiveSheet();\n        return {\n            row: cell.row,\n            column: cell.col,\n            workbook: this,\n            worksheet,\n        };\n    }\n\n    override onCellClick(callback: (cell: IHoverRichTextInfo) => void): IDisposable {\n        const hoverManagerService = this._injector.get(HoverManagerService);\n        return toDisposable(\n            hoverManagerService.currentClickedCell$\n                .pipe(filter((cell) => !!cell))\n                .subscribe((cell) => {\n                    callback(cell);\n                })\n        );\n    }\n\n    override onCellHover(callback: (cell: IHoverRichTextPosition) => void): IDisposable {\n        const hoverManagerService = this._injector.get(HoverManagerService);\n        return toDisposable(\n            hoverManagerService.currentRichText$\n                .pipe(filter((cell) => !!cell))\n                .subscribe(callback)\n        );\n    }\n\n    override onCellPointerDown(callback: (cell: ICellPosWithEvent) => void): IDisposable {\n        const hoverManagerService = this._injector.get(HoverManagerService);\n        return toDisposable(\n            hoverManagerService.currentPointerDownCell$.subscribe(callback)\n        );\n    }\n\n    override onCellPointerUp(callback: (cell: ICellPosWithEvent) => void): IDisposable {\n        const hoverManagerService = this._injector.get(HoverManagerService);\n        return toDisposable(\n            hoverManagerService.currentPointerUpCell$.subscribe(callback)\n        );\n    }\n\n    override onCellPointerMove(callback: (cell: ICellPosWithEvent, event: IPointerEvent | IMouseEvent) => void): IDisposable {\n        const hoverManagerService = this._injector.get(HoverManagerService);\n        return toDisposable(\n            hoverManagerService.currentCellPosWithEvent$\n                .pipe(filter((cell) => !!cell))\n                .subscribe((cell: ICellPosWithEvent) => {\n                    callback(cell, cell.event);\n                })\n        );\n    }\n\n    override onDragOver(callback: (cell: IDragCellPosition) => void): IDisposable {\n        const dragManagerService = this._injector.get(DragManagerService);\n        return toDisposable(\n            dragManagerService.currentCell$\n                .pipe(filter((cell) => !!cell))\n                .subscribe((cell: IDragCellPosition) => {\n                    callback(cell);\n                })\n        );\n    }\n\n    override onDrop(callback: (cell: IDragCellPosition) => void): IDisposable {\n        const dragManagerService = this._injector.get(DragManagerService);\n        return toDisposable(\n            dragManagerService.endCell$\n                .pipe(filter((cell) => !!cell))\n                .subscribe((cell: IDragCellPosition) => {\n                    callback(cell);\n                })\n        );\n    }\n\n    override startEditing(): boolean {\n        const commandService = this._injector.get(ICommandService);\n        return commandService.syncExecuteCommand(SetCellEditVisibleOperation.id, {\n            eventType: DeviceInputEventType.Dblclick,\n            unitId: this._workbook.getUnitId(),\n            visible: true,\n        } as IEditorBridgeServiceVisibleParam);\n    }\n\n    override async endEditing(save?: boolean): Promise<boolean> {\n        const commandService = this._injector.get(ICommandService);\n        commandService.syncExecuteCommand(SetCellEditVisibleOperation.id, {\n            eventType: DeviceInputEventType.Keyboard,\n            keycode: save ? KeyCode.ENTER : KeyCode.ESC,\n            visible: false,\n            unitId: this._workbook.getUnitId(),\n        } as IEditorBridgeServiceVisibleParam);\n\n        // wait for the async cell edit operation to complete\n        await awaitTime(0);\n        return true;\n    }\n\n    override endEditingAsync(save = true): Promise<boolean> {\n        return this.endEditing(save);\n    }\n\n    /**\n     * Get scroll state of specified sheet.\n     * @param {string} sheetId - sheet id\n     * @returns {IScrollState} scroll state\n     * @example\n     * ``` ts\n     * univerAPI.getActiveWorkbook().getScrollStateBySheetId($sheetId)\n     * ```\n     */\n    override getScrollStateBySheetId(sheetId: string): Nullable<IScrollState> {\n        const unitId = this._workbook.getUnitId();\n        const renderManagerService = this._injector.get(IRenderManagerService);\n        const render = renderManagerService.getRenderById(unitId);\n        if (!render) return null;\n        const scm = render.with(SheetScrollManagerService);\n        return scm.getScrollStateByParam({ unitId, sheetId });\n    }\n\n    override disableSelection(): FWorkbook {\n        const unitId = this._workbook.getUnitId();\n        const renderManagerService = this._injector.get(IRenderManagerService) as RenderManagerService;\n        const render = renderManagerService.getRenderById(unitId);\n        if (render) {\n            (render.with(ISheetSelectionRenderService) as SheetSelectionRenderService).disableSelection();\n        }\n        return this;\n    }\n\n    override enableSelection(): FWorkbook {\n        const unitId = this._workbook.getUnitId();\n        const renderManagerService = this._injector.get(IRenderManagerService) as RenderManagerService;\n        const render = renderManagerService.getRenderById(unitId);\n        if (render) {\n            (render.with(ISheetSelectionRenderService) as SheetSelectionRenderService).enableSelection();\n        }\n        return this;\n    }\n\n    override transparentSelection(): FWorkbook {\n        const unitId = this._workbook.getUnitId();\n        const renderManagerService = this._injector.get(IRenderManagerService) as RenderManagerService;\n        const render = renderManagerService.getRenderById(unitId);\n        if (render) {\n            (render.with(ISheetSelectionRenderService) as SheetSelectionRenderService).transparentSelection();\n        }\n        return this;\n    }\n\n    override showSelection(): FWorkbook {\n        const unitId = this._workbook.getUnitId();\n        const renderManagerService = this._injector.get(IRenderManagerService) as RenderManagerService;\n        const render = renderManagerService.getRenderById(unitId);\n        if (render) {\n            (render.with(ISheetSelectionRenderService) as SheetSelectionRenderService).showSelection();\n        }\n        return this;\n    }\n}\n\nFWorkbook.extend(FWorkbookSheetsUIMixin);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FWorkbook extends IFWorkbookSheetsUIMixin {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, IRange, Nullable } from '@univerjs/core';\nimport type { IColumnsHeaderCfgParam, IRowsHeaderCfgParam, RenderComponentType, RenderManagerService, SpreadsheetColumnHeader, SpreadsheetRowHeader, SpreadsheetSkeleton } from '@univerjs/engine-render';\n\nimport type { IScrollState, IViewportScrollState } from '@univerjs/sheets-ui';\nimport { ICommandService, toDisposable } from '@univerjs/core';\nimport { IRenderManagerService, SHEET_VIEWPORT_KEY, sheetContentViewportKeys } from '@univerjs/engine-render';\nimport { SetWorksheetRowIsAutoHeightCommand } from '@univerjs/sheets';\nimport { SetColumnHeaderHeightCommand, SetRowHeaderWidthCommand, SetWorksheetColAutoWidthCommand, SetZoomRatioCommand, SHEET_VIEW_KEY, SheetScrollManagerService, SheetSkeletonManagerService, SheetsScrollRenderController } from '@univerjs/sheets-ui';\nimport { FWorksheet } from '@univerjs/sheets/facade';\n\n/**\n * @ignore\n */\nexport interface IFWorksheetSkeletonMixin {\n    /**\n     * Refresh the canvas.\n     * @returns {FWorksheet} The FWorksheet instance for chaining.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * fWorksheet.refreshCanvas();\n     * ```\n     */\n    refreshCanvas(): FWorksheet;\n\n    /**\n     * Set zoom ratio of the worksheet.\n     * @param {number} zoomRatio The zoom ratio to set.It should be in the range of 0.1 to 4.0.\n     * @returns {FWorksheet} The FWorksheet instance for chaining.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set zoom ratio to 200%\n     * fWorksheet.zoom(2);\n     * const zoomRatio = fWorksheet.getZoom();\n     * console.log(zoomRatio); // 2\n     * ```\n     */\n    zoom(zoomRatio: number): FWorksheet;\n\n    /**\n     * Get the zoom ratio of the worksheet.\n     * @returns {number} The zoom ratio of the worksheet.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const zoomRatio = fWorksheet.getZoom();\n     * console.log(zoomRatio);\n     * ```\n     */\n    getZoom(): number;\n\n    /**\n     * Return visible range, sum view range of 4 viewports.\n     * @returns {IRange} - visible range\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const visibleRange = fWorksheet.getVisibleRange();\n     * console.log(visibleRange);\n     * console.log(fWorksheet.getRange(visibleRange).getA1Notation());\n     * ```\n     */\n    getVisibleRange(): IRange;\n\n    /**\n     * Scroll spreadsheet(viewMain) to cell position. Make the cell at topleft of current viewport.\n     * Based on the limitations of viewport and the number of rows and columns, you can only scroll to the maximum scrollable range.\n     * @param {number} row - Cell row index\n     * @param {number} column - Cell column index\n     * @returns {FWorksheet} - The FWorksheet instance for chaining.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Scroll to cell D10\n     * const fRange = fWorksheet.getRange('D10');\n     * const row = fRange.getRow();\n     * const column = fRange.getColumn();\n     * fWorksheet.scrollToCell(row, column);\n     * ```\n     */\n    scrollToCell(row: number, column: number): FWorksheet;\n\n    /**\n     * Get scroll state of current sheet.\n     * @returns {IScrollState} curr scroll state\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Scroll to cell D10\n     * const fRange = fWorksheet.getRange('D10');\n     * const row = fRange.getRow();\n     * const column = fRange.getColumn();\n     * fWorksheet.scrollToCell(row, column);\n     *\n     * // Get scroll state\n     * const scrollState = fWorksheet.getScrollState();\n     * const { offsetX, offsetY, sheetViewStartColumn, sheetViewStartRow } = scrollState;\n     * console.log(scrollState); // sheetViewStartRow: 9, sheetViewStartColumn: 3, offsetX: 0, offsetY: 0\n     * ```\n     */\n    getScrollState(): IScrollState;\n\n    /**\n     * Get the skeleton service of the worksheet.\n     * @returns {Nullable<SpreadsheetSkeleton>} The skeleton of the worksheet.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const skeleton = fWorksheet.getSkeleton();\n     * console.log(skeleton);\n     * ```\n     */\n    getSkeleton(): Nullable<SpreadsheetSkeleton>;\n\n    /**\n     * Sets the width of the given column to fit its contents.\n     * @param {number} columnPosition - The position of the given column to resize. index starts at 0.\n     * @returns {FWorksheet} - The FWorksheet instance for chaining.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set the long text value in cell A1\n     * const fRange = fWorksheet.getRange('A1');\n     * fRange.setValue('Whenever it is a damp, drizzly November in my soul...');\n     *\n     * // Set the column A to a width which fits the text\n     * fWorksheet.autoResizeColumn(0);\n     * ```\n     */\n    autoResizeColumn(columnPosition: number): FWorksheet;\n\n    /**\n     * Sets the width of all columns starting at the given column position to fit their contents.\n     * @param {number} startColumn - The position of the first column to resize. index starts at 0.\n     * @param {number} numColumns - The number of columns to auto-resize.\n     * @returns {FWorksheet} - The FWorksheet instance for chaining.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set the A:C columns to a width that fits their text.\n     * fWorksheet.autoResizeColumns(0, 3);\n     * ```\n     */\n    autoResizeColumns(startColumn: number, numColumns: number): FWorksheet;\n\n    /**\n     * Sets the width of all columns starting at the given column position to fit their contents.\n     * @deprecated use `autoResizeColumns` instead\n     * @param {number} columnPosition - The position of the first column to resize. index starts at 0.\n     * @param {number} numColumn - The number of columns to auto-resize.\n     * @returns {FWorksheet} - The FWorksheet instance for chaining.\n     */\n    setColumnAutoWidth(columnPosition: number, numColumn: number): FWorksheet;\n\n    /**\n     * Sets the height of all rows starting at the given row position to fit their contents.\n     * @param {number} startRow - The position of the first row to resize. index starts at 0.\n     * @param {number} numRows - The number of rows to auto-resize.\n     * @returns {FWorksheet} - The FWorksheet instance for chaining.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set the first 3 rows to a height that fits their text.\n     * fWorksheet.autoResizeRows(0, 3);\n     * ```\n     */\n    autoResizeRows(startRow: number, numRows: number): FWorksheet;\n\n    /**\n     * Customize the column header of the spreadsheet.\n     * @param {IColumnsHeaderCfgParam} cfg The configuration of the column header.\n     * @example\n     * ```typescript\n        const fWorkbook = univerAPI.getActiveWorkbook();\n        const fWorksheet = fWorkbook.getActiveSheet();\n        fWorksheet.customizeColumnHeader({\n            headerStyle: {\n                fontColor: '#fff',\n                backgroundColor: '#4e69ee',\n                fontSize: 9\n            },\n            columnsCfg: {\n                0: 'kuma II',\n                3: {\n                    text: 'Size',\n                    textAlign: 'left', // CanvasTextAlign\n                    fontColor: '#fff',\n                    fontSize: 12,\n                    borderColor: 'pink',\n                    backgroundColor: 'pink',\n                },\n                4: 'Wow'\n            }\n        });\n     * ```\n     */\n    customizeColumnHeader(cfg: IColumnsHeaderCfgParam): void;\n\n    /**\n     * Customize the row header of the spreadsheet.\n     * @param {IRowsHeaderCfgParam} cfg The configuration of the row header.\n     * @example\n     * ```typescript\n        univerAPI.customizeRowHeader({\n            headerStyle: {\n                backgroundColor: 'pink',\n                fontSize: 12\n            },\n            rowsCfg: {\n                0: 'MokaII',\n                3: {\n                    text: 'Size',\n                    textAlign: 'left'\n                }\n            }\n        });\n     * ```\n     */\n    customizeRowHeader(cfg: IRowsHeaderCfgParam): void;\n\n    /**\n     * Set column height for column header.\n     * @param {number} height - The height to set.\n     * @returns {FWorksheet} - The FWorksheet instance for chaining.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * fWorksheet.setColumnHeaderHeight(100);\n     * ```\n     */\n    setColumnHeaderHeight(height: number): FWorksheet;\n\n    /**\n     * Set column height for column header.\n     * @param {number} width - The width to set.\n     * @returns {FWorksheet} - The FWorksheet instance for chaining.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * fWorksheet.setRowHeaderWidth(100);\n     * ```\n     */\n    setRowHeaderWidth(width: number): FWorksheet;\n\n    /**\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.Scroll, (params) => {})` instead\n     */\n    onScroll(callback: (params: Nullable<IViewportScrollState>) => void): IDisposable;\n}\n\nexport class FWorksheetSkeletonMixin extends FWorksheet implements IFWorksheetSkeletonMixin {\n    override refreshCanvas(): FWorksheet {\n        const renderManagerService = this._injector.get(IRenderManagerService);\n        const unitId = this._fWorkbook.id;\n        const render = renderManagerService.getRenderById(unitId);\n\n        if (!render) {\n            throw new Error(`Render Unit with unitId ${unitId} not found`);\n        }\n\n        render.with(SheetSkeletonManagerService).reCalculate();\n\n        const mainComponent = render.mainComponent;\n\n        if (!mainComponent) {\n            throw new Error('Main component not found');\n        }\n\n        mainComponent.makeDirty();\n\n        return this;\n    }\n\n    override zoom(zoomRatio: number): FWorksheet {\n        const commandService = this._injector.get(ICommandService);\n        const _zoomRatio = Math.min(Math.max(zoomRatio, 0.1), 4);\n        commandService.executeCommand(SetZoomRatioCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            zoomRatio: _zoomRatio,\n        });\n        return this;\n    }\n\n    override getZoom(): number {\n        return this._worksheet.getZoomRatio();\n    }\n\n    override getVisibleRange(): IRange {\n        const unitId = this._workbook.getUnitId();\n        const renderManagerService = this._injector.get(IRenderManagerService);\n        const render = renderManagerService.getRenderById(unitId);\n        let range: IRange = {\n            startColumn: 0,\n            startRow: 0,\n            endColumn: 0,\n            endRow: 0,\n        };\n        if (!render) return range;\n        const skm = render.with(SheetSkeletonManagerService);\n        const sk = skm.getCurrentSkeleton();\n        if (!sk) return range;\n        const visibleRangeMap = sk?.getVisibleRanges();\n        if (!visibleRangeMap) return range;\n\n        range = sk.getVisibleRangeByViewport(SHEET_VIEWPORT_KEY.VIEW_MAIN) as IRange;\n        for (const [k, r] of visibleRangeMap) {\n            if (sheetContentViewportKeys.indexOf(k) === -1) continue;\n            range.startColumn = Math.min(range.startColumn, r.startColumn);\n            range.startRow = Math.min(range.startRow, r.startRow);\n            range.endColumn = Math.max(range.endColumn, r.endColumn);\n            range.endRow = Math.max(range.endRow, r.endRow);\n        }\n\n        return range;\n    }\n\n    override scrollToCell(row: number, column: number): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const renderManagerService = this._injector.get(IRenderManagerService);\n        const render = renderManagerService.getRenderById(unitId);\n        if (render) {\n            const scrollRenderController = render?.with(SheetsScrollRenderController);\n            scrollRenderController.scrollToCell(row, column);\n        }\n        return this;\n    }\n\n    override getScrollState(): IScrollState {\n        const emptyScrollState: IScrollState = {\n            offsetX: 0,\n            offsetY: 0,\n            sheetViewStartColumn: 0,\n            sheetViewStartRow: 0,\n        };\n        const unitId = this._workbook.getUnitId();\n        const sheetId = this._worksheet.getSheetId();\n        const renderManagerService = this._injector.get(IRenderManagerService);\n        const render = renderManagerService.getRenderById(unitId);\n        if (!render) return emptyScrollState;\n        const sheetScrollManagerService = render.with(SheetScrollManagerService);\n        const scrollState = sheetScrollManagerService.getScrollStateByParam({ unitId, sheetId });\n        return scrollState || emptyScrollState;\n    }\n\n    override onScroll(callback: (params: Nullable<IViewportScrollState>) => void): IDisposable {\n        const unitId = this._workbook.getUnitId();\n        const renderManagerService = this._injector.get(IRenderManagerService) as RenderManagerService;\n        const scrollManagerService = renderManagerService.getRenderById(unitId)?.with(SheetScrollManagerService);\n        if (scrollManagerService) {\n            const sub = scrollManagerService.validViewportScrollInfo$.subscribe((params: Nullable<IViewportScrollState>) => {\n                callback(params);\n            });\n            return toDisposable(sub);\n        }\n        return toDisposable(() => { });\n    }\n\n    override getSkeleton(): Nullable<SpreadsheetSkeleton> {\n        const service = this._injector.get(IRenderManagerService).getRenderById(this._workbook.getUnitId())?.with(SheetSkeletonManagerService);\n        return service?.getWorksheetSkeleton(this._worksheet.getSheetId())?.skeleton;\n    }\n\n    override autoResizeColumn(columnPosition: number): FWorksheet {\n        return this.autoResizeColumns(columnPosition, 1);\n    }\n\n    override autoResizeColumns(startColumn: number, numColumns: number): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const ranges = [\n            {\n                startColumn,\n                endColumn: startColumn + numColumns - 1,\n                startRow: 0,\n                endRow: this._worksheet.getRowCount() - 1,\n            },\n        ];\n\n        this._commandService.syncExecuteCommand(SetWorksheetColAutoWidthCommand.id, {\n            unitId,\n            subUnitId,\n            ranges,\n        });\n\n        return this;\n    }\n\n    override setColumnAutoWidth(columnPosition: number, numColumn: number): FWorksheet {\n        return this.autoResizeColumns(columnPosition, numColumn);\n    }\n\n    override autoResizeRows(startRow: number, numRows: number): FWorksheet {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const ranges = [\n            {\n                startRow,\n                endRow: startRow + numRows - 1,\n                startColumn: 0,\n                endColumn: this._worksheet.getColumnCount() - 1,\n            },\n        ];\n\n        this._commandService.syncExecuteCommand(SetWorksheetRowIsAutoHeightCommand.id, {\n            unitId,\n            subUnitId,\n            ranges,\n        });\n\n        return this;\n    }\n\n    override customizeColumnHeader(cfg: IColumnsHeaderCfgParam): void {\n        const activeSheet = this;\n        const unitId = this._fWorkbook.getId();\n        const renderManagerService = this._injector.get(IRenderManagerService);\n        const subUnitId = activeSheet.getSheetId();\n        const render = renderManagerService.getRenderById(unitId);\n        if (render && cfg.headerStyle?.size) {\n            const skm = render.with(SheetSkeletonManagerService);\n            skm.setColumnHeaderSize(render, subUnitId, cfg.headerStyle?.size);\n            activeSheet?.refreshCanvas();\n        }\n\n        const sheetColumn = this._getSheetRenderComponent(unitId, SHEET_VIEW_KEY.COLUMN) as SpreadsheetColumnHeader;\n        if (sheetColumn) {\n            sheetColumn.setCustomHeader(cfg);\n            activeSheet?.refreshCanvas();\n        }\n    }\n\n    override customizeRowHeader(cfg: IRowsHeaderCfgParam): void {\n        const unitId = this._fWorkbook.getId();\n        const sheetRow = this._getSheetRenderComponent(unitId, SHEET_VIEW_KEY.ROW) as SpreadsheetRowHeader;\n        sheetRow.setCustomHeader(cfg);\n    }\n\n    override setColumnHeaderHeight(height: number): FWorksheet {\n        const activeSheet = this;\n        const unitId = this._fWorkbook.getId();\n        const subUnitId = activeSheet.getSheetId();\n\n        this._commandService.executeCommand(SetColumnHeaderHeightCommand.id, {\n            unitId,\n            subUnitId,\n            size: height,\n        });\n\n        activeSheet?.refreshCanvas();\n        return this;\n    }\n\n    override setRowHeaderWidth(width: number): FWorksheet {\n        const activeSheet = this;\n        const unitId = this._fWorkbook.getId();\n        const subUnitId = activeSheet.getSheetId();\n\n        this._commandService.executeCommand(SetRowHeaderWidthCommand.id, {\n            unitId,\n            subUnitId,\n            size: width,\n        });\n\n        const sheetRow = this._getSheetRenderComponent(unitId, SHEET_VIEW_KEY.ROW) as SpreadsheetRowHeader;\n        if (sheetRow) {\n            sheetRow.setCustomHeader({ headerStyle: { size: width } });\n        }\n        activeSheet?.refreshCanvas();\n        return this;\n    }\n\n    /**\n     * Get sheet render component from render by unitId and view key.\n     * @private\n     * @param {string} unitId The unit id of the spreadsheet.\n     * @param {SHEET_VIEW_KEY} viewKey The view key of the spreadsheet.\n     * @returns {Nullable<RenderComponentType>} The render component.\n     */\n    private _getSheetRenderComponent(unitId: string, viewKey: SHEET_VIEW_KEY): Nullable<RenderComponentType> {\n        const renderManagerService = this._injector.get(IRenderManagerService);\n        const render = renderManagerService.getRenderById(unitId);\n        if (!render) {\n            throw new Error(`Render Unit with unitId ${unitId} not found`);\n        }\n\n        const { components } = render;\n        const renderComponent = components.get(viewKey);\n        if (!renderComponent) {\n            throw new Error('Render component not found');\n        }\n\n        return renderComponent;\n    }\n}\n\nFWorksheet.extend(FWorksheetSkeletonMixin);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FWorksheet extends IFWorksheetSkeletonMixin { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FPermission } from '@univerjs/sheets/facade';\n\n/**\n * @ignore\n */\nexport interface IFPermissionSheetsUIMixin {\n    /**\n     * Set visibility of unauthorized pop-up window\n     * @param {boolean} visible - visibility of unauthorized pop-up window\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const permission = fWorkbook.getPermission();\n     * permission.setPermissionDialogVisible(false);\n     * ```\n     */\n    setPermissionDialogVisible(visible: boolean): void;\n}\n\nexport class FPermissionSheetsUIMixin extends FPermission implements IFPermissionSheetsUIMixin {\n    override setPermissionDialogVisible(visible: boolean): void {\n        this._permissionService.setShowComponents(visible);\n    }\n}\n\nFPermission.extend(FPermissionSheetsUIMixin);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FPermission extends IFPermissionSheetsUIMixin {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICellCustomRender, IDisposable, Nullable } from '@univerjs/core';\nimport type { IDragCellPosition, IEditorBridgeServiceVisibleParam, IHoverCellPosition } from '@univerjs/sheets-ui';\nimport { ICommandService, InterceptorEffectEnum, toDisposable } from '@univerjs/core';\nimport { InterceptCellContentPriority, INTERCEPTOR_POINT, SheetInterceptorService } from '@univerjs/sheets';\nimport { DragManagerService, HoverManagerService, SetCellEditVisibleOperation } from '@univerjs/sheets-ui';\nimport { FSheetHooks } from '@univerjs/sheets/facade';\n\n/**\n * @ignore\n */\nexport interface IFSheetHooksUIMixin {\n    /**\n     * The onCellPointerMove event is fired when a pointer changes coordinates.\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.CellPointerMove, (params) => {})` instead\n     * @param {function(Nullable<IHoverCellPosition>): void} callback - function that will be called when the event is fired\n     * @returns {IDisposable} A disposable object that can be used to unsubscribe from the event\n     * @example\n     * ```ts\n     * univerAPI.getSheetHooks().onCellPointerMove((cellPos) => { console.log(cellPos)});\n     * ```\n     */\n    onCellPointerMove(callback: (cellPos: Nullable<IHoverCellPosition>) => void): IDisposable;\n\n    /**\n     * The onCellPointerOver event is fired when a pointer is moved into a cell's hit test boundaries.\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.CellHover, (params) => {})` instead\n     * @param {function(Nullable<IHoverCellPosition>): void} callback - function that will be called when the event is fired\n     * @returns {IDisposable} A disposable object that can be used to unsubscribe from the event\n     * @example\n     * ```ts\n     * univerAPI.getSheetHooks().onCellPointerOver((cellPos) => { console.log(cellPos)});\n     * ```\n     */\n    onCellPointerOver(callback: (cellPos: Nullable<IHoverCellPosition>) => void): IDisposable;\n\n    /**\n     * The onCellDragOver event is fired when an element or text selection is being dragged into a cell's hit test boundaries.\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.DragOver, (params) => {})` instead\n     * @param {function (Nullable<IDragCellPosition>): void} callback Callback function that will be called when the event is fired\n     * @returns {IDisposable} A disposable object that can be used to unsubscribe from the event\n     * @example\n     * ```ts\n     * univerAPI.getSheetHooks().onCellDragOver((cellPos) => { console.log(cellPos)});\n     * ```\n     */\n    onCellDragOver(callback: (cellPos: Nullable<IDragCellPosition>) => void): IDisposable;\n\n    /**\n     * The onCellDrop event is fired when an element or text selection is being dropped on the cell.\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.Drop, (params) => {})` instead\n     * @param {function(Nullable<IDragCellPosition>): void} callback Callback function that will be called when the event is fired\n     * @returns {IDisposable} A disposable object that can be used to unsubscribe from the event\n     * @example\n     * ```ts\n     * univerAPI.getSheetHooks().onCellDrop((cellPos) => { console.log(cellPos)});\n     * ```\n     */\n    onCellDrop(callback: (cellPos: Nullable<IDragCellPosition>) => void): IDisposable;\n\n    /**\n     * The onCellRender event is fired when a cell is rendered.\n     * @param {Nullable<ICellCustomRender[]>} customRender Custom render function\n     * @param {InterceptorEffectEnum} [effect] The effect of the interceptor\n     * @param {number} priority The priority of the interceptor\n     * @returns {IDisposable} A disposable object that can be used to unsubscribe from the event\n     * @example\n     * ```ts\n        univerAPI.getSheetHooks().onCellRender([{\n            drawWith: (ctx, info) => {\n                const { row, col } = info;\n                // Update to any cell location you want\n                if (row === 1 && col === 2) {\n                    const { primaryWithCoord } = info;\n                    const { startX, startY } = primaryWithCoord;\n                    ctx.fillText('Univer', startX, startY + 10);\n                }\n            },\n        }])\n     * ```\n     */\n    onCellRender(customRender: Nullable<ICellCustomRender[]>, effect?: InterceptorEffectEnum, priority?: number): IDisposable;\n\n    /**\n     * The onBeforeCellEdit event is fired before a cell is edited.\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.BeforeSheetEditStart, (params) => {})` instead\n     * @param callback Callback function that will be called when the event is fired\n     * @returns A disposable object that can be used to unsubscribe from the event\n     * @example\n     * ```ts\n     * univerAPI.getSheetHooks().onBeforeCellEdit((params) => {console.log(params)})\n     * ```\n     */\n    onBeforeCellEdit(callback: (params: IEditorBridgeServiceVisibleParam) => void): IDisposable;\n\n    /**\n     * The onAfterCellEdit event is fired after a cell is edited.\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.SheetEditEnded, (params) => {})` instead\n     * @param callback Callback function that will be called when the event is fired\n     * @returns A disposable object that can be used to unsubscribe from the event\n     * @example\n     * ```ts\n     * univerAPI.getSheetHooks().onAfterCellEdit((params) => {console.log(params)})\n     * ```\n     */\n    onAfterCellEdit(callback: (params: IEditorBridgeServiceVisibleParam) => void): IDisposable;\n}\n\nexport class FSheetHooksUIMixin extends FSheetHooks implements IFSheetHooksUIMixin {\n    override onCellPointerMove(callback: (cellPos: Nullable<IHoverCellPosition>) => void): IDisposable {\n        return toDisposable(this._injector.get(HoverManagerService).currentPosition$.subscribe(callback));\n    }\n\n    override onCellPointerOver(callback: (cellPos: Nullable<IHoverCellPosition>) => void): IDisposable {\n        return toDisposable(this._injector.get(HoverManagerService).currentCell$.subscribe(callback));\n    }\n\n    override onCellDragOver(callback: (cellPos: Nullable<IDragCellPosition>) => void): IDisposable {\n        return toDisposable(this._injector.get(DragManagerService).currentCell$.subscribe(callback));\n    }\n\n    override onCellDrop(callback: (cellPos: Nullable<IDragCellPosition>) => void): IDisposable {\n        return toDisposable(this._injector.get(DragManagerService).endCell$.subscribe(callback));\n    }\n\n    override onCellRender(customRender: Nullable<ICellCustomRender[]>, effect: InterceptorEffectEnum = InterceptorEffectEnum.Style, priority: number = InterceptCellContentPriority.DATA_VALIDATION): IDisposable {\n        return this._injector.get(SheetInterceptorService).intercept(INTERCEPTOR_POINT.CELL_CONTENT, {\n            effect,\n            handler: (cell, pos, next) => {\n                return next({\n                    ...cell,\n                    customRender: [\n                        ...(cell?.customRender || []),\n                        ...(customRender || []),\n                    ],\n                });\n            },\n            priority,\n        });\n    }\n\n    override onBeforeCellEdit(callback: (params: IEditorBridgeServiceVisibleParam) => void): IDisposable {\n        return this._injector.get(ICommandService).beforeCommandExecuted((command) => {\n            const params = command.params as IEditorBridgeServiceVisibleParam;\n            if (command.id === SetCellEditVisibleOperation.id && params.visible) {\n                callback(params);\n            }\n        });\n    }\n\n    override onAfterCellEdit(callback: (params: IEditorBridgeServiceVisibleParam) => void): IDisposable {\n        return this._injector.get(ICommandService).onCommandExecuted((command) => {\n            const params = command.params as IEditorBridgeServiceVisibleParam;\n            if (command.id === SetCellEditVisibleOperation.id && !params.visible) {\n                callback(params);\n            }\n        });\n    }\n}\n\nFSheetHooks.extend(FSheetHooksUIMixin);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FSheetHooks extends IFSheetHooksUIMixin { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IRange, RichTextValue } from '@univerjs/core';\nimport type { IEventBase } from '@univerjs/core/facade';\nimport type { DeviceInputEventType, SpreadsheetSkeleton } from '@univerjs/engine-render';\nimport type { CommandListenerSkeletonChange } from '@univerjs/sheets';\nimport type { FRange, FWorkbook, FWorksheet } from '@univerjs/sheets/facade';\nimport type { KeyCode } from '@univerjs/ui';\nimport { FEventName } from '@univerjs/core/facade';\n\n/**\n * Event interface triggered when cell editing starts\n * @interface ISheetEditStartedEventParams\n * @augments {IEventBase}\n */\nexport interface ISheetEditStartedEventParams extends IEventBase {\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** The worksheet being edited */\n    worksheet: FWorksheet;\n    /** Row index of the editing cell */\n    row: number;\n    /** Column index of the editing cell */\n    column: number;\n    /** Type of input device event that triggered the edit */\n    eventType: DeviceInputEventType;\n    /** Optional keycode that triggered the edit */\n    keycode?: KeyCode;\n    /** Whether the edit is happening in zen editor mode */\n    isZenEditor: boolean;\n}\n\n/**\n * Event interface triggered when cell editing ends\n * @interface ISheetEditEndedEventParams\n * @augments {IEventBase}\n */\nexport interface ISheetEditEndedEventParams extends IEventBase {\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** The worksheet being edited */\n    worksheet: FWorksheet;\n    /** Row index of the edited cell */\n    row: number;\n    /** Column index of the edited cell */\n    column: number;\n    /** Type of input device event that triggered the edit end */\n    eventType: DeviceInputEventType;\n    /** Optional keycode that triggered the edit end */\n    keycode?: KeyCode;\n    /** Whether the edit happened in zen editor mode */\n    isZenEditor: boolean;\n    /** Whether the edit was confirmed or cancelled */\n    isConfirm: boolean;\n}\n\n/**\n * Event interface triggered while cell content is being changed\n * @interface ISheetEditChangingEventParams\n * @augments {IEventBase}\n */\nexport interface ISheetEditChangingEventParams extends IEventBase {\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** The worksheet being edited */\n    worksheet: FWorksheet;\n    /** Row index of the editing cell */\n    row: number;\n    /** Column index of the editing cell */\n    column: number;\n    /** Current value being edited */\n    value: RichTextValue;\n    /** Whether the edit is happening in zen editor mode */\n    isZenEditor: boolean;\n}\n\n/**\n * Event interface triggered before cell editing starts\n * @interface IBeforeSheetEditStartEventParams\n * @augments {IEventBase}\n */\nexport interface IBeforeSheetEditStartEventParams extends IEventBase {\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** The worksheet to be edited */\n    worksheet: FWorksheet;\n    /** Row index of the cell to be edited */\n    row: number;\n    /** Column index of the cell to be edited */\n    column: number;\n    /** Type of input device event triggering the edit */\n    eventType: DeviceInputEventType;\n    /** Optional keycode triggering the edit */\n    keycode?: KeyCode;\n    /** Whether the edit will happen in zen editor mode */\n    isZenEditor: boolean;\n}\n\n/**\n * Event interface triggered before cell editing ends\n * @interface IBeforeSheetEditEndEventParams\n * @augments {IEventBase}\n */\nexport interface IBeforeSheetEditEndEventParams extends IEventBase {\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** The worksheet being edited */\n    worksheet: FWorksheet;\n    /** Row index of the editing cell */\n    row: number;\n    /** Column index of the editing cell */\n    column: number;\n    /** Current value being edited */\n    value: RichTextValue;\n    /** Type of input device event triggering the edit end */\n    eventType: DeviceInputEventType;\n    /** Optional keycode triggering the edit end */\n    keycode?: KeyCode;\n    /** Whether the edit is happening in zen editor mode */\n    isZenEditor: boolean;\n    /** Whether the edit will be confirmed or cancelled */\n    isConfirm: boolean;\n}\n\nexport const CellFEventName = {\n    CellClicked: 'CellClicked',\n    CellPointerDown: 'CellPointerDown',\n    CellPointerUp: 'CellPointerUp',\n    CellPointerMove: 'CellPointerMove',\n    CellHover: 'CellHover',\n    DragOver: 'DragOver',\n    Drop: 'Drop',\n    Scroll: 'Scroll',\n    SelectionMoveStart: 'SelectionMoveStart',\n    SelectionMoving: 'SelectionMoving',\n    SelectionMoveEnd: 'SelectionMoveEnd',\n    SelectionChanged: 'SelectionChanged',\n} as const;\n\n/**\n * @ignore\n */\nexport interface IFSheetsUIEventNameMixin {\n    /**\n     * Trigger this event before the clipboard content changes.\n     * Type of the event parameter is {@link IBeforeClipboardChangeParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeClipboardChange, (params) => {\n     *   const { workbook, worksheet, text, html, fromSheet, fromRange } = params;\n     *   console.log(params);\n     *\n     *   // Cancel the clipboard change operation\n     *   params.cancel = true;\n     * })\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeClipboardChange: 'BeforeClipboardChange';\n\n    /**\n     * Trigger this event after the clipboard content changes.\n     * Type of the event parameter is {@link IClipboardChangedParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.ClipboardChanged, (params) => {\n     *   const { workbook, worksheet, text, html, fromSheet, fromRange } = params;\n     *   console.log(params);\n     * })\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly ClipboardChanged: 'ClipboardChanged';\n\n    /**\n     * Trigger this event before pasting.\n     * Type of the event parameter is {@link IBeforeClipboardPasteParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeClipboardPaste, (params) => {\n     *   const { workbook, worksheet, text, html } = params;\n     *   console.log(params);\n     *\n     *   // Cancel the clipboard paste operation\n     *   params.cancel = true;\n     * })\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeClipboardPaste: 'BeforeClipboardPaste';\n\n    /**\n     * Trigger this event after pasting.\n     * Type of the event parameter is {@link IClipboardPastedParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.ClipboardPasted, (params) => {\n     *   const { workbook, worksheet, text, html } = params;\n     *   console.log(params);\n     * })\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly ClipboardPasted: 'ClipboardPasted';\n\n    /**\n     * Event fired before a cell is edited\n     * @see {@link IBeforeSheetEditStartEventParams}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeSheetEditStart, (params) => {\n     *   const { worksheet, workbook, row, column, eventType, keycode, isZenEditor } = params;\n     *   console.log(params);\n     *\n     *   // Cancel the cell edit start operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeSheetEditStart: 'BeforeSheetEditStart';\n\n    /**\n     * Event fired after a cell is edited\n     * @see {@link ISheetEditStartedEventParams}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.SheetEditStarted, (params) => {\n     *   const { worksheet, workbook, row, column, eventType, keycode, isZenEditor } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly SheetEditStarted: 'SheetEditStarted';\n\n    /**\n     * Event fired when a cell is being edited\n     * @see {@link ISheetEditChangingEventParams}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.SheetEditChanging, (params) => {\n     *   const { worksheet, workbook, row, column, value, isZenEditor } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly SheetEditChanging: 'SheetEditChanging';\n\n    /**\n     * Event fired before a cell edit ends\n     * @see {@link IBeforeSheetEditEndEventParams}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeSheetEditEnd, (params) => {\n     *   const { worksheet, workbook, row, column, value, eventType, keycode, isZenEditor, isConfirm } = params;\n     *   console.log(params);\n     *\n     *   // Cancel the cell edit end operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeSheetEditEnd: 'BeforeSheetEditEnd';\n\n    /**\n     * Event fired after a cell edit ends\n     * @see {@link ISheetEditEndedEventParams}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.SheetEditEnded, (params) => {\n     *   const { worksheet, workbook, row, column, eventType, keycode, isZenEditor, isConfirm } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly SheetEditEnded: 'SheetEditEnded';\n\n    /**\n     * Event fired when a cell is clicked\n     * @see {@link ICellEventParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.CellClicked, (params) => {\n     *   const { worksheet, workbook, row, column } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly CellClicked: 'CellClicked';\n\n    /**\n     * Event fired when a cell is pointer down\n     * @see {@link ICellEventParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.CellPointerDown, (params) => {\n     *   const { worksheet, workbook, row, column } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly CellPointerDown: 'CellPointerDown';\n\n    /**\n     * Event fired when a cell is pointer up\n     * @see {@link ICellEventParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.CellPointerUp, (params) => {\n     *   const { worksheet, workbook, row, column } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly CellPointerUp: 'CellPointerUp';\n\n    /**\n     * Event fired when a cell is hovered\n     * @see {@link ICellEventParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.CellHover, (params) => {\n     *   const { worksheet, workbook, row, column } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly CellHover: 'CellHover';\n\n    /**\n     * Event fired when move on spreadsheet cells\n     * @see {@link ICellEventParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.CellPointerMove, (params) => {\n     *   const { worksheet, workbook, row, column } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly CellPointerMove: 'CellPointerMove';\n\n    /**\n     * Triggered when a row header is clicked\n     * @see {@link ISheetRowHeaderEvent}\n     * @example\n     * ```typescript\n     * const disposable = univerAPI.addEvent(univerAPI.Event.RowHeaderClick, (params) => {\n     *   const { worksheet, workbook, row } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly RowHeaderClick: 'RowHeaderClick';\n\n    /**\n     * Triggered when pointer is pressed down on a row header\n     * @see {@link ISheetRowHeaderEvent}\n     * @example\n     * ```typescript\n     * const disposable = univerAPI.addEvent(univerAPI.Event.RowHeaderPointerDown, (params) => {\n     *   const { worksheet, workbook, row } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly RowHeaderPointerDown: 'RowHeaderPointerDown';\n\n    /**\n     * Triggered when pointer is released on a row header\n     * @see {@link ISheetRowHeaderEvent}\n     * @example\n     * ```typescript\n     * const disposable = univerAPI.addEvent(univerAPI.Event.RowHeaderPointerUp, (params) => {\n     *   const { worksheet, workbook, row } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly RowHeaderPointerUp: 'RowHeaderPointerUp';\n\n    /**\n     * Triggered when pointer hovers over a row header\n     * @see {@link ISheetRowHeaderEvent}\n     * @example\n     * ```typescript\n     * const disposable = univerAPI.addEvent(univerAPI.Event.RowHeaderHover, (params) => {\n     *   const { worksheet, workbook, row } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly RowHeaderHover: 'RowHeaderHover';\n\n    /**\n     * Triggered when a column header is clicked\n     * @see {@link ISheetColumnHeaderEvent}\n     * @example\n     * ```typescript\n     * const disposable = univerAPI.addEvent(univerAPI.Event.ColumnHeaderClick, (params) => {\n     *   const { worksheet, workbook, column } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly ColumnHeaderClick: 'ColumnHeaderClick';\n\n    /**\n     * Triggered when pointer is pressed down on a column header\n     * @see {@link ISheetColumnHeaderEvent}\n     * @example\n     * ```typescript\n     * const disposable = univerAPI.addEvent(univerAPI.Event.ColumnHeaderPointerDown, (params) => {\n     *   const { worksheet, workbook, column } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly ColumnHeaderPointerDown: 'ColumnHeaderPointerDown';\n\n    /**\n     * Triggered when pointer is released on a column header\n     * @see {@link ISheetColumnHeaderEvent}\n     * @example\n     * ```typescript\n     * const disposable = univerAPI.addEvent(univerAPI.Event.ColumnHeaderPointerUp, (params) => {\n     *   const { worksheet, workbook, column } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly ColumnHeaderPointerUp: 'ColumnHeaderPointerUp';\n\n    /**\n     * Triggered when pointer hovers over a column header\n     * @see {@link ISheetColumnHeaderEvent}\n     * @example\n     * ```typescript\n     * const disposable = univerAPI.addEvent(univerAPI.Event.ColumnHeaderHover, (params) => {\n     *   const { worksheet, workbook, column } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly ColumnHeaderHover: 'ColumnHeaderHover';\n\n    /**\n     * Event fired when the drag element passes over the spreadsheet cells\n     * @see {@link ICellEventParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.DragOver, (params) => {\n     *   const { worksheet, workbook, row, column } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly DragOver: 'DragOver';\n\n    /**\n     * Event fired when the drag element is dropped on the spreadsheet cells\n     * @see {@link ICellEventParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.Drop, (params) => {\n     *   const { worksheet, workbook, row, column } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly Drop: 'Drop';\n\n    /**\n     * Event fired when scroll spreadsheet.\n     * @see {@link IScrollEventParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.Scroll, (params) => {\n     *   const { worksheet, workbook, scrollX, scrollY } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly Scroll: 'Scroll';\n\n    /**\n     * Event fired when selection changed.\n     * @see {@link ISelectionEventParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.SelectionChanged, (params)=> {\n     *   const { worksheet, workbook, selections } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly SelectionChanged: 'SelectionChanged';\n\n    /**\n     * Event fired when selection move start\n     * @see {@link ISelectionEventParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.SelectionMoveStart, (params)=> {\n     *   const { worksheet, workbook, selections } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly SelectionMoveStart: 'SelectionMoveStart';\n\n    /**\n     * Event fired when selection move end\n     * @see {@link ISelectionEventParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.SelectionMoving, (params)=> {\n     *   const { worksheet, workbook, selections } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly SelectionMoving: 'SelectionMoving';\n\n    /**\n     * Event fired when selection move end\n     * @see {@link ISelectionEventParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.SelectionMoveEnd, (params)=> {\n     *   const { worksheet, workbook, selections } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly SelectionMoveEnd: 'SelectionMoveEnd';\n\n    /**\n     * Event fired when zoom changed\n     * @see {@link ISheetZoomEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.SheetZoomChanged, (params)=> {\n     *   const { worksheet, workbook, zoom } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly SheetZoomChanged: 'SheetZoomChanged';\n\n    /**\n     * Event fired before zoom changed\n     * @see {@link ISheetZoomEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeSheetZoomChange, (params)=> {\n     *   const { worksheet, workbook, zoom } = params;\n     *   console.log(params);\n     *\n     *   // Cancel the zoom change operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeSheetZoomChange: 'BeforeSheetZoomChange';\n\n    /**\n     * Event fired when sheet skeleton changed\n     * @see {@link ISheetSkeletonChangedEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.SheetSkeletonChanged, (params)=> {\n     *   const { worksheet, workbook, skeleton, payload, effectedRanges } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly SheetSkeletonChanged: 'SheetSkeletonChanged';\n}\n\nexport class FSheetsUIEventName implements IFSheetsUIEventNameMixin {\n    get BeforeClipboardChange(): 'BeforeClipboardChange' {\n        return 'BeforeClipboardChange' as const;\n    }\n\n    get ClipboardChanged(): 'ClipboardChanged' {\n        return 'ClipboardChanged' as const;\n    }\n\n    get BeforeClipboardPaste(): 'BeforeClipboardPaste' {\n        return 'BeforeClipboardPaste' as const;\n    }\n\n    get ClipboardPasted(): 'ClipboardPasted' {\n        return 'ClipboardPasted' as const;\n    }\n\n    get BeforeSheetEditStart(): 'BeforeSheetEditStart' {\n        return 'BeforeSheetEditStart';\n    }\n\n    get SheetEditStarted(): 'SheetEditStarted' {\n        return 'SheetEditStarted';\n    }\n\n    get SheetEditChanging(): 'SheetEditChanging' {\n        return 'SheetEditChanging';\n    }\n\n    get BeforeSheetEditEnd(): 'BeforeSheetEditEnd' {\n        return 'BeforeSheetEditEnd';\n    }\n\n    get SheetEditEnded(): 'SheetEditEnded' {\n        return 'SheetEditEnded';\n    }\n\n    get CellClicked(): 'CellClicked' {\n        return CellFEventName.CellClicked;\n    }\n\n    get CellHover(): 'CellHover' {\n        return CellFEventName.CellHover;\n    }\n\n    get CellPointerDown(): 'CellPointerDown' {\n        return CellFEventName.CellPointerDown;\n    }\n\n    get CellPointerUp(): 'CellPointerUp' {\n        return CellFEventName.CellPointerUp;\n    }\n\n    get CellPointerMove(): 'CellPointerMove' {\n        return CellFEventName.CellPointerMove;\n    }\n\n    get DragOver(): 'DragOver' {\n        return 'DragOver' as const;\n    }\n\n    get Drop(): 'Drop' {\n        return 'Drop' as const;\n    }\n\n    get Scroll(): 'Scroll' {\n        return 'Scroll' as const;\n    }\n\n    get SelectionMoveStart(): 'SelectionMoveStart' {\n        return 'SelectionMoveStart' as const;\n    }\n\n    get SelectionChanged(): 'SelectionChanged' {\n        return 'SelectionChanged' as const;\n    }\n\n    get SelectionMoving(): 'SelectionMoving' {\n        return 'SelectionMoving' as const;\n    }\n\n    get SelectionMoveEnd(): 'SelectionMoveEnd' {\n        return 'SelectionMoveEnd' as const;\n    }\n\n    get RowHeaderClick(): 'RowHeaderClick' {\n        return 'RowHeaderClick' as const;\n    }\n\n    get RowHeaderPointerDown(): 'RowHeaderPointerDown' {\n        return 'RowHeaderPointerDown' as const;\n    }\n\n    get RowHeaderPointerUp(): 'RowHeaderPointerUp' {\n        return 'RowHeaderPointerUp' as const;\n    }\n\n    get RowHeaderHover(): 'RowHeaderHover' {\n        return 'RowHeaderHover' as const;\n    }\n\n    get ColumnHeaderClick(): 'ColumnHeaderClick' {\n        return 'ColumnHeaderClick' as const;\n    }\n\n    get ColumnHeaderPointerDown(): 'ColumnHeaderPointerDown' {\n        return 'ColumnHeaderPointerDown' as const;\n    }\n\n    get ColumnHeaderPointerUp(): 'ColumnHeaderPointerUp' {\n        return 'ColumnHeaderPointerUp' as const;\n    }\n\n    get ColumnHeaderHover(): 'ColumnHeaderHover' {\n        return 'ColumnHeaderHover' as const;\n    }\n\n    get SheetSkeletonChanged(): 'SheetSkeletonChanged' {\n        return 'SheetSkeletonChanged' as const;\n    }\n\n    get BeforeSheetZoomChange(): 'BeforeSheetZoomChange' {\n        return 'BeforeSheetZoomChange' as const;\n    }\n\n    get SheetZoomChanged(): 'SheetZoomChanged' {\n        return 'SheetZoomChanged' as const;\n    }\n}\n\n/**\n * @ignore\n */\nexport interface ISheetUIEventBase extends IEventBase {\n    /**\n     * The workbook instance currently being operated on. {@link FWorkbook}\n     */\n    workbook: FWorkbook;\n    /**\n     * The worksheet instance currently being operated on. {@link FWorksheet}\n     */\n    worksheet: FWorksheet;\n}\nexport interface IBeforeClipboardChangeParam extends IEventBase {\n    /**\n     * The workbook instance currently being operated on. {@link FWorkbook}\n     */\n    workbook: FWorkbook;\n    /**\n     * The worksheet instance currently being operated on. {@link FWorksheet}\n     */\n    worksheet: FWorksheet;\n    /**\n     * Clipboard Text String\n     */\n    text: string;\n    /**\n     * Clipboard HTML String\n     */\n    html: string;\n    /**\n     * The sheet containing the content that was (copied/cut)\n     */\n    fromSheet: FWorksheet;\n    /**\n     * The range containing the content that was (copied/cut)\n     */\n    fromRange: FRange;\n}\n\nexport type IClipboardChangedParam = IBeforeClipboardChangeParam;\n\nexport interface IBeforeClipboardPasteParam extends IEventBase {\n    /**\n     * The workbook instance currently being operated on. {@link FWorkbook}\n     */\n    workbook: FWorkbook;\n    /**\n     * The worksheet instance currently being operated on. {@link FWorkbook}\n     */\n    worksheet: FWorksheet;\n    /**\n     * Clipboard Text String\n     */\n    text?: string;\n    /**\n     * Clipboard HTML String\n     */\n    html?: string;\n}\n\nexport type IClipboardPastedParam = IBeforeClipboardPasteParam;\n\nexport interface ISheetZoomEvent extends IEventBase {\n    /**\n     * Zoom ratio\n     */\n    zoom: number;\n    /**\n     * The workbook instance currently being operated on. {@link FWorkbook}\n     */\n    workbook: FWorkbook;\n    /**\n     * The worksheet instance currently being operated on. {@link FWorkbook}\n     */\n    worksheet: FWorksheet;\n}\n\nexport interface ICellEventParam extends ISheetUIEventBase {\n    row: number;\n    column: number;\n}\n\nexport interface IScrollEventParam extends ISheetUIEventBase {\n    scrollX: number;\n    scrollY: number;\n}\n\nexport interface ISelectionEventParam extends ISheetUIEventBase {\n    selections: IRange[];\n}\n\nexport interface ISheetRowHeaderEvent extends ISheetUIEventBase {\n    row: number;\n}\n\nexport interface ISheetColumnHeaderEvent extends ISheetUIEventBase {\n    column: number;\n}\n\nexport interface ISheetSkeletonChangedEvent extends ISheetUIEventBase {\n    skeleton: SpreadsheetSkeleton;\n    payload: CommandListenerSkeletonChange;\n    effectedRanges: FRange[];\n}\n\n/**\n * @ignore\n */\nexport interface IFSheetsUIEventParamConfig {\n    BeforeClipboardChange: IBeforeClipboardChangeParam;\n    ClipboardChanged: IClipboardChangedParam;\n    BeforeClipboardPaste: IBeforeClipboardPasteParam;\n    ClipboardPasted: IClipboardPastedParam;\n    BeforeSheetEditStart: IBeforeSheetEditStartEventParams;\n    SheetEditStarted: ISheetEditStartedEventParams;\n    SheetEditChanging: ISheetEditChangingEventParams;\n    BeforeSheetEditEnd: IBeforeSheetEditEndEventParams;\n    SheetEditEnded: ISheetEditEndedEventParams;\n    CellClicked: ICellEventParam;\n    CellHover: ICellEventParam;\n    CellPointerDown: ICellEventParam;\n    CellPointerUp: ICellEventParam;\n    CellPointerMove: ICellEventParam;\n    Drop: ICellEventParam;\n    DragOver: ICellEventParam;\n    RowHeaderClick: ISheetRowHeaderEvent;\n    RowHeaderDbClick: ISheetRowHeaderEvent;\n    RowHeaderHover: ISheetRowHeaderEvent;\n    RowHeaderPointerDown: ISheetRowHeaderEvent;\n    RowHeaderPointerUp: ISheetRowHeaderEvent;\n    ColumnHeaderClick: ISheetColumnHeaderEvent;\n    ColumnHeaderDbClick: ISheetColumnHeaderEvent;\n    ColumnHeaderHover: ISheetColumnHeaderEvent;\n    ColumnHeaderPointerDown: ISheetColumnHeaderEvent;\n    ColumnHeaderPointerUp: ISheetColumnHeaderEvent;\n    Scroll: IScrollEventParam;\n    SelectionChanging: ISelectionEventParam;\n    SelectionMoveStart: ISelectionEventParam;\n    SelectionMoving: ISelectionEventParam;\n    SelectionMoveEnd: ISelectionEventParam;\n    SelectionChanged: ISelectionEventParam;\n    SheetZoomChanged: ISheetZoomEvent;\n    BeforeSheetZoomChange: ISheetZoomEvent;\n\n    SheetSkeletonChanged: ISheetSkeletonChangedEvent;\n}\n\nFEventName.extend(FSheetsUIEventName);\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FEventName extends IFSheetsUIEventNameMixin { }\n    interface IEventParamConfig extends IFSheetsUIEventParamConfig { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICellWithCoord, IDisposable, ISelectionCell, Nullable } from '@univerjs/core';\nimport type { ISelectionStyle, ISheetLocation } from '@univerjs/sheets';\nimport type { ICanvasPopup, ICellAlert } from '@univerjs/sheets-ui';\nimport type { ComponentType } from '@univerjs/ui';\nimport { DisposableCollection, generateRandomId, ILogService, toDisposable } from '@univerjs/core';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { CellAlertManagerService, IMarkSelectionService, ISheetClipboardService, SheetCanvasPopManagerService, SheetSkeletonManagerService } from '@univerjs/sheets-ui';\nimport { FRange } from '@univerjs/sheets/facade';\nimport { ComponentManager } from '@univerjs/ui';\n\nexport interface IFComponentKey {\n    /**\n     * The key of the component to be rendered in the popup.\n     * if key is a string, it will be query from the component registry.\n     * if key is a React or Vue3 component, it will be rendered directly.\n     */\n    componentKey: string | ComponentType;\n    /**\n     * If componentKey is a Vue3 component, this must be set to true\n     */\n    isVue3?: boolean;\n}\n\nexport interface IFCanvasPopup extends Omit<ICanvasPopup, 'componentKey'>, IFComponentKey { }\n\n/**\n * @ignore\n */\ninterface IFRangeSheetsUIMixin {\n    /**\n     * Return this cell information, including whether it is merged and cell coordinates\n     * @returns {ICellWithCoord} cell location and coordinate.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('H6');\n     * console.log(fRange.getCell());\n     * ```\n     */\n    getCell(this: FRange): ICellWithCoord;\n\n    /**\n     * Returns the coordinates of this cell,does not include units\n     * @returns {DOMRect} coordinates of the cell\uFF0C top, right, bottom, left\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('H6');\n     * console.log(fRange.getCellRect());\n     * ```\n     */\n    getCellRect(this: FRange): DOMRect;\n\n    /**\n     * Generate HTML content for the range.\n     * @returns {string} HTML content of the range.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setValues([\n     *   [1, 2],\n     *   [3, 4]\n     * ]);\n     * console.log(fRange.generateHTML());\n     * ```\n     */\n    generateHTML(this: FRange): string;\n\n    /**\n     * Attach a popup to the start cell of current range.\n     * If current worksheet is not active, the popup will not be shown.\n     * Be careful to manager the detach disposable object, if not dispose correctly, it might memory leaks.\n     * @param {IFCanvasPopup} popup The popup to attach\n     * @returns {Nullable<IDisposable>} The disposable object to detach the popup, if the popup is not attached, return `null`.\n     * @example\n     * ```ts\n     * // Register a custom popup component\n     * univerAPI.registerComponent(\n     *   'myPopup',\n     *   () => React.createElement('div', {\n     *     style: {\n     *       color: 'red',\n     *       fontSize: '14px'\n     *     }\n     *   }, 'Custom Popup')\n     * );\n     *\n     * // Attach the popup to the start cell of range C3:E5\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('C3:E5');\n     * const disposable = fRange.attachPopup({\n     *   componentKey: 'myPopup'\n     * });\n     *\n     * // Detach the popup after 5 seconds\n     * setTimeout(() => {\n     *   disposable.dispose();\n     * }, 5000);\n     * ```\n     */\n    attachPopup(popup: IFCanvasPopup): Nullable<IDisposable>;\n\n    /**\n     * Attach an alert popup to the start cell of current range.\n     * @param {Omit<ICellAlert, 'location'>} alert The alert to attach\n     * @returns {IDisposable} The disposable object to detach the alert.\n     * @example\n     * ```ts\n     * // Attach an alert popup to the start cell of range C3:E5\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('C3:E5');\n     *\n     * const disposable = fRange.attachAlertPopup({\n     *   title: 'Warning',\n     *   message: 'This is an warning message',\n     *   type: 1\n     * });\n     *\n     * // Detach the alert after 5 seconds\n     * setTimeout(() => {\n     *   disposable.dispose();\n     * }, 5000);\n     * ```\n     */\n    attachAlertPopup(alert: Omit<ICellAlert, 'location'>): IDisposable;\n\n    /**\n     * Attach a DOM popup to the current range.\n     * @param {IFCanvasPopup} alert The alert to attach\n     * @returns {Nullable<IDisposable>} The disposable object to detach the alert.\n     * @example\n     * ```ts\n     * // Register a custom popup component\n     * univerAPI.registerComponent(\n     *   'myPopup',\n     *   () => React.createElement('div', {\n     *     style: {\n     *       background: 'red',\n     *       fontSize: '14px'\n     *     }\n     *   }, 'Custom Popup')\n     * );\n     *\n     * // Attach the popup to the range C3:E5\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('C3:E5');\n     * const disposable = fRange.attachRangePopup({\n     *   componentKey: 'myPopup',\n     *   direction: 'top' // 'vertical' | 'horizontal' | 'top' | 'right' | 'left' | 'bottom' | 'bottom-center' | 'top-center'\n     * });\n     * ```\n     */\n    attachRangePopup(popup: IFCanvasPopup): Nullable<IDisposable>;\n\n    /**\n     * Highlight the range with the specified style and primary cell.\n     * @param {Nullable<Partial<ISelectionStyle>>} style - style for highlight range.\n     * @param {Nullable<ISelectionCell>} primary - primary cell for highlight range.\n     * @returns {IDisposable} The disposable object to remove the highlight.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Highlight the range C3:E5 with default style\n     * const fRange = fWorksheet.getRange('C3:E5');\n     * fRange.highlight();\n     *\n     * // Highlight the range C7:E9 with custom style and primary cell D8\n     * const fRange2 = fWorksheet.getRange('C7:E9');\n     * const primaryCell = fWorksheet.getRange('D8').getRange();\n     * const disposable = fRange2.highlight(\n     *   {\n     *     stroke: 'red',\n     *     fill: 'yellow'\n     *   },\n     *   {\n     *     ...primaryCell,\n     *     actualRow: primaryCell.startRow,\n     *     actualColumn: primaryCell.startColumn\n     *   }\n     * );\n     *\n     * // Remove the range C7:E9 highlight after 5 seconds\n     * setTimeout(() => {\n     *   disposable.dispose();\n     * }, 5000);\n     * ```\n     */\n    highlight(style?: Nullable<Partial<ISelectionStyle>>, primary?: Nullable<ISelectionCell>): IDisposable;\n}\n\nclass FRangeSheetsUIMixin extends FRange implements IFRangeSheetsUIMixin {\n    override getCell(): ICellWithCoord {\n        const renderManagerService = this._injector.get(IRenderManagerService);\n        const logService = this._injector.get(ILogService);\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const render = renderManagerService.getRenderById(unitId);\n        const skeleton = render?.with(SheetSkeletonManagerService).getSkeletonParam(subUnitId)?.skeleton;\n        if (!skeleton) {\n            logService.error('[Facade]: `FRange.getCell` can only be called in current worksheet');\n            throw new Error('`FRange.getCell` can only be called in current worksheet');\n        }\n\n        return skeleton.getCellWithCoordByIndex(this._range.startRow, this._range.startColumn);\n    }\n\n    override getCellRect(): DOMRect {\n        const { startX: x, startY: y, endX: x2, endY: y2 } = this.getCell();\n        const data = { x, y, width: x2 - x, height: y2 - y, top: y, left: x, bottom: y2, right: x2 };\n        return { ...data, toJSON: () => JSON.stringify(data) };\n    }\n\n    override generateHTML(): string {\n        const clipboardService = this._injector.get(ISheetClipboardService);\n        const copyContent = clipboardService.generateCopyContent(\n            this._workbook.getUnitId(),\n            this._worksheet.getSheetId(),\n            this._range\n        );\n\n        return copyContent?.html ?? '';\n    }\n\n    override attachPopup(popup: IFCanvasPopup): Nullable<IDisposable> {\n        popup.direction = popup.direction ?? 'horizontal';\n        popup.extraProps = popup.extraProps ?? {};\n        popup.offset = popup.offset ?? [0, 0];\n\n        const { key, disposableCollection } = transformComponentKey(popup, this._injector.get(ComponentManager));\n        const sheetsPopupService = this._injector.get(SheetCanvasPopManagerService);\n        const disposePopup = sheetsPopupService.attachPopupToCell(\n            this._range.startRow,\n            this._range.startColumn,\n            { ...popup, componentKey: key },\n            this.getUnitId(),\n            this._worksheet.getSheetId()\n        );\n        if (disposePopup) {\n            disposableCollection.add(disposePopup);\n            return disposableCollection;\n        }\n\n        disposableCollection.dispose();\n        return null;\n    }\n\n    override attachAlertPopup(alert: Omit<ICellAlert, 'location'>): IDisposable {\n        const cellAlertService = this._injector.get(CellAlertManagerService);\n        const location: ISheetLocation = {\n            workbook: this._workbook,\n            worksheet: this._worksheet,\n            row: this._range.startRow,\n            col: this._range.startColumn,\n            unitId: this.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n        };\n        cellAlertService.showAlert({\n            ...alert,\n            location,\n        });\n\n        return {\n            dispose: (): void => {\n                cellAlertService.removeAlert(alert.key);\n            },\n        };\n    }\n\n    /**\n     * attachDOMPopup\n     * @param popup\n     * @returns {IDisposable} disposable\n        let sheet = univerAPI.getActiveWorkbook().getActiveSheet();\n        let range = sheet.getRange(2, 2, 3, 3);\n        univerAPI.getActiveWorkbook().setActiveRange(range);\n        let disposable = range.attachDOMPopup({\n        componentKey: 'univer.sheet.single-dom-popup',\n        extraProps: { alert: { type: 0, title: 'This is an Info', message: 'This is an info message' } },\n        });\n     */\n    override attachRangePopup(popup: IFCanvasPopup): Nullable<IDisposable> {\n        popup.direction = popup.direction ?? 'top-center';\n        popup.extraProps = popup.extraProps ?? {};\n        popup.offset = popup.offset ?? [0, 0];\n\n        const { key, disposableCollection } = transformComponentKey(popup, this._injector.get(ComponentManager));\n        const sheetsPopupService = this._injector.get(SheetCanvasPopManagerService);\n        const disposePopup = sheetsPopupService.attachRangePopup(\n            this._range,\n            { ...popup, componentKey: key },\n            this.getUnitId(),\n            this._worksheet.getSheetId()\n        );\n        if (disposePopup) {\n            disposableCollection.add(disposePopup);\n            return disposableCollection;\n        }\n\n        disposableCollection.dispose();\n        return null;\n    }\n\n    override highlight(style?: Nullable<Partial<ISelectionStyle>>, primary?: Nullable<ISelectionCell>): IDisposable {\n        const markSelectionService = this._injector.get(IMarkSelectionService);\n        const id = markSelectionService.addShape({ range: this._range, style, primary });\n\n        if (!id) {\n            throw new Error('Failed to highlight current range');\n        }\n        return toDisposable(() => {\n            markSelectionService.removeShape(id);\n        });\n    }\n}\n\nFRange.extend(FRangeSheetsUIMixin);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FRange extends IFRangeSheetsUIMixin { }\n}\n\n/**\n * Transform component key\n * @param {IFComponentKey} component - The component key to transform.\n * @param {ComponentManager} componentManager - The component manager to use for registration.\n * @returns {string} The transformed component key.\n */\nexport function transformComponentKey(component: IFComponentKey, componentManager: ComponentManager): { key: string; disposableCollection: DisposableCollection } {\n    const { componentKey, isVue3 } = component;\n    let key: string;\n    const disposableCollection = new DisposableCollection();\n    if (typeof componentKey === 'string') {\n        key = componentKey;\n    } else {\n        key = `External_${generateRandomId(6)}`;\n        disposableCollection.add(componentManager.register(key, componentKey, { framework: isVue3 ? 'vue3' : 'react' }));\n    }\n\n    return {\n        key,\n        disposableCollection,\n    };\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDataValidationRule, IDataValidationRuleOptions } from '@univerjs/core';\nimport type { FRange } from '@univerjs/sheets/facade';\nimport { DataValidationErrorStyle, DataValidationOperator, DataValidationType, generateRandomId } from '@univerjs/core';\nimport { serializeRangeToRefString } from '@univerjs/engine-formula';\nimport { FDataValidation } from './f-data-validation';\n\n/**\n * Builder for data validation rules. use {@link FUniver} `univerAPI.newDataValidation()` to create a new builder.\n * @example\n * ```typescript\n * // Set the data validation for cell A1 to require a value from B1:B10\n * const fWorkbook = univerAPI.getActiveWorkbook();\n * const fWorksheet = fWorkbook.getActiveSheet();\n * const fRange = fWorksheet.getRange('B1:B2');\n * fRange.setValues([\n *   ['Yes'],\n *   ['No']\n * ]);\n *\n * const rule = univerAPI.newDataValidation()\n *   .requireValueInRange(fRange)\n *   .setOptions({\n *     allowBlank: false,\n *     showErrorMessage: true,\n *     error: 'Please enter a value from the list'\n *   })\n *   .build();\n * const cell = fWorksheet.getRange('A1');\n * cell.setDataValidation(rule);\n * ```\n * @hideconstructor\n */\nexport class FDataValidationBuilder {\n    private _rule: IDataValidationRule;\n\n    constructor(rule?: IDataValidationRule) {\n        this._rule = rule ?? {\n            uid: generateRandomId(),\n            ranges: undefined,\n            type: DataValidationType.CUSTOM,\n        };\n    }\n\n    /**\n     * Builds an FDataValidation instance based on the _rule property of the current class\n     * @returns {FDataValidation} A new instance of the FDataValidation class\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new data validation rule that requires a number between 1 and 10 for the range A1:B10\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireNumberBetween(1, 10)\n     *   .setOptions({\n     *     allowBlank: true,\n     *     showErrorMessage: true,\n     *     error: 'Please enter a number between 1 and 10'\n     *   })\n     *   .build();\n     * fRange.setDataValidation(rule);\n     * ```\n     */\n    build(): FDataValidation {\n        return new FDataValidation(this._rule);\n    }\n\n    /**\n     * Creates a duplicate of the current DataValidationBuilder object\n     * @returns {FDataValidationBuilder} A new instance of the DataValidationBuilder class\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new data validation rule that requires a number between 1 and 10 for the range A1:B10\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const builder = univerAPI.newDataValidation()\n     *   .requireNumberBetween(1, 10)\n     *   .setOptions({\n     *     allowBlank: true,\n     *     showErrorMessage: true,\n     *     error: 'Please enter a number between 1 and 10'\n     *   });\n     * fRange.setDataValidation(builder.build());\n     *\n     * // Copy the builder applied to the new range F1:G10\n     * const newRange = fWorksheet.getRange('F1:G10');\n     * const copyBuilder = builder.copy();\n     * newRange.setDataValidation(copyBuilder.build());\n     * ```\n     */\n    copy(): FDataValidationBuilder {\n        return new FDataValidationBuilder({\n            ...this._rule,\n            uid: generateRandomId(),\n        });\n    }\n\n    /**\n     * Determines whether invalid data is allowed\n     * @returns {boolean} True if invalid data is allowed, False otherwise\n     * @example\n     * ```typescript\n     * const builder = univerAPI.newDataValidation().requireNumberBetween(1, 10);\n     * console.log(builder.getAllowInvalid());\n     * ```\n     */\n    getAllowInvalid(): boolean {\n        return this._rule.errorStyle !== DataValidationErrorStyle.STOP;\n    }\n\n    /**\n     * Gets the data validation type of the rule\n     * @returns {DataValidationType | string} The data validation type\n     * @example\n     * ```typescript\n     * const builder = univerAPI.newDataValidation();\n     * console.log(builder.getCriteriaType()); // custom\n     *\n     * builder.requireNumberBetween(1, 10);\n     * console.log(builder.getCriteriaType()); // decimal\n     *\n     * builder.requireValueInList(['Yes', 'No']);\n     * console.log(builder.getCriteriaType()); // list\n     * ```\n     */\n    getCriteriaType(): DataValidationType | string {\n        return this._rule.type;\n    }\n\n    /**\n     * Gets the values used for criteria evaluation\n     * @returns {[string | undefined, string | undefined, string | undefined]} An array containing the operator, formula1, and formula2 values\n     * @example\n     * ```typescript\n     * const builder = univerAPI.newDataValidation().requireNumberBetween(1, 10);\n     * const [operator, formula1, formula2] = builder.getCriteriaValues();\n     * console.log(operator, formula1, formula2); // between 1 10\n     *\n     * builder.requireValueInList(['Yes', 'No']);\n     * console.log(builder.getCriteriaValues()); // undefined Yes,No undefined\n     * ```\n     */\n    getCriteriaValues(): [string | undefined, string | undefined, string | undefined] {\n        return [this._rule.operator, this._rule.formula1, this._rule.formula2];\n    }\n\n    /**\n     * Gets the help text information, which is used to provide users with guidance and support\n     * @returns {string | undefined} Returns the help text information. If there is no error message, it returns an undefined value\n     * @example\n     * ```typescript\n     * const builder = univerAPI.newDataValidation().setOptions({\n     *   showErrorMessage: true,\n     *   error: 'Please enter a valid value'\n     * });\n     * console.log(builder.getHelpText()); // 'Please enter a valid value'\n     * ```\n     */\n    getHelpText(): string | undefined {\n        return this._rule.error;\n    }\n\n    /**\n     * Sets the data validation rule to require that the input is a boolean value; this value is rendered as a checkbox.\n     * @param {string} [checkedValue] - The value assigned to a checked box.\n     * @param {string} [uncheckedValue] - The value assigned to an unchecked box.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set the data validation for cell A1:A10 to require a checkbox with default 1 and 0 values\n     * const fRange = fWorksheet.getRange('A1:A10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireCheckbox()\n     *   .build();\n     * fRange.setDataValidation(rule);\n     *\n     * // Set the data validation for cell B1:B10 to require a checkbox with 'Yes' and 'No' values\n     * const fRange2 = fWorksheet.getRange('B1:B10');\n     * const rule2 = univerAPI.newDataValidation()\n     *   .requireCheckbox('Yes', 'No')\n     *   .build();\n     * fRange2.setDataValidation(rule2);\n     * ```\n     */\n    requireCheckbox(checkedValue?: string, uncheckedValue?: string): FDataValidationBuilder {\n        this._rule.type = DataValidationType.CHECKBOX;\n        this._rule.formula1 = checkedValue;\n        this._rule.formula2 = uncheckedValue;\n\n        return this;\n    }\n\n    /**\n     * Set the data validation type to DATE and configure the validation rules to be after a specific date.\n     * @param {Date} date - The latest unacceptable date.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set some date values in the range A1:B2\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setValues([\n     *   ['2024-01-01', '2024-12-31'],\n     *   ['2025-01-01', '2025-12-31']\n     * ]);\n     *\n     * // Create a data validation rule that requires a date after 2025-01-01\n     * const rule = univerAPI.newDataValidation()\n     *   .requireDateAfter(new Date('2025-01-01'))\n     *   .build();\n     * fRange.setDataValidation(rule);\n     *\n     * // Get the validation status of the range\n     * const status = await fRange.getValidatorStatus();\n     * console.log(status); // [['invalid', 'invalid', 'invalid', 'valid']]\n     * ```\n     */\n    requireDateAfter(date: Date): FDataValidationBuilder {\n        this._rule.type = DataValidationType.DATE;\n        this._rule.formula1 = date.toLocaleDateString();\n        this._rule.operator = DataValidationOperator.GREATER_THAN;\n\n        return this;\n    }\n\n    /**\n     * Set the data validation type to DATE and configure the validation rules to be before a specific date.\n     * @param {Date} date - The earliest unacceptable date.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set some date values in the range A1:B2\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setValues([\n     *   ['2024-01-01', '2024-12-31'],\n     *   ['2025-01-01', '2025-12-31']\n     * ]);\n     *\n     * // Create a data validation rule that requires a date before 2025-01-01\n     * const rule = univerAPI.newDataValidation()\n     *   .requireDateBefore(new Date('2025-01-01'))\n     *   .build();\n     * fRange.setDataValidation(rule);\n     *\n     * // Get the validation status of the range\n     * const status = await fRange.getValidatorStatus();\n     * console.log(status); // [['valid', 'valid', 'invalid', 'invalid']]\n     * ```\n     */\n    requireDateBefore(date: Date): FDataValidationBuilder {\n        this._rule.type = DataValidationType.DATE;\n        this._rule.formula1 = date.toLocaleDateString();\n        this._rule.formula2 = undefined;\n        this._rule.operator = DataValidationOperator.LESS_THAN;\n\n        return this;\n    }\n\n    /**\n     * Set the data validation type to DATE and configure the validation rules to be within a specific date range.\n     * @param {Date} start - The earliest acceptable date.\n     * @param {Date} end - The latest acceptable date.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set some date values in the range A1:B2\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setValues([\n     *   ['2024-01-01', '2024-12-31'],\n     *   ['2025-01-01', '2025-12-31']\n     * ]);\n     *\n     * // Create a data validation rule that requires a date between 2024-06-01 and 2025-06-01\n     * const rule = univerAPI.newDataValidation()\n     *   .requireDateBetween(new Date('2024-06-01'), new Date('2025-06-01'))\n     *   .build();\n     * fRange.setDataValidation(rule);\n     *\n     * // Get the validation status of the range\n     * const status = await fRange.getValidatorStatus();\n     * console.log(status); // [['invalid', 'valid', 'valid', 'invalid']]\n     * ```\n     */\n    requireDateBetween(start: Date, end: Date): FDataValidationBuilder {\n        this._rule.type = DataValidationType.DATE;\n        this._rule.formula1 = start.toLocaleDateString();\n        this._rule.formula2 = end.toLocaleDateString();\n        this._rule.operator = DataValidationOperator.BETWEEN;\n\n        return this;\n    }\n\n    /**\n     * Set the data validation type to DATE and configure the validation rules to be equal to a specific date.\n     * @param {Date} date - The sole acceptable date.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set some date values in the range A1:B2\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setValues([\n     *   ['2024-01-01', '2024-12-31'],\n     *   ['2025-01-01', '2025-12-31']\n     * ]);\n     *\n     * // Create a data validation rule that requires a date equal to 2025-01-01\n     * const rule = univerAPI.newDataValidation()\n     *   .requireDateEqualTo(new Date('2025-01-01'))\n     *   .build();\n     * fRange.setDataValidation(rule);\n     *\n     * // Get the validation status of the cell A2\n     * const status = await fWorksheet.getRange('A2').getValidatorStatus();\n     * console.log(status?.[0]?.[0]); // 'valid'\n     *\n     * // Get the validation status of the cell B2\n     * const status2 = await fWorksheet.getRange('B2').getValidatorStatus();\n     * console.log(status2?.[0]?.[0]); // 'invalid'\n     * ```\n     */\n    requireDateEqualTo(date: Date): FDataValidationBuilder {\n        this._rule.type = DataValidationType.DATE;\n        this._rule.formula1 = date.toLocaleDateString();\n        this._rule.formula2 = undefined;\n        this._rule.operator = DataValidationOperator.EQUAL;\n\n        return this;\n    }\n\n    /**\n     * Set the data validation type to DATE and configure the validation rules to be not within a specific date range.\n     * @param {Date} start - The earliest unacceptable date.\n     * @param {Date} end - The latest unacceptable date.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set some date values in the range A1:B2\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setValues([\n     *   ['2024-01-01', '2024-12-31'],\n     *   ['2025-01-01', '2025-12-31']\n     * ]);\n     *\n     * // Create a data validation rule that requires a date not between 2024-06-01 and 2025-06-01\n     * const rule = univerAPI.newDataValidation()\n     *   .requireDateNotBetween(new Date('2024-06-01'), new Date('2025-06-01'))\n     *   .build();\n     * fRange.setDataValidation(rule);\n     *\n     * // Get the validation status of the range\n     * const status = await fRange.getValidatorStatus();\n     * console.log(status); // [['valid', 'invalid', 'invalid', 'valid']]\n     * ```\n     */\n    requireDateNotBetween(start: Date, end: Date): FDataValidationBuilder {\n        this._rule.type = DataValidationType.DATE;\n        this._rule.formula1 = start.toLocaleDateString();\n        this._rule.formula2 = end.toLocaleDateString();\n        this._rule.operator = DataValidationOperator.NOT_BETWEEN;\n\n        return this;\n    }\n\n    /**\n     * Set the data validation type to DATE and configure the validation rules to be on or after a specific date.\n     * @param {Date} date - The earliest acceptable date.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set some date values in the range A1:B2\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setValues([\n     *   ['2024-01-01', '2024-12-31'],\n     *   ['2025-01-01', '2025-12-31']\n     * ]);\n     *\n     * // Create a data validation rule that requires a date on or after 2025-01-01\n     * const rule = univerAPI.newDataValidation()\n     *   .requireDateOnOrAfter(new Date('2025-01-01'))\n     *   .build();\n     * fRange.setDataValidation(rule);\n     *\n     * // Get the validation status of the range\n     * const status = await fRange.getValidatorStatus();\n     * console.log(status); // [['invalid', 'invalid', 'valid', 'valid']]\n     * ```\n     */\n    requireDateOnOrAfter(date: Date): FDataValidationBuilder {\n        this._rule.type = DataValidationType.DATE;\n        this._rule.formula1 = date.toLocaleDateString();\n        this._rule.formula2 = undefined;\n        this._rule.operator = DataValidationOperator.GREATER_THAN_OR_EQUAL;\n\n        return this;\n    }\n\n    /**\n     * Set the data validation type to DATE and configure the validation rules to be on or before a specific date.\n     * @param {Date} date - The latest acceptable date.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set some date values in the range A1:B2\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setValues([\n     *   ['2024-01-01', '2024-12-31'],\n     *   ['2025-01-01', '2025-12-31']\n     * ]);\n     *\n     * // Create a data validation rule that requires a date on or before 2025-01-01\n     * const rule = univerAPI.newDataValidation()\n     *   .requireDateOnOrBefore(new Date('2025-01-01'))\n     *   .build();\n     * fRange.setDataValidation(rule);\n     *\n     * // Get the validation status of the range\n     * const status = await fRange.getValidatorStatus();\n     * console.log(status); // [['valid', 'valid', 'valid', 'invalid']]\n     * ```\n     */\n    requireDateOnOrBefore(date: Date): FDataValidationBuilder {\n        this._rule.type = DataValidationType.DATE;\n        this._rule.formula1 = date.toLocaleDateString();\n        this._rule.formula2 = undefined;\n        this._rule.operator = DataValidationOperator.LESS_THAN_OR_EQUAL;\n\n        return this;\n    }\n\n    /**\n     * Sets the data validation rule to require that the given formula evaluates to `true`.\n     * @param {string} formula - The formula string that needs to be satisfied, formula result should be TRUE or FALSE, and references range will relative offset.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set some values in the range A1:B2 and C1:D2\n     * const cell = fWorksheet.getRange('A1:B2');\n     * cell.setValues([\n     *   [4, 3],\n     *   [2, 1]\n     * ]);\n     * const fRange = fWorksheet.getRange('C1:D2');\n     * fRange.setValues([\n     *   [1, 2],\n     *   [3, 4]\n     * ]);\n     *\n     * // Create a data validation rule that requires the formula '=A1>2' to be satisfied\n     * const rule = univerAPI.newDataValidation()\n     *   .requireFormulaSatisfied('=A1>2')\n     *   .setOptions({\n     *     showErrorMessage: true,\n     *     error: 'Please enter a value equal to A1'\n     *   })\n     *   .build();\n     * fRange.setDataValidation(rule);\n     *\n     * // Get the validation status of the range\n     * const status = await fRange.getValidatorStatus();\n     * console.log(status); // [['valid', 'valid', 'invalid', 'invalid']]\n     * ```\n     */\n    requireFormulaSatisfied(formula: string): FDataValidationBuilder {\n        this._rule.type = DataValidationType.CUSTOM;\n        this._rule.formula1 = formula;\n        this._rule.formula2 = undefined;\n        return this;\n    }\n\n    /**\n     * Sets the data validation rule to require a number that falls between, or is either of, two specified numbers.\n     * @param {number} start - The lowest acceptable value.\n     * @param {number} end - The highest acceptable value.\n     * @param {boolean} [isInteger] - Indicates whether the required number is an integer.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new data validation rule that requires a number between 1 and 10 for the range A1:B10\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireNumberBetween(1, 10)\n     *   .setOptions({\n     *     allowBlank: false,\n     *     showErrorMessage: true,\n     *     error: 'Please enter a number between 1 and 10'\n     *   })\n     *   .build();\n     * fRange.setDataValidation(rule);\n     * ```\n     */\n    requireNumberBetween(start: number, end: number, isInteger?: boolean): FDataValidationBuilder {\n        this._rule.formula1 = `${start}`;\n        this._rule.formula2 = `${end}`;\n        this._rule.operator = DataValidationOperator.BETWEEN;\n        this._rule.type = isInteger ? DataValidationType.WHOLE : DataValidationType.DECIMAL;\n\n        return this;\n    }\n\n    /**\n     * Sets the data validation rule to require a number equal to the given value.\n     * @param {number} num - The sole acceptable value.\n     * @param {boolean} [isInteger] - Indicates whether the required number is an integer.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new data validation rule that requires a number equal to 10 for the range A1:B10\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireNumberEqualTo(10)\n     *   .setOptions({\n     *     allowBlank: false,\n     *     showErrorMessage: true,\n     *     error: 'Please enter a number equal to 10'\n     *   })\n     *   .build();\n     * fRange.setDataValidation(rule);\n     * ```\n     */\n    requireNumberEqualTo(num: number, isInteger?: boolean): FDataValidationBuilder {\n        this._rule.formula1 = `${num}`;\n        this._rule.formula2 = undefined;\n        this._rule.operator = DataValidationOperator.EQUAL;\n        this._rule.type = isInteger ? DataValidationType.WHOLE : DataValidationType.DECIMAL;\n        return this;\n    }\n\n    /**\n     * Sets the data validation rule to require a number greater than the given value.\n     * @param {number} num - The highest unacceptable value.\n     * @param {boolean} [isInteger] - Indicates whether the required number is an integer.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new data validation rule that requires a number greater than 10 for the range A1:B10\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireNumberGreaterThan(10)\n     *   .setOptions({\n     *     allowBlank: false,\n     *     showErrorMessage: true,\n     *     error: 'Please enter a number greater than 10'\n     *   })\n     *   .build();\n     * fRange.setDataValidation(rule);\n     * ```\n     */\n    requireNumberGreaterThan(num: number, isInteger?: boolean): FDataValidationBuilder {\n        this._rule.formula1 = `${num}`;\n        this._rule.formula2 = undefined;\n        this._rule.operator = DataValidationOperator.GREATER_THAN;\n        this._rule.type = isInteger ? DataValidationType.WHOLE : DataValidationType.DECIMAL;\n        return this;\n    }\n\n    /**\n     * Sets the data validation rule to require a number greater than or equal to the given value.\n     * @param {number} num - The lowest acceptable value.\n     * @param {boolean} [isInteger] - Indicates whether the required number is an integer.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new data validation rule that requires a number greater than 10 or equal to 10 for the range A1:B10\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireNumberGreaterThanOrEqualTo(10)\n     *   .setOptions({\n     *     allowBlank: false,\n     *     showErrorMessage: true,\n     *     error: 'Please enter a number greater than 10 or equal to 10'\n     *   })\n     *   .build();\n     * fRange.setDataValidation(rule);\n     * ```\n     */\n    requireNumberGreaterThanOrEqualTo(num: number, isInteger?: boolean): FDataValidationBuilder {\n        this._rule.formula1 = `${num}`;\n        this._rule.formula2 = undefined;\n        this._rule.operator = DataValidationOperator.GREATER_THAN_OR_EQUAL;\n        this._rule.type = isInteger ? DataValidationType.WHOLE : DataValidationType.DECIMAL;\n        return this;\n    }\n\n    /**\n     * Sets the data validation rule to require a number less than the given value.\n     * @param {number} num - The lowest unacceptable value.\n     * @param {boolean} [isInteger] - Indicates whether the required number is an integer.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new data validation rule that requires a number less than 10 for the range A1:B10\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireNumberLessThan(10)\n     *   .setOptions({\n     *     allowBlank: false,\n     *     showErrorMessage: true,\n     *     error: 'Please enter a number less than 10'\n     *   })\n     *   .build();\n     * fRange.setDataValidation(rule);\n     * ```\n     */\n    requireNumberLessThan(num: number, isInteger?: boolean): FDataValidationBuilder {\n        this._rule.formula1 = `${num}`;\n        this._rule.formula2 = undefined;\n        this._rule.operator = DataValidationOperator.LESS_THAN;\n        this._rule.type = isInteger ? DataValidationType.WHOLE : DataValidationType.DECIMAL;\n        return this;\n    }\n\n    /**\n     * Sets the data validation rule to require a number less than or equal to the given value.\n     * @param {number} num - The highest acceptable value.\n     * @param {boolean} [isInteger] - Indicates whether the required number is an integer.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new data validation rule that requires a number less than 10 or equal to 10 for the range A1:B10\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireNumberLessThanOrEqualTo(10)\n     *   .setOptions({\n     *     allowBlank: false,\n     *     showErrorMessage: true,\n     *     error: 'Please enter a number less than 10 or equal to 10'\n     *   })\n     *   .build();\n     * fRange.setDataValidation(rule);\n     * ```\n     */\n    requireNumberLessThanOrEqualTo(num: number, isInteger?: boolean): FDataValidationBuilder {\n        this._rule.formula1 = `${num}`;\n        this._rule.formula2 = undefined;\n        this._rule.operator = DataValidationOperator.LESS_THAN_OR_EQUAL;\n        this._rule.type = isInteger ? DataValidationType.WHOLE : DataValidationType.DECIMAL;\n        return this;\n    }\n\n    /**\n     * Sets the data validation rule to require a number that does not fall between, and is neither of, two specified numbers.\n     * @param {number} start - The lowest unacceptable value.\n     * @param {number} end - The highest unacceptable value.\n     * @param {boolean} [isInteger] - Optional parameter, indicating whether the number to be verified is an integer.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new data validation rule that requires a number not between 1 and 10 for the range A1:B10\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireNumberNotBetween(1, 10)\n     *   .setOptions({\n     *     allowBlank: false,\n     *     showErrorMessage: true,\n     *     error: 'Please enter a number not between 1 and 10'\n     *   })\n     *   .build();\n     * fRange.setDataValidation(rule);\n     * ```\n     */\n    requireNumberNotBetween(start: number, end: number, isInteger?: boolean): FDataValidationBuilder {\n        this._rule.formula1 = `${start}`;\n        this._rule.formula2 = `${end}`;\n        this._rule.operator = DataValidationOperator.NOT_BETWEEN;\n        this._rule.type = isInteger ? DataValidationType.WHOLE : DataValidationType.DECIMAL;\n\n        return this;\n    }\n\n    /**\n     * Sets the data validation rule to require a number not equal to the given value.\n     * @param {number} num - The sole unacceptable value.\n     * @param {boolean} [isInteger] - Indicates whether the required number is an integer.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new data validation rule that requires a number not equal to 10 for the range A1:B10\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireNumberNotEqualTo(10)\n     *   .setOptions({\n     *     allowBlank: false,\n     *     showErrorMessage: true,\n     *     error: 'Please enter a number not equal to 10'\n     *   })\n     *   .build();\n     * fRange.setDataValidation(rule);\n     * ```\n     */\n    requireNumberNotEqualTo(num: number, isInteger?: boolean): FDataValidationBuilder {\n        this._rule.formula1 = `${num}`;\n        this._rule.formula2 = undefined;\n        this._rule.operator = DataValidationOperator.NOT_EQUAL;\n        this._rule.type = isInteger ? DataValidationType.WHOLE : DataValidationType.DECIMAL;\n        return this;\n    }\n\n    /**\n     * Sets a data validation rule that requires the user to enter a value from a list of specific values.\n     * The list can be displayed in a dropdown, and the user can choose multiple values according to the settings.\n     * @param {string[]} values - An array of acceptable values.\n     * @param {boolean} [multiple] - Optional parameter indicating whether the user can select multiple values.\n     * @param {boolean} [showDropdown] - Optional parameter indicating whether to display the list in a dropdown.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new data validation rule that requires the user to enter a value from the list ['Yes', 'No'] for the range A1:B10\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireValueInList(['Yes', 'No'])\n     *   .setOptions({\n     *     allowBlank: true,\n     *     showErrorMessage: true,\n     *     error: 'Please enter a value from the list'\n     *   })\n     *   .build();\n     * fRange.setDataValidation(rule);\n     * ```\n     */\n    requireValueInList(values: string[], multiple?: boolean, showDropdown?: boolean): FDataValidationBuilder {\n        this._rule.type = multiple ? DataValidationType.LIST_MULTIPLE : DataValidationType.LIST;\n        this._rule.formula1 = values.join(',');\n        this._rule.formula2 = undefined;\n        this._rule.showDropDown = showDropdown ?? true;\n\n        return this;\n    }\n\n    /**\n     * Sets a data validation rule that requires the user to enter a value within a specific range.\n     * The range is defined by an FRange object, which contains the unit ID, sheet name, and cell range.\n     * @param {FRange} range - An FRange object representing the range of values that the user can enter.\n     * @param {boolean} [multiple] - Optional parameter indicating whether the user can select multiple values.\n     * @param {boolean} [showDropdown] - Optional parameter indicating whether to display the list in a dropdown.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set the values in the range B1:B2\n     * const fRange = fWorksheet.getRange('B1:B2');\n     * fRange.setValues([\n     *   ['Yes'],\n     *   ['No']\n     * ]);\n     *\n     * // Create a new data validation rule that requires the user to enter a value from the range B1:B2 for the range A1:A10\n     * const rule = univerAPI.newDataValidation()\n     *   .requireValueInRange(fRange)\n     *   .setOptions({\n     *     allowBlank: false,\n     *     showErrorMessage: true,\n     *     error: 'Please enter a value from the list'\n     *   })\n     *   .build();\n     * const cell = fWorksheet.getRange('A1');\n     * cell.setDataValidation(rule);\n     * ```\n     */\n    requireValueInRange(range: FRange, multiple?: boolean, showDropdown?: boolean): FDataValidationBuilder {\n        this._rule.type = multiple ? DataValidationType.LIST_MULTIPLE : DataValidationType.LIST;\n        this._rule.formula1 = `=${serializeRangeToRefString({\n            unitId: range.getUnitId(),\n            sheetName: range.getSheetName(),\n            range: range.getRange(),\n        })}`;\n        this._rule.formula2 = undefined;\n        this._rule.showDropDown = showDropdown ?? true;\n\n        return this;\n    }\n\n    /**\n     * Sets whether to allow invalid data and configures the error style.\n     * If invalid data is not allowed, the error style will be set to STOP, indicating that data entry must stop upon encountering an error.\n     * If invalid data is allowed, the error style will be set to WARNING, indicating that a warning will be displayed when invalid data is entered, but data entry can continue.\n     * @param {boolean} allowInvalidData - Whether to allow invalid data.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set the data validation for cell A1:B2 to allow invalid data, so A1:B2 will display a warning when invalid data is entered\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireValueInList(['Yes', 'No'])\n     *   .setAllowInvalid(true)\n     *   .build();\n     * fRange.setDataValidation(rule);\n     *\n     * // Set the data validation for cell C1:D2 to not allow invalid data, so C1:D2 will stop data entry when invalid data is entered\n     * const fRange2 = fWorksheet.getRange('C1:D2');\n     * const rule2 = univerAPI.newDataValidation()\n     *   .requireValueInList(['Yes', 'No'])\n     *   .setAllowInvalid(false)\n     *   .build();\n     * fRange2.setDataValidation(rule2);\n     * ```\n     */\n    setAllowInvalid(allowInvalidData: boolean): FDataValidationBuilder {\n        this._rule.errorStyle = !allowInvalidData ? DataValidationErrorStyle.STOP : DataValidationErrorStyle.WARNING;\n        return this;\n    }\n\n    /**\n     * Sets whether to allow blank values.\n     * @param {boolean} allowBlank - Whether to allow blank values.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * // Assume current sheet is empty data\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set the data validation for cell A1:B2 to allow blank values\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireValueInList(['Yes', 'No'])\n     *   .setAllowBlank(true)\n     *   .build();\n     * fRange.setDataValidation(rule);\n     *\n     * // Set the data validation for cell C1:D2 to not allow blank values\n     * const fRange2 = fWorksheet.getRange('C1:D2');\n     * const rule2 = univerAPI.newDataValidation()\n     *   .requireValueInList(['Yes', 'No'])\n     *   .setAllowBlank(false)\n     *   .build();\n     * fRange2.setDataValidation(rule2);\n     * ```\n     */\n    setAllowBlank(allowBlank: boolean): FDataValidationBuilder {\n        this._rule.allowBlank = allowBlank;\n        return this;\n    }\n\n    /**\n     * Sets the options for the data validation rule.\n     * @param {Partial<IDataValidationRuleOptions>} options - The options to set for the data validation rule.\n     * @returns {FDataValidationBuilder} The current instance for method chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new data validation rule that requires the user to enter a value from the list ['Yes', 'No'] for the range A1:B10\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireValueInList(['Yes', 'No'])\n     *   .setOptions({\n     *     allowBlank: true,\n     *     showErrorMessage: true,\n     *     error: 'Please enter a value from the list'\n     *   })\n     *   .build();\n     * fRange.setDataValidation(rule);\n     * ```\n     */\n    setOptions(options: Partial<IDataValidationRuleOptions>): this {\n        Object.assign(this._rule, options);\n        return this;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DataValidationOperator, DataValidationType, IDataValidationRule, IDataValidationRuleOptions, Injector, IRange, Workbook, Worksheet } from '@univerjs/core';\nimport type { IRemoveSheetDataValidationCommandParams, IUpdateSheetDataValidationOptionsCommandParams, IUpdateSheetDataValidationRangeCommandParams, IUpdateSheetDataValidationSettingCommandParams } from '@univerjs/sheets-data-validation';\nimport { DataValidationErrorStyle, ICommandService, IUniverInstanceService } from '@univerjs/core';\nimport { DataValidationModel, getRuleOptions } from '@univerjs/data-validation';\nimport { RemoveSheetDataValidationCommand, UpdateSheetDataValidationOptionsCommand, UpdateSheetDataValidationRangeCommand, UpdateSheetDataValidationSettingCommand } from '@univerjs/sheets-data-validation';\nimport { FRange } from '@univerjs/sheets/facade';\nimport { FDataValidationBuilder } from './f-data-validation-builder';\n\n/**\n * @hideconstructor\n */\nexport class FDataValidation {\n    rule: IDataValidationRule;\n    private _worksheet: Worksheet | undefined;\n    private _injector: Injector | undefined;\n\n    constructor(rule: IDataValidationRule, worksheet?: Worksheet, _injector?: Injector) {\n        this._injector = _injector;\n        this.rule = rule;\n        this._worksheet = worksheet;\n    }\n\n    /**\n     * Gets whether invalid data is allowed based on the error style value\n     * @returns {boolean} true if invalid data is allowed, false otherwise\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const rules = fWorksheet.getDataValidations();\n     * rules.forEach((rule) => {\n     *   console.log(rule, rule.getAllowInvalid());\n     * });\n     * ```\n     */\n    getAllowInvalid(): boolean {\n        return this.rule.errorStyle !== DataValidationErrorStyle.STOP;\n    };\n\n    /**\n     * Gets the data validation type of the rule\n     * @returns {DataValidationType | string} The data validation type\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const rules = fWorksheet.getDataValidations();\n     * rules.forEach((rule) => {\n     *   console.log(rule, rule.getCriteriaType());\n     * });\n     * ```\n     */\n    getCriteriaType(): DataValidationType | string {\n        return this.rule.type;\n    };\n\n    /**\n     * Gets the values used for criteria evaluation\n     * @returns {[string | undefined, string | undefined, string | undefined]} An array containing the operator, formula1, and formula2 values\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const rules = fWorksheet.getDataValidations();\n     * rules.forEach((rule) => {\n     *   console.log(rule);\n     *   const criteriaValues = rule.getCriteriaValues();\n     *   const [operator, formula1, formula2] = criteriaValues;\n     *   console.log(operator, formula1, formula2);\n     * });\n     * ```\n     */\n    getCriteriaValues(): [string | undefined, string | undefined, string | undefined] {\n        return [this.rule.operator, this.rule.formula1, this.rule.formula2];\n    }\n\n    /**\n     * Gets the help text information, which is used to provide users with guidance and support\n     * @returns {string | undefined} Returns the help text information. If there is no error message, it returns an undefined value\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireNumberBetween(1, 10)\n     *   .setOptions({\n     *     allowBlank: true,\n     *     showErrorMessage: true,\n     *     error: 'Please enter a number between 1 and 10'\n     *   })\n     *   .build();\n     * fRange.setDataValidation(rule);\n     * console.log(fRange.getDataValidation().getHelpText()); // 'Please enter a number between 1 and 10'\n     * ```\n     */\n    getHelpText(): string | undefined {\n        return this.rule.error;\n    };\n\n    /**\n     * Creates a new instance of FDataValidationBuilder using the current rule object\n     * @returns {FDataValidationBuilder} A new FDataValidationBuilder instance with the same rule configuration\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireNumberBetween(1, 10)\n     *   .setOptions({\n     *     allowBlank: true,\n     *     showErrorMessage: true,\n     *     error: 'Please enter a number between 1 and 10'\n     *   })\n     *   .build();\n     * fRange.setDataValidation(rule);\n     *\n     * const builder = fRange.getDataValidation().copy();\n     * const newRule = builder\n     *   .requireNumberBetween(1, 5)\n     *   .setOptions({\n     *     error: 'Please enter a number between 1 and 5'\n     *   })\n     *   .build();\n     * fRange.setDataValidation(newRule);\n     * ```\n     */\n    copy(): FDataValidationBuilder {\n        return new FDataValidationBuilder(this.rule);\n    }\n\n    /**\n     * Gets whether the data validation rule is applied to the worksheet\n     * @returns {boolean} true if the rule is applied, false otherwise\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const rules = fWorksheet.getDataValidations();\n     * rules.forEach((rule) => {\n     *   console.log(rule, rule.getApplied());\n     * });\n     *\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * console.log(fRange.getDataValidation()?.getApplied());\n     * ```\n     */\n    getApplied(): boolean {\n        if (!this._worksheet) {\n            return false;\n        }\n\n        const dataValidationModel = this._injector!.get(DataValidationModel);\n        const currentRule = dataValidationModel.getRuleById(this._worksheet.getUnitId(), this._worksheet.getSheetId(), this.rule.uid);\n\n        if (currentRule && currentRule.ranges.length) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Gets the ranges to which the data validation rule is applied\n     * @returns {FRange[]} An array of FRange objects representing the ranges to which the data validation rule is applied\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const rules = fWorksheet.getDataValidations();\n     * rules.forEach((rule) => {\n     *   console.log(rule);\n     *   const ranges = rule.getRanges();\n     *   ranges.forEach((range) => {\n     *     console.log(range.getA1Notation());\n     *   });\n     * });\n     * ```\n     */\n    getRanges(): FRange[] {\n        if (!this.getApplied()) {\n            return [];\n        }\n\n        const workbook = this._injector!.get(IUniverInstanceService).getUnit<Workbook>(this._worksheet!.getUnitId())!;\n        return this.rule.ranges.map((range: IRange) => this._injector!.createInstance(FRange, workbook, this._worksheet!, range));\n    }\n\n    /**\n     * Gets the unit ID of the worksheet\n     * @returns {string | undefined} The unit ID of the worksheet\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * console.log(fRange.getDataValidation().getUnitId());\n     * ```\n     */\n    getUnitId(): string | undefined {\n        return this._worksheet?.getUnitId();\n    }\n\n    /**\n     * Gets the sheet ID of the worksheet\n     * @returns {string | undefined} The sheet ID of the worksheet\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * console.log(fRange.getDataValidation().getSheetId());\n     * ```\n     */\n    getSheetId(): string | undefined {\n        return this._worksheet?.getSheetId();\n    }\n\n    /**\n     * Set Criteria for the data validation rule\n     * @param {DataValidationType} type - The type of data validation criteria\n     * @param {[DataValidationOperator, string, string]} values - An array containing the operator, formula1, and formula2 values\n     * @param {boolean} [allowBlank] - Whether to allow blank values\n     * @returns {FDataValidation} The current instance for method chaining\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new data validation rule that requires a number equal to 20 for the range A1:B10\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireNumberEqualTo(20)\n     *   .build();\n     * fRange.setDataValidation(rule);\n     *\n     * // Change the rule criteria to require a number between 1 and 10\n     * fRange.getDataValidation().setCriteria(\n     *   univerAPI.Enum.DataValidationType.DECIMAL,\n     *   [univerAPI.Enum.DataValidationOperator.BETWEEN, '1', '10']\n     * );\n     * ```\n     */\n    setCriteria(type: DataValidationType, values: [DataValidationOperator, string, string], allowBlank = true): FDataValidation {\n        if (this.getApplied()) {\n            const commandService = this._injector!.get(ICommandService);\n            const res = commandService.syncExecuteCommand(UpdateSheetDataValidationSettingCommand.id, {\n                unitId: this.getUnitId(),\n                subUnitId: this.getSheetId(),\n                ruleId: this.rule.uid,\n                setting: {\n                    operator: values[0],\n                    formula1: values[1],\n                    formula2: values[2],\n                    type: this.rule.type,\n                    allowBlank,\n                },\n            } as IUpdateSheetDataValidationSettingCommandParams);\n\n            if (!res) {\n                throw new Error('setCriteria failed');\n            }\n        }\n\n        this.rule.operator = values[0];\n        this.rule.formula1 = values[1];\n        this.rule.formula2 = values[2];\n        this.rule.type = type;\n        this.rule.allowBlank = allowBlank;\n\n        return this;\n    }\n\n    /**\n     * Set the options for the data validation rule\n     * @param {Partial<IDataValidationRuleOptions>} options - The options to set for the data validation rule\n     * @returns {FDataValidation} The current instance for method chaining\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new data validation rule that requires a number equal to 20 for the range A1:B10\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireNumberEqualTo(20)\n     *   .build();\n     * fRange.setDataValidation(rule);\n     *\n     * // Supplement the rule with additional options\n     * fRange.getDataValidation().setOptions({\n     *   allowBlank: true,\n     *   showErrorMessage: true,\n     *   error: 'Please enter a valid value'\n     * });\n     * ```\n     */\n    setOptions(options: Partial<IDataValidationRuleOptions>): FDataValidation {\n        if (this.getApplied()) {\n            const commandService = this._injector!.get(ICommandService);\n            const res = commandService.syncExecuteCommand(UpdateSheetDataValidationOptionsCommand.id, {\n                unitId: this.getUnitId(),\n                subUnitId: this.getSheetId(),\n                ruleId: this.rule.uid,\n                options: {\n                    ...getRuleOptions(this.rule),\n                    ...options,\n                },\n            } as IUpdateSheetDataValidationOptionsCommandParams);\n\n            if (!res) {\n                throw new Error('setOptions failed');\n            }\n        }\n\n        Object.assign(this.rule, options);\n        return this;\n    }\n\n    /**\n     * Set the ranges to the data validation rule\n     * @param {FRange[]} ranges - New ranges array\n     * @returns {FDataValidation} The current instance for method chaining\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new data validation rule that requires a number equal to 20 for the range A1:B10\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireNumberEqualTo(20)\n     *   .build();\n     * fRange.setDataValidation(rule);\n     *\n     * // Change the range to C1:D10\n     * const newRuleRange = fWorksheet.getRange('C1:D10');\n     * fRange.getDataValidation().setRanges([newRuleRange]);\n     * ```\n     */\n    setRanges(ranges: FRange[]): FDataValidation {\n        if (this.getApplied()) {\n            const commandService = this._injector!.get(ICommandService);\n            const res = commandService.syncExecuteCommand(UpdateSheetDataValidationRangeCommand.id, {\n                unitId: this.getUnitId(),\n                subUnitId: this.getSheetId(),\n                ruleId: this.rule.uid,\n                ranges: ranges.map((range) => range.getRange()),\n            } as IUpdateSheetDataValidationRangeCommandParams);\n\n            if (!res) {\n                throw new Error('setRanges failed');\n            }\n        }\n\n        this.rule.ranges = ranges.map((range) => range.getRange());\n        return this;\n    }\n\n    /**\n     * Delete the data validation rule from the worksheet\n     * @returns {boolean} true if the rule is deleted successfully, false otherwise\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new data validation rule that requires a number equal to 20 for the range A1:B10\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireNumberEqualTo(20)\n     *   .build();\n     * fRange.setDataValidation(rule);\n     *\n     * // Delete the data validation rule\n     * fRange.getDataValidation().delete();\n     * ```\n     */\n    delete(): boolean {\n        if (!this.getApplied()) {\n            return false;\n        }\n\n        const commandService = this._injector!.get(ICommandService);\n        return commandService.syncExecuteCommand(RemoveSheetDataValidationCommand.id, {\n            unitId: this.getUnitId(),\n            subUnitId: this.getSheetId(),\n            ruleId: this.rule.uid,\n        } as IRemoveSheetDataValidationCommandParams);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DataValidationStatus, Nullable } from '@univerjs/core';\nimport type { IAddSheetDataValidationCommandParams, IClearRangeDataValidationCommandParams } from '@univerjs/sheets-data-validation';\nimport { AddSheetDataValidationCommand, ClearRangeDataValidationCommand, SheetsDataValidationValidatorService } from '@univerjs/sheets-data-validation';\nimport { FRange } from '@univerjs/sheets/facade';\nimport { FDataValidation } from './f-data-validation';\n\n/**\n * @ignore\n */\nexport interface IFRangeDataValidationMixin {\n    /**\n     * Set a data validation rule to current range. if rule is null, clear data validation rule.\n     * @param {Nullable<FDataValidation>} rule data validation rule, build by `FUniver.newDataValidation`\n     * @returns current range\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a data validation rule that requires a number between 1 and 10 for the range A1:B10\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireNumberBetween(1, 10)\n     *   .setOptions({\n     *     allowBlank: true,\n     *     showErrorMessage: true,\n     *     error: 'Please enter a number between 1 and 10'\n     *   })\n     *   .build();\n     * fRange.setDataValidation(rule);\n     * ```\n     */\n    setDataValidation(rule: Nullable<FDataValidation>): FRange;\n\n    /**\n     * Get first data validation rule in current range.\n     * @returns {Nullable<FDataValidation>} data validation rule\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a data validation rule that requires a number equal to 20 for the range A1:B10\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireNumberEqualTo(20)\n     *   .build();\n     * fRange.setDataValidation(rule);\n     * console.log(fRange.getDataValidation().getCriteriaValues());\n     *\n     * // Change the rule criteria to require a number between 1 and 10\n     * fRange.getDataValidation().setCriteria(\n     *   univerAPI.Enum.DataValidationType.DECIMAL,\n     *   [univerAPI.Enum.DataValidationOperator.BETWEEN, '1', '10']\n     * );\n     *\n     * // Print the new rule criteria values\n     * console.log(fRange.getDataValidation().getCriteriaValues());\n     * ```\n     */\n    getDataValidation(): Nullable<FDataValidation>;\n\n    /**\n     * Get all data validation rules in current range.\n     * @returns {FDataValidation[]} all data validation rules\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a data validation rule that requires a number equal to 20 for the range A1:B10\n     * const fRange1 = fWorksheet.getRange('A1:B10');\n     * const rule1 = univerAPI.newDataValidation()\n     *   .requireNumberEqualTo(20)\n     *   .build();\n     * fRange1.setDataValidation(rule1);\n     *\n     * // Create a data validation rule that requires a number between 1 and 10 for the range C1:D10\n     * const fRange2 = fWorksheet.getRange('C1:D10');\n     * const rule2 = univerAPI.newDataValidation()\n     *   .requireNumberBetween(1, 10)\n     *   .build();\n     * fRange2.setDataValidation(rule2);\n     *\n     * // Get all data validation rules in the range A1:D10\n     * const range = fWorksheet.getRange('A1:D10');\n     * const rules = range.getDataValidations();\n     * console.log(rules.length); // 2\n     * ```\n     */\n    getDataValidations(): FDataValidation[];\n\n    /**\n     * Get data validation validator status for current range.\n     * @returns {Promise<DataValidationStatus[][]>} matrix of validator status\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set some values in the range A1:B10\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * fRange.setValues([\n     *   [1, 2],\n     *   [3, 4],\n     *   [5, 6],\n     *   [7, 8],\n     *   [9, 10],\n     *   [11, 12],\n     *   [13, 14],\n     *   [15, 16],\n     *   [17, 18],\n     *   [19, 20]\n     * ]);\n     *\n     * // Create a data validation rule that requires a number between 1 and 10 for the range A1:B10\n     * const rule = univerAPI.newDataValidation()\n     *   .requireNumberBetween(1, 10)\n     *   .build();\n     * fRange.setDataValidation(rule);\n     *\n     * // Get the validator status for the cell B2\n     * const status = await fWorksheet.getRange('B2').getValidatorStatus();\n     * console.log(status?.[0]?.[0]); // 'valid'\n     *\n     * // Get the validator status for the cell B10\n     * const status2 = await fWorksheet.getRange('B10').getValidatorStatus();\n     * console.log(status2?.[0]?.[0]); // 'invalid'\n     * ```\n     */\n    getValidatorStatus(): Promise<DataValidationStatus[][]>;\n}\n\n/**\n * @ignore\n */\nexport class FRangeDataValidationMixin extends FRange implements IFRangeDataValidationMixin {\n    override setDataValidation(rule: Nullable<FDataValidation>): FRange {\n        if (!rule) {\n            this._commandService.syncExecuteCommand(ClearRangeDataValidationCommand.id, {\n                unitId: this._workbook.getUnitId(),\n                subUnitId: this._worksheet.getSheetId(),\n                ranges: [this._range],\n            } as IClearRangeDataValidationCommandParams);\n\n            return this;\n        }\n\n        const params: IAddSheetDataValidationCommandParams = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            rule: {\n                ...rule.rule,\n                ranges: [this._range],\n            },\n        };\n\n        this._commandService.syncExecuteCommand(AddSheetDataValidationCommand.id, params);\n        return this;\n    }\n\n    override getDataValidation(): Nullable<FDataValidation> {\n        const validatorService = this._injector.get(SheetsDataValidationValidatorService);\n        const rule = validatorService.getDataValidation(\n            this._workbook.getUnitId(),\n            this._worksheet.getSheetId(),\n            [this._range]\n        );\n\n        if (rule) {\n            return new FDataValidation(rule, this._worksheet, this._injector);\n        }\n\n        return rule;\n    }\n\n    override getDataValidations(): FDataValidation[] {\n        const validatorService = this._injector.get(SheetsDataValidationValidatorService);\n        return validatorService.getDataValidations(\n            this._workbook.getUnitId(),\n            this._worksheet.getSheetId(),\n            [this._range]\n        ).map((rule) => new FDataValidation(rule, this._worksheet, this._injector));\n    }\n\n    override async getValidatorStatus(): Promise<DataValidationStatus[][]> {\n        const validatorService = this._injector.get(SheetsDataValidationValidatorService);\n        return validatorService.validatorRanges(\n            this._workbook.getUnitId(),\n            this._worksheet.getSheetId(),\n            [this._range]\n        );\n    }\n}\n\nFRange.extend(FRangeDataValidationMixin);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FRange extends IFRangeDataValidationMixin { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, Injector } from '@univerjs/core';\nimport type {\n    IAddSheetDataValidationCommandParams,\n    IRemoveSheetAllDataValidationCommandParams,\n    IRemoveSheetDataValidationCommandParams,\n    IUpdateSheetDataValidationOptionsCommandParams,\n    IUpdateSheetDataValidationRangeCommandParams,\n    IUpdateSheetDataValidationSettingCommandParams,\n} from '@univerjs/sheets-data-validation';\nimport type { IBeforeSheetDataValidationAddEvent, IBeforeSheetDataValidationCriteriaUpdateEvent, IBeforeSheetDataValidationDeleteAllEvent, IBeforeSheetDataValidationDeleteEvent, IBeforeSheetDataValidationOptionsUpdateEvent, IBeforeSheetDataValidationRangeUpdateEvent } from './f-event';\nimport { CanceledError, ICommandService } from '@univerjs/core';\nimport { FUniver } from '@univerjs/core/facade';\nimport {\n    AddSheetDataValidationCommand,\n    RemoveSheetAllDataValidationCommand,\n    RemoveSheetDataValidationCommand,\n    SheetDataValidationModel,\n    UpdateSheetDataValidationOptionsCommand,\n    UpdateSheetDataValidationRangeCommand,\n    UpdateSheetDataValidationSettingCommand,\n} from '@univerjs/sheets-data-validation';\nimport { FDataValidation } from './f-data-validation';\nimport { FDataValidationBuilder } from './f-data-validation-builder';\n\n/**\n * @ignore\n */\nexport interface IFUnvierDataValidationMixin {\n    /**\n     * Creates a new instance of FDataValidationBuilder\n     * @returns {FDataValidationBuilder} A new instance of the FDataValidationBuilder class\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new data validation rule that requires a number between 1 and 10 fot the range A1:B10\n     * const fRange = fWorksheet.getRange('A1:B10');\n     * const rule = univerAPI.newDataValidation()\n     *   .requireNumberBetween(1, 10)\n     *   .setOptions({\n     *     allowBlank: true,\n     *     showErrorMessage: true,\n     *     error: 'Please enter a number between 1 and 10'\n     *   })\n     *   .build();\n     * fRange.setDataValidation(rule);\n     * ```\n     */\n    newDataValidation(): FDataValidationBuilder;\n}\n\nexport class FUnvierDataValidationMixin extends FUniver implements IFUnvierDataValidationMixin {\n    /**\n     * @deprecated use `univerAPI.newDataValidation()` as instead.\n     * @returns {FDataValidationBuilder} A new instance of the FDataValidationBuilder class\n     */\n    static override newDataValidation(): FDataValidationBuilder {\n        return new FDataValidationBuilder();\n    }\n\n    override newDataValidation(): FDataValidationBuilder {\n        return new FDataValidationBuilder();\n    }\n\n    /**\n     * @ignore\n     */\n    // eslint-disable-next-line max-lines-per-function\n    override _initialize(injector: Injector): void {\n        const commandService = injector.get(ICommandService);\n\n        this.registerEventHandler(\n            this.Event.SheetDataValidationChanged,\n            () => {\n                if (!injector.has(SheetDataValidationModel)) return { dispose: () => {} } as IDisposable;\n                const sheetDataValidationModel = injector.get(SheetDataValidationModel);\n\n                return sheetDataValidationModel.ruleChange$.subscribe((ruleChange) => {\n                    const { unitId, subUnitId, rule, oldRule, type } = ruleChange;\n                    const target = this.getSheetTarget(unitId, subUnitId);\n                    if (!target) {\n                        return;\n                    }\n                    const { workbook, worksheet } = target;\n\n                    const fRule = new FDataValidation(rule, worksheet.getSheet(), this._injector);\n                    this.fireEvent(this.Event.SheetDataValidationChanged, {\n                        origin: ruleChange,\n                        worksheet,\n                        workbook,\n                        changeType: type,\n                        oldRule,\n                        rule: fRule,\n                    });\n                });\n            }\n        );\n\n        this.registerEventHandler(\n            this.Event.SheetDataValidatorStatusChanged,\n            () => {\n                if (!injector.has(SheetDataValidationModel)) return { dispose: () => {} } as IDisposable;\n                const sheetDataValidationModel = injector.get(SheetDataValidationModel);\n\n                return sheetDataValidationModel.validStatusChange$.subscribe((statusChange) => {\n                    const { unitId, subUnitId, ruleId, status, row, col } = statusChange;\n                    const target = this.getSheetTarget(unitId, subUnitId);\n                    if (!target) {\n                        return;\n                    }\n                    const { workbook, worksheet } = target;\n                    const rule = worksheet.getDataValidation(ruleId);\n                    if (!rule) {\n                        return;\n                    }\n                    this.fireEvent(this.Event.SheetDataValidatorStatusChanged, {\n                        workbook,\n                        worksheet,\n                        row,\n                        column: col,\n                        rule,\n                        status,\n                    });\n                });\n            }\n        );\n\n        // Register handlers for before command events\n        this.registerEventHandler(\n            this.Event.BeforeSheetDataValidationAdd,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id === AddSheetDataValidationCommand.id) {\n                    const params = commandInfo.params as IAddSheetDataValidationCommandParams;\n                    const target = this.getSheetTarget(params.unitId, params.subUnitId);\n                    if (!target) {\n                        return;\n                    }\n                    const { workbook, worksheet } = target;\n                    const eventParams: IBeforeSheetDataValidationAddEvent = {\n                        worksheet,\n                        workbook,\n                        rule: params.rule,\n                    };\n                    this.fireEvent(this.Event.BeforeSheetDataValidationAdd, eventParams);\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeSheetDataValidationCriteriaUpdate,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id === UpdateSheetDataValidationSettingCommand.id) {\n                    const params = commandInfo.params as IUpdateSheetDataValidationSettingCommandParams;\n                    const target = this.getSheetTarget(params.unitId, params.subUnitId);\n                    if (!target) {\n                        return;\n                    }\n                    const { workbook, worksheet } = target;\n                    const rule = worksheet.getDataValidation(params.ruleId);\n                    if (!rule) {\n                        return;\n                    }\n                    const eventParams: IBeforeSheetDataValidationCriteriaUpdateEvent = {\n                        worksheet,\n                        workbook,\n                        rule,\n                        ruleId: params.ruleId,\n                        newCriteria: params.setting,\n                    };\n\n                    this.fireEvent(this.Event.BeforeSheetDataValidationCriteriaUpdate, eventParams);\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeSheetDataValidationRangeUpdate,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id === UpdateSheetDataValidationRangeCommand.id) {\n                    const params = commandInfo.params as IUpdateSheetDataValidationRangeCommandParams;\n                    const target = this.getSheetTarget(params.unitId, params.subUnitId);\n                    if (!target) {\n                        return;\n                    }\n                    const { workbook, worksheet } = target;\n                    const rule = worksheet.getDataValidation(params.ruleId);\n                    if (!rule) {\n                        return;\n                    }\n                    const eventParams: IBeforeSheetDataValidationRangeUpdateEvent = {\n                        worksheet,\n                        workbook,\n                        rule,\n                        ruleId: params.ruleId,\n                        newRanges: params.ranges,\n                    };\n                    this.fireEvent(this.Event.BeforeSheetDataValidationRangeUpdate, eventParams);\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeSheetDataValidationOptionsUpdate,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id === UpdateSheetDataValidationOptionsCommand.id) {\n                    const params = commandInfo.params as IUpdateSheetDataValidationOptionsCommandParams;\n                    const target = this.getSheetTarget(params.unitId, params.subUnitId);\n                    if (!target) {\n                        return;\n                    }\n                    const { workbook, worksheet } = target;\n                    const rule = worksheet.getDataValidation(params.ruleId);\n                    if (!rule) {\n                        return;\n                    }\n                    const eventParams: IBeforeSheetDataValidationOptionsUpdateEvent = {\n                        worksheet,\n                        workbook,\n                        rule,\n                        ruleId: params.ruleId,\n                        newOptions: params.options,\n                    };\n                    this.fireEvent(this.Event.BeforeSheetDataValidationOptionsUpdate, eventParams);\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeSheetDataValidationDelete,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id === RemoveSheetDataValidationCommand.id) {\n                    const params = commandInfo.params as IRemoveSheetDataValidationCommandParams;\n                    const target = this.getSheetTarget(params.unitId, params.subUnitId);\n                    if (!target) {\n                        return;\n                    }\n                    const { workbook, worksheet } = target;\n                    const rule = worksheet.getDataValidation(params.ruleId);\n                    if (!rule) {\n                        return;\n                    }\n                    const eventParams: IBeforeSheetDataValidationDeleteEvent = {\n                        worksheet,\n                        workbook,\n                        rule,\n                        ruleId: params.ruleId,\n                    };\n                    this.fireEvent(this.Event.BeforeSheetDataValidationDelete, eventParams);\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeSheetDataValidationDeleteAll,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id === RemoveSheetAllDataValidationCommand.id) {\n                    const params = commandInfo.params as IRemoveSheetAllDataValidationCommandParams;\n                    const target = this.getSheetTarget(params.unitId, params.subUnitId);\n                    if (!target) {\n                        return;\n                    }\n                    const { workbook, worksheet } = target;\n                    const eventParams: IBeforeSheetDataValidationDeleteAllEvent = {\n                        worksheet,\n                        workbook,\n                        rules: worksheet.getDataValidations(),\n                    };\n                    this.fireEvent(this.Event.BeforeSheetDataValidationDeleteAll, eventParams);\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n    }\n}\n\nFUniver.extend(FUnvierDataValidationMixin);\ndeclare module '@univerjs/core/facade' {\n    /**\n     * @ignore\n     */\n    // eslint-disable-next-line ts/no-namespace\n    namespace FUniver {\n        /**\n         * @deprecated use `univerAPI.newDataValidation()` as instead.\n         * @returns {FDataValidationBuilder} A new instance of the FDataValidationBuilder class\n         */\n        function newDataValidation(): FDataValidationBuilder;\n    }\n\n    // eslint-disable-next-line ts/naming-convention\n    interface FUniver extends IFUnvierDataValidationMixin {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DataValidationStatus, IDisposable, IExecutionOptions, Nullable, ObjectMatrix } from '@univerjs/core';\nimport type { IRuleChange } from '@univerjs/data-validation';\nimport type {\n    IAddSheetDataValidationCommandParams,\n    IRemoveSheetAllDataValidationCommandParams,\n    IRemoveSheetDataValidationCommandParams,\n    IUpdateSheetDataValidationOptionsCommandParams,\n    IUpdateSheetDataValidationRangeCommandParams,\n    IUpdateSheetDataValidationSettingCommandParams,\n    IValidStatusChange,\n} from '@univerjs/sheets-data-validation';\nimport { toDisposable } from '@univerjs/core';\n\nimport {\n    AddSheetDataValidationCommand,\n    RemoveSheetAllDataValidationCommand,\n    RemoveSheetDataValidationCommand,\n    SheetDataValidationModel,\n    SheetsDataValidationValidatorService,\n    UpdateSheetDataValidationOptionsCommand,\n    UpdateSheetDataValidationRangeCommand,\n    UpdateSheetDataValidationSettingCommand,\n} from '@univerjs/sheets-data-validation';\nimport { FWorkbook } from '@univerjs/sheets/facade';\nimport { filter } from 'rxjs';\n\n/**\n * @ignore\n */\nexport interface IFWorkbookDataValidationMixin {\n    /**\n     * Get data validation validator status for current workbook.\n     * @returns A promise that resolves to a matrix of validator status.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const status = await fWorkbook.getValidatorStatus();\n     * console.log(status);\n     * ```\n     */\n    getValidatorStatus(): Promise<Record<string, ObjectMatrix<Nullable<DataValidationStatus>>>>;\n\n    /**\n     * @deprecated Use `univerAPI.addEvent(univerAPI.Event.SheetDataValidationChanged, (event) => { ... })` instead\n     */\n    onDataValidationChange(\n        callback: (ruleChange: IRuleChange) => void\n    ): IDisposable;\n\n    /**\n     * @deprecated Use `univerAPI.addEvent(univerAPI.Event.SheetDataValidatorStatusChanged, (event) => { ... })` instead\n     */\n    onDataValidationStatusChange(\n        callback: (statusChange: IValidStatusChange) => void\n    ): IDisposable;\n\n    /**\n     * @deprecated Use `univerAPI.addEvent(univerAPI.Event.BeforeSheetDataValidationAdd, (event) => { ... })` instead\n     */\n    onBeforeAddDataValidation(\n        this: FWorkbook,\n        callback: (params: IAddSheetDataValidationCommandParams, options: IExecutionOptions | undefined) => void | false\n    ): IDisposable;\n\n    /**\n     * @deprecated Use `univerAPI.addEvent(univerAPI.Event.BeforeSheetDataValidationCriteriaUpdate, (event) => { ... })` instead\n     */\n    onBeforeUpdateDataValidationCriteria(\n        this: FWorkbook,\n        callback: (params: IUpdateSheetDataValidationSettingCommandParams, options: IExecutionOptions | undefined) => void | false\n    ): IDisposable;\n\n    /**\n     * @deprecated Use `univerAPI.addEvent(univerAPI.Event.BeforeSheetDataValidationRangeUpdate, (event) => { ... })` instead\n     */\n    onBeforeUpdateDataValidationRange(\n        this: FWorkbook,\n        callback: (params: IUpdateSheetDataValidationRangeCommandParams, options: IExecutionOptions | undefined) => void | false\n    ): IDisposable;\n\n    /**\n     * @deprecated Use `univerAPI.addEvent(univerAPI.Event.BeforeSheetDataValidationOptionsUpdate, (event) => { ... })` instead\n     */\n    onBeforeUpdateDataValidationOptions(\n        this: FWorkbook,\n        callback: (params: IUpdateSheetDataValidationOptionsCommandParams, options: IExecutionOptions | undefined) => void | false\n    ): IDisposable;\n\n    /**\n     * @deprecated Use `univerAPI.addEvent(univerAPI.Event.BeforeSheetDataValidationDelete, (event) => { ... })` instead\n     */\n    onBeforeDeleteDataValidation(\n        this: FWorkbook,\n        callback: (params: IRemoveSheetDataValidationCommandParams, options: IExecutionOptions | undefined) => void | false\n    ): IDisposable;\n\n    /**\n     * @deprecated Use `univerAPI.addEvent(univerAPI.Event.BeforeSheetDataValidationDeleteAll, (event) => { ... })` instead\n     */\n    onBeforeDeleteAllDataValidation(\n        this: FWorkbook,\n        callback: (params: IRemoveSheetAllDataValidationCommandParams, options: IExecutionOptions | undefined) => void | false\n    ): IDisposable;\n}\n\n/**\n * @ignore\n */\nexport class FWorkbookDataValidationMixin extends FWorkbook implements IFWorkbookDataValidationMixin {\n    declare _dataValidationModel: SheetDataValidationModel;\n\n    override _initialize(): void {\n        Object.defineProperty(this, '_dataValidationModel', {\n            get() {\n                return this._injector.get(SheetDataValidationModel);\n            },\n        });\n    }\n\n    override getValidatorStatus(): Promise<Record<string, ObjectMatrix<Nullable<DataValidationStatus>>>> {\n        const validatorService = this._injector.get(SheetsDataValidationValidatorService);\n        return validatorService.validatorWorkbook(this._workbook.getUnitId());\n    }\n\n    // region DataValidationHooks\n    override onDataValidationChange(\n        callback: (ruleChange: IRuleChange) => void\n    ): IDisposable {\n        return toDisposable(this._dataValidationModel.ruleChange$\n\n            .pipe(filter((change) => change.unitId === this._workbook.getUnitId()))\n            .subscribe(callback));\n    }\n\n    override onDataValidationStatusChange(\n        callback: (statusChange: IValidStatusChange) => void\n    ): IDisposable {\n        return toDisposable(this._dataValidationModel.validStatusChange$\n            .pipe(filter((change) => change.unitId === this._workbook.getUnitId()))\n            .subscribe(callback));\n    }\n\n    override onBeforeAddDataValidation(\n        callback: (params: IAddSheetDataValidationCommandParams, options: IExecutionOptions | undefined) => void | false\n    ): IDisposable {\n        return toDisposable(this._commandService.beforeCommandExecuted((commandInfo, options) => {\n            const params = commandInfo.params as IAddSheetDataValidationCommandParams;\n            if (commandInfo.id === AddSheetDataValidationCommand.id) {\n                if (params.unitId !== this._workbook.getUnitId()) {\n                    return;\n                }\n                if (callback(params, options) === false) {\n                    throw new Error('Command is stopped by the hook onBeforeAddDataValidation');\n                }\n            }\n        }));\n    }\n\n    override onBeforeUpdateDataValidationCriteria(\n        callback: (params: IUpdateSheetDataValidationSettingCommandParams, options: IExecutionOptions | undefined) => void | false\n    ): IDisposable {\n        return toDisposable(this._commandService.beforeCommandExecuted((commandInfo, options) => {\n            const params = commandInfo.params as IUpdateSheetDataValidationSettingCommandParams;\n            if (commandInfo.id === UpdateSheetDataValidationSettingCommand.id) {\n                if (params.unitId !== this._workbook.getUnitId()) {\n                    return;\n                }\n\n                if (callback(params, options) === false) {\n                    throw new Error('Command is stopped by the hook onBeforeUpdateDataValidationCriteria');\n                }\n            }\n        }));\n    }\n\n    override onBeforeUpdateDataValidationRange(callback: (params: IUpdateSheetDataValidationRangeCommandParams, options: IExecutionOptions | undefined) => void | false): IDisposable {\n        return toDisposable(this._commandService.beforeCommandExecuted((commandInfo, options) => {\n            const params = commandInfo.params as IUpdateSheetDataValidationRangeCommandParams;\n            if (commandInfo.id === UpdateSheetDataValidationRangeCommand.id) {\n                if (params.unitId !== this._workbook.getUnitId()) {\n                    return;\n                }\n\n                if (callback(params, options) === false) {\n                    throw new Error('Command is stopped by the hook onBeforeUpdateDataValidationRange');\n                }\n            }\n        }));\n    }\n\n    override onBeforeUpdateDataValidationOptions(callback: (params: IUpdateSheetDataValidationOptionsCommandParams, options: IExecutionOptions | undefined) => void | false): IDisposable {\n        return toDisposable(this._commandService.beforeCommandExecuted((commandInfo, options) => {\n            const params = commandInfo.params as IUpdateSheetDataValidationOptionsCommandParams;\n            if (commandInfo.id === UpdateSheetDataValidationOptionsCommand.id) {\n                if (params.unitId !== this._workbook.getUnitId()) {\n                    return;\n                }\n\n                if (callback(params, options) === false) {\n                    throw new Error('Command is stopped by the hook onBeforeUpdateDataValidationOptions');\n                }\n            }\n        }));\n    }\n\n    override onBeforeDeleteDataValidation(callback: (params: IRemoveSheetDataValidationCommandParams, options: IExecutionOptions | undefined) => void | false): IDisposable {\n        return toDisposable(this._commandService.beforeCommandExecuted((commandInfo, options) => {\n            const params = commandInfo.params as IRemoveSheetDataValidationCommandParams;\n            if (commandInfo.id === RemoveSheetDataValidationCommand.id) {\n                if (params.unitId !== this._workbook.getUnitId()) {\n                    return;\n                }\n                if (callback(params, options) === false) {\n                    throw new Error('Command is stopped by the hook onBeforeDeleteDataValidation');\n                }\n            }\n        }));\n    }\n\n    override onBeforeDeleteAllDataValidation(callback: (params: IRemoveSheetAllDataValidationCommandParams, options: IExecutionOptions | undefined) => void | false): IDisposable {\n        return toDisposable(this._commandService.beforeCommandExecuted((commandInfo, options) => {\n            const params = commandInfo.params as IRemoveSheetAllDataValidationCommandParams;\n            if (commandInfo.id === RemoveSheetAllDataValidationCommand.id) {\n                if (params.unitId !== this._workbook.getUnitId()) {\n                    return;\n                }\n                if (callback(params, options) === false) {\n                    throw new Error('Command is stopped by the hook onBeforeDeleteAllDataValidation');\n                }\n            }\n        }));\n    }\n}\n\nFWorkbook.extend(FWorkbookDataValidationMixin);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FWorkbook extends IFWorkbookDataValidationMixin { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DataValidationStatus, Nullable, ObjectMatrix } from '@univerjs/core';\nimport { DataValidationModel } from '@univerjs/data-validation';\nimport { SheetsDataValidationValidatorService } from '@univerjs/sheets-data-validation';\nimport { FWorksheet } from '@univerjs/sheets/facade';\nimport { FDataValidation } from './f-data-validation';\n\n/**\n * @ignore\n */\nexport interface IFWorksheetDataValidationMixin {\n    /**\n     * Get all data validation rules in current sheet.\n     * @returns {FDataValidation[]} All data validation rules\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const rules = fWorksheet.getDataValidations();\n     * console.log(rules);\n     * ```\n     */\n    getDataValidations(): FDataValidation[];\n\n    /**\n     * @deprecated use `getValidatorStatusAsync` instead\n     */\n    getValidatorStatus(): Promise<ObjectMatrix<Nullable<DataValidationStatus>>>;\n\n    /**\n     * Get data validation validator status for current sheet.\n     * @returns {Promise<ObjectMatrix<Nullable<DataValidationStatus>>>} matrix of validator status\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const status = await fWorksheet.getValidatorStatusAsync();\n     * console.log(status);\n     * ```\n     */\n    getValidatorStatusAsync(): Promise<ObjectMatrix<Nullable<DataValidationStatus>>>;\n\n    /**\n     * get data validation rule by rule id\n     * @param ruleId - the rule id\n     * @returns {Nullable<FDataValidation>} data validation rule\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const rules = fWorksheet.getDataValidations();\n     * console.log(fWorksheet.getDataValidation(rules[0]?.rule.uid));\n     * ```\n     */\n    getDataValidation(ruleId: string): Nullable<FDataValidation>;\n}\n\n/**\n * @ignore\n */\nexport class FWorksheetDataValidationMixin extends FWorksheet implements IFWorksheetDataValidationMixin {\n    override getDataValidations(): FDataValidation[] {\n        const dataValidationModel = this._injector.get(DataValidationModel);\n        return dataValidationModel.getRules(this._workbook.getUnitId(), this._worksheet.getSheetId()).map((rule) => new FDataValidation(rule, this._worksheet, this._injector));\n    }\n\n    override getValidatorStatus(): Promise<ObjectMatrix<Nullable<DataValidationStatus>>> {\n        const validatorService = this._injector.get(SheetsDataValidationValidatorService);\n        return validatorService.validatorWorksheet(\n            this._workbook.getUnitId(),\n            this._worksheet.getSheetId()\n        );\n    }\n\n    override getValidatorStatusAsync(): Promise<ObjectMatrix<Nullable<DataValidationStatus>>> {\n        return this.getValidatorStatus();\n    }\n\n    override getDataValidation(ruleId: string): Nullable<FDataValidation> {\n        const dataValidationModel = this._injector.get(DataValidationModel);\n        const rule = dataValidationModel.getRuleById(this._workbook.getUnitId(), this._worksheet.getSheetId(), ruleId);\n        if (rule) {\n            return new FDataValidation(rule, this._worksheet, this._injector);\n        }\n        return null;\n    }\n}\n\nFWorksheet.extend(FWorksheetDataValidationMixin);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FWorksheet extends IFWorksheetDataValidationMixin {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DataValidationStatus, IDataValidationRule, IDataValidationRuleBase, IDataValidationRuleOptions, IRange, ISheetDataValidationRule } from '@univerjs/core';\nimport type { IEventBase } from '@univerjs/core/facade';\nimport type { DataValidationChangeType, IRuleChange } from '@univerjs/data-validation';\nimport type { FWorkbook, FWorksheet } from '@univerjs/sheets/facade';\nimport type { FDataValidation } from './f-data-validation';\nimport { FEventName } from '@univerjs/core/facade';\n\n/**\n * Event interface triggered when a data validation rule is changed\n * @interface ISheetDataValidationChangedEvent\n * @augments {IEventBase}\n */\nexport interface ISheetDataValidationChangedEvent extends IEventBase {\n    /** The source of the rule change */\n    origin: IRuleChange;\n    /** The worksheet containing the validation rule */\n    worksheet: FWorksheet;\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** Type of change made to the validation rule */\n    changeType: DataValidationChangeType;\n    /** The previous validation rule, if it exists */\n    oldRule?: IDataValidationRule;\n    /** The new or modified validation rule */\n    rule: FDataValidation;\n}\n\n/**\n * Event interface triggered when a data validation status changes\n * @interface ISheetDataValidatorStatusChangedEvent\n * @augments {IEventBase}\n */\nexport interface ISheetDataValidatorStatusChangedEvent extends IEventBase {\n    /** The worksheet containing the validation */\n    worksheet: FWorksheet;\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** Row index of the validated cell */\n    row: number;\n    /** Column index of the validated cell */\n    column: number;\n    /** Current validation status */\n    status: DataValidationStatus;\n    /** The validation rule that was checked */\n    rule: FDataValidation;\n}\n\n/**\n * Event interface triggered before adding a new data validation rule\n * @interface IBeforeSheetDataValidationAddEvent\n * @augments {IEventBase}\n */\nexport interface IBeforeSheetDataValidationAddEvent extends IEventBase {\n    /** The worksheet to add the validation to */\n    worksheet: FWorksheet;\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** The validation rule to be added */\n    rule: ISheetDataValidationRule;\n}\n\n/**\n * Event interface triggered before deleting a data validation rule\n * @interface IBeforeSheetDataValidationDeleteEvent\n * @augments {IEventBase}\n */\nexport interface IBeforeSheetDataValidationDeleteEvent extends IEventBase {\n    /** The worksheet containing the validation */\n    worksheet: FWorksheet;\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** Unique identifier of the rule to be deleted */\n    ruleId: string;\n    /** The validation rule to be deleted */\n    rule: FDataValidation;\n}\n\n/**\n * Event interface triggered before updating a data validation rule's criteria\n * @interface IBeforeSheetDataValidationCriteriaUpdateEvent\n * @augments {IEventBase}\n */\nexport interface IBeforeSheetDataValidationCriteriaUpdateEvent extends IEventBase {\n    /** The worksheet containing the validation */\n    worksheet: FWorksheet;\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** Unique identifier of the rule to be updated */\n    ruleId: string;\n    /** The current validation rule */\n    rule: FDataValidation;\n    /** The new criteria to be applied */\n    newCriteria: IDataValidationRuleBase;\n}\n\n/**\n * Event interface triggered before updating a data validation rule's ranges\n * @interface IBeforeSheetDataValidationRangeUpdateEvent\n * @augments {IEventBase}\n */\nexport interface IBeforeSheetDataValidationRangeUpdateEvent extends IEventBase {\n    /** The worksheet containing the validation */\n    worksheet: FWorksheet;\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** Unique identifier of the rule to be updated */\n    ruleId: string;\n    /** The current validation rule */\n    rule: FDataValidation;\n    /** The new ranges to be applied */\n    newRanges: IRange[];\n}\n\n/**\n * Event interface triggered before updating a data validation rule's options\n * @interface IBeforeSheetDataValidationOptionsUpdateEvent\n * @augments {IEventBase}\n */\nexport interface IBeforeSheetDataValidationOptionsUpdateEvent extends IEventBase {\n    /** The worksheet containing the validation */\n    worksheet: FWorksheet;\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** Unique identifier of the rule to be updated */\n    ruleId: string;\n    /** The current validation rule */\n    rule: FDataValidation;\n    /** The new options to be applied */\n    newOptions: IDataValidationRuleOptions;\n}\n\n/**\n * Event interface triggered before deleting all data validation rules\n * @interface IBeforeSheetDataValidationDeleteAllEvent\n * @augments {IEventBase}\n */\nexport interface IBeforeSheetDataValidationDeleteAllEvent extends IEventBase {\n    /** The worksheet containing the validations */\n    worksheet: FWorksheet;\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** Array of all validation rules to be deleted */\n    rules: FDataValidation[];\n}\n\n/**\n * @ignore\n */\nexport interface IDataValidationEventParamConfig {\n    SheetDataValidationChanged: ISheetDataValidationChangedEvent;\n    SheetDataValidatorStatusChanged: ISheetDataValidatorStatusChangedEvent;\n    BeforeSheetDataValidationAdd: IBeforeSheetDataValidationAddEvent;\n    BeforeSheetDataValidationDelete: IBeforeSheetDataValidationDeleteEvent;\n    BeforeSheetDataValidationDeleteAll: IBeforeSheetDataValidationDeleteAllEvent;\n    BeforeSheetDataValidationCriteriaUpdate: IBeforeSheetDataValidationCriteriaUpdateEvent;\n    BeforeSheetDataValidationRangeUpdate: IBeforeSheetDataValidationRangeUpdateEvent;\n    BeforeSheetDataValidationOptionsUpdate: IBeforeSheetDataValidationOptionsUpdateEvent;\n}\n\n/**\n * @ignore\n */\ninterface IDataValidationEvent {\n    /**\n     * Event fired when a rule is added, deleted, or modified\n     * @see {@link ISheetDataValidationChangedEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.SheetDataValidationChanged, (params) => {\n     *   const { origin, worksheet, workbook, changeType, oldRule, rule } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly SheetDataValidationChanged: 'SheetDataValidationChanged';\n\n    /**\n     * Event fired when a cell validator status is changed\n     * @see {@link ISheetDataValidatorStatusChangedEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.SheetDataValidatorStatusChanged, (params) => {\n     *   const { worksheet, workbook, row, column, status, rule } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly SheetDataValidatorStatusChanged: 'SheetDataValidatorStatusChanged';\n\n    /**\n     * Event fired before a rule is added\n     * @see {@link IBeforeSheetDataValidationAddEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeSheetDataValidationAdd, (params) => {\n     *   const { worksheet, workbook, rule } = params;\n     *   console.log(params);\n     *\n     *   // Cancel the data validation rule addition operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeSheetDataValidationAdd: 'BeforeSheetDataValidationAdd';\n\n    /**\n     * Event fired before a rule is deleted\n     * @see {@link IBeforeSheetDataValidationDeleteEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeSheetDataValidationDelete, (params) => {\n     *   const { worksheet, workbook, ruleId, rule } = params;\n     *   console.log(params);\n     *\n     *   // Cancel the data validation rule deletion operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeSheetDataValidationDelete: 'BeforeSheetDataValidationDelete';\n\n    /**\n     * Event fired before all rules are deleted\n     * @see {@link IBeforeSheetDataValidationDeleteAllEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeSheetDataValidationDeleteAll, (params) => {\n     *   const { worksheet, workbook, rules } = params;\n     *   console.log(params);\n     *\n     *   // Cancel the data validation rule deletion operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeSheetDataValidationDeleteAll: 'BeforeSheetDataValidationDeleteAll';\n\n    /**\n     * Event fired before the criteria of a rule are updated\n     * @see {@link IBeforeSheetDataValidationCriteriaUpdateEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeSheetDataValidationCriteriaUpdate, (params) => {\n     *   const { worksheet, workbook, ruleId, rule, newCriteria } = params;\n     *   console.log(params);\n     *\n     *   // Cancel the data validation rule criteria update operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeSheetDataValidationCriteriaUpdate: 'BeforeSheetDataValidationCriteriaUpdate';\n\n    /**\n     * Event fired before the range of a rule is updated\n     * @see {@link IBeforeSheetDataValidationRangeUpdateEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeSheetDataValidationRangeUpdate, (params) => {\n     *   const { worksheet, workbook, ruleId, rule, newRanges } = params;\n     *   console.log(params);\n     *\n     *   // Cancel the data validation rule range update operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeSheetDataValidationRangeUpdate: 'BeforeSheetDataValidationRangeUpdate';\n\n    /**\n     * Event fired before the options of a rule are updated\n     * @see {@link IBeforeSheetDataValidationOptionsUpdateEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeSheetDataValidationOptionsUpdate, (params) => {\n     *   const { worksheet, workbook, ruleId, rule, newOptions } = params;\n     *   console.log(params);\n     *\n     *   // Cancel the data validation rule options update operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeSheetDataValidationOptionsUpdate: 'BeforeSheetDataValidationOptionsUpdate';\n}\n\n/**\n * @ignore\n */\nexport class FDataValidationEvent implements IDataValidationEvent {\n    get SheetDataValidationChanged(): 'SheetDataValidationChanged' {\n        return 'SheetDataValidationChanged';\n    }\n\n    get SheetDataValidatorStatusChanged(): 'SheetDataValidatorStatusChanged' {\n        return 'SheetDataValidatorStatusChanged';\n    }\n\n    get BeforeSheetDataValidationAdd(): 'BeforeSheetDataValidationAdd' {\n        return 'BeforeSheetDataValidationAdd';\n    }\n\n    get BeforeSheetDataValidationDelete(): 'BeforeSheetDataValidationDelete' {\n        return 'BeforeSheetDataValidationDelete';\n    }\n\n    get BeforeSheetDataValidationDeleteAll(): 'BeforeSheetDataValidationDeleteAll' {\n        return 'BeforeSheetDataValidationDeleteAll';\n    }\n\n    get BeforeSheetDataValidationCriteriaUpdate(): 'BeforeSheetDataValidationCriteriaUpdate' {\n        return 'BeforeSheetDataValidationCriteriaUpdate';\n    }\n\n    get BeforeSheetDataValidationRangeUpdate(): 'BeforeSheetDataValidationRangeUpdate' {\n        return 'BeforeSheetDataValidationRangeUpdate';\n    }\n\n    get BeforeSheetDataValidationOptionsUpdate(): 'BeforeSheetDataValidationOptionsUpdate' {\n        return 'BeforeSheetDataValidationOptionsUpdate';\n    }\n}\n\n/**\n * @ignore\n */\nexport interface IDataValidationEventConfig {\n    SheetDataValidationChanged: ISheetDataValidationChangedEvent;\n    SheetDataValidatorStatusChanged: ISheetDataValidatorStatusChangedEvent;\n    BeforeSheetDataValidationAdd: IBeforeSheetDataValidationAddEvent;\n    BeforeSheetDataValidationDelete: IBeforeSheetDataValidationDeleteEvent;\n    BeforeSheetDataValidationDeleteAll: IBeforeSheetDataValidationDeleteAllEvent;\n    BeforeSheetDataValidationCriteriaUpdate: IBeforeSheetDataValidationCriteriaUpdateEvent;\n    BeforeSheetDataValidationRangeUpdate: IBeforeSheetDataValidationRangeUpdateEvent;\n    BeforeSheetDataValidationOptionsUpdate: IBeforeSheetDataValidationOptionsUpdateEvent;\n}\n\nFEventName.extend(FDataValidationEvent);\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FEventName extends IDataValidationEvent {\n    }\n\n    interface IEventParamConfig extends IDataValidationEventParamConfig {\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommandInfo, IDisposable } from '@univerjs/core';\nimport type { FormulaExecutedStateType, IExecutionInProgressParams, ISequenceNode, ISetFormulaCalculationNotificationMutation, ISetFormulaCalculationStartMutation } from '@univerjs/engine-formula';\nimport { ICommandService, IConfigService, Inject, Injector } from '@univerjs/core';\nimport { FBase } from '@univerjs/core/facade';\nimport { ENGINE_FORMULA_CYCLE_REFERENCE_COUNT, GlobalComputingStatusService, LexerTreeBuilder, SetFormulaCalculationNotificationMutation, SetFormulaCalculationStartMutation, SetFormulaCalculationStopMutation } from '@univerjs/engine-formula';\nimport { filter, firstValueFrom, map, race, timer } from 'rxjs';\n\n/**\n * This interface class provides methods to modify the behavior of the operation formula.\n * @hideconstructor\n */\nexport class FFormula extends FBase {\n    constructor(\n        @Inject(ICommandService) protected readonly _commandService: ICommandService,\n        @Inject(Injector) protected readonly _injector: Injector,\n        @Inject(LexerTreeBuilder) private _lexerTreeBuilder: LexerTreeBuilder,\n        @IConfigService protected readonly _configService: IConfigService\n    ) {\n        super();\n        this._initialize();\n    }\n\n    /**\n     * @ignore\n     */\n    _initialize(): void {\n        // do nothing\n    }\n\n    /**\n     * The tree builder for formula string.\n     * @type {LexerTreeBuilder}\n     */\n    get lexerTreeBuilder(): LexerTreeBuilder {\n        return this._lexerTreeBuilder;\n    }\n\n    /**\n     * Offsets the formula\n     * @param {string} formulaString - The formula string to offset\n     * @param {number} refOffsetX - The offset column\n     * @param {number} refOffsetY - The offset row\n     * @param {boolean} [ignoreAbsolute] - Whether to ignore the absolute reference\n     * @returns {string} The offset formula string\n     *\n     * @example\n     * ```ts\n     * const formulaEngine = univerAPI.getFormula();\n     * const result = formulaEngine.moveFormulaRefOffset('=SUM(A1,B2)', 1, 1);\n     * console.log(result);\n     * ```\n     */\n    moveFormulaRefOffset(formulaString: string, refOffsetX: number, refOffsetY: number, ignoreAbsolute?: boolean): string {\n        return this._lexerTreeBuilder.moveFormulaRefOffset(formulaString, refOffsetX, refOffsetY, ignoreAbsolute);\n    }\n\n    /**\n     * Resolves the formula string to a 'node' node\n     * @param {string} formulaString - The formula string to resolve\n     * @returns {Array<ISequenceNode | string>} The nodes of the formula string\n     *\n     * @example\n     * ```ts\n     * const formulaEngine = univerAPI.getFormula();\n     * const nodes = formulaEngine.sequenceNodesBuilder('=SUM(A1,B2)');\n     * console.log(nodes);\n     * ```\n     */\n    sequenceNodesBuilder(formulaString: string): (string | ISequenceNode)[] {\n        return this._lexerTreeBuilder.sequenceNodesBuilder(formulaString) || [];\n    }\n\n    /**\n     * Start the calculation of the formula.\n     *\n     * @example\n     * ```ts\n     * const formulaEngine = univerAPI.getFormula();\n     * formulaEngine.executeCalculation();\n     * ```\n     */\n    executeCalculation(): void {\n        this._commandService.executeCommand(SetFormulaCalculationStartMutation.id, { commands: [], forceCalculation: true }, { onlyLocal: true });\n    }\n\n    /**\n     * Stop the calculation of the formula.\n     *\n     * @example\n     * ```ts\n     * const formulaEngine = univerAPI.getFormula();\n     * formulaEngine.stopCalculation();\n     * ```\n     */\n    stopCalculation(): void {\n        this._commandService.executeCommand(SetFormulaCalculationStopMutation.id, {});\n    }\n\n    /**\n     * Listening calculation starts.\n     * @param {Function} callback - The callback function to be called when the formula calculation starts.\n     * @returns {IDisposable} The disposable instance.\n     *\n     * @example\n     * ```ts\n     * const formulaEngine = univerAPI.getFormula();\n     * formulaEngine.calculationStart((forceCalculation) => {\n     *   console.log('Calculation start', forceCalculation);\n     * });\n     * ```\n     */\n    calculationStart(callback: (forceCalculation: boolean) => void): IDisposable {\n        return this._commandService.onCommandExecuted((command: ICommandInfo) => {\n            if (command.id === SetFormulaCalculationStartMutation.id) {\n                const params = command.params as ISetFormulaCalculationStartMutation;\n                callback(params.forceCalculation);\n            }\n        });\n    }\n\n    /**\n     * Listening calculation ends.\n     * @param {Function} callback - The callback function to be called when the formula calculation ends.\n     * @returns {IDisposable} The disposable instance.\n     *\n     * @example\n     * ```ts\n     * const formulaEngine = univerAPI.getFormula();\n     * formulaEngine.calculationEnd((functionsExecutedState) => {\n     *   console.log('Calculation end', functionsExecutedState);\n     * });\n     * ```\n     */\n    calculationEnd(callback: (functionsExecutedState: FormulaExecutedStateType) => void): IDisposable {\n        return this._commandService.onCommandExecuted((command: ICommandInfo) => {\n            if (command.id !== SetFormulaCalculationNotificationMutation.id) {\n                return;\n            }\n\n            const params = command.params as ISetFormulaCalculationNotificationMutation;\n\n            if (params.functionsExecutedState !== undefined) {\n                callback(params.functionsExecutedState);\n            }\n        });\n    }\n\n    /**\n     * Wait for computing in the Univer instance to complete. Please note that this does not only include formula calculation,\n     * but also other computing tasks, e.g. pivot table calculation.\n     * @param {number} [timeout] The maximum time to wait for the computing to complete, in milliseconds. The default\n     * value is 30,000 milliseconds.\n     * @returns {Promise<boolean>} This method returns `true` if the computing is complete. If the timeout is reached, this\n     * method returns `false`.\n     *\n     * @example\n     * ```ts\n     * const formulaEngine = univerAPI.getFormula();\n     * formulaEngine.whenComputingCompleteAsync(3000).then((isComplete) => {\n     *   console.log('Computing complete:', isComplete);\n     * });\n     * ```\n     */\n    whenComputingCompleteAsync(timeout?: number): Promise<boolean> {\n        const gcss = this._injector.get(GlobalComputingStatusService);\n        if (gcss.computingStatus) return Promise.resolve(true);\n\n        return firstValueFrom(race(\n            gcss.computingStatus$.pipe(filter((computing) => computing)),\n            timer(timeout ?? 30_000).pipe(map(() => false))\n        ));\n    }\n\n    /**\n     * @deprecated Use `whenComputingCompleteAsync` instead.\n     * @returns {Promise<void>} This method returns a promise that resolves when the calculation is complete.\n     */\n    onCalculationEnd(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const timer = setTimeout(() => {\n                reject(new Error('Calculation end timeout'));\n            }, 30_000);\n\n            const disposable = this.calculationEnd(() => {\n                clearTimeout(timer);\n                disposable.dispose();\n\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Listening calculation processing.\n     * @param {Function} callback - The callback function to be called when the formula calculation is in progress.\n     * @returns {IDisposable} The disposable instance.\n     *\n     * @example\n     * ```ts\n     * const formulaEngine = univerAPI.getFormula();\n     * formulaEngine.calculationProcessing((stageInfo) => {\n     *   console.log('Calculation processing', stageInfo);\n     * });\n     * ```\n     */\n    calculationProcessing(callback: (stageInfo: IExecutionInProgressParams) => void): IDisposable {\n        return this._commandService.onCommandExecuted((command: ICommandInfo) => {\n            if (command.id !== SetFormulaCalculationNotificationMutation.id) {\n                return;\n            }\n\n            const params = command.params as ISetFormulaCalculationNotificationMutation;\n\n            if (params.stageInfo !== undefined) {\n                callback(params.stageInfo);\n            }\n        });\n    }\n\n    /**\n     * When a formula contains a circular reference, set the maximum number of iterations for the formula calculation.\n     * @param {number} maxIteration The maximum number of iterations. The default value is 1.\n     *\n     * @example\n     * ```ts\n     * // Set the maximum number of iterations for the formula calculation to 5.\n     * // The default value is 1.\n     * const formulaEngine = univerAPI.getFormula();\n     * formulaEngine.setMaxIteration(5);\n     * ```\n     */\n    setMaxIteration(maxIteration: number): void {\n        this._configService.setConfig(ENGINE_FORMULA_CYCLE_REFERENCE_COUNT, maxIteration);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FUniver } from '@univerjs/core/facade';\nimport { FFormula } from './f-formula';\n\n/**\n * @ignore\n */\nexport interface IFUniverEngineFormulaMixin {\n    getFormula(): FFormula;\n}\n\nexport class FUniverEngineFormulaMixin extends FUniver implements IFUniverEngineFormulaMixin {\n    override getFormula(): FFormula {\n        return this._injector.createInstance(FFormula);\n    }\n}\n\nFUniver.extend(FUniverEngineFormulaMixin);\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FUniver extends IFUniverEngineFormulaMixin {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Nullable, Workbook, Worksheet } from '@univerjs/core';\nimport type { ISheetCommandSharedParams } from '@univerjs/sheets';\nimport type { FilterModel, IFilterColumn, ISetSheetsFilterCriteriaCommandParams } from '@univerjs/sheets-filter';\n\nimport { ICommandService, Inject, Injector } from '@univerjs/core';\nimport { ClearSheetsFilterCriteriaCommand, RemoveSheetFilterCommand, SetSheetsFilterCriteriaCommand } from '@univerjs/sheets-filter';\nimport { FRange } from '@univerjs/sheets/facade';\n\n/**\n * This interface class provides methods to modify the filter settings of a worksheet.\n * @hideconstructor\n */\nexport class FFilter {\n    constructor(\n        private readonly _workbook: Workbook,\n        private readonly _worksheet: Worksheet,\n        private readonly _filterModel: FilterModel,\n        @Inject(Injector) private readonly _injector: Injector,\n        @ICommandService private readonly _commandSrv: ICommandService\n    ) {\n        // empty\n    }\n\n    /**\n     * Get the filtered out rows by this filter.\n     * @returns {number[]} Filtered out rows by this filter.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set some values of the range C1:F10\n     * const fRange = fWorksheet.getRange('C1:F10');\n     * fRange.setValues([\n     *   [1, 2, 3, 4],\n     *   [2, 3, 4, 5],\n     *   [3, 4, 5, 6],\n     *   [4, 5, 6, 7],\n     *   [5, 6, 7, 8],\n     *   [6, 7, 8, 9],\n     *   [7, 8, 9, 10],\n     *   [8, 9, 10, 11],\n     *   [9, 10, 11, 12],\n     *   [10, 11, 12, 13],\n     * ]);\n     *\n     * // Create a filter on the range C1:F10\n     * let fFilter = fRange.createFilter();\n     *\n     * // If the filter already exists, remove it and create a new one\n     * if (!fFilter) {\n     *   fRange.getFilter().remove();\n     *   fFilter = fRange.createFilter();\n     * }\n     *\n     * // Set the filter criteria of the column C, filter out the rows that are not 1, 5, 9\n     * const column = fWorksheet.getRange('C:C').getColumn();\n     * fFilter.setColumnFilterCriteria(column, {\n     *   colId: 0,\n     *   filters: {\n     *     filters: ['1', '5', '9'],\n     *   },\n     * });\n     *\n     * // Get the filtered out rows\n     * console.log(fFilter.getFilteredOutRows()); // [1, 2, 3, 5, 6, 7, 9]\n     * ```\n     */\n    getFilteredOutRows(): number[] {\n        return Array.from(this._filterModel.filteredOutRows).sort();\n    }\n\n    /**\n     * Get the filter criteria of a column.\n     * @param {number} column - The column index.\n     * @returns {Nullable<IFilterColumn>} The filter criteria of the column.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set some values of the range C1:F10\n     * const fRange = fWorksheet.getRange('C1:F10');\n     * fRange.setValues([\n     *   [1, 2, 3, 4],\n     *   [2, 3, 4, 5],\n     *   [3, 4, 5, 6],\n     *   [4, 5, 6, 7],\n     *   [5, 6, 7, 8],\n     *   [6, 7, 8, 9],\n     *   [7, 8, 9, 10],\n     *   [8, 9, 10, 11],\n     *   [9, 10, 11, 12],\n     *   [10, 11, 12, 13],\n     * ]);\n     *\n     * // Create a filter on the range C1:F10\n     * let fFilter = fRange.createFilter();\n     *\n     * // If the filter already exists, remove it and create a new one\n     * if (!fFilter) {\n     *   fRange.getFilter().remove();\n     *   fFilter = fRange.createFilter();\n     * }\n     *\n     * // Set the filter criteria of the column C, filter out the rows that are not 1, 5, 9\n     * const column = fWorksheet.getRange('C:C').getColumn();\n     * fFilter.setColumnFilterCriteria(column, {\n     *   colId: 0,\n     *   filters: {\n     *     filters: ['1', '5', '9'],\n     *   },\n     * });\n     *\n     * // Print the filter criteria of the column C and D\n     * console.log(fFilter.getColumnFilterCriteria(column)); // { colId: 0, filters: { filters: ['1', '5', '9'] } }\n     * console.log(fFilter.getColumnFilterCriteria(column + 1)); // undefined\n     * ```\n     */\n    getColumnFilterCriteria(column: number): Nullable<IFilterColumn> {\n        return this._filterModel.getFilterColumn(column)?.getColumnData();\n    }\n\n    /**\n     * Clear the filter criteria of a column.\n     * @param {number} column - The column index.\n     * @returns {FFilter} The FFilter instance for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set some values of the range C1:F10\n     * const fRange = fWorksheet.getRange('C1:F10');\n     * fRange.setValues([\n     *   [1, 2, 3, 4],\n     *   [2, 3, 4, 5],\n     *   [3, 4, 5, 6],\n     *   [4, 5, 6, 7],\n     *   [5, 6, 7, 8],\n     *   [6, 7, 8, 9],\n     *   [7, 8, 9, 10],\n     *   [8, 9, 10, 11],\n     *   [9, 10, 11, 12],\n     *   [10, 11, 12, 13],\n     * ]);\n     *\n     * // Create a filter on the range C1:F10\n     * let fFilter = fRange.createFilter();\n     *\n     * // If the filter already exists, remove it and create a new one\n     * if (!fFilter) {\n     *   fRange.getFilter().remove();\n     *   fFilter = fRange.createFilter();\n     * }\n     *\n     * // Set the filter criteria of the column C, filter out the rows that are not 1, 5, 9\n     * const column = fWorksheet.getRange('C:C').getColumn();\n     * fFilter.setColumnFilterCriteria(column, {\n     *   colId: 0,\n     *   filters: {\n     *     filters: ['1', '5', '9'],\n     *   },\n     * });\n     *\n     * // Clear the filter criteria of the column C after 3 seconds\n     * setTimeout(() => {\n     *   fFilter.removeColumnFilterCriteria(column);\n     * }, 3000);\n     * ```\n     */\n    removeColumnFilterCriteria(column: number): FFilter {\n        this._commandSrv.syncExecuteCommand(SetSheetsFilterCriteriaCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            col: column,\n            criteria: null,\n        } as ISetSheetsFilterCriteriaCommandParams);\n        return this;\n    }\n\n    /**\n     * Set the filter criteria of a column.\n     * @param {number} column - The column index.\n     * @param {ISetSheetsFilterCriteriaCommandParams['criteria']} criteria - The new filter criteria.\n     * @returns {FFilter} The FFilter instance for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set some values of the range C1:F10\n     * const fRange = fWorksheet.getRange('C1:F10');\n     * fRange.setValues([\n     *   [1, 2, 3, 4],\n     *   [2, 3, 4, 5],\n     *   [3, 4, 5, 6],\n     *   [4, 5, 6, 7],\n     *   [5, 6, 7, 8],\n     *   [6, 7, 8, 9],\n     *   [7, 8, 9, 10],\n     *   [8, 9, 10, 11],\n     *   [9, 10, 11, 12],\n     *   [10, 11, 12, 13],\n     * ]);\n     *\n     * // Create a filter on the range C1:F10\n     * let fFilter = fRange.createFilter();\n     *\n     * // If the filter already exists, remove it and create a new one\n     * if (!fFilter) {\n     *   fRange.getFilter().remove();\n     *   fFilter = fRange.createFilter();\n     * }\n     *\n     * // Set the filter criteria of the column C, filter out the rows that are not 1, 5, 9\n     * const column = fWorksheet.getRange('C:C').getColumn();\n     * fFilter.setColumnFilterCriteria(column, {\n     *   colId: 0,\n     *   filters: {\n     *     filters: ['1', '5', '9'],\n     *   },\n     * });\n     * ```\n     */\n    setColumnFilterCriteria(column: number, criteria: ISetSheetsFilterCriteriaCommandParams['criteria']): FFilter {\n        this._commandSrv.syncExecuteCommand(SetSheetsFilterCriteriaCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            col: column,\n            criteria,\n        } as ISetSheetsFilterCriteriaCommandParams);\n        return this;\n    }\n\n    /**\n     * Get the range of the filter.\n     * @returns {FRange} The range of the filter.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fFilter = fWorksheet.getFilter();\n     * console.log(fFilter?.getRange().getA1Notation());\n     * ```\n     */\n    getRange(): FRange {\n        const range = this._filterModel.getRange();\n        return this._injector.createInstance(FRange, this._workbook, this._worksheet, range);\n    }\n\n    /**\n     * Remove the filter criteria of all columns.\n     * @returns {FFilter} The FFilter instance for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set some values of the range C1:F10\n     * const fRange = fWorksheet.getRange('C1:F10');\n     * fRange.setValues([\n     *   [1, 2, 3, 4],\n     *   [2, 3, 4, 5],\n     *   [3, 4, 5, 6],\n     *   [4, 5, 6, 7],\n     *   [5, 6, 7, 8],\n     *   [6, 7, 8, 9],\n     *   [7, 8, 9, 10],\n     *   [8, 9, 10, 11],\n     *   [9, 10, 11, 12],\n     *   [10, 11, 12, 13],\n     * ]);\n     *\n     * // Create a filter on the range C1:F10\n     * let fFilter = fRange.createFilter();\n     *\n     * // If the filter already exists, remove it and create a new one\n     * if (!fFilter) {\n     *   fRange.getFilter().remove();\n     *   fFilter = fRange.createFilter();\n     * }\n     *\n     * // Set the filter criteria of the column C, filter out the rows that are not 1, 5, 9\n     * const column = fWorksheet.getRange('C:C').getColumn();\n     * fFilter.setColumnFilterCriteria(column, {\n     *   colId: 0,\n     *   filters: {\n     *     filters: ['1', '5', '9'],\n     *   },\n     * });\n     *\n     * // Clear the filter criteria of all columns after 3 seconds\n     * setTimeout(() => {\n     *   fFilter.removeFilterCriteria();\n     * }, 3000);\n     * ```\n     */\n    removeFilterCriteria(): FFilter {\n        this._commandSrv.syncExecuteCommand(ClearSheetsFilterCriteriaCommand.id);\n        return this;\n    }\n\n    /**\n     * Remove the filter from the worksheet.\n     * @returns {boolean} True if the filter is removed successfully; otherwise, false.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:D14');\n     * let fFilter = fRange.createFilter();\n     *\n     * // If the worksheet already has a filter, remove it and create a new filter.\n     * if (!fFilter) {\n     *   fWorksheet.getFilter().remove();\n     *   fFilter = fRange.createFilter();\n     * }\n     * console.log(fFilter);\n     * ```\n     */\n    remove(): boolean {\n        return this._commandSrv.syncExecuteCommand(RemoveSheetFilterCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n        } as ISheetCommandSharedParams);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Nullable } from '@univerjs/core';\nimport type { FilterModel, ISetSheetFilterRangeCommandParams } from '@univerjs/sheets-filter';\nimport { SetSheetFilterRangeCommand, SheetsFilterService } from '@univerjs/sheets-filter';\nimport { FRange } from '@univerjs/sheets/facade';\nimport { FFilter } from './f-filter';\n\n// TODO: add jsdoc comments for the following API\n\n/**\n * @ignore\n */\nexport interface IFRangeFilter {\n    /**\n     * Create a filter for the current range. If the worksheet already has a filter, this method would return `null`.\n     * @returns {FFilter | null} The FFilter instance to handle the filter.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:D14');\n     * let fFilter = fRange.createFilter();\n     *\n     * // If the worksheet already has a filter, remove it and create a new filter.\n     * if (!fFilter) {\n     *   fWorksheet.getFilter().remove();\n     *   fFilter = fRange.createFilter();\n     * }\n     * console.log(fFilter, fFilter.getRange().getA1Notation());\n     * ```\n     */\n    createFilter(this: FRange): FFilter | null;\n\n    /**\n     * Get the filter in the worksheet to which the range belongs. If the worksheet does not have a filter, this method would return `null`.\n     * Normally, you can directly call `getFilter` on {@link FWorksheet}.\n     * @returns {FFilter | null} The FFilter instance to handle the filter.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:D14');\n     * let fFilter = fRange.getFilter();\n     *\n     * // If the worksheet does not have a filter, create a new filter.\n     * if (!fFilter) {\n     *    fFilter = fRange.createFilter();\n     * }\n     * console.log(fFilter, fFilter.getRange().getA1Notation());\n     * ```\n     */\n    getFilter(): FFilter | null;\n}\n\nexport class FRangeFilter extends FRange implements IFRangeFilter {\n    override createFilter(): FFilter | null {\n        if (this._getFilterModel()) return null;\n\n        const success = this._commandService.syncExecuteCommand(SetSheetFilterRangeCommand.id, <ISetSheetFilterRangeCommandParams>{\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            range: this._range,\n        });\n\n        if (!success) return null;\n\n        return this.getFilter();\n    }\n\n    /**\n     * Get the filter for the current range's worksheet.\n     * @returns {FFilter | null} The interface class to handle the filter. If the worksheet does not have a filter,\n     * this method would return `null`.\n     */\n    override getFilter(): FFilter | null {\n        const filterModel = this._getFilterModel();\n        if (!filterModel) return null;\n\n        return this._injector.createInstance(FFilter, this._workbook, this._worksheet, filterModel);\n    }\n\n    private _getFilterModel(): Nullable<FilterModel> {\n        return this._injector.get(SheetsFilterService).getFilterModel(\n            this._workbook.getUnitId(),\n            this._worksheet.getSheetId()\n        );\n    }\n}\n\nFRange.extend(FRangeFilter);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FRange extends IFRangeFilter { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Nullable } from '@univerjs/core';\nimport type { FilterModel } from '@univerjs/sheets-filter';\nimport { SheetsFilterService } from '@univerjs/sheets-filter';\nimport { FWorksheet } from '@univerjs/sheets/facade';\nimport { FFilter } from './f-filter';\n\n/**\n * @ignore\n */\nexport interface IFWorksheetFilter {\n    /**\n     * Get the filter for the current worksheet.\n     * @returns {FFilter | null} The interface class to handle the filter. If the worksheet does not have a filter,\n     * this method would return `null`.\n     * @example\n     * ```typescript\n     * const workbook = univerAPI.getActiveWorkbook();\n     * const worksheet = workbook.getActiveSheet();\n     * const filter = worksheet.getFilter();\n     * console.log(filter, filter?.getRange().getA1Notation());\n     * ```\n     */\n    getFilter(): FFilter | null;\n}\n\nexport class FWorksheetFilter extends FWorksheet implements IFWorksheetFilter {\n    override getFilter(): FFilter | null {\n        const filterModel = this._getFilterModel();\n        if (!filterModel) return null;\n\n        return this._injector.createInstance(FFilter, this._workbook, this._worksheet, filterModel);\n    }\n\n    private _getFilterModel(): Nullable<FilterModel> {\n        return this._injector.get(SheetsFilterService).getFilterModel(\n            this._workbook.getUnitId(),\n            this._worksheet.getSheetId()\n        );\n    }\n}\n\nFWorksheet.extend(FWorksheetFilter);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FWorksheet extends IFWorksheetFilter { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FEnum } from '@univerjs/core/facade';\nimport { CustomFilterOperator } from '@univerjs/sheets-filter';\n\n/**\n * @ignore\n */\nexport interface IFSheetsFilterEnumMixin {\n    /** Please refer to {@link CustomFilterOperator}. */\n    CustomFilterOperator: typeof CustomFilterOperator;\n}\n\nexport class FSheetsFilterEnumMixin implements IFSheetsFilterEnumMixin {\n    get CustomFilterOperator(): typeof CustomFilterOperator {\n        return CustomFilterOperator;\n    };\n}\n\nFEnum.extend(FSheetsFilterEnumMixin);\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FEnum extends IFSheetsFilterEnumMixin {\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommandInfo, Injector } from '@univerjs/core';\nimport type { IEventBase } from '@univerjs/core/facade';\nimport type { ISetSheetsFilterCriteriaCommandParams } from '@univerjs/sheets-filter';\nimport type { FWorkbook, FWorksheet } from '@univerjs/sheets/facade';\nimport { ICommandService } from '@univerjs/core';\nimport { FEventName, FUniver } from '@univerjs/core/facade';\nimport { ClearSheetsFilterCriteriaCommand, SetSheetsFilterCriteriaCommand } from '@univerjs/sheets-filter';\nimport { FSheetEventName } from '@univerjs/sheets/facade';\n\n/**\n * @ignore\n */\nexport interface IFSheetFilterEventMixin {\n    /**\n     * This event will be emitted when the filter criteria on a column is changed.\n     * @see {@link ISheetRangeFilteredParams}\n     * @example\n     * ```typescript\n     * const callbackDisposable = univerAPI.addEvent(univerAPI.Event.SheetRangeFiltered, (params) => {\n     *   console.log(params);\n     *   const { workbook, worksheet, col, criteria } = params;\n     *\n     *   // your custom logic\n     * });\n     *\n     * // Remove the event listener, use `callbackDisposable.dispose()`\n     * ```\n     */\n    readonly SheetRangeFiltered: 'SheetRangeFiltered';\n\n    /**\n     * This event will be emitted before the filter criteria on a column is changed.\n     * @see {@link ISheetRangeFilteredParams}\n     * @example\n     * ```typescript\n     * const callbackDisposable = univerAPI.addEvent(univerAPI.Event.SheetBeforeRangeFilter, (params) => {\n     *   console.log(params);\n     *   const { workbook, worksheet, col, criteria } = params;\n     *\n     *   // your custom logic\n     *\n     *   // Cancel the filter criteria change operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `callbackDisposable.dispose()`\n     * ```\n     */\n    readonly SheetBeforeRangeFilter: 'SheetBeforeRangeFilter';\n\n    /**\n     * This event will be emitted when the filter on a worksheet is cleared.\n     * @see {@link ISheetRangeFilterClearedEventParams}\n     * @example\n     * ```typescript\n     * const callbackDisposable = univerAPI.addEvent(univerAPI.Event.SheetRangeFilterCleared, (params) => {\n     *   console.log(params);\n     *   const { workbook, worksheet } = params;\n     *\n     *   // your custom logic\n     * });\n     *\n     * // Remove the event listener, use `callbackDisposable.dispose()`\n     * ```\n     */\n    readonly SheetRangeFilterCleared: 'SheetRangeFilterCleared';\n\n    /**\n     * This event will be emitted after the filter on a worksheet is cleared.\n     * @see {@link ISheetRangeFilterClearedEventParams}\n     * @example\n     * ```typescript\n     * const callbackDisposable = univerAPI.addEvent(univerAPI.Event.SheetBeforeRangeFilterClear, (params) => {\n     *   console.log(params);\n     *   const { workbook, worksheet } = params;\n     *\n     *   // your custom logic\n     *\n     *   // Cancel the filter clear operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `callbackDisposable.dispose()`\n     * ```\n     */\n    readonly SheetBeforeRangeFilterClear: 'SheetBeforeRangeFilterClear';\n}\n\nexport class FSheetFilterEventName extends FEventName implements IFSheetFilterEventMixin {\n    override get SheetBeforeRangeFilter(): 'SheetBeforeRangeFilter' { return 'SheetBeforeRangeFilter'; }\n    override get SheetRangeFiltered(): 'SheetRangeFiltered' { return 'SheetRangeFiltered'; }\n    override get SheetRangeFilterCleared(): 'SheetRangeFilterCleared' { return 'SheetRangeFilterCleared'; };\n    override get SheetBeforeRangeFilterClear(): 'SheetBeforeRangeFilterClear' { return 'SheetBeforeRangeFilterClear'; }\n}\n\nFEventName.extend(FSheetFilterEventName);\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FEventName extends IFSheetFilterEventMixin { }\n}\n\n/**\n * The params of SheetRangeFiltered and SheetBeforeRangeFilter events.\n * @param workbook - The corresponding workbook wrapped in {@link FWorkbook}.\n * @param worksheet - The corresponding worksheet wrapped in {@link FWorksheet}.\n * @param col - The column on which the filter criteria is changed.\n * @param criteria - Raw filter criteria.\n */\nexport interface ISheetRangeFilteredParams extends IEventBase, Pick<ISetSheetsFilterCriteriaCommandParams, 'criteria' | 'col'> {\n    workbook: FWorkbook;\n    worksheet: FWorksheet;\n}\n\n/**\n * The params of SheetRangeFilterCleared and SheetBeforeRangeFilterClear events.\n * @param workbook - The corresponding workbook wrapped in {@link FWorkbook}.\n * @param worksheet - The corresponding worksheet wrapped in {@link FWorksheet}.\n */\nexport interface ISheetRangeFilterClearedEventParams extends IEventBase {\n    workbook: FWorkbook;\n    worksheet: FWorksheet;\n}\n\n/**\n * @ignore\n */\ninterface ISheetRangeFilterEventParamConfig {\n    SheetBeforeRangeFilter: ISheetRangeFilteredParams;\n    SheetRangeFiltered: ISheetRangeFilteredParams;\n    SheetBeforeRangeFilterClear: ISheetRangeFilterClearedEventParams;\n    SheetRangeFilterCleared: ISheetRangeFilterClearedEventParams;\n}\n\nFEventName.extend(FSheetEventName);\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FEventName extends IFSheetFilterEventMixin { }\n    interface IEventParamConfig extends ISheetRangeFilterEventParamConfig { }\n}\n\nclass FUniverSheetsFilterEventMixin extends FUniver {\n    /**\n     * @ignore\n     */\n    override _initialize(injector: Injector): void {\n        const commandService = injector.get(ICommandService);\n\n        // Register filter criteria set event handlers\n        this.registerEventHandler(\n            this.Event.SheetBeforeRangeFilter,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id === SetSheetsFilterCriteriaCommand.id) {\n                    this._beforeRangeFilter(commandInfo as Readonly<ICommandInfo<ISetSheetsFilterCriteriaCommandParams>>);\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.SheetBeforeRangeFilterClear,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id === ClearSheetsFilterCriteriaCommand.id) {\n                    this._beforeRangeFilterClear();\n                }\n            })\n        );\n\n        // Register filter criteria execution event handlers\n        this.registerEventHandler(\n            this.Event.SheetRangeFiltered,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id === SetSheetsFilterCriteriaCommand.id) {\n                    this._onRangeFiltered(commandInfo as Readonly<ICommandInfo<ISetSheetsFilterCriteriaCommandParams>>);\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.SheetRangeFilterCleared,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id === ClearSheetsFilterCriteriaCommand.id) {\n                    this._onRangeFilterCleared();\n                }\n            })\n        );\n    }\n\n    private _beforeRangeFilter(commandInfo: Readonly<ICommandInfo<ISetSheetsFilterCriteriaCommandParams>>): void {\n        const params = commandInfo.params!;\n        const fWorkbook = this.getUniverSheet(params.unitId)!;\n        const eventParams: ISheetRangeFilteredParams = {\n            workbook: fWorkbook,\n            worksheet: fWorkbook.getSheetBySheetId(params.subUnitId)!,\n            col: params.col,\n            criteria: params.criteria,\n        };\n\n        this.fireEvent(this.Event.SheetBeforeRangeFilter, eventParams);\n        if (eventParams.cancel) {\n            throw new Error('SetSheetsFilterCriteriaCommand canceled.');\n        }\n    }\n\n    private _onRangeFiltered(commandInfo: Readonly<ICommandInfo<ISetSheetsFilterCriteriaCommandParams>>): void {\n        const params = commandInfo.params!;\n        const fWorkbook = this.getUniverSheet(params.unitId)!;\n        const eventParams: ISheetRangeFilteredParams = {\n            workbook: fWorkbook,\n            worksheet: fWorkbook.getSheetBySheetId(params.subUnitId)!,\n            col: params.col,\n            criteria: params.criteria,\n        };\n\n        this.fireEvent(this.Event.SheetRangeFiltered, eventParams);\n    }\n\n    private _beforeRangeFilterClear(): void {\n        const fWorkbook = this.getActiveWorkbook();\n        if (!fWorkbook) return;\n\n        const eventParams: ISheetRangeFilterClearedEventParams = {\n            workbook: fWorkbook,\n            worksheet: fWorkbook.getActiveSheet(),\n        };\n\n        this.fireEvent(this.Event.SheetBeforeRangeFilterClear, eventParams);\n        if (eventParams.cancel) {\n            throw new Error('SetSheetsFilterCriteriaCommand canceled.');\n        }\n    }\n\n    private _onRangeFilterCleared(): void {\n        const fWorkbook = this.getActiveWorkbook();\n        if (!fWorkbook) return;\n\n        const eventParams: ISheetRangeFilterClearedEventParams = {\n            workbook: fWorkbook,\n            worksheet: fWorkbook.getActiveSheet(),\n        };\n\n        this.fireEvent(this.Event.SheetRangeFilterCleared, eventParams);\n    }\n}\n\nFUniver.extend(FUniverSheetsFilterEventMixin);\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable } from '@univerjs/core';\nimport type { IRegisterFunctionParams } from '@univerjs/sheets-formula';\nimport { debounce } from '@univerjs/core';\nimport { FUniver } from '@univerjs/core/facade';\nimport { SetFormulaCalculationStartMutation } from '@univerjs/engine-formula';\nimport { IRegisterFunctionService, RegisterFunctionService } from '@univerjs/sheets-formula';\n\n/**\n * @ignore\n */\nexport interface IFUniverSheetsFormulaMixin {\n    /**\n     * Register a function to the spreadsheet.\n     * @deprecated Use `univerAPI.getFormula().registerFunction` instead.\n     * @param {IRegisterFunctionParams} config The configuration of the function.\n     * @returns {IDisposable} The disposable instance.\n     */\n    registerFunction(config: IRegisterFunctionParams): IDisposable;\n}\n\n/**\n * @ignore\n */\nexport class FUniverSheetsFormulaMixin extends FUniver implements IFUniverSheetsFormulaMixin {\n    /**\n     * RegisterFunction may be executed multiple times, triggering multiple formula forced refreshes.\n     */\n    declare private _debouncedFormulaCalculation: () => void;\n\n    /**\n     * Initialize the FUniver instance.\n     * @ignore\n     */\n    override _initialize(): void {\n        this._debouncedFormulaCalculation = debounce(() => {\n            this._commandService.executeCommand(\n                SetFormulaCalculationStartMutation.id,\n                {\n                    commands: [],\n                    forceCalculation: true,\n                },\n                {\n                    onlyLocal: true,\n                }\n            );\n        }, 10);\n    }\n\n    override registerFunction(config: IRegisterFunctionParams): IDisposable {\n        let registerFunctionService = this._injector.get(IRegisterFunctionService);\n\n        if (!registerFunctionService) {\n            this._injector.add([IRegisterFunctionService, { useClass: RegisterFunctionService }]);\n            registerFunctionService = this._injector.get(IRegisterFunctionService);\n        }\n\n        const functionsDisposable = registerFunctionService.registerFunctions(config);\n\n        // When the initialization workbook data already contains custom formulas, and then register the formula, you need to trigger a forced calculation to refresh the calculation results\n        // TODO@Dushusir: this should be moved to the services not API.\n        this._debouncedFormulaCalculation();\n        return functionsDisposable;\n    }\n}\n\nFUniver.extend(FUniverSheetsFormulaMixin);\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FUniver extends IFUniverSheetsFormulaMixin {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, ILocales } from '@univerjs/core';\n\nimport type { IFunctionInfo } from '@univerjs/engine-formula';\nimport type { CalculationMode, IRegisterAsyncFunction, IRegisterFunction, ISingleFunctionRegisterParams, IUniverSheetsFormulaBaseConfig } from '@univerjs/sheets-formula';\nimport { debounce, IConfigService, ILogService, LifecycleService, LifecycleStages } from '@univerjs/core';\nimport { SetFormulaCalculationStartMutation } from '@univerjs/engine-formula';\nimport { FFormula } from '@univerjs/engine-formula/facade';\nimport { IRegisterFunctionService, PLUGIN_CONFIG_KEY_BASE, RegisterFunctionService } from '@univerjs/sheets-formula';\n\n/**\n * @ignore\n */\nexport interface IFFormulaSheetsMixin {\n    /**\n     * Update the calculation mode of the formula. It will take effect the next time the Univer Sheet is constructed.\n     * The calculation mode only handles formulas data when the workbook initializes data.\n     * @param {CalculationMode} calculationMode - The calculation mode of the formula.\n     * @example\n     * ```ts\n     * const formulaEngine = univerAPI.getFormula();\n     * formulaEngine.setInitialFormulaComputing(0);\n     * ```\n     */\n    setInitialFormulaComputing(calculationMode: CalculationMode): void;\n\n    /**\n     * Register a custom synchronous formula function.\n     * @param {string} name - The name of the function to register. This will be used in formulas (e.g., =MYFUNC()).\n     * @param {IRegisterFunction} func - The implementation of the function.\n     * @param {string} [description] - A string describing the function's purpose and usage.\n     * @returns {IDisposable} A disposable object that will unregister the function when disposed.\n     * @example\n     * ```ts\n     * // Register a simple greeting function\n     * const formulaEngine = univerAPI.getFormula();\n     * formulaEngine.registerFunction(\n     *   'HELLO',\n     *   (name) => `Hello, ${name}!`,\n     *   'A simple greeting function'\n     * );\n     *\n     * // Use the function in a cell\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const cellA1 = fWorksheet.getRange('A1');\n     * cellA1.setValue('World');\n     * const cellA2 = fWorksheet.getRange('A2');\n     * cellA2.setValue({ f: '=HELLO(A1)' });\n     *\n     * // A2 will display: \"Hello, World!\"\n     * formulaEngine.calculationEnd((functionsExecutedState) => {\n     *   if (functionsExecutedState === 3) {\n     *     console.log(cellA2.getValue()); // Hello, World!\n     *   }\n     * })\n     * ```\n     * @example\n     * ```ts\n     * // Register a discount calculation function\n     * const formulaEngine = univerAPI.getFormula();\n     * formulaEngine.registerFunction(\n     *   'DISCOUNT',\n     *   (price, discountPercent) => price * (1 - discountPercent / 100),\n     *   'Calculates final price after discount'\n     * );\n     *\n     * // Use the function in a cell\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const cellA1 = fWorksheet.getRange('A1');\n     * cellA1.setValue(100);\n     * const cellA2 = fWorksheet.getRange('A2');\n     * cellA2.setValue({ f: '=DISCOUNT(A1, 20)' });\n     *\n     * // A2 will display: 80\n     * formulaEngine.calculationEnd((functionsExecutedState) => {\n     *   if (functionsExecutedState === 3) {\n     *     console.log(cellA2.getValue()); // 80\n     *   }\n     * })\n     * ```\n     * @example\n     * ```ts\n     * // Registered formulas support lambda functions\n     * const formulaEngine = univerAPI.getFormula();\n     * formulaEngine.registerFunction(\n     *   'CUSTOMSUM',\n     *   (...variants) => {\n     *     let sum = 0;\n     *     const last = variants[variants.length - 1];\n     *\n     *     if (last.isLambda && last.isLambda()) {\n     *       variants.pop();\n     *       const variantsList = variants.map((variant) => Array.isArray(variant) ? variant[0][0]: variant);\n     *       sum += last.executeCustom(...variantsList).getValue();\n     *     }\n     *\n     *     for (const variant of variants) {\n     *       sum += Number(variant) || 0;\n     *     }\n     *\n     *     return sum;\n     *   },\n     *   'Adds its arguments'\n     * );\n     *\n     * // Use the function in a cell\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const cellA1 = fWorksheet.getRange('A1');\n     * cellA1.setValue(1);\n     * const cellA2 = fWorksheet.getRange('A2');\n     * cellA2.setValue(2);\n     * const cellA3 = fWorksheet.getRange('A3');\n     * cellA3.setValue({ f: '=CUSTOMSUM(A1,A2,LAMBDA(x,y,x*y))' });\n     *\n     * // A3 will display: 5\n     * formulaEngine.calculationEnd((functionsExecutedState) => {\n     *   if (functionsExecutedState === 3) {\n     *     console.log(cellA3.getValue()); // 5\n     *   }\n     * })\n     * ```\n     */\n    registerFunction(name: string, func: IRegisterFunction, description?: string): IDisposable;\n    /**\n     * Register a custom synchronous formula function with localization support.\n     * @param {string} name - The name of the function to register. This will be used in formulas (e.g., =MYFUNC()).\n     * @param {IRegisterFunction} func - The implementation of the function.\n     * @param {{ locales?: ILocales; description?: string | IFunctionInfo }} [options] - Object containing locales and description.\n     * @param {ILocales} options.locales - Object containing locales.\n     * @param {string | IFunctionInfo} options.description - Object containing description.\n     * @returns {IDisposable} A disposable object that will unregister the function when disposed.\n     * @example\n     * ```js\n     * // Register a simple greeting function\n     * const formulaEngine = univerAPI.getFormula();\n     * formulaEngine.registerFunction(\n     *   'HELLO',\n     *   (name) => `Hello, ${name}!`,\n     *   {\n     *     description: 'customFunction.HELLO.description',\n     *     locales: {\n     *       'zhCN': {\n     *         'customFunction': {\n     *           'HELLO': {\n     *             'description': '\u4E00\u4E2A\u7B80\u5355\u7684\u95EE\u5019\u51FD\u6570'\n     *           }\n     *         }\n     *       },\n     *       'enUS': {\n     *         'customFunction': {\n     *           'HELLO': {\n     *             'description': 'A simple greeting function'\n     *           }\n     *         }\n     *       }\n     *     }\n     *   }\n     * );\n     *\n     * // Use the function in a cell\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const cellA1 = fWorksheet.getRange('A1');\n     * cellA1.setValue('World');\n     * const cellA2 = fWorksheet.getRange('A2');\n     * cellA2.setValue({ f: '=HELLO(A1)' });\n     *\n     * // A2 will display: \"Hello, World!\"\n     * formulaEngine.calculationEnd((functionsExecutedState) => {\n     *   if (functionsExecutedState === 3) {\n     *     console.log(cellA2.getValue()); // Hello, World!\n     *   }\n     * })\n     * ```\n     */\n    registerFunction(name: string, func: IRegisterFunction, { locales, description }: { locales?: ILocales; description?: string | IFunctionInfo }): IDisposable;\n\n    /**\n     * Register a custom asynchronous formula function.\n     * @param {string} name - The name of the function to register. This will be used in formulas (e.g., =ASYNCFUNC()).\n     * @param {IRegisterAsyncFunction} func - The async implementation of the function.\n     * @param {string} [description] - A string describing the function's purpose and usage.\n     * @returns {IDisposable} A disposable object that will unregister the function when disposed.\n     * @example\n     * ```ts\n     * const formulaEngine = univerAPI.getFormula();\n     * formulaEngine.registerAsyncFunction(\n     *   'RANDOM_DELAYED',\n     *   async () => {\n     *     await new Promise(resolve => setTimeout(resolve, 500));\n     *     return Math.random();\n     *   },\n     *   'Mock a random number generation function'\n     * );\n     *\n     * // Use the function in a cell\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const cellA1 = fWorksheet.getRange('A1');\n     * cellA1.setValue({ f: '=RANDOM_DELAYED()' });\n     *\n     * // After 0.5 second, A1 will display a random number\n     * ```\n     */\n    registerAsyncFunction(name: string, func: IRegisterAsyncFunction, description?: string): IDisposable;\n    /**\n     * Register a custom asynchronous formula function with description.\n     * @param {string} name - The name of the function to register. This will be used in formulas (e.g., =ASYNCFUNC()).\n     * @param {IRegisterAsyncFunction} func - The async implementation of the function.\n     * @param {{ locales?: ILocales; description?: string | IFunctionInfo }} [options] - Object containing locales and description.\n     * @param {ILocales} options.locales - Object containing locales.\n     * @param {string | IFunctionInfo} options.description - Object containing description.\n     * @returns {IDisposable} A disposable object that will unregister the function when disposed.\n     * @example\n     * ```ts\n     * // Mock a user score fetching function\n     * const formulaEngine = univerAPI.getFormula();\n     * formulaEngine.registerAsyncFunction(\n     *   'FETCH_USER_SCORE',\n     *   async (userId) => {\n     *     await new Promise(resolve => setTimeout(resolve, 1000));\n     *     // Mock fetching user score from database\n     *     return userId * 10 + Math.floor(Math.random() * 20);\n     *   },\n     *   {\n     *     description: 'customFunction.FETCH_USER_SCORE.description',\n     *     locales: {\n     *       'zhCN': {\n     *         'customFunction': {\n     *           'FETCH_USER_SCORE': {\n     *             'description': '\u4ECE\u6570\u636E\u5E93\u4E2D\u83B7\u53D6\u7528\u6237\u5206\u6570'\n     *           }\n     *         }\n     *       },\n     *       'enUS': {\n     *         'customFunction': {\n     *           'FETCH_USER_SCORE': {\n     *             'description': 'Mock fetching user score from database'\n     *           }\n     *         }\n     *       }\n     *     }\n     *   }\n     * );\n     *\n     * // Use the function in a cell\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const cellA1 = fWorksheet.getRange('A1');\n     * cellA1.setValue({ f: '=FETCH_USER_SCORE(42)' });\n     *\n     * // After 1 second, A1 will display a score\n     * ```\n     */\n    registerAsyncFunction(name: string, func: IRegisterAsyncFunction, { locales, description }: { locales?: ILocales; description?: string | IFunctionInfo }): IDisposable;\n}\n\nexport class FFormulaSheetsMixin extends FFormula implements IFFormulaSheetsMixin {\n    /**\n     * RegisterFunction may be executed multiple times, triggering multiple formula forced refreshes.\n     */\n    declare private _debouncedFormulaCalculation: () => void;\n\n    /**\n     * Initialize the FUniver instance.\n     * @ignore\n     */\n    override _initialize(): void {\n        this._debouncedFormulaCalculation = debounce(() => {\n            this._commandService.executeCommand(\n                SetFormulaCalculationStartMutation.id,\n                {\n                    commands: [],\n                    forceCalculation: true,\n                },\n                {\n                    onlyLocal: true,\n                }\n            );\n        }, 10);\n    }\n\n    override setInitialFormulaComputing(calculationMode: CalculationMode): void {\n        const lifecycleService = this._injector.get(LifecycleService);\n        const lifecycleStage = lifecycleService.stage;\n\n        const logService = this._injector.get(ILogService);\n        const configService = this._injector.get(IConfigService);\n\n        if (lifecycleStage > LifecycleStages.Starting) {\n            logService.warn('[FFormula]', 'CalculationMode is called after the Starting lifecycle and will take effect the next time the Univer Sheet is constructed. If you want it to take effect when the Univer Sheet is initialized this time, consider calling it before the Ready lifecycle or using configuration.');\n        }\n\n        const config = configService.getConfig<Partial<IUniverSheetsFormulaBaseConfig>>(PLUGIN_CONFIG_KEY_BASE);\n\n        if (!config) {\n            configService.setConfig(PLUGIN_CONFIG_KEY_BASE, { initialFormulaComputing: calculationMode });\n            return;\n        }\n\n        config.initialFormulaComputing = calculationMode;\n    }\n\n    override registerFunction(name: string, func: IRegisterFunction): IDisposable;\n    override registerFunction(name: string, func: IRegisterFunction, description: string): IDisposable;\n    override registerFunction(\n        name: string,\n        func: IRegisterFunction,\n        options?: string | { locales?: ILocales; description?: string | IFunctionInfo }\n    ): IDisposable {\n        let registerFunctionService = this._injector.get(IRegisterFunctionService);\n\n        if (!registerFunctionService) {\n            this._injector.add([IRegisterFunctionService, { useClass: RegisterFunctionService }]);\n            registerFunctionService = this._injector.get(IRegisterFunctionService);\n        }\n\n        const params: ISingleFunctionRegisterParams = {\n            name,\n            func,\n            description: typeof options === 'string' ? options : options?.description ?? '',\n            locales: typeof options === 'object' ? options.locales : undefined,\n        };\n\n        const functionsDisposable = registerFunctionService.registerFunction(params);\n        this._debouncedFormulaCalculation();\n        return functionsDisposable;\n    }\n\n    override registerAsyncFunction(name: string, func: IRegisterAsyncFunction): IDisposable;\n    override registerAsyncFunction(name: string, func: IRegisterAsyncFunction, description: string): IDisposable;\n    override registerAsyncFunction(\n        name: string,\n        func: IRegisterAsyncFunction,\n        options?: string | { locales?: ILocales; description?: string | IFunctionInfo }\n    ): IDisposable {\n        let registerFunctionService = this._injector.get(IRegisterFunctionService);\n\n        if (!registerFunctionService) {\n            this._injector.add([IRegisterFunctionService, { useClass: RegisterFunctionService }]);\n            registerFunctionService = this._injector.get(IRegisterFunctionService);\n        }\n\n        const params: ISingleFunctionRegisterParams = {\n            name,\n            func,\n            description: typeof options === 'string' ? options : options?.description ?? '',\n            locales: typeof options === 'object' ? options.locales : undefined,\n        };\n\n        const functionsDisposable = registerFunctionService.registerAsyncFunction(params);\n        this._debouncedFormulaCalculation();\n        return functionsDisposable;\n    }\n}\n\nFFormula.extend(FFormulaSheetsMixin);\ndeclare module '@univerjs/engine-formula/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FFormula extends IFFormulaSheetsMixin {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ISetNumfmtCommandParams } from '@univerjs/sheets-numfmt';\nimport { SetNumfmtCommand } from '@univerjs/sheets-numfmt';\nimport { FRange } from '@univerjs/sheets/facade';\n\n/**\n * @ignore\n */\nexport interface IFRangeSheetsNumfmtMixin {\n    // TODO@wzhudev: should separate numfmt package to two\n\n    /**\n     * Set the number format of the range.\n     * @param {string} pattern - The number format pattern.\n     * @returns {FRange} The FRange instance for chaining.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set the number format of the A1 cell to '#,##0.00'.\n     * const fRange = fWorksheet.getRange('A1');\n     * fRange.setValue(1234.567).setNumberFormat('#,##0.00');\n     * console.log(fRange.getDisplayValue()); // 1,234.57\n     * ```\n     */\n    setNumberFormat(pattern: string): FRange;\n\n    /**\n     * Sets a rectangular grid of number formats (must match dimensions of this range).\n     * @param {string[][]} patterns - A two-dimensional array of number formats.\n     * @returns {FRange} The FRange instance for chaining.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set the number formats of the A1:B2 range.\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * fRange.setValues([\n     *   [1234.567, 0.1234],\n     *   [45658, 0.9876]\n     * ]).setNumberFormats([\n     *   ['#,##0.00', '0.00%'],\n     *   ['yyyy-MM-DD', '']\n     * ]);\n     * console.log(fRange.getDisplayValues()); // [['1,234.57', '12.34%'], ['2025-01-01', 0.9876]]\n     * ```\n     */\n    setNumberFormats(patterns: string[][]): FRange;\n\n    /**\n     * Get the number formatting of the top-left cell of the given range. Empty cells return an empty string.\n     * @returns {string} The number format of the top-left cell of the range.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Get the number format of the top-left cell of the A1:B2 range.\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getNumberFormat());\n     * ```\n     */\n    getNumberFormat(): string;\n\n    /**\n     * Returns the number formats for the cells in the range.\n     * @returns {string[][]} A two-dimensional array of number formats.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Get the number formats of the A1:B2 range.\n     * const fRange = fWorksheet.getRange('A1:B2');\n     * console.log(fRange.getNumberFormats());\n     * ```\n     */\n    getNumberFormats(): string[][];\n}\n\nexport class FRangeLegacy extends FRange implements IFRangeSheetsNumfmtMixin {\n    override setNumberFormat(pattern: string): FRange {\n        // TODO@Gggpound: the API should support other types of parameters\n        const values: ISetNumfmtCommandParams['values'] = [];\n\n        // Add number format info to the `values` array.\n        this.forEach((row, col) => values.push({ row, col, pattern }));\n        this._commandService.syncExecuteCommand(SetNumfmtCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            values,\n        } as ISetNumfmtCommandParams);\n\n        return this;\n    }\n\n    override setNumberFormats(patterns: string[][]): FRange {\n        const values: ISetNumfmtCommandParams['values'] = [];\n\n        // Add number format info to the `values` array.\n        this.forEach((row, col) => {\n            const pattern = patterns[row]?.[col];\n            values.push({ row, col, pattern });\n        });\n        this._commandService.syncExecuteCommand(SetNumfmtCommand.id, {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            values,\n        } as ISetNumfmtCommandParams);\n\n        return this;\n    }\n\n    override getNumberFormat(): string {\n        const style = this.getCellStyle();\n        return style?.numberFormat?.pattern ?? '';\n    }\n\n    override getNumberFormats(): string[][] {\n        const styles = this.getCellStyles();\n        return styles.map((row) => row.map((cellStyle) => cellStyle?.numberFormat?.pattern ?? ''));\n    }\n}\n\nFRange.extend(FRangeLegacy);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FRange extends IFRangeSheetsNumfmtMixin { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { INumfmtLocalTag } from '@univerjs/core';\nimport { SheetsNumfmtCellContentController } from '@univerjs/sheets-numfmt';\nimport { FWorkbook } from '@univerjs/sheets/facade';\n\nexport interface IFWorkbookNumfmtMixin {\n    /**\n     * Set the locale for number formatting.\n     * @param {INumfmtLocalTag} local zh_CN,zh_TW,zh_HK,ja,ko,th,cs,da,nl,en,en_AU,en_CA,en_GB,en_IE,fi,fr,fr_CA,fr_CH,de,de_CH,el,hu,is,id,it,it_CH,nb,no,pl,pt,pt_BR,ru,sk,es,es_AR,es_BO,es_CL,es_CO,es_EC,es_MX,es_PY,es_UY,es_VE,sv,tr,cy,az,be,bg,ca,fil,gu,he,hr,hy,ka,kk,kn,lt,lv,ml,mn,mr,my,pa,ro,sl,sr,ta,te,uk,vi,ar,bn,hi\n     * @returns {FWorkbook} The FWorkbook instance for chaining.\n     * @memberof IFWorkbookNumfmtMixin\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1');\n     * fRange.setValue(1234.567).setNumberFormat('#,##0.00');\n     *\n     * // Set the locale en_US for number formatting.\n     * fWorkbook.setNumfmtLocal('en_US');\n     * console.log(fRange.getDisplayValue()); // 1,234.57\n     *\n     * // Set the locale de_DE for number formatting.\n     * fWorkbook.setNumfmtLocal('de_DE');\n     * console.log(fRange.getDisplayValue()); // 1.234,57\n     * ```\n     */\n    setNumfmtLocal(local: INumfmtLocalTag): FWorkbook;\n}\nexport class FWorkbookLegacy extends FWorkbook implements IFWorkbookNumfmtMixin {\n    override setNumfmtLocal(local: INumfmtLocalTag): FWorkbook {\n        const sheetsNumfmtCellContentController = this._injector.get(SheetsNumfmtCellContentController);\n        sheetsNumfmtCellContentController.setNumfmtLocal(local);\n        return this;\n    }\n}\nFWorkbook.extend(FWorkbookLegacy);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FWorkbook extends IFWorkbookNumfmtMixin { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IRange } from '@univerjs/core';\nimport type { ISheetHyperLinkInfo } from '@univerjs/sheets-hyper-link';\nimport type { FRange } from '@univerjs/sheets/facade';\nimport { Inject } from '@univerjs/core';\nimport { SheetsHyperLinkParserService } from '@univerjs/sheets-hyper-link';\nimport { FWorkbook } from '@univerjs/sheets/facade';\n\n/**\n * @hideconstructor\n */\nexport class SheetHyperLinkBuilder {\n    constructor(\n        private _workbook: FWorkbook,\n        @Inject(SheetsHyperLinkParserService) private readonly _parserService: SheetsHyperLinkParserService\n    ) {}\n\n    getRangeUrl(range: FRange): this {\n        this._parserService.buildHyperLink(this._workbook.getId(), range.getSheetId(), range.getRange());\n        return this;\n    }\n}\n\n/**\n * @ignore\n */\nexport interface IFWorkbookHyperlinkMixin {\n    /**\n     * @deprecated use `getUrl` method in `FRange` or `FWorksheet` instead.\n     */\n    createSheetHyperlink(this: FWorkbook, sheetId: string, range?: string | IRange): string;\n\n    /**\n     * Parse the hyperlink string to get the hyperlink info.\n     * @param {string} hyperlink - The hyperlink string.\n     * @returns {ISheetHyperLinkInfo} The hyperlink info.\n     * @example\n     * ``` ts\n     * // Create a hyperlink to the range A1:D10 of the current sheet\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const hyperlink = fRange.getUrl();\n     *\n     * // Parse the hyperlink\n     * const hyperlinkInfo = fWorkbook.parseSheetHyperlink(hyperlink);\n     * console.log(hyperlinkInfo);\n     * ```\n     */\n    parseSheetHyperlink(this: FWorkbook, hyperlink: string): ISheetHyperLinkInfo;\n}\n\nexport class FWorkbookHyperLinkMixin extends FWorkbook implements IFWorkbookHyperlinkMixin {\n    override createSheetHyperlink(sheetId: string, range?: string | IRange): string {\n        const parserService = this._injector.get(SheetsHyperLinkParserService);\n        return parserService.buildHyperLink(this.getId(), sheetId, range);\n    }\n\n    /**\n     * Parse the hyperlink string to get the hyperlink info.\n     * @param {string} hyperlink the hyperlink string\n     * @returns {ISheetHyperLinkInfo} the hyperlink info\n     */\n    override parseSheetHyperlink(hyperlink: string): ISheetHyperLinkInfo {\n        const resolverService = this._injector.get(SheetsHyperLinkParserService);\n        return resolverService.parseHyperLink(hyperlink);\n    }\n}\n\nFWorkbook.extend(FWorkbookHyperLinkMixin);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FWorkbook extends IFWorkbookHyperlinkMixin {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SheetsHyperLinkParserService } from '@univerjs/sheets-hyper-link';\nimport { FWorksheet } from '@univerjs/sheets/facade';\n\n/**\n * @ignore\n */\nexport interface IFWorksheetHyperlinkMixin {\n    /**\n     * Create a hyperlink url to this sheet\n     * @returns {string} The url of this sheet\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const url = fWorksheet.getUrl();\n     * console.log(url);\n     * ```\n     */\n    getUrl(): string;\n}\n\nexport class FWorksheetHyperlinkMixin extends FWorksheet implements IFWorksheetHyperlinkMixin {\n    override getUrl(): string {\n        const parserService = this._injector.get(SheetsHyperLinkParserService);\n        return parserService.buildHyperLink(this._workbook.getUnitId(), this._worksheet.getSheetId());\n    }\n}\n\nFWorksheet.extend(FWorksheetHyperlinkMixin);\n\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FWorksheet extends IFWorksheetHyperlinkMixin {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAddHyperLinkCommandParams, ICancelHyperLinkCommandParams, IUpdateHyperLinkCommandParams } from '@univerjs/sheets-hyper-link';\nimport { CustomRangeType, DataStreamTreeTokenType, generateRandomId } from '@univerjs/core';\nimport { AddHyperLinkCommand, CancelHyperLinkCommand, SheetsHyperLinkParserService, UpdateHyperLinkCommand } from '@univerjs/sheets-hyper-link';\nimport { FRange } from '@univerjs/sheets/facade';\n\nexport interface ICellHyperLink {\n    id: string;\n    startIndex: number;\n    endIndex: number;\n    url: string;\n    label: string;\n}\n\n/**\n * @ignore\n */\nexport interface IFRangeHyperlinkMixin {\n    /**\n     * @deprecated use `range.setRichTextValueForCell(univerAPI.newRichText().insertLink(label, url))` instead\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a hyperlink to Univer on cell A1\n     * const fRange = fWorksheet.getRange('A1');\n     * const richText = univerAPI.newRichText().insertLink('Univer', 'https://univer.ai/');\n     * fRange.setRichTextValueForCell(richText);\n     * ```\n     */\n    setHyperLink(url: string, label?: string): Promise<boolean>;\n\n    /**\n     * @deprecated use `range.setRichTextValueForCell(range.getValue(true).getLinks())` instead\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a hyperlink to Univer on cell A1\n     * const fRange = fWorksheet.getRange('A1');\n     * const richText = univerAPI.newRichText().insertLink('Univer', 'https://univer.ai/');\n     * fRange.setRichTextValueForCell(richText);\n     *\n     * // Get hyperlinks from cell A1\n     * console.log(fRange.getValue(true).getLinks());\n     * ```\n     */\n    getHyperLinks(): ICellHyperLink[];\n\n    /**\n     * @deprecated use `range.setRichTextValueForCell(range.getValue(true).copy().updateLink(id, url))` instead\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1');\n     * const richText = univerAPI.newRichText().insertLink('Univer', 'https://univer.ai/');\n     * fRange.setRichTextValueForCell(richText);\n     *\n     * // Update hyperlink after 3 seconds\n     * setTimeout(() => {\n     *   const cellValue = fRange.getValue(true);\n     *   const hyperlinks = cellValue.getLinks();\n     *   const id = hyperlinks[0].rangeId;\n     *   const newUrl = 'https://insight.univer.ai/';\n     *   const newRichText = cellValue.copy().updateLink(id, newUrl);\n     *   fRange.setRichTextValueForCell(newRichText);\n     * }, 3000);\n     * ```\n     */\n    updateHyperLink(id: string, url: string, label?: string): Promise<boolean>;\n\n    /**\n     * @deprecated use `range.setRichTextValueForCell(range.getValue(true).copy().cancelLink(id))` instead\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1');\n     * const richText = univerAPI.newRichText().insertLink('Univer', 'https://univer.ai/');\n     * fRange.setRichTextValueForCell(richText);\n     *\n     * // Cancel hyperlink after 3 seconds\n     * setTimeout(() => {\n     *   const cellValue = fRange.getValue(true);\n     *   const hyperlinks = cellValue.getLinks();\n     *   const id = hyperlinks[0].rangeId;\n     *   const newRichText = cellValue.copy().cancelLink(id);\n     *   fRange.setRichTextValueForCell(newRichText);\n     * }, 3000);\n     * ```\n     */\n    cancelHyperLink(id: string): boolean;\n\n    /**\n     * Create a hyperlink url to this range\n     * @returns {string} The url of this range\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1');\n     * const url = fRange.getUrl();\n     * console.log(url);\n     * ```\n     */\n    getUrl(): string;\n}\n\nexport class FRangeHyperlinkMixin extends FRange implements IFRangeHyperlinkMixin {\n    // #region hyperlink\n\n    override setHyperLink(url: string, label?: string): Promise<boolean> {\n        const params: IAddHyperLinkCommandParams = {\n            unitId: this.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            link: {\n                row: this._range.startRow,\n                column: this._range.startColumn,\n                payload: url,\n                display: label,\n                id: generateRandomId(),\n            },\n        };\n\n        return this._commandService.executeCommand(AddHyperLinkCommand.id, params);\n    }\n\n    override getHyperLinks(): ICellHyperLink[] {\n        const cellValue = this._worksheet.getCellRaw(this._range.startRow, this._range.startColumn);\n        if (!cellValue?.p) {\n            return [];\n        }\n\n        return cellValue.p.body?.customRanges\n            ?.filter((range) => range.rangeType === CustomRangeType.HYPERLINK)\n            .map((range) => ({\n                id: `${range.rangeId}`,\n                startIndex: range.startIndex,\n                endIndex: range.endIndex,\n                url: range.properties?.url ?? '',\n                label: cellValue.p?.body?.dataStream.slice(range.startIndex, range.endIndex + 1).replaceAll(DataStreamTreeTokenType.CUSTOM_RANGE_START, '').replaceAll(DataStreamTreeTokenType.CUSTOM_RANGE_END, '') ?? '',\n            })) ?? [];\n    }\n\n    override updateHyperLink(id: string, url: string, label?: string): Promise<boolean> {\n        const params: IUpdateHyperLinkCommandParams = {\n            unitId: this.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            row: this._range.startRow,\n            column: this._range.startColumn,\n            id,\n            payload: {\n                payload: url,\n                display: label,\n            },\n        };\n\n        return this._commandService.executeCommand(UpdateHyperLinkCommand.id, params);\n    }\n\n    override cancelHyperLink(id: string): boolean {\n        const params: ICancelHyperLinkCommandParams = {\n            unitId: this.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            row: this._range.startRow,\n            column: this._range.startColumn,\n            id,\n        };\n\n        return this._commandService.syncExecuteCommand(CancelHyperLinkCommand.id, params);\n    }\n\n    override getUrl(): string {\n        const parserService = this._injector.get(SheetsHyperLinkParserService);\n        return parserService.buildHyperLink(this.getUnitId(), this.getSheetId(), this.getRange());\n    }\n\n    // #endregion\n}\n\nFRange.extend(FRangeHyperlinkMixin);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FRange extends IFRangeHyperlinkMixin {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IEventBase } from '@univerjs/core/facade';\nimport type { ICellLinkContent, ISheetHyperLink } from '@univerjs/sheets-hyper-link';\nimport type { FWorkbook, FWorksheet } from '@univerjs/sheets/facade';\nimport { FEventName } from '@univerjs/core/facade';\n\n/**\n * @ignore\n */\ninterface IFSheetLinkEvent {\n    /**\n     * Event triggered before adding a link\n     * @see {@link IBeforeSheetLinkAddEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeSheetLinkAdd, (params) => {\n     *   const { workbook, worksheet, row, col, link } = params;\n     *   console.log('before sheet link add', params);\n     *\n     *   // Cancel the sheet link add operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeSheetLinkAdd: 'BeforeSheetLinkAdd';\n\n    /**\n     * Event triggered before canceling a link\n     * @see {@link IBeforeSheetLinkCancelEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeSheetLinkCancel, (params) => {\n     *   const { workbook, worksheet, row, column, id } = params;\n     *   console.log('before sheet link cancel', params);\n     *\n     *   // Cancel the sheet link cancel operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeSheetLinkCancel: 'BeforeSheetLinkCancel';\n\n    /**\n     * Event triggered before updating a link\n     * @see {@link IBeforeSheetLinkUpdateEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeSheetLinkUpdate, (params) => {\n     *   const { workbook, worksheet, row, column, id, payload } = params;\n     *   console.log('before sheet link update', params);\n     *\n     *   // Cancel the sheet link update operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeSheetLinkUpdate: 'BeforeSheetLinkUpdate';\n}\n\nexport class FSheetLinkEvent implements IFSheetLinkEvent {\n    get BeforeSheetLinkAdd(): 'BeforeSheetLinkAdd' {\n        return 'BeforeSheetLinkAdd' as const;\n    }\n\n    get BeforeSheetLinkCancel(): 'BeforeSheetLinkCancel' {\n        return 'BeforeSheetLinkCancel' as const;\n    }\n\n    get BeforeSheetLinkUpdate(): 'BeforeSheetLinkUpdate' {\n        return 'BeforeSheetLinkUpdate' as const;\n    }\n}\n\nexport interface IBeforeSheetLinkAddEvent extends IEventBase {\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** The worksheet where the link will be added */\n    worksheet: FWorksheet;\n    /** The row index of the target cell */\n    row: number;\n    /** The column index of the target cell */\n    col: number;\n    /** The hyperlink information to be added */\n    link: ISheetHyperLink;\n}\n\nexport interface IBeforeSheetLinkCancelEvent extends IEventBase {\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** The worksheet containing the link */\n    worksheet: FWorksheet;\n    /** The row index of the cell */\n    row: number;\n    /** The column index of the cell */\n    column: number;\n    /** The unique identifier of the hyperlink */\n    id: string;\n}\n\nexport interface IBeforeSheetLinkUpdateEvent extends IEventBase {\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** The worksheet containing the link */\n    worksheet: FWorksheet;\n    /** The row index of the cell */\n    row: number;\n    /** The column index of the cell */\n    column: number;\n    /** The unique identifier of the hyperlink */\n    id: string;\n    /** The new hyperlink content/information */\n    payload: ICellLinkContent;\n}\n\n/**\n * @ignore\n */\nexport interface ISheetLinkEventConfig {\n    BeforeSheetLinkAdd: IBeforeSheetLinkAddEvent;\n    BeforeSheetLinkCancel: IBeforeSheetLinkCancelEvent;\n    BeforeSheetLinkUpdate: IBeforeSheetLinkUpdateEvent;\n}\n\nFEventName.extend(FSheetLinkEvent);\n\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FEventName extends IFSheetLinkEvent {\n    }\n\n    interface IEventParamConfig extends ISheetLinkEventConfig {\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Injector } from '@univerjs/core';\nimport type { IAddHyperLinkCommandParams, ICancelHyperLinkCommandParams, IUpdateHyperLinkCommandParams } from '@univerjs/sheets-hyper-link';\nimport type { IBeforeSheetLinkAddEvent, IBeforeSheetLinkCancelEvent, IBeforeSheetLinkUpdateEvent } from './f-event';\nimport { CanceledError, ICommandService } from '@univerjs/core';\nimport { FUniver } from '@univerjs/core/facade';\nimport { AddHyperLinkCommand, CancelHyperLinkCommand, UpdateHyperLinkCommand } from '@univerjs/sheets-hyper-link';\n\nexport class FSheetLinkUniver extends FUniver {\n    /**\n     * @ignore\n     */\n    override _initialize(injector: Injector): void {\n        const commandService = injector.get(ICommandService);\n\n        this.registerEventHandler(\n            this.Event.BeforeSheetLinkAdd,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== AddHyperLinkCommand.id) return;\n\n                const eventTarget = this.getCommandSheetTarget(commandInfo);\n                if (!eventTarget) return;\n\n                const params = commandInfo.params as IAddHyperLinkCommandParams;\n                const eventParams: IBeforeSheetLinkAddEvent = {\n                    workbook: eventTarget.workbook,\n                    worksheet: eventTarget.worksheet,\n                    row: params.link.row,\n                    col: params.link.column,\n                    link: params.link,\n                };\n                this.fireEvent(this.Event.BeforeSheetLinkAdd, eventParams);\n                if (eventParams.cancel) {\n                    throw new CanceledError();\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeSheetLinkUpdate,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== UpdateHyperLinkCommand.id) return;\n\n                const eventTarget = this.getCommandSheetTarget(commandInfo);\n                if (!eventTarget) return;\n\n                const params = commandInfo.params as IUpdateHyperLinkCommandParams;\n                const eventParams: IBeforeSheetLinkUpdateEvent = {\n                    workbook: eventTarget.workbook,\n                    worksheet: eventTarget.worksheet,\n                    row: params.row,\n                    column: params.column,\n                    id: params.id,\n                    payload: params.payload,\n                };\n                this.fireEvent(this.Event.BeforeSheetLinkUpdate, eventParams);\n                if (eventParams.cancel) {\n                    throw new CanceledError();\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeSheetLinkCancel,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== CancelHyperLinkCommand.id) return;\n\n                const eventTarget = this.getCommandSheetTarget(commandInfo);\n                if (!eventTarget) return;\n\n                const params = commandInfo.params as ICancelHyperLinkCommandParams;\n                const eventParams: IBeforeSheetLinkCancelEvent = {\n                    workbook: eventTarget.workbook,\n                    worksheet: eventTarget.worksheet,\n                    row: params.row,\n                    column: params.column,\n                    id: params.id,\n                };\n                this.fireEvent(this.Event.BeforeSheetLinkCancel, eventParams);\n                if (eventParams.cancel) {\n                    throw new CanceledError();\n                }\n            })\n        );\n    }\n}\n\nFUniver.extend(FSheetLinkUniver);\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SheetsHyperLinkParserService } from '@univerjs/sheets-hyper-link';\nimport { SheetsHyperLinkResolverService } from '@univerjs/sheets-hyper-link-ui';\nimport { FWorkbookHyperLinkMixin } from '@univerjs/sheets-hyper-link/facade';\nimport { FWorkbook } from '@univerjs/sheets/facade';\n\ninterface IFWorkbookHyperlinkUIMixin {\n    /**\n     * Navigate to the sheet hyperlink.\n     * @param {string} hyperlink - The hyperlink string\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const sheets = fWorkbook.getSheets();\n     *\n     * // Create a hyperlink to the cell F6 in the first sheet\n     * const sheet1 = sheets[0];\n     * const range = sheet1.getRange('F6');\n     * const hyperlink = range.getUrl();\n     *\n     * // Switch to the second sheet\n     * fWorkbook.setActiveSheet(sheets[1]);\n     * console.log(fWorkbook.getActiveSheet().getSheetName());\n     *\n     * // Navigate to the hyperlink after 3 seconds\n     * setTimeout(() => {\n     *   fWorkbook.navigateToSheetHyperlink(hyperlink);\n     *   console.log(fWorkbook.getActiveSheet().getSheetName());\n     * }, 3000);\n     * ```\n     */\n    navigateToSheetHyperlink(this: FWorkbook, hyperlink: string): void;\n}\n\nclass FWorkbookHyperLinkUIMixin extends FWorkbookHyperLinkMixin implements IFWorkbookHyperlinkUIMixin {\n    // TODO: this should be migrated back to hyperlink ui plugin\n    override navigateToSheetHyperlink(hyperlink: string): void {\n        const parserService = this._injector.get(SheetsHyperLinkParserService);\n        const resolverService = this._injector.get(SheetsHyperLinkResolverService);\n        const info = parserService.parseHyperLink(hyperlink);\n        resolverService.navigate(info);\n    }\n}\n\nFWorkbook.extend(FWorkbookHyperLinkUIMixin);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FWorkbook extends IFWorkbookHyperlinkUIMixin {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDocumentBody, IRange, Workbook } from '@univerjs/core';\nimport type { IAddCommentCommandParams, IBaseComment, IDeleteCommentCommandParams, IResolveCommentCommandParams, IThreadComment, IUpdateCommentCommandParams } from '@univerjs/thread-comment';\nimport { generateRandomId, ICommandService, Inject, Injector, IUniverInstanceService, RichTextBuilder, RichTextValue, Tools, UniverInstanceType, UserManagerService } from '@univerjs/core';\nimport { deserializeRangeWithSheet } from '@univerjs/engine-formula';\nimport { SheetsThreadCommentModel } from '@univerjs/sheets-thread-comment';\nimport { FRange } from '@univerjs/sheets/facade';\nimport { AddCommentCommand, DeleteCommentCommand, DeleteCommentTreeCommand, getDT, ResolveCommentCommand, UpdateCommentCommand } from '@univerjs/thread-comment';\n\n/**\n * An readonly class that represents a comment.\n * @ignore\n */\nexport class FTheadCommentItem {\n    protected _comment: IThreadComment = {\n        id: generateRandomId(),\n        ref: '',\n        threadId: '',\n        dT: '',\n        personId: '',\n        text: RichTextBuilder.newEmptyData().body!,\n        attachments: [],\n        unitId: '',\n        subUnitId: '',\n    };\n\n    /**\n     * Create a new FTheadCommentItem\n     * @param {IThreadComment|undefined} comment The comment\n     * @returns {FTheadCommentItem} A new instance of FTheadCommentItem\n     * @example\n     * ```ts\n     * const commentBuilder = univerAPI.newTheadComment();\n     * console.log(commentBuilder);\n     * ```\n     */\n    static create(comment?: IThreadComment): FTheadCommentItem {\n        return new FTheadCommentItem(comment);\n    }\n\n    constructor(comment?: IThreadComment) {\n        if (comment) {\n            this._comment = comment;\n        }\n    }\n\n    /**\n     * Get the person id of the comment\n     * @returns {string} The person id of the comment\n     * @example\n     * ```ts\n     * const commentBuilder = univerAPI.newTheadComment();\n     * console.log(commentBuilder.personId);\n     * ```\n     */\n    get personId(): string {\n        return this._comment.personId;\n    }\n\n    /**\n     * Get the date time of the comment\n     * @returns {string} The date time of the comment\n     * @example\n     * ```ts\n     * const commentBuilder = univerAPI.newTheadComment();\n     * console.log(commentBuilder.dateTime);\n     * ```\n     */\n    get dateTime(): string {\n        return this._comment.dT;\n    }\n\n    /**\n     * Get the content of the comment\n     * @returns {RichTextValue} The content of the comment\n     * @example\n     * ```ts\n     * const commentBuilder = univerAPI.newTheadComment();\n     * console.log(commentBuilder.content);\n     * ```\n     */\n    get content(): RichTextValue {\n        return RichTextValue.createByBody(this._comment.text);\n    }\n\n    /**\n     * Get the id of the comment\n     * @returns {string} The id of the comment\n     * @example\n     * ```ts\n     * const commentBuilder = univerAPI.newTheadComment();\n     * console.log(commentBuilder.id);\n     * ```\n     */\n    get id(): string {\n        return this._comment.id;\n    }\n\n    /**\n     * Get the thread id of the comment\n     * @returns {string} The thread id of the comment\n     * @example\n     * ```ts\n     * const commentBuilder = univerAPI.newTheadComment();\n     * console.log(commentBuilder.threadId);\n     * ```\n     */\n    get threadId(): string {\n        return this._comment.threadId;\n    }\n\n    /**\n     * Copy the comment\n     * @returns {FTheadCommentBuilder} The comment builder\n     * @example\n     * ```ts\n     * const commentBuilder = univerAPI.newTheadComment();\n     * const newCommentBuilder = commentBuilder.copy();\n     * console.log(newCommentBuilder);\n     * ```\n     */\n    copy(): FTheadCommentBuilder {\n        return FTheadCommentBuilder.create(Tools.deepClone(this._comment));\n    }\n}\n\n/**\n * A builder for thread comment. use {@link FUniver} `univerAPI.newTheadComment()` to create a new builder.\n */\nexport class FTheadCommentBuilder extends FTheadCommentItem {\n    static override create(comment?: IThreadComment): FTheadCommentBuilder {\n        return new FTheadCommentBuilder(comment);\n    }\n\n    /**\n     * Set the content of the comment\n     * @param {IDocumentBody | RichTextValue} content The content of the comment\n     * @returns {FTheadCommentBuilder} The comment builder for chaining\n     * @example\n     * ```ts\n     * // Create a new comment\n     * const richText = univerAPI.newRichText().insertText('hello univer');\n     * const commentBuilder = univerAPI.newTheadComment()\n     *   .setContent(richText);\n     * console.log(commentBuilder.content);\n     *\n     * // Add the comment to the cell A1\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const cell = fWorksheet.getRange('A1');\n     * const result = await cell.addCommentAsync(commentBuilder);\n     * console.log(result);\n     * ```\n     */\n    setContent(content: IDocumentBody | RichTextValue): FTheadCommentBuilder {\n        if (content instanceof RichTextValue) {\n            this._comment.text = content.getData().body!;\n        } else {\n            this._comment.text = content;\n        }\n        return this;\n    }\n\n    /**\n     * Set the person id of the comment\n     * @param {string} userId The person id of the comment\n     * @returns {FTheadCommentBuilder} The comment builder for chaining\n     * @example\n     * ```ts\n     * // Create a new comment\n     * const richText = univerAPI.newRichText().insertText('hello univer');\n     * const commentBuilder = univerAPI.newTheadComment()\n     *   .setContent(richText)\n     *   .setPersonId('mock-user-id');\n     * console.log(commentBuilder.personId);\n     *\n     * // Add the comment to the cell A1\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const cell = fWorksheet.getRange('A1');\n     * const result = await cell.addCommentAsync(commentBuilder);\n     * console.log(result);\n     * ```\n     */\n    setPersonId(userId: string): FTheadCommentBuilder {\n        this._comment.personId = userId;\n        return this;\n    }\n\n    /**\n     * Set the date time of the comment\n     * @param {Date} date The date time of the comment\n     * @returns {FTheadCommentBuilder} The comment builder for chaining\n     * @example\n     * ```ts\n     * // Create a new comment\n     * const richText = univerAPI.newRichText().insertText('hello univer');\n     * const commentBuilder = univerAPI.newTheadComment()\n     *   .setContent(richText)\n     *   .setDateTime(new Date('2025-02-21 14:22:22'));\n     * console.log(commentBuilder.dateTime);\n     *\n     * // Add the comment to the cell A1\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const cell = fWorksheet.getRange('A1');\n     * const result = await cell.addCommentAsync(commentBuilder);\n     * console.log(result);\n     * ```\n     */\n    setDateTime(date: Date): FTheadCommentBuilder {\n        this._comment.dT = getDT(date);\n        return this;\n    }\n\n    /**\n     * Set the id of the comment\n     * @param {string} id The id of the comment\n     * @returns {FTheadCommentBuilder} The comment builder for chaining\n     * @example\n     * ```ts\n     * // Create a new comment\n     * const richText = univerAPI.newRichText().insertText('hello univer');\n     * const commentBuilder = univerAPI.newTheadComment()\n     *   .setContent(richText)\n     *   .setId('mock-comment-id');\n     * console.log(commentBuilder.id);\n     *\n     * // Add the comment to the cell A1\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const cell = fWorksheet.getRange('A1');\n     * const result = await cell.addCommentAsync(commentBuilder);\n     * console.log(result);\n     * ```\n     */\n    setId(id: string): FTheadCommentBuilder {\n        this._comment.id = id;\n        return this;\n    }\n\n    /**\n     * Set the thread id of the comment\n     * @param {string} threadId The thread id of the comment\n     * @returns {FTheadCommentBuilder} The comment builder\n     * @example\n     * ```ts\n     * // Create a new comment\n     * const richText = univerAPI.newRichText().insertText('hello univer');\n     * const commentBuilder = univerAPI.newTheadComment()\n     *   .setContent(richText)\n     *   .setThreadId('mock-thread-id');\n     * console.log(commentBuilder.threadId);\n     *\n     * // Add the comment to the cell A1\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const cell = fWorksheet.getRange('A1');\n     * const result = await cell.addCommentAsync(commentBuilder);\n     * console.log(result);\n     * ```\n     */\n    setThreadId(threadId: string): FTheadCommentBuilder {\n        this._comment.threadId = threadId;\n        return this;\n    }\n\n    /**\n     * Build the comment\n     * @returns {IThreadComment} The comment\n     * @example\n     * ```ts\n     * const richText = univerAPI.newRichText().insertText('hello univer');\n     * const comment = univerAPI.newTheadComment()\n     *   .setContent(richText)\n     *   .setPersonId('mock-user-id')\n     *   .setDateTime(new Date('2025-02-21 14:22:22'))\n     *   .setId('mock-comment-id')\n     *   .setThreadId('mock-thread-id')\n     *   .build();\n     * console.log(comment);\n     * ```\n     */\n    build(): IThreadComment {\n        return this._comment;\n    }\n}\n\n/**\n * A class that represents a thread comment already in the sheet.\n */\nexport class FThreadComment {\n    /**\n     * @ignore\n     */\n    constructor(\n        private readonly _thread: IThreadComment | IBaseComment,\n        private readonly _parent: IThreadComment | undefined,\n        @Inject(Injector) private readonly _injector: Injector,\n        @ICommandService private readonly _commandService: ICommandService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @Inject(SheetsThreadCommentModel) private readonly _threadCommentModel: SheetsThreadCommentModel,\n        @Inject(UserManagerService) private readonly _userManagerService: UserManagerService\n    ) {\n    }\n\n    private _getRef(): IRange {\n        const ref = this._parent?.ref || (this._thread as IThreadComment).ref;\n        const range = deserializeRangeWithSheet(ref);\n\n        return range.range;\n    }\n\n    /**\n     * Whether the comment is a root comment\n     * @returns {boolean} Whether the comment is a root comment\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const comments = fWorksheet.getComments();\n     * comments.forEach((comment) => {\n     *   console.log(comment.getIsRoot());\n     * });\n     * ```\n     */\n    getIsRoot(): boolean {\n        return !this._parent;\n    }\n\n    /**\n     * Get the comment data\n     * @returns {IBaseComment} The comment data\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const comments = fWorksheet.getComments();\n     * comments.forEach((comment) => {\n     *   console.log(comment.getCommentData());\n     * });\n     * ```\n     */\n    getCommentData(): IBaseComment {\n        const { children, ...comment } = this._thread;\n        return comment;\n    }\n\n    /**\n     * Get the replies of the comment\n     * @returns {FThreadComment[]} the replies of the comment\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const comments = fWorksheet.getComments();\n     * comments.forEach((comment) => {\n     *   if (comment.getIsRoot()) {\n     *     const replies = comment.getReplies();\n     *     replies.forEach((reply) => {\n     *       console.log(reply.getCommentData());\n     *     });\n     *   }\n     * });\n     * ```\n     */\n    getReplies(): FThreadComment[] | undefined {\n        const range = this._getRef();\n        const comments = this._threadCommentModel.getCommentWithChildren(this._thread.unitId, this._thread.subUnitId, range.startRow, range.startColumn);\n\n        return comments?.children?.map((child) => this._injector.createInstance(FThreadComment, child));\n    }\n\n    /**\n     * Get the range of the comment\n     * @returns {FRange | null} The range of the comment\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const comments = fWorksheet.getComments();\n     * comments.forEach((comment) => {\n     *   console.log(comment.getRange().getA1Notation());\n     * });\n     * ```\n     */\n    getRange(): FRange | null {\n        const workbook = this._univerInstanceService.getUnit<Workbook>(this._thread.unitId, UniverInstanceType.UNIVER_SHEET);\n        if (!workbook) {\n            return null;\n        }\n        const worksheet = workbook.getSheetBySheetId(this._thread.subUnitId);\n        if (!worksheet) {\n            return null;\n        }\n        const range = this._getRef();\n        return this._injector.createInstance(FRange, workbook, worksheet, range);\n    }\n\n    // eslint-disable-next-line\n    /**\n     * @deprecated use `getRichText` as instead\n     */\n    getContent(): IDocumentBody {\n        return this._thread.text;\n    }\n\n    /**\n     * Get the rich text of the comment\n     * @returns {RichTextValue} The rich text of the comment\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const comments = fWorksheet.getComments();\n     * comments.forEach((comment) => {\n     *   console.log(comment.getRichText());\n     * });\n     * ```\n     */\n    getRichText(): RichTextValue {\n        const body = this._thread.text;\n        return RichTextValue.create({ body, documentStyle: {}, id: 'd' });\n    }\n\n    /**\n     * Delete the comment and it's replies\n     * @returns {Promise<boolean>} Whether the comment is deleted successfully\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const comments = fWorksheet.getComments();\n     *\n     * // Delete the first comment\n     * const result = await comments[0]?.deleteAsync();\n     * console.log(result);\n     * ```\n     */\n    deleteAsync(): Promise<boolean> {\n        return this._commandService.executeCommand(\n            this.getIsRoot() ? DeleteCommentTreeCommand.id : DeleteCommentCommand.id,\n            {\n                commentId: this._thread.id,\n                unitId: this._thread.unitId,\n                subUnitId: this._thread.subUnitId,\n            } as IDeleteCommentCommandParams\n        );\n    }\n\n    // eslint-disable-next-line\n    /**\n     * @deprecated use `deleteAsync` as instead.\n     */\n    delete(): Promise<boolean> {\n        return this.deleteAsync();\n    }\n\n    // eslint-disable-next-line\n    /**\n     * @deprecated use `updateAsync` as instead\n     */\n    async update(content: IDocumentBody): Promise<boolean> {\n        return this.updateAsync(content);\n    }\n\n    /**\n     * Update the comment content\n     * @param {IDocumentBody | RichTextValue} content The new content of the comment\n     * @returns {Promise<boolean>} Whether the comment is updated successfully\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new comment\n     * const richText = univerAPI.newRichText().insertText('hello univer');\n     * const commentBuilder = univerAPI.newTheadComment()\n     *   .setContent(richText)\n     *   .setId('mock-comment-id');\n     * const cell = fWorksheet.getRange('A1');\n     * await cell.addCommentAsync(commentBuilder);\n     *\n     * // Update the comment after 3 seconds\n     * setTimeout(async () => {\n     *   const comment = fWorksheet.getCommentById('mock-comment-id');\n     *   const newRichText = univerAPI.newRichText().insertText('Hello Univer AI');\n     *   const result = await comment.updateAsync(newRichText);\n     *   console.log(result);\n     * }, 3000);\n     * ```\n     */\n    async updateAsync(content: IDocumentBody | RichTextValue): Promise<boolean> {\n        const body = content instanceof RichTextValue ? content.getData().body : content;\n        const dt = getDT();\n        const res = await this._commandService.executeCommand(\n            UpdateCommentCommand.id,\n            {\n                unitId: this._thread.unitId,\n                subUnitId: this._thread.subUnitId,\n                payload: {\n                    commentId: this._thread.id,\n                    text: body,\n                    updated: true,\n                    updateT: dt,\n                },\n            } as IUpdateCommentCommandParams\n        );\n\n        return res;\n    }\n\n    // eslint-disable-next-line\n    /**\n     * @deprecated use `resolveAsync` as instead\n     */\n    resolve(resolved?: boolean): Promise<boolean> {\n        return this.resolveAsync(resolved);\n    }\n\n    /**\n     * Resolve the comment\n     * @param {boolean} resolved Whether the comment is resolved\n     * @returns {Promise<boolean>} Set the comment to resolved or not operation result\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new comment\n     * const richText = univerAPI.newRichText().insertText('hello univer');\n     * const commentBuilder = univerAPI.newTheadComment()\n     *   .setContent(richText)\n     *   .setId('mock-comment-id');\n     * const cell = fWorksheet.getRange('A1');\n     * await cell.addCommentAsync(commentBuilder);\n     *\n     * // Resolve the comment after 3 seconds\n     * setTimeout(async () => {\n     *   const comment = fWorksheet.getCommentById('mock-comment-id');\n     *   const result = await comment.resolveAsync(true);\n     *   console.log(result);\n     * }, 3000);\n     * ```\n     */\n    resolveAsync(resolved?: boolean): Promise<boolean> {\n        return this._commandService.executeCommand(\n            ResolveCommentCommand.id,\n            {\n                unitId: this._thread.unitId,\n                subUnitId: this._thread.subUnitId,\n                commentId: this._thread.id,\n                resolved: resolved ?? !this._thread.resolved,\n            } as IResolveCommentCommandParams\n        );\n    }\n\n    /**\n     * Reply to the comment\n     * @param {FTheadCommentBuilder} comment The comment to reply to\n     * @returns {Promise<boolean>} Whether the comment is replied successfully\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new comment\n     * const richText = univerAPI.newRichText().insertText('hello univer');\n     * const commentBuilder = univerAPI.newTheadComment()\n     *   .setContent(richText)\n     *   .setId('mock-comment-id');\n     * const cell = fWorksheet.getRange('A1');\n     * await cell.addCommentAsync(commentBuilder);\n     *\n     * // Reply to the comment\n     * const replyText = univerAPI.newRichText().insertText('Hello Univer AI');\n     * const reply = univerAPI.newTheadComment().setContent(replyText);\n     * const comment = fWorksheet.getCommentById('mock-comment-id');\n     * const result = await comment.replyAsync(reply);\n     * console.log(result);\n     * ```\n     */\n    replyAsync(comment: FTheadCommentBuilder): Promise<boolean> {\n        const commentData = comment.build();\n        return this._commandService.executeCommand(\n            AddCommentCommand.id,\n            {\n                unitId: this._thread.unitId,\n                subUnitId: this._thread.subUnitId,\n                comment: {\n                    id: generateRandomId(),\n                    parentId: this._thread.id,\n                    threadId: this._thread.threadId,\n                    ref: this._parent?.ref || (this._thread as IThreadComment).ref,\n                    unitId: this._thread.unitId,\n                    subUnitId: this._thread.subUnitId,\n                    text: commentData.text,\n                    attachments: commentData.attachments,\n                    dT: commentData.dT || getDT(),\n                    personId: commentData.personId || this._userManagerService.getCurrentUser().userID,\n                },\n            } as IAddCommentCommandParams\n        );\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDocumentBody, Nullable } from '@univerjs/core';\nimport type { IThreadComment } from '@univerjs/thread-comment';\nimport { generateRandomId, ICommandService, Range, Tools, UserManagerService } from '@univerjs/core';\nimport { SheetsThreadCommentModel } from '@univerjs/sheets-thread-comment';\nimport { FRange } from '@univerjs/sheets/facade';\nimport { AddCommentCommand, DeleteCommentTreeCommand, getDT } from '@univerjs/thread-comment';\nimport { FTheadCommentBuilder, FThreadComment } from './f-thread-comment';\n\n/**\n * @ignore\n */\nexport interface IFRangeCommentMixin {\n    /**\n     * Get the comment of the start cell in the current range.\n     * @returns {FThreadComment | null} The comment of the start cell in the current range. If the cell does not have a comment, return `null`.\n     * @example\n     * ```ts\n     * const range = univerAPI.getActiveWorkbook()\n     *  .getActiveSheet()\n     *  .getActiveRange();\n     * const comment = range.getComment();\n     * ```\n     */\n    getComment(): Nullable<FThreadComment>;\n\n    /**\n     * Get the comments in the current range.\n     * @returns {FThreadComment[]} The comments in the current range.\n     * @example\n     * ```ts\n     * const range = univerAPI.getActiveWorkbook()\n     *  .getActiveSheet()\n     *  .getActiveRange();\n     * const comments = range.getComments();\n     * comments.forEach((comment) => {\n     *   console.log(comment.getContent());\n     * });\n     * ```\n     */\n    getComments(): FThreadComment[];\n\n    /**\n     * @deprecated use `addCommentAsync` as instead.\n     */\n    addComment(content: IDocumentBody | FTheadCommentBuilder): Promise<boolean>;\n\n    /**\n     * Add a comment to the start cell in the current range.\n     * @param content The content of the comment.\n     * @returns Whether the comment is added successfully.\n     * @example\n     * ```ts\n     * // Create a new comment\n     * const richText = univerAPI.newRichText().insertText('hello univer');\n     * const commentBuilder = univerAPI.newTheadComment()\n     *   .setContent(richText);\n     * console.log(commentBuilder.content.toPlainText());\n     *\n     * // Add the comment to the cell A1\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const cell = fWorksheet.getRange('A1');\n     * const result = await cell.addCommentAsync(commentBuilder);\n     * console.log(result);\n     * ```\n     */\n    addCommentAsync(content: IDocumentBody | FTheadCommentBuilder): Promise<boolean>;\n\n    /**\n     * @deprecated use `clearCommentAsync` as instead.\n     */\n    clearComment(): Promise<boolean>;\n\n     /**\n      * Clear the comment of the start cell in the current range.\n      * @returns Whether the comment is cleared successfully.\n      */\n    clearCommentAsync(): Promise<boolean>;\n\n    /**\n     * @deprecated use `clearCommentsAsync` as instead.\n     */\n    clearComments(): Promise<boolean>;\n\n    /**\n     * Clear all of the comments in the current range.\n     * @returns Whether the comments are cleared successfully.\n     * @example\n     * ```ts\n     * const range = univerAPI.getActiveWorkbook()\n     *  .getActiveSheet()\n     *  .getActiveRange();\n     * const success = await range.clearCommentsAsync();\n     * ```\n     */\n    clearCommentsAsync(): Promise<boolean>;\n}\n\n/**\n * @ignore\n */\nexport class FRangeCommentMixin extends FRange implements IFRangeCommentMixin {\n    override getComment(): Nullable<FThreadComment> {\n        const injector = this._injector;\n        const sheetsTheadCommentModel = injector.get(SheetsThreadCommentModel);\n        const unitId = this._workbook.getUnitId();\n        const sheetId = this._worksheet.getSheetId();\n        const commentId = sheetsTheadCommentModel.getByLocation(unitId, sheetId, this._range.startRow, this._range.startColumn);\n        if (!commentId) {\n            return null;\n        }\n\n        const comment = sheetsTheadCommentModel.getComment(unitId, sheetId, commentId);\n        if (comment) {\n            return this._injector.createInstance(FThreadComment, comment);\n        }\n\n        return null;\n    }\n\n    override getComments(): FThreadComment[] {\n        const injector = this._injector;\n        const sheetsTheadCommentModel = injector.get(SheetsThreadCommentModel);\n        const unitId = this._workbook.getUnitId();\n        const sheetId = this._worksheet.getSheetId();\n        const comments: FThreadComment[] = [];\n        Range.foreach(this._range, (row, col) => {\n            const commentId = sheetsTheadCommentModel.getByLocation(unitId, sheetId, row, col);\n            if (commentId) {\n                const comment = sheetsTheadCommentModel.getComment(unitId, sheetId, commentId);\n                if (comment) {\n                    comments.push(this._injector.createInstance(FThreadComment, comment));\n                }\n            }\n        });\n\n        return comments;\n    }\n\n    override addComment(content: IDocumentBody | FTheadCommentBuilder): Promise<boolean> {\n        const injector = this._injector;\n        const currentComment = this.getComment()?.getCommentData();\n        const commentService = injector.get(ICommandService);\n        const userService = injector.get(UserManagerService);\n        const unitId = this._workbook.getUnitId();\n        const sheetId = this._worksheet.getSheetId();\n        const refStr = `${Tools.chatAtABC(this._range.startColumn)}${this._range.startRow + 1}`;\n        const currentUser = userService.getCurrentUser();\n        const commentData: Partial<IThreadComment> = content instanceof FTheadCommentBuilder ? content.build() : { text: content };\n\n        return commentService.executeCommand(AddCommentCommand.id, {\n            unitId,\n            subUnitId: sheetId,\n            comment: {\n                text: commentData.text,\n                dT: commentData.dT || getDT(),\n                attachments: [],\n                id: commentData.id || generateRandomId(),\n                ref: refStr,\n                personId: commentData.personId || currentUser.userID,\n                parentId: currentComment?.id,\n                unitId,\n                subUnitId: sheetId,\n                threadId: currentComment?.threadId || generateRandomId(),\n            },\n        });\n    }\n\n    override clearComment(): Promise<boolean> {\n        const injector = this._injector;\n        const currentComment = this.getComment()?.getCommentData();\n        const commentService = injector.get(ICommandService);\n        const unitId = this._workbook.getUnitId();\n        const sheetId = this._worksheet.getSheetId();\n\n        if (currentComment) {\n            return commentService.executeCommand(DeleteCommentTreeCommand.id, {\n                unitId,\n                subUnitId: sheetId,\n                threadId: currentComment.threadId,\n                commentId: currentComment.id,\n            });\n        }\n\n        return Promise.resolve(true);\n    }\n\n    override clearComments(): Promise<boolean> {\n        const comments = this.getComments();\n        const promises = comments.map((comment) => comment.deleteAsync());\n\n        return Promise.all(promises).then(() => true);\n    }\n\n    override addCommentAsync(content: IDocumentBody | FTheadCommentBuilder): Promise<boolean> {\n        return this.addComment(content);\n    }\n\n    override clearCommentAsync(): Promise<boolean> {\n        return this.clearComment();\n    }\n\n    override clearCommentsAsync(): Promise<boolean> {\n        return this.clearComments();\n    }\n}\n\nFRange.extend(FRangeCommentMixin);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FRange extends IFRangeCommentMixin {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, IExecutionOptions } from '@univerjs/core';\nimport type { CommentUpdate, IAddCommentCommandParams, IDeleteCommentCommandParams } from '@univerjs/thread-comment';\nimport { toDisposable } from '@univerjs/core';\nimport { FWorkbook } from '@univerjs/sheets/facade';\nimport { AddCommentCommand, DeleteCommentCommand, DeleteCommentTreeCommand, ThreadCommentModel, UpdateCommentCommand } from '@univerjs/thread-comment';\nimport { filter } from 'rxjs';\nimport { FThreadComment } from './f-thread-comment';\n\n// eslint-disable-next-line ts/no-explicit-any\ntype IUpdateCommandParams = any;\n\n/**\n * @ignore\n */\nexport interface IFWorkbookThreadCommentMixin {\n    /**\n     * Get all comments in the current workbook\n     * @returns {FThreadComment[]} All comments in the current workbook\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const comments = fWorkbook.getComments();\n     * comments.forEach((comment) => {\n     *   const isRoot = comment.getIsRoot();\n     *\n     *   if (isRoot) {\n     *     console.log('root comment:', comment.getCommentData());\n     *\n     *     const replies = comment.getReplies();\n     *     replies.forEach((reply) => {\n     *       console.log('reply comment:', reply.getCommentData());\n     *     });\n     *   }\n     * });\n     * ```\n     */\n    getComments(): FThreadComment[];\n\n    /**\n     * Clear all comments in the current workbook\n     * @returns {Promise<boolean>} Whether the comments are cleared successfully.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const result = await fWorkbook.clearComments();\n     * console.log(result);\n     * ```\n     */\n    clearComments(): Promise<boolean>;\n\n    /**\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.CommentUpdated, (params) => {})` as instead\n     */\n    onThreadCommentChange(callback: (commentUpdate: CommentUpdate) => void | false): IDisposable;\n\n    /**\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.BeforeCommentAdd, (params) => {})` as instead\n     */\n    onBeforeAddThreadComment(\n        this: FWorkbook,\n        callback: (params: IAddCommentCommandParams, options: IExecutionOptions | undefined) => void | false\n    ): IDisposable;\n\n    /**\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.BeforeCommentUpdate, (params) => {})` as instead\n     */\n    onBeforeUpdateThreadComment(\n        this: FWorkbook,\n        callback: (params: IUpdateCommandParams, options: IExecutionOptions | undefined) => void | false\n    ): IDisposable;\n\n    /**\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.BeforeCommentDelete, (params) => {})` as instead\n     */\n    onBeforeDeleteThreadComment(\n        this: FWorkbook,\n        callback: (params: IDeleteCommentCommandParams, options: IExecutionOptions | undefined) => void | false\n    ): IDisposable;\n}\n\n/**\n * @ignore\n */\nexport class FWorkbookThreadCommentMixin extends FWorkbook implements IFWorkbookThreadCommentMixin {\n    declare _threadCommentModel: ThreadCommentModel;\n\n    /**\n     * @ignore\n     */\n    override _initialize(): void {\n        Object.defineProperty(this, '_threadCommentModel', {\n            get() {\n                return this._injector.get(ThreadCommentModel);\n            },\n        });\n    }\n\n    override getComments(): FThreadComment[] {\n        return this._threadCommentModel.getUnit(this._workbook.getUnitId()).map((i) => this._injector.createInstance(FThreadComment, i.root));\n    }\n\n    override clearComments(): Promise<boolean> {\n        const comments = this.getComments();\n        const promises = comments.map((comment) => comment.deleteAsync());\n\n        return Promise.all(promises).then(() => true);\n    }\n\n    /**\n     * @param callback\n     * @deprecated\n     */\n    override onThreadCommentChange(callback: (commentUpdate: CommentUpdate) => void | false): IDisposable {\n        return toDisposable(this._threadCommentModel.commentUpdate$\n            .pipe(filter((change) => change.unitId === this._workbook.getUnitId()))\n            .subscribe(callback));\n    }\n\n    /**\n     * @param callback\n     * @deprecated\n     */\n    override onBeforeAddThreadComment(callback: (params: IAddCommentCommandParams, options: IExecutionOptions | undefined) => void | false): IDisposable {\n        return toDisposable(this._commandService.beforeCommandExecuted((commandInfo, options) => {\n            const params = commandInfo.params as IAddCommentCommandParams;\n            if (commandInfo.id === AddCommentCommand.id) {\n                if (params.unitId !== this._workbook.getUnitId()) {\n                    return;\n                }\n                if (callback(params, options) === false) {\n                    throw new Error('Command is stopped by the hook onBeforeAddThreadComment');\n                }\n            }\n        }));\n    }\n\n    /**\n     * @param callback\n     * @deprecated\n     */\n    override onBeforeUpdateThreadComment(callback: (params: IUpdateCommandParams, options: IExecutionOptions | undefined) => void | false): IDisposable {\n        return toDisposable(this._commandService.beforeCommandExecuted((commandInfo, options) => {\n            const params = commandInfo.params as IUpdateCommandParams;\n            if (commandInfo.id === UpdateCommentCommand.id) {\n                if (params.unitId !== this._workbook.getUnitId()) {\n                    return;\n                }\n                if (callback(params, options) === false) {\n                    throw new Error('Command is stopped by the hook onBeforeUpdateThreadComment');\n                }\n            }\n        }));\n    }\n\n    /**\n     * @param callback\n     * @deprecated\n     */\n    override onBeforeDeleteThreadComment(callback: (params: IDeleteCommentCommandParams, options: IExecutionOptions | undefined) => void | false): IDisposable {\n        return toDisposable(this._commandService.beforeCommandExecuted((commandInfo, options) => {\n            const params = commandInfo.params as IDeleteCommentCommandParams;\n            if (commandInfo.id === DeleteCommentCommand.id || commandInfo.id === DeleteCommentTreeCommand.id) {\n                if (params.unitId !== this._workbook.getUnitId()) {\n                    return;\n                }\n                if (callback(params, options) === false) {\n                    throw new Error('Command is stopped by the hook onBeforeDeleteThreadComment');\n                }\n            }\n        }));\n    }\n}\n\nFWorkbook.extend(FWorkbookThreadCommentMixin);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FWorkbook extends IFWorkbookThreadCommentMixin {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable } from '@univerjs/core';\nimport type { IAddCommentCommandParams } from '@univerjs/thread-comment';\nimport { ICommandService } from '@univerjs/core';\nimport { SheetsThreadCommentModel } from '@univerjs/sheets-thread-comment';\nimport { FWorksheet } from '@univerjs/sheets/facade';\nimport { AddCommentCommand } from '@univerjs/thread-comment';\nimport { FThreadComment } from './f-thread-comment';\n\n/**\n * @ignore\n */\nexport interface IFWorksheetCommentMixin {\n    /**\n     * Get all comments in the current sheet\n     * @returns {FThreadComment[]} All comments in the current sheet\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const comments = fWorksheet.getComments();\n     * comments.forEach((comment) => {\n     *   const isRoot = comment.getIsRoot();\n     *\n     *   if (isRoot) {\n     *     console.log('root comment:', comment.getCommentData());\n     *\n     *     const replies = comment.getReplies();\n     *     replies.forEach((reply) => {\n     *       console.log('reply comment:', reply.getCommentData());\n     *     });\n     *   }\n     * });\n     * ```\n     */\n    getComments(): FThreadComment[];\n\n    /**\n     * Clear all comments in the current sheet\n     * @returns {Promise<boolean>} Whether the comments are cleared successfully.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const result = await fWorksheet.clearComments();\n     * console.log(result);\n     * ```\n     */\n    clearComments(): Promise<boolean>;\n\n    /**\n     * get comment by comment id\n     * @param {string} commentId comment id\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a new comment\n     * const richText = univerAPI.newRichText().insertText('hello univer');\n     * const commentBuilder = univerAPI.newTheadComment()\n     *   .setContent(richText)\n     *   .setId('mock-comment-id');\n     * const cell = fWorksheet.getRange('A1');\n     * await cell.addCommentAsync(commentBuilder);\n     *\n     * const comment = fWorksheet.getCommentById('mock-comment-id');\n     * console.log(comment, comment?.getCommentData());\n     * ```\n     */\n    getCommentById(commentId: string): FThreadComment | undefined;\n}\n\n/**\n * @ignore\n */\nexport class FWorksheetCommentMixin extends FWorksheet implements IFWorksheetCommentMixin {\n    override getComments(): FThreadComment[] {\n        const sheetsTheadCommentModel = this._injector.get(SheetsThreadCommentModel);\n        const comments = sheetsTheadCommentModel.getSubUnitAll(this._workbook.getUnitId(), this._worksheet.getSheetId());\n        return comments.map((comment) => this._injector.createInstance(FThreadComment, comment));\n    }\n\n    override clearComments(): Promise<boolean> {\n        const comments = this.getComments();\n        const promises = comments.map((comment) => comment.deleteAsync());\n\n        return Promise.all(promises).then(() => true);\n    }\n\n    /**\n     * Subscribe to comment events.\n     * @param callback Callback function, param contains comment info and target cell.\n     */\n    onCommented(callback: (params: IAddCommentCommandParams) => void): IDisposable {\n        const commandService = this._injector.get(ICommandService);\n        return commandService.onCommandExecuted((command) => {\n            if (command.id === AddCommentCommand.id) {\n                const params = command.params as IAddCommentCommandParams;\n                callback(params);\n            }\n        });\n    }\n\n    override getCommentById(commentId: string): FThreadComment | undefined {\n        const sheetsTheadCommentModel = this._injector.get(SheetsThreadCommentModel);\n        const comment = sheetsTheadCommentModel.getComment(this._workbook.getUnitId(), this._worksheet.getSheetId(), commentId);\n        if (comment) {\n            return this._injector.createInstance(FThreadComment, comment);\n        }\n    }\n}\n\nFWorksheet.extend(FWorksheetCommentMixin);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FWorksheet extends IFWorksheetCommentMixin {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { RichTextValue } from '@univerjs/core';\nimport type { IEventBase } from '@univerjs/core/facade';\nimport type { FWorkbook, FWorksheet } from '@univerjs/sheets/facade';\nimport type { FTheadCommentItem, FThreadComment } from './f-thread-comment';\nimport { FEventName } from '@univerjs/core/facade';\n\n/**\n * @ignore\n */\ninterface ICommentEventMixin {\n    /**\n     * Event fired after comment added\n     * @see {@link ISheetCommentAddEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.CommentAdded, (params) => {\n     *   const { comment, workbook, worksheet, row, col } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly CommentAdded: 'CommentAdded';\n\n    /**\n     * Event fired before comment added\n     * @see {@link IBeforeSheetCommentAddEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeCommentAdd, (params) => {\n     *   const { comment, workbook, worksheet, row, col } = params;\n     *   console.log(params);\n     *\n     *   // Cancel the comment add operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeCommentAdd: 'BeforeCommentAdd';\n\n    /**\n     * Event fired after comment updated\n     * @see {@link ISheetCommentUpdateEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.CommentUpdated, (params) => {\n     *   const { comment, workbook, worksheet, row, col } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly CommentUpdated: 'CommentUpdated';\n\n    /**\n     * Event fired before comment update\n     * @see {@link IBeforeSheetCommentUpdateEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeCommentUpdate, (params) => {\n     *   const { comment, workbook, worksheet, row, col, newContent } = params;\n     *   console.log(params);\n     *\n     *   // Cancel the comment update operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeCommentUpdate: 'BeforeCommentUpdate';\n\n    /**\n     * Event fired after comment deleted\n     * @see {@link ISheetCommentDeleteEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.CommentDeleted, (params) => {\n     *   const { commentId, workbook, worksheet } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly CommentDeleted: 'CommentDeleted';\n\n    /**\n     * Event fired before comment delete\n     * @see {@link IBeforeSheetCommentDeleteEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeCommentDelete, (params) => {\n     *   const { comment, workbook, worksheet, row, col } = params;\n     *   console.log(params);\n     *\n     *   // Cancel the comment delete operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeCommentDelete: 'BeforeCommentDelete';\n\n    /**\n     * Event fired after comment resolve\n     * @see {@link ISheetCommentResolveEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.CommentResolved, (params) => {\n     *   const { comment, row, col, resolved, workbook, worksheet } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly CommentResolved: 'CommentResolved';\n\n    /**\n     * Event fired before comment resolve\n     * @see {@link ISheetCommentResolveEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeCommentResolve, (params) => {\n     *   const { comment, row, col, resolved, workbook, worksheet } = params;\n     *   console.log(params);\n     *\n     *   // Cancel the comment resolve operation\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeCommentResolve: 'BeforeCommentResolve';\n}\n\nconst CommentEvent: ICommentEventMixin = {\n    CommentAdded: 'CommentAdded',\n    BeforeCommentAdd: 'BeforeCommentAdd',\n\n    CommentUpdated: 'CommentUpdated',\n    BeforeCommentUpdate: 'BeforeCommentUpdate',\n\n    CommentDeleted: 'CommentDeleted',\n    BeforeCommentDelete: 'BeforeCommentDelete',\n\n    CommentResolved: 'CommentResolved',\n    BeforeCommentResolve: 'BeforeCommentResolve',\n} as const;\n\n/**\n * @ignore\n */\nexport class FCommentEvent extends FEventName {\n    override get CommentAdded(): 'CommentAdded' {\n        return CommentEvent.CommentAdded;\n    }\n\n    override get BeforeCommentAdd(): 'BeforeCommentAdd' {\n        return CommentEvent.BeforeCommentAdd;\n    }\n\n    override get CommentUpdated(): 'CommentUpdated' {\n        return CommentEvent.CommentUpdated;\n    }\n\n    override get BeforeCommentUpdate(): 'BeforeCommentUpdate' {\n        return CommentEvent.BeforeCommentUpdate;\n    }\n\n    override get CommentDeleted(): 'CommentDeleted' {\n        return CommentEvent.CommentDeleted;\n    }\n\n    override get BeforeCommentDelete(): 'BeforeCommentDelete' {\n        return CommentEvent.BeforeCommentDelete;\n    }\n\n    override get CommentResolved(): 'CommentResolved' {\n        return CommentEvent.CommentResolved;\n    }\n\n    override get BeforeCommentResolve(): 'BeforeCommentResolve' {\n        return CommentEvent.BeforeCommentResolve;\n    }\n}\n\n/**\n * Event interface triggered after a comment is added to a sheet\n * @interface ISheetCommentAddEvent\n * @augments {IEventBase}\n */\nexport interface ISheetCommentAddEvent extends IEventBase {\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** The worksheet where the comment is added */\n    worksheet: FWorksheet;\n    /** Row index of the comment */\n    row: number;\n    /** Column index of the comment */\n    col: number;\n    /** The added comment object */\n    comment: FThreadComment;\n}\n\n/**\n * Event interface triggered before a comment is added to a sheet\n * @interface IBeforeSheetCommentAddEvent\n * @augments {IEventBase}\n */\nexport interface IBeforeSheetCommentAddEvent extends IEventBase {\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** The worksheet where the comment will be added */\n    worksheet: FWorksheet;\n    /** Row index for the new comment */\n    row: number;\n    /** Column index for the new comment */\n    col: number;\n    /** The comment item to be added */\n    comment: FTheadCommentItem;\n}\n\n/**\n * Event interface triggered after a comment is updated in a sheet\n * @interface ISheetCommentUpdateEvent\n * @augments {IEventBase}\n */\nexport interface ISheetCommentUpdateEvent extends IEventBase {\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** The worksheet containing the updated comment */\n    worksheet: FWorksheet;\n    /** Row index of the comment */\n    row: number;\n    /** Column index of the comment */\n    col: number;\n    /** The updated comment object */\n    comment: FThreadComment;\n}\n\n/**\n * Event interface triggered before a comment is updated in a sheet\n * @interface IBeforeSheetCommentUpdateEvent\n * @augments {IEventBase}\n */\nexport interface IBeforeSheetCommentUpdateEvent extends IEventBase {\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** The worksheet containing the comment */\n    worksheet: FWorksheet;\n    /** Row index of the comment */\n    row: number;\n    /** Column index of the comment */\n    col: number;\n    /** The current comment object */\n    comment: FThreadComment;\n    /** The new content to replace the existing comment */\n    newContent: RichTextValue;\n}\n\n/**\n * Event interface triggered before a comment is deleted from a sheet\n * @interface IBeforeSheetCommentDeleteEvent\n * @augments {IEventBase}\n */\nexport interface IBeforeSheetCommentDeleteEvent extends IEventBase {\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** The worksheet containing the comment */\n    worksheet: FWorksheet;\n    /** Row index of the comment */\n    row: number;\n    /** Column index of the comment */\n    col: number;\n    /** The comment to be deleted */\n    comment: FThreadComment;\n}\n\n/**\n * Event interface triggered after a comment is deleted from a sheet\n * @interface ISheetCommentDeleteEvent\n * @augments {IEventBase}\n */\nexport interface ISheetCommentDeleteEvent extends IEventBase {\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** The worksheet that contained the comment */\n    worksheet: FWorksheet;\n    /** The ID of the deleted comment */\n    commentId: string;\n}\n\n/**\n * Event interface triggered when a comment's resolve status changes\n * @interface ISheetCommentResolveEvent\n * @augments {IEventBase}\n */\nexport interface ISheetCommentResolveEvent extends IEventBase {\n    /** The workbook instance */\n    workbook: FWorkbook;\n    /** The worksheet containing the comment */\n    worksheet: FWorksheet;\n    /** Row index of the comment */\n    row: number;\n    /** Column index of the comment */\n    col: number;\n    /** The comment object */\n    comment: FThreadComment;\n    /** The new resolve status */\n    resolved: boolean;\n}\n\nFEventName.extend(FCommentEvent);\n\n/**\n * @ignore\n */\nexport interface ISheetCommentEventConfig {\n    BeforeCommentAdd: IBeforeSheetCommentAddEvent;\n    CommentAdded: ISheetCommentAddEvent;\n\n    BeforeCommentUpdate: IBeforeSheetCommentUpdateEvent;\n    CommentUpdated: ISheetCommentUpdateEvent;\n\n    BeforeCommentDelete: IBeforeSheetCommentDeleteEvent;\n    CommentDeleted: ISheetCommentDeleteEvent;\n\n    BeforeCommentResolve: ISheetCommentResolveEvent;\n    CommentResolved: ISheetCommentResolveEvent;\n}\n\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FEventName extends ICommentEventMixin {\n    }\n\n    interface IEventParamConfig extends ISheetCommentEventConfig {\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, Injector } from '@univerjs/core';\nimport type { IAddCommentCommandParams, IDeleteCommentCommandParams, IResolveCommentCommandParams, IThreadComment, IUpdateCommentCommandParams } from '@univerjs/thread-comment';\nimport type { IBeforeSheetCommentAddEvent, IBeforeSheetCommentDeleteEvent, IBeforeSheetCommentUpdateEvent, ISheetCommentAddEvent, ISheetCommentDeleteEvent, ISheetCommentResolveEvent, ISheetCommentUpdateEvent } from './f-event';\nimport { CanceledError, ICommandService, RichTextValue } from '@univerjs/core';\nimport { FUniver } from '@univerjs/core/facade';\nimport { AddCommentCommand, DeleteCommentCommand, DeleteCommentTreeCommand, ResolveCommentCommand, UpdateCommentCommand } from '@univerjs/thread-comment';\nimport { FTheadCommentBuilder, FTheadCommentItem } from './f-thread-comment';\n\n/**\n * @ignore\n */\nexport interface IFUniverCommentMixin {\n    /**\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.CommentAdded, (params) => {})` as instead\n     */\n    onCommentAdded(callback: (event: ISheetCommentAddEvent) => void): IDisposable;\n\n    /**\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.CommentUpdated, (params) => {})` as instead\n     */\n    onCommentUpdated(callback: (event: ISheetCommentUpdateEvent) => void): IDisposable;\n\n    /**\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.CommentDeleted, (params) => {})` as instead\n     */\n    onCommentDeleted(callback: (event: ISheetCommentDeleteEvent) => void): IDisposable;\n\n    /**\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.CommentResolved, (params) => {})` as instead\n     */\n    onCommentResolved(callback: (event: ISheetCommentResolveEvent) => void): IDisposable;\n\n    /**\n     * Create a new thread comment\n     * @returns {FTheadCommentBuilder} The thead comment builder\n     * @example\n     * ```ts\n     * // Create a new comment\n     * const richText = univerAPI.newRichText().insertText('hello univer');\n     * const commentBuilder = univerAPI.newTheadComment()\n     *   .setContent(richText)\n     *   .setPersonId('mock-user-id')\n     *   .setDateTime(new Date('2025-02-21 14:22:22'))\n     *   .setId('mock-comment-id')\n     *   .setThreadId('mock-thread-id');\n     *\n     * // Add the comment to the cell A1\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const cell = fWorksheet.getRange('A1');\n     * const result = await cell.addCommentAsync(commentBuilder);\n     * console.log(result);\n     * ```\n     */\n    newTheadComment(): FTheadCommentBuilder;\n}\n\n/**\n * @ignore\n */\nexport class FUniverCommentMixin extends FUniver implements IFUniverCommentMixin {\n    // eslint-disable-next-line max-lines-per-function\n    override _initialize(injector: Injector): void {\n        const commandService = injector.get(ICommandService);\n        // After command events\n        this.registerEventHandler(\n            this.Event.CommentAdded,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== AddCommentCommand.id) return;\n                const params = commandInfo.params as { unitId: string; subUnitId: string; sheetId: string };\n                if (!params) return;\n                const workbook = params.unitId ? this.getUniverSheet(params.unitId) : this.getActiveWorkbook?.();\n                if (!workbook) return;\n                const worksheet = workbook.getSheetBySheetId(params.subUnitId || params.sheetId) || workbook.getActiveSheet();\n                if (!worksheet) return;\n\n                const addParams = commandInfo.params as IAddCommentCommandParams;\n                const { comment } = addParams;\n                const threadComment = worksheet.getRange(comment.ref).getComment();\n                if (threadComment) {\n                    this.fireEvent(this.Event.CommentAdded, {\n                        workbook,\n                        worksheet,\n                        row: threadComment.getRange()?.getRow() ?? 0,\n                        col: threadComment.getRange()?.getColumn() ?? 0,\n                        comment: threadComment,\n                    });\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.CommentUpdated,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== UpdateCommentCommand.id) return;\n                const params = commandInfo.params as { unitId: string; subUnitId: string; sheetId: string };\n                if (!params) return;\n                const workbook = params.unitId ? this.getUniverSheet(params.unitId) : this.getActiveWorkbook?.();\n                if (!workbook) return;\n                const worksheet = workbook.getSheetBySheetId(params.subUnitId || params.sheetId) || workbook.getActiveSheet();\n                if (!worksheet) return;\n\n                const updateParams = commandInfo.params as IUpdateCommentCommandParams;\n                const { commentId } = updateParams.payload;\n                const threadComment = worksheet.getCommentById(commentId);\n                if (threadComment) {\n                    this.fireEvent(this.Event.CommentUpdated, {\n                        workbook,\n                        worksheet,\n                        row: threadComment.getRange()?.getRow() ?? 0,\n                        col: threadComment.getRange()?.getColumn() ?? 0,\n                        comment: threadComment,\n                    });\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.CommentDeleted,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== DeleteCommentCommand.id && commandInfo.id !== DeleteCommentTreeCommand.id) return;\n                const params = commandInfo.params as { unitId: string; subUnitId: string; sheetId: string };\n                if (!params) return;\n                const workbook = params.unitId ? this.getUniverSheet(params.unitId) : this.getActiveWorkbook?.();\n                if (!workbook) return;\n                const worksheet = workbook.getSheetBySheetId(params.subUnitId || params.sheetId) || workbook.getActiveSheet();\n                if (!worksheet) return;\n\n                const deleteParams = commandInfo.params as IDeleteCommentCommandParams;\n                const { commentId } = deleteParams;\n                this.fireEvent(this.Event.CommentDeleted, {\n                    workbook,\n                    worksheet,\n                    commentId,\n                });\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.CommentResolved,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== ResolveCommentCommand.id) return;\n                const params = commandInfo.params as { unitId: string; subUnitId: string; sheetId: string };\n                if (!params) return;\n                const workbook = params.unitId ? this.getUniverSheet(params.unitId) : this.getActiveWorkbook?.();\n                if (!workbook) return;\n                const worksheet = workbook.getSheetBySheetId(params.subUnitId || params.sheetId) || workbook.getActiveSheet();\n                if (!worksheet) return;\n\n                const resolveParams = commandInfo.params as IResolveCommentCommandParams;\n                const { commentId, resolved } = resolveParams;\n                const threadComment = worksheet.getComments().find((c) => c.getCommentData().id === commentId);\n                if (threadComment) {\n                    this.fireEvent(this.Event.CommentResolved, {\n                        workbook,\n                        worksheet,\n                        row: threadComment.getRange()!.getRow() ?? 0,\n                        col: threadComment.getRange()!.getColumn() ?? 0,\n                        comment: threadComment,\n                        resolved,\n                    });\n                }\n            })\n        );\n\n        // Before command events\n        this.registerEventHandler(\n            this.Event.BeforeCommentAdd,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== AddCommentCommand.id) return;\n                const params = commandInfo.params as { unitId: string; subUnitId: string; sheetId: string };\n                if (!params) return;\n                const workbook = params.unitId ? this.getUniverSheet(params.unitId) : this.getActiveWorkbook?.();\n                if (!workbook) return;\n                const worksheet = workbook.getSheetBySheetId(params.subUnitId || params.sheetId) || workbook.getActiveSheet();\n                if (!worksheet) return;\n\n                const addParams = commandInfo.params as IAddCommentCommandParams;\n                const { comment } = addParams;\n                const activeRange = worksheet.getActiveRange();\n                if (!activeRange) return;\n                const eventParams: IBeforeSheetCommentAddEvent = {\n                    workbook,\n                    worksheet,\n                    row: activeRange.getRow() ?? 0,\n                    col: activeRange.getColumn() ?? 0,\n                    comment: FTheadCommentItem.create(comment),\n                };\n\n                this.fireEvent(this.Event.BeforeCommentAdd, eventParams);\n                if (eventParams.cancel) {\n                    throw new CanceledError();\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeCommentUpdate,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== UpdateCommentCommand.id) return;\n                const params = commandInfo.params as { unitId: string; subUnitId: string; sheetId: string };\n                if (!params) return;\n                const workbook = params.unitId ? this.getUniverSheet(params.unitId) : this.getActiveWorkbook?.();\n                if (!workbook) return;\n                const worksheet = workbook.getSheetBySheetId(params.subUnitId || params.sheetId) || workbook.getActiveSheet();\n                if (!worksheet) return;\n\n                const updateParams = commandInfo.params as IUpdateCommentCommandParams;\n                const { commentId, text } = updateParams.payload;\n                const threadComment = worksheet.getCommentById(commentId);\n                if (threadComment) {\n                    const eventParams: IBeforeSheetCommentUpdateEvent = {\n                        workbook,\n                        worksheet,\n                        row: threadComment.getRange()?.getRow() ?? 0,\n                        col: threadComment.getRange()?.getColumn() ?? 0,\n                        comment: threadComment,\n                        newContent: RichTextValue.createByBody(text),\n                    };\n                    this.fireEvent(this.Event.BeforeCommentUpdate, eventParams);\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeCommentDelete,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== DeleteCommentCommand.id && commandInfo.id !== DeleteCommentTreeCommand.id) return;\n                const params = commandInfo.params as { unitId: string; subUnitId: string; sheetId: string };\n                if (!params) return;\n                const workbook = params.unitId ? this.getUniverSheet(params.unitId) : this.getActiveWorkbook?.();\n                if (!workbook) return;\n                const worksheet = workbook.getSheetBySheetId(params.subUnitId || params.sheetId) || workbook.getActiveSheet();\n                if (!worksheet) return;\n\n                const deleteParams = commandInfo.params as IDeleteCommentCommandParams;\n                const { commentId } = deleteParams;\n                const threadComment = worksheet.getCommentById(commentId);\n                if (threadComment) {\n                    const eventParams: IBeforeSheetCommentDeleteEvent = {\n                        workbook,\n                        worksheet,\n                        row: threadComment.getRange()?.getRow() ?? 0,\n                        col: threadComment.getRange()?.getColumn() ?? 0,\n                        comment: threadComment,\n                    };\n                    this.fireEvent(this.Event.BeforeCommentDelete, eventParams);\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeCommentResolve,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== ResolveCommentCommand.id) return;\n                const params = commandInfo.params as { unitId: string; subUnitId: string; sheetId: string };\n                if (!params) return;\n                const workbook = params.unitId ? this.getUniverSheet(params.unitId) : this.getActiveWorkbook?.();\n                if (!workbook) return;\n                const worksheet = workbook.getSheetBySheetId(params.subUnitId || params.sheetId) || workbook.getActiveSheet();\n                if (!worksheet) return;\n\n                const resolveParams = commandInfo.params as IResolveCommentCommandParams;\n                const { commentId, resolved } = resolveParams;\n                const threadComment = worksheet.getComments().find((c) => c.getCommentData().id === commentId);\n                if (threadComment) {\n                    const eventParams: ISheetCommentResolveEvent = {\n                        workbook,\n                        worksheet,\n                        row: threadComment.getRange()!.getRow() ?? 0,\n                        col: threadComment.getRange()!.getColumn() ?? 0,\n                        comment: threadComment,\n                        resolved,\n                    };\n                    this.fireEvent(this.Event.BeforeCommentResolve, eventParams);\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n    }\n\n    /**\n     * @ignore\n     */\n    override newTheadComment(comment?: IThreadComment): FTheadCommentBuilder {\n        return new FTheadCommentBuilder(comment);\n    }\n}\n\nFUniver.extend(FUniverCommentMixin);\n\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FUniver extends IFUniverCommentMixin {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable ts/explicit-function-return-type */\n\nimport type { IRange } from '@univerjs/core';\nimport type {\n    CFTimePeriodOperator,\n    IAverageHighlightCell,\n    IColorScale,\n    IConditionalFormattingRuleConfig,\n    IConditionFormattingRule,\n    IDataBar,\n    IDuplicateValuesHighlightCell,\n    IFormulaHighlightCell,\n    IIconSet,\n    INumberHighlightCell,\n    IRankHighlightCell,\n    ITextHighlightCell,\n    ITimePeriodHighlightCell,\n    IUniqueValuesHighlightCell,\n    IValueConfig,\n} from '@univerjs/sheets-conditional-formatting';\nimport { BooleanNumber, ColorKit, Tools } from '@univerjs/core';\nimport { CFNumberOperator, CFRuleType, CFSubRuleType, CFTextOperator, CFValueType, createCfId, EMPTY_ICON_TYPE, iconMap } from '@univerjs/sheets-conditional-formatting';\n\n/**\n * @ignore\n * @hideconstructor\n */\nclass ConditionalFormatRuleBaseBuilder {\n    protected _rule: Partial<IConditionFormattingRule> = {};\n\n    protected get _ruleConfig() {\n        return this._rule.rule || null;\n    }\n\n    protected _getDefaultConfig(type: CFRuleType = CFRuleType.highlightCell): IConditionalFormattingRuleConfig {\n        switch (type) {\n            case CFRuleType.colorScale: {\n                return {\n                    type,\n                    config: [\n                        { index: 0, color: new ColorKit('').toRgbString(), value: { type: CFValueType.min } },\n                        { index: 0, color: new ColorKit('green').toRgbString(), value: { type: CFValueType.max } },\n                    ],\n                } as IColorScale;\n            }\n            case CFRuleType.dataBar: {\n                return {\n                    type,\n                    isShowValue: true,\n                    config: { min: { type: CFValueType.min }, max: { type: CFValueType.max }, positiveColor: new ColorKit('green').toRgbString(), nativeColor: new ColorKit('').toRgbString(), isGradient: false },\n                } as IDataBar;\n            }\n            case CFRuleType.highlightCell: {\n                return {\n                    type,\n                    subType: CFSubRuleType.text,\n                    operator: CFTextOperator.containsText,\n                    value: 'abc',\n                    style: {},\n                } as ITextHighlightCell;\n            }\n            case CFRuleType.iconSet: {\n                return {\n                    type,\n                    isShowValue: true,\n                    config: [{\n                        operator: CFNumberOperator.greaterThanOrEqual,\n                        value: { type: CFValueType.min },\n                        iconType: EMPTY_ICON_TYPE,\n                        iconId: '',\n                    }, {\n                        operator: CFNumberOperator.greaterThanOrEqual,\n                        value: { type: CFValueType.percentile, value: 0.5 },\n                        iconType: EMPTY_ICON_TYPE,\n                        iconId: '',\n                    }, {\n                        operator: CFNumberOperator.lessThanOrEqual,\n                        value: { type: CFValueType.max },\n                        iconType: EMPTY_ICON_TYPE,\n                        iconId: '',\n                    }],\n                } as IIconSet;\n            }\n        }\n    }\n\n    constructor(initRule: Partial<IConditionFormattingRule> = {}) {\n        this._rule = initRule;\n        this._ensureAttr(this._rule, ['rule']);\n    }\n\n    // eslint-disable-next-line ts/no-explicit-any\n    protected _ensureAttr(obj: Record<string, any>, keys: string[]) {\n        keys.reduce((pre, cur) => {\n            if (!pre[cur]) {\n                pre[cur] = {};\n            }\n            return pre[cur];\n        }, obj);\n        return obj;\n    }\n\n    /**\n     * Constructs a conditional format rule from the settings applied to the builder.\n     * @returns {IConditionFormattingRule} The conditional format rule.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with no content in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellEmpty()\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    build(): IConditionFormattingRule {\n        if (!this._rule.cfId) {\n            this._rule.cfId = createCfId();\n        }\n        if (!this._rule.ranges) {\n            this._rule.ranges = [];\n        }\n        if (this._rule.stopIfTrue === undefined) {\n            this._rule.stopIfTrue = false;\n        }\n        if (!this._rule.rule?.type) {\n            this._rule.rule!.type = CFRuleType.highlightCell;\n            this._ensureAttr(this._rule, ['rule', 'style']);\n        }\n        const defaultConfig = this._getDefaultConfig(this._rule.rule!.type);\n        const result = { ...this._rule, rule: { ...defaultConfig, ...this._rule.rule } } as IConditionFormattingRule;\n        return result;\n    }\n\n    /**\n     * Deep clone a current builder.\n     * @returns {ConditionalFormatRuleBaseBuilder} A new builder with the same settings as the original.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with no content in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const builder = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellEmpty()\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()]);\n     * fWorksheet.addConditionalFormattingRule(builder.build());\n     *\n     * // Copy the rule and change the background color to green for the range A1:B2.\n     * const newRange = fWorksheet.getRange('A1:B2');\n     * const newBuilder = builder.copy()\n     *   .setBackground('#00FF00')\n     *   .setRanges([newRange.getRange()]);\n     * fWorksheet.addConditionalFormattingRule(newBuilder.build());\n     * ```\n     */\n    copy(): ConditionalFormatRuleBaseBuilder {\n        const newRule = Tools.deepClone(this._rule);\n        if (newRule.cfId) {\n            newRule.cfId = createCfId();\n        }\n        return new ConditionalFormatRuleBaseBuilder(newRule);\n    }\n\n    /**\n     * Gets the scope of the current conditional format.\n     * @returns {IRange[]} The ranges to which the conditional format applies.\n     */\n    getRanges(): IRange[] {\n        return this._rule.ranges || [];\n    }\n\n    /**\n     * Get the icon set mapping dictionary.\n     * @returns {Record<string, string[]>} The icon set mapping dictionary.\n     */\n    getIconMap(): Record<string, string[]> {\n        return iconMap;\n    }\n\n    /**\n     * Create a conditional format ID.\n     * @returns {string} The conditional format ID.\n     */\n    createCfId(): string {\n        return createCfId();\n    }\n\n    /**\n     * Sets the scope for conditional formatting.\n     * @param {IRange[]} ranges - The ranges to which the conditional format applies.\n     * @returns {ConditionalFormatRuleBaseBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with no content in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellEmpty()\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setRanges(ranges: IRange[]) {\n        this._rule.ranges = ranges;\n        return this;\n    }\n}\n\n/**\n * @hideconstructor\n */\nclass ConditionalFormatHighlightRuleBuilder extends ConditionalFormatRuleBaseBuilder {\n    constructor(initConfig: Partial<IConditionFormattingRule> = {}) {\n        super(initConfig);\n        this._ensureAttr(this._rule, ['rule', 'style']);\n    }\n\n    /**\n     * Deep clone a current builder.\n     * @returns {ConditionalFormatHighlightRuleBuilder} A new builder with the same settings as the original.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with no content in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const builder = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellEmpty()\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()]);\n     * fWorksheet.addConditionalFormattingRule(builder.build());\n     *\n     * // Copy the rule and change the background color to green for the range A1:B2.\n     * const newRange = fWorksheet.getRange('A1:B2');\n     * const newBuilder = builder.copy()\n     *   .setBackground('#00FF00')\n     *   .setRanges([newRange.getRange()]);\n     * fWorksheet.addConditionalFormattingRule(newBuilder.build());\n     * ```\n     */\n    override copy(): ConditionalFormatHighlightRuleBuilder {\n        const newRule = Tools.deepClone(this._rule);\n        if (newRule.cfId) {\n            newRule.cfId = createCfId();\n        }\n        return new ConditionalFormatHighlightRuleBuilder(newRule);\n    }\n\n    /**\n     * Set average rule.\n     * @param {IAverageHighlightCell['operator']} operator - The operator to use for the average rule.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with greater than average values in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .setAverage(univerAPI.Enum.ConditionFormatNumberOperatorEnum.greaterThan)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setAverage(operator: IAverageHighlightCell['operator']): ConditionalFormatHighlightRuleBuilder {\n        const ruleConfig = this._ruleConfig as IAverageHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.average;\n        ruleConfig.operator = operator;\n        return this;\n    }\n\n    /**\n     * Set unique values rule.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with unique values in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .setUniqueValues()\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setUniqueValues(): ConditionalFormatHighlightRuleBuilder {\n        const ruleConfig = this._ruleConfig as IUniqueValuesHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.uniqueValues;\n        return this;\n    }\n\n    /**\n     * Set duplicate values rule.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with duplicate values in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .setDuplicateValues()\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setDuplicateValues(): ConditionalFormatHighlightRuleBuilder {\n        const ruleConfig = this._ruleConfig as IDuplicateValuesHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.duplicateValues;\n        return this;\n    }\n\n    /**\n     * Set rank rule.\n     * @param {{ isBottom: boolean, isPercent: boolean, value: number }} config - The rank rule settings.\n     * @param {boolean} config.isBottom - Whether to highlight the bottom rank.\n     * @param {boolean} config.isPercent - Whether to use a percentage rank.\n     * @param {number} config.value - The rank value.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights the bottom 10% of values in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .setRank({ isBottom: true, isPercent: true, value: 10 })\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setRank(config: { isBottom: boolean; isPercent: boolean; value: number }): ConditionalFormatHighlightRuleBuilder {\n        const ruleConfig = this._ruleConfig as IRankHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.rank;\n        ruleConfig.isBottom = config.isBottom;\n        ruleConfig.isPercent = config.isPercent;\n        ruleConfig.value = config.value;\n        return this;\n    }\n\n    /**\n     * Sets the background color for the conditional format rule's format.\n     * @param {string} [color] - The background color to set. If not provided, the background color is removed.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with no content in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellEmpty()\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setBackground(color?: string): ConditionalFormatHighlightRuleBuilder {\n        if (this._ruleConfig?.type === CFRuleType.highlightCell) {\n            if (color) {\n                this._ensureAttr(this._ruleConfig, ['style', 'bg']);\n                const colorKit = new ColorKit(color);\n                this._ruleConfig.style!.bg!.rgb = colorKit.toRgbString();\n            } else {\n                delete this._ruleConfig.style.bg;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Sets text bolding for the conditional format rule's format.\n     * @param {boolean} isBold - Whether to bold the text.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that bolds the text for cells with not empty content in the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellNotEmpty()\n     *   .setBold(true)\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setBold(isBold: boolean): ConditionalFormatHighlightRuleBuilder {\n        if (this._ruleConfig?.type === CFRuleType.highlightCell) {\n            this._ensureAttr(this._ruleConfig, ['style']);\n\n            this._ruleConfig.style.bl = isBold ? BooleanNumber.TRUE : BooleanNumber.FALSE;\n        }\n        return this;\n    }\n\n    /**\n     * Sets the font color for the conditional format rule's format.\n     * @param {string} [color] - The font color to set. If not provided, the font color is removed.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that changes the font color to red for cells with not empty content in the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellNotEmpty()\n     *   .setFontColor('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setFontColor(color?: string): ConditionalFormatHighlightRuleBuilder {\n        if (this._ruleConfig?.type === CFRuleType.highlightCell) {\n            if (color) {\n                const colorKit = new ColorKit(color);\n                this._ensureAttr(this._ruleConfig, ['style', 'cl']);\n                this._ruleConfig.style!.cl!.rgb = colorKit.toRgbString();\n            } else {\n                delete this._ruleConfig.style.cl;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Sets text italics for the conditional format rule's format.\n     * @param {boolean} isItalic - Whether to italicize the text.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that italicizes the text for cells with not empty content in the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellNotEmpty()\n     *   .setItalic(true)\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setItalic(isItalic: boolean): ConditionalFormatHighlightRuleBuilder {\n        if (this._ruleConfig?.type === CFRuleType.highlightCell) {\n            this._ensureAttr(this._ruleConfig, ['style']);\n            this._ruleConfig.style.it = isItalic ? BooleanNumber.TRUE : BooleanNumber.FALSE;\n        }\n        return this;\n    }\n\n    /**\n     * Sets text strikethrough for the conditional format rule's format.\n     * @param {boolean} isStrikethrough - Whether is strikethrough the text.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that set text strikethrough for cells with not empty content in the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellNotEmpty()\n     *   .setStrikethrough(true)\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setStrikethrough(isStrikethrough: boolean): ConditionalFormatHighlightRuleBuilder {\n        if (this._ruleConfig?.type === CFRuleType.highlightCell) {\n            this._ensureAttr(this._ruleConfig, ['style', 'st']);\n            this._ruleConfig.style.st!.s = isStrikethrough ? BooleanNumber.TRUE : BooleanNumber.FALSE;\n        }\n        return this;\n    }\n\n    /**\n     * Sets text underlining for the conditional format rule's format.\n     * @param {boolean} isUnderline - Whether to underline the text.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that underlines the text for cells with not empty content in the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellNotEmpty()\n     *   .setUnderline(true)\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setUnderline(isUnderline: boolean): ConditionalFormatHighlightRuleBuilder {\n        if (this._ruleConfig?.type === CFRuleType.highlightCell) {\n            this._ensureAttr(this._ruleConfig, ['style', 'ul']);\n            this._ruleConfig.style.ul!.s = isUnderline ? BooleanNumber.TRUE : BooleanNumber.FALSE;\n        }\n        return this;\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when the cell is empty.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with no content in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellEmpty()\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenCellEmpty(): ConditionalFormatHighlightRuleBuilder {\n        const ruleConfig = this._ruleConfig as ITextHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.text;\n        ruleConfig.value = '';\n        ruleConfig.operator = CFTextOperator.equal;\n        return this;\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when the cell is not empty.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that changes the font color to red for cells with not empty content in the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellNotEmpty()\n     *   .setFontColor('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenCellNotEmpty(): ConditionalFormatHighlightRuleBuilder {\n        const ruleConfig = this._ruleConfig as ITextHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.text;\n        ruleConfig.value = '';\n        ruleConfig.operator = CFTextOperator.notEqual;\n        return this;\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when a time period is met.\n     * @param {CFTimePeriodOperator} date - The time period to check for.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with dates in the last 7 days in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenDate(univerAPI.Enum.ConditionFormatTimePeriodOperatorEnum.last7Days)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenDate(date: CFTimePeriodOperator): ConditionalFormatHighlightRuleBuilder {\n        const ruleConfig = this._ruleConfig as ITimePeriodHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.timePeriod;\n        ruleConfig.operator = date;\n        return this;\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when that the given formula evaluates to `true`.\n     * @param {string} formulaString - A custom formula that evaluates to true if the input is valid. formulaString start with '='.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with values greater than 10 in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenFormulaSatisfied('=A1>10')\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenFormulaSatisfied(formulaString: string): ConditionalFormatHighlightRuleBuilder {\n        const ruleConfig = this._ruleConfig as IFormulaHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.formula;\n        ruleConfig.value = formulaString;\n        return this;\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when a number falls between, or is either of, two specified values.\n     * @param {number} start - The lowest acceptable value.\n     * @param {number} end - The highest acceptable value.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with values between 10 and 20 in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenNumberBetween(10, 20)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenNumberBetween(start: number, end: number): ConditionalFormatHighlightRuleBuilder {\n        const min = Math.min(start, end);\n        const max = Math.max(start, end);\n        const ruleConfig = this._ruleConfig as INumberHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.number;\n        ruleConfig.value = [min, max];\n        ruleConfig.operator = CFNumberOperator.between;\n        return this;\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when a number is equal to the given value.\n     * @param {number} value - The sole acceptable value.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with values equal to 10 in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenNumberEqualTo(10)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenNumberEqualTo(value: number): ConditionalFormatHighlightRuleBuilder {\n        const ruleConfig = this._ruleConfig as INumberHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.number;\n        ruleConfig.value = value;\n        ruleConfig.operator = CFNumberOperator.equal;\n        return this;\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when a number is greater than the given value.\n     * @param {number} value - The highest unacceptable value.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with values greater than 10 in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenNumberGreaterThan(10)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenNumberGreaterThan(value: number): ConditionalFormatHighlightRuleBuilder {\n        const ruleConfig = this._ruleConfig as INumberHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.number;\n        ruleConfig.value = value;\n        ruleConfig.operator = CFNumberOperator.greaterThan;\n        return this;\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when a number is greater than or equal to the given value.\n     * @param {number} value - The lowest acceptable value.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with values greater than or equal to 10 in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenNumberGreaterThanOrEqualTo(10)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenNumberGreaterThanOrEqualTo(value: number): ConditionalFormatHighlightRuleBuilder {\n        const ruleConfig = this._ruleConfig as INumberHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.number;\n        ruleConfig.value = value;\n        ruleConfig.operator = CFNumberOperator.greaterThanOrEqual;\n        return this;\n    }\n\n    /**\n     * Sets the conditional conditional format rule to trigger when a number less than the given value.\n     * @param {number} value - The lowest unacceptable value.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with values less than 10 in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenNumberLessThan(10)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenNumberLessThan(value: number): ConditionalFormatHighlightRuleBuilder {\n        const ruleConfig = this._ruleConfig as INumberHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.number;\n        ruleConfig.value = value;\n        ruleConfig.operator = CFNumberOperator.lessThan;\n        return this;\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when a number less than or equal to the given value.\n     * @param {number} value - The highest acceptable value.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with values less than or equal to 10 in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenNumberLessThanOrEqualTo(10)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenNumberLessThanOrEqualTo(value: number): ConditionalFormatHighlightRuleBuilder {\n        const ruleConfig = this._ruleConfig as INumberHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.number;\n        ruleConfig.value = value;\n        ruleConfig.operator = CFNumberOperator.lessThanOrEqual;\n        return this;\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when a number does not fall between, and is neither of, two specified values.\n     * @param {number} start - The lowest unacceptable value.\n     * @param {number} end - The highest unacceptable value.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with values not between 10 and 20 in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenNumberNotBetween(10, 20)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenNumberNotBetween(start: number, end: number): ConditionalFormatHighlightRuleBuilder {\n        const min = Math.min(start, end);\n        const max = Math.max(start, end);\n        const ruleConfig = this._ruleConfig as INumberHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.number;\n        ruleConfig.value = [min, max];\n        ruleConfig.operator = CFNumberOperator.notBetween;\n        return this;\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when a number is not equal to the given value.\n     * @param {number} value - The sole unacceptable value.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with values not equal to 10 in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenNumberNotEqualTo(10)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenNumberNotEqualTo(value: number): ConditionalFormatHighlightRuleBuilder {\n        const ruleConfig = this._ruleConfig as INumberHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.number;\n        ruleConfig.value = value;\n        ruleConfig.operator = CFNumberOperator.notEqual;\n        return this;\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when that the input contains the given value.\n     * @param {string} text - The value that the input must contain.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with text containing 'apple' in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenTextContains('apple')\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenTextContains(text: string): ConditionalFormatHighlightRuleBuilder {\n        const ruleConfig = this._ruleConfig as ITextHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.text;\n        ruleConfig.value = text;\n        ruleConfig.operator = CFTextOperator.containsText;\n        return this;\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when that the input does not contain the given value.\n     * @param {string} text - The value that the input must not contain.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with text not containing 'apple' in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenTextDoesNotContain('apple')\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenTextDoesNotContain(text: string): ConditionalFormatHighlightRuleBuilder {\n        const ruleConfig = this._ruleConfig as ITextHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.text;\n        ruleConfig.value = text;\n        ruleConfig.operator = CFTextOperator.notContainsText;\n        return this;\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when that the input ends with the given value.\n     * @param {string} text - Text to compare against the end of the string.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with text ending with '.ai' in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenTextEndsWith('.ai')\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenTextEndsWith(text: string): ConditionalFormatHighlightRuleBuilder {\n        const ruleConfig = this._ruleConfig as ITextHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.text;\n        ruleConfig.value = text;\n        ruleConfig.operator = CFTextOperator.endsWith;\n        return this;\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when that the input is equal to the given value.\n     * @param {string} text - The sole acceptable value.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with text equal to 'apple' in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenTextEqualTo('apple')\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenTextEqualTo(text: string): ConditionalFormatHighlightRuleBuilder {\n        const ruleConfig = this._ruleConfig as ITextHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.text;\n        ruleConfig.value = text;\n        ruleConfig.operator = CFTextOperator.equal;\n        return this;\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when that the input starts with the given value.\n     * @param {string} text - Text to compare against the beginning of the string.\n     * @returns {ConditionalFormatHighlightRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with text starting with 'https://' in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenTextStartsWith('https://')\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenTextStartsWith(text: string): ConditionalFormatHighlightRuleBuilder {\n        const ruleConfig = this._ruleConfig as ITextHighlightCell;\n        ruleConfig.type = CFRuleType.highlightCell;\n        ruleConfig.subType = CFSubRuleType.text;\n        ruleConfig.value = text;\n        ruleConfig.operator = CFTextOperator.beginsWith;\n        return this;\n    }\n}\n\nclass ConditionalFormatDataBarRuleBuilder extends ConditionalFormatRuleBaseBuilder {\n    /**\n     * Deep clone a current builder.\n     * @returns {ConditionalFormatDataBarRuleBuilder} A new instance of the builder with the same settings as the original.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that adds a data bar to cells with values between -100 and 100 in the range A1:D10.\n     * // positive values are green and negative values are red.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const builder = fWorksheet.newConditionalFormattingRule()\n     *   .setDataBar({\n     *     min: { type: 'num', value: -100 },\n     *     max: { type: 'num', value: 100 },\n     *     positiveColor: '#00FF00',\n     *     nativeColor: '#FF0000',\n     *     isShowValue: true\n     *   })\n     *   .setRanges([fRange.getRange()]);\n     * fWorksheet.addConditionalFormattingRule(builder.build());\n     *\n     * // Copy the rule and apply it to a new range.\n     * const newRange = fWorksheet.getRange('F1:F10');\n     * const newBuilder = builder.copy()\n     *   .setRanges([newRange.getRange()]);\n     * fWorksheet.addConditionalFormattingRule(newBuilder.build());\n     * ```\n     */\n    override copy(): ConditionalFormatDataBarRuleBuilder {\n        const newRule = Tools.deepClone(this._rule);\n        if (newRule.cfId) {\n            newRule.cfId = createCfId();\n        }\n        return new ConditionalFormatDataBarRuleBuilder(newRule);\n    }\n\n    /**\n     * Set data bar rule.\n     * @param {{\n     *         min: IValueConfig;\n     *         max: IValueConfig;\n     *         isGradient?: boolean;\n     *         positiveColor: string;\n     *         nativeColor: string;\n     *         isShowValue?: boolean;\n     *     }} config - The data bar rule settings.\n     * @param {IValueConfig} config.min - The minimum value for the data bar.\n     * @param {IValueConfig} config.max - The maximum value for the data bar.\n     * @param {boolean} [config.isGradient] - Whether the data bar is gradient.\n     * @param {string} config.positiveColor - The color for positive values.\n     * @param {string} config.nativeColor - The color for negative values.\n     * @param {boolean} [config.isShowValue] - Whether to show the value in the cell.\n     * @returns {ConditionalFormatDataBarRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that adds a data bar to cells with values between -100 and 100 in the range A1:D10.\n     * // positive values are green and negative values are red.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .setDataBar({\n     *     min: { type: 'num', value: -100 },\n     *     max: { type: 'num', value: 100 },\n     *     positiveColor: '#00FF00',\n     *     nativeColor: '#FF0000',\n     *     isShowValue: true\n     *   })\n     *  .setRanges([fRange.getRange()])\n     * .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setDataBar(config: {\n        min: IValueConfig;\n        max: IValueConfig;\n        isGradient?: boolean;\n        positiveColor: string;\n        nativeColor: string;\n        isShowValue?: boolean;\n    }): ConditionalFormatDataBarRuleBuilder {\n        const ruleConfig = this._ruleConfig as IDataBar;\n        ruleConfig.type = CFRuleType.dataBar;\n        ruleConfig.isShowValue = !!config.isShowValue;\n        ruleConfig.config = {\n            min: config.min,\n            max: config.max,\n            positiveColor: config.positiveColor,\n            nativeColor: config.nativeColor,\n            isGradient: !!config.isGradient,\n        };\n        return this;\n    }\n}\n\nclass ConditionalFormatColorScaleRuleBuilder extends ConditionalFormatRuleBaseBuilder {\n    /**\n     * Deep clone a current builder.\n     * @returns {ConditionalFormatColorScaleRuleBuilder} A new instance of the builder with the same settings as the original.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that adds a color scale to cells with values between 0 and 100 in the range A1:D10.\n     * // The color scale is green for 0, yellow for 50, and red for 100.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const builder = fWorksheet.newConditionalFormattingRule()\n     *   .setColorScale([\n     *     { index: 0, color: '#00FF00', value: { type: 'num', value: 0 } },\n     *     { index: 1, color: '#FFFF00', value: { type: 'num', value: 50 } },\n     *     { index: 2, color: '#FF0000', value: { type: 'num', value: 100 } }\n     *   ])\n     *   .setRanges([fRange.getRange()]);\n     * fWorksheet.addConditionalFormattingRule(builder.build());\n     *\n     * // Copy the rule and apply it to a new range.\n     * const newRange = fWorksheet.getRange('F1:F10');\n     * const newBuilder = builder.copy()\n     *   .setRanges([newRange.getRange()]);\n     * fWorksheet.addConditionalFormattingRule(newBuilder.build());\n     * ```\n     */\n    override copy(): ConditionalFormatColorScaleRuleBuilder {\n        const newRule = Tools.deepClone(this._rule);\n        if (newRule.cfId) {\n            newRule.cfId = createCfId();\n        }\n        return new ConditionalFormatColorScaleRuleBuilder(newRule);\n    }\n\n    /**\n     * Set color scale rule.\n     * @param {{ index: number; color: string; value: IValueConfig }[]} config - The color scale rule settings.\n     * @param {number} config.index - The index of the color scale configuration.\n     * @param {string} config.color - The color corresponding to the index of the color scale configuration.\n     * @param {IValueConfig} config.value - The condition value corresponding to the index of the color scale configuration.\n     * @returns {ConditionalFormatColorScaleRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that adds a color scale to cells with values between 0 and 100 in the range A1:D10.\n     * // The color scale is green for 0, yellow for 50, and red for 100.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .setColorScale([\n     *     { index: 0, color: '#00FF00', value: { type: 'num', value: 0 } },\n     *     { index: 1, color: '#FFFF00', value: { type: 'num', value: 50 } },\n     *     { index: 2, color: '#FF0000', value: { type: 'num', value: 100 } }\n     *   ])\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setColorScale(config: IColorScale['config']): ConditionalFormatColorScaleRuleBuilder {\n        const ruleConfig = this._ruleConfig as IColorScale;\n        ruleConfig.type = CFRuleType.colorScale;\n        ruleConfig.config = config;\n        return this;\n    }\n}\n\nclass ConditionalFormatIconSetRuleBuilder extends ConditionalFormatRuleBaseBuilder {\n    /**\n     * Deep clone a current builder.\n     * @returns {ConditionalFormatIconSetRuleBuilder} A new instance of the builder with the same settings as the original.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a 3-arrow icon set conditional formatting rule in the range A1:D10.\n     * // The first arrow is green for values greater than 20.\n     * // The second arrow is yellow for values greater than 10.\n     * // The third arrow is red for values less than or equal to 10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const builder = fWorksheet.newConditionalFormattingRule()\n     *   .setIconSet({\n     *     iconConfigs: [\n     *       { iconType: '3Arrows', iconId: '0', operator: univerAPI.Enum.ConditionFormatNumberOperatorEnum.greaterThan, value: { type: 'num', value: 20 } },\n     *       { iconType: '3Arrows', iconId: '1', operator: univerAPI.Enum.ConditionFormatNumberOperatorEnum.greaterThan, value: { type: 'num', value: 10 } },\n     *       { iconType: '3Arrows', iconId: '2', operator: univerAPI.Enum.ConditionFormatNumberOperatorEnum.lessThanOrEqual, value: { type: 'num', value: 10 } }\n     *     ],\n     *     isShowValue: true,\n     *   })\n     *   .setRanges([fRange.getRange()]);\n     * fWorksheet.addConditionalFormattingRule(builder.build());\n     *\n     * // Copy the rule and apply it to a new range.\n     * const newRange = fWorksheet.getRange('F1:F10');\n     * const newBuilder = builder.copy()\n     *   .setRanges([newRange.getRange()]);\n     * fWorksheet.addConditionalFormattingRule(newBuilder.build());\n     * ```\n     */\n    override copy(): ConditionalFormatIconSetRuleBuilder {\n        const newRule = Tools.deepClone(this._rule);\n        if (newRule.cfId) {\n            newRule.cfId = createCfId();\n        }\n        return new ConditionalFormatIconSetRuleBuilder(newRule);\n    }\n\n    /**\n     * Set up icon set conditional formatting rule.\n     * @param {{ iconConfigs: IIconSet['config'], isShowValue: boolean }} config - The icon set conditional formatting rule settings.\n     * @param {IIconSet['config']} config.iconConfigs - The icon configurations. iconId property is a string indexing of a group icons.\n     * @param {boolean} config.isShowValue - Whether to show the value in the cell.\n     * @returns {ConditionalFormatIconSetRuleBuilder} This builder for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a 3-arrow icon set conditional formatting rule in the range A1:D10.\n     * // The first arrow is green for values greater than 20.\n     * // The second arrow is yellow for values greater than 10.\n     * // The third arrow is red for values less than or equal to 10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const builder = fWorksheet.newConditionalFormattingRule();\n     * console.log(builder.getIconMap()); // icons key-value map\n     * const rule = builder.setIconSet({\n     *     iconConfigs: [\n     *       { iconType: '3Arrows', iconId: '0', operator: univerAPI.Enum.ConditionFormatNumberOperatorEnum.greaterThan, value: { type: 'num', value: 20 } },\n     *       { iconType: '3Arrows', iconId: '1', operator: univerAPI.Enum.ConditionFormatNumberOperatorEnum.greaterThan, value: { type: 'num', value: 10 } },\n     *       { iconType: '3Arrows', iconId: '2', operator: univerAPI.Enum.ConditionFormatNumberOperatorEnum.lessThanOrEqual, value: { type: 'num', value: 10 } }\n     *     ],\n     *     isShowValue: true,\n     *   })\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setIconSet(config: { iconConfigs: IIconSet['config']; isShowValue: boolean }): ConditionalFormatIconSetRuleBuilder {\n        const ruleConfig = this._ruleConfig as IIconSet;\n        ruleConfig.type = CFRuleType.iconSet;\n        ruleConfig.config = config.iconConfigs;\n        ruleConfig.isShowValue = config.isShowValue;\n        return this;\n    }\n}\n\n/**\n * @hideconstructor\n */\nexport class FConditionalFormattingBuilder {\n    constructor(private _initConfig: { ranges?: IRange[] } = {}) {\n\n    }\n\n    /**\n     * Constructs a conditional format rule from the settings applied to the builder.\n     * @returns {IConditionFormattingRule} The conditional format rule.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with values greater than 10 in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenNumberGreaterThan(10)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    build(): IConditionFormattingRule {\n        return new ConditionalFormatRuleBaseBuilder(this._initConfig).build();\n    }\n\n    /**\n     * Set average rule.\n     * @param {IAverageHighlightCell['operator']} operator - The operator to use for the average rule.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with greater than average values in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .setAverage(univerAPI.Enum.ConditionFormatNumberOperatorEnum.greaterThan)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setAverage(operator: IAverageHighlightCell['operator']): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).setAverage(operator);\n    }\n\n    /**\n     * Set unique values rule.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with unique values in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .setUniqueValues()\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setUniqueValues(): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).setUniqueValues();\n    }\n\n    /**\n     * Set duplicate values rule.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with duplicate values in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .setDuplicateValues()\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setDuplicateValues(): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).setDuplicateValues();\n    }\n\n    /**\n     * Set rank rule.\n     * @param {{ isBottom: boolean, isPercent: boolean, value: number }} config - The rank rule settings.\n     * @param {boolean} config.isBottom - Whether to highlight the bottom rank.\n     * @param {boolean} config.isPercent - Whether to use a percentage rank.\n     * @param {number} config.value - The rank value.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights the bottom 10% of values in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .setRank({ isBottom: true, isPercent: true, value: 10 })\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setRank(config: { isBottom: boolean; isPercent: boolean; value: number }): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).setRank(config);\n    }\n\n    /**\n     * Get the icon set mapping dictionary.\n     * @returns {Record<string, string[]>} The icon set mapping dictionary.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * console.log(fWorksheet.newConditionalFormattingRule().getIconMap()); // icons key-value map\n     * ```\n     */\n    getIconMap(): Record<string, string[]> {\n        return iconMap;\n    }\n\n    /**\n     * Set up icon set conditional formatting rule.\n     * @param {{ iconConfigs: IIconSet['config'], isShowValue: boolean }} config - The icon set conditional formatting rule settings.\n     * @param {IIconSet['config']} config.iconConfigs - The icon configurations. iconId property is a string indexing of a group icons.\n     * @param {boolean} config.isShowValue - Whether to show the value in the cell.\n     * @returns {ConditionalFormatIconSetRuleBuilder} The conditional format icon set rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a 3-arrow icon set conditional formatting rule in the range A1:D10.\n     * // The first arrow is green for values greater than 20.\n     * // The second arrow is yellow for values greater than 10.\n     * // The third arrow is red for values less than or equal to 10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const builder = fWorksheet.newConditionalFormattingRule();\n     * console.log(builder.getIconMap()); // icons key-value map\n     * const rule = builder.setIconSet({\n     *     iconConfigs: [\n     *       { iconType: '3Arrows', iconId: '0', operator: univerAPI.Enum.ConditionFormatNumberOperatorEnum.greaterThan, value: { type: 'num', value: 20 } },\n     *       { iconType: '3Arrows', iconId: '1', operator: univerAPI.Enum.ConditionFormatNumberOperatorEnum.greaterThan, value: { type: 'num', value: 10 } },\n     *       { iconType: '3Arrows', iconId: '2', operator: univerAPI.Enum.ConditionFormatNumberOperatorEnum.lessThanOrEqual, value: { type: 'num', value: 10 } }\n     *     ],\n     *     isShowValue: true,\n     *   })\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setIconSet(config: { iconConfigs: IIconSet['config']; isShowValue: boolean }): ConditionalFormatIconSetRuleBuilder {\n        return new ConditionalFormatIconSetRuleBuilder(this._initConfig).setIconSet(config);\n    }\n\n    /**\n     * Set color scale rule.\n     * @param {{ index: number; color: string; value: IValueConfig }[]} config - The color scale rule settings.\n     * @param {number} config.index - The index of the color scale.\n     * @param {string} config.color - The color for the color scale.\n     * @param {IValueConfig} config.value - The value for the color scale.\n     * @returns {ConditionalFormatColorScaleRuleBuilder} The conditional format color scale rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that adds a color scale to cells with values between 0 and 100 in the range A1:D10.\n     * // The color scale is green for 0, yellow for 50, and red for 100.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .setColorScale([\n     *     { index: 0, color: '#00FF00', value: { type: 'num', value: 0 } },\n     *     { index: 1, color: '#FFFF00', value: { type: 'num', value: 50 } },\n     *     { index: 2, color: '#FF0000', value: { type: 'num', value: 100 } }\n     *   ])\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setColorScale(config: IColorScale['config']): ConditionalFormatColorScaleRuleBuilder {\n        return new ConditionalFormatColorScaleRuleBuilder(this._initConfig).setColorScale(config);\n    }\n\n    /**\n     * Set data bar rule.\n     * @param {{\n     *         min: IValueConfig;\n     *         max: IValueConfig;\n     *         isGradient?: boolean;\n     *         positiveColor: string;\n     *         nativeColor: string;\n     *         isShowValue?: boolean;\n     *     }} config - The data bar rule settings.\n     * @param {IValueConfig} config.min - The minimum value for the data bar.\n     * @param {IValueConfig} config.max - The maximum value for the data bar.\n     * @param {boolean} [config.isGradient] - Whether the data bar is gradient.\n     * @param {string} config.positiveColor - The color for positive values.\n     * @param {string} config.nativeColor - The color for negative values.\n     * @param {boolean} [config.isShowValue] - Whether to show the value in the cell.\n     * @returns {ConditionalFormatDataBarRuleBuilder} The conditional format data bar rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that adds a data bar to cells with values between -100 and 100 in the range A1:D10.\n     * // positive values are green and negative values are red.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .setDataBar({\n     *     min: { type: 'num', value: -100 },\n     *     max: { type: 'num', value: 100 },\n     *     positiveColor: '#00FF00',\n     *     nativeColor: '#FF0000',\n     *     isShowValue: true\n     *   })\n     *  .setRanges([fRange.getRange()])\n     * .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setDataBar(config: {\n        min: IValueConfig;\n        max: IValueConfig;\n        isGradient?: boolean;\n        positiveColor: string;\n        nativeColor: string;\n        isShowValue?: boolean;\n    }): ConditionalFormatDataBarRuleBuilder {\n        return new ConditionalFormatDataBarRuleBuilder(this._initConfig).setDataBar(config);\n    }\n\n    /**\n     * Sets the background color for the conditional format rule's format.\n     * @param {string} [color] - The background color to set. If not provided, the background color is removed.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with no content in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellEmpty()\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setBackground(color?: string): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).setBackground(color);\n    }\n\n    /**\n     * Sets text bolding for the conditional format rule's format.\n     * @param {boolean} isBold - Whether to bold the text.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that bolds the text for cells with not empty content in the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellNotEmpty()\n     *   .setBold(true)\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setBold(isBold: boolean): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).setBold(isBold);\n    }\n\n    /**\n     * Sets the font color for the conditional format rule's format.\n     * @param {string} [color] - The font color to set. If not provided, the font color is removed.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that changes the font color to red for cells with not empty content in the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellNotEmpty()\n     *   .setFontColor('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setFontColor(color?: string): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).setFontColor(color);\n    }\n\n    /**\n     * Sets text italics for the conditional format rule's format.\n     * @param {boolean} isItalic - Whether to italicize the text.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that italicizes the text for cells with not empty content in the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellNotEmpty()\n     *   .setItalic(true)\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setItalic(isItalic: boolean): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).setItalic(isItalic);\n    }\n\n    /**\n     * Sets text strikethrough for the conditional format rule's format.\n     * @param {boolean} isStrikethrough - Whether is strikethrough the text.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that set text strikethrough for cells with not empty content in the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellNotEmpty()\n     *   .setStrikethrough(true)\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setStrikethrough(isStrikethrough: boolean): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).setStrikethrough(isStrikethrough);\n    }\n\n    /**\n     * Sets text underlining for the conditional format rule's format.\n     * @param {boolean} isUnderline - Whether to underline the text.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that underlines the text for cells with not empty content in the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellNotEmpty()\n     *   .setUnderline(true)\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    setUnderline(isUnderline: boolean): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).setUnderline(isUnderline);\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when the cell is empty.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with no content in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellEmpty()\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenCellEmpty(): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).whenCellEmpty();\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when the cell is not empty.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that changes the font color to red for cells with not empty content in the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellNotEmpty()\n     *   .setFontColor('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenCellNotEmpty(): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).whenCellNotEmpty();\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when a time period is met.\n     * @param {CFTimePeriodOperator} date - The time period to check for.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with dates in the last 7 days in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenDate(univerAPI.Enum.ConditionFormatTimePeriodOperatorEnum.last7Days)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenDate(date: CFTimePeriodOperator): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).whenDate(date);\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when that the given formula evaluates to `true`.\n     * @param {string} formulaString - A custom formula that evaluates to true if the input is valid. formulaString start with '='.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with values greater than 10 in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenFormulaSatisfied('=A1>10')\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenFormulaSatisfied(formulaString: string): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).whenFormulaSatisfied(formulaString);\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when a number falls between, or is either of, two specified values.\n     * @param {number} start - The lowest acceptable value.\n     * @param {number} end - The highest acceptable value.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with values between 10 and 20 in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenNumberBetween(10, 20)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenNumberBetween(start: number, end: number): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).whenNumberBetween(start, end);\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when a number is equal to the given value.\n     * @param {number} value - The sole acceptable value.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with values equal to 10 in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenNumberEqualTo(10)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenNumberEqualTo(value: number): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).whenNumberEqualTo(value);\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when a number is greater than the given value.\n     * @param {number} value - The highest unacceptable value.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with values greater than 10 in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenNumberGreaterThan(10)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenNumberGreaterThan(value: number): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).whenNumberGreaterThan(value);\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when a number is greater than or equal to the given value.\n     * @param {number} value - The lowest acceptable value.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with values greater than or equal to 10 in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenNumberGreaterThanOrEqualTo(10)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenNumberGreaterThanOrEqualTo(value: number): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).whenNumberGreaterThanOrEqualTo(value);\n    }\n\n    /**\n     * Sets the conditional conditional format rule to trigger when a number less than the given value.\n     * @param {number} value - The lowest unacceptable value.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with values less than 10 in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenNumberLessThan(10)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenNumberLessThan(value: number): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).whenNumberLessThan(value);\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when a number less than or equal to the given value.\n     * @param {number} value - The highest acceptable value.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with values less than or equal to 10 in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenNumberLessThanOrEqualTo(10)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenNumberLessThanOrEqualTo(value: number): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).whenNumberLessThanOrEqualTo(value);\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when a number does not fall between, and is neither of, two specified values.\n     * @param {number} start - The lowest unacceptable value.\n     * @param {number} end - The highest unacceptable value.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with values not between 10 and 20 in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenNumberNotBetween(10, 20)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenNumberNotBetween(start: number, end: number): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).whenNumberNotBetween(start, end);\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when a number is not equal to the given value.\n     * @param {number} value - The sole unacceptable value.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with values not equal to 10 in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenNumberNotEqualTo(10)\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenNumberNotEqualTo(value: number): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).whenNumberNotEqualTo(value);\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when that the input contains the given value.\n     * @param {string} text - The value that the input must contain.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with text containing 'apple' in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenTextContains('apple')\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenTextContains(text: string): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).whenTextContains(text);\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when that the input does not contain the given value.\n     * @param {string} text - The value that the input must not contain.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with text not containing 'apple' in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenTextDoesNotContain('apple')\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenTextDoesNotContain(text: string): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).whenTextDoesNotContain(text);\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when that the input ends with the given value.\n     * @param {string} text - Text to compare against the end of the string.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with text ending with '.ai' in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenTextEndsWith('.ai')\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenTextEndsWith(text: string): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).whenTextEndsWith(text);\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when that the input is equal to the given value.\n     * @param {string} text - The sole acceptable value.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with text equal to 'apple' in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenTextEqualTo('apple')\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenTextEqualTo(text: string): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).whenTextEqualTo(text);\n    }\n\n    /**\n     * Sets the conditional format rule to trigger when that the input starts with the given value.\n     * @param {string} text - Text to compare against the beginning of the string.\n     * @returns {ConditionalFormatHighlightRuleBuilder} The conditional format highlight rule builder.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that highlights cells with text starting with 'https://' in red for the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenTextStartsWith('https://')\n     *   .setBackground('#FF0000')\n     *   .setRanges([fRange.getRange()])\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    whenTextStartsWith(text: string): ConditionalFormatHighlightRuleBuilder {\n        return new ConditionalFormatHighlightRuleBuilder(this._initConfig).whenTextStartsWith(text);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n    IAddConditionalRuleMutationParams,\n    IAnchor,\n    IClearRangeCfParams,\n    IConditionFormattingRule,\n    IDeleteConditionalRuleMutationParams,\n    IMoveConditionalRuleMutationParams,\n    ISetConditionalRuleMutationParams,\n} from '@univerjs/sheets-conditional-formatting';\nimport { Rectangle } from '@univerjs/core';\nimport {\n    AddCfCommand,\n    ClearRangeCfCommand,\n    ConditionalFormattingRuleModel,\n    DeleteCfCommand,\n    MoveCfCommand,\n    SetCfCommand,\n} from '@univerjs/sheets-conditional-formatting';\n\nimport { FRange } from '@univerjs/sheets/facade';\nimport { FConditionalFormattingBuilder } from './f-conditional-formatting-builder';\n\n/**\n * @ignore\n */\nexport interface IFRangeConditionalFormattingMixin {\n    /**\n     * Gets all the conditional formatting for the current range.\n     * @returns {IConditionFormattingRule[]} conditional formatting rules for the current range.\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that sets the cell format to italic, red background, and green font color when the cell is not empty.\n     * const fRange = fWorksheet.getRange('A1:T100');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellNotEmpty()\n     *   .setRanges([fRange.getRange()])\n     *   .setItalic(true)\n     *   .setBackground('red')\n     *   .setFontColor('green')\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     *\n     * // Get all the conditional formatting rules for the range F6:H8.\n     * const targetRange = fWorksheet.getRange('F6:H8');\n     * const rules = targetRange.getConditionalFormattingRules();\n     * console.log(rules);\n     * ```\n     */\n    getConditionalFormattingRules(): IConditionFormattingRule[];\n\n    /**\n     * Creates a constructor for conditional formatting\n     * @returns {FConditionalFormattingBuilder} The conditional formatting builder\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that sets the cell format to italic, red background, and green font color when the cell is not empty.\n     * const fRange = fWorksheet.getRange('A1:T100');\n     * const rule = fRange.createConditionalFormattingRule()\n     *   .whenCellNotEmpty()\n     *   .setItalic(true)\n     *   .setBackground('red')\n     *   .setFontColor('green')\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * console.log(fRange.getConditionalFormattingRules());\n     * ```\n     */\n    createConditionalFormattingRule(): FConditionalFormattingBuilder;\n\n    /**\n     * Add a new conditional format\n     * @deprecated use same API in FWorkSheet.\n     * @param {IConditionFormattingRule} rule\n     * @returns {FRange} Returns the current range instance for method chaining\n     * @memberof IFRangeConditionalFormattingMixin\n     */\n    addConditionalFormattingRule(rule: IConditionFormattingRule): FRange;\n\n    /**\n     * Delete conditional format according to `cfId`\n     * @deprecated use same API in FWorkSheet.\n     * @param {string} cfId\n     * @returns {FRange} Returns the current range instance for method chaining\n     * @memberof IFRangeConditionalFormattingMixin\n     */\n    deleteConditionalFormattingRule(cfId: string): FRange;\n\n    /**\n     * Modify the priority of the conditional format\n     * @deprecated use same API in FWorkSheet.\n     * @param {string} cfId Rules that need to be moved\n     * @param {string} toCfId Target rule\n     * @param {IAnchor['type']} [type] After the default move to the destination rule, if type = before moves to the front, the default value is after\n     * @returns {FRange} Returns the current range instance for method chaining\n     * @memberof FRangeConditionalFormattingMixin\n     */\n    moveConditionalFormattingRule(cfId: string, toCfId: string, type?: IAnchor['type']): FRange;\n\n    /**\n     * Set the conditional format according to `cfId`\n     * @deprecated use same API in FWorkSheet.\n     * @param {string} cfId\n     * @param {IConditionFormattingRule} rule\n     * @returns {FRange} Returns the current range instance for method chaining\n     * @memberof IFRangeConditionalFormattingMixin\n     */\n    setConditionalFormattingRule(cfId: string, rule: IConditionFormattingRule): FRange;\n\n    /**\n     * Clear the conditional rules for the range.\n     * @returns {FRange} Returns the current range instance for method chaining\n     * @memberof IFRangeConditionalFormattingMixin\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:T100');\n     *\n     * // Clear all conditional format rules for the range\n     * fRange.clearConditionalFormatRules();\n     * console.log(fRange.getConditionalFormattingRules()); // []\n     * ```\n     */\n    clearConditionalFormatRules(): FRange;\n}\n\nexport class FRangeConditionalFormattingMixin extends FRange implements IFRangeConditionalFormattingMixin {\n    private _getConditionalFormattingRuleModel(): ConditionalFormattingRuleModel {\n        return this._injector.get(ConditionalFormattingRuleModel);\n    }\n\n    override getConditionalFormattingRules(): IConditionFormattingRule[] {\n        const rules = this._getConditionalFormattingRuleModel().getSubunitRules(this._workbook.getUnitId(), this._worksheet.getSheetId()) || [];\n        return [...rules].filter((rule) => rule.ranges.some((range) => Rectangle.intersects(range, this._range)));\n    }\n\n    override createConditionalFormattingRule(): FConditionalFormattingBuilder {\n        return new FConditionalFormattingBuilder({ ranges: [this._range] });\n    }\n\n    override addConditionalFormattingRule(rule: IConditionFormattingRule): FRange {\n        const params: IAddConditionalRuleMutationParams = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            rule,\n        };\n        this._commandService.syncExecuteCommand(AddCfCommand.id, params);\n        return this;\n    }\n\n    override deleteConditionalFormattingRule(cfId: string): FRange {\n        const params: IDeleteConditionalRuleMutationParams = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            cfId,\n        };\n        this._commandService.syncExecuteCommand(DeleteCfCommand.id, params);\n        return this;\n    }\n\n    override moveConditionalFormattingRule(cfId: string, toCfId: string, type: IAnchor['type'] = 'after'): FRange {\n        const params: IMoveConditionalRuleMutationParams = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            start: { id: cfId, type: 'self' },\n            end: { id: toCfId, type },\n        };\n        this._commandService.syncExecuteCommand(MoveCfCommand.id, params);\n        return this;\n    }\n\n    override setConditionalFormattingRule(cfId: string, rule: IConditionFormattingRule): FRange {\n        const params: ISetConditionalRuleMutationParams = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            rule,\n            cfId,\n        };\n        this._commandService.syncExecuteCommand(SetCfCommand.id, params);\n        return this;\n    }\n\n    override clearConditionalFormatRules(): FRange {\n        const params: IClearRangeCfParams = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            ranges: [this._range],\n        };\n        this._commandService.syncExecuteCommand(ClearRangeCfCommand.id, params);\n        return this;\n    }\n}\n\nFRange.extend(FRangeConditionalFormattingMixin);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FRange extends IFRangeConditionalFormattingMixin { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ColorBuilder } from '@univerjs/core';\nimport { FWorkbook } from '@univerjs/sheets/facade';\n\n/**\n * @ignore\n */\nexport interface IFWorkbookConditionalFormattingMixin {\n    /**\n     * @deprecated use `univerAPI.newColor()` as instead.\n     */\n    newColor(): ColorBuilder;\n}\n\nexport class FWorkbookConditionalFormattingMixin extends FWorkbook implements IFWorkbookConditionalFormattingMixin {\n    override newColor(): ColorBuilder {\n        return new ColorBuilder();\n    }\n}\n\nFWorkbook.extend(FWorkbookConditionalFormattingMixin);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FWorkbook extends IFWorkbookConditionalFormattingMixin { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n    IAddCfCommandParams,\n    IAnchor,\n    IClearWorksheetCfParams,\n    IConditionFormattingRule,\n    IDeleteCfCommandParams,\n    IMoveCfCommandParams,\n    ISetCfCommandParams,\n} from '@univerjs/sheets-conditional-formatting';\nimport {\n    AddCfCommand,\n    ClearWorksheetCfCommand,\n    ConditionalFormattingRuleModel,\n    DeleteCfCommand,\n    MoveCfCommand,\n    SetCfCommand,\n} from '@univerjs/sheets-conditional-formatting';\nimport { FWorksheet } from '@univerjs/sheets/facade';\nimport { FConditionalFormattingBuilder } from './f-conditional-formatting-builder';\n\n/**\n * @ignore\n */\nexport interface IFWorksheetConditionalFormattingMixin {\n    /**\n     * Gets all the conditional formatting for the current sheet\n     * @returns {IConditionFormattingRule[]} conditional formatting rules for the current sheet\n     * @memberof IFWorksheetConditionalFormattingMixin\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const rules = fWorksheet.getConditionalFormattingRules();\n     * console.log(rules);\n     * ```\n     */\n    getConditionalFormattingRules(): IConditionFormattingRule[];\n\n    /**\n     * @deprecated use `newConditionalFormattingRule` instead.\n     * Creates a constructor for conditional formatting\n     * @returns {FConditionalFormattingBuilder} The conditional formatting builder\n     * @memberof IFWorksheetConditionalFormattingMixin\n     */\n    createConditionalFormattingRule(): FConditionalFormattingBuilder;\n\n    /**\n     * Creates a constructor for conditional formatting\n     * @returns {FConditionalFormattingBuilder} The conditional formatting builder\n     * @memberof IFWorksheetConditionalFormattingMixin\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that sets the cell format to italic, red background, and green font color when the cell is not empty.\n     * const fRange = fWorksheet.getRange('A1:T100');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellNotEmpty()\n     *   .setRanges([fRange.getRange()])\n     *   .setItalic(true)\n     *   .setBackground('red')\n     *   .setFontColor('green')\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    newConditionalFormattingRule(): FConditionalFormattingBuilder;\n\n    /**\n     * Add a new conditional format\n     * @param {IConditionFormattingRule} rule - The conditional formatting rule to add\n     * @returns {FWorksheet} Returns the current worksheet instance for method chaining\n     * @memberof IFWorksheetConditionalFormattingMixin\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that sets the cell format to italic, red background, and green font color when the cell is not empty.\n     * const fRange = fWorksheet.getRange('A1:T100');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellNotEmpty()\n     *   .setRanges([fRange.getRange()])\n     *   .setItalic(true)\n     *   .setBackground('red')\n     *   .setFontColor('green')\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     * ```\n     */\n    addConditionalFormattingRule(rule: IConditionFormattingRule): FWorksheet;\n\n    /**\n     * Delete conditional format according to `cfId`\n     * @param {string} cfId - The conditional formatting rule id to delete\n     * @returns {FWorksheet} Returns the current worksheet instance for method chaining\n     * @memberof IFWorksheetConditionalFormattingMixin\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const rules = fWorksheet.getConditionalFormattingRules();\n     *\n     * // Delete the first rule\n     * fWorksheet.deleteConditionalFormattingRule(rules[0]?.cfId);\n     * ```\n     */\n    deleteConditionalFormattingRule(cfId: string): FWorksheet;\n\n    /**\n     * Modify the priority of the conditional format\n     * @param {string} cfId - The conditional formatting rule id to move\n     * @param {string} toCfId Target rule\n     * @param {IAnchor['type']} [type] After the default move to the destination rule, if type = before moves to the front, the default value is after\n     * @returns {FWorksheet} Returns the current worksheet instance for method chaining\n     * @memberof FWorksheetConditionalFormattingMixin\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const rules = fWorksheet.getConditionalFormattingRules();\n     *\n     * // Move the third rule before the first rule\n     * const rule = rules[2];\n     * const targetRule = rules[0];\n     * fWorksheet.moveConditionalFormattingRule(rule?.cfId, targetRule?.cfId, 'before');\n     * ```\n     */\n    moveConditionalFormattingRule(cfId: string, toCfId: string, type?: IAnchor['type']): FWorksheet;\n\n    /**\n     * Set the conditional format according to `cfId`\n     * @param {string} cfId - The conditional formatting rule id to set\n     * @param {IConditionFormattingRule} rule - The conditional formatting rule to set\n     * @returns {FWorksheet} Returns the current worksheet instance for method chaining\n     * @memberof IFWorksheetConditionalFormattingMixin\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Create a conditional formatting rule that sets the cell format to italic, red background, and green font color when the cell is not empty.\n     * const fRange = fWorksheet.getRange('A1:T100');\n     * const rule = fWorksheet.newConditionalFormattingRule()\n     *   .whenCellNotEmpty()\n     *   .setRanges([fRange.getRange()])\n     *   .setItalic(true)\n     *   .setBackground('red')\n     *   .setFontColor('green')\n     *   .build();\n     * fWorksheet.addConditionalFormattingRule(rule);\n     *\n     * // Modify the first rule to apply to a new range\n     * const rules = fWorksheet.getConditionalFormattingRules();\n     * const newRuleRange = fWorksheet.getRange('A1:D10');\n     * fWorksheet.setConditionalFormattingRule(rules[0]?.cfId, { ...rules[0], ranges: [newRuleRange.getRange()] });\n     * ```\n     */\n    setConditionalFormattingRule(cfId: string, rule: IConditionFormattingRule): FWorksheet;\n\n    /**\n     * Removes all conditional format rules from the sheet.\n     * @returns {FWorksheet} Returns the current worksheet instance for method chaining\n     * @memberof IFWorksheetConditionalFormattingMixin\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * fWorksheet.clearConditionalFormatRules();\n     * console.log(fWorksheet.getConditionalFormattingRules()); // []\n     * ```\n     */\n    clearConditionalFormatRules(): FWorksheet;\n}\n\nexport class FWorksheetConditionalFormattingMixin extends FWorksheet implements IFWorksheetConditionalFormattingMixin {\n    private _getConditionalFormattingRuleModel(): ConditionalFormattingRuleModel {\n        return this._injector.get(ConditionalFormattingRuleModel);\n    }\n\n    override getConditionalFormattingRules(): IConditionFormattingRule[] {\n        const rules = this._getConditionalFormattingRuleModel().getSubunitRules(this._workbook.getUnitId(), this._worksheet.getSheetId()) || [];\n        return [...rules];\n    }\n\n    override createConditionalFormattingRule(): FConditionalFormattingBuilder {\n        return new FConditionalFormattingBuilder();\n    }\n\n    override newConditionalFormattingRule(): FConditionalFormattingBuilder {\n        return new FConditionalFormattingBuilder();\n    }\n\n    override addConditionalFormattingRule(rule: IConditionFormattingRule): FWorksheet {\n        const params: IAddCfCommandParams = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            rule,\n        };\n        this._commandService.syncExecuteCommand(AddCfCommand.id, params);\n        return this;\n    }\n\n    override deleteConditionalFormattingRule(cfId: string): FWorksheet {\n        const params: IDeleteCfCommandParams = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            cfId,\n        };\n        this._commandService.syncExecuteCommand(DeleteCfCommand.id, params);\n        return this;\n    }\n\n    override moveConditionalFormattingRule(cfId: string, toCfId: string, type: IAnchor['type'] = 'after'): FWorksheet {\n        const params: IMoveCfCommandParams = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            start: { id: cfId, type: 'self' },\n            end: { id: toCfId, type },\n        };\n        this._commandService.syncExecuteCommand(MoveCfCommand.id, params);\n        return this;\n    }\n\n    override setConditionalFormattingRule(cfId: string, rule: IConditionFormattingRule): FWorksheet {\n        const params: ISetCfCommandParams = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            cfId,\n            rule,\n        };\n        this._commandService.syncExecuteCommand(SetCfCommand.id, params);\n        return this;\n    }\n\n    override clearConditionalFormatRules(): FWorksheet {\n        const params: IClearWorksheetCfParams = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n        };\n        this._commandService.syncExecuteCommand(ClearWorksheetCfCommand.id, params);\n        return this;\n    }\n}\n\nFWorksheet.extend(FWorksheetConditionalFormattingMixin);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FWorksheet extends IFWorksheetConditionalFormattingMixin { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FEnum } from '@univerjs/core/facade';\nimport { CFNumberOperator, CFTimePeriodOperator } from '@univerjs/sheets-conditional-formatting';\n\n/**\n * @ignore\n */\nexport interface IFSheetsConditionalFormattingEnum {\n    /**\n     * Conditional formatting number operator\n     */\n    ConditionFormatNumberOperatorEnum: typeof CFNumberOperator;\n\n    /**\n     * Conditional formatting time period operator\n     */\n    ConditionFormatTimePeriodOperatorEnum: typeof CFTimePeriodOperator;\n}\n\nexport class FSheetsConditionalFormattingEnum implements IFSheetsConditionalFormattingEnum {\n    get ConditionFormatNumberOperatorEnum(): typeof CFNumberOperator {\n        return CFNumberOperator;\n    }\n\n    get ConditionFormatTimePeriodOperatorEnum(): typeof CFTimePeriodOperator {\n        return CFTimePeriodOperator;\n    }\n}\n\nFEnum.extend(FSheetsConditionalFormattingEnum);\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    export interface FEnum extends IFSheetsConditionalFormattingEnum {\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IRange, Nullable, Workbook } from '@univerjs/core';\nimport type { IFindComplete, IFindMatch, IFindReplaceState } from '@univerjs/find-replace';\nimport { Disposable, Inject, Injector, IUniverInstanceService } from '@univerjs/core';\nimport { createInitFindReplaceState, FindBy, FindReplaceModel, FindReplaceState, IFindReplaceService } from '@univerjs/find-replace';\nimport { FRange } from '@univerjs/sheets/facade';\n\n/**\n * @ignore\n */\nexport interface IFTextFinder {\n    /**\n     * Get all the matched cells of the current sheet, the current matched cell is the last matched cell.\n     * If current sheet changed, use `await textFinder.ensureCompleteAsync()` to ensure the find operation is completed.\n     * @returns {FRange[]} All the matched cells.\n     * @throws If the find operation is not completed.\n     * @example\n     * ```typescript\n     * // Assume the current sheet is empty sheet.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * fRange.setValues([\n     *   [1, 2, 3, 4],\n     *   [2, 3, 4, 5],\n     *   [3, 4, 5, 6],\n     *   [4, 5, 6, 7],\n     *   [5, 6, 7, 8],\n     *   [6, 7, 8, 9],\n     *   [7, 8, 9, 10],\n     *   [8, 9, 10, 11],\n     *   [9, 10, 11, 12],\n     *   [10, 11, 12, 13]\n     * ]);\n     *\n     * // Create a text-finder to find the text '5'.\n     * const textFinder = await univerAPI.createTextFinderAsync('5');\n     *\n     * // Find all cells that contain the text '5'.\n     * const matchCells = textFinder.findAll();\n     * matchCells.forEach((cell) => {\n     *   console.log(cell.getA1Notation()); // D2, C3, B4, A5\n     * });\n     * ```\n     */\n    findAll(): FRange[];\n\n    /**\n     * Get the next matched cell of the current sheet, if exists return the next matched cell and move the current matched cell to the next matched cell.\n     * If current sheet changed, use `await textFinder.ensureCompleteAsync()` to ensure the find operation is completed.\n     * @returns {Nullable<FRange>} The next matched cell.\n     * @throws If the find operation is not completed.\n     * @example\n     * ```typescript\n     * // Assume the current sheet is empty sheet.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * fRange.setValues([\n     *   [1, 2, 3, 4],\n     *   [2, 3, 4, 5],\n     *   [3, 4, 5, 6],\n     *   [4, 5, 6, 7],\n     *   [5, 6, 7, 8],\n     *   [6, 7, 8, 9],\n     *   [7, 8, 9, 10],\n     *   [8, 9, 10, 11],\n     *   [9, 10, 11, 12],\n     *   [10, 11, 12, 13]\n     * ]);\n     *\n     * // Create a text-finder to find the text '5'.\n     * const textFinder = await univerAPI.createTextFinderAsync('5');\n     * console.log(textFinder.getCurrentMatch().getA1Notation()); // current match cell is A5\n     *\n     * // Find the next matched range\n     * const nextMatch = textFinder.findNext();\n     * console.log(nextMatch.getA1Notation()); // D2\n     * console.log(textFinder.getCurrentMatch().getA1Notation()); // current match cell is D2\n     * ```\n     */\n    findNext(): Nullable<FRange>;\n\n    /**\n     * Get the previous matched cell of the current sheet, if exists return the previous matched cell and move the current matched cell to the previous matched cell.\n     * If current sheet changed, use `await textFinder.ensureCompleteAsync()` to ensure the find operation is completed.\n     * @returns {Nullable<FRange>} The previous matched cell.\n     * @throws If the find operation is not completed.\n     * @example\n     * ```typescript\n     * // Assume the current sheet is empty sheet.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * fRange.setValues([\n     *   [1, 2, 3, 4],\n     *   [2, 3, 4, 5],\n     *   [3, 4, 5, 6],\n     *   [4, 5, 6, 7],\n     *   [5, 6, 7, 8],\n     *   [6, 7, 8, 9],\n     *   [7, 8, 9, 10],\n     *   [8, 9, 10, 11],\n     *   [9, 10, 11, 12],\n     *   [10, 11, 12, 13]\n     * ]);\n     *\n     * // Create a text-finder to find the text '5'.\n     * const textFinder = await univerAPI.createTextFinderAsync('5');\n     * console.log(textFinder.getCurrentMatch().getA1Notation()); // current match cell is A5\n     *\n     * // Find the previous matched range.\n     * const previousMatch = textFinder.findPrevious();\n     * console.log(previousMatch.getA1Notation()); // B4\n     * console.log(textFinder.getCurrentMatch().getA1Notation()); // current match cell is B4\n     * ```\n     */\n    findPrevious(): Nullable<FRange>;\n\n    /**\n     * Get the current matched cell of the current sheet.\n     * If current sheet changed, use `await textFinder.ensureCompleteAsync()` to ensure the find operation is completed.\n     * @returns {Nullable<FRange>} The current matched cell.\n     * @throws If the find operation is not completed.\n     * @example\n     * ```typescript\n     * // Assume the current sheet is empty sheet.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * fRange.setValues([\n     *   [1, 2, 3, 4],\n     *   [2, 3, 4, 5],\n     *   [3, 4, 5, 6],\n     *   [4, 5, 6, 7],\n     *   [5, 6, 7, 8],\n     *   [6, 7, 8, 9],\n     *   [7, 8, 9, 10],\n     *   [8, 9, 10, 11],\n     *   [9, 10, 11, 12],\n     *   [10, 11, 12, 13]\n     * ]);\n     *\n     * // Create a text-finder to find the text '5'.\n     * const textFinder = await univerAPI.createTextFinderAsync('5');\n     *\n     * // Get the current matched range.\n     * const currentMatch = textFinder.getCurrentMatch();\n     * console.log(currentMatch.getA1Notation()); // A5\n     * ```\n     */\n    getCurrentMatch(): Nullable<FRange>;\n\n    /**\n     * Set the match case option, if true, the find operation will match case, otherwise, the find operation will ignore case.\n     * If current sheet changed, use `await textFinder.ensureCompleteAsync()` to ensure the find operation is completed.\n     * @param {boolean} matchCase - Whether to match case.\n     * @returns {Promise<IFTextFinder>} The text-finder instance.\n     * @example\n     * ```typescript\n     * // Assume the current sheet is empty sheet.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:D1');\n     * fRange.setValues([\n     *   ['hello univer', 'hello UNIVER', 'HELLO UNIVER', 'HELLO univer'],\n     * ]);\n     *\n     * // Create a text-finder to find the text 'univer'.\n     * const textFinder = await univerAPI.createTextFinderAsync('univer');\n     * let matchCells = textFinder.findAll();\n     * matchCells.forEach((cell) => {\n     *   console.log(cell.getA1Notation()); // A1, B1, C1, D1\n     * });\n     *\n     * // Set the match case.\n     * await textFinder.matchCaseAsync(true);\n     * matchCells = textFinder.findAll();\n     * matchCells.forEach((cell) => {\n     *   console.log(cell.getA1Notation()); // A1, D1\n     * });\n     * ```\n     */\n    matchCaseAsync(matchCase: boolean): Promise<IFTextFinder>;\n\n    /**\n     * Set the match entire cell option, if true, the find operation will match entire cell value, otherwise, the find operation will match part of the cell value.\n     * If current sheet changed, use `await textFinder.ensureCompleteAsync()` to ensure the find operation is completed.\n     * @param {boolean} matchEntireCell - Whether to match entire cell value.\n     * @returns {Promise<IFTextFinder>} The text-finder instance.\n     * @example\n     * ```typescript\n     * // Assume the current sheet is empty sheet.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:D1');\n     * fRange.setValues([\n     *   ['hello univer', 'hello univer 1', 'hello univer 2', 'hello univer 3'],\n     * ]);\n     *\n     * // Create a text-finder to find the text 'hello univer'.\n     * const textFinder = await univerAPI.createTextFinderAsync('hello univer');\n     * let matchCells = textFinder.findAll();\n     * matchCells.forEach((cell) => {\n     *   console.log(cell.getA1Notation()); // A1, B1, C1, D1\n     * });\n     *\n     * // Set the match entire cell.\n     * await textFinder.matchEntireCellAsync(true);\n     * matchCells = textFinder.findAll();\n     * matchCells.forEach((cell) => {\n     *   console.log(cell.getA1Notation()); // A1\n     * });\n     * ```\n     */\n    matchEntireCellAsync(matchEntireCell: boolean): Promise<IFTextFinder>;\n\n    /**\n     * Set the match formula text option, if true, the find operation will match formula text, otherwise, the find operation will match value.\n     * If current sheet changed, use `await textFinder.ensureCompleteAsync()` to ensure the find operation is completed.\n     * @param {boolean} matchFormulaText - Whether to match formula text.\n     * @returns {Promise<IFTextFinder>} The text-finder instance.\n     * @example\n     * ```typescript\n     * // Assume the current sheet is empty sheet.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:D1');\n     * fRange.setValues([\n     *   ['sum', '1', '=SUM(2)', '3'],\n     * ]);\n     *\n     * // Create a text-finder to find the text 'sum'.\n     * const textFinder = await univerAPI.createTextFinderAsync('sum');\n     * let matchCells = textFinder.findAll();\n     * matchCells.forEach((cell) => {\n     *   console.log(cell.getA1Notation()); // A1\n     * });\n     *\n     * // Set the match entire cell.\n     * await textFinder.matchFormulaTextAsync(true);\n     * matchCells = textFinder.findAll();\n     * matchCells.forEach((cell) => {\n     *   console.log(cell.getA1Notation()); // A1, C1\n     * });\n     * ```\n     */\n    matchFormulaTextAsync(matchFormulaText: boolean): Promise<IFTextFinder>;\n\n    /**\n     * Replace all the matched text with the given text.\n     * If current sheet changed, use `await textFinder.ensureCompleteAsync()` to ensure the find operation is completed.\n     * @param {string} replaceText - The text to replace.\n     * @returns {Promise<number>} The count of replaced text.\n     * @throws If the find operation is not completed.\n     * @example\n     * ```typescript\n     * // Assume the current sheet is empty sheet.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('A1:D1');\n     * fRange.setValues([\n     *   ['hello', 'hello', 'hello', 'hello'],\n     * ]);\n     *\n     * // Create a text-finder to find the text 'hello'.\n     * const textFinder = await univerAPI.createTextFinderAsync('hello');\n     *\n     * // Replace all the matched text with 'hello univer'.\n     * const count = await textFinder.replaceAllWithAsync('hello univer');\n     * console.log(count); // 4\n     * console.log(fRange.getValues()); // [['hello univer', 'hello univer', 'hello univer', 'hello univer']]\n     * ```\n     */\n    replaceAllWithAsync(replaceText: string): Promise<number>;\n\n    /**\n     * Replace the current matched text with the given text.\n     * If current sheet changed, use `await textFinder.ensureCompleteAsync()` to ensure the find operation is completed.\n     * @param {string} replaceText - The text to replace.\n     * @returns {Promise<boolean>} Whether the replace is successful.\n     * @throws If the find operation is not completed.\n     * @example\n     * ```typescript\n     * // Assume the current sheet is empty sheet.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('B1:E1');\n     * fRange.setValues([\n     *   ['hello', 'hello', 'hello', 'hello'],\n     * ]);\n     *\n     * // Create a text-finder to find the text 'hello'.\n     * const textFinder = await univerAPI.createTextFinderAsync('hello');\n     *\n     * // Replace the current matched text with 'hello univer'.\n     * const replaced = await textFinder.replaceWithAsync('hello univer');\n     * console.log(replaced); // true\n     * console.log(fRange.getValues()); // [['hello', 'hello', 'hello', 'hello univer']]\n     * ```\n     */\n    replaceWithAsync(replaceText: string): Promise<boolean>;\n\n    /**\n     * Ensure the find operation is completed. Especially when the current sheet changed use this method to ensure the find operation is completed.\n     * @returns {Promise<Nullable<IFindComplete>>} The find complete result.\n     * @example\n     * ```typescript\n     * // Create a text-finder to find the text '1'.\n     * const textFinder = await univerAPI.createTextFinderAsync('1');\n     *\n     * // Find all cells that contain the text '1'.\n     * const matchCells = textFinder.findAll();\n     * matchCells.forEach((cell) => {\n     *   console.log(cell.getA1Notation());\n     * });\n     *\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const sheets = fWorkbook.getSheets();\n     *\n     * // Change the current sheet to the second sheet.\n     * sheets[1]?.activate();\n     *\n     * // Ensure the find operation is completed of the current sheet.\n     * await textFinder.ensureCompleteAsync();\n     * const matchCells2 = textFinder.findAll();\n     * matchCells2.forEach((cell) => {\n     *   console.log(cell.getA1Notation());\n     * });\n     * ```\n     */\n    ensureCompleteAsync(): Promise<Nullable<IFindComplete>>;\n}\n\n/**\n * This interface class provides methods to find and replace text in the univer.\n * @hideconstructor\n */\nexport class FTextFinder extends Disposable implements IFTextFinder {\n    private readonly _state = new FindReplaceState();\n    private _model: Nullable<FindReplaceModel>;\n    private _complete: Nullable<IFindComplete>;\n    constructor(\n        _initialState: Partial<IFindReplaceState>,\n        @Inject(Injector) private readonly _injector: Injector,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @IFindReplaceService private readonly _findReplaceService: IFindReplaceService\n    ) {\n        super();\n        const providers = this._findReplaceService.getProviders();\n        this._model = this._injector.createInstance(FindReplaceModel, this._state, providers);\n        const newState = {\n            ...createInitFindReplaceState(),\n            ..._initialState,\n        };\n        this._state.changeState(newState);\n    }\n\n    findAll(): FRange[] {\n        if (!this._state.findCompleted || !this._complete) {\n            return [];\n        }\n        return this._complete.results.map((result) => {\n            return this._findMatchToFRange(result);\n        });\n    }\n\n    findNext(): Nullable<FRange> {\n        if (!this._state.findCompleted || !this._complete) {\n            return null;\n        }\n        const match = this._model?.moveToNextMatch();\n        if (!match) {\n            return null;\n        }\n        return this._findMatchToFRange(match);\n    }\n\n    findPrevious(): Nullable<FRange> {\n        const match = this._model?.moveToPreviousMatch();\n        if (!match) {\n            return null;\n        }\n        return this._findMatchToFRange(match);\n    }\n\n    getCurrentMatch(): Nullable<FRange> {\n        if (!this._state.findCompleted || !this._complete) {\n            throw new Error('Find operation is not completed.');\n        }\n        const match = this._model?.currentMatch$.value;\n        if (!match) {\n            return null;\n        }\n        return this._findMatchToFRange(match);\n    }\n\n    async matchCaseAsync(matchCase: boolean): Promise<IFTextFinder> {\n        this._state.changeState({ caseSensitive: matchCase, findCompleted: false });\n        return new Promise((resolve) => {\n            const subscribe = this._state.stateUpdates$.subscribe(async (state) => {\n                if (state.findCompleted === true) {\n                    subscribe.unsubscribe();\n                    await this.ensureCompleteAsync();\n                    resolve(this);\n                }\n            });\n        });\n    }\n\n    async matchEntireCellAsync(matchEntireCell: boolean): Promise<IFTextFinder> {\n        this._state.changeState({ matchesTheWholeCell: matchEntireCell, findCompleted: false });\n        return new Promise((resolve) => {\n            const subscribe = this._state.stateUpdates$.subscribe(async (state) => {\n                if (state.findCompleted === true) {\n                    subscribe.unsubscribe();\n                    await this.ensureCompleteAsync();\n                    resolve(this);\n                }\n            });\n        });\n    }\n\n    async matchFormulaTextAsync(matchFormulaText: boolean): Promise<IFTextFinder> {\n        this._state.changeState({ findBy: matchFormulaText ? FindBy.FORMULA : FindBy.VALUE, findCompleted: false });\n        return new Promise((resolve) => {\n            const subscribe = this._state.stateUpdates$.subscribe(async (state) => {\n                if (state.findCompleted === true) {\n                    subscribe.unsubscribe();\n                    await this.ensureCompleteAsync();\n                    resolve(this);\n                }\n            });\n        });\n    }\n\n    async replaceAllWithAsync(replaceText: string): Promise<number> {\n        await this._state.changeState({ replaceRevealed: true, replaceString: replaceText });\n        const res = (await this._model?.replaceAll())?.success ?? 0;\n        this._state.changeState({ replaceRevealed: false });\n        return res;\n    }\n\n    async replaceWithAsync(replaceText: string): Promise<boolean> {\n        await this._state.changeState({ replaceRevealed: true, replaceString: replaceText });\n        await this._model?.replace();\n        this._state.changeState({ replaceRevealed: false });\n        return true;\n    }\n\n    async ensureCompleteAsync(): Promise<Nullable<IFindComplete>> {\n        this._complete = await this._model?.start();\n    };\n\n    private _findMatchToFRange(match: IFindMatch): FRange {\n        const { unitId } = match;\n        const { subUnitId, range } = match.range as { subUnitId: string; range: IRange };\n        const workbook = this._univerInstanceService.getUnit(unitId) as Workbook;\n        const worksheet = workbook.getSheetBySheetId(subUnitId)!;\n        return this._injector.createInstance(FRange, workbook, worksheet, range);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IFindReplaceState } from '@univerjs/find-replace';\nimport { FUniver } from '@univerjs/core/facade';\nimport { FTextFinder } from './f-text-finder';\n\n/**\n * @ignore\n */\nexport interface IFUniverFindReplaceMixin {\n    /**\n     * Create a text-finder for the current univer.\n     * @param {string} text - The text to find.\n     * @returns {Promise<FTextFinder | null>} A promise that resolves to the text-finder instance.\n     * @example\n     * ```typescript\n     * // Assume the current sheet is empty sheet.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Set some values to the range A1:D10.\n     * const fRange = fWorksheet.getRange('A1:D10');\n     * fRange.setValues([\n     *   [1, 2, 3, 4],\n     *   [2, 3, 4, 5],\n     *   [3, 4, 5, 6],\n     *   [4, 5, 6, 7],\n     *   [5, 6, 7, 8],\n     *   [6, 7, 8, 9],\n     *   [7, 8, 9, 10],\n     *   [8, 9, 10, 11],\n     *   [9, 10, 11, 12],\n     *   [10, 11, 12, 13]\n     * ]);\n     *\n     * // Create a text-finder to find the text '5'.\n     * const textFinder = await univerAPI.createTextFinderAsync('5');\n     *\n     * // Find all cells that contain the text '5'.\n     * const matchCells = textFinder.findAll();\n     * matchCells.forEach((cell) => {\n     *   console.log(cell.getA1Notation()); // D2, C3, B4, A5\n     * });\n     * ```\n     */\n    createTextFinderAsync(text: string): Promise<FTextFinder | null>;\n}\n\nexport class FUniverFindReplaceMixin extends FUniver implements IFUniverFindReplaceMixin {\n    override async createTextFinderAsync(text: string): Promise<FTextFinder | null> {\n        const state: Partial<IFindReplaceState> = { findString: text };\n        const textFinder = this._injector.createInstance(FTextFinder, state);\n        await textFinder.ensureCompleteAsync();\n        return textFinder;\n    }\n}\n\nFUniver.extend(FUniverFindReplaceMixin);\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FUniver extends IFUniverFindReplaceMixin {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IRotationSkewFlipTransform, ISize } from '@univerjs/core';\nimport type { ICellOverGridPosition } from '@univerjs/sheets';\nimport type { ISheetImage, SheetDrawingAnchorType } from '@univerjs/sheets-drawing';\nimport { ArrangeTypeEnum, DrawingTypeEnum, generateRandomId, ICommandService, ImageSourceType, Inject, Injector } from '@univerjs/core';\nimport { FBase } from '@univerjs/core/facade';\nimport { getImageSize } from '@univerjs/drawing';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { RemoveSheetDrawingCommand, SetDrawingArrangeCommand, SetSheetDrawingCommand } from '@univerjs/sheets-drawing-ui';\nimport { convertPositionCellToSheetOverGrid, convertPositionSheetOverGridToAbsolute, ISheetSelectionRenderService, SheetSkeletonManagerService } from '@univerjs/sheets-ui';\n\nexport interface IFOverGridImage extends Omit<ISheetImage, 'sheetTransform' | 'transform'>, ICellOverGridPosition, IRotationSkewFlipTransform, Required<ISize> {\n\n}\n\n/**\n * Convert the image parameter to a FOverGridImage\n * @param {ISheetImage} sheetImage The image parameter\n * @param {SheetSkeletonManagerService} sheetSkeletonManagerService The skeleton manager service\n * @returns {IFOverGridImage} The FOverGridImage {@link IFOverGridImage}\n */\nfunction convertSheetImageToFOverGridImage(sheetImage: ISheetImage, sheetSkeletonManagerService: SheetSkeletonManagerService): IFOverGridImage {\n    const { from, to, flipY = false, flipX = false, angle = 0, skewX = 0, skewY = 0 } = sheetImage.sheetTransform;\n\n    const { column: fromColumn, columnOffset: fromColumnOffset, row: fromRow, rowOffset: fromRowOffset } = from;\n\n    const absolutePosition = convertPositionSheetOverGridToAbsolute(\n        sheetImage.unitId,\n        sheetImage.subUnitId,\n        { from, to },\n        sheetSkeletonManagerService\n    );\n\n    const { width, height } = absolutePosition;\n\n    return {\n        ...sheetImage,\n        column: fromColumn,\n        columnOffset: fromColumnOffset,\n        row: fromRow,\n        rowOffset: fromRowOffset,\n        width,\n        height,\n        flipY,\n        flipX,\n        angle,\n        skewX,\n        skewY,\n    };\n}\n\n/**\n * Convert the FOverGridImage to a ISheetImage\n * @param {IFOverGridImage} fOverGridImage The FOverGridImage\n * @param {ISheetSelectionRenderService} selectionRenderService The selection render service\n * @param {SheetSkeletonManagerService} sheetSkeletonManagerService The skeleton manager service\n * @returns {ISheetImage} The ISheetImage {@link ISheetImage}\n */\nfunction convertFOverGridImageToSheetImage(fOverGridImage: IFOverGridImage, selectionRenderService: ISheetSelectionRenderService, sheetSkeletonManagerService: SheetSkeletonManagerService): ISheetImage {\n    const { column: fromColumn, columnOffset: fromColumnOffset, row: fromRow, rowOffset: fromRowOffset, flipY = false, flipX = false, angle = 0, skewX = 0, skewY = 0, width, height } = fOverGridImage;\n\n    const absolutePosition = convertPositionCellToSheetOverGrid(\n        fOverGridImage.unitId,\n        fOverGridImage.subUnitId,\n        { column: fromColumn, columnOffset: fromColumnOffset, row: fromRow, rowOffset: fromRowOffset },\n        width,\n        height,\n        selectionRenderService,\n        sheetSkeletonManagerService\n    );\n\n    const { sheetTransform, transform } = absolutePosition;\n\n    return {\n        ...fOverGridImage,\n        sheetTransform: {\n            ...sheetTransform,\n            flipY,\n            flipX,\n            angle,\n            skewX,\n            skewY,\n        },\n        transform: {\n            ...transform,\n            flipY,\n            flipX,\n            angle,\n            skewX,\n            skewY,\n        },\n    };\n}\n\n/**\n * @hideconstructor\n */\nexport class FOverGridImageBuilder {\n    private _image: IFOverGridImage;\n    constructor(\n        unitId: string,\n        subUnitId: string,\n        @Inject(Injector) protected readonly _injector: Injector\n        // @Inject(SheetSkeletonManagerService) protected readonly _skeletonManagerService: SheetSkeletonManagerService,\n        // @ISheetSelectionRenderService protected readonly _selectionRenderService: ISheetSelectionRenderService\n    ) {\n        this._image = {\n            drawingId: generateRandomId(6),\n            drawingType: DrawingTypeEnum.DRAWING_IMAGE,\n            imageSourceType: ImageSourceType.BASE64,\n            source: '',\n            unitId,\n            subUnitId,\n            column: 0,\n            columnOffset: 0,\n            row: 0,\n            rowOffset: 0,\n            width: 0,\n            height: 0,\n        };\n    }\n\n    /**\n     * Set the initial image configuration for the image builder.\n     * @param {ISheetImage} image - The image configuration\n     * @returns {FOverGridImageBuilder} The `FOverGridImageBuilder` for chaining\n     * @example\n     * ```ts\n     * // create a new image builder and set initial image configuration.\n     * // then build `ISheetImage` and insert it into the sheet, position is start from F6 cell.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = await fWorksheet.newOverGridImage()\n     *   .setImage({\n     *     drawingId: '123456',\n     *     drawingType: univerAPI.Enum.DrawingType.DRAWING_IMAGE,\n     *     imageSourceType: univerAPI.Enum.ImageSourceType.BASE64,\n     *     source: 'https://avatars.githubusercontent.com/u/61444807?s=48&v=4',\n     *     unitId: fWorkbook.getId(),\n     *     subUnitId: fWorksheet.getSheetId(),\n     *   })\n     *   .setColumn(5)\n     *   .setRow(5)\n     *   .buildAsync();\n     * fWorksheet.insertImages([image]);\n     * ```\n     */\n    setImage(image: ISheetImage): FOverGridImageBuilder {\n        const renderManagerService = this._injector.get(IRenderManagerService);\n        const render = renderManagerService.getRenderById(image.unitId);\n        if (!render) {\n            throw new Error(`Render Unit with unitId ${image.unitId} not found`);\n        }\n        const skeletonManagerService = render.with(SheetSkeletonManagerService);\n\n        if (image.sheetTransform == null) {\n            image.sheetTransform = {\n                from: {\n                    column: 0,\n                    columnOffset: 0,\n                    row: 0,\n                    rowOffset: 0,\n                },\n                to: {\n                    column: 0,\n                    columnOffset: 0,\n                    row: 0,\n                    rowOffset: 0,\n                },\n            };\n        }\n        this._image = convertSheetImageToFOverGridImage(image, skeletonManagerService);\n        return this;\n    }\n\n    /**\n     * Set the source of the image.\n     * @param {string} source - The source of the image\n     * @param {ImageSourceType} [sourceType] - The source type of the image, default is URL\n     * @returns {FOverGridImageBuilder} The `FOverGridImageBuilder` for chaining\n     * @example\n     * ```ts\n     * // create a new image builder and set image source.\n     * // then build `ISheetImage` and insert it into the sheet, position is start from F6 cell.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = await fWorksheet.newOverGridImage()\n     *   .setSource('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', univerAPI.Enum.ImageSourceType.URL)\n     *   .setColumn(5)\n     *   .setRow(5)\n     *   .buildAsync();\n     * fWorksheet.insertImages([image]);\n     * ```\n     */\n    setSource(source: string): FOverGridImageBuilder;\n    setSource(source: string, sourceType?: ImageSourceType): FOverGridImageBuilder;\n    setSource(source: string, sourceType?: ImageSourceType): FOverGridImageBuilder {\n        const sourceTypeVal = sourceType ?? ImageSourceType.URL;\n        this._image.source = source;\n        this._image.imageSourceType = sourceTypeVal;\n        return this;\n    }\n\n    /**\n     * Get the source of the image\n     * @returns {string} The source of the image\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const images = fWorksheet.getImages();\n     * images.forEach((image) => {\n     *   console.log(image, image.toBuilder().getSource());\n     * });\n     * ```\n     */\n    getSource(): string {\n        return this._image.source;\n    }\n\n    /**\n     * Get the source type of the image\n     * @returns {ImageSourceType} The source type of the image\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const images = fWorksheet.getImages();\n     * images.forEach((image) => {\n     *   console.log(image, image.toBuilder().getSourceType());\n     * });\n     * ```\n     */\n    getSourceType(): ImageSourceType {\n        return this._image.imageSourceType;\n    }\n\n    /**\n     * Set the horizontal position of the image\n     * @param {number} column - The column index of the image start position, start at 0\n     * @returns {FOverGridImageBuilder} The `FOverGridImageBuilder` for chaining\n     * @example\n     * ```ts\n     * // create a new image builder and set image source.\n     * // then build `ISheetImage` and insert it into the sheet, position is start from F6 cell.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = await fWorksheet.newOverGridImage()\n     *   .setSource('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', univerAPI.Enum.ImageSourceType.URL)\n     *   .setColumn(5)\n     *   .setRow(5)\n     *   .buildAsync();\n     * fWorksheet.insertImages([image]);\n     * ```\n     */\n    setColumn(column: number): FOverGridImageBuilder {\n        this._image.column = column;\n        return this;\n    }\n\n    /**\n     * Set the vertical position of the image\n     * @param {number} row - The row index of the image start position, start at 0\n     * @returns {FOverGridImageBuilder} The `FOverGridImageBuilder` for chaining\n     * @example\n     * ```ts\n     * // create a new image builder and set image source.\n     * // then build `ISheetImage` and insert it into the sheet, position is start from F6 cell.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = await fWorksheet.newOverGridImage()\n     *   .setSource('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', univerAPI.Enum.ImageSourceType.URL)\n     *   .setColumn(5)\n     *   .setRow(5)\n     *   .buildAsync();\n     * fWorksheet.insertImages([image]);\n     * ```\n     */\n    setRow(row: number): FOverGridImageBuilder {\n        this._image.row = row;\n        return this;\n    }\n\n    /**\n     * Set the horizontal offset of the image\n     * @param {number} offset - The column offset of the image start position, pixel unit\n     * @returns {FOverGridImageBuilder} The `FOverGridImageBuilder` for chaining\n     * @example\n     * ```ts\n     * // create a new image builder and set image source.\n     * // then build `ISheetImage` and insert it into the sheet, position is start from F6 cell and horizontal offset is 10px.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = await fWorksheet.newOverGridImage()\n     *   .setSource('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', univerAPI.Enum.ImageSourceType.URL)\n     *   .setColumn(5)\n     *   .setRow(5)\n     *   .setColumnOffset(10)\n     *   .buildAsync();\n     * fWorksheet.insertImages([image]);\n     * ```\n     */\n    setColumnOffset(offset: number): FOverGridImageBuilder {\n        this._image.columnOffset = offset;\n        return this;\n    }\n\n    /**\n     * Set the vertical offset of the image\n     * @param {number} offset - The row offset of the image start position, pixel unit\n     * @returns {FOverGridImageBuilder} The `FOverGridImageBuilder` for chaining\n     * @example\n     * ```ts\n     * // create a new image builder and set image source.\n     * // then build `ISheetImage` and insert it into the sheet, position is start from F6 cell and vertical offset is 10px.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = await fWorksheet.newOverGridImage()\n     *   .setSource('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', univerAPI.Enum.ImageSourceType.URL)\n     *   .setColumn(5)\n     *   .setRow(5)\n     *   .setRowOffset(10)\n     *   .buildAsync();\n     * fWorksheet.insertImages([image]);\n     * ```\n     */\n    setRowOffset(offset: number): FOverGridImageBuilder {\n        this._image.rowOffset = offset;\n        return this;\n    }\n\n    /**\n     * Set the width of the image\n     * @param {number} width - The width of the image, pixel unit\n     * @returns {FOverGridImageBuilder} The `FOverGridImageBuilder` for chaining\n     * @example\n     * ```ts\n     * // create a new image builder and set image source.\n     * // then build `ISheetImage` and insert it into the sheet, position is start from F6 cell, width is 120px and height is 50px.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = await fWorksheet.newOverGridImage()\n     *   .setSource('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', univerAPI.Enum.ImageSourceType.URL)\n     *   .setColumn(5)\n     *   .setRow(5)\n     *   .setWidth(120)\n     *   .setHeight(50)\n     *   .buildAsync();\n     * fWorksheet.insertImages([image]);\n     * ```\n     */\n    setWidth(width: number): FOverGridImageBuilder {\n        this._image.width = width;\n        return this;\n    }\n\n    /**\n     * Set the height of the image\n     * @param {number} height - The height of the image, pixel unit\n     * @returns {FOverGridImageBuilder} The `FOverGridImageBuilder` for chaining\n     * @example\n     * ```ts\n     * // create a new image builder and set image source.\n     * // then build `ISheetImage` and insert it into the sheet, position is start from F6 cell, width is 120px and height is 50px.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = await fWorksheet.newOverGridImage()\n     *   .setSource('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', univerAPI.Enum.ImageSourceType.URL)\n     *   .setColumn(5)\n     *   .setRow(5)\n     *   .setWidth(120)\n     *   .setHeight(50)\n     *   .buildAsync();\n     * fWorksheet.insertImages([image]);\n     * ```\n     */\n    setHeight(height: number): FOverGridImageBuilder {\n        this._image.height = height;\n        return this;\n    }\n\n    /**\n     * Set the anchor type of the image, whether the position and size change with the cell\n     * @param {SheetDrawingAnchorType} anchorType - The anchor type of the image\n     * @returns {FOverGridImageBuilder} The `FOverGridImageBuilder` for chaining\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // image1 position is start from A6 cell, anchor type is Position.\n     * // Only the position of the drawing follows the cell changes. When rows or columns are inserted or deleted, the position of the drawing changes, but the size remains the same.\n     * const image1 = await fWorksheet.newOverGridImage()\n     *   .setSource('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', univerAPI.Enum.ImageSourceType.URL)\n     *   .setColumn(0)\n     *   .setRow(5)\n     *   .setAnchorType(univerAPI.Enum.SheetDrawingAnchorType.Position)\n     *   .buildAsync();\n     *\n     * // image2 position is start from C6 cell, anchor type is Both.\n     * // The size and position of the drawing follow the cell changes. When rows or columns are inserted or deleted, the size and position of the drawing change accordingly.\n     * const image2 = await fWorksheet.newOverGridImage()\n     *   .setSource('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', univerAPI.Enum.ImageSourceType.URL)\n     *   .setColumn(2)\n     *   .setRow(5)\n     *   .setAnchorType(univerAPI.Enum.SheetDrawingAnchorType.Both)\n     *   .buildAsync();\n     *\n     * // image3 position is start from E6 cell, anchor type is None.\n     * // The size and position of the drawing do not follow the cell changes. When rows or columns are inserted or deleted, the position and size of the drawing remain unchanged.\n     * const image3 = await fWorksheet.newOverGridImage()\n     *   .setSource('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', univerAPI.Enum.ImageSourceType.URL)\n     *   .setColumn(4)\n     *   .setRow(5)\n     *   .setAnchorType(univerAPI.Enum.SheetDrawingAnchorType.None)\n     *   .buildAsync();\n     *\n     * // insert images into the sheet\n     * fWorksheet.insertImages([image1, image2, image3]);\n     *\n     * // after 2 seconds, set the row height of the 5th row to 100px and insert a row before the 5th row.\n     * // then observe the position and size changes of the images.\n     * setTimeout(() => {\n     *   fWorksheet.setRowHeight(5, 100).insertRowBefore(5);\n     * }, 2000);\n     * ```\n     */\n    setAnchorType(anchorType: SheetDrawingAnchorType): FOverGridImageBuilder {\n        this._image.anchorType = anchorType;\n        return this;\n    }\n\n    /**\n     * Set the cropping region of the image by defining the top edges, thereby displaying the specific part of the image you want.\n     * @param {number} top - The number of pixels to crop from the top of the image\n     * @returns {FOverGridImageBuilder} The `FOverGridImageBuilder` for chaining\n     * @example\n     * ```ts\n     * // create a new image builder and set image source.\n     * // then build `ISheetImage` and insert it into the sheet, position is start from F6 cell, top crop is 10px.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = await fWorksheet.newOverGridImage()\n     *   .setSource('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', univerAPI.Enum.ImageSourceType.URL)\n     *   .setColumn(5)\n     *   .setRow(5)\n     *   .setCropTop(10)\n     *   .buildAsync();\n     * fWorksheet.insertImages([image]);\n     * ```\n     */\n    setCropTop(top: number): FOverGridImageBuilder {\n        this._initializeSrcRect();\n        this._image.srcRect!.top = top;\n        return this;\n    }\n\n    /**\n     * Set the cropping region of the image by defining the left edges, thereby displaying the specific part of the image you want.\n     * @param {number} left - The number of pixels to crop from the left side of the image\n     * @returns {FOverGridImageBuilder} The `FOverGridImageBuilder` for chaining\n     * @example\n     * ```ts\n     * // create a new image builder and set image source.\n     * // then build `ISheetImage` and insert it into the sheet, position is start from F6 cell, left crop is 10px.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = await fWorksheet.newOverGridImage()\n     *   .setSource('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', univerAPI.Enum.ImageSourceType.URL)\n     *   .setColumn(5)\n     *   .setRow(5)\n     *   .setCropLeft(10)\n     *   .buildAsync();\n     * fWorksheet.insertImages([image]);\n     * ```\n     */\n    setCropLeft(left: number): FOverGridImageBuilder {\n        this._initializeSrcRect();\n        this._image.srcRect!.left = left;\n        return this;\n    }\n\n    /**\n     * Set the cropping region of the image by defining the bottom edges, thereby displaying the specific part of the image you want.\n     * @param {number} bottom - The number of pixels to crop from the bottom of the image\n     * @returns {FOverGridImageBuilder} The `FOverGridImageBuilder` for chaining\n     * @example\n     * ```ts\n     * // create a new image builder and set image source.\n     * // then build `ISheetImage` and insert it into the sheet, position is start from F6 cell, bottom crop is 10px.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = await fWorksheet.newOverGridImage()\n     *   .setSource('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', univerAPI.Enum.ImageSourceType.URL)\n     *   .setColumn(5)\n     *   .setRow(5)\n     *   .setCropBottom(10)\n     *   .buildAsync();\n     * fWorksheet.insertImages([image]);\n     * ```\n     */\n    setCropBottom(bottom: number): FOverGridImageBuilder {\n        this._initializeSrcRect();\n        this._image.srcRect!.bottom = bottom;\n        return this;\n    }\n\n    /**\n     * Set the cropping region of the image by defining the right edges, thereby displaying the specific part of the image you want.\n     * @param {number} right - The number of pixels to crop from the right side of the image\n     * @returns {FOverGridImageBuilder} The `FOverGridImageBuilder` for chaining\n     * @example\n     * ```ts\n     * // create a new image builder and set image source.\n     * // then build `ISheetImage` and insert it into the sheet, position is start from F6 cell, right crop is 10px.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = await fWorksheet.newOverGridImage()\n     *   .setSource('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', univerAPI.Enum.ImageSourceType.URL)\n     *   .setColumn(5)\n     *   .setRow(5)\n     *   .setCropRight(10)\n     *   .buildAsync();\n     * fWorksheet.insertImages([image]);\n     * ```\n     */\n    setCropRight(right: number): FOverGridImageBuilder {\n        this._initializeSrcRect();\n        this._image.srcRect!.right = right;\n        return this;\n    }\n\n    private _initializeSrcRect(): void {\n        if (this._image.srcRect == null) {\n            this._image.srcRect = {\n                top: 0,\n                left: 0,\n                bottom: 0,\n                right: 0,\n            };\n        }\n    }\n\n    /**\n     * Set the rotation angle of the image\n     * @param {number} angle - Degree of rotation of the image, for example, 90, 180, 270, etc.\n     * @returns {FOverGridImageBuilder} The `FOverGridImageBuilder` for chaining\n     * @example\n     * ```ts\n     * // create a new image builder and set image source.\n     * // then build `ISheetImage` and insert it into the sheet, position is start from F6 cell, rotate 90 degrees.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = await fWorksheet.newOverGridImage()\n     *   .setSource('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', univerAPI.Enum.ImageSourceType.URL)\n     *   .setColumn(5)\n     *   .setRow(5)\n     *   .setRotate(90)\n     *   .buildAsync();\n     * fWorksheet.insertImages([image]);\n     * ```\n     */\n    setRotate(angle: number): FOverGridImageBuilder {\n        this._image.angle = angle;\n        return this;\n    }\n\n    setUnitId(unitId: string): FOverGridImageBuilder {\n        this._image.unitId = unitId;\n        return this;\n    }\n\n    setSubUnitId(subUnitId: string): FOverGridImageBuilder {\n        this._image.subUnitId = subUnitId;\n        return this;\n    }\n\n    async buildAsync(): Promise<ISheetImage> {\n        const renderManagerService = this._injector.get(IRenderManagerService);\n        const render = renderManagerService.getRenderById(this._image.unitId);\n        if (!render) {\n            throw new Error(`Render Unit with unitId ${this._image.unitId} not found`);\n        }\n        const selectionRenderService = render.with(ISheetSelectionRenderService);\n        const skeletonManagerService = render.with(SheetSkeletonManagerService);\n\n        if (this._image.width === 0 || this._image.height === 0) {\n            const size = await getImageSize(this._image.source);\n            const width = size.width;\n            const height = size.height;\n\n            if (this._image.width === 0) {\n                this._image.width = width;\n            }\n\n            if (this._image.height === 0) {\n                this._image.height = height;\n            }\n        }\n\n        return convertFOverGridImageToSheetImage(this._image, selectionRenderService, skeletonManagerService);\n    }\n}\n\n/**\n * @hideconstructor\n */\nexport class FOverGridImage extends FBase {\n    constructor(\n        private _image: ISheetImage,\n        @ICommandService protected readonly _commandService: ICommandService,\n        @Inject(Injector) protected readonly _injector: Injector\n    ) {\n        super();\n    }\n\n    /**\n     * Get the id of the image\n     * @returns {string} The id of the image\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const images = fWorksheet.getImages();\n     * images.forEach((image) => {\n     *   console.log(image, image.getId());\n     * });\n     * ```\n     */\n    getId(): string {\n        return this._image.drawingId;\n    }\n\n    /**\n     * Get the drawing type of the image\n     * @returns {DrawingTypeEnum} The drawing type of the image\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const images = fWorksheet.getImages();\n     * images.forEach((image) => {\n     *   console.log(image, image.getType());\n     * });\n     * ```\n     */\n    getType(): DrawingTypeEnum {\n        return this._image.drawingType;\n    }\n\n    /**\n     * Remove the image from the sheet\n     * @returns {boolean} true if the image is removed successfully, otherwise false\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = fWorksheet.getImages()[0];\n     * const result = image?.remove();\n     * console.log(result);\n     * ```\n     */\n    remove(): boolean {\n        return this._commandService.syncExecuteCommand(RemoveSheetDrawingCommand.id, { unitId: this._image.unitId, drawings: [this._image] });\n    }\n\n    /**\n     * Convert the image to a FOverGridImageBuilder\n     * @returns {FOverGridImageBuilder} The builder FOverGridImageBuilder\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const images = fWorksheet.getImages();\n     * images.forEach((image) => {\n     *   console.log(image, image.toBuilder().getSource());\n     * });\n     * ```\n     */\n    toBuilder(): FOverGridImageBuilder {\n        const builder = this._injector.createInstance(FOverGridImageBuilder);\n        builder.setImage(this._image);\n        return builder;\n    }\n\n    /**\n     * Set the source of the image\n     * @param {string} source - The source of the image\n     * @returns {boolean} true if the source is set successfully, otherwise false\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = fWorksheet.getImages()[0];\n     * const result = image?.setSource('https://avatars.githubusercontent.com/u/61444807?s=48&v=4');\n     * console.log(result);\n     * ```\n     */\n    setSource(source: string): boolean;\n    /**\n     * Set the source of the image, change image display.\n     * @param {string} source - The source of the image\n     * @param {ImageSourceType} [sourceType] - The source type of the image, default is URL\n     * @returns {boolean} true if the source is set successfully, otherwise false\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = fWorksheet.getImages()[0];\n     * const result = image?.setSource('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', univerAPI.Enum.ImageSourceType.URL);\n     * console.log(result);\n     * ```\n     */\n    setSource(source: string, sourceType?: ImageSourceType): boolean;\n    setSource(source: string, sourceType?: ImageSourceType): boolean {\n        const sourceTypeVal = sourceType ?? ImageSourceType.URL;\n        this._image.source = source;\n        this._image.imageSourceType = sourceTypeVal;\n        return this._commandService.syncExecuteCommand(SetSheetDrawingCommand.id, { unitId: this._image.unitId, drawings: [this._image] });\n    }\n\n    /**\n     * Set the position of the image\n     * @param {number} row - The row index of the image start position\n     * @param {number} column - The column index of the image start position\n     * @returns {boolean} true if the position is set successfully, otherwise false\n     * @example\n     * ```ts\n     * // set the position of the image, the start position is F6 cell.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = fWorksheet.getImages()[0];\n     * const result = image?.setPositionAsync(5, 5);\n     * console.log(result);\n     * ```\n     */\n    async setPositionAsync(row: number, column: number): Promise<boolean>;\n    /**\n     * @param {number} row - The row index of the image start position\n     * @param {number} column - The column index of the image start position\n     * @param {number} rowOffset - The row offset of the image start position, pixel unit\n     * @param {number} columnOffset - The column offset of the image start position, pixel unit\n     * @returns {boolean} true if the position is set successfully, otherwise false\n     * @example\n     * ```ts\n     * // set the position of the image, the start position is F6 cell, and the offset is 10px.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = fWorksheet.getImages()[0];\n     * const result = image?.setPositionAsync(5, 5, 10, 10);\n     * console.log(result);\n     * ```\n     */\n    async setPositionAsync(row: number, column: number, rowOffset?: number, columnOffset?: number): Promise<boolean>;\n    async setPositionAsync(row: number, column: number, rowOffset?: number, columnOffset?: number): Promise<boolean> {\n        const builder = this.toBuilder();\n        builder.setColumn(column);\n        builder.setRow(row);\n        if (rowOffset != null) {\n            builder.setRowOffset(rowOffset);\n        }\n        if (columnOffset != null) {\n            builder.setColumnOffset(columnOffset);\n        }\n        const param = await builder.buildAsync();\n        return this._commandService.syncExecuteCommand(SetSheetDrawingCommand.id, { unitId: this._image.unitId, drawings: [param] });\n    }\n\n    /**\n     * Set the size of the image\n     * @param {number} width - The width of the image, pixel unit\n     * @param {number} height - The height of the image, pixel unit\n     * @returns {boolean} true if the size is set successfully, otherwise false\n     * @example\n     * ```ts\n     * // set the image width 120px and height 50px\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = fWorksheet.getImages()[0];\n     * const result = image?.setSizeAsync(120, 50);\n     * console.log(result);\n     * ```\n     */\n    async setSizeAsync(width: number, height: number): Promise<boolean> {\n        const builder = this.toBuilder();\n        builder.setWidth(width);\n        builder.setHeight(height);\n        const param = await builder.buildAsync();\n        return this._commandService.syncExecuteCommand(SetSheetDrawingCommand.id, { unitId: this._image.unitId, drawings: [param] });\n    }\n\n    /**\n     * Set the cropping region of the image by defining the top, bottom, left, and right edges, thereby displaying the specific part of the image you want.\n     * @param {number} top - The number of pixels to crop from the top of the image\n     * @param {number} left - The number of pixels to crop from the left side of the image\n     * @param {number} bottom - The number of pixels to crop from the bottom of the image\n     * @param {number} right - The number of pixels to crop from the right side of the image\n     * @returns {boolean} true if the crop is set successfully, otherwise false\n     * @example\n     * ```ts\n     * // set the crop of the image, top 10px, left 10px, bottom 10px, right 10px.\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = fWorksheet.getImages()[0];\n     * const result = image?.setCrop(10, 10, 10, 10);\n     * console.log(result);\n     * ```\n     */\n    setCrop(top?: number, left?: number, bottom?: number, right?: number): boolean {\n        if (this._image.srcRect == null) {\n            this._image.srcRect = {\n                top: 0,\n                left: 0,\n                bottom: 0,\n                right: 0,\n            };\n        }\n\n        if (top != null) {\n            this._image.srcRect.top = top;\n        }\n\n        if (left != null) {\n            this._image.srcRect.left = left;\n        }\n\n        if (bottom != null) {\n            this._image.srcRect.bottom = bottom;\n        }\n\n        if (right != null) {\n            this._image.srcRect.right = right;\n        }\n\n        return this._commandService.syncExecuteCommand(SetSheetDrawingCommand.id, { unitId: this._image.unitId, drawings: [this._image] });\n    }\n\n    /**\n     * Set the rotation angle of the image\n     * @param {number} angle - Degree of rotation of the image, for example, 90, 180, 270, etc.\n     * @returns {boolean} true if the rotation is set successfully, otherwise false\n     * @example\n     * ```ts\n     * // set 90 degrees rotation of the image\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = fWorksheet.getImages()[0];\n     * const result = image?.setRotate(90);\n     * console.log(result);\n     * ```\n     */\n    setRotate(angle: number): boolean {\n        this._image.sheetTransform.angle = angle;\n        this._image.transform && (this._image.transform.angle = angle);\n        return this._commandService.syncExecuteCommand(SetSheetDrawingCommand.id, { unitId: this._image.unitId, drawings: [this._image] });\n    }\n\n    /**\n     * Move the image layer forward by one level\n     * @returns {boolean} true if the image is moved forward successfully, otherwise false\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = fWorksheet.getImages()[0];\n     * const result = image?.setForward();\n     * console.log(result);\n     * ```\n     */\n    setForward(): boolean {\n        return this._commandService.syncExecuteCommand(SetDrawingArrangeCommand.id, {\n            unitId: this._image.unitId,\n            subUnitId: this._image.subUnitId,\n            drawingIds: [this._image.drawingId],\n            arrangeType: ArrangeTypeEnum.forward,\n        });\n    }\n\n    /**\n     * Move the image layer backward by one level\n     * @returns {boolean} true if the image is moved backward successfully, otherwise false\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = fWorksheet.getImages()[0];\n     * const result = image?.setBackward();\n     * console.log(result);\n     * ```\n     */\n    setBackward(): boolean {\n        return this._commandService.syncExecuteCommand(SetDrawingArrangeCommand.id, {\n            unitId: this._image.unitId,\n            subUnitId: this._image.subUnitId,\n            drawingIds: [this._image.drawingId],\n            arrangeType: ArrangeTypeEnum.backward,\n        });\n    }\n\n    /**\n     * Move the image layer to the bottom layer\n     * @returns {boolean} true if the image is moved to the bottom layer successfully, otherwise false\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = fWorksheet.getImages()[0];\n     * const result = image?.setBack();\n     * console.log(result);\n     * ```\n     */\n    setBack(): boolean {\n        return this._commandService.syncExecuteCommand(SetDrawingArrangeCommand.id, {\n            unitId: this._image.unitId,\n            subUnitId: this._image.subUnitId,\n            drawingIds: [this._image.drawingId],\n            arrangeType: ArrangeTypeEnum.back,\n        });\n    }\n\n    /**\n     * Move the image layer to the top layer\n     * @returns {boolean} true if the image is moved to the top layer successfully, otherwise false\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = fWorksheet.getImages()[0];\n     * const result = image?.setFront();\n     * console.log(result);\n     * ```\n     */\n    setFront(): boolean {\n        return this._commandService.syncExecuteCommand(SetDrawingArrangeCommand.id, {\n            unitId: this._image.unitId,\n            subUnitId: this._image.subUnitId,\n            drawingIds: [this._image.drawingId],\n            arrangeType: ArrangeTypeEnum.front,\n        });\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, Nullable } from '@univerjs/core';\nimport type { IFBlobSource } from '@univerjs/core/facade';\nimport type { ISheetImage } from '@univerjs/sheets-drawing';\nimport type { ICanvasFloatDom, IDOMAnchor } from '@univerjs/sheets-drawing-ui';\nimport type { IFComponentKey } from '@univerjs/sheets-ui/facade';\nimport type { FRange } from '@univerjs/sheets/facade';\nimport { DrawingTypeEnum, ImageSourceType, toDisposable } from '@univerjs/core';\nimport { ISheetDrawingService } from '@univerjs/sheets-drawing';\nimport { InsertSheetDrawingCommand, RemoveSheetDrawingCommand, SetSheetDrawingCommand, SheetCanvasFloatDomManagerService } from '@univerjs/sheets-drawing-ui';\nimport { transformComponentKey } from '@univerjs/sheets-ui/facade';\nimport { FWorksheet } from '@univerjs/sheets/facade';\nimport { ComponentManager } from '@univerjs/ui';\nimport { FOverGridImage, FOverGridImageBuilder } from './f-over-grid-image';\n\n// why omit this key? if componentKey is missing, then which component should be used?\nexport interface IFICanvasFloatDom extends Omit<ICanvasFloatDom, 'componentKey' | 'unitId' | 'subUnitId'>, IFComponentKey {}\n\n/**\n * @ignore\n */\nexport interface IFWorksheetLegacy {\n    /**\n     * Add a float dom to position.\n     * @param {IFICanvasFloatDom} layer - The float dom layer configuration.\n     * @param {string} [id] - The float dom id, if not given will be auto generated.\n     * @returns float dom id and dispose function\n     * @example\n     * ```tsx\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     *\n     * // You should register components at an appropriate time (e.g., when Univer is loaded)\n     * // This is a React component. For Vue3 components, the third parameter should be `{ framework: 'vue3' }`\n     * univerAPI.registerComponent(\n     *   'myFloatDom',\n     *   ({ data }) => (\n     *     <div style={{ width: '100%', height: '100%', background: '#fff', border: '1px solid #ccc', boxSizing: 'border-box' }}>\n     *       popup content:\n     *       {' '}\n     *       {data?.label}\n     *     </div>\n     *   ),\n     * );\n     *\n     * // Add a floating DOM\n     * // If disposable is null, floating DOM addition failed\n     * const disposeable = fWorksheet.addFloatDomToPosition({\n     *   componentKey: 'myFloatDom',\n     *   initPosition: {\n     *     startX: 100,\n     *     endX: 300,\n     *     startY: 100,\n     *     endY: 200,\n     *   },\n     *\n     *   // Component data\n     *   data: {\n     *     label: 'hahah',\n     *   },\n     * });\n     *\n     * // Remove the floating DOM after 2 seconds\n     * setTimeout(() => {\n     *   disposeable?.dispose();\n     * }, 2000);\n     * ```\n     */\n    addFloatDomToPosition(layer: IFICanvasFloatDom, id?: string): Nullable<{\n        id: string;\n        dispose: () => void;\n    }>;\n\n    /**\n     * Add dom over range to FloatDOM, And FloatDOM is registerComponent(BuiltInUIPart.CONTENT)\n     * @param {FRange} range - The range to add the float dom.\n     * @param {Partial<IFICanvasFloatDom>} layer - The float dom layer configuration.\n     * @param {Partial<IDOMAnchor>} domLayout - The anchor configuration of the float dom.\n     * @param {string} [id] - The float dom id, if not given will be auto generated\n     * @returns float dom id and dispose function\n     * @example\n     * ```tsx\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     *\n     * // Register a range loading component\n     * const RangeLoading = () => {\n     *   const divStyle = {\n     *     width: '100%',\n     *     height: '100%',\n     *     backgroundColor: '#fff',\n     *     border: '1px solid #ccc',\n     *     boxSizing: 'border-box' as const,\n     *     display: 'flex',\n     *     justifyContent: 'center',\n     *     alignItems: 'center',\n     *     textAlign: 'center' as const,\n     *     transformOrigin: 'top left',\n     *   };\n     *\n     *   return (\n     *     <div style={divStyle}>\n     *       Loading...\n     *     </div>\n     *   );\n     * };\n     * univerAPI.registerComponent('RangeLoading', RangeLoading);\n     *\n     * // Add the range loading component covering the range A1:C3\n     * const fRange = fWorksheet.getRange('A1:C3');\n     * const disposeable = fWorksheet.addFloatDomToRange(fRange, { componentKey: 'RangeLoading' }, {}, 'myRangeLoading');\n     *\n     * // Remove the floating DOM after 2 seconds\n     * setTimeout(() => {\n     *   disposeable?.dispose();\n     * }, 2000);\n     *\n     * // another example-------------------\n     * // Register a float button component\n     * const FloatButton = () => {\n     *   const divStyle = {\n     *     width: '100px',\n     *     height: '30px',\n     *     backgroundColor: '#fff',\n     *     border: '1px solid #ccc',\n     *     boxSizing: 'border-box' as const,\n     *     display: 'flex',\n     *     justifyContent: 'center',\n     *     alignItems: 'center',\n     *     textAlign: 'center' as const,\n     *     cursor: 'pointer',\n     *   };\n     *\n     *   const clickHandler = () => {\n     *     console.warn('click');\n     *   };\n     *\n     *   return (\n     *     <div style={divStyle} onClick={clickHandler}>\n     *       FloatButton\n     *     </div>\n     *   );\n     * };\n     * univerAPI.registerComponent('FloatButton', FloatButton);\n     *\n     * // Add the float button to the range A5:C7, position is start from A5 cell, and width is 100px, height is 30px, margin is 100% of range width and height\n     * const fRange2 = fWorksheet.getRange('A5:C7');\n     * const disposeable2 = fWorksheet.addFloatDomToRange(\n     *   fRange2,\n     *   {\n     *     componentKey: 'FloatButton',\n     *   },\n     *   {\n     *     width: 100,\n     *     height: 30,\n     *     marginX: '100%', // margin percent to range width, or pixel\n     *     marginY: '100%'\n     *   },\n     *   'myFloatButton'\n     * );\n     * ```\n     */\n    addFloatDomToRange(range: FRange, layer: Partial<IFICanvasFloatDom>, domLayout: Partial<IDOMAnchor>, id?: string): Nullable<{\n        id: string;\n        dispose: () => void;\n    }>;\n\n    /**\n     * Add dom at column header, And FloatDOM is registerComponent(BuiltInUIPart.CONTENT)\n     * @param {number} column - The column index to add the float dom.\n     * @param {Partial<IFICanvasFloatDom>} layer - The float dom layer configuration.\n     * @param {IDOMAnchor} domPos - The anchor configuration of the float dom.\n     * @param {string} [id] - The float dom id, if not given will be auto generated\n     * @returns float dom id and dispose function\n     * @example\n     * ```ts\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     *\n     * // Register a float button component\n     * const FloatButton = () => {\n     *   const divStyle = {\n     *     width: '100px',\n     *     height: '30px',\n     *     backgroundColor: '#fff',\n     *     border: '1px solid #ccc',\n     *     boxSizing: 'border-box' as const,\n     *     display: 'flex',\n     *     justifyContent: 'center',\n     *     alignItems: 'center',\n     *     textAlign: 'center' as const,\n     *     cursor: 'pointer',\n     *   };\n     *\n     *   const clickHandler = () => {\n     *     console.warn('click');\n     *   };\n     *\n     *   return (\n     *     <div style={divStyle} onClick={clickHandler}>\n     *       FloatButton\n     *     </div>\n     *   );\n     * };\n     * univerAPI.registerComponent('FloatButton', FloatButton);\n     *\n     * // Add the float button to the column D header, position is right align, width is 100px, height is 30px, margin is 0\n     * const disposeable = fWorksheet.addFloatDomToColumnHeader(\n     *   3,\n     *   {\n     *     componentKey: 'FloatButton',\n     *     allowTransform: false,\n     *   },\n     *   {\n     *     width: 100,\n     *     height: 30,\n     *     marginX: 0,\n     *     marginY: 0,\n     *     horizonOffsetAlign: 'right',\n     *   },\n     *   'myFloatButton'\n     * );\n     *\n     * // Remove the float button after 2 seconds\n     * setTimeout(() => {\n     *   disposeable?.dispose();\n     * }, 2000);\n     * ```\n     */\n    addFloatDomToColumnHeader(column: number, layer: Partial<IFICanvasFloatDom>, domPos: IDOMAnchor, id?: string): Nullable<{\n        id: string;\n        dispose: () => void;\n    }>;\n\n    /**\n     * Insert an image to the sheet\n     * @param {string} url - The image url\n     * @returns true if the image is inserted successfully\n     * @example\n     * ```ts\n     * // Insert an image to the sheet, default position is A1\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * const result = await fWorksheet.insertImage('https://avatars.githubusercontent.com/u/61444807?s=48&v=4');\n     * console.log(result);\n     * ```\n     */\n    insertImage(url: string): Promise<boolean>;\n    /**\n     * @param {string} url - The image url\n     * @param {number} column - The column index to insert the image\n     * @param {number} row - The row index to insert the image\n     * @returns True if the image is inserted successfully\n     * @example\n     * ```ts\n     * // Insert an image to the sheet, position is F6\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * const result = await fWorksheet.insertImage('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', 5, 5);\n     * console.log(result);\n     * ```\n     */\n    insertImage(url: string, column: number, row: number): Promise<boolean>;\n    /**\n     * @param {string} url - The image url\n     * @param {number} column - The column index to insert the image\n     * @param {number} row - The row index to insert the image\n     * @param {number} offsetX - The column offset, pixel unit\n     * @param {number} offsetY - The row offset, pixel unit\n     * @returns True if the image is inserted successfully\n     * @example\n     * ```ts\n     * // Insert an image to the sheet, position is F6, offset is 10px\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * const result = await fWorksheet.insertImage('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', 5, 5, 10, 10);\n     * console.log(result);\n     * ```\n     */\n    insertImage(url: string, column: number, row: number, offsetX: number, offsetY: number): Promise<boolean>;\n    insertImage(url: IFBlobSource): Promise<boolean>;\n    insertImage(url: IFBlobSource, column: number, row: number): Promise<boolean>;\n    insertImage(url: IFBlobSource, column: number, row: number, offsetX: number, offsetY: number): Promise<boolean>;\n    insertImage(url: IFBlobSource | string, column: number, row: number, offsetX: number, offsetY: number): Promise<boolean>;\n\n    /**\n     * Insert images to the sheet\n     * @param {ISheetImage[]} sheetImages - The images to insert\n     * @returns {FWorksheet} The FWorksheet instance for chaining\n     * @example\n     * ```ts\n     * // create a new image builder and set image source.\n     * // then build `ISheetImage` and insert it into the sheet, position is start from F6 cell, width is 500px, height is 300px\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = await fWorksheet.newOverGridImage()\n     *   .setSource('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', univerAPI.Enum.ImageSourceType.URL)\n     *   .setColumn(5)\n     *   .setRow(5)\n     *   .setWidth(500)\n     *   .setHeight(300)\n     *   .buildAsync();\n     * fWorksheet.insertImages([image]);\n     *\n     * // update the image width to 100px and height to 50px\n     * setTimeout(async () => {\n     *   const imageBuilder = fWorksheet.getImageById(image.drawingId).toBuilder();\n     *   const newImage = await imageBuilder.setWidth(100).setHeight(50).buildAsync();\n     *   fWorksheet.updateImages([newImage]);\n     * }, 4000);\n     * ```\n     */\n    insertImages(sheetImages: ISheetImage[]): FWorksheet;\n\n    /**\n     * Get all images of the sheet.\n     * @returns {FOverGridImage[]} The FOverGridImage instances\n     * @example\n     * ```ts\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * const images = fWorksheet.getImages();\n     * images.forEach((image) => {\n     *   console.log(image, image.getId());\n     * });\n     * ```\n     */\n    getImages(): FOverGridImage[];\n\n    /**\n     * Get image by drawing id\n     * @param {string} id - The drawing id of the image\n     * @returns {FOverGridImage | null} The FOverGridImage instance\n     * @example\n     * ```ts\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * const image = fWorksheet.getImageById('xxxx');\n     * console.log(image);\n     * ```\n     */\n    getImageById(id: string): FOverGridImage | null;\n\n    /**\n     * Delete images from the sheet\n     * @param {FOverGridImage[]} sheetImages - The images to delete\n     * @returns {FWorksheet} The FWorksheet instance for chaining\n     * @example\n     * ```ts\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * const image = fWorksheet.getImages()[0];\n     *\n     * // Delete the first image of the sheet\n     * fWorksheet.deleteImages([image]);\n     * ```\n     */\n    deleteImages(sheetImages: FOverGridImage[]): FWorksheet;\n\n    /**\n     * Update images to the sheet\n     * @param {ISheetImage[]} sheetImages - The images to update\n     * @returns {FWorksheet} The FWorksheet instance for chaining\n     * @example\n     * ```ts\n     * // create a new image builder and set image source.\n     * // then build `ISheetImage` and insert it into the sheet, position is start from F6 cell, width is 500px, height is 300px\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = await fWorksheet.newOverGridImage()\n     *   .setSource('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', univerAPI.Enum.ImageSourceType.URL)\n     *   .setColumn(5)\n     *   .setRow(5)\n     *   .setWidth(500)\n     *   .setHeight(300)\n     *   .buildAsync();\n     * fWorksheet.insertImages([image]);\n     *\n     * // update the image width to 100px and height to 50px after 4 seconds\n     * setTimeout(async () => {\n     *   const imageBuilder = fWorksheet.getImageById(image.drawingId).toBuilder();\n     *   const newImage = await imageBuilder.setWidth(100).setHeight(50).buildAsync();\n     *   fWorksheet.updateImages([newImage]);\n     * }, 4000);\n     * ```\n     */\n    updateImages(sheetImages: ISheetImage[]): FWorksheet;\n\n    /**\n     * Get the current selected images.\n     * @returns {FOverGridImage[]} The FOverGridImage instances\n     * @example\n     * ```ts\n     * const fWorksheet = univerAPI.getActiveWorkbook().getActiveSheet();\n     * const images = fWorksheet.getActiveImages();\n     * images.forEach((image) => {\n     *   console.log(image, image.getId());\n     * });\n     * ```\n     */\n    getActiveImages(): FOverGridImage[];\n\n    /**\n     * Hook when a image is inserted.\n     * @param {function(FOverGridImage[]: void)} callback - The callback function when a image is inserted.\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.OverGridImageInserted, (params) => {})` as instead\n     */\n    onImageInserted(callback: (images: FOverGridImage[]) => void): IDisposable;\n\n    /**\n     * Hook when a image is deleted.\n     * @param {function(FOverGridImage[]: void)} callback - The callback function when a image is deleted.\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.OverGridImageRemoved, (params) => {})` as instead\n     */\n    onImageDeleted(callback: (images: FOverGridImage[]) => void): IDisposable;\n\n    /**\n     * Hook when a image is changed.\n     * @param {function(FOverGridImage[]: void)} callback - The callback function when a image is changed.\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.OverGridImageChanged, (params) => {})` as instead\n     */\n    onImageChanged(callback: (images: FOverGridImage[]) => void): IDisposable;\n\n    /**\n     * Create a new over grid image builder.\n     * @returns {FOverGridImageBuilder} The FOverGridImageBuilder instance\n     * @example\n     * ```ts\n     * // create a new image builder and set image source.\n     * // then build `ISheetImage` and insert it into the sheet, position is start from F6 cell, width is 500px, height is 300px\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const image = await fWorksheet.newOverGridImage()\n     *   .setSource('https://avatars.githubusercontent.com/u/61444807?s=48&v=4', univerAPI.Enum.ImageSourceType.URL)\n     *   .setColumn(5)\n     *   .setRow(5)\n     *   .setWidth(500)\n     *   .setHeight(300)\n     *   .buildAsync();\n     * fWorksheet.insertImages([image]);\n     * ```\n     */\n    newOverGridImage(): FOverGridImageBuilder;\n}\n\nexport class FWorksheetLegacy extends FWorksheet implements IFWorksheetLegacy {\n    override addFloatDomToPosition(layer: IFICanvasFloatDom, id?: string): Nullable<{\n        id: string;\n        dispose: () => void;\n    }> {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const { key, disposableCollection } = transformComponentKey(layer, this._injector.get(ComponentManager));\n        const floatDomService = this._injector.get(SheetCanvasFloatDomManagerService);\n        const res = floatDomService.addFloatDomToPosition({ ...layer, componentKey: key, unitId, subUnitId }, id);\n\n        if (res) {\n            disposableCollection.add(res.dispose);\n            return {\n                id: res.id,\n                dispose: (): void => {\n                    disposableCollection.dispose();\n                    res.dispose();\n                },\n            };\n        }\n\n        disposableCollection.dispose();\n        return null;\n    }\n\n    override addFloatDomToRange(fRange: FRange, layer: IFICanvasFloatDom, domLayout: IDOMAnchor, id?: string): Nullable<{\n        id: string;\n        dispose: () => void;\n    }> {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const { key, disposableCollection } = transformComponentKey(layer, this._injector.get(ComponentManager));\n        const floatDomService = this._injector.get(SheetCanvasFloatDomManagerService);\n        const res = floatDomService.addFloatDomToRange(fRange.getRange(), { ...layer, componentKey: key, unitId, subUnitId }, domLayout, id);\n\n        if (res) {\n            disposableCollection.add(res.dispose);\n            return {\n                id: res.id,\n                dispose: (): void => {\n                    disposableCollection.dispose();\n                    res.dispose();\n                },\n            };\n        }\n\n        disposableCollection.dispose();\n        return null;\n    }\n\n    override addFloatDomToColumnHeader(column: number, layer: IFICanvasFloatDom, domLayout: IDOMAnchor, id?: string): Nullable<{\n        id: string;\n        dispose: () => void;\n    }> {\n        const unitId = this._workbook.getUnitId();\n        const subUnitId = this._worksheet.getSheetId();\n        const { key, disposableCollection } = transformComponentKey(layer, this._injector.get(ComponentManager));\n        const floatDomService = this._injector.get(SheetCanvasFloatDomManagerService);\n        const domRangeDispose = floatDomService.addFloatDomToColumnHeader(column, { ...layer, componentKey: key, unitId, subUnitId }, domLayout, id);\n\n        if (domRangeDispose) {\n            disposableCollection.add(domRangeDispose.dispose);\n            return {\n                id: domRangeDispose.id,\n                dispose: (): void => {\n                    disposableCollection.dispose();\n                    domRangeDispose.dispose();\n                },\n            };\n        }\n\n        disposableCollection.dispose();\n        return null;\n    }\n\n    override async insertImage(url: IFBlobSource | string, column?: number, row?: number, offsetX?: number, offsetY?: number): Promise<boolean> {\n        const imageBuilder = this.newOverGridImage();\n        if (typeof url === 'string') {\n            imageBuilder.setSource(url);\n        } else {\n            const blobSource = url.getBlob();\n            const base64 = await blobSource.getDataAsString();\n            imageBuilder.setSource(base64, ImageSourceType.BASE64);\n        }\n\n        if (column !== undefined) {\n            imageBuilder.setColumn(column);\n        } else {\n            imageBuilder.setColumn(0);\n        }\n\n        if (row !== undefined) {\n            imageBuilder.setRow(row);\n        } else {\n            imageBuilder.setRow(0);\n        }\n\n        if (offsetX !== undefined) {\n            imageBuilder.setColumnOffset(offsetX);\n        } else {\n            imageBuilder.setColumnOffset(0);\n        }\n\n        if (offsetY !== undefined) {\n            imageBuilder.setRowOffset(offsetY);\n        } else {\n            imageBuilder.setRowOffset(0);\n        }\n\n        const param = await imageBuilder.buildAsync();\n        // param.drawingId\n\n        return this._commandService.syncExecuteCommand(InsertSheetDrawingCommand.id, { unitId: this._fWorkbook.getId(), drawings: [param] });\n    }\n\n    override insertImages(sheetImages: ISheetImage[]): FWorksheet {\n        const param = sheetImages.map((image) => {\n            image.unitId = this._fWorkbook.getId();\n            image.subUnitId = this.getSheetId();\n            return image;\n        });\n\n        this._commandService.syncExecuteCommand(InsertSheetDrawingCommand.id, { unitId: this._fWorkbook.getId(), drawings: param });\n        return this;\n    }\n\n    override deleteImages(sheetImages: FOverGridImage[]): FWorksheet {\n        const drawings = sheetImages.map((image) => {\n            return {\n                unitId: this._fWorkbook.getId(),\n                drawingId: image.getId(),\n                subUnitId: this.getSheetId(),\n                drawingType: image.getType(),\n            };\n        });\n        this._commandService.syncExecuteCommand(RemoveSheetDrawingCommand.id, { unitId: this._fWorkbook.getId(), drawings });\n\n        return this;\n    }\n\n    override getImages(): FOverGridImage[] {\n        const sheetDrawingService = this._injector.get(ISheetDrawingService);\n        const drawingData = sheetDrawingService.getDrawingData(this._fWorkbook.getId(), this.getSheetId());\n        const images: FOverGridImage[] = [];\n        for (const drawingId in drawingData) {\n            const drawing = drawingData[drawingId];\n            if (drawing.drawingType !== DrawingTypeEnum.DRAWING_IMAGE) {\n                continue;\n            }\n            images.push(this._injector.createInstance(FOverGridImage, drawing as ISheetImage));\n        }\n        return images;\n    }\n\n    override getImageById(id: string): FOverGridImage | null {\n        const sheetDrawingService = this._injector.get(ISheetDrawingService);\n        const drawing = sheetDrawingService.getDrawingByParam({ unitId: this._fWorkbook.getId(), subUnitId: this.getSheetId(), drawingId: id });\n        if (drawing && drawing.drawingType === DrawingTypeEnum.DRAWING_IMAGE) {\n            return this._injector.createInstance(FOverGridImage, drawing as ISheetImage);\n        }\n        return null;\n    }\n\n    override getActiveImages(): FOverGridImage[] {\n        const sheetDrawingService = this._injector.get(ISheetDrawingService);\n        const drawingData = sheetDrawingService.getFocusDrawings();\n        const images: FOverGridImage[] = [];\n        for (const drawingId in drawingData) {\n            const drawing = drawingData[drawingId];\n            images.push(this._injector.createInstance(FOverGridImage, drawing as ISheetImage));\n        }\n        return images;\n    }\n\n    override updateImages(sheetImages: ISheetImage[]): FWorksheet {\n        this._commandService.syncExecuteCommand(SetSheetDrawingCommand.id, { unitId: this._fWorkbook.getId(), drawings: sheetImages });\n        return this;\n    }\n\n    override onImageInserted(callback: (images: FOverGridImage[]) => void): IDisposable {\n        const sheetDrawingService = this._injector.get(ISheetDrawingService);\n        return toDisposable(sheetDrawingService.add$.subscribe((drawingSearches) => {\n            const drawings = drawingSearches.map(\n                (drawingSearch) => this._injector.createInstance(FOverGridImage, sheetDrawingService.getDrawingByParam(drawingSearch) as ISheetImage)\n            );\n            callback(drawings);\n        }));\n    }\n\n    override onImageDeleted(callback: (images: FOverGridImage[]) => void): IDisposable {\n        const sheetDrawingService = this._injector.get(ISheetDrawingService);\n        return toDisposable(sheetDrawingService.remove$.subscribe((drawingSearches) => {\n            const drawings = drawingSearches.map(\n                (drawingSearch) => this._injector.createInstance(FOverGridImage, sheetDrawingService.getDrawingByParam(drawingSearch) as ISheetImage)\n            );\n            callback(drawings);\n        }));\n    }\n\n    override onImageChanged(callback: (images: FOverGridImage[]) => void): IDisposable {\n        const sheetDrawingService = this._injector.get(ISheetDrawingService);\n        return toDisposable(sheetDrawingService.update$.subscribe((drawingSearches) => {\n            const drawings = drawingSearches.map(\n                (drawingSearch) => this._injector.createInstance(FOverGridImage, sheetDrawingService.getDrawingByParam(drawingSearch) as ISheetImage)\n            );\n            callback(drawings);\n        }));\n    }\n\n    override newOverGridImage(): FOverGridImageBuilder {\n        const unitId = this._fWorkbook.getId();\n        const subUnitId = this.getSheetId();\n        return this._injector.createInstance(FOverGridImageBuilder, unitId, subUnitId);\n    }\n}\n\nFWorksheet.extend(FWorksheetLegacy);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FWorksheet extends IFWorksheetLegacy {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DrawingTypeEnum, ImageSourceType } from '@univerjs/core';\nimport { FEnum } from '@univerjs/core/facade';\nimport { SheetDrawingAnchorType } from '@univerjs/sheets-drawing';\n\n/**\n * @ignore\n */\nexport interface IFDrawingEnumMixin {\n    /** Please refer to {@link DrawingTypeEnum}. */\n    DrawingType: typeof DrawingTypeEnum;\n\n    /** Please refer to {@link ImageSourceType}. */\n    ImageSourceType: Omit<typeof ImageSourceType, 'UUID'>;\n\n    /** Please refer to {@link SheetDrawingAnchorType}. */\n    SheetDrawingAnchorType: typeof SheetDrawingAnchorType;\n}\n\nexport class FDrawingEnumMixin extends FEnum implements IFDrawingEnumMixin {\n    override get DrawingType(): typeof DrawingTypeEnum { return DrawingTypeEnum; };\n\n    override get ImageSourceType(): Omit<typeof ImageSourceType, 'UUID'> { return ImageSourceType; };\n\n    override get SheetDrawingAnchorType(): typeof SheetDrawingAnchorType { return SheetDrawingAnchorType; };\n}\n\nFEnum.extend(FDrawingEnumMixin);\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FEnum extends IFDrawingEnumMixin { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingSearch } from '@univerjs/core';\nimport type { IEventBase } from '@univerjs/core/facade';\nimport type { ISheetImage } from '@univerjs/sheets-drawing';\nimport type { FWorkbook } from '@univerjs/sheets/facade';\nimport type { FOverGridImage } from './f-over-grid-image';\nimport { FEventName } from '@univerjs/core/facade';\n\n/**\n * @ignore\n */\ninterface IFDrawingEventNameMixin {\n    /**\n     * Triggered before floating image insertion.\n     * @see {@link IBeforeOverGridImageInsertParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeOverGridImageInsert, (params) => {\n     *   console.log(params);\n     *   // do something\n     *   const { workbook, insertImageParams } = params;\n     *   // Cancel the insertion operation\n     *   params.cancel = true;\n     * })\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeOverGridImageInsert: 'BeforeOverGridImageInsert';\n\n    /**\n     * Triggered after floating image insertion.\n     * @see {@link IOverGridImageInsertedParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.OverGridImageInserted, (params) => {\n     *   console.log(params);\n     *   // do something\n     *   const { workbook, images } = params;\n     * })\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly OverGridImageInserted: 'OverGridImageInserted';\n\n    /**\n     * Triggered before floating image removal.\n     * @see {@link IBeforeOverGridImageRemoveParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeOverGridImageRemove, (params) => {\n     *   console.log(params);\n     *   // do something\n     *   const { workbook, images } = params;\n     *   // Cancel the removal operation\n     *   params.cancel = true;\n     * })\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeOverGridImageRemove: 'BeforeOverGridImageRemove';\n\n    /**\n     * Triggered after floating image removal.\n     * @see {@link IOverGridImageRemovedParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.OverGridImageRemoved, (params) => {\n     *   console.log(params);\n     *   // do something\n     *   const { workbook, removeImageParams } = params;\n     * })\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly OverGridImageRemoved: 'OverGridImageRemoved';\n\n    /**\n     * Triggered before floating image change.\n     * @see {@link IBeforeOverGridImageChangeParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeOverGridImageChange, (params) => {\n     *   console.log(params);\n     *   // do something\n     *   const { workbook, images } = params;\n     *   // Cancel the image change\n     *   params.cancel = true;\n     * })\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeOverGridImageChange: 'BeforeOverGridImageChange';\n\n    /**\n     * Triggered after floating image change.\n     * @see {@link IOverGridImageChangedParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.OverGridImageChanged, (params) => {\n     *   console.log(params);\n     *   // do something\n     *   const { workbook, images } = params;\n     * })\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly OverGridImageChanged: 'OverGridImageChanged';\n\n    /**\n     * Triggered before floating image selection.\n     * @see {@link IBeforeOverGridImageSelectParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeOverGridImageSelect, (params) => {\n     *   console.log(params);\n     *   // do something\n     *   const { workbook, selectedImages, oldSelectedImages } = params;\n     *   // cancel the selection operation\n     *   params.cancel = true;\n     * })\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly BeforeOverGridImageSelect: 'BeforeOverGridImageSelect';\n\n    /**\n     * Triggered after floating image selection.\n     * @see {@link IOverGridImageSelectedParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.OverGridImageSelected, (params) => {\n     *   console.log(params);\n     *   // do something\n     *   const { workbook, selectedImages } = params;\n     * })\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly OverGridImageSelected: 'OverGridImageSelected';\n}\n\nexport class FDrawingEventNameMixin extends FEventName implements IFDrawingEventNameMixin {\n    override get BeforeOverGridImageChange(): 'BeforeOverGridImageChange' {\n        return 'BeforeOverGridImageChange' as const;\n    }\n\n    override get OverGridImageChanged(): 'OverGridImageChanged' {\n        return 'OverGridImageChanged' as const;\n    }\n\n    override get BeforeOverGridImageInsert(): 'BeforeOverGridImageInsert' {\n        return 'BeforeOverGridImageInsert' as const;\n    }\n\n    override get OverGridImageInserted(): 'OverGridImageInserted' {\n        return 'OverGridImageInserted' as const;\n    }\n\n    override get BeforeOverGridImageRemove(): 'BeforeOverGridImageRemove' {\n        return 'BeforeOverGridImageRemove' as const;\n    }\n\n    override get OverGridImageRemoved(): 'OverGridImageRemoved' {\n        return 'OverGridImageRemoved' as const;\n    }\n\n    override get BeforeOverGridImageSelect(): 'BeforeOverGridImageSelect' {\n        return 'BeforeOverGridImageSelect' as const;\n    }\n\n    override get OverGridImageSelected(): 'OverGridImageSelected' {\n        return 'OverGridImageSelected' as const;\n    }\n}\n\nexport interface IBeforeOverGridImageChangeParamObject {\n    /**\n     * Parameters of the image to be updated. {@link ISheetImage}\n     */\n    changeParam: Partial<ISheetImage>;\n\n    /**\n     * Instance of the image to be updated. {@link FOverGridImage}\n     */\n    image: FOverGridImage;\n}\n\nexport interface IBeforeOverGridImageChangeParam extends IEventBase {\n    /**\n     * The workbook instance currently being operated on. {@link FWorkbook}\n     */\n    workbook: FWorkbook;\n\n    /**\n     * Collection of parameters of the images to be updated, there may be multiple images to be updated. {@link IBeforeOverGridImageChangeParamObject}\n     */\n    images: IBeforeOverGridImageChangeParamObject[];\n}\n\nexport interface IOverGridImageChangedParam extends IEventBase {\n    /**\n     * The workbook instance currently being operated on. {@link FWorkbook}\n     */\n    workbook: FWorkbook;\n\n    /**\n     * Instances of the images after the update. {@link FOverGridImage}\n     */\n    images: FOverGridImage[];\n}\n\nexport interface IBeforeOverGridImageInsertParam extends IEventBase {\n    /**\n     * The workbook instance currently being operated on. {@link FWorkbook}\n     */\n    workbook: FWorkbook;\n\n    /**\n     * Collection of parameters of the images to be inserted. {@link ISheetImage}\n     */\n    insertImageParams: ISheetImage[];\n}\n\nexport interface IOverGridImageInsertedParam extends IEventBase {\n    /**\n     * The workbook instance currently being operated on. {@link FWorkbook}\n     */\n    workbook: FWorkbook;\n\n    /**\n     * Collection of instances of the images after insertion. {@link FOverGridImage}\n     */\n    images: FOverGridImage[];\n}\n\nexport interface IBeforeOverGridImageRemoveParam extends IEventBase {\n    /**\n     * The workbook instance currently being operated on. {@link FWorkbook}\n     */\n    workbook: FWorkbook;\n\n    /**\n     * Collection of instances of the images to be removed. {@link FOverGridImage}\n     */\n    images: FOverGridImage[];\n}\n\nexport interface IOverGridImageRemovedParam extends IEventBase {\n    /**\n     * The workbook instance currently being operated on. {@link FWorkbook}\n     */\n    workbook: FWorkbook;\n\n    /**\n     * Collection of parameters of the images after removal. {@link ISheetImage}\n     */\n    removeImageParams: IDrawingSearch[];\n}\n\nexport interface IBeforeOverGridImageSelectParam extends IEventBase {\n    /**\n     * The workbook instance currently being operated on. {@link FWorkbook}\n     */\n    workbook: FWorkbook;\n    /**\n     * The images before selection. {@link FOverGridImage}\n     */\n    oldSelectedImages: FOverGridImage[];\n\n    selectedImages: FOverGridImage[];\n}\n\nexport interface IOverGridImageSelectedParam extends IEventBase {\n    /**\n     * The workbook instance currently being operated on. {@link FWorkbook}\n     */\n    workbook: FWorkbook;\n    /**\n     * The selected images. {@link FOverGridImage}\n     */\n    selectedImages: FOverGridImage[];\n}\n\n/**\n * @ignore\n */\ninterface IFSheetsUIEventParamConfig {\n    BeforeOverGridImageChange: IBeforeOverGridImageChangeParam;\n    OverGridImageChanged: IOverGridImageChangedParam;\n\n    BeforeOverGridImageInsert: IBeforeOverGridImageInsertParam;\n    OverGridImageInserted: IOverGridImageInsertedParam;\n\n    BeforeOverGridImageRemove: IBeforeOverGridImageRemoveParam;\n    OverGridImageRemoved: IOverGridImageRemovedParam;\n\n    BeforeOverGridImageSelect: IBeforeOverGridImageSelectParam;\n    OverGridImageSelected: IOverGridImageSelectedParam;\n}\n\nFEventName.extend(FDrawingEventNameMixin);\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FEventName extends IFDrawingEventNameMixin { }\n    interface IEventParamConfig extends IFSheetsUIEventParamConfig { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingSearch, Injector } from '@univerjs/core';\nimport type { IEventBase } from '@univerjs/core/facade';\nimport type { ISheetImage } from '@univerjs/sheets-drawing';\nimport type { IDeleteDrawingCommandParams, IInsertDrawingCommandParams, ISetDrawingCommandParams } from '@univerjs/sheets-drawing-ui';\nimport type { FWorkbook } from '@univerjs/sheets/facade';\nimport type { IBeforeOverGridImageChangeParamObject } from './f-event';\nimport { ICommandService } from '@univerjs/core';\nimport { FUniver } from '@univerjs/core/facade';\nimport { IDrawingManagerService, SetDrawingSelectedOperation } from '@univerjs/drawing';\nimport { InsertSheetDrawingCommand, RemoveSheetDrawingCommand, SetSheetDrawingCommand } from '@univerjs/sheets-drawing-ui';\nimport { FOverGridImage } from './f-over-grid-image';\n\ninterface IBeforeOverGridImageInsertParam extends IEventBase {\n    workbook: FWorkbook;\n    insertImageParams: ISheetImage[];\n}\n\ninterface IBeforeOverGridImageRemoveParam extends IEventBase {\n    workbook: FWorkbook;\n    images: FOverGridImage[];\n}\n\ninterface IBeforeOverGridImageChangeParam extends IEventBase {\n    workbook: FWorkbook;\n    images: IBeforeOverGridImageChangeParamObject[];\n}\n\ninterface IBeforeOverGridImageSelectParam extends IEventBase {\n    workbook: FWorkbook;\n    selectedImages: FOverGridImage[];\n    oldSelectedImages: FOverGridImage[];\n}\n\n/**\n * @ignore\n */\nexport class FUniverDrawingMixin extends FUniver {\n    /**\n     * @ignore\n     */\n    // eslint-disable-next-line max-lines-per-function\n    override _initialize(injector: Injector): void {\n        const commandService = injector.get(ICommandService);\n\n        this.registerEventHandler(\n            this.Event.BeforeOverGridImageInsert,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== InsertSheetDrawingCommand.id) return;\n\n                const params = commandInfo.params as IInsertDrawingCommandParams;\n                const workbook = this.getActiveWorkbook();\n                if (workbook == null || params == null) {\n                    return;\n                }\n\n                const { drawings } = params;\n                const eventParams: IBeforeOverGridImageInsertParam = {\n                    workbook,\n                    insertImageParams: drawings as ISheetImage[],\n                };\n\n                this.fireEvent(this.Event.BeforeOverGridImageInsert, eventParams);\n\n                if (eventParams.cancel) {\n                    throw new Error('Canceled by BeforeOverGridImageInsert event');\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeOverGridImageRemove,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== RemoveSheetDrawingCommand.id) return;\n\n                const params = commandInfo.params as IDeleteDrawingCommandParams;\n                const workbook = this.getActiveWorkbook();\n                if (workbook == null || params == null) {\n                    return;\n                }\n\n                const drawingManagerService = injector.get(IDrawingManagerService);\n\n                const { drawings } = params;\n                const willRemoveDrawings = drawings.map((drawing) => {\n                    return drawingManagerService.getDrawingByParam(drawing);\n                }) as ISheetImage[];\n\n                const eventParams: IBeforeOverGridImageRemoveParam = {\n                    workbook,\n                    images: this._createFOverGridImage(willRemoveDrawings),\n                };\n\n                this.fireEvent(this.Event.BeforeOverGridImageRemove, eventParams);\n\n                if (eventParams.cancel) {\n                    throw new Error('Canceled by BeforeOverGridImageRemove event');\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeOverGridImageChange,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== SetSheetDrawingCommand.id) return;\n\n                const params = commandInfo.params as ISetDrawingCommandParams;\n                const workbook = this.getActiveWorkbook();\n                if (workbook == null || params == null) {\n                    return;\n                }\n\n                const { drawings } = params;\n                const drawingManagerService = injector.get(IDrawingManagerService);\n\n                const images: IBeforeOverGridImageChangeParamObject[] = [];\n                drawings.forEach((drawing) => {\n                    const image = drawingManagerService.getDrawingByParam(drawing as IDrawingSearch) as ISheetImage;\n                    if (image == null) {\n                        return;\n                    }\n\n                    images.push({\n                        changeParam: drawing,\n                        image: this._injector.createInstance(FOverGridImage, image),\n                    });\n                });\n\n                const eventParams: IBeforeOverGridImageChangeParam = {\n                    workbook,\n                    images,\n                };\n\n                this.fireEvent(this.Event.BeforeOverGridImageChange, eventParams);\n\n                if (eventParams.cancel) {\n                    drawingManagerService.updateNotification(drawings as IDrawingSearch[]);\n                    throw new Error('Canceled by BeforeOverGridImageChange event');\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeOverGridImageSelect,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== SetDrawingSelectedOperation.id) return;\n\n                const drawings = commandInfo.params as IDrawingSearch[];\n                const workbook = this.getActiveWorkbook();\n                if (workbook == null) {\n                    return;\n                }\n                const drawingManagerService = injector.get(IDrawingManagerService);\n\n                const oldSelectedDrawings = drawingManagerService.getFocusDrawings() as ISheetImage[];\n                const selectedDrawings = drawings.map((drawing) => {\n                    return drawingManagerService.getDrawingByParam(drawing);\n                }) as ISheetImage[];\n\n                const eventParams: IBeforeOverGridImageSelectParam = {\n                    workbook,\n                    selectedImages: this._createFOverGridImage(selectedDrawings),\n                    oldSelectedImages: this._createFOverGridImage(oldSelectedDrawings),\n                };\n\n                this.fireEvent(this.Event.BeforeOverGridImageSelect, eventParams);\n\n                if (eventParams.cancel) {\n                    throw new Error('Canceled by BeforeOverGridImageSelect event');\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.OverGridImageInserted,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== InsertSheetDrawingCommand.id) return;\n\n                const params = commandInfo.params as IInsertDrawingCommandParams;\n                const workbook = this.getActiveWorkbook();\n                if (workbook == null || params == null) {\n                    return;\n                }\n\n                const { drawings } = params;\n                this.fireEvent(this.Event.OverGridImageInserted, {\n                    workbook,\n                    images: this._createFOverGridImage(drawings as ISheetImage[]),\n                });\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.OverGridImageRemoved,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== RemoveSheetDrawingCommand.id) return;\n\n                const params = commandInfo.params as IDeleteDrawingCommandParams;\n                const workbook = this.getActiveWorkbook();\n                if (workbook == null || params == null) {\n                    return;\n                }\n\n                const { drawings } = params;\n                this.fireEvent(this.Event.OverGridImageRemoved, {\n                    workbook,\n                    removeImageParams: drawings,\n                });\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.OverGridImageChanged,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== SetSheetDrawingCommand.id) return;\n\n                const params = commandInfo.params as ISetDrawingCommandParams;\n                const workbook = this.getActiveWorkbook();\n                if (workbook == null || params == null) {\n                    return;\n                }\n\n                const { drawings } = params;\n                const drawingManagerService = injector.get(IDrawingManagerService);\n\n                const images = drawings.map((drawing) => {\n                    return this._injector.createInstance(FOverGridImage, drawingManagerService.getDrawingByParam(drawing as IDrawingSearch) as ISheetImage);\n                });\n\n                this.fireEvent(this.Event.OverGridImageChanged, {\n                    workbook,\n                    images,\n                });\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.OverGridImageSelected,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== SetDrawingSelectedOperation.id) return;\n\n                const drawings = commandInfo.params as IDrawingSearch[];\n                const workbook = this.getActiveWorkbook();\n                if (workbook == null) {\n                    return;\n                }\n                const drawingManagerService = injector.get(IDrawingManagerService);\n\n                const selectedDrawings = drawings.map((drawing) => {\n                    return drawingManagerService.getDrawingByParam(drawing);\n                }) as ISheetImage[];\n\n                this.fireEvent(this.Event.OverGridImageSelected, {\n                    workbook,\n                    selectedImages: this._createFOverGridImage(selectedDrawings as ISheetImage[]),\n                });\n            })\n        );\n    }\n\n    private _createFOverGridImage(drawings: ISheetImage[]): FOverGridImage[] {\n        return drawings.map((drawing) => {\n            return this._injector.createInstance(FOverGridImage, drawing);\n        });\n    }\n}\n\nFUniver.extend(FUniverDrawingMixin);\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ISheetLocationBase } from '@univerjs/sheets';\nimport { IUniverInstanceService, UniverInstanceType } from '@univerjs/core';\nimport { getCurrentTypeOfRenderer, IRenderManagerService } from '@univerjs/engine-render';\nimport { SheetDrawingUpdateController } from '@univerjs/sheets-drawing-ui';\nimport { FRange } from '@univerjs/sheets/facade';\n\nexport interface IFRangeSheetDrawingMixin {\n    /**\n     * Inserts an image into the current cell.\n     *\n     * @param {string | File} file File or URL string\n     * @returns True if the image is inserted successfully, otherwise false\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Insert an image into the cell A10\n     * const fRange = fWorksheet.getRange('A10');\n     * const result = await fRange.insertCellImageAsync('https://avatars.githubusercontent.com/u/61444807?s=48&v=4');\n     * console.log(result);\n     * ```\n     */\n    insertCellImageAsync(file: File | string): Promise<boolean>;\n}\n\nexport class FRangeSheetDrawingUI extends FRange implements IFRangeSheetDrawingMixin {\n    override async insertCellImageAsync(file: File | string): Promise<boolean> {\n        const renderManagerService = this._injector.get(IRenderManagerService);\n        const controller = getCurrentTypeOfRenderer(UniverInstanceType.UNIVER_SHEET, this._injector.get(IUniverInstanceService), renderManagerService)\n            ?.with(SheetDrawingUpdateController);\n        if (!controller) {\n            return false;\n        }\n        const location: ISheetLocationBase = {\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n            row: this.getRow(),\n            col: this.getColumn(),\n        };\n\n        if (typeof file === 'string') {\n            return controller.insertCellImageByUrl(file, location);\n        } else {\n            return controller.insertCellImageByFile(file, location);\n        }\n    }\n}\n\nFRange.extend(FRangeSheetDrawingUI);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FRange extends IFRangeSheetDrawingMixin { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DocumentDataModel, Injector } from '@univerjs/core';\nimport type { IRichTextEditingMutationParams } from '@univerjs/docs';\nimport type { IEditorBridgeServiceVisibleParam } from '@univerjs/sheets-ui';\nimport type { IBeforeSheetEditEndEventParams, IBeforeSheetEditStartEventParams, ISheetEditChangingEventParams, ISheetEditEndedEventParams, ISheetEditStartedEventParams } from '@univerjs/sheets-ui/facade';\nimport { CanceledError, DOCS_ZEN_EDITOR_UNIT_ID_KEY, ICommandService, IUniverInstanceService, RichTextValue } from '@univerjs/core';\nimport { FUniver } from '@univerjs/core/facade';\nimport { RichTextEditingMutation } from '@univerjs/docs';\n\nimport { IEditorBridgeService } from '@univerjs/sheets-ui';\nimport { CancelZenEditCommand, ConfirmZenEditCommand, OpenZenEditorCommand } from '@univerjs/sheets-zen-editor';\n\n/**\n * @ignore\n */\nexport interface IFUniverSheetsZenEditorMixin {}\n\nexport class FUniverSheetsZenEditorMixin extends FUniver implements IFUniverSheetsZenEditorMixin {\n    // eslint-disable-next-line max-lines-per-function\n    private _initSheetZenEditorEvent(injector: Injector): void {\n        const commandService = injector.get(ICommandService);\n\n        // Register before command execution handlers\n        this.registerEventHandler(\n            this.Event.BeforeSheetEditStart,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id === OpenZenEditorCommand.id) {\n                    const target = this.getCommandSheetTarget(commandInfo);\n                    if (!target) {\n                        return;\n                    }\n                    const { workbook, worksheet } = target;\n                    const editorBridgeService = injector.get(IEditorBridgeService);\n                    const params = commandInfo.params as IEditorBridgeServiceVisibleParam;\n                    const { keycode, eventType } = params;\n                    const loc = editorBridgeService.getEditLocation()!;\n\n                    const eventParams: IBeforeSheetEditStartEventParams = {\n                        row: loc.row,\n                        column: loc.column,\n                        eventType,\n                        keycode,\n                        workbook,\n                        worksheet,\n                        isZenEditor: true,\n                    };\n                    this.fireEvent(this.Event.BeforeSheetEditStart, eventParams);\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeSheetEditEnd,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (\n                    commandInfo.id === CancelZenEditCommand.id ||\n                    commandInfo.id === ConfirmZenEditCommand.id\n                ) {\n                    const target = this.getCommandSheetTarget(commandInfo);\n                    if (!target) {\n                        return;\n                    }\n                    const { workbook, worksheet } = target;\n                    const editorBridgeService = injector.get(IEditorBridgeService);\n                    const univerInstanceService = injector.get(IUniverInstanceService);\n                    const params = commandInfo.params as IEditorBridgeServiceVisibleParam;\n                    const { keycode, eventType } = params;\n                    const loc = editorBridgeService.getEditLocation()!;\n\n                    const eventParams: IBeforeSheetEditEndEventParams = {\n                        row: loc.row,\n                        column: loc.column,\n                        eventType,\n                        keycode,\n                        workbook,\n                        worksheet,\n                        isZenEditor: true,\n                        value: RichTextValue.create(univerInstanceService.getUnit<DocumentDataModel>(DOCS_ZEN_EDITOR_UNIT_ID_KEY)!.getSnapshot()),\n                        isConfirm: commandInfo.id === ConfirmZenEditCommand.id,\n                    };\n                    this.fireEvent(this.Event.BeforeSheetEditEnd, eventParams);\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        // Register command execution handlers\n        this.registerEventHandler(\n            this.Event.SheetEditStarted,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id === OpenZenEditorCommand.id) {\n                    const target = this.getCommandSheetTarget(commandInfo);\n                    if (!target) {\n                        return;\n                    }\n                    const { workbook, worksheet } = target;\n\n                    const editorBridgeService = injector.get(IEditorBridgeService);\n                    const params = commandInfo.params as IEditorBridgeServiceVisibleParam;\n                    const { keycode, eventType } = params;\n                    const loc = editorBridgeService.getEditLocation()!;\n                    const eventParams: ISheetEditStartedEventParams = {\n                        row: loc.row,\n                        column: loc.column,\n                        eventType,\n                        keycode,\n                        workbook,\n                        worksheet,\n                        isZenEditor: true,\n                    };\n                    this.fireEvent(this.Event.SheetEditStarted, eventParams);\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.SheetEditEnded,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (\n                    commandInfo.id === CancelZenEditCommand.id ||\n                    commandInfo.id === ConfirmZenEditCommand.id\n                ) {\n                    const target = this.getCommandSheetTarget(commandInfo);\n                    if (!target) {\n                        return;\n                    }\n                    const { workbook, worksheet } = target;\n\n                    const editorBridgeService = injector.get(IEditorBridgeService);\n                    const params = commandInfo.params as IEditorBridgeServiceVisibleParam;\n                    const { keycode, eventType } = params;\n                    const loc = editorBridgeService.getEditLocation()!;\n\n                    const eventParams: ISheetEditEndedEventParams = {\n                        row: loc.row,\n                        column: loc.column,\n                        eventType,\n                        keycode,\n                        workbook,\n                        worksheet,\n                        isZenEditor: true,\n                        isConfirm: commandInfo.id === ConfirmZenEditCommand.id,\n                    };\n                    this.fireEvent(this.Event.SheetEditEnded, eventParams);\n                }\n            })\n        );\n\n        // Register rich text editing mutation handler\n        this.registerEventHandler(\n            this.Event.SheetEditChanging,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id === RichTextEditingMutation.id) {\n                    const target = this.getActiveSheet();\n                    if (!target) {\n                        return;\n                    }\n                    const { workbook, worksheet } = target;\n                    const editorBridgeService = injector.get(IEditorBridgeService);\n                    const univerInstanceService = injector.get(IUniverInstanceService);\n                    const params = commandInfo.params as IRichTextEditingMutationParams;\n                    if (!editorBridgeService.isVisible().visible) return;\n                    const { unitId } = params;\n                    if (unitId === DOCS_ZEN_EDITOR_UNIT_ID_KEY) {\n                        const { row, column } = editorBridgeService.getEditLocation()!;\n                        const eventParams: ISheetEditChangingEventParams = {\n                            workbook,\n                            worksheet,\n                            row,\n                            column,\n                            value: RichTextValue.create(univerInstanceService.getUnit<DocumentDataModel>(DOCS_ZEN_EDITOR_UNIT_ID_KEY)!.getSnapshot()),\n                            isZenEditor: true,\n                        };\n                        this.fireEvent(this.Event.SheetEditChanging, eventParams);\n                    }\n                }\n            })\n        );\n    }\n\n    /**\n     * @ignore\n     */\n    override _initialize(injector: Injector): void {\n        this._initSheetZenEditorEvent(injector);\n    }\n}\n\nFUniver.extend(FUniverSheetsZenEditorMixin);\n\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FUniver extends IFUniverSheetsZenEditorMixin { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ICommandService } from '@univerjs/core';\nimport { CancelZenEditCommand, ConfirmZenEditCommand, OpenZenEditorCommand } from '@univerjs/sheets-zen-editor';\nimport { FWorkbook } from '@univerjs/sheets/facade';\n\n/**\n * @ignore\n */\nexport interface IFWorkbookSheetsZenEditorMixin {\n     /**\n      * Enter the zen editing process on the active cell\n      * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the zen editing process was started successfully.\n      * @example\n      * ```ts\n      * const fWorkbook = univerAPI.getActiveWorkbook();\n      * const success = await fWorkbook.startZenEditingAsync();\n      * console.log(success);\n      * ```\n      */\n    startZenEditingAsync(): Promise<boolean>;\n\n     /**\n      * End the zen editing process on the active cell and optionally save the changes\n      * @async\n      * @param {boolean} save - Whether to save the changes, default is true\n      * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the zen editing process was ended successfully.\n      * @example\n      * ```ts\n      * const fWorkbook = univerAPI.getActiveWorkbook();\n      * const success = await fWorkbook.endZenEditingAsync(false);\n      * console.log(success);\n      * ```\n      */\n    endZenEditingAsync(save?: boolean): Promise<boolean>;\n}\n\nexport class FWorkbookSheetsZenEditorMixin extends FWorkbook implements IFWorkbookSheetsZenEditorMixin {\n    override startZenEditingAsync(): Promise<boolean> {\n        const commandService = this._injector.get(ICommandService);\n\n        return commandService.executeCommand(OpenZenEditorCommand.id);\n    }\n\n    override endZenEditingAsync(save = true): Promise<boolean> {\n        const commandService = this._injector.get(ICommandService);\n\n        return save\n            ? commandService.executeCommand(ConfirmZenEditCommand.id)\n            : commandService.executeCommand(CancelZenEditCommand.id);\n    }\n}\n\nFWorkbook.extend(FWorkbookSheetsZenEditorMixin);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FWorkbook extends IFWorkbookSheetsZenEditorMixin {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FEnum } from '@univerjs/core/facade';\nimport { BindModeEnum, DataBindingNodeTypeEnum } from '@univerjs/sheets-source-binding';\n\n/**\n * @ignore\n */\nexport interface ISourceBindingEnumMixin {\n    /**\n     * Represents the type of data binding node.{@link DataBindingNodeTypeEnum}\n     */\n    DataBindingNodeTypeEnum: typeof DataBindingNodeTypeEnum;\n    /**\n     * Represents the type of data binding node. {@link BindModeEnum}\n     */\n    BindModeEnum: typeof BindModeEnum;\n}\nclass FSourceBindingEnum extends FEnum implements ISourceBindingEnumMixin {\n    override get DataBindingNodeTypeEnum(): typeof DataBindingNodeTypeEnum {\n        return DataBindingNodeTypeEnum;\n    }\n\n    override get BindModeEnum(): typeof BindModeEnum {\n        return BindModeEnum;\n    }\n}\n\nFEnum.extend(FSourceBindingEnum);\n\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FEnum extends ISourceBindingEnumMixin { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DataBindingNodeTypeEnum, IBindingNodeInfo, ISourceBindingInfo, SourceModelBase } from '@univerjs/sheets-source-binding';\nimport { SheetsSourceBindService, SheetsSourceManager } from '@univerjs/sheets-source-binding';\nimport { FWorkbook } from '@univerjs/sheets/facade';\n\nexport interface IFWorkbookSourceBindingMixin {\n    /**\n     * Create a source model with the specified type.\n     * @param {DataBindingNodeTypeEnum} type The source type.\n     * @param {boolean} [isListObject] Whether the source is a list object.\n     * @param {string} [id] The source id.\n     * @returns {SourceModelBase} The source data of sheet.\n     */\n    createSource(type: DataBindingNodeTypeEnum, isListObject?: boolean, id?: string | undefined): SourceModelBase;\n    /**\n     * Switch to path mode.In this mode, the path will show in cell.\n     */\n    usePathMode(): void;\n    /**\n     * Switch to value mode.This is the default mode. In this mode, the cell value will fulfill by source values.\n     */\n    useValueMode(): void;\n    /**\n     * Get the source model by the specified source id.\n     * @param {string} sourceId The source id.\n     */\n    getSource(sourceId: string): SourceModelBase | undefined;\n    /**\n     * Set the source data by the specified source id.\n     * @param {string} sourceId - The source id which you want to set data.\n     * @param data - The source data. If the source is a list object, the data should be an array of objects.\n     * If the isListObject is false, the data should look like below:\n     * ```typescript\n     * {\n     *   fields: ['name', 'age'],\n     *   records: [['Tom', 18], ['Jerry', 20]]\n     * }\n     * ```\n     * If the isListObject is true, the data should look like below:\n     * ```typescript\n     * {\n     *   fields: ['name', 'age'],\n     *   records: [{name: 'Tom', age: 18}, {name: 'Jerry', age: 20}]\n     * }\n     * ```\n     */\n    setSourceData(sourceId: string, data: any): void;\n\n    loadSourceBindingPathInfo(obj: ISourceBindingInfo): void;\n\n    saveSourceBindingPathInfo(): ISourceBindingInfo;\n\n    getBindingModelBySourceId(sourceId: string): IBindingNodeInfo[];\n}\n\nexport class FWorkbookSourceBinding extends FWorkbook implements IFWorkbookSourceBindingMixin {\n    override createSource(type: DataBindingNodeTypeEnum, isListObject?: boolean, id?: string | undefined): SourceModelBase {\n        const injector = this._injector;\n        const sheetsSourceBindService = injector.get(SheetsSourceBindService);\n        return sheetsSourceBindService.createSource(this.getId(), type, isListObject, id);\n    }\n\n    override getSource(sourceId: string): SourceModelBase | undefined {\n        const injector = this._injector;\n        const sheetsSourceBindService = injector.get(SheetsSourceBindService);\n        return sheetsSourceBindService.getSource(this.getId(), sourceId);\n    }\n\n    override setSourceData(sourceId: string, data: any): void {\n        const injector = this._injector;\n        const sheetsSourceManager = injector.get(SheetsSourceManager);\n        sheetsSourceManager.updateSourceData(this.getId(), sourceId, data);\n    }\n\n    override usePathMode(): void {\n        const injector = this._injector;\n        const sheetsSourceBindService = injector.get(SheetsSourceBindService);\n        sheetsSourceBindService.usePathMode();\n    }\n\n    override useValueMode(): void {\n        const injector = this._injector;\n        const sheetsSourceBindService = injector.get(SheetsSourceBindService);\n        sheetsSourceBindService.useValueMode();\n    }\n\n    override loadSourceBindingPathInfo(obj: ISourceBindingInfo): void {\n        const injector = this._injector;\n        const sheetsSourceBindService = injector.get(SheetsSourceBindService);\n        sheetsSourceBindService.loadSourceBindingPathInfo(this.getId(), obj);\n    }\n\n    override saveSourceBindingPathInfo(): ISourceBindingInfo {\n        const injector = this._injector;\n        const sheetsSourceBindService = injector.get(SheetsSourceBindService);\n        return sheetsSourceBindService.getSourceBindingPathInfo(this.getId());\n    }\n\n    override getBindingModelBySourceId(sourceId: string): IBindingNodeInfo[] {\n        const injector = this._injector;\n        const sheetsSourceBindService = injector.get(SheetsSourceBindService);\n        return sheetsSourceBindService.getBindingModelBySourceId(sourceId);\n    }\n}\n\nFWorkbook.extend(FWorkbookSourceBinding);\n\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FWorkbook extends IFWorkbookSourceBindingMixin { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICellBindingNode, ICellBindingNodeParam } from '@univerjs/sheets-source-binding';\nimport { SheetsSourceBindService } from '@univerjs/sheets-source-binding';\nimport { FWorksheet } from '@univerjs/sheets/facade';\n\nexport interface IFworksheetSourceBindingMixin {\n    /**\n     * Set the binding node for the specified cell.\n     * @param bindingNode The binding node to set. {@link ICellBindingNodeParam}\n     */\n    setBindingNode(bindingNode: ICellBindingNodeParam): void;\n    /**\n     * Remove the binding node for the specified cell.\n     * @param {number} row The row index of the cell.\n     * @param {number} column The column index of the cell.\n     */\n    removeBindingNode(row: number, column: number): void;\n    /**\n     * Get the binding node for the specified cell.\n     * @param {number} row The row index of the cell.\n     * @param {number} column The column index of the cell.\n     * @returns The binding node of the cell. {@link ICellBindingNode} or undefined if not found.\n     */\n    getBindingNode(row: number, column: number): ICellBindingNode | undefined;\n}\n\nexport class FWorksheetSourceBinding extends FWorksheet implements IFworksheetSourceBindingMixin {\n    override setBindingNode(bindingNode: ICellBindingNodeParam): void {\n        const injector = this._injector;\n        const sheetsSourceBindService = injector.get(SheetsSourceBindService);\n        const unitId = this._workbook.getUnitId();\n        sheetsSourceBindService.setBindingNode(unitId, this.getSheetId(), bindingNode);\n    }\n\n    override removeBindingNode(row: number, column: number): void {\n        const injector = this._injector;\n        const sheetsSourceBindService = injector.get(SheetsSourceBindService);\n        const unitId = this._workbook.getUnitId();\n        sheetsSourceBindService.removeBindingNode(unitId, this.getSheetId(), row, column);\n    }\n\n    override getBindingNode(row: number, column: number): ICellBindingNode | undefined {\n        const injector = this._injector;\n        const sheetsSourceBindService = injector.get(SheetsSourceBindService);\n        const unitId = this._workbook.getUnitId();\n        return sheetsSourceBindService.getBindingNode(unitId, this.getSheetId(), row, column);\n    }\n}\n\nFWorksheet.extend(FWorksheetSourceBinding);\n\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FWorksheet extends IFworksheetSourceBindingMixin { }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Injector } from '@univerjs/core';\nimport type { IEventBase } from '@univerjs/core/facade';\nimport type { ISetCrosshairHighlightColorOperationParams } from '@univerjs/sheets-crosshair-highlight';\nimport type { FWorkbook, FWorksheet } from '@univerjs/sheets/facade';\nimport { ICommandService } from '@univerjs/core';\nimport { FEventName, FUniver } from '@univerjs/core/facade';\nimport { CROSSHAIR_HIGHLIGHT_COLORS, DisableCrosshairHighlightOperation, EnableCrosshairHighlightOperation, SetCrosshairHighlightColorOperation, SheetsCrosshairHighlightService, ToggleCrosshairHighlightOperation } from '@univerjs/sheets-crosshair-highlight';\n\n/**\n * @ignore\n */\nexport interface IFSheetCrosshairHighlightEventMixin {\n    /**\n     * Triggered when the crosshair highlight is enabled or disabled.\n     * @see {@link ICrosshairHighlightEnabledChangedEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.CrosshairHighlightEnabledChanged, (params) => {\n     *   const { enabled, workbook, worksheet } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly CrosshairHighlightEnabledChanged: 'CrosshairHighlightEnabledChanged';\n\n    /**\n     * Triggered when the crosshair highlight color is changed.\n     * @see {@link ICrosshairHighlightColorChangedEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.CrosshairHighlightColorChanged, (params) => {\n     *   const { color, workbook, worksheet } = params;\n     *   console.log(params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    readonly CrosshairHighlightColorChanged: 'CrosshairHighlightColorChanged';\n}\n\nexport interface ICrosshairHighlightEnabledChangedEvent extends IEventBase {\n    /**\n     * Whether the crosshair highlight is enabled.\n     */\n    enabled: boolean;\n    /**\n     * The workbook that the crosshair highlight is enabled in.\n     */\n    workbook: FWorkbook;\n    /**\n     * The worksheet that the crosshair highlight is enabled in.\n     */\n    worksheet: FWorksheet;\n}\n\nexport interface ICrosshairHighlightColorChangedEvent extends IEventBase {\n    /**\n     * The color of the crosshair highlight.\n     */\n    color: string;\n    /**\n     * The workbook that the crosshair highlight is enabled in.\n     */\n    workbook: FWorkbook;\n    /**\n     * The worksheet that the crosshair highlight is enabled in.\n     */\n    worksheet: FWorksheet;\n}\n\n/**\n * @ignore\n */\nexport class FSheetCrosshairHighlightEventMixin implements IFSheetCrosshairHighlightEventMixin {\n    get CrosshairHighlightEnabledChanged(): 'CrosshairHighlightEnabledChanged' {\n        return 'CrosshairHighlightEnabledChanged';\n    }\n\n    get CrosshairHighlightColorChanged(): 'CrosshairHighlightColorChanged' {\n        return 'CrosshairHighlightColorChanged';\n    }\n}\n\n/**\n * @ignore\n */\nexport interface ISheetCrosshairHighlightEventConfigs {\n    CrosshairHighlightEnabledChanged: ICrosshairHighlightEnabledChangedEvent;\n    CrosshairHighlightColorChanged: ICrosshairHighlightColorChangedEvent;\n}\n\n/**\n * @ignore\n */\nexport interface IFUniverCrosshairHighlightMixin {\n    /**\n     * Enable or disable crosshair highlight.\n     * @param {boolean} enabled - Whether to enable the crosshair highlight\n     * @returns {FUniver} The FUniver instance for chaining\n     * @example\n     * ```ts\n     * univerAPI.setCrosshairHighlightEnabled(true);\n     * ```\n     */\n    setCrosshairHighlightEnabled(enabled: boolean): FUniver;\n\n    /**\n     * Set the color of the crosshair highlight.\n     * @param {string} color - The color of the crosshair highlight, if the color not has alpha channel, the alpha channel will be set to 0.5\n     * @returns {FUniver} The FUniver instance for chaining\n     * @example\n     * ```ts\n     * univerAPI.setCrosshairHighlightColor('#FF0000');\n     * // or\n     * univerAPI.setCrosshairHighlightColor('rgba(232, 11, 11, 0.2)');\n     * ```\n     */\n    setCrosshairHighlightColor(color: string): FUniver;\n\n    /**\n     * Get whether the crosshair highlight is enabled.\n     * @returns {boolean} Whether the crosshair highlight is enabled\n     * @example\n     * ```ts\n     * console.log(univerAPI.getCrosshairHighlightEnabled());\n     * ```\n     */\n    getCrosshairHighlightEnabled(): boolean;\n\n    /**\n     * Get the color of the crosshair highlight.\n     * @returns {string} The color of the crosshair highlight\n     * @example\n     * ```ts\n     * console.log(univerAPI.getCrosshairHighlightColor());\n     * ```\n     */\n    getCrosshairHighlightColor(): string;\n\n    /**\n     * Get the available built-in colors for the crosshair highlight.\n     */\n    readonly CROSSHAIR_HIGHLIGHT_COLORS: string[];\n}\n\n/**\n * @ignore\n */\nexport class FUniverCrosshairHighlightMixin extends FUniver implements IFUniverCrosshairHighlightMixin {\n    /**\n     * @ignore\n     */\n    override _initialize(injector: Injector): void {\n        const commandService = injector.get(ICommandService);\n\n        this.registerEventHandler(\n            this.Event.CrosshairHighlightEnabledChanged,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (\n                    commandInfo.id === EnableCrosshairHighlightOperation.id ||\n                    commandInfo.id === DisableCrosshairHighlightOperation.id ||\n                    commandInfo.id === ToggleCrosshairHighlightOperation.id\n                ) {\n                    const activeSheet = this.getActiveSheet();\n                    if (!activeSheet) return;\n                    this.fireEvent(this.Event.CrosshairHighlightEnabledChanged, {\n                        enabled: this.getCrosshairHighlightEnabled(),\n                        ...activeSheet,\n                    });\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.CrosshairHighlightColorChanged,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id === SetCrosshairHighlightColorOperation.id) {\n                    const activeSheet = this.getActiveSheet();\n                    if (!activeSheet) return;\n                    this.fireEvent(this.Event.CrosshairHighlightColorChanged, {\n                        color: this.getCrosshairHighlightColor(),\n                        ...activeSheet,\n                    });\n                }\n            })\n        );\n    }\n\n    override setCrosshairHighlightEnabled(enabled: boolean): FUniver {\n        if (enabled) {\n            this._commandService.syncExecuteCommand(EnableCrosshairHighlightOperation.id);\n        } else {\n            this._commandService.syncExecuteCommand(DisableCrosshairHighlightOperation.id);\n        }\n\n        return this;\n    }\n\n    override setCrosshairHighlightColor(color: string): FUniver {\n        this._commandService.syncExecuteCommand(SetCrosshairHighlightColorOperation.id, {\n            value: color,\n        } as ISetCrosshairHighlightColorOperationParams);\n        return this;\n    }\n\n    override getCrosshairHighlightEnabled(): boolean {\n        const crosshairHighlightService = this._injector.get(SheetsCrosshairHighlightService);\n        return crosshairHighlightService.enabled;\n    }\n\n    override getCrosshairHighlightColor(): string {\n        const crosshairHighlightService = this._injector.get(SheetsCrosshairHighlightService);\n        return crosshairHighlightService.color;\n    }\n\n    override get CROSSHAIR_HIGHLIGHT_COLORS(): string[] {\n        return CROSSHAIR_HIGHLIGHT_COLORS;\n    }\n}\n\nFEventName.extend(FSheetCrosshairHighlightEventMixin);\nFUniver.extend(FUniverCrosshairHighlightMixin);\n\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FUniver extends IFUniverCrosshairHighlightMixin {}\n\n    // eslint-disable-next-line ts/naming-convention\n    interface FEventName extends IFSheetCrosshairHighlightEventMixin {\n    }\n\n    interface IEventParamConfig extends ISheetCrosshairHighlightEventConfigs {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IOrderRule } from '@univerjs/sheets-sort';\nimport { SortRangeCommand, SortType } from '@univerjs/sheets-sort';\nimport { FRange } from '@univerjs/sheets/facade';\n\nexport type SortColumnSpec = { column: number; ascending: boolean } | number;\n\n/**\n * @ignore\n */\nexport interface IFRangeSort {\n    /**\n     * Sorts the cells in the given range, by column(s) and order specified.\n     * @param {SortColumnSpec | SortColumnSpec[]} column The column index with order or an array of column indexes with order. The range first column index is 0.\n     * @returns {FRange} The range itself for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     * const fRange = fWorksheet.getRange('D1:G10');\n     *\n     * // Sorts the range by the first column in ascending order.\n     * fRange.sort(0);\n     *\n     * // Sorts the range by the first column in descending order.\n     * fRange.sort({ column: 0, ascending: false });\n     *\n     * // Sorts the range by the first column in descending order and the second column in ascending order.\n     * fRange.sort([{ column: 0, ascending: false }, 1]);\n     * ```\n     */\n    sort(column: SortColumnSpec | SortColumnSpec[]): FRange;\n}\n\nexport class FRangeSort extends FRange implements IFRangeSort {\n    override sort(column: SortColumnSpec | SortColumnSpec[]): FRange {\n        const columnBase = this._range.startColumn;\n        const columns = Array.isArray(column) ? column : [column];\n\n        const orderRules: IOrderRule[] = columns.map((c) => {\n            if (typeof c === 'number') {\n                return { colIndex: c + columnBase, type: SortType.ASC };\n            }\n            return {\n                colIndex: c.column + columnBase,\n                type: c.ascending ? SortType.ASC : SortType.DESC,\n            };\n        });\n        this._commandService.syncExecuteCommand(SortRangeCommand.id, {\n            orderRules,\n            range: this._range,\n            hasTitle: false,\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n        });\n        return this;\n    }\n}\n\nFRange.extend(FRangeSort);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FRange extends IFRangeSort {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IRange } from '@univerjs/core';\nimport type { IOrderRule } from '@univerjs/sheets-sort';\nimport { RANGE_TYPE } from '@univerjs/core';\nimport { SortRangeCommand, SortType } from '@univerjs/sheets-sort';\nimport { FWorksheet } from '@univerjs/sheets/facade';\n\n/**\n * @ignore\n */\nexport interface IFWorksheetSort {\n    /**\n     * Sort the worksheet by the specified column.\n     * @param {number} colIndex The column index to sort by.\n     * @param {boolean} [asc=true] The sort order. `true` for ascending, `false` for descending. The column A index is 0.\n     * @returns {FWorksheet} The worksheet itself for chaining.\n     * @example\n     * ```typescript\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const fWorksheet = fWorkbook.getActiveSheet();\n     *\n     * // Sorts the worksheet by the column A in ascending order.\n     * fWorksheet.sort(0);\n     *\n     * // Sorts the worksheet by the column A in descending order.\n     * fWorksheet.sort(0, false);\n     * ```\n     */\n    sort(colIndex: number, asc?: boolean): FWorksheet;\n}\n\nexport class FWorksheetSort extends FWorksheet implements IFWorksheetSort {\n    override sort(colIndex: number, asc = true): FWorksheet {\n        const orderRules: IOrderRule[] = [{\n            colIndex,\n            type: asc ? SortType.ASC : SortType.DESC,\n        }];\n\n        const range: IRange = {\n            startRow: 0,\n            startColumn: 0,\n            endRow: this._worksheet.getRowCount() - 1,\n            endColumn: this._worksheet.getColumnCount() - 1,\n            rangeType: RANGE_TYPE.ALL,\n        };\n        this._commandService.syncExecuteCommand(SortRangeCommand.id, {\n            orderRules,\n            range,\n            hasTitle: false,\n            unitId: this._workbook.getUnitId(),\n            subUnitId: this._worksheet.getSheetId(),\n        });\n        return this;\n    }\n}\n\nFWorksheet.extend(FWorksheetSort);\ndeclare module '@univerjs/sheets/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FWorksheet extends IFWorksheetSort {}\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommandInfo, Injector } from '@univerjs/core';\nimport type { IEventBase } from '@univerjs/core/facade';\nimport type { ISortRangeCommandParams } from '@univerjs/sheets-sort';\nimport type { FRange, FWorkbook, FWorksheet } from '@univerjs/sheets/facade';\nimport { ICommandService } from '@univerjs/core';\nimport { FEventName, FUniver } from '@univerjs/core/facade';\nimport { SortRangeCommand, SortType } from '@univerjs/sheets-sort';\nimport { FSheetEventName } from '@univerjs/sheets/facade';\n\n/**\n * @ignore\n */\nexport interface IFSheetSortEventMixin {\n    /**\n     * This event will be emitted when a range on a worksheet is sorted.\n     * @see {@link ISheetRangeSortParams}\n     * @example\n     * ```typescript\n     * const callbackDisposable = univerAPI.addEvent(univerAPI.Event.SheetRangeSorted, (params) => {\n     *   console.log(params);\n     *   const { workbook, worksheet, range, sortColumn } = params;\n     * });\n     *\n     * // Remove the event listener, use `callbackDisposable.dispose()`\n     * ```\n     */\n    SheetRangeSorted: 'SheetRangeSorted';\n\n    /**\n     * This event will be emitted before sorting a range on a worksheet.\n     * @see {@link ISheetRangeSortParams}\n     * @example\n     * ```typescript\n     * const callbackDisposable = univerAPI.addEvent(univerAPI.Event.SheetBeforeRangeSort, (params) => {\n     *   console.log(params);\n     *   const { workbook, worksheet, range, sortColumn } = params;\n     *\n     *   // Cancel the sorting operation.\n     *   params.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `callbackDisposable.dispose()`\n     * ```\n     */\n    SheetBeforeRangeSort: 'SheetBeforeRangeSort';\n}\n\nexport class FSheetSortEventName implements IFSheetSortEventMixin {\n    get SheetRangeSorted(): 'SheetRangeSorted' { return 'SheetRangeSorted' as const; }\n    get SheetBeforeRangeSort(): 'SheetBeforeRangeSort' { return 'SheetBeforeRangeSort' as const; }\n}\n\ninterface ISortColumn {\n    column: number;\n    ascending: boolean;\n}\n\nexport interface ISheetRangeSortParams extends IEventBase {\n    workbook: FWorkbook;\n    worksheet: FWorksheet;\n    range: FRange;\n    sortColumn: ISortColumn[];\n}\n\n/**\n * @ignore\n */\nexport interface ISheetRangeSortEventParamConfig {\n    SheetBeforeRangeSort: ISheetRangeSortParams;\n    SheetRangeSorted: ISheetRangeSortParams;\n}\n\nFEventName.extend(FSheetEventName);\n\nclass FUniverSheetsSortEventMixin extends FUniver {\n    /**\n     * @ignore\n     */\n    override _initialize(injector: Injector): void {\n        const commandService = injector.get(ICommandService);\n\n        this.registerEventHandler(\n            this.Event.SheetBeforeRangeSort,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== SortRangeCommand.id) return;\n                this._beforeRangeSort(commandInfo as Readonly<ICommandInfo<ISortRangeCommandParams>>);\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.SheetRangeSorted,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                if (commandInfo.id !== SortRangeCommand.id) return;\n                this._onRangeSorted(commandInfo as Readonly<ICommandInfo<ISortRangeCommandParams>>);\n            })\n        );\n    }\n\n    private _beforeRangeSort(commandInfo: Readonly<ICommandInfo<ISortRangeCommandParams>>): void {\n        const params = commandInfo.params!;\n        const fWorkbook = this.getUniverSheet(params.unitId)!;\n        const fWorksheet = fWorkbook.getSheetBySheetId(params.subUnitId)!;\n        const { startColumn, endColumn, startRow, endRow } = params.range;\n        const fRange = fWorksheet.getRange(startRow, startColumn, endRow - startRow + 1, endColumn - startColumn + 1);\n        const eventParams: ISheetRangeSortParams = {\n            workbook: fWorkbook,\n            worksheet: fWorksheet,\n            range: fRange,\n            sortColumn: params.orderRules.map((rule) => ({\n                column: rule.colIndex - startColumn,\n                ascending: rule.type === SortType.ASC,\n            })),\n        };\n\n        this.fireEvent(this.Event.SheetBeforeRangeSort, eventParams);\n        if (eventParams.cancel) {\n            throw new Error('SortRangeCommand canceled.');\n        }\n    }\n\n    private _onRangeSorted(commandInfo: Readonly<ICommandInfo<ISortRangeCommandParams>>): void {\n        const params = commandInfo.params!;\n        const fWorkbook = this.getUniverSheet(params.unitId)!;\n        const fWorksheet = fWorkbook.getSheetBySheetId(params.subUnitId)!;\n        const { startColumn, endColumn, startRow, endRow } = params.range;\n        const fRange = fWorksheet.getRange(startRow, startColumn, endRow - startRow + 1, endColumn - startColumn + 1);\n        const eventParams: ISheetRangeSortParams = {\n            workbook: fWorkbook,\n            worksheet: fWorksheet,\n            range: fRange,\n            sortColumn: params.orderRules.map((rule) => ({\n                column: rule.colIndex - startColumn,\n                ascending: rule.type === SortType.ASC,\n            })),\n        };\n\n        this.fireEvent(this.Event.SheetRangeSorted, eventParams);\n        if (eventParams.cancel) {\n            throw new Error('SortRangeCommand canceled.');\n        }\n    }\n}\n\nFUniver.extend(FUniverSheetsSortEventMixin);\nFEventName.extend(FSheetSortEventName);\n\ndeclare module '@univerjs/core/facade' {\n    // eslint-disable-next-line ts/naming-convention\n    interface FEventName extends IFSheetSortEventMixin { }\n    interface IEventParamConfig extends ISheetRangeSortEventParamConfig { }\n}\n"],
  "mappings": "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",
  "names": ["DataBindingNodeTypeEnum", "BindModeEnum", "sourceInfo", "offset", "location", "location", "range", "location", "location", "import_jsx_runtime", "comments", "_a", "configSymbol", "defaultPluginConfig", "import_react", "import_jsx_runtime", "menuSchema", "menuSchema", "defaultPluginConfig", "rule", "document", "disposable", "_a", "location", "timer", "_a", "_b", "_c", "location"]
}
