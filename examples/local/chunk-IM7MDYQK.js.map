{
  "version": 3,
  "sources": ["../../packages/core/src/facade/f-base.ts", "../../packages/core/src/facade/f-blob.ts", "../../packages/core/src/facade/f-doc.ts", "../../packages/core/src/facade/f-enum.ts", "../../packages/core/src/facade/f-event.ts", "../../packages/core/src/facade/f-event-registry.ts", "../../packages/core/src/facade/f-hooks.ts", "../../packages/core/src/facade/f-usermanager.ts", "../../packages/core/src/facade/f-util.ts", "../../packages/core/src/facade/f-univer.ts"],
  "sourcesContent": ["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Injector } from '@univerjs/core';\nimport { Disposable } from '@univerjs/core';\n\n/**\n * `FBase` is a base class for all facade classes.\n * It provides a way to extend classes with static and instance methods.\n * The `_initialize` as a special method that will be called after the constructor. You should never call it directly.\n * @ignore\n */\nexport abstract class FBase extends Disposable {\n    /**\n     * @ignore\n     */\n    static extend(source: any): void {\n        Object.getOwnPropertyNames(source.prototype).forEach((name) => {\n            if (name !== 'constructor') {\n                // @ts-ignore\n                this.prototype[name] = source.prototype[name];\n            }\n        });\n\n        Object.getOwnPropertyNames(source).forEach((name) => {\n            if (name !== 'prototype' && name !== 'name' && name !== 'length') {\n                // @ts-ignore\n                this[name] = source[name];\n            }\n        });\n    }\n}\n\n/**\n * @ignore\n */\nconst InitializerSymbol = Symbol('initializers');\n\n/**\n * @ignore\n */\ntype Initializers = Array<(injector: Injector) => void>;\n\n/**\n * @ignore\n * @hideconstructor\n */\nexport class FBaseInitialable extends Disposable {\n    declare private [InitializerSymbol]: Initializers | undefined;\n\n    constructor(\n        protected _injector: Injector\n    ) {\n        super();\n\n        // eslint-disable-next-line ts/no-this-alias\n        const self = this;\n\n        const initializers = Object.getPrototypeOf(this)[InitializerSymbol];\n        if (initializers) {\n            initializers.forEach(function (fn: (_injector: Injector) => void) {\n                fn.apply(self, [_injector]);\n            });\n        }\n    }\n\n    /**\n     * @ignore\n     */\n    _initialize(injector: Injector): void { }\n\n    /**\n     * @ignore\n     */\n    static extend(source: any): void {\n        Object.getOwnPropertyNames(source.prototype).forEach((name) => {\n            if (name === '_initialize') {\n                let initializers = this.prototype[InitializerSymbol];\n                if (!initializers) {\n                    initializers = [];\n                    this.prototype[InitializerSymbol] = initializers;\n                }\n\n                initializers.push(source.prototype._initialize);\n            } else if (name !== 'constructor') {\n                // @ts-ignore\n                this.prototype[name] = source.prototype[name];\n            }\n        });\n\n        Object.getOwnPropertyNames(source).forEach((name) => {\n            if (name !== 'prototype' && name !== 'name' && name !== 'length') {\n                // @ts-ignore\n                this[name] = source[name];\n            }\n        });\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Nullable } from '@univerjs/core';\nimport { Inject, Injector } from '@univerjs/core';\nimport { FBase } from './f-base';\n\nexport interface IFBlobSource {\n    /**\n     * Return the data inside this object as a blob.\n     */\n    getBlob(): FBlob;\n\n    /**\n     * Return the data inside this object as a blob converted to the specified content type.\n     * @param contentType the content type refer to https://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types/Common_types\n     */\n    getAs(contentType: string): FBlob;\n}\n\n/**\n * @hideconstructor\n */\nexport class FBlob extends FBase {\n    constructor(\n        private _blob: Nullable<Blob>,\n        @Inject(Injector) protected readonly _injector: Injector\n    ) {\n        super();\n    }\n\n    /**\n     * Returns a copy of this blob.\n     * @returns a new blob by copying the current blob\n     * @example\n     * ```ts\n     * const blob = univerAPI.newBlob();\n     * const newBlob = blob.copyBlob();\n     * console.log(newBlob);\n     * ```\n     */\n    copyBlob(): FBlob {\n        return this._injector.createInstance(FBlob, this._blob);\n    }\n\n    /**\n     * Return the data inside this object as a blob converted to the specified content type.\n     * @param contentType the content type refer to https://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types/Common_types\n     * @returns a new blob by converting the current blob to the specified content type\n     * @example\n     * ```ts\n     * const blob = univerAPI.newBlob();\n     * const newBlob = blob.getAs('text/plain');\n     * console.log(newBlob);\n     * ```\n     */\n    getAs(contentType: string): FBlob {\n        const newBlob = this.copyBlob();\n        newBlob.setContentType(contentType);\n        return newBlob;\n    }\n\n    /**\n     * Get the blob as a string.\n     * @returns\n     * @example\n     * ```ts\n     * const blob = univerAPI.newBlob();\n     * const data = await blob.getDataAsString();\n     * console.log(data);\n     * ```\n     */\n    getDataAsString(): Promise<string>;\n    /**\n     * Get the blob as a string.\n     * @param charset the charset\n     * @returns the blob content as a string\n     * @example\n     * ```ts\n     * const blob = univerAPI.newBlob();\n     * const data = await blob.getDataAsString('iso-8859-1');\n     * console.log(data);\n     * ```\n     */\n    getDataAsString(charset?: string): Promise<string>;\n    getDataAsString(charset?: string): Promise<string> {\n        if (this._blob === null) {\n            return Promise.resolve('');\n        }\n\n        if (charset === undefined) {\n            return this._blob!.text();\n        }\n        return new Promise((resolve, reject) => {\n            this._blob!.arrayBuffer().then((arrayBuffer) => {\n                const text = new TextDecoder(charset).decode(arrayBuffer); // \u89E3\u7801\u4E3A\u5B57\u7B26\u4E32\n                resolve(text);\n            }).catch((error) => {\n                reject(new Error(`Failed to read Blob as ArrayBuffer: ${error.message}`));\n            });\n        });\n    }\n\n    /**\n     * Gets the data stored in this blob.\n     * @returns the blob content as a byte array\n     * @example\n     * ```ts\n     * const blob = univerAPI.newBlob();\n     * const bytes = await blob.getBytes();\n     * console.log(bytes);\n     * ```\n     */\n    getBytes(): Promise<Uint8Array> {\n        if (!this._blob) {\n            return Promise.reject(new Error('Blob is undefined or null.'));\n        }\n        return this._blob.arrayBuffer().then((buffer) => new Uint8Array(buffer));\n    }\n\n    /**\n     * Sets the data stored in this blob.\n     * @param bytes a byte array\n     * @returns the blob object\n     * @example\n     * ```ts\n     * const blob = univerAPI.newBlob();\n     * const bytes = new Uint8Array(10);\n     * blob.setBytes(bytes);\n     * ```\n     */\n    setBytes(bytes: Uint8Array): FBlob {\n        this._blob = new Blob([bytes]);\n        return this;\n    }\n\n    /**\n     * Sets the data stored in this blob.\n     * @param data blob data string\n     * @returns the blob object\n     * @example\n     * ```ts\n     * const blob = univerAPI.newBlob();\n     * blob.setDataFromString('Hello, World!');\n     * ```\n     */\n    setDataFromString(data: string): FBlob;\n    /**\n     * Sets the data stored in this blob.\n     * @param data a string\n     * @param contentType the content type refer to https://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types/Common_types\n     * @returns the blob object\n     * @example\n     * ```ts\n     * const blob = univerAPI.newBlob();\n     * blob.setDataFromString('Hello, World!', 'text/plain');\n     * ```\n     */\n    setDataFromString(data: string, contentType?: string): FBlob;\n    setDataFromString(data: string, contentType?: string): FBlob {\n        const contentTypeVal = contentType ?? 'text/plain';\n        const blob = new Blob([data], { type: contentTypeVal });\n        this._blob = blob;\n        return this;\n    }\n\n    /**\n     * Gets the content type of the data stored in this blob.\n     * @returns the content type\n     * @example\n     * ```ts\n     * const blob = univerAPI.newBlob();\n     * const contentType = blob.getContentType();\n     * console.log(contentType);\n     * ```\n     */\n    getContentType(): string | undefined {\n        return this._blob?.type;\n    }\n\n    /**\n     * Sets the content type of the data stored in this blob.\n     * @param contentType the content type refer to https://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types/Common_types\n     * @returns the blob object\n     * @example\n     * ```ts\n     * const blob = univerAPI.newBlob();\n     * blob.setContentType('text/plain');\n     * ```\n     */\n    setContentType(contentType: string): FBlob {\n        this._blob = this._blob?.slice(0, this._blob.size, contentType);\n        return this;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DocumentDataModel } from '@univerjs/core';\nimport { Inject, Injector } from '@univerjs/core';\nimport { FBaseInitialable } from './f-base';\n\n/**\n * @ignore\n * @hideconstructor\n */\nexport class FDoc extends FBaseInitialable {\n    constructor(\n        protected doc: DocumentDataModel,\n        @Inject(Injector) _injector: Injector\n    ) {\n        super(_injector);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable ts/explicit-function-return-type */\n\nimport { AbsoluteRefType, AutoFillSeries, BaselineOffset, BooleanNumber, BorderStyleTypes, BorderType, ColorType, CommandType, CommonHideTypes, CopyPasteType, DataValidationErrorStyle, DataValidationOperator, DataValidationRenderMode, DataValidationStatus, DataValidationType, DeleteDirection, DeveloperMetadataVisibility, Dimension, Direction, HorizontalAlign, InterpolationPointType, LifecycleStages, LocaleType, MentionType, ProtectionType, RelativeDate, SheetTypes, TextDecoration, TextDirection, ThemeColorType, UniverInstanceType, VerticalAlign, WrapStrategy } from '@univerjs/core';\n\n/**\n * @hideconstructor\n */\nexport class FEnum {\n    /**\n     * @ignore\n     */\n    static _instance: FEnum | null;\n\n    static get() {\n        if (this._instance) {\n            return this._instance;\n        }\n\n        const instance = new FEnum();\n        this._instance = instance;\n        return instance;\n    }\n\n    /**\n     * @ignore\n     */\n    static extend(source: any): void {\n        Object.getOwnPropertyNames(source.prototype).forEach((name) => {\n            if (name !== 'constructor') {\n                // @ts-ignore\n                this.prototype[name] = source.prototype[name];\n            }\n        });\n\n        Object.getOwnPropertyNames(source).forEach((name) => {\n            if (name !== 'prototype' && name !== 'name' && name !== 'length') {\n                // @ts-ignore\n                this[name] = source[name];\n            }\n        });\n    }\n\n    constructor() {\n        for (const key in FEnum.prototype) {\n            // @ts-ignore\n            this[key] = FEnum.prototype[key];\n        }\n    }\n\n    /**\n     * Defines different types of absolute references\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.AbsoluteRefType);\n     * ```\n     */\n    get AbsoluteRefType() {\n        return AbsoluteRefType;\n    }\n\n    /**\n     * Defines different types of Univer instances\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.UniverInstanceType.UNIVER_SHEET);\n     * ```\n     */\n    get UniverInstanceType() {\n        return UniverInstanceType;\n    }\n\n    /**\n     * Represents different stages in the lifecycle\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.LifecycleStages.Rendered);\n     * ```\n     */\n    get LifecycleStages() {\n        return LifecycleStages;\n    }\n\n    /**\n     * Different types of data validation\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.DataValidationType.LIST);\n     * ```\n     */\n    get DataValidationType() {\n        return DataValidationType;\n    }\n\n    /**\n     * Different error display styles\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.DataValidationErrorStyle.WARNING);\n     * ```\n     */\n    get DataValidationErrorStyle() {\n        return DataValidationErrorStyle;\n    }\n\n    /**\n     * Different validation rendering modes\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.DataValidationRenderMode.TEXT);\n     * ```\n     */\n    get DataValidationRenderMode() {\n        return DataValidationRenderMode;\n    }\n\n    /**\n     * Different validation operators\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.DataValidationOperator.BETWEEN);\n     * ```\n     */\n    get DataValidationOperator() {\n        return DataValidationOperator;\n    }\n\n    /**\n     * Different validation states\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.DataValidationStatus.VALID);\n     * ```\n     */\n    get DataValidationStatus() {\n        return DataValidationStatus;\n    }\n\n    /**\n     * Different types of commands\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.CommandType.COMMAND);\n     * ```\n     */\n    get CommandType() {\n        return CommandType;\n    }\n\n    /**\n     * Different baseline offsets for text baseline positioning\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.BaselineOffset.SUPERSCRIPT);\n     * ```\n     */\n    get BaselineOffset() {\n        return BaselineOffset;\n    }\n\n    /**\n     * Boolean number representations\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.BooleanNumber.TRUE);\n     * ```\n     */\n    get BooleanNumber() {\n        return BooleanNumber;\n    }\n\n    /**\n     * Different horizontal text alignment options\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.HorizontalAlign.CENTER);\n     * ```\n     */\n    get HorizontalAlign() {\n        return HorizontalAlign;\n    }\n\n    /**\n     * Different text decoration styles\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.TextDecoration.DOUBLE);\n     * ```\n     */\n    get TextDecoration() {\n        return TextDecoration;\n    }\n\n    /**\n     * Different text direction options\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.TextDirection.LEFT_TO_RIGHT);\n     * ```\n     */\n    get TextDirection() {\n        return TextDirection;\n    }\n\n    /**\n     * Different vertical text alignment options\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.VerticalAlign.MIDDLE);\n     * ```\n     */\n    get VerticalAlign() {\n        return VerticalAlign;\n    }\n\n    /**\n     * Different wrap strategy options\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.WrapStrategy.WRAP);\n     * ```\n     */\n    get WrapStrategy() {\n        return WrapStrategy;\n    }\n\n    /**\n     * Different border types\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.BorderType.OUTSIDE);\n     * ```\n     */\n    get BorderType() {\n        return BorderType;\n    }\n\n    /**\n     * Different border style types\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.BorderStyleTypes.NONE);\n     * ```\n     */\n    get BorderStyleTypes() {\n        return BorderStyleTypes;\n    }\n\n    /**\n     * Auto fill series types\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.AutoFillSeries.ALTERNATE_SERIES);\n     * ```\n     */\n    get AutoFillSeries() {\n        return AutoFillSeries;\n    }\n\n    /**\n     * Color types\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.ColorType.RGB);\n     * ```\n     */\n    get ColorType() {\n        return ColorType;\n    }\n\n    /**\n     * Common hide types\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.CommonHideTypes.ON);\n     * ```\n     */\n    get CommonHideTypes() {\n        return CommonHideTypes;\n    }\n\n    /**\n     * Copy paste types\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.CopyPasteType.PASTE_VALUES);\n     * ```\n     */\n    get CopyPasteType() {\n        return CopyPasteType;\n    }\n\n    /**\n     * Delete direction types\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.DeleteDirection.LEFT);\n     * ```\n     */\n    get DeleteDirection() {\n        return DeleteDirection;\n    }\n\n    /**\n     * Developer metadata visibility types\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.DeveloperMetadataVisibility.DOCUMENT);\n     * ```\n     */\n    get DeveloperMetadataVisibility() {\n        return DeveloperMetadataVisibility;\n    }\n\n    /**\n     * Dimension types\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.Dimension.ROWS);\n     * ```\n     */\n    get Dimension() {\n        return Dimension;\n    }\n\n    /**\n     * Direction types\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.Direction.UP);\n     * ```\n     */\n    get Direction() {\n        return Direction;\n    }\n\n    /**\n     * Interpolation point types\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.InterpolationPointType.NUMBER);\n     * ```\n     */\n    get InterpolationPointType() {\n        return InterpolationPointType;\n    }\n\n    /**\n     * Locale types\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.LocaleType.EN_US);\n     * ```\n     */\n    get LocaleType() {\n        return LocaleType;\n    }\n\n    /**\n     * Mention types\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.MentionType.PERSON);\n     * ```\n     */\n    get MentionType() {\n        return MentionType;\n    }\n\n    /**\n     * Protection types\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.ProtectionType.RANGE);\n     * ```\n     */\n    get ProtectionType() {\n        return ProtectionType;\n    }\n\n    /**\n     * Relative date types\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.RelativeDate.TODAY);\n     * ```\n     */\n    get RelativeDate() {\n        return RelativeDate;\n    }\n\n    /**\n     * Sheet types\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.SheetTypes.GRID);\n     * ```\n     */\n    get SheetTypes() {\n        return SheetTypes;\n    }\n\n    /**\n     * Theme color types\n     *\n     * @example\n     * ```ts\n     * console.log(univerAPI.Enum.ThemeColorType.ACCENT1);\n     * ```\n     */\n    get ThemeColorType() {\n        return ThemeColorType;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable ts/explicit-function-return-type */\n\nimport type { CommandType, IDocumentData, LifecycleStages, UniverInstanceType } from '@univerjs/core';\nimport type { FDoc } from './f-doc';\n\n/**\n * Base interface for all event parameters\n * @interface IEventBase\n * @ignore\n */\nexport interface IEventBase {\n    /** Flag to cancel the event if supported */\n    cancel?: boolean;\n}\n\n/**\n * Event interface triggered when a document is created\n * @interface IDocCreatedParam\n * @augments {IEventBase}\n */\nexport interface IDocCreatedParam extends IEventBase {\n    /** Unique identifier of the document unit */\n    unitId: string;\n    /** Type identifier for document instances */\n    type: UniverInstanceType.UNIVER_DOC;\n    /** The created document instance */\n    doc: FDoc;\n    /** Reference to the document unit */\n    unit: FDoc;\n}\n\n/**\n * Event interface triggered when a document is disposed\n * @interface IDocDisposedEvent\n * @augments {IEventBase}\n */\nexport interface IDocDisposedEvent extends IEventBase {\n    /** Unique identifier of the disposed document unit */\n    unitId: string;\n    /** Type identifier for document instances */\n    unitType: UniverInstanceType.UNIVER_DOC;\n    /** Final state snapshot of the disposed document */\n    snapshot: IDocumentData;\n}\n\n/**\n * Event interface for lifecycle stage changes\n * @interface ILifeCycleChangedEvent\n * @augments {IEventBase}\n */\nexport interface ILifeCycleChangedEvent extends IEventBase {\n    /** Current stage of the lifecycle */\n    stage: LifecycleStages;\n}\n\n/**\n * Event interface for command execution\n * @interface ICommandEvent\n * @augments {IEventBase}\n */\nexport interface ICommandEvent extends IEventBase {\n    /** Parameters passed to the command */\n    params: any;\n    /** Unique identifier of the command */\n    id: string;\n    /** Type of the command */\n    type: CommandType;\n}\n\n/**\n * @hideconstructor\n */\nexport class FEventName {\n    /**\n     * @ignore\n     */\n    static _instance: FEventName | null;\n\n    static get() {\n        if (this._instance) {\n            return this._instance;\n        }\n\n        const instance = new FEventName();\n        this._instance = instance;\n        return instance;\n    }\n\n    /**\n     * @ignore\n     */\n    static extend(source: any): void {\n        Object.getOwnPropertyNames(source.prototype).forEach((name) => {\n            if (name !== 'constructor') {\n                // @ts-ignore\n                this.prototype[name] = source.prototype[name];\n            }\n        });\n\n        Object.getOwnPropertyNames(source).forEach((name) => {\n            if (name !== 'prototype' && name !== 'name' && name !== 'length') {\n                // @ts-ignore\n                this[name] = source[name];\n            }\n        });\n    }\n\n    constructor() {\n        for (const key in FEventName.prototype) {\n            // @ts-ignore\n            this[key] = FEventName.prototype[key];\n        }\n    }\n\n    /**\n     * Event fired when a document is created\n     * @see {@link IDocCreatedParam}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.DocCreated, (params) => {\n     *   const { unitId, type, doc, unit } = params;\n     *   console.log('doc created', params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get DocCreated() {\n        return 'DocCreated' as const;\n    }\n\n    /**\n     * Event fired when a document is disposed\n     * @see {@link IDocDisposedEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.DocDisposed, (params) => {\n     *   const { unitId, unitType, snapshot } = params;\n     *   console.log('doc disposed', params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get DocDisposed() {\n        return 'DocDisposed' as const;\n    }\n\n    /**\n     * Event fired when life cycle is changed\n     * @see {@link ILifeCycleChangedEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.LifeCycleChanged, (params) => {\n     *   const { stage } = params;\n     *   console.log('life cycle changed', params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get LifeCycleChanged() {\n        return 'LifeCycleChanged' as const;\n    }\n\n    /**\n     * Event fired when a redo command is executed\n     * @see {@link ICommandEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.Redo, (event) => {\n     *   const { params, id, type } = event;\n     *   console.log('redo command executed', event);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get Redo() {\n        return 'Redo' as const;\n    }\n\n    /**\n     * Event fired when an undo command is executed\n     * @see {@link ICommandEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.Undo, (event) => {\n     *   const { params, id, type } = event;\n     *   console.log('undo command executed', event);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get Undo() {\n        return 'Undo' as const;\n    }\n\n    /**\n     * Event fired before a redo command is executed\n     * @see {@link ICommandEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeRedo, (event) => {\n     *   const { params, id, type } = event;\n     *   console.log('before redo command executed', event);\n     *\n     *   // Cancel the redo operation\n     *   event.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get BeforeRedo() {\n        return 'BeforeRedo' as const;\n    }\n\n    /**\n     * Event fired before an undo command is executed\n     * @see {@link ICommandEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeUndo, (event) => {\n     *   const { params, id, type } = event;\n     *   console.log('before undo command executed', event);\n     *\n     *   // Cancel the undo operation\n     *   event.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get BeforeUndo() {\n        return 'BeforeUndo' as const;\n    }\n\n    /**\n     * Event fired when a command is executed\n     * @see {@link ICommandEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.CommandExecuted, (event) => {\n     *   const { params, id, type } = event;\n     *   console.log('command executed', event);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get CommandExecuted() {\n        return 'CommandExecuted' as const;\n    }\n\n    /**\n     * Event fired before a command is executed\n     * @see {@link ICommandEvent}\n     * @example\n     * ```ts\n     * const disposable = univerAPI.addEvent(univerAPI.Event.BeforeCommandExecute, (event) => {\n     *   const { params, id, type } = event;\n     *   console.log('before command executed', event);\n     *\n     *   // Cancel the command execution\n     *   event.cancel = true;\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    get BeforeCommandExecute() {\n        return 'BeforeCommandExecute' as const;\n    }\n}\n\nexport interface IEventParamConfig {\n    LifeCycleChanged: ILifeCycleChangedEvent;\n    DocDisposed: IDocDisposedEvent;\n    DocCreated: IDocCreatedParam;\n    Redo: ICommandEvent;\n    Undo: ICommandEvent;\n    BeforeRedo: ICommandEvent;\n    BeforeUndo: ICommandEvent;\n    CommandExecuted: ICommandEvent;\n    BeforeCommandExecute: ICommandEvent;\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable } from '@univerjs/core';\nimport type { Subscription } from 'rxjs';\nimport type { IEventParamConfig } from './f-event';\nimport { Registry, toDisposable } from '@univerjs/core';\n\nexport class FEventRegistry {\n    protected _eventRegistry: Map<string, Registry<(param: any) => void>> = new Map();\n    protected _eventHandlerMap = new Map<string, Set<() => IDisposable | Subscription>>();\n    protected _eventHandlerRegisted = new Map<string, Map<() => IDisposable | Subscription, IDisposable>>();\n\n    protected _ensureEventRegistry(event: string): Registry<(param: any) => void> {\n        if (!this._eventRegistry.has(event)) {\n            this._eventRegistry.set(event, new Registry());\n        }\n\n        return this._eventRegistry.get(event)!;\n    }\n\n    registerEventHandler(event: string, handler: () => IDisposable | Subscription): IDisposable {\n        const current = this._eventHandlerMap.get(event);\n        if (current) {\n            current.add(handler);\n        } else {\n            this._eventHandlerMap.set(event, new Set([handler]));\n        }\n\n        if (this._ensureEventRegistry(event).getData().length) {\n            this._initEventHandler(event);\n        }\n\n        return toDisposable(() => {\n            this._eventHandlerMap.get(event)?.delete(handler);\n            this._eventHandlerRegisted.get(event)?.get(handler)?.dispose();\n            this._eventHandlerRegisted.get(event)?.delete(handler);\n        });\n    }\n\n    removeEvent<T extends keyof IEventParamConfig>(event: T, callback: (params: IEventParamConfig[T]) => void): void {\n        const map = this._ensureEventRegistry(event);\n        map.delete(callback);\n\n        if (map.getData().length === 0) {\n            const disposable = this._eventHandlerRegisted.get(event);\n            disposable?.forEach((d) => d.dispose());\n            this._eventHandlerRegisted.delete(event);\n        }\n    }\n\n    private _initEventHandler(event: string): void {\n        let current = this._eventHandlerRegisted.get(event);\n        const handlers = this._eventHandlerMap.get(event);\n        if (!handlers) return;\n\n        if (!current) {\n            current = new Map();\n            this._eventHandlerRegisted.set(event, current);\n            handlers?.forEach((handler) => {\n                current?.set(handler, toDisposable(handler()));\n            });\n        }\n    }\n\n    /**\n     * Add an event listener\n     * @param {string} event key of event\n     * @param {(params: IEventParamConfig[typeof event]) => void} callback callback when event triggered\n     * @returns {Disposable} The Disposable instance, for remove the listener\n     * @example\n     * ```ts\n     * univerAPI.addEvent(univerAPI.Event.LifeCycleChanged, (params) => {\n     *   const { stage } = params;\n     *   console.log('life cycle changed', params);\n     * });\n     * ```\n     */\n    addEvent<T extends keyof IEventParamConfig>(event: T, callback: (params: IEventParamConfig[T]) => void): IDisposable {\n        this._ensureEventRegistry(event).add(callback);\n        this._initEventHandler(event);\n        return toDisposable(() => this.removeEvent(event, callback));\n    }\n\n    /**\n     * Fire an event, used in internal only.\n     * @param {string} event key of event\n     * @param {any} params params of event\n     * @returns {boolean} should cancel\n     * @example\n     * ```ts\n     * this.fireEvent(univerAPI.Event.LifeCycleChanged, params);\n     * ```\n     */\n    fireEvent<T extends keyof IEventParamConfig>(event: T, params: IEventParamConfig[T]): boolean | undefined {\n        this._eventRegistry.get(event)?.getData().forEach((callback) => {\n            callback(params);\n        });\n\n        return params.cancel;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, IUndoRedoItem } from '@univerjs/core';\nimport { ICommandService, Inject, Injector, IUndoRedoService, LifecycleService, LifecycleStages, RedoCommand, toDisposable, UndoCommand } from '@univerjs/core';\nimport { filter } from 'rxjs';\nimport { FBase } from './f-base';\n\n/**\n * @hideconstructor\n */\nexport class FHooks extends FBase {\n    constructor(\n        @Inject(Injector) protected readonly _injector: Injector,\n        @Inject(LifecycleService) private readonly _lifecycleService: LifecycleService\n    ) {\n        super();\n    }\n\n    /**\n     * @param callback\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.LifeCycleChanged, ({ stage }) => {})` as instead\n     */\n    onStarting(callback: () => void): IDisposable {\n        return toDisposable(this._lifecycleService.lifecycle$.pipe(filter((lifecycle) => lifecycle === LifecycleStages.Starting)).subscribe(callback));\n    }\n\n    /**\n     * @param callback\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.LifeCycleChanged, ({ stage }) => {})` as instead\n     */\n    onReady(callback: () => void): IDisposable {\n        return toDisposable(this._lifecycleService.lifecycle$.pipe(filter((lifecycle) => lifecycle === LifecycleStages.Ready)).subscribe(callback));\n    }\n\n    /**\n     * @param callback\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.LifeCycleChanged, ({ stage }) => {})` as instead\n     */\n    onRendered(callback: () => void): IDisposable {\n        return toDisposable(this._lifecycleService.lifecycle$.pipe(filter((lifecycle) => lifecycle === LifecycleStages.Rendered)).subscribe(callback));\n    }\n\n    /**\n     * @param callback\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.LifeCycleChanged, ({ stage }) => {})` as instead\n     */\n    onSteady(callback: () => void): IDisposable {\n        return toDisposable(this._lifecycleService.lifecycle$.pipe(filter((lifecycle) => lifecycle === LifecycleStages.Steady)).subscribe(callback));\n    }\n\n    /**\n     * @param callback\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.BeforeUndo, (event) => {})` as instead\n     */\n    onBeforeUndo(callback: (action: IUndoRedoItem) => void): IDisposable {\n        const commandService = this._injector.get(ICommandService);\n\n        return commandService.beforeCommandExecuted((command) => {\n            if (command.id === UndoCommand.id) {\n                const undoredoService = this._injector.get(IUndoRedoService);\n                const action = undoredoService.pitchTopUndoElement();\n                if (action) {\n                    callback(action);\n                }\n            }\n        });\n    }\n\n    /**\n     * @param callback\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.Undo, (event) => {})` as instead\n     */\n    onUndo(callback: (action: IUndoRedoItem) => void): IDisposable {\n        const commandService = this._injector.get(ICommandService);\n\n        return commandService.onCommandExecuted((command) => {\n            if (command.id === UndoCommand.id) {\n                const undoredoService = this._injector.get(IUndoRedoService);\n                const action = undoredoService.pitchTopUndoElement();\n                if (action) {\n                    callback(action);\n                }\n            }\n        });\n    }\n\n    /**\n     * @param callback\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.BeforeRedo, (event) => {})` as instead\n     */\n    onBeforeRedo(callback: (action: IUndoRedoItem) => void): IDisposable {\n        const commandService = this._injector.get(ICommandService);\n\n        return commandService.beforeCommandExecuted((command) => {\n            if (command.id === RedoCommand.id) {\n                const undoredoService = this._injector.get(IUndoRedoService);\n                const action = undoredoService.pitchTopRedoElement();\n                if (action) {\n                    callback(action);\n                }\n            }\n        });\n    }\n\n    /**\n     * @param callback\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.Redo, (event) => {})` as instead\n     */\n    onRedo(callback: (action: IUndoRedoItem) => void): IDisposable {\n        const commandService = this._injector.get(ICommandService);\n\n        return commandService.onCommandExecuted((command) => {\n            if (command.id === RedoCommand.id) {\n                const undoredoService = this._injector.get(IUndoRedoService);\n                const action = undoredoService.pitchTopRedoElement();\n                if (action) {\n                    callback(action);\n                }\n            }\n        });\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IUser } from '@univerjs/core';\nimport { Inject, Injector, UserManagerService } from '@univerjs/core';\nimport { FBase } from './f-base';\n\n/**\n * @hideconstructor\n */\nexport class FUserManager extends FBase {\n    constructor(\n        @Inject(Injector) protected readonly _injector: Injector,\n        @Inject(UserManagerService) private readonly _userManagerService: UserManagerService\n    ) {\n        super();\n    }\n\n    /**\n     * Get current user info.\n     * @returns {IUser} Current user info.\n     * @example\n     * ```typescript\n     * univerAPI.getUserManager().getCurrentUser();\n     * ```\n     */\n    getCurrentUser(): IUser {\n        return this._userManagerService.getCurrentUser();\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { INumfmt } from '@univerjs/core';\nimport { numfmt, Rectangle, Tools } from '@univerjs/core';\n\n/**\n * @ignore\n */\nexport class FUtil {\n    /**\n     * @ignore\n     */\n    static _instance: FUtil | null;\n\n    static get(): FUtil {\n        if (this._instance) {\n            return this._instance;\n        }\n\n        const instance = new FUtil();\n        this._instance = instance;\n        return instance;\n    }\n\n    /**\n     * @ignore\n     */\n    static extend(source: any): void {\n        Object.getOwnPropertyNames(source.prototype).forEach((name) => {\n            if (name !== 'constructor') {\n                // @ts-ignore\n                this.prototype[name] = source.prototype[name];\n            }\n        });\n\n        Object.getOwnPropertyNames(source).forEach((name) => {\n            if (name !== 'prototype' && name !== 'name' && name !== 'length') {\n                // @ts-ignore\n                this[name] = source[name];\n            }\n        });\n    }\n\n    /**\n     * Rectangle utils, including range operations likes merge, subtract, split\n     *\n     * @example\n     * ```ts\n     * const ranges = [\n     *   { startRow: 0, startColumn: 0, endRow: 1, endColumn: 1 },\n     *   { startRow: 1, startColumn: 1, endRow: 2, endColumn: 2 }\n     * ];\n     * const merged = univerAPI.Util.rectangle.mergeRanges(ranges);\n     * console.log(merged);\n     * ```\n     */\n    get rectangle(): typeof Rectangle {\n        return Rectangle;\n    }\n\n    /**\n     * Number format utils, including parse and strigify about date, price, etc\n     *\n     * @example\n     * ```ts\n     * const text = univerAPI.Util.numfmt.format('#,##0.00', 1234.567);\n     * console.log(text);\n     * ```\n     */\n    get numfmt(): INumfmt {\n        return numfmt;\n    }\n\n    /**\n     * common tools\n     *\n     * @example\n     * ```ts\n     * const key = univerAPI.Util.tools.generateRandomId(6);\n     * console.log(key);\n     * ```\n     */\n    get tools(): typeof Tools {\n        return Tools;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CommandListener, DocumentDataModel, IDisposable, IDocumentData, IExecutionOptions, IParagraphStyle, ITextDecoration, ITextStyle, LifecycleStages } from '@univerjs/core';\nimport type { Subscription } from 'rxjs';\nimport type { ICommandEvent, IEventParamConfig } from './f-event';\nimport { CanceledError, ColorBuilder, Disposable, ICommandService, Inject, Injector, IUniverInstanceService, LifecycleService, ParagraphStyleBuilder, ParagraphStyleValue, RedoCommand, RichTextBuilder, RichTextValue, TextDecorationBuilder, TextStyleBuilder, TextStyleValue, toDisposable, UndoCommand, Univer, UniverInstanceType } from '@univerjs/core';\nimport { FBlob } from './f-blob';\nimport { FDoc } from './f-doc';\nimport { FEnum } from './f-enum';\nimport { FEventName } from './f-event';\nimport { FEventRegistry } from './f-event-registry';\nimport { FHooks } from './f-hooks';\nimport { FUserManager } from './f-usermanager';\nimport { FUtil } from './f-util';\n\n/**\n * @ignore\n */\nconst InitializerSymbol = Symbol('initializers');\n\n/**\n * @ignore\n */\ntype Initializers = Array<(injector: Injector) => void>;\n\n/**\n * The root Facade API object to interact with Univer. Please use `newAPI` static method\n * to create a new instance.\n *\n * @hideconstructor\n */\nexport class FUniver extends Disposable {\n    /**\n     * Create an FUniver instance, if the injector is not provided, it will create a new Univer instance.\n     * @static\n     * @param {Univer | Injector} wrapped - The Univer instance or injector instance.\n     * @returns {FUniver} - The FUniver instance.\n     *\n     * @example\n     * ```ts\n     * const univerAPI = FUniver.newAPI(univer);\n     * ```\n     */\n    static newAPI(wrapped: Univer | Injector): FUniver {\n        const injector = wrapped instanceof Univer ? wrapped.__getInjector() : wrapped;\n        return injector.createInstance(FUniver);\n    }\n\n    declare private [InitializerSymbol]: Initializers | undefined;\n\n    /**\n     * @ignore\n     */\n    _initialize(injector: Injector): void { }\n\n    /**\n     * @ignore\n     */\n    static extend(source: any): void {\n        Object.getOwnPropertyNames(source.prototype).forEach((name) => {\n            if (name === '_initialize') {\n                let initializers = this.prototype[InitializerSymbol];\n                if (!initializers) {\n                    initializers = [];\n                    this.prototype[InitializerSymbol] = initializers;\n                }\n\n                initializers.push(source.prototype._initialize);\n            } else if (name !== 'constructor') {\n                // @ts-ignore\n                this.prototype[name] = source.prototype[name];\n            }\n        });\n\n        Object.getOwnPropertyNames(source).forEach((name) => {\n            if (name !== 'prototype' && name !== 'name' && name !== 'length') {\n                // @ts-ignore\n                this[name] = source[name];\n            }\n        });\n    }\n\n    protected _eventRegistry = new FEventRegistry();\n\n    protected registerEventHandler = (event: string, handler: () => IDisposable | Subscription): IDisposable => {\n        return this._eventRegistry.registerEventHandler(event, handler);\n    };\n\n    constructor(\n        @Inject(Injector) protected readonly _injector: Injector,\n        @ICommandService protected readonly _commandService: ICommandService,\n        @IUniverInstanceService protected readonly _univerInstanceService: IUniverInstanceService,\n        @Inject(LifecycleService) protected readonly _lifecycleService: LifecycleService\n    ) {\n        super();\n\n        this.registerEventHandler(\n            this.Event.LifeCycleChanged,\n            () =>\n                toDisposable(\n                    this._lifecycleService.lifecycle$.subscribe((stage) => {\n                        this.fireEvent(this.Event.LifeCycleChanged, { stage });\n                    })\n                )\n        );\n\n        this._initUnitEvent(this._injector);\n        this._initBeforeCommandEvent(this._injector);\n        this._initCommandEvent(this._injector);\n        this._injector.onDispose(() => {\n            this.dispose();\n        });\n\n        const initializers = Object.getPrototypeOf(this)[InitializerSymbol];\n        if (initializers) {\n            const self = this;\n            initializers.forEach(function (fn: (_injector: Injector) => void) {\n                fn.apply(self, [_injector]);\n            });\n        }\n    }\n\n    private _initCommandEvent(injector: Injector): void {\n        const commandService = injector.get(ICommandService);\n        this.registerEventHandler(\n            this.Event.Redo,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                const { id, type: propType, params } = commandInfo;\n                if (commandInfo.id === RedoCommand.id) {\n                    const type = propType!;\n                    const eventParams: ICommandEvent = { id, type, params };\n                    this.fireEvent(this.Event.Redo, eventParams);\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.Undo,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                const { id, type: propType, params } = commandInfo;\n                if (commandInfo.id === UndoCommand.id) {\n                    const type = propType!;\n                    const eventParams: ICommandEvent = { id, type, params };\n                    this.fireEvent(this.Event.Undo, eventParams);\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.CommandExecuted,\n            () => commandService.onCommandExecuted((commandInfo) => {\n                const { id, type: propType, params } = commandInfo;\n                if (commandInfo.id !== RedoCommand.id && commandInfo.id !== UndoCommand.id) {\n                    const type = propType!;\n                    const eventParams: ICommandEvent = { id, type, params };\n                    this.fireEvent(this.Event.CommandExecuted, eventParams);\n                }\n            })\n        );\n    }\n\n    private _initBeforeCommandEvent(injector: Injector): void {\n        const commandService = injector.get(ICommandService);\n\n        this.registerEventHandler(\n            this.Event.BeforeRedo,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                const { id, type: propType, params } = commandInfo;\n                if (commandInfo.id === RedoCommand.id) {\n                    const type = propType!;\n                    const eventParams: ICommandEvent = { id, type, params };\n                    this.fireEvent(this.Event.BeforeRedo, eventParams);\n\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeUndo,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                const { id, type: propType, params } = commandInfo;\n                if (commandInfo.id === UndoCommand.id) {\n                    const type = propType!;\n                    const eventParams: ICommandEvent = { id, type, params };\n                    this.fireEvent(this.Event.BeforeUndo, eventParams);\n\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.BeforeCommandExecute,\n            () => commandService.beforeCommandExecuted((commandInfo) => {\n                const { id, type: propType, params } = commandInfo;\n                if (commandInfo.id !== RedoCommand.id && commandInfo.id !== UndoCommand.id) {\n                    const type = propType!;\n                    const eventParams: ICommandEvent = { id, type, params };\n                    this.fireEvent(this.Event.BeforeCommandExecute, eventParams);\n\n                    if (eventParams.cancel) {\n                        throw new CanceledError();\n                    }\n                }\n            })\n        );\n    }\n\n    private _initUnitEvent(injector: Injector): void {\n        const univerInstanceService = injector.get(IUniverInstanceService);\n\n        this.registerEventHandler(\n            this.Event.DocDisposed,\n            () => univerInstanceService.unitDisposed$.subscribe((unit) => {\n                if (unit.type === UniverInstanceType.UNIVER_DOC) {\n                    this.fireEvent(this.Event.DocDisposed, {\n                        unitId: unit.getUnitId(),\n                        unitType: unit.type,\n                        snapshot: unit.getSnapshot() as IDocumentData,\n                    });\n                }\n            })\n        );\n\n        this.registerEventHandler(\n            this.Event.DocCreated,\n            () => univerInstanceService.unitAdded$.subscribe((unit) => {\n                if (unit.type === UniverInstanceType.UNIVER_DOC) {\n                    const doc = unit as DocumentDataModel;\n                    const docUnit = injector.createInstance(FDoc, doc);\n                    this.fireEvent(this.Event.DocCreated, {\n                        unitId: unit.getUnitId(),\n                        type: unit.type,\n                        doc: docUnit,\n                        unit: docUnit,\n                    });\n                }\n            })\n        );\n    }\n\n    /**\n     * Dispose the UniverSheet by the `unitId`. The UniverSheet would be unload from the application.\n     * @param unitId The unit id of the UniverSheet.\n     * @returns Whether the Univer instance is disposed successfully.\n     *\n     * @example\n     * ```ts\n     * const fWorkbook = univerAPI.getActiveWorkbook();\n     * const unitId = fWorkbook?.getId();\n     *\n     * if (unitId) {\n     *   univerAPI.disposeUnit(unitId);\n     * }\n     * ```\n     */\n    disposeUnit(unitId: string): boolean {\n        return this._univerInstanceService.disposeUnit(unitId);\n    }\n\n    /**\n     * Get the current lifecycle stage.\n     * @returns {LifecycleStages} - The current lifecycle stage.\n     *\n     * @example\n     * ```ts\n     * const stage = univerAPI.getCurrentLifecycleStage();\n     * console.log(stage);\n     * ```\n     */\n    getCurrentLifecycleStage(): LifecycleStages {\n        const lifecycleService = this._injector.get(LifecycleService);\n        return lifecycleService.stage;\n    }\n\n    /**\n     * Undo an editing on the currently focused document.\n     * @returns {Promise<boolean>} undo result\n     *\n     * @example\n     * ```ts\n     * await univerAPI.undo();\n     * ```\n     */\n    undo(): Promise<boolean> {\n        return this._commandService.executeCommand(UndoCommand.id);\n    }\n\n    /**\n     * Redo an editing on the currently focused document.\n     * @returns {Promise<boolean>} redo result\n     *\n     * @example\n     * ```ts\n     * await univerAPI.redo();\n     * ```\n     */\n    redo(): Promise<boolean> {\n        return this._commandService.executeCommand(RedoCommand.id);\n    }\n\n    /**\n     * Register a callback that will be triggered before invoking a command.\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.BeforeCommandExecute, (event) => {})` instead.\n     * @param {CommandListener} callback The callback.\n     * @returns {IDisposable} The disposable instance.\n     */\n    onBeforeCommandExecute(callback: CommandListener): IDisposable {\n        return this._commandService.beforeCommandExecuted((command, options?: IExecutionOptions) => {\n            callback(command, options);\n        });\n    }\n\n    /**\n     * Register a callback that will be triggered when a command is invoked.\n     * @deprecated use `univerAPI.addEvent(univerAPI.Event.CommandExecuted, (event) => {})` instead.\n     * @param {CommandListener} callback The callback.\n     * @returns {IDisposable} The disposable instance.\n     */\n    onCommandExecuted(callback: CommandListener): IDisposable {\n        return this._commandService.onCommandExecuted((command, options?: IExecutionOptions) => {\n            callback(command, options);\n        });\n    }\n\n    /**\n     * Execute a command with the given id and parameters.\n     * @param id Identifier of the command.\n     * @param params Parameters of this execution.\n     * @param options Options of this execution.\n     * @returns The result of the execution. It is a boolean value by default which indicates the command is executed.\n     *\n     * @example\n     * ```ts\n     * univerAPI.executeCommand('sheet.command.set-range-values', {\n     *   value: { v: \"Hello, Univer!\" },\n     *   range: { startRow: 0, startColumn: 0, endRow: 0, endColumn: 0 }\n     * });\n     * ```\n     */\n    executeCommand<P extends object = object, R = boolean>(\n        id: string,\n        params?: P,\n        options?: IExecutionOptions\n    ): Promise<R> {\n        return this._commandService.executeCommand(id, params, options);\n    }\n\n    /**\n     * Execute a command with the given id and parameters synchronously.\n     * @param id Identifier of the command.\n     * @param params Parameters of this execution.\n     * @param options Options of this execution.\n     * @returns The result of the execution. It is a boolean value by default which indicates the command is executed.\n     *\n     * @example\n     * ```ts\n     * univerAPI.syncExecuteCommand('sheet.command.set-range-values', {\n     *   value: { v: \"Hello, Univer!\" },\n     *   range: { startRow: 0, startColumn: 0, endRow: 0, endColumn: 0 }\n     * });\n     * ```\n     */\n    syncExecuteCommand<P extends object = object, R = boolean>(\n        id: string,\n        params?: P,\n        options?: IExecutionOptions\n    ): R {\n        return this._commandService.syncExecuteCommand(id, params, options);\n    }\n\n    /**\n     * Get hooks.\n     * @deprecated use `addEvent` instead.\n     * @returns {FHooks} FHooks instance\n     */\n    getHooks(): FHooks {\n        return this._injector.createInstance(FHooks);\n    }\n\n    get Enum(): FEnum {\n        return FEnum.get();\n    }\n\n    get Event(): FEventName {\n        return FEventName.get();\n    }\n\n    get Util(): FUtil {\n        return FUtil.get();\n    }\n\n    /**\n     * Add an event listener\n     * @param {string} event key of event\n     * @param {(params: IEventParamConfig[typeof event]) => void} callback callback when event triggered\n     * @returns {Disposable} The Disposable instance, for remove the listener\n     * @example\n     * ```ts\n     * // Add life cycle changed event listener\n     * const disposable = univerAPI.addEvent(univerAPI.Event.LifeCycleChanged, (params) => {\n     *   const { stage } = params;\n     *   console.log('life cycle changed', params);\n     * });\n     *\n     * // Remove the event listener, use `disposable.dispose()`\n     * ```\n     */\n    addEvent<T extends keyof IEventParamConfig>(event: T, callback: (params: IEventParamConfig[T]) => void): IDisposable {\n        if (!event || !callback) throw new Error('Cannot add empty event');\n        return this._eventRegistry.addEvent(event, callback);\n    }\n\n    /**\n     * Fire an event, used in internal only.\n     * @param {string} event key of event\n     * @param {any} params params of event\n     * @returns {boolean} should cancel\n     * @example\n     * ```ts\n     * this.fireEvent(univerAPI.Event.LifeCycleChanged, params);\n     * ```\n     */\n    protected fireEvent<T extends keyof IEventParamConfig>(event: T, params: IEventParamConfig[T]): boolean | undefined {\n        return this._eventRegistry.fireEvent(event, params);\n    }\n\n    getUserManager(): FUserManager {\n        return this._injector.createInstance(FUserManager);\n    }\n\n    /**\n     * Create a new blob.\n     * @returns {FBlob} The new blob instance\n     * @example\n     * ```ts\n     * const blob = univerAPI.newBlob();\n     * ```\n     */\n    newBlob(): FBlob {\n        return this._injector.createInstance(FBlob);\n    }\n\n    /**\n     * Create a new color.\n     * @returns {ColorBuilder} The new color instance\n     * @example\n     * ```ts\n     * const color = univerAPI.newColor();\n     * ```\n     */\n    newColor(): ColorBuilder {\n        return new ColorBuilder();\n    }\n\n    /**\n     * Create a new rich text.\n     * @param {IDocumentData} data\n     * @returns {RichTextBuilder} The new rich text instance\n     * @example\n     * ```ts\n     * const richText = univerAPI.newRichText({ body: { dataStream: 'Hello World\\r\\n' } });\n     * const range = univerAPI.getActiveWorkbook().getActiveSheet().getRange('A1');\n     * range.setRichTextValueForCell(richText);\n     * ```\n     */\n    newRichText(data?: IDocumentData): RichTextBuilder {\n        return RichTextBuilder.create(data);\n    }\n\n    /**\n     * Create a new rich text value.\n     * @param {IDocumentData} data - The rich text data\n     * @returns {RichTextValue} The new rich text value instance\n     * @example\n     * ```ts\n     * const richTextValue = univerAPI.newRichTextValue({ body: { dataStream: 'Hello World\\r\\n' } });\n     * const range = univerAPI.getActiveWorkbook().getActiveSheet().getRange('A1');\n     * range.setRichTextValueForCell(richTextValue);\n     * ```\n     */\n    newRichTextValue(data: IDocumentData): RichTextValue {\n        return RichTextValue.create(data);\n    }\n\n    /**\n     * Create a new paragraph style.\n     * @param {IParagraphStyle} style - The paragraph style\n     * @returns {ParagraphStyleBuilder} The new paragraph style instance\n     * @example\n     * ```ts\n     * const richText = univerAPI.newRichText({ body: { dataStream: 'Hello World\\r\\n' } });\n     * const paragraphStyle = univerAPI.newParagraphStyle({ textStyle: { ff: 'Arial', fs: 12, it: univerAPI.Enum.BooleanNumber.TRUE, bl: univerAPI.Enum.BooleanNumber.TRUE } });\n     * richText.insertParagraph(paragraphStyle);\n     * const range = univerAPI.getActiveWorkbook().getActiveSheet().getRange('A1');\n     * range.setRichTextValueForCell(richText);\n     * ```\n     */\n    newParagraphStyle(style?: IParagraphStyle): ParagraphStyleBuilder {\n        return ParagraphStyleBuilder.create(style);\n    }\n\n    /**\n     * Create a new paragraph style value.\n     * @param {IParagraphStyle} style - The paragraph style\n     * @returns {ParagraphStyleValue} The new paragraph style value instance\n     * @example\n     * ```ts\n     * const paragraphStyleValue = univerAPI.newParagraphStyleValue();\n     * ```\n     */\n    newParagraphStyleValue(style?: IParagraphStyle): ParagraphStyleValue {\n        return ParagraphStyleValue.create(style);\n    }\n\n    /**\n     * Create a new text style.\n     * @param {ITextStyle} style - The text style\n     * @returns {TextStyleBuilder} The new text style instance\n     * @example\n     * ```ts\n     * const textStyle = univerAPI.newTextStyle();\n     * ```\n     */\n    newTextStyle(style?: ITextStyle): TextStyleBuilder {\n        return TextStyleBuilder.create(style);\n    }\n\n    /**\n     * Create a new text style value.\n     * @param {ITextStyle} style - The text style\n     * @returns {TextStyleValue} The new text style value instance\n     * @example\n     * ```ts\n     * const textStyleValue = univerAPI.newTextStyleValue();\n     * ```\n     */\n    newTextStyleValue(style?: ITextStyle): TextStyleValue {\n        return TextStyleValue.create(style);\n    }\n\n    /**\n     * Create a new text decoration.\n     * @param {ITextDecoration} decoration - The text decoration\n     * @returns {TextDecorationBuilder} The new text decoration instance\n     * @example\n     * ```ts\n     * const decoration = univerAPI.newTextDecoration();\n     * ```\n     */\n    newTextDecoration(decoration?: ITextDecoration): TextDecorationBuilder {\n        return new TextDecorationBuilder(decoration);\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBO,IAAe,QAAf,cAA6B,WAAW;AAAA;AAAA;AAAA;AAAA,EAI3C,OAAO,OAAO,QAAmB;AAC7B,WAAO,oBAAoB,OAAO,SAAS,EAAE,QAAQ,CAAC,SAAS;AAC3D,UAAI,SAAS,eAAe;AAExB,aAAK,UAAU,IAAI,IAAI,OAAO,UAAU,IAAI;AAAA,MAChD;AAAA,IACJ,CAAC;AAED,WAAO,oBAAoB,MAAM,EAAE,QAAQ,CAAC,SAAS;AACjD,UAAI,SAAS,eAAe,SAAS,UAAU,SAAS,UAAU;AAE9D,aAAK,IAAI,IAAI,OAAO,IAAI;AAAA,MAC5B;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;AAKA,IAAM,oBAAoB,OAAO,cAAc;AAWxC,IAAM,mBAAN,cAA+B,WAAW;AAAA,EAG7C,YACc,WACZ;AACE,UAAM;AAFI;AAKV,UAAM,OAAO;AAEb,UAAM,eAAe,OAAO,eAAe,IAAI,EAAE,iBAAiB;AAClE,QAAI,cAAc;AACd,mBAAa,QAAQ,SAAU,IAAmC;AAC9D,WAAG,MAAM,MAAM,CAAC,SAAS,CAAC;AAAA,MAC9B,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY,UAA0B;AAAA,EAAE;AAAA;AAAA;AAAA;AAAA,EAKxC,OAAO,OAAO,QAAmB;AAC7B,WAAO,oBAAoB,OAAO,SAAS,EAAE,QAAQ,CAAC,SAAS;AAC3D,UAAI,SAAS,eAAe;AACxB,YAAI,eAAe,KAAK,UAAU,iBAAiB;AACnD,YAAI,CAAC,cAAc;AACf,yBAAe,CAAC;AAChB,eAAK,UAAU,iBAAiB,IAAI;AAAA,QACxC;AAEA,qBAAa,KAAK,OAAO,UAAU,WAAW;AAAA,MAClD,WAAW,SAAS,eAAe;AAE/B,aAAK,UAAU,IAAI,IAAI,OAAO,UAAU,IAAI;AAAA,MAChD;AAAA,IACJ,CAAC;AAED,WAAO,oBAAoB,MAAM,EAAE,QAAQ,CAAC,SAAS;AACjD,UAAI,SAAS,eAAe,SAAS,UAAU,SAAS,UAAU;AAE9D,aAAK,IAAI,IAAI,OAAO,IAAI;AAAA,MAC5B;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;;;AC1EO,IAAM,QAAN,cAAoB,MAAM;AAAA,EAC7B,YACY,OAC6B,WACvC;AACE,UAAM;AAHE;AAC6B;AAAA,EAGzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,WAAkB;AACd,WAAO,KAAK,UAAU,eAAe,OAAO,KAAK,KAAK;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,aAA4B;AAC9B,UAAM,UAAU,KAAK,SAAS;AAC9B,YAAQ,eAAe,WAAW;AAClC,WAAO;AAAA,EACX;AAAA,EAyBA,gBAAgB,SAAmC;AAC/C,QAAI,KAAK,UAAU,MAAM;AACrB,aAAO,QAAQ,QAAQ,EAAE;AAAA,IAC7B;AAEA,QAAI,YAAY,QAAW;AACvB,aAAO,KAAK,MAAO,KAAK;AAAA,IAC5B;AACA,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,WAAK,MAAO,YAAY,EAAE,KAAK,CAAC,gBAAgB;AAC5C,cAAM,OAAO,IAAI,YAAY,OAAO,EAAE,OAAO,WAAW;AACxD,gBAAQ,IAAI;AAAA,MAChB,CAAC,EAAE,MAAM,CAAC,UAAU;AAChB,eAAO,IAAI,MAAM,uCAAuC,MAAM,OAAO,EAAE,CAAC;AAAA,MAC5E,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,WAAgC;AAC5B,QAAI,CAAC,KAAK,OAAO;AACb,aAAO,QAAQ,OAAO,IAAI,MAAM,4BAA4B,CAAC;AAAA,IACjE;AACA,WAAO,KAAK,MAAM,YAAY,EAAE,KAAK,CAAC,WAAW,IAAI,WAAW,MAAM,CAAC;AAAA,EAC3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,SAAS,OAA0B;AAC/B,SAAK,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC;AAC7B,WAAO;AAAA,EACX;AAAA,EAyBA,kBAAkB,MAAc,aAA6B;AACzD,UAAM,iBAAiB,oCAAe;AACtC,UAAM,OAAO,IAAI,KAAK,CAAC,IAAI,GAAG,EAAE,MAAM,eAAe,CAAC;AACtD,SAAK,QAAQ;AACb,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,iBAAqC;AA7LzC;AA8LQ,YAAO,UAAK,UAAL,mBAAY;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,eAAe,aAA4B;AA3M/C;AA4MQ,SAAK,SAAQ,UAAK,UAAL,mBAAY,MAAM,GAAG,KAAK,MAAM,MAAM;AACnD,WAAO;AAAA,EACX;AACJ;AA3Ka,QAAN;AAAA,EAGE,0BAAO,QAAQ;AAAA,GAHX;;;ACZN,IAAM,OAAN,cAAmB,iBAAiB;AAAA,EACvC,YACc,KACQ,WACpB;AACE,UAAM,SAAS;AAHL;AAAA,EAId;AACJ;AAPa,OAAN;AAAA,EAGE,0BAAO,QAAQ;AAAA,GAHX;;;ACDN,IAAM,SAAN,MAAM,OAAM;AAAA,EAMf,OAAO,MAAM;AACT,QAAI,KAAK,WAAW;AAChB,aAAO,KAAK;AAAA,IAChB;AAEA,UAAM,WAAW,IAAI,OAAM;AAC3B,SAAK,YAAY;AACjB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,OAAO,QAAmB;AAC7B,WAAO,oBAAoB,OAAO,SAAS,EAAE,QAAQ,CAAC,SAAS;AAC3D,UAAI,SAAS,eAAe;AAExB,aAAK,UAAU,IAAI,IAAI,OAAO,UAAU,IAAI;AAAA,MAChD;AAAA,IACJ,CAAC;AAED,WAAO,oBAAoB,MAAM,EAAE,QAAQ,CAAC,SAAS;AACjD,UAAI,SAAS,eAAe,SAAS,UAAU,SAAS,UAAU;AAE9D,aAAK,IAAI,IAAI,OAAO,IAAI;AAAA,MAC5B;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,cAAc;AACV,eAAW,OAAO,OAAM,WAAW;AAE/B,WAAK,GAAG,IAAI,OAAM,UAAU,GAAG;AAAA,IACnC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,kBAAkB;AAClB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,qBAAqB;AACrB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,kBAAkB;AAClB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,qBAAqB;AACrB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,2BAA2B;AAC3B,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,2BAA2B;AAC3B,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,yBAAyB;AACzB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,uBAAuB;AACvB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,cAAc;AACd,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,iBAAiB;AACjB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,gBAAgB;AAChB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,kBAAkB;AAClB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,iBAAiB;AACjB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,gBAAgB;AAChB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,gBAAgB;AAChB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,eAAe;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,aAAa;AACb,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,mBAAmB;AACnB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,iBAAiB;AACjB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,YAAY;AACZ,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,kBAAkB;AAClB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,gBAAgB;AAChB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,kBAAkB;AAClB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,8BAA8B;AAC9B,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,YAAY;AACZ,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,YAAY;AACZ,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,yBAAyB;AACzB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,aAAa;AACb,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,cAAc;AACd,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,iBAAiB;AACjB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,eAAe;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,aAAa;AACb,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,iBAAiB;AACjB,WAAO;AAAA,EACX;AACJ;AAAA;AAAA;AAAA;AAjbI,cAJS,QAIF;AAJJ,IAAM,QAAN;;;ACiEA,IAAM,cAAN,MAAM,YAAW;AAAA,EAMpB,OAAO,MAAM;AACT,QAAI,KAAK,WAAW;AAChB,aAAO,KAAK;AAAA,IAChB;AAEA,UAAM,WAAW,IAAI,YAAW;AAChC,SAAK,YAAY;AACjB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,OAAO,QAAmB;AAC7B,WAAO,oBAAoB,OAAO,SAAS,EAAE,QAAQ,CAAC,SAAS;AAC3D,UAAI,SAAS,eAAe;AAExB,aAAK,UAAU,IAAI,IAAI,OAAO,UAAU,IAAI;AAAA,MAChD;AAAA,IACJ,CAAC;AAED,WAAO,oBAAoB,MAAM,EAAE,QAAQ,CAAC,SAAS;AACjD,UAAI,SAAS,eAAe,SAAS,UAAU,SAAS,UAAU;AAE9D,aAAK,IAAI,IAAI,OAAO,IAAI;AAAA,MAC5B;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,cAAc;AACV,eAAW,OAAO,YAAW,WAAW;AAEpC,WAAK,GAAG,IAAI,YAAW,UAAU,GAAG;AAAA,IACxC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,IAAI,aAAa;AACb,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,IAAI,cAAc;AACd,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,IAAI,mBAAmB;AACnB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,IAAI,OAAO;AACP,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,IAAI,OAAO;AACP,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,IAAI,aAAa;AACb,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,IAAI,aAAa;AACb,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,IAAI,kBAAkB;AAClB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,IAAI,uBAAuB;AACvB,WAAO;AAAA,EACX;AACJ;AAAA;AAAA;AAAA;AAvMI,cAJS,aAIF;AAJJ,IAAM,aAAN;;;ACnEA,IAAM,iBAAN,MAAqB;AAAA,EAArB;AACH,wBAAU,kBAA8D,oBAAI,IAAI;AAChF,wBAAU,oBAAmB,oBAAI,IAAmD;AACpF,wBAAU,yBAAwB,oBAAI,IAAgE;AAAA;AAAA,EAE5F,qBAAqB,OAA+C;AAC1E,QAAI,CAAC,KAAK,eAAe,IAAI,KAAK,GAAG;AACjC,WAAK,eAAe,IAAI,OAAO,IAAI,SAAS,CAAC;AAAA,IACjD;AAEA,WAAO,KAAK,eAAe,IAAI,KAAK;AAAA,EACxC;AAAA,EAEA,qBAAqB,OAAe,SAAwD;AACxF,UAAM,UAAU,KAAK,iBAAiB,IAAI,KAAK;AAC/C,QAAI,SAAS;AACT,cAAQ,IAAI,OAAO;AAAA,IACvB,OAAO;AACH,WAAK,iBAAiB,IAAI,OAAO,oBAAI,IAAI,CAAC,OAAO,CAAC,CAAC;AAAA,IACvD;AAEA,QAAI,KAAK,qBAAqB,KAAK,EAAE,QAAQ,EAAE,QAAQ;AACnD,WAAK,kBAAkB,KAAK;AAAA,IAChC;AAEA,WAAO,aAAa,MAAM;AA9ClC;AA+CY,iBAAK,iBAAiB,IAAI,KAAK,MAA/B,mBAAkC,OAAO;AACzC,uBAAK,sBAAsB,IAAI,KAAK,MAApC,mBAAuC,IAAI,aAA3C,mBAAqD;AACrD,iBAAK,sBAAsB,IAAI,KAAK,MAApC,mBAAuC,OAAO;AAAA,IAClD,CAAC;AAAA,EACL;AAAA,EAEA,YAA+C,OAAU,UAAwD;AAC7G,UAAM,MAAM,KAAK,qBAAqB,KAAK;AAC3C,QAAI,OAAO,QAAQ;AAEnB,QAAI,IAAI,QAAQ,EAAE,WAAW,GAAG;AAC5B,YAAM,aAAa,KAAK,sBAAsB,IAAI,KAAK;AACvD,+CAAY,QAAQ,CAAC,MAAM,EAAE,QAAQ;AACrC,WAAK,sBAAsB,OAAO,KAAK;AAAA,IAC3C;AAAA,EACJ;AAAA,EAEQ,kBAAkB,OAAqB;AAC3C,QAAI,UAAU,KAAK,sBAAsB,IAAI,KAAK;AAClD,UAAM,WAAW,KAAK,iBAAiB,IAAI,KAAK;AAChD,QAAI,CAAC,SAAU;AAEf,QAAI,CAAC,SAAS;AACV,gBAAU,oBAAI,IAAI;AAClB,WAAK,sBAAsB,IAAI,OAAO,OAAO;AAC7C,2CAAU,QAAQ,CAAC,YAAY;AAC3B,2CAAS,IAAI,SAAS,aAAa,QAAQ,CAAC;AAAA,MAChD;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,SAA4C,OAAU,UAA+D;AACjH,SAAK,qBAAqB,KAAK,EAAE,IAAI,QAAQ;AAC7C,SAAK,kBAAkB,KAAK;AAC5B,WAAO,aAAa,MAAM,KAAK,YAAY,OAAO,QAAQ,CAAC;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,UAA6C,OAAU,QAAmD;AA3G9G;AA4GQ,eAAK,eAAe,IAAI,KAAK,MAA7B,mBAAgC,UAAU,QAAQ,CAAC,aAAa;AAC5D,eAAS,MAAM;AAAA,IACnB;AAEA,WAAO,OAAO;AAAA,EAClB;AACJ;;;AC1FO,IAAM,SAAN,cAAqB,MAAM;AAAA,EAC9B,YACyC,WACM,mBAC7C;AACE,UAAM;AAH+B;AACM;AAAA,EAG/C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW,UAAmC;AAC1C,WAAO,aAAa,KAAK,kBAAkB,WAAW,KAAK,OAAO,CAAC,cAAc,8BAAsC,CAAC,EAAE,UAAU,QAAQ,CAAC;AAAA,EACjJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQ,UAAmC;AACvC,WAAO,aAAa,KAAK,kBAAkB,WAAW,KAAK,OAAO,CAAC,cAAc,2BAAmC,CAAC,EAAE,UAAU,QAAQ,CAAC;AAAA,EAC9I;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW,UAAmC;AAC1C,WAAO,aAAa,KAAK,kBAAkB,WAAW,KAAK,OAAO,CAAC,cAAc,8BAAsC,CAAC,EAAE,UAAU,QAAQ,CAAC;AAAA,EACjJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,UAAmC;AACxC,WAAO,aAAa,KAAK,kBAAkB,WAAW,KAAK,OAAO,CAAC,cAAc,4BAAoC,CAAC,EAAE,UAAU,QAAQ,CAAC;AAAA,EAC/I;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa,UAAwD;AACjE,UAAM,iBAAiB,KAAK,UAAU,IAAI,eAAe;AAEzD,WAAO,eAAe,sBAAsB,CAAC,YAAY;AACrD,UAAI,QAAQ,OAAO,YAAY,IAAI;AAC/B,cAAM,kBAAkB,KAAK,UAAU,IAAI,gBAAgB;AAC3D,cAAM,SAAS,gBAAgB,oBAAoB;AACnD,YAAI,QAAQ;AACR,mBAAS,MAAM;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,UAAwD;AAC3D,UAAM,iBAAiB,KAAK,UAAU,IAAI,eAAe;AAEzD,WAAO,eAAe,kBAAkB,CAAC,YAAY;AACjD,UAAI,QAAQ,OAAO,YAAY,IAAI;AAC/B,cAAM,kBAAkB,KAAK,UAAU,IAAI,gBAAgB;AAC3D,cAAM,SAAS,gBAAgB,oBAAoB;AACnD,YAAI,QAAQ;AACR,mBAAS,MAAM;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa,UAAwD;AACjE,UAAM,iBAAiB,KAAK,UAAU,IAAI,eAAe;AAEzD,WAAO,eAAe,sBAAsB,CAAC,YAAY;AACrD,UAAI,QAAQ,OAAO,YAAY,IAAI;AAC/B,cAAM,kBAAkB,KAAK,UAAU,IAAI,gBAAgB;AAC3D,cAAM,SAAS,gBAAgB,oBAAoB;AACnD,YAAI,QAAQ;AACR,mBAAS,MAAM;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,UAAwD;AAC3D,UAAM,iBAAiB,KAAK,UAAU,IAAI,eAAe;AAEzD,WAAO,eAAe,kBAAkB,CAAC,YAAY;AACjD,UAAI,QAAQ,OAAO,YAAY,IAAI;AAC/B,cAAM,kBAAkB,KAAK,UAAU,IAAI,gBAAgB;AAC3D,cAAM,SAAS,gBAAgB,oBAAoB;AACnD,YAAI,QAAQ;AACR,mBAAS,MAAM;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;AA/Ga,SAAN;AAAA,EAEE,0BAAO,QAAQ;AAAA,EACf,0BAAO,gBAAgB;AAAA,GAHnB;;;ACDN,IAAM,eAAN,cAA2B,MAAM;AAAA,EACpC,YACyC,WACQ,qBAC/C;AACE,UAAM;AAH+B;AACQ;AAAA,EAGjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,iBAAwB;AACpB,WAAO,KAAK,oBAAoB,eAAe;AAAA,EACnD;AACJ;AAnBa,eAAN;AAAA,EAEE,0BAAO,QAAQ;AAAA,EACf,0BAAO,kBAAkB;AAAA,GAHrB;;;ACDN,IAAM,SAAN,MAAM,OAAM;AAAA,EAMf,OAAO,MAAa;AAChB,QAAI,KAAK,WAAW;AAChB,aAAO,KAAK;AAAA,IAChB;AAEA,UAAM,WAAW,IAAI,OAAM;AAC3B,SAAK,YAAY;AACjB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,OAAO,QAAmB;AAC7B,WAAO,oBAAoB,OAAO,SAAS,EAAE,QAAQ,CAAC,SAAS;AAC3D,UAAI,SAAS,eAAe;AAExB,aAAK,UAAU,IAAI,IAAI,OAAO,UAAU,IAAI;AAAA,MAChD;AAAA,IACJ,CAAC;AAED,WAAO,oBAAoB,MAAM,EAAE,QAAQ,CAAC,SAAS;AACjD,UAAI,SAAS,eAAe,SAAS,UAAU,SAAS,UAAU;AAE9D,aAAK,IAAI,IAAI,OAAO,IAAI;AAAA,MAC5B;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,IAAI,YAA8B;AAC9B,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,IAAI,SAAkB;AAClB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,IAAI,QAAsB;AACtB,WAAO;AAAA,EACX;AACJ;AAAA;AAAA;AAAA;AAzEI,cAJS,QAIF;AAJJ,IAAM,QAAN;;;ACUP,IAAMA,qBAAoB,OAAO,cAAc;AAaxC,IAAM,UAAN,cAAsB,WAAW;AAAA,EAyDpC,YACyC,WACD,iBACO,wBACE,mBAC/C;AACE,UAAM;AAL+B;AACD;AACO;AACE;AAVjD,wBAAU,kBAAiB,IAAI,eAAe;AAE9C,wBAAU,wBAAuB,CAAC,OAAe,YAA2D;AACxG,aAAO,KAAK,eAAe,qBAAqB,OAAO,OAAO;AAAA,IAClE;AAUI,SAAK;AAAA,MACD,KAAK,MAAM;AAAA,MACX,MACI;AAAA,QACI,KAAK,kBAAkB,WAAW,UAAU,CAAC,UAAU;AACnD,eAAK,UAAU,KAAK,MAAM,kBAAkB,EAAE,MAAM,CAAC;AAAA,QACzD,CAAC;AAAA,MACL;AAAA,IACR;AAEA,SAAK,eAAe,KAAK,SAAS;AAClC,SAAK,wBAAwB,KAAK,SAAS;AAC3C,SAAK,kBAAkB,KAAK,SAAS;AACrC,SAAK,UAAU,UAAU,MAAM;AAC3B,WAAK,QAAQ;AAAA,IACjB,CAAC;AAED,UAAM,eAAe,OAAO,eAAe,IAAI,EAAEA,kBAAiB;AAClE,QAAI,cAAc;AACd,YAAM,OAAO;AACb,mBAAa,QAAQ,SAAU,IAAmC;AAC9D,WAAG,MAAM,MAAM,CAAC,SAAS,CAAC;AAAA,MAC9B,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA7EA,OAAO,OAAO,SAAqC;AAC/C,UAAM,WAAW,mBAAmB,SAAS,QAAQ,cAAc,IAAI;AACvE,WAAO,SAAS,eAAe,OAAO;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,UAA0B;AAAA,EAAE;AAAA;AAAA;AAAA;AAAA,EAKxC,OAAO,OAAO,QAAmB;AAC7B,WAAO,oBAAoB,OAAO,SAAS,EAAE,QAAQ,CAAC,SAAS;AAC3D,UAAI,SAAS,eAAe;AACxB,YAAI,eAAe,KAAK,UAAUA,kBAAiB;AACnD,YAAI,CAAC,cAAc;AACf,yBAAe,CAAC;AAChB,eAAK,UAAUA,kBAAiB,IAAI;AAAA,QACxC;AAEA,qBAAa,KAAK,OAAO,UAAU,WAAW;AAAA,MAClD,WAAW,SAAS,eAAe;AAE/B,aAAK,UAAU,IAAI,IAAI,OAAO,UAAU,IAAI;AAAA,MAChD;AAAA,IACJ,CAAC;AAED,WAAO,oBAAoB,MAAM,EAAE,QAAQ,CAAC,SAAS;AACjD,UAAI,SAAS,eAAe,SAAS,UAAU,SAAS,UAAU;AAE9D,aAAK,IAAI,IAAI,OAAO,IAAI;AAAA,MAC5B;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EA0CQ,kBAAkB,UAA0B;AAChD,UAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,SAAK;AAAA,MACD,KAAK,MAAM;AAAA,MACX,MAAM,eAAe,kBAAkB,CAAC,gBAAgB;AACpD,cAAM,EAAE,IAAI,MAAM,UAAU,OAAO,IAAI;AACvC,YAAI,YAAY,OAAO,YAAY,IAAI;AACnC,gBAAM,OAAO;AACb,gBAAM,cAA6B,EAAE,IAAI,MAAM,OAAO;AACtD,eAAK,UAAU,KAAK,MAAM,MAAM,WAAW;AAAA,QAC/C;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,SAAK;AAAA,MACD,KAAK,MAAM;AAAA,MACX,MAAM,eAAe,kBAAkB,CAAC,gBAAgB;AACpD,cAAM,EAAE,IAAI,MAAM,UAAU,OAAO,IAAI;AACvC,YAAI,YAAY,OAAO,YAAY,IAAI;AACnC,gBAAM,OAAO;AACb,gBAAM,cAA6B,EAAE,IAAI,MAAM,OAAO;AACtD,eAAK,UAAU,KAAK,MAAM,MAAM,WAAW;AAAA,QAC/C;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,SAAK;AAAA,MACD,KAAK,MAAM;AAAA,MACX,MAAM,eAAe,kBAAkB,CAAC,gBAAgB;AACpD,cAAM,EAAE,IAAI,MAAM,UAAU,OAAO,IAAI;AACvC,YAAI,YAAY,OAAO,YAAY,MAAM,YAAY,OAAO,YAAY,IAAI;AACxE,gBAAM,OAAO;AACb,gBAAM,cAA6B,EAAE,IAAI,MAAM,OAAO;AACtD,eAAK,UAAU,KAAK,MAAM,iBAAiB,WAAW;AAAA,QAC1D;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,wBAAwB,UAA0B;AACtD,UAAM,iBAAiB,SAAS,IAAI,eAAe;AAEnD,SAAK;AAAA,MACD,KAAK,MAAM;AAAA,MACX,MAAM,eAAe,sBAAsB,CAAC,gBAAgB;AACxD,cAAM,EAAE,IAAI,MAAM,UAAU,OAAO,IAAI;AACvC,YAAI,YAAY,OAAO,YAAY,IAAI;AACnC,gBAAM,OAAO;AACb,gBAAM,cAA6B,EAAE,IAAI,MAAM,OAAO;AACtD,eAAK,UAAU,KAAK,MAAM,YAAY,WAAW;AAEjD,cAAI,YAAY,QAAQ;AACpB,kBAAM,IAAI,cAAc;AAAA,UAC5B;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,SAAK;AAAA,MACD,KAAK,MAAM;AAAA,MACX,MAAM,eAAe,sBAAsB,CAAC,gBAAgB;AACxD,cAAM,EAAE,IAAI,MAAM,UAAU,OAAO,IAAI;AACvC,YAAI,YAAY,OAAO,YAAY,IAAI;AACnC,gBAAM,OAAO;AACb,gBAAM,cAA6B,EAAE,IAAI,MAAM,OAAO;AACtD,eAAK,UAAU,KAAK,MAAM,YAAY,WAAW;AAEjD,cAAI,YAAY,QAAQ;AACpB,kBAAM,IAAI,cAAc;AAAA,UAC5B;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,SAAK;AAAA,MACD,KAAK,MAAM;AAAA,MACX,MAAM,eAAe,sBAAsB,CAAC,gBAAgB;AACxD,cAAM,EAAE,IAAI,MAAM,UAAU,OAAO,IAAI;AACvC,YAAI,YAAY,OAAO,YAAY,MAAM,YAAY,OAAO,YAAY,IAAI;AACxE,gBAAM,OAAO;AACb,gBAAM,cAA6B,EAAE,IAAI,MAAM,OAAO;AACtD,eAAK,UAAU,KAAK,MAAM,sBAAsB,WAAW;AAE3D,cAAI,YAAY,QAAQ;AACpB,kBAAM,IAAI,cAAc;AAAA,UAC5B;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAEQ,eAAe,UAA0B;AAC7C,UAAM,wBAAwB,SAAS,IAAI,sBAAsB;AAEjE,SAAK;AAAA,MACD,KAAK,MAAM;AAAA,MACX,MAAM,sBAAsB,cAAc,UAAU,CAAC,SAAS;AAC1D,YAAI,KAAK,SAAS,EAAmB,YAAY;AAC7C,eAAK,UAAU,KAAK,MAAM,aAAa;AAAA,YACnC,QAAQ,KAAK,UAAU;AAAA,YACvB,UAAU,KAAK;AAAA,YACf,UAAU,KAAK,YAAY;AAAA,UAC/B,CAAC;AAAA,QACL;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,SAAK;AAAA,MACD,KAAK,MAAM;AAAA,MACX,MAAM,sBAAsB,WAAW,UAAU,CAAC,SAAS;AACvD,YAAI,KAAK,SAAS,EAAmB,YAAY;AAC7C,gBAAM,MAAM;AACZ,gBAAM,UAAU,SAAS,eAAe,MAAM,GAAG;AACjD,eAAK,UAAU,KAAK,MAAM,YAAY;AAAA,YAClC,QAAQ,KAAK,UAAU;AAAA,YACvB,MAAM,KAAK;AAAA,YACX,KAAK;AAAA,YACL,MAAM;AAAA,UACV,CAAC;AAAA,QACL;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,YAAY,QAAyB;AACjC,WAAO,KAAK,uBAAuB,YAAY,MAAM;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,2BAA4C;AACxC,UAAM,mBAAmB,KAAK,UAAU,IAAI,gBAAgB;AAC5D,WAAO,iBAAiB;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAyB;AACrB,WAAO,KAAK,gBAAgB,eAAe,YAAY,EAAE;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAyB;AACrB,WAAO,KAAK,gBAAgB,eAAe,YAAY,EAAE;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,uBAAuB,UAAwC;AAC3D,WAAO,KAAK,gBAAgB,sBAAsB,CAAC,SAAS,YAAgC;AACxF,eAAS,SAAS,OAAO;AAAA,IAC7B,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,kBAAkB,UAAwC;AACtD,WAAO,KAAK,gBAAgB,kBAAkB,CAAC,SAAS,YAAgC;AACpF,eAAS,SAAS,OAAO;AAAA,IAC7B,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,eACI,IACA,QACA,SACU;AACV,WAAO,KAAK,gBAAgB,eAAe,IAAI,QAAQ,OAAO;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,mBACI,IACA,QACA,SACC;AACD,WAAO,KAAK,gBAAgB,mBAAmB,IAAI,QAAQ,OAAO;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAmB;AACf,WAAO,KAAK,UAAU,eAAe,MAAM;AAAA,EAC/C;AAAA,EAEA,IAAI,OAAc;AACd,WAAO,MAAM,IAAI;AAAA,EACrB;AAAA,EAEA,IAAI,QAAoB;AACpB,WAAO,WAAW,IAAI;AAAA,EAC1B;AAAA,EAEA,IAAI,OAAc;AACd,WAAO,MAAM,IAAI;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,SAA4C,OAAU,UAA+D;AACjH,QAAI,CAAC,SAAS,CAAC,SAAU,OAAM,IAAI,MAAM,wBAAwB;AACjE,WAAO,KAAK,eAAe,SAAS,OAAO,QAAQ;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYU,UAA6C,OAAU,QAAmD;AAChH,WAAO,KAAK,eAAe,UAAU,OAAO,MAAM;AAAA,EACtD;AAAA,EAEA,iBAA+B;AAC3B,WAAO,KAAK,UAAU,eAAe,YAAY;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,UAAiB;AACb,WAAO,KAAK,UAAU,eAAe,KAAK;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,WAAyB;AACrB,WAAO,IAAI,aAAa;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,YAAY,MAAuC;AAC/C,WAAO,gBAAgB,OAAO,IAAI;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,iBAAiB,MAAoC;AACjD,WAAO,cAAc,OAAO,IAAI;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,kBAAkB,OAAgD;AAC9D,WAAO,sBAAsB,OAAO,KAAK;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,uBAAuB,OAA8C;AACjE,WAAO,oBAAoB,OAAO,KAAK;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,aAAa,OAAsC;AAC/C,WAAO,iBAAiB,OAAO,KAAK;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,kBAAkB,OAAoC;AAClD,WAAO,eAAe,OAAO,KAAK;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,kBAAkB,YAAqD;AACnE,WAAO,IAAI,sBAAsB,UAAU;AAAA,EAC/C;AACJ;AA/gBa,UAAN;AAAA,EA0DE,0BAAO,QAAQ;AAAA,EACf;AAAA,EACA;AAAA,EACA,0BAAO,gBAAgB;AAAA,GA7DnB;",
  "names": ["InitializerSymbol"]
}
