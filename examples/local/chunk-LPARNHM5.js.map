{
  "version": 3,
  "sources": ["../../packages-experimental/action-recorder/src/services/action-recorder.service.ts", "../../packages-experimental/action-recorder/src/commands/commands/record.command.ts", "../../packages-experimental/action-recorder/src/services/replay.service.ts", "../../packages-experimental/action-recorder/src/commands/commands/replay.command.ts", "../../packages-experimental/action-recorder/src/commands/operations/operation.ts", "../../packages-experimental/action-recorder/src/views/components/RecorderPanel.tsx", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages-experimental/action-recorder/src/views/components/index.module.less", "../../packages-experimental/action-recorder/src/controllers/action-recorder.menu.ts", "../../packages-experimental/action-recorder/src/controllers/action-recorder.controller.tsx", "../../packages-experimental/action-recorder/src/controllers/config.schema.ts", "../../packages-experimental/action-recorder/src/plugin.ts"],
  "sourcesContent": ["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommand, ICommandInfo, IDisposable, Nullable, Workbook } from '@univerjs/core';\nimport type { ISheetCommandSharedParams } from '@univerjs/sheets';\nimport { CommandType, Disposable, ICommandService, ILogService, IUniverInstanceService } from '@univerjs/core';\nimport { SetSelectionsOperation } from '@univerjs/sheets';\nimport { ILocalFileService } from '@univerjs/ui';\nimport { BehaviorSubject } from 'rxjs';\n\n/**\n * This service is for recording commands. What commands should be recorded can be configured by other\n * plugins.\n */\nexport class ActionRecorderService extends Disposable {\n    private readonly _shouldRecordCommands = new Set<string>();\n\n    private readonly _panelOpened$ = new BehaviorSubject<boolean>(false);\n    readonly panelOpened$ = this._panelOpened$.asObservable();\n\n    private _recorder: Nullable<IDisposable> = null;\n\n    private readonly _recording$ = new BehaviorSubject<boolean>(false);\n    readonly recording$ = this._recording$.asObservable();\n    get recording(): boolean { return this._recording$.getValue(); }\n\n    private _recorded$ = new BehaviorSubject<ICommandInfo[]>([]);\n    private get _recorded(): ICommandInfo[] { return this._recorded$.getValue(); }\n\n    private _recordedCommands$ = new BehaviorSubject<ICommandInfo[]>([]);\n    readonly recordedCommands$ = this._recordedCommands$.asObservable();\n    private get _recordedCommands(): ICommandInfo[] { return this._recordedCommands$.getValue(); }\n\n    constructor(\n        @ICommandService private readonly _commandSrv: ICommandService,\n        @ILogService private readonly _logService: ILogService,\n        @ILocalFileService private readonly _localFileService: ILocalFileService,\n        @IUniverInstanceService private readonly _instanceService: IUniverInstanceService\n    ) {\n        super();\n    }\n\n    registerRecordedCommand(command: ICommand): void {\n        if (command.type === CommandType.MUTATION) throw new Error('[CommandRecorderService] Cannot record mutation commands.');\n        this._shouldRecordCommands.add(command.id);\n    }\n\n    togglePanel(visible: boolean): void {\n        this._panelOpened$.next(visible);\n\n        if (visible === false) this.stopRecording();\n    }\n\n    startRecording(replaceId = false): void {\n        this._recorder = this._commandSrv.onCommandExecuted((rawCommandInfo) => {\n            if (this._shouldRecordCommands.has(rawCommandInfo.id)) {\n                const recorded = this._recorded;\n                const commands = this._recordedCommands;\n\n                let commandInfo = { ...rawCommandInfo };\n\n                const focusUnitId = this._instanceService.getFocusedUnit()?.getUnitId();\n                const { unitId = focusUnitId, subUnitId } = commandInfo?.params as ISheetCommandSharedParams;\n\n                if (replaceId && unitId && subUnitId) {\n                    const subUnitName = (this._instanceService.getUnit(unitId) as Workbook).getSheetBySheetId(subUnitId)?.getName();\n                    commandInfo = {\n                        ...commandInfo,\n                        params: {\n                            ...commandInfo.params,\n                            subUnitId: subUnitName,\n                        },\n                    };\n                }\n\n                if (\n                    commandInfo.id === SetSelectionsOperation.id &&\n                    recorded.length > 0 &&\n                    recorded[recorded.length - 1].id === SetSelectionsOperation.id\n                ) {\n                    recorded[recorded.length - 1] = commandInfo;\n                } else {\n                    recorded.push(commandInfo);\n                    this._recorded$.next(recorded);\n\n                    if (commandInfo.type === CommandType.COMMAND) {\n                        commands.push(commandInfo);\n                        this._recordedCommands$.next(commands);\n                    }\n                }\n            }\n        });\n\n        this._recording$.next(true);\n    }\n\n    stopRecording(): void {\n        this._recorder?.dispose();\n        this._recorder = null;\n\n        this._recorded$.next([]);\n        this._recordedCommands$.next([]);\n        this._recording$.next(false);\n    }\n\n    completeRecording(): void {\n        const commands = this._recorded.slice();\n        this._localFileService.downloadFile(new Blob([JSON.stringify(commands, null, 2)]), 'recorded-commands.json');\n\n        this._logService.error('Recorded commands:', commands);\n        this.stopRecording();\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommandType, type ICommand } from '@univerjs/core';\nimport { ActionRecorderService } from '../../services/action-recorder.service';\n\ninterface IStartRecordingActionCommandParams {\n    replaceId?: boolean;\n}\n\nexport const StartRecordingActionCommand: ICommand<IStartRecordingActionCommandParams> = {\n    id: 'action-recorder.command.start-recording',\n    type: CommandType.COMMAND,\n    handler: (accessor, params) => {\n        const actionRecorderService = accessor.get(ActionRecorderService);\n        actionRecorderService.startRecording(!!params?.replaceId);\n        return true;\n    },\n};\n\nexport const CompleteRecordingActionCommand: ICommand = {\n    id: 'action-recorder.command.complete-recording',\n    type: CommandType.COMMAND,\n    handler: (accessor) => {\n        const actionRecorderService = accessor.get(ActionRecorderService);\n        actionRecorderService.completeRecording();\n        return true;\n    },\n};\n\nexport const StopRecordingActionCommand: ICommand = {\n    id: 'action-recorder.command.stop-recording',\n    type: CommandType.COMMAND,\n    handler: (accessor) => {\n        const actionRecorderService = accessor.get(ActionRecorderService);\n        actionRecorderService.completeRecording();\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommandInfo, Workbook } from '@univerjs/core';\nimport type { ISheetCommandSharedParams } from '@univerjs/sheets';\nimport { awaitTime, Disposable, ICommandService, ILogService, IUniverInstanceService } from '@univerjs/core';\nimport { MessageType } from '@univerjs/design';\nimport { ILocalFileService, IMessageService } from '@univerjs/ui';\n\nexport enum ReplayMode {\n    DEFAULT = 'default',\n    NAME = 'name',\n    ACTIVE = 'active',\n}\n\n/**\n * This service is for replaying user actions.\n */\nexport class ActionReplayService extends Disposable {\n    constructor(\n        @IMessageService private readonly _messageService: IMessageService,\n        @IUniverInstanceService private readonly _instanceService: IUniverInstanceService,\n        @ILocalFileService private readonly _localFileService: ILocalFileService,\n        @ILogService private readonly _logService: ILogService,\n        @ICommandService private readonly _commandService: ICommandService\n    ) {\n        super();\n    }\n\n    /**\n     * Read a local file and try to replay commands in this JSON.\n     */\n    async replayLocalJSON(mode: ReplayMode = ReplayMode.DEFAULT): Promise<boolean> {\n        const files = await this._localFileService.openFile({ multiple: false, accept: '.json' });\n        if (files.length !== 1) return false;\n\n        const file = files[0];\n        try {\n            return this.replayCommands(JSON.parse(await file.text()), { mode });\n        } catch {\n            this._messageService.show({\n                type: MessageType.Error,\n                content: `Failed to replay commands from local file ${file.name}.`,\n            });\n\n            return false;\n        }\n    }\n\n    /**\n     * Replay a list of commands. Note that `unitId` of these commands would be changed to the focused unit.\n     * @param commands - The commands to replay.\n     * @returns If the replay is successful.\n     */\n    async replayCommands(commands: ICommandInfo[], options?: { mode: ReplayMode }): Promise<boolean> {\n        const focusedUnitId = this._instanceService.getFocusedUnit()?.getUnitId();\n        if (!focusedUnitId) {\n            this._logService.error('[ReplayService]', 'no focused unit to replay commands');\n        }\n\n        const { mode } = options || {};\n\n        for (const command of commands) {\n            const { id, params } = command;\n            const commandParams = params as ISheetCommandSharedParams;\n            if (commandParams) {\n                if (typeof commandParams.unitId !== 'undefined') {\n                    commandParams.unitId = focusedUnitId!;\n                }\n\n                if (mode === ReplayMode.NAME && commandParams.subUnitId !== 'undefined') {\n                    const realSubUnitId = (this._instanceService.getFocusedUnit() as Workbook).getSheetBySheetName(commandParams.subUnitId)?.getSheetId();\n                    if (realSubUnitId) {\n                        commandParams.subUnitId = realSubUnitId;\n                    } else {\n                        this._logService.error('[ReplayService]', `failed to find subunit by subUnitName = ${commandParams.subUnitId}`);\n                    }\n                }\n\n                if (mode === ReplayMode.ACTIVE && commandParams.subUnitId !== 'undefined') {\n                    const realSubUnitId = (this._instanceService.getFocusedUnit() as Workbook).getActiveSheet()?.getSheetId();\n                    if (realSubUnitId) {\n                        commandParams.subUnitId = realSubUnitId;\n                    } else {\n                        this._logService.error('[ReplayService]', 'failed to find active subunit');\n                    }\n                }\n\n                const result = await this._commandService.executeCommand(id, params);\n                if (!result) return false;\n            } else {\n                const result = await this._commandService.executeCommand(id);\n                if (!result) return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Replay a list of commands with a random delay between each command.\n     * @param commands - The commands to replay.\n     */\n    async replayCommandsWithDelay(commands: ICommandInfo[]): Promise<boolean> {\n        const focusedUnitId = this._instanceService.getFocusedUnit()?.getUnitId();\n        if (!focusedUnitId) {\n            this._logService.error('[ReplayService]', 'no focused unit to replay commands');\n        }\n\n        for (const command of commands) {\n            await awaitTime(randomBetween200And1k());\n\n            const { id, params } = command;\n            if (params) {\n                if (typeof (params as ISharedCommandParams).unitId !== 'undefined') {\n                    (params as ISharedCommandParams).unitId = focusedUnitId;\n                }\n\n                const result = await this._commandService.executeCommand(id, params);\n                if (!result) return false;\n            } else {\n                const result = await this._commandService.executeCommand(id);\n                if (!result) return false;\n            }\n        }\n\n        return true;\n    }\n}\n\ninterface ISharedCommandParams {\n    unitId?: string;\n}\n\nfunction randomBetween200And1k() {\n    return Math.floor(Math.random() * 800) + 200;\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommand } from '@univerjs/core';\nimport { CommandType } from '@univerjs/core';\nimport { MessageType } from '@univerjs/design';\nimport { IMessageService } from '@univerjs/ui';\nimport { ActionReplayService, ReplayMode } from '../../services/replay.service';\n\nexport const ReplayLocalRecordCommand: ICommand = {\n    id: 'action-recorder.command.replay-local-records',\n    type: CommandType.COMMAND,\n    handler: async (accessor) => {\n        const replayService = accessor.get(ActionReplayService);\n        const result = await replayService.replayLocalJSON();\n\n        if (result) {\n            const messageService = accessor.get(IMessageService);\n            messageService.show({\n                type: MessageType.Success,\n                content: 'Successfully replayed local records',\n            });\n        }\n\n        return result;\n    },\n};\n\nexport const ReplayLocalRecordOnNamesakeCommand: ICommand = {\n    id: 'action-recorder.command.replay-local-records-name',\n    type: CommandType.COMMAND,\n    handler: async (accessor) => {\n        const replayService = accessor.get(ActionReplayService);\n        const result = await replayService.replayLocalJSON(ReplayMode.NAME);\n\n        if (result) {\n            const messageService = accessor.get(IMessageService);\n            messageService.show({\n                type: MessageType.Success,\n                content: 'Successfully replayed local records',\n            });\n        }\n\n        return result;\n    },\n};\n\nexport const ReplayLocalRecordOnActiveCommand: ICommand = {\n    id: 'action-recorder.command.replay-local-records-active',\n    type: CommandType.COMMAND,\n    handler: async (accessor) => {\n        const replayService = accessor.get(ActionReplayService);\n        const result = await replayService.replayLocalJSON(ReplayMode.ACTIVE);\n\n        if (result) {\n            const messageService = accessor.get(IMessageService);\n            messageService.show({\n                type: MessageType.Success,\n                content: 'Successfully replayed local records',\n            });\n        }\n\n        return result;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommandType } from '@univerjs/core';\nimport type { IOperation } from '@univerjs/core';\nimport { ActionRecorderService } from '../../services/action-recorder.service';\n\nexport const OpenRecordPanelOperation: IOperation = {\n    id: 'action-recorder.operation.open-panel',\n    type: CommandType.OPERATION,\n    handler(accessor) {\n        const s = accessor.get(ActionRecorderService);\n        s.togglePanel(true);\n        return true;\n    },\n};\n\nexport const CloseRecordPanelOperation: IOperation = {\n    id: 'action-recorder.operation.close-panel',\n    type: CommandType.OPERATION,\n    handler(accessor) {\n        const s = accessor.get(ActionRecorderService);\n        s.togglePanel(false);\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ICommandService } from '@univerjs/core';\nimport { Button, clsx } from '@univerjs/design';\nimport { RecordSingle } from '@univerjs/icons';\nimport { useDependency, useObservable } from '@univerjs/ui';\nimport React, { useCallback } from 'react';\nimport { CompleteRecordingActionCommand, StartRecordingActionCommand, StopRecordingActionCommand } from '../../commands/commands/record.command';\nimport { CloseRecordPanelOperation } from '../../commands/operations/operation';\nimport { ActionRecorderService } from '../../services/action-recorder.service';\nimport styles from './index.module.less';\n\nexport function RecorderPanel() {\n    const s = useDependency(ActionRecorderService);\n    const opened = useObservable(s.panelOpened$);\n\n    if (!opened) return null;\n    return <RecordPanelImpl />;\n}\n\nfunction RecordPanelImpl() {\n    const commandService = useDependency(ICommandService);\n    const actionRecorderService = useDependency(ActionRecorderService);\n\n    const recording = useObservable(actionRecorderService.recording$);\n    const recordedCommands = useObservable(actionRecorderService.recordedCommands$);\n    const len = recordedCommands?.length ?? 0;\n\n    const closePanel = useCallback(() => {\n        if (!recording) commandService.executeCommand(CloseRecordPanelOperation.id);\n    }, [commandService, recording]);\n\n    const startRecording = useCallback((replaceId?: boolean) => {\n        if (!recording) commandService.executeCommand(StartRecordingActionCommand.id, { replaceId });\n    }, [commandService, recording]);\n\n    const completeRecording = useCallback(() => {\n        if (recording) commandService.executeCommand(CompleteRecordingActionCommand.id);\n    }, [commandService, recording]);\n\n    const stopRecording = useCallback(() => {\n        if (recording) commandService.executeCommand(StopRecordingActionCommand.id);\n    }, [commandService, recording]);\n\n    const titleText = recording\n        ? len === 0 ? 'Recording...' : (`${len}: ${recordedCommands![len - 1].id}`)\n        : 'Start Recording';\n\n    return (\n        <div className={styles.actionRecorderPanel}>\n            <div className={clsx(styles.actionRecorderPanelIcon, recording ? styles.actionRecorderPanelIconRecording : false)}>\n                <RecordSingle />\n            </div>\n            <div className={styles.actionRecorderPanelTitle}>{titleText}</div>\n            <div className={styles.actionRecorderPanelActions}>\n                <Button type=\"default\" size=\"small\" onClick={recording ? stopRecording : closePanel}>{ recording ? 'Cancel' : 'Close' }</Button>\n                <Button type=\"primary\" size=\"small\" onClick={recording ? completeRecording : () => startRecording()}>{ recording ? 'Save' : 'Start' }</Button>\n                { !recording && <Button type=\"primary\" size=\"small\" onClick={() => startRecording(true)}>Start(N)</Button>}\n            </div>\n        </div>\n    );\n}\n", "export default {\n  \"actionRecorderPanel\": \"univer-action-recorder-panel\",\n  \"actionRecorderPanelIcon\": \"univer-action-recorder-panel-icon\",\n  \"actionRecorderPanelIconRecording\": \"univer-action-recorder-panel-icon-recording\",\n  \"recording\": \"univer-recording\",\n  \"actionRecorderPanelTitle\": \"univer-action-recorder-panel-title\",\n  \"actionRecorderPanelActions\": \"univer-action-recorder-panel-actions\"\n};import \"ni:sha-256;9o1Z2GCwGTAKuajrhdeZ_x-Icqx68aZ2qAMxhugch1Q\";", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor } from '@univerjs/core';\nimport type { IMenuButtonItem, IMenuSelectorItem, MenuSchemaType } from '@univerjs/ui';\nimport { MenuItemType, RibbonStartGroup } from '@univerjs/ui';\nimport { ReplayLocalRecordCommand, ReplayLocalRecordOnActiveCommand, ReplayLocalRecordOnNamesakeCommand } from '../commands/commands/replay.command';\nimport { OpenRecordPanelOperation } from '../commands/operations/operation';\nimport { ActionRecorderService } from '../services/action-recorder.service';\n\nexport const RECORD_MENU_ITEM_ID = 'RECORD_MENU_ITEM';\nexport function RecordMenuItemFactory(): IMenuSelectorItem {\n    return {\n        id: RECORD_MENU_ITEM_ID,\n        type: MenuItemType.SUBITEMS,\n        icon: 'RecordSingle',\n        tooltip: 'action-recorder.menu.title',\n    };\n}\n\nexport function OpenRecorderMenuItemFactory(accessor: IAccessor): IMenuButtonItem {\n    const actionRecorderService = accessor.get(ActionRecorderService);\n\n    return {\n        id: OpenRecordPanelOperation.id,\n        title: 'action-recorder.menu.record',\n        type: MenuItemType.BUTTON,\n        disabled$: actionRecorderService.panelOpened$,\n    };\n}\n\nexport function ReplayLocalRecordMenuItemFactory(): IMenuButtonItem {\n    return {\n        id: ReplayLocalRecordCommand.id,\n        title: 'action-recorder.menu.replay-local',\n        type: MenuItemType.BUTTON,\n    };\n}\n\nexport function ReplayLocalRecordOnNamesakeMenuItemFactory(): IMenuButtonItem {\n    return {\n        id: ReplayLocalRecordOnNamesakeCommand.id,\n        title: 'action-recorder.menu.replay-local-name',\n        type: MenuItemType.BUTTON,\n    };\n}\n\nexport function ReplayLocalRecordOnActiveMenuItemFactory(): IMenuButtonItem {\n    return {\n        id: ReplayLocalRecordOnActiveCommand.id,\n        title: 'action-recorder.menu.replay-local-active',\n        type: MenuItemType.BUTTON,\n    };\n}\n\nexport const menuSchema: MenuSchemaType = {\n    [RibbonStartGroup.OTHERS]: {\n        [RECORD_MENU_ITEM_ID]: {\n            order: 10,\n            menuItemFactory: RecordMenuItemFactory,\n            [OpenRecordPanelOperation.id]: {\n                order: 1,\n                menuItemFactory: OpenRecorderMenuItemFactory,\n            },\n            [ReplayLocalRecordCommand.id]: {\n                order: 2,\n                menuItemFactory: ReplayLocalRecordMenuItemFactory,\n            },\n            [ReplayLocalRecordOnNamesakeCommand.id]: {\n                order: 3,\n                menuItemFactory: ReplayLocalRecordOnNamesakeMenuItemFactory,\n            },\n            [ReplayLocalRecordOnActiveCommand.id]: {\n                order: 4,\n                menuItemFactory: ReplayLocalRecordOnActiveMenuItemFactory,\n            },\n        },\n\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Disposable, ICommandService, Inject, Injector } from '@univerjs/core';\nimport { RecordSingle } from '@univerjs/icons';\nimport {\n    AddWorksheetMergeAllCommand,\n    AddWorksheetMergeCommand,\n    AddWorksheetMergeHorizontalCommand,\n    AddWorksheetMergeVerticalCommand,\n    CancelFrozenCommand,\n    CopySheetCommand,\n    DeleteRangeMoveLeftCommand,\n    DeleteRangeMoveUpCommand,\n    DeltaColumnWidthCommand,\n    DeltaRowHeightCommand,\n    InsertColAfterCommand,\n    InsertColBeforeCommand,\n    InsertRowAfterCommand,\n    InsertRowBeforeCommand,\n    InsertSheetCommand,\n    RemoveSheetCommand,\n    SetFrozenCommand,\n    SetHorizontalTextAlignCommand,\n    SetOverlineCommand,\n    SetRangeValuesCommand,\n    SetSelectionsOperation,\n    SetStrikeThroughCommand,\n    SetStyleCommand,\n    SetTextColorCommand,\n    SetTextRotationCommand,\n    SetTextWrapCommand,\n    SetVerticalTextAlignCommand,\n    SetWorksheetActivateCommand,\n    SetWorksheetActiveOperation,\n} from '@univerjs/sheets';\nimport { RemoveSheetFilterCommand, SetSheetFilterRangeCommand, SetSheetsFilterCriteriaCommand } from '@univerjs/sheets-filter';\nimport {\n    AutoFillCommand,\n    RefillCommand,\n    SetRangeBoldCommand,\n    SetRangeFontFamilyCommand,\n    SetRangeFontSizeCommand,\n    SetRangeItalicCommand,\n    SetRangeStrickThroughCommand,\n    SetRangeSubscriptCommand,\n    SetRangeSuperscriptCommand,\n    SetRangeTextColorCommand,\n    SetRangeUnderlineCommand,\n    SheetCopyCommand,\n    SheetCutCommand,\n    SheetPasteBesidesBorderCommand,\n    SheetPasteColWidthCommand,\n    SheetPasteCommand,\n    SheetPasteFormatCommand,\n    SheetPasteShortKeyCommand,\n    SheetPasteValueCommand,\n} from '@univerjs/sheets-ui';\nimport {\n    BuiltInUIPart,\n    ComponentManager,\n    connectInjector,\n    IMenuManagerService,\n    IUIPartsService,\n} from '@univerjs/ui';\nimport { CompleteRecordingActionCommand, StartRecordingActionCommand, StopRecordingActionCommand } from '../commands/commands/record.command';\nimport { ReplayLocalRecordCommand, ReplayLocalRecordOnActiveCommand, ReplayLocalRecordOnNamesakeCommand } from '../commands/commands/replay.command';\nimport { CloseRecordPanelOperation, OpenRecordPanelOperation } from '../commands/operations/operation';\nimport { ActionRecorderService } from '../services/action-recorder.service';\nimport { RecorderPanel } from '../views/components/RecorderPanel';\nimport { menuSchema } from './action-recorder.menu';\n\nexport class ActionRecorderController extends Disposable {\n    constructor(\n        @ICommandService private readonly _commandSrv: ICommandService,\n        @IUIPartsService private readonly _uiPartsSrv: IUIPartsService,\n        @IMenuManagerService private readonly _menuManagerService: IMenuManagerService,\n        @Inject(ComponentManager) private readonly _componentManager: ComponentManager,\n        @Inject(ActionRecorderService) private readonly _actionRecorderService: ActionRecorderService,\n        @Inject(Injector) private readonly _injector: Injector\n    ) {\n        super();\n\n        this._initCommands();\n        this._initUI();\n        this._initSheetsCommands();\n        this._initDocsCommands();\n    }\n\n    private _initCommands(): void {\n        ([\n            StartRecordingActionCommand,\n            StopRecordingActionCommand,\n            CompleteRecordingActionCommand,\n            OpenRecordPanelOperation,\n            CloseRecordPanelOperation,\n            ReplayLocalRecordCommand,\n            ReplayLocalRecordOnNamesakeCommand,\n            ReplayLocalRecordOnActiveCommand,\n        ]).forEach((command) => this._commandSrv.registerCommand(command));\n    }\n\n    private _initUI(): void {\n        this._uiPartsSrv.registerComponent(BuiltInUIPart.GLOBAL, () => connectInjector(RecorderPanel, this._injector));\n        this._componentManager.register('RecordSingle', RecordSingle);\n        this._menuManagerService.mergeMenu(menuSchema);\n    }\n\n    private _initSheetsCommands(): void {\n        ([\n            // InsertColCommand,\n            // InsertRowCommand,\n            // #region basic commands\n            CopySheetCommand,\n            DeleteRangeMoveLeftCommand,\n            DeleteRangeMoveUpCommand,\n            DeltaColumnWidthCommand,\n            DeltaRowHeightCommand,\n            InsertSheetCommand,\n            InsertColAfterCommand,\n            InsertColBeforeCommand,\n            InsertRowAfterCommand,\n            InsertRowBeforeCommand,\n            RemoveSheetCommand,\n            SetStyleCommand,\n            AddWorksheetMergeCommand,\n            AddWorksheetMergeAllCommand,\n            AddWorksheetMergeVerticalCommand,\n            AddWorksheetMergeHorizontalCommand,\n            // ResetBackgroundColorCommand,\n            // ResetTextColorCommand,\n            // SetBackgroundColorCommand,\n            // SetBoldCommand,\n            // SetFontFamilyCommand,\n            // SetFontSizeCommand,\n            SetFrozenCommand,\n            CancelFrozenCommand,\n            SetHorizontalTextAlignCommand,\n            // SetItalicCommand,\n            SetOverlineCommand,\n            SetRangeBoldCommand,\n            SetRangeFontFamilyCommand,\n            SetRangeFontSizeCommand,\n            SetRangeItalicCommand,\n            SetRangeStrickThroughCommand,\n            SetRangeSubscriptCommand,\n            SetRangeSuperscriptCommand,\n            SetRangeTextColorCommand,\n            SetRangeUnderlineCommand,\n            SetRangeValuesCommand,\n            SetStrikeThroughCommand,\n            SetTextColorCommand,\n            SetTextRotationCommand,\n            SetTextWrapCommand,\n            // SetUnderlineCommand,\n            SetVerticalTextAlignCommand,\n            SheetCopyCommand,\n            SheetCutCommand,\n            SheetPasteBesidesBorderCommand,\n            SheetPasteColWidthCommand,\n            SheetPasteCommand,\n            SheetPasteFormatCommand,\n            SheetPasteShortKeyCommand,\n            SheetPasteValueCommand,\n            AutoFillCommand,\n            RefillCommand,\n\n            SetWorksheetActivateCommand,\n            SetWorksheetActiveOperation,\n            SetSelectionsOperation,\n            // #endregion\n\n            // #region data validation command\n            // #endregion\n\n            // #region conditional formatting command\n            // #endregion\n\n            // #region filter command\n            SetSheetFilterRangeCommand,\n            SetSheetsFilterCriteriaCommand,\n            RemoveSheetFilterCommand,\n            // #endregion\n        ]).forEach((command) => this._actionRecorderService.registerRecordedCommand(command));\n    }\n\n    private _initDocsCommands(): void {\n        // TODO\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { MenuConfig } from '@univerjs/ui';\n\nexport const ACTION_RECORDER_PLUGIN_CONFIG_KEY = 'action-recorder.config';\n\nexport const configSymbol = Symbol(ACTION_RECORDER_PLUGIN_CONFIG_KEY);\n\nexport interface IUniverActionRecorderConfig {\n    menu?: MenuConfig;\n    replayOnly?: boolean;\n}\n\nexport const defaultPluginConfig: IUniverActionRecorderConfig = {};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport type { IUniverActionRecorderConfig } from './controllers/config.schema';\nimport { IConfigService, Inject, Injector, merge, Plugin } from '@univerjs/core';\nimport { ActionRecorderController } from './controllers/action-recorder.controller';\nimport { ACTION_RECORDER_PLUGIN_CONFIG_KEY, defaultPluginConfig } from './controllers/config.schema';\nimport { ActionRecorderService } from './services/action-recorder.service';\nimport { ActionReplayService } from './services/replay.service';\n\n/**\n * This plugin provides a recorder for user's interactions with Univer,\n * it only records commands (and some special operations) so that it can be replayed later.\n */\nexport class UniverActionRecorderPlugin extends Plugin {\n    static override pluginName = 'UNIVER_ACTION_RECORDER_PLUGIN';\n\n    constructor(\n        private readonly _config: Partial<IUniverActionRecorderConfig> = defaultPluginConfig,\n        @Inject(Injector) protected readonly _injector: Injector,\n        @IConfigService private readonly _configService: IConfigService\n    ) {\n        super();\n\n        // Manage the plugin configuration.\n        const { menu, ...rest } = merge(\n            {},\n            defaultPluginConfig,\n            this._config\n        );\n        if (menu) {\n            this._configService.setConfig('menu', menu, { merge: true });\n        }\n        this._configService.setConfig(ACTION_RECORDER_PLUGIN_CONFIG_KEY, rest);\n    }\n\n    override onStarting(): void {\n        const dependency = this._config.replayOnly\n            ? [[ActionReplayService]]\n            : [\n                [ActionRecorderService],\n                [ActionReplayService],\n                [ActionRecorderController],\n            ];\n        (dependency as Dependency[]).forEach((d) => this._injector.add(d));\n    }\n\n    override onSteady(): void {\n        if (this._config.replayOnly) {\n            return;\n        }\n        this._injector.get(ActionRecorderController);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
