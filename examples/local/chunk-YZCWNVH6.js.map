{
  "version": 3,
  "sources": ["../../packages/sheets-numfmt/src/base/const/plugin-name.ts", "../../packages/sheets-numfmt/src/utils/decimal.ts", "../../packages/sheets-numfmt/src/commands/commands/set-numfmt.command.ts", "../../packages/sheets-numfmt/src/commands/commands/add-decimal.command.ts", "../../packages/sheets-numfmt/src/base/const/currency-symbols.ts", "../../packages/sheets-numfmt/src/base/const/formatdetail.ts", "../../packages/sheets-numfmt/src/service/menu.currency.service.ts", "../../packages/sheets-numfmt/src/commands/commands/set-currency.command.ts", "../../packages/sheets-numfmt/src/commands/commands/set-percent.command.ts", "../../packages/sheets-numfmt/src/commands/commands/subtract-decimal.command.ts", "../../packages/sheets-numfmt/src/utils/pattern.ts", "../../packages/sheets-numfmt/src/controllers/numfmt-cell-content.controller.ts", "../../packages/sheets-numfmt/src/controllers/numfmt-currency.controller.ts", "../../packages/sheets-numfmt/src/numfmt-plugin.ts", "../../packages/sheets-numfmt/src/utils/currency.ts", "../../packages/sheets-numfmt/src/utils/options.ts"],
  "sourcesContent": ["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const SHEET_NUMFMT_PLUGIN = 'SHEET_NUMFMT_PLUGIN';\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { numfmt } from '@univerjs/core';\n\n/**\n * the function decimal just use positive,negative configuration ignored\n */\nexport const getDecimalFromPattern = (pattern: string, defaultValue: number = 0) => {\n    if (!pattern) {\n        return defaultValue;\n    }\n\n    const info = numfmt.getInfo(pattern);\n    return info.maxDecimals ?? defaultValue;\n};\n\n/**\n * Determines whether two pattern are equal, excluding differences in decimal places\n */\nexport const isPatternEqualWithoutDecimal = (patternA: string, patternB: string) => {\n    if ((patternA && !patternB) || (!patternA && patternB)) {\n        return false;\n    }\n    const getString = (tokens: unknown[]) =>\n        (tokens as Array<{ type: string; num?: string; value?: string }>).reduce(\n            (pre, cur) => {\n                if (pre.isEnd) {\n                    return pre;\n                }\n                const str = cur.value || cur.num;\n                if (cur.type === 'point') {\n                    pre.isEnd = true;\n                    return pre;\n                }\n                return { ...pre, result: pre.result + str };\n            },\n            { isEnd: false, result: '' }\n        ).result;\n    const partitionsA = numfmt.getInfo(patternA)._partitions;\n    const partitionsB = numfmt.getInfo(patternB)._partitions;\n    const A1 = getString(partitionsA[0].tokens);\n    const B1 = getString(partitionsB[0].tokens);\n    const A2 = getString(partitionsA[1].tokens);\n    const B2 = getString(partitionsB[1].tokens);\n    return A1 === B1 && A2 === B2 && partitionsA[1].color === partitionsB[1].color;\n};\n\nexport const getDecimalString = (length: number) =>\n    new Array(Math.min(Math.max(0, Number(length)), 30)).fill(0).join('');\n\nexport const setPatternDecimal = (patterns: string, decimalLength: number) => {\n    const tokens = patterns.split(';').map((pattern) => {\n        if (/\\.0?/.test(pattern)) {\n            return pattern.replace(\n                /\\.0*/g,\n                `${decimalLength > 0 ? '.' : ''}${getDecimalString(Number(decimalLength || 0))}`\n            );\n        }\n        if (/0([^0]?)|0$/.test(pattern)) {\n            return pattern.replace(\n                /0([^0]+)|0$/,\n                `0${decimalLength > 0 ? '.' : ''}${getDecimalString(Number(decimalLength || 0))}$1`\n            );\n        }\n\n        return pattern;\n    });\n    return tokens.join(';');\n};\n\nexport const isPatternHasDecimal = (pattern: string) => /\\.0?/.test(pattern) || /0([^0]?)|0$/.test(pattern);\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand, IMutationInfo, Nullable } from '@univerjs/core';\nimport type {\n    FormatType,\n    IRemoveNumfmtMutationParams,\n    ISetCellsNumfmt,\n    ISetNumfmtMutationParams,\n    ISetRangeValuesMutationParams,\n} from '@univerjs/sheets';\nimport { CellValueType, CommandType, ICommandService, IUndoRedoService, IUniverInstanceService, ObjectMatrix, sequenceExecute } from '@univerjs/core';\nimport { isTextFormat } from '@univerjs/engine-numfmt';\nimport {\n    checkCellValueType,\n    factoryRemoveNumfmtUndoMutation,\n    factorySetNumfmtUndoMutation,\n    getSheetCommandTarget,\n    rangeMerge,\n    RemoveNumfmtMutation,\n    SetNumfmtMutation,\n    SetRangeValuesMutation,\n    transformCellsToRange,\n} from '@univerjs/sheets';\n\nexport interface ISetNumfmtCommandParams {\n    unitId?: string;\n    subUnitId?: string;\n    values: Array<{ pattern?: string; row: number; col: number; type?: FormatType }>;\n}\n\nexport const SetNumfmtCommand: ICommand<ISetNumfmtCommandParams> = {\n    id: 'sheet.command.numfmt.set.numfmt',\n    type: CommandType.COMMAND,\n    // eslint-disable-next-line max-lines-per-function\n    handler: (accessor: IAccessor, params) => {\n        if (!params) {\n            return false;\n        }\n\n        const commandService = accessor.get(ICommandService);\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        const undoRedoService = accessor.get(IUndoRedoService);\n\n        const target = getSheetCommandTarget(univerInstanceService, params);\n        if (!target) return false;\n\n        const { unitId, subUnitId, worksheet } = target;\n        const setCells = params.values.filter((value) => !!value.pattern) as ISetCellsNumfmt;\n        const removeCells = params.values.filter((value) => !value.pattern);\n        const setRedos = transformCellsToRange(unitId, subUnitId, setCells);\n        const removeRedos: IRemoveNumfmtMutationParams = {\n            unitId,\n            subUnitId,\n            ranges: removeCells.map((cell) => ({\n                startColumn: cell.col,\n                startRow: cell.row,\n                endColumn: cell.col,\n                endRow: cell.row,\n            })),\n        };\n        const redos: Array<IMutationInfo<IRemoveNumfmtMutationParams | ISetNumfmtMutationParams | ISetRangeValuesMutationParams>> = [];\n        const undos: Array<IMutationInfo<IRemoveNumfmtMutationParams | ISetNumfmtMutationParams | ISetRangeValuesMutationParams>> = [];\n        if (setCells.length) {\n            const setCellTypeObj = setCells.reduce((pre, cur) => {\n                if (isTextFormat(cur.pattern)) {\n                    pre.setValue(cur.row, cur.col, { t: CellValueType.STRING });\n                }\n                const cell = worksheet.getCellRaw(cur.row, cur.col);\n                if (cell) {\n                    const type = checkCellValueType(cell.v);\n                    if (type !== cell.t) {\n                        pre.setValue(cur.row, cur.col, { t: type });\n                    }\n                }\n                return pre;\n            }, new ObjectMatrix<{ t: Nullable<CellValueType> }>()).getMatrix();\n\n            const undoSetCellTypeObj = new ObjectMatrix<{ t: Nullable<CellValueType> }>();\n            new ObjectMatrix<{ t: Nullable<CellValueType> }>(setCellTypeObj).forValue((row, col) => {\n                const cell = worksheet.getCellRaw(row, col);\n                if (cell) {\n                    undoSetCellTypeObj.setValue(row, col, { t: cell.t });\n                } else {\n                    undoSetCellTypeObj.setValue(row, col, { t: undefined });\n                }\n            });\n            Object.keys(setRedos.values).forEach((key) => {\n                const v = setRedos.values[key];\n                v.ranges = rangeMerge(v.ranges);\n            });\n            redos.push({\n                id: SetNumfmtMutation.id,\n                params: setRedos,\n            });\n            const undo = factorySetNumfmtUndoMutation(accessor, setRedos);\n            undos.push(...undo);\n        }\n\n        if (removeCells.length) {\n            removeRedos.ranges = rangeMerge(removeRedos.ranges);\n\n            const setCellTypeObj = removeCells.reduce((pre, cur) => {\n                const cell = worksheet.getCellRaw(cur.row, cur.col);\n                if (cell) {\n                    const type = checkCellValueType(cell.v);\n                    if (type !== cell.t) {\n                        pre.setValue(cur.row, cur.col, { t: type });\n                    }\n                }\n                return pre;\n            }, new ObjectMatrix<{ t: Nullable<CellValueType> }>()).getMatrix();\n\n            const undoSetCellTypeObj = new ObjectMatrix<{ t: Nullable<CellValueType> }>();\n            new ObjectMatrix<{ t: Nullable<CellValueType> }>(setCellTypeObj).forValue((row, col) => {\n                const cell = worksheet.getCellRaw(row, col);\n                if (cell) {\n                    undoSetCellTypeObj.setValue(row, col, { t: cell.t });\n                } else {\n                    undoSetCellTypeObj.setValue(row, col, { t: undefined });\n                }\n            });\n\n            redos.push({\n                id: RemoveNumfmtMutation.id,\n                params: removeRedos,\n            }, {\n                id: SetRangeValuesMutation.id,\n                params: {\n                    unitId,\n                    subUnitId,\n                    cellValue: setCellTypeObj,\n                },\n            });\n            const undo = factoryRemoveNumfmtUndoMutation(accessor, removeRedos);\n\n            undos.push({\n                id: SetRangeValuesMutation.id,\n                params: {\n                    unitId,\n                    subUnitId,\n                    cellValue: undoSetCellTypeObj.getMatrix(),\n                },\n            }, ...undo);\n        }\n\n        const result = sequenceExecute(redos, commandService).result;\n        if (result) {\n            undoRedoService.pushUndoRedo({\n                unitID: unitId,\n                undoMutations: undos,\n                redoMutations: redos,\n            });\n        }\n        return result;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand } from '@univerjs/core';\nimport type { ISetNumfmtCommandParams } from './set-numfmt.command';\nimport { CellValueType, CommandType, ICommandService, IUniverInstanceService, Range } from '@univerjs/core';\nimport { getSheetCommandTarget, INumfmtService, SheetsSelectionsService } from '@univerjs/sheets';\nimport { getDecimalFromPattern, setPatternDecimal } from '../../utils/decimal';\nimport { SetNumfmtCommand } from './set-numfmt.command';\n\nexport const AddDecimalCommand: ICommand = {\n    id: 'sheet.command.numfmt.add.decimal.command',\n    type: CommandType.COMMAND,\n    handler: async (accessor: IAccessor) => {\n        const commandService = accessor.get(ICommandService);\n        const selectionManagerService = accessor.get(SheetsSelectionsService);\n        const numfmtService = accessor.get(INumfmtService);\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        const selections = selectionManagerService.getCurrentSelections();\n        if (!selections || !selections.length) {\n            return false;\n        }\n\n        const target = getSheetCommandTarget(univerInstanceService);\n        if (!target) return false;\n\n        const { unitId, subUnitId } = target;\n\n        let maxDecimals = 0;\n        selections.forEach((selection) => {\n            Range.foreach(selection.range, (row, col) => {\n                const numfmtValue = numfmtService.getValue(unitId, subUnitId, row, col);\n                if (!numfmtValue) {\n                    const cell = target.worksheet.getCellRaw(row, col);\n                    if (!maxDecimals && cell && cell.t === CellValueType.NUMBER && cell.v) {\n                        const regResult = /\\.(\\d*)$/.exec(String(cell.v));\n                        if (regResult) {\n                            const length = regResult[1].length;\n                            if (!length) {\n                                return;\n                            }\n                            maxDecimals = Math.max(maxDecimals, length);\n                        }\n                    }\n                    return;\n                }\n                const decimals = getDecimalFromPattern(numfmtValue.pattern);\n                maxDecimals = decimals > maxDecimals ? decimals : maxDecimals;\n            });\n        });\n        const decimals = maxDecimals + 1;\n        const defaultPattern = setPatternDecimal(`0${decimals > 0 ? '.0' : ''}`, decimals);\n        const values: ISetNumfmtCommandParams['values'] = [];\n\n        selections.forEach((selection) => {\n            Range.foreach(selection.range, (row, col) => {\n                const numfmtValue = numfmtService.getValue(unitId, subUnitId, row, col);\n                if (!numfmtValue) {\n                    values.push({\n                        row,\n                        col,\n                        pattern: defaultPattern,\n                    });\n                } else {\n                    const decimals = getDecimalFromPattern(numfmtValue.pattern);\n                    const pattern = setPatternDecimal(numfmtValue.pattern, decimals + 1);\n                    pattern !== numfmtValue.pattern &&\n                        values.push({\n                            row,\n                            col,\n                            pattern,\n                        });\n                }\n            });\n        });\n        if (values.length) {\n            const result = await commandService.executeCommand(SetNumfmtCommand.id, { values });\n            return result;\n        }\n        return false;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const currencySymbols = [\n    '$',\n    '\u00A3',\n    '\u00A5',\n    '\u00A4',\n    '\u058F',\n    '\u060B',\n    '\u09F3',\n    '\u0E3F',\n    // '\u17DB',\n    '\u20A1',\n    '\u20A6',\n    '\u20A9',\n    '\u20AA',\n    '\u20AB',\n    '\u20AC',\n    '\u20AD',\n    '\u20AE',\n    '\u20B1',\n    '\u20B2',\n    '\u20B4',\n    '\u20B8',\n    '\u20B9',\n    '\u20BA',\n    '\u20BC',\n    '\u20BD',\n    '\u20BE',\n    '\u20BF',\n];\n\nexport const countryCurrencyMap = {\n    US: '$', // United States Dollar\n    CA: 'C$', // Canadian Dollar\n    GB: '\u00A3', // British Pound Sterling\n    JP: '\u00A5', // Japanese Yen\n    IN: '\u20B9', // Indian Rupee\n    AU: 'A$', // Australian Dollar\n    CN: '\u00A5', // Chinese Yuan\n    KR: '\u20A9', // South Korean Won\n    RU: '\u20BD', // Russian Ruble\n    // Euro countries\n    AT: '\u20AC',\n    BE: '\u20AC',\n    CY: '\u20AC',\n    EE: '\u20AC',\n    FI: '\u20AC',\n    FR: '\u20AC',\n    DE: '\u20AC',\n    GR: '\u20AC',\n    IE: '\u20AC',\n    IT: '\u20AC',\n    LV: '\u20AC',\n    LT: '\u20AC',\n    LU: '\u20AC',\n    MT: '\u20AC',\n    NL: '\u20AC',\n    PT: '\u20AC',\n    SK: '\u20AC',\n    SI: '\u20AC',\n    ES: '\u20AC',\n    // Add more mappings as needed\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DATEFMTLISG = [\n    {\n        label: '1930-08-05',\n        suffix: 'yyyy-MM-dd',\n    },\n    {\n        label: '1930/08/05',\n        suffix: 'yyyy/MM/dd',\n    },\n    {\n        label: '1930\u5E7408\u670805\u65E5',\n        suffix: 'yyyy\"\u5E74\"MM\"\u6708\"dd\"\u65E5\"',\n    },\n    {\n        label: '08-05',\n        suffix: 'MM-dd',\n    },\n    {\n        label: '8\u67085\u65E5',\n        suffix: 'M\"\u6708\"d\"\u65E5\"',\n    },\n    {\n        label: '13:30:30',\n        suffix: 'h:mm:ss',\n    },\n    {\n        label: '13:30',\n        suffix: 'h:mm',\n    },\n    {\n        label: '\u4E0B\u534801:30',\n        suffix: 'A/P hh:mm',\n    },\n    {\n        label: '\u4E0B\u53481:30',\n        suffix: 'A/P h:mm',\n    },\n    {\n        label: '\u4E0B\u53481:30:30',\n        suffix: 'A/P h:mm:ss',\n    },\n    {\n        label: '08-05 \u4E0B\u5348 01:30',\n        suffix: 'MM-dd A/P hh:mm',\n    },\n];\n\nexport const NUMBERFORMAT = [\n    {\n        label: '(1,235)',\n        suffix: '#,##0_);(#,##0)',\n    },\n    {\n        label: '(1,235) ',\n        suffix: '#,##0_);[Red](#,##0)',\n        color: 'red',\n    },\n    {\n        label: '1,234.56',\n        suffix: '#,##0.00_);#,##0.00',\n    },\n    {\n        label: '1,234.56',\n        suffix: '#,##0.00_);[Red]#,##0.00',\n        color: 'red',\n    },\n    {\n        label: '-1,234.56',\n        suffix: '#,##0.00_);-#,##0.00',\n    },\n    {\n        label: '-1,234.56',\n        suffix: '#,##0.00_);[Red]-#,##0.00',\n        color: 'red',\n    },\n];\nexport const CURRENCYFORMAT = [\n    {\n        label: (suffix: string) => `${suffix}1,235`,\n        suffix: (suffix: string) => `\"${suffix}\"#,##0.00_);\"${suffix}\"#,##0.00`,\n    },\n    {\n        label: (suffix: string) => `${suffix}1,235`,\n        suffix: (suffix: string) => `\"${suffix}\"#,##0.00_);[Red]\"${suffix}\"#,##0.00`,\n        color: 'red',\n    },\n    {\n        label: (suffix: string) => `(${suffix}1,235)`,\n        suffix: (suffix: string) => `\"${suffix}\"#,##0.00_);(\"${suffix}\"#,##0.00)`,\n    },\n    {\n        label: (suffix: string) => `(${suffix}1,235)`,\n        suffix: (suffix: string) => `\"${suffix}\"#,##0.00_);[Red](\"${suffix}\"#,##0.00)`,\n        color: 'red',\n    },\n    {\n        label: (suffix: string) => `-${suffix}1,235`,\n        suffix: (suffix: string) => `\"${suffix}\"#,##0.00_);-\"${suffix}\"#,##0.00`,\n    },\n    {\n        label: (suffix: string) => `-${suffix}1,235`,\n        suffix: (suffix: string) => `\"${suffix}\"#,##0.00_);[Red]-\"${suffix}\"#,##0.00`,\n        color: 'red',\n    },\n];\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { countryCurrencyMap } from '../base/const/currency-symbols';\nimport { BehaviorSubject } from 'rxjs';\n\nexport class MenuCurrencyService {\n    private _currencySymbol$ = new BehaviorSubject<keyof typeof countryCurrencyMap>('US');\n    public readonly currencySymbol$ = this._currencySymbol$.asObservable();\n\n    /**\n     * Set the currency symbol by setting the country code.\n     */\n    public setCurrencySymbolByCountryCode(symbol: keyof typeof countryCurrencyMap) {\n        this._currencySymbol$.next(symbol);\n    }\n\n    public getCurrencySymbol() {\n        return this._currencySymbol$.getValue();\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand } from '@univerjs/core';\nimport type { ISetNumfmtCommandParams } from './set-numfmt.command';\nimport { CommandType, ICommandService, Range } from '@univerjs/core';\nimport { SheetsSelectionsService } from '@univerjs/sheets';\nimport { countryCurrencyMap } from '../../base/const/currency-symbols';\nimport { CURRENCYFORMAT } from '../../base/const/formatdetail';\nimport { MenuCurrencyService } from '../../service/menu.currency.service';\nimport { SetNumfmtCommand } from './set-numfmt.command';\n\nexport const SetCurrencyCommand: ICommand = {\n    id: 'sheet.command.numfmt.set.currency',\n    type: CommandType.COMMAND,\n    handler: async (accessor: IAccessor) => {\n        const commandService = accessor.get(ICommandService);\n        const selectionManagerService = accessor.get(SheetsSelectionsService);\n        const menuCurrencyService = accessor.get(MenuCurrencyService);\n        const symbol = countryCurrencyMap[menuCurrencyService.getCurrencySymbol()] || '$';\n        const selections = selectionManagerService.getCurrentSelections();\n        if (!selections || !selections.length) {\n            return false;\n        }\n        const values: ISetNumfmtCommandParams['values'] = [];\n\n        const suffix = CURRENCYFORMAT[4].suffix(symbol);\n\n        selections.forEach((selection) => {\n            Range.foreach(selection.range, (row, col) => {\n                values.push({ row, col, pattern: suffix, type: 'currency' });\n            });\n        });\n        const result = await commandService.executeCommand(SetNumfmtCommand.id, { values });\n        return result;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand } from '@univerjs/core';\nimport type { ISetNumfmtCommandParams } from './set-numfmt.command';\nimport { CommandType, ICommandService, Range } from '@univerjs/core';\nimport { SheetsSelectionsService } from '@univerjs/sheets';\nimport { SetNumfmtCommand } from './set-numfmt.command';\n\nexport const SetPercentCommand: ICommand = {\n    id: 'sheet.command.numfmt.set.percent',\n    type: CommandType.COMMAND,\n    handler: async (accessor: IAccessor) => {\n        const commandService = accessor.get(ICommandService);\n        const selectionManagerService = accessor.get(SheetsSelectionsService);\n\n        const selections = selectionManagerService.getCurrentSelections();\n        if (!selections || !selections.length) {\n            return false;\n        }\n        const values: ISetNumfmtCommandParams['values'] = [];\n\n        const suffix = '0%';\n\n        selections.forEach((selection) => {\n            Range.foreach(selection.range, (row, col) => {\n                values.push({ row, col, pattern: suffix, type: 'percent' });\n            });\n        });\n        const result = await commandService.executeCommand(SetNumfmtCommand.id, { values });\n        return result;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand } from '@univerjs/core';\nimport type { ISetNumfmtCommandParams } from './set-numfmt.command';\nimport { CellValueType, CommandType, ICommandService, IUniverInstanceService, Range } from '@univerjs/core';\nimport { getSheetCommandTarget, INumfmtService, SheetsSelectionsService } from '@univerjs/sheets';\nimport { getDecimalFromPattern, setPatternDecimal } from '../../utils/decimal';\nimport { SetNumfmtCommand } from './set-numfmt.command';\n\nexport const SubtractDecimalCommand: ICommand = {\n    id: 'sheet.command.numfmt.subtract.decimal.command',\n    type: CommandType.COMMAND,\n    handler: async (accessor: IAccessor) => {\n        const commandService = accessor.get(ICommandService);\n        const selectionManagerService = accessor.get(SheetsSelectionsService);\n        const numfmtService = accessor.get(INumfmtService);\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n\n        const selections = selectionManagerService.getCurrentSelections();\n        if (!selections || !selections.length) {\n            return false;\n        }\n\n        const target = getSheetCommandTarget(univerInstanceService);\n        if (!target) return false;\n\n        const { unitId, subUnitId } = target;\n\n        let maxDecimals = 0;\n        selections.forEach((selection) => {\n            Range.foreach(selection.range, (row, col) => {\n                const numfmtValue = numfmtService.getValue(unitId, subUnitId, row, col);\n                if (!numfmtValue) {\n                    const cell = target.worksheet.getCellRaw(row, col);\n                    if (!maxDecimals && cell && cell.t === CellValueType.NUMBER && cell.v) {\n                        const regResult = /\\.(\\d*)$/.exec(String(cell.v));\n                        if (regResult) {\n                            const length = regResult[1].length;\n                            if (!length) {\n                                return;\n                            }\n                            maxDecimals = Math.max(maxDecimals, length);\n                        }\n                    }\n                    return;\n                }\n                const decimals = getDecimalFromPattern(numfmtValue.pattern);\n                maxDecimals = decimals > maxDecimals ? decimals : maxDecimals;\n            });\n        });\n        const decimals = maxDecimals - 1;\n\n        const defaultPattern = setPatternDecimal(`0${decimals > 0 ? '.0' : '.'}`, decimals);\n        const values: ISetNumfmtCommandParams['values'] = [];\n\n        selections.forEach((selection) => {\n            Range.foreach(selection.range, (row, col) => {\n                const numfmtValue = numfmtService.getValue(unitId, subUnitId, row, col);\n                if (!numfmtValue) {\n                    values.push({\n                        row,\n                        col,\n                        pattern: defaultPattern,\n                    });\n                } else {\n                    const decimals = getDecimalFromPattern(numfmtValue.pattern);\n                    values.push({\n                        row,\n                        col,\n                        pattern: setPatternDecimal(numfmtValue.pattern, decimals - 1),\n                    });\n                }\n            });\n        });\n\n        const result = await commandService.executeCommand(SetNumfmtCommand.id, { values });\n        return result;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { INumfmtLocalTag } from '@univerjs/core';\nimport type { FormatType } from '@univerjs/sheets';\nimport { numfmt } from '@univerjs/core';\nimport { stripErrorMargin } from '@univerjs/engine-formula';\n\nexport const getPatternType = (pattern: string): FormatType => numfmt.getInfo(pattern).type || 'unknown';\ninterface IPatternPreview {\n    result: string;\n    color?: string;\n}\n\nexport const getPatternPreview = (pattern: string, value: number, locale: INumfmtLocalTag = 'en'): IPatternPreview => {\n    const info = numfmt.getInfo(pattern);\n    const negInfo = info._partitions[1];\n    const result = numfmt.format(pattern, value, { locale, throws: false });\n    if (value < 0) {\n        return {\n            result,\n            color: negInfo.color,\n        };\n    }\n    return {\n        result,\n    };\n};\n\nexport const getPatternPreviewIgnoreGeneral = (pattern: string, value: number, locale?: INumfmtLocalTag): IPatternPreview => {\n    if (pattern === 'General') {\n        return {\n            result: String(stripErrorMargin(value)), // In Excel, the default General format also needs to handle numeric precision.\n        };\n    }\n    return getPatternPreview(pattern, value, locale);\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n    ICellData,\n    ICellDataForSheetInterceptor,\n    INumfmtLocalTag,\n    Workbook,\n} from '@univerjs/core';\nimport type { ISetNumfmtMutationParams, ISetRangeValuesMutationParams } from '@univerjs/sheets';\nimport {\n    CellValueType,\n    Disposable,\n    ICommandService,\n    Inject,\n    InterceptorEffectEnum,\n    IUniverInstanceService,\n    LocaleService,\n    LocaleType,\n    ObjectMatrix,\n    Range,\n    ThemeService,\n    UniverInstanceType,\n} from '@univerjs/core';\nimport { isTextFormat } from '@univerjs/engine-numfmt';\nimport { checkCellValueType, InterceptCellContentPriority, INTERCEPTOR_POINT, INumfmtService, SetNumfmtMutation, SetRangeValuesMutation, SheetInterceptorService } from '@univerjs/sheets';\nimport { BehaviorSubject, merge, of, skip, switchMap } from 'rxjs';\nimport { getPatternPreviewIgnoreGeneral } from '../utils/pattern';\n\nconst TEXT_FORMAT_MARK = {\n    tl: {\n        size: 6,\n        color: '#409f11',\n    },\n};\nexport class SheetsNumfmtCellContentController extends Disposable {\n    private _local$ = new BehaviorSubject<INumfmtLocalTag>('en');\n    public local$ = this._local$.asObservable();\n    constructor(\n        @IUniverInstanceService private readonly _instanceService: IUniverInstanceService,\n        @Inject(SheetInterceptorService) private _sheetInterceptorService: SheetInterceptorService,\n        @Inject(ThemeService) private _themeService: ThemeService,\n        @Inject(ICommandService) private _commandService: ICommandService,\n        @Inject(INumfmtService) private _numfmtService: INumfmtService,\n        @Inject(LocaleService) private _localeService: LocaleService\n\n    ) {\n        super();\n        this._initInterceptorCellContent();\n    }\n\n    public get local(): INumfmtLocalTag {\n        const _local = this._local$.getValue();\n        if (_local) {\n            return _local;\n        }\n        const currentLocale = this._localeService.getCurrentLocale();\n\n        switch (currentLocale) {\n            case LocaleType.FR_FR: {\n                return 'fr';\n            }\n            case LocaleType.RU_RU: {\n                return 'ru';\n            }\n            case LocaleType.VI_VN: {\n                return 'vi';\n            }\n            case LocaleType.ZH_CN: {\n                return 'zh-CN';\n            }\n            case LocaleType.ZH_TW: {\n                return 'zh-TW';\n            }\n            case LocaleType.EN_US:\n            case LocaleType.FA_IR:\n            default: {\n                return 'en';\n            }\n        }\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    private _initInterceptorCellContent() {\n        const renderCache = new ObjectMatrix<{ result: ICellData; parameters: string | number }>();\n\n        this.disposeWithMe(merge(this._local$, this._localeService.currentLocale$).subscribe(() => {\n            renderCache.reset();\n        }));\n\n        this.disposeWithMe(this._sheetInterceptorService.intercept(INTERCEPTOR_POINT.CELL_CONTENT, {\n            effect: InterceptorEffectEnum.Value | InterceptorEffectEnum.Style,\n            handler: (cell, location, next) => {\n                const unitId = location.unitId;\n                const sheetId = location.subUnitId;\n                let numfmtValue;\n                const originCellValue = cell;\n                if (!originCellValue) {\n                    return next(cell);\n                }\n\n                if (cell?.s) {\n                    const style = location.workbook.getStyles().get(cell.s);\n                    if (style?.n) {\n                        numfmtValue = style.n;\n                    }\n                }\n\n                if (!numfmtValue) {\n                    numfmtValue = this._numfmtService.getValue(unitId, sheetId, location.row, location.col);\n                }\n\n                if (!numfmtValue) {\n                    return next(cell);\n                }\n\n                const type = checkCellValueType(originCellValue.v);\n                // just handle number\n                if (type !== CellValueType.NUMBER) {\n                    return next(cell);\n                }\n\n                 // Add error marker to text format number\n                if (isTextFormat(numfmtValue.pattern)) {\n                    return next({\n                        ...cell,\n                        t: CellValueType.STRING,\n                        markers: {\n                            ...cell?.markers,\n                            ...TEXT_FORMAT_MARK,\n                        },\n                    });\n                }\n\n                let numfmtRes: string = '';\n                const cache = renderCache.getValue(location.row, location.col);\n                if (cache && cache.parameters === `${originCellValue.v}_${numfmtValue.pattern}`) {\n                    return next({ ...cell, ...cache.result });\n                }\n\n                const info = getPatternPreviewIgnoreGeneral(numfmtValue.pattern, Number(originCellValue.v), this.local);\n                numfmtRes = info.result;\n                if (!numfmtRes) {\n                    return next(cell);\n                }\n\n                const res: ICellDataForSheetInterceptor = { v: numfmtRes, t: CellValueType.NUMBER };\n                if (info.color) {\n                    const color = this._themeService.getCurrentTheme()[`${info.color}500`];\n\n                    if (color) {\n                        res.interceptorStyle = { cl: { rgb: color } };\n                    }\n                }\n\n                renderCache.setValue(location.row, location.col, {\n                    result: res,\n                    parameters: `${originCellValue.v}_${numfmtValue.pattern}`,\n                });\n\n                return next({ ...cell, ...res });\n            },\n            priority: InterceptCellContentPriority.NUMFMT,\n        }));\n\n        this.disposeWithMe(this._commandService.onCommandExecuted((commandInfo) => {\n            if (commandInfo.id === SetNumfmtMutation.id) {\n                const params = commandInfo.params as ISetNumfmtMutationParams;\n                Object.keys(params.values).forEach((key) => {\n                    const v = params.values[key];\n                    v.ranges.forEach((range) => {\n                        Range.foreach(range, (row, col) => {\n                            renderCache.realDeleteValue(row, col);\n                        });\n                    });\n                });\n            } else if (commandInfo.id === SetRangeValuesMutation.id) {\n                const params = commandInfo.params as ISetRangeValuesMutationParams;\n                new ObjectMatrix(params.cellValue).forValue((row, col) => {\n                    renderCache.realDeleteValue(row, col);\n                });\n            }\n        }));\n\n        this.disposeWithMe(\n            this._instanceService.getCurrentTypeOfUnit$<Workbook>(UniverInstanceType.UNIVER_SHEET)\n                .pipe(\n                    switchMap((workbook) => workbook?.activeSheet$ ?? of(null)),\n                    skip(1)\n                )\n                .subscribe(() => renderCache.reset())\n        );\n    }\n\n    setNumfmtLocal(local: INumfmtLocalTag) {\n        this._local$.next(local);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { countryCurrencyMap } from '../base/const/currency-symbols';\nimport { Disposable } from '@univerjs/core';\nimport { BehaviorSubject } from 'rxjs';\n\nexport class NumfmtCurrencyController extends Disposable {\n    private _currencySymbol$ = new BehaviorSubject<keyof typeof countryCurrencyMap>('US');\n    public readonly currencySymbol$ = this._currencySymbol$.asObservable();\n\n    /**\n     * Set the currency symbol by setting the country code.\n     */\n    public setCurrencySymbolByCountryCode(symbol: keyof typeof countryCurrencyMap) {\n        this._currencySymbol$.next(symbol);\n    }\n\n    public getCurrencySymbol() {\n        return this._currencySymbol$.getValue();\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DependentOn, ICommandService, Inject, Injector, Plugin, registerDependencies, touchDependencies, UniverInstanceType } from '@univerjs/core';\nimport { UniverSheetsPlugin } from '@univerjs/sheets';\nimport { SHEET_NUMFMT_PLUGIN } from './base/const/plugin-name';\nimport { AddDecimalCommand } from './commands/commands/add-decimal.command';\nimport { SetCurrencyCommand } from './commands/commands/set-currency.command';\nimport { SetNumfmtCommand } from './commands/commands/set-numfmt.command';\nimport { SetPercentCommand } from './commands/commands/set-percent.command';\nimport { SubtractDecimalCommand } from './commands/commands/subtract-decimal.command';\nimport { SheetsNumfmtCellContentController } from './controllers/numfmt-cell-content.controller';\nimport { NumfmtCurrencyController } from './controllers/numfmt-currency.controller';\nimport { MenuCurrencyService } from './service/menu.currency.service';\n\n@DependentOn(UniverSheetsPlugin)\nexport class UniverSheetsNumfmtPlugin extends Plugin {\n    static override pluginName = SHEET_NUMFMT_PLUGIN;\n    static override type = UniverInstanceType.UNIVER_SHEET;\n\n    constructor(\n        private readonly _config: undefined = undefined,\n        @Inject(Injector) override readonly _injector: Injector,\n        @ICommandService private readonly _commandService: ICommandService\n    ) {\n        super();\n    }\n\n    override onStarting(): void {\n        registerDependencies(this._injector, [\n            [SheetsNumfmtCellContentController],\n            [MenuCurrencyService],\n            [NumfmtCurrencyController],\n        ]);\n\n        touchDependencies(this._injector, [\n            [SheetsNumfmtCellContentController],\n        ]);\n    }\n\n    override onRendered(): void {\n        touchDependencies(this._injector, [\n            [NumfmtCurrencyController],\n        ]);\n\n        [\n            AddDecimalCommand,\n            SubtractDecimalCommand,\n            SetCurrencyCommand,\n            SetPercentCommand,\n            SetNumfmtCommand,\n        ].forEach((config) => {\n            this.disposeWithMe(this._commandService.registerCommand(config));\n        });\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { currencySymbols } from '../base/const/currency-symbols';\n\nexport const getCurrencyType = (pattern: string) => {\n    const item = currencySymbols.find((code) => pattern.includes(code));\n    return item;\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { currencySymbols } from '../base/const/currency-symbols';\nimport { CURRENCYFORMAT, DATEFMTLISG, NUMBERFORMAT } from '../base/const/formatdetail';\n\nexport const getCurrencyOptions = () => currencySymbols.map((item) => ({ label: item, value: item }));\n\nexport const getCurrencyFormatOptions = (suffix: string) =>\n    CURRENCYFORMAT.map((item) => ({\n        label: item.label(suffix),\n        value: item.suffix(suffix),\n        color: item.color,\n    }));\n\nexport const getDateFormatOptions = () => DATEFMTLISG.map((item) => ({ label: item.label, value: item.suffix }));\n\nexport const getNumberFormatOptions = () =>\n    NUMBERFORMAT.map((item) => ({ label: item.label, value: item.suffix, color: item.color }));\n"],
  "mappings": "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",
  "names": ["decimals", "decimals"]
}
