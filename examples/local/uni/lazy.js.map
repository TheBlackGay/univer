{
  "version": 3,
  "sources": ["../../../packages-experimental/uni-formula-ui/src/const.ts", "../../../packages-experimental/uni-formula-ui/src/commands/commands/doc.command.ts", "../../../packages-experimental/uni-formula-ui/src/services/slide-ui-formula-cache.service.ts", "../../../packages-experimental/uni-formula-ui/src/commands/commands/slide.command.ts", "../../../packages-experimental/uni-formula-ui/src/services/formula-popup.service.ts", "../../../packages-experimental/uni-formula-ui/src/commands/operations/operation.ts", "../../../packages-experimental/uni-formula-ui/src/views/components/DocFormulaPopup.tsx", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages-experimental/uni-formula-ui/src/views/components/index.module.less", "../../../packages-experimental/uni-formula-ui/src/controllers/doc-formula-input.controller.ts", "../../../packages-experimental/uni-formula-ui/src/controllers/slide-formula-input.controller.ts", "../../../packages-experimental/uni-formula-ui/src/controllers/uni-formula-ui.controller.ts", "../../../packages-experimental/uni-formula-ui/src/services/uni-formula.service.ts", "../../../packages-experimental/uni-formula-ui/src/uni-formula-ui.plugin.ts", "../../src/uni/lazy.ts"],
  "sourcesContent": ["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DOC_FORMULA_UI_PLUGIN_NAME = 'DOC_FORMULA_UI_PLUGIN';\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommand, IDocumentBody, IMutationInfo } from '@univerjs/core';\nimport type { IAddDocUniFormulaMutationParams, IRemoveDocUniFormulaMutationParams, IUpdateDocUniFormulaMutationParams } from '@univerjs/uni-formula';\nimport { BuildTextUtils, CommandType, CustomRangeType, generateRandomId, ICommandService, LocaleService, makeCustomRangeStream, sequenceExecute } from '@univerjs/core';\nimport { replaceSelectionFactory } from '@univerjs/docs';\nimport { AddDocUniFormulaMutation, RemoveDocUniFormulaMutation, UpdateDocUniFormulaMutation } from '@univerjs/uni-formula';\n\nexport interface IAddDocUniFormulaCommandParams {\n    unitId: string;\n    startIndex: number;\n\n    f: string;\n}\n\nexport const AddDocUniFormulaCommand: ICommand<IAddDocUniFormulaCommandParams> = {\n    type: CommandType.COMMAND,\n    id: 'doc.command.add-uni-formula',\n    async handler(accessor, params: IAddDocUniFormulaCommandParams) {\n        const { f, unitId, startIndex } = params;\n\n        const commandService = accessor.get(ICommandService);\n        const localeService = accessor.get(LocaleService);\n\n        const rangeId = generateRandomId();\n        const placeholder = localeService.t('uni-formula.command.stream-placeholder');\n        const dataStream = makeCustomRangeStream(placeholder);\n        const body: IDocumentBody = {\n            dataStream,\n            customRanges: [{\n                startIndex: 0,\n                endIndex: dataStream.length - 1,\n                rangeId,\n                rangeType: CustomRangeType.UNI_FORMULA,\n                wholeEntity: true,\n            }],\n        };\n\n        const insertCustomRangeMutation = replaceSelectionFactory(accessor, {\n            unitId,\n            body,\n            selection: BuildTextUtils.selection.makeSelection(startIndex, startIndex + 1),\n        });\n\n        if (insertCustomRangeMutation) {\n            const addFormulaResourceMutation: IMutationInfo<IAddDocUniFormulaMutationParams> = {\n                id: AddDocUniFormulaMutation.id,\n                params: { unitId, rangeId, f },\n            };\n\n            return sequenceExecute([insertCustomRangeMutation, addFormulaResourceMutation], commandService).result;\n        }\n\n        return false;\n    },\n};\n\nexport interface IUpdateDocUniFormulaCommandParams {\n    unitId: string;\n    rangeId: string;\n    f: string;\n}\n\n// TODO: implement update & remove command\n\nexport const UpdateDocUniFormulaCommand: ICommand<IUpdateDocUniFormulaCommandParams> = {\n    type: CommandType.COMMAND,\n    id: 'doc.command.update-uni-formula',\n    handler: (accessor, params: IUpdateDocUniFormulaCommandParams) => {\n        const commandService = accessor.get(ICommandService);\n        return commandService.syncExecuteCommand(UpdateDocUniFormulaMutation.id, params as IUpdateDocUniFormulaMutationParams);\n    },\n};\n\nexport interface IRemoveDocUniFormulaCommandParams {\n    unitId: string;\n    rangeId: string;\n}\n\nexport const RemoveDocUniFormulaCommand: ICommand<IRemoveDocUniFormulaCommandParams> = {\n    type: CommandType.COMMAND,\n    id: 'doc.command.remove-uni-formula',\n    handler: (accessor, params: IRemoveDocUniFormulaCommandParams) => {\n        const commandService = accessor.get(ICommandService);\n        // TODO: maybe remove formula under selection?\n        return commandService.syncExecuteCommand(RemoveDocUniFormulaMutation.id, params as IRemoveDocUniFormulaMutationParams);\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CustomRangeType, Disposable } from '@univerjs/core';\nimport { ISlideEditorBridgeService } from '@univerjs/slides-ui';\nimport { IUniFormulaService } from '@univerjs/uni-formula';\nimport type { RichText } from '@univerjs/engine-render';\nimport type { IAddSlideUniFormulaCommandParams } from '../commands/commands/slide.command';\nimport type { UniFormulaService } from './uni-formula.service';\n\nexport class SlideUIFormulaCacheService extends Disposable {\n    private readonly _caches: Map<string, IAddSlideUniFormulaCommandParams> = new Map();\n\n    constructor(\n        @ISlideEditorBridgeService private readonly _editorBridgeService: ISlideEditorBridgeService,\n        @IUniFormulaService private readonly _uniFormulaService: UniFormulaService\n    ) {\n        super();\n\n        this._editorBridgeService.endEditing$.subscribe((richText) => this._checkApplyCache(richText));\n    }\n\n    writeCache(rangeId: string, params: IAddSlideUniFormulaCommandParams) {\n        if (this._caches.size && this._caches.values().next().value?.unitId !== params.unitId) {\n            this.clearCache();\n        }\n\n        this._caches.set(rangeId, params);\n    }\n\n    private _checkApplyCache(richText: RichText) {\n        const document = richText.documentData;\n        const customRanges = document.body?.customRanges;\n        if (!customRanges || customRanges.length === 0) {\n            this.clearCache();\n            return;\n        };\n\n        // Check if there are custom ranges in the rich text. If there are, we would write apply the cache\n        // to the uni formula service\n        customRanges.forEach((range) => {\n            if (range.rangeType === CustomRangeType.UNI_FORMULA) {\n                const cache = this._caches.get(range.rangeId);\n                if (cache) {\n                    this._applyCache(range.rangeId, cache);\n                } else {\n                    throw new Error('[SlideUIFormulaCacheService]: cache not found!');\n                }\n            }\n        });\n\n        this.clearCache();\n    }\n\n    private _applyCache(rangeId: string, cache: IAddSlideUniFormulaCommandParams) {\n        const { unitId, pageId, elementId, f } = cache;\n        this._uniFormulaService.registerSlideFormula(unitId, pageId, elementId, rangeId, f);\n    }\n\n    clearCache() {\n        this._caches.clear();\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommand, IDocumentBody } from '@univerjs/core';\nimport { BuildTextUtils, CommandType, CustomRangeType, generateRandomId, ICommandService, LocaleService, makeCustomRangeStream } from '@univerjs/core';\nimport { replaceSelectionFactory } from '@univerjs/docs';\nimport { SLIDE_EDITOR_ID } from '@univerjs/slides-ui';\nimport { SlideUIFormulaCacheService } from '../../services/slide-ui-formula-cache.service';\n\nexport interface IAddSlideUniFormulaCommandParams {\n    unitId: string;\n    pageId: string;\n    elementId: string;\n    startIndex: number;\n\n    f: string;\n}\n\nexport const AddSlideUniFormulaCommand: ICommand<IAddSlideUniFormulaCommandParams> = {\n    type: CommandType.COMMAND,\n    id: 'slide.command.add-slide-uni-formula',\n    async handler(accessor, params: IAddSlideUniFormulaCommandParams) {\n        const { startIndex } = params;\n\n        const commandService = accessor.get(ICommandService);\n        const slideUiFormulaCacheService = accessor.get(SlideUIFormulaCacheService);\n        const localeService = accessor.get(LocaleService);\n        const placeholder = localeService.t('uni-formula.command.stream-placeholder');\n\n        // TODO: use placeholder here?\n        const rangeId = generateRandomId();\n        const dataStream = makeCustomRangeStream(placeholder);\n        const body: IDocumentBody = {\n            dataStream,\n            customRanges: [{\n                startIndex: 0,\n                endIndex: dataStream.length - 1,\n                rangeId,\n                rangeType: CustomRangeType.UNI_FORMULA,\n                wholeEntity: true,\n            }],\n        };\n\n        const insertCustomRangeMutation = replaceSelectionFactory(accessor, {\n            unitId: SLIDE_EDITOR_ID,\n            body,\n            selection: BuildTextUtils.selection.makeSelection(startIndex, startIndex + 1),\n        });\n\n        // NOTE: For slides, the process to update a element's content is pretty different from docs.\n        // Since the text editor in slides is temporary, we don't need to update the content of the element when user\n        // has not confirmed the change. So we don't need to add a mutation to update resources here.\n        // We will do that when user confirms the change.\n\n        if (insertCustomRangeMutation) {\n            slideUiFormulaCacheService.writeCache(rangeId, params);\n            return commandService.executeCommand(insertCustomRangeMutation.id, insertCustomRangeMutation.params, { onlyLocal: true });\n        }\n\n        return false;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, Nullable } from '@univerjs/core';\nimport type { IShortcutItem } from '@univerjs/ui';\nimport type { IAddDocUniFormulaCommandParams } from '../commands/commands/doc.command';\nimport type { IAddSlideUniFormulaCommandParams } from '../commands/commands/slide.command';\nimport type { IPopupPosition } from '../commands/operations/operation';\nimport { BuildTextUtils, Disposable, FORMULA_EDITOR_ACTIVATED, ICommandService, IContextService, ILogService, Inject } from '@univerjs/core';\nimport { DocCanvasPopManagerService } from '@univerjs/docs-ui';\nimport { FORMULA_PROMPT_ACTIVATED } from '@univerjs/sheets-formula-ui';\nimport { IShortcutService, KeyCode } from '@univerjs/ui';\nimport { IUniFormulaService } from '@univerjs/uni-formula';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { AddDocUniFormulaCommand } from '../commands/commands/doc.command';\nimport { AddSlideUniFormulaCommand } from '../commands/commands/slide.command';\nimport { ConfirmFormulaPopupCommand, isSlidePosition } from '../commands/operations/operation';\n\nexport const DOC_FORMULA_POPUP_KEY = 'DOC_FORMULA_POPUP' as const;\n\nexport interface IUniFormulaPopupInfo {\n    unitId: string;\n    type: 'new' | 'existing';\n    f: Nullable<string>;\n    disposable: IDisposable;\n    startIndex: number;\n    position?: IPopupPosition;\n}\n\nexport class UniFormulaPopupService extends Disposable {\n    private readonly _popupInfo$ = new BehaviorSubject<Nullable<IUniFormulaPopupInfo>>(null);\n    readonly popupInfo$ = this._popupInfo$.asObservable();\n    get popupInfo(): Nullable<IUniFormulaPopupInfo> { return this._popupInfo$.getValue(); }\n\n    private _popupLocked = false;\n    get popupLocked(): boolean { return this._popupLocked; }\n\n    private readonly _popupHovered$ = new Subject<boolean>();\n    readonly popupHovered$ = this._popupHovered$.asObservable();\n\n    private _cachedFormulaString = '';\n\n    constructor(\n        @Inject(DocCanvasPopManagerService) private readonly _docCanvasPopupManagerService: DocCanvasPopManagerService,\n        @IUniFormulaService private readonly _uniFormulaService: IUniFormulaService,\n        @IContextService private readonly _contextService: IContextService,\n        @ILogService private readonly _logService: ILogService,\n        @ICommandService private readonly _commandService: ICommandService,\n        @IShortcutService private readonly _shortcutService: IShortcutService\n    ) {\n        super();\n\n        const UniFormulaConfirmShortcut: IShortcutItem = {\n            id: ConfirmFormulaPopupCommand.id,\n            binding: KeyCode.ENTER,\n            description: 'shortcut.doc.confirm-formula-popup',\n            preconditions: (contextService) =>\n                !contextService.getContextValue(FORMULA_PROMPT_ACTIVATED) && this.canConfirmPopup(),\n            priority: 10000,\n        };\n\n        this.disposeWithMe(this._shortcutService.registerShortcut(UniFormulaConfirmShortcut));\n    }\n\n    override dispose(): void {\n        super.dispose();\n\n        this._popupInfo$.next(null);\n        this._popupInfo$.complete();\n\n        this._popupHovered$.complete();\n    }\n\n    cacheFormulaString(f: string): void {\n        this._cachedFormulaString = f;\n    }\n\n    hoverPopup(hovered: boolean): void {\n        this._popupHovered$.next(hovered);\n    }\n\n    showDocPopup(unitId: string, startIndex: number, type: 'new'): boolean;\n    showDocPopup(unitId: string, startIndex: number, type: 'existing', position: IPopupPosition): boolean;\n    showDocPopup(unitId: string, startIndex: number, type: 'new' | 'existing', position?: IPopupPosition): boolean;\n    showDocPopup(unitId: string, startIndex: number, type: 'new' | 'existing', position?: IPopupPosition): boolean {\n        this.closePopup();\n\n        // Open existing doc formula.\n        const f = (position && position.rangeId && type === 'existing')\n            ? this._uniFormulaService.getDocFormula(unitId, position.rangeId)?.f ?? '='\n            : '=';\n\n        const disposable = this._docCanvasPopupManagerService.attachPopupToRange(\n            BuildTextUtils.selection.makeSelection(startIndex),\n            {\n                componentKey: DOC_FORMULA_POPUP_KEY,\n                onClickOutside: () => this.closePopup(), // user may update ref range selections\n                direction: 'top',\n            },\n            unitId\n        );\n        this._popupInfo$.next({ unitId, disposable, type, f, startIndex, position });\n        return true;\n    }\n\n    lockPopup(): void {\n        this._popupLocked = true;\n        this._contextService.setContextValue(FORMULA_EDITOR_ACTIVATED, true);\n    }\n\n    canConfirmPopup(): boolean {\n        return this._cachedFormulaString !== '';\n    }\n\n    async confirmPopup(): Promise<boolean> {\n        const info = this.popupInfo;\n        if (!info) return true;\n\n        const f = this._cachedFormulaString;\n        if (!f) {\n            this._logService.warn('[FormulaPopupService]: cannot write empty formula into the field.');\n            return false;\n        }\n\n        this.unlockPopup();\n        this.closePopup();\n\n        // Write to slide.\n        if (isSlidePosition(info.position)) {\n            return this._commandService.executeCommand<IAddSlideUniFormulaCommandParams>(AddSlideUniFormulaCommand.id, {\n                unitId: info.unitId,\n                f,\n                startIndex: info.startIndex,\n                pageId: info.position.pageId,\n                elementId: info.position.elementId,\n            });\n        }\n\n        // Write to doc.\n        return this._commandService.executeCommand(AddDocUniFormulaCommand.id, {\n            unitId: info.unitId,\n            f,\n            startIndex: info.startIndex,\n        } as IAddDocUniFormulaCommandParams);\n    }\n\n    unlockPopup(): void {\n        this._popupLocked = false;\n    }\n\n    closePopup(force = false): boolean {\n        if (this._popupLocked && !force) return false;\n\n        this._popupLocked = false;\n        this._cachedFormulaString = '';\n\n        this.popupInfo?.disposable.dispose();\n        this._popupInfo$.next(null);\n        this._popupHovered$.next(false);\n\n        this._contextService.setContextValue(FORMULA_EDITOR_ACTIVATED, false);\n\n        return true;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommand, IOperation } from '@univerjs/core';\nimport { CommandType } from '@univerjs/core';\nimport { UniFormulaPopupService } from '../../services/formula-popup.service';\n\nexport interface IDocPopupPosition {\n    rangeId?: string;\n}\n\nexport interface ISlidePopupPosition extends IDocPopupPosition {\n    pageId: string;\n    elementId: string;\n}\n\nexport type IPopupPosition = IDocPopupPosition | ISlidePopupPosition;\n\nexport function isSlidePosition(position?: IPopupPosition): position is ISlidePopupPosition {\n    return !!position && 'pageId' in position;\n}\n\nexport interface IShowDocFormulaPopupOperationParams {\n    unitId: string;\n    startIndex: number;\n    type?: 'new' | 'existing';\n    position: IDocPopupPosition;\n}\n\nexport interface IShowSlideFormulaPopupOPerationParams extends IShowDocFormulaPopupOperationParams {\n    position: ISlidePopupPosition;\n}\n\nexport type IShowFormulaPopupOperationParams = IShowDocFormulaPopupOperationParams | IShowSlideFormulaPopupOPerationParams;\n\nexport const ShowFormulaPopupOperation: IOperation<IShowFormulaPopupOperationParams> = {\n    id: 'uni-formula.operation.show-formula-popup',\n    type: CommandType.OPERATION,\n    handler(accessor, params: IShowFormulaPopupOperationParams) {\n        const { type = 'new', startIndex, unitId, position } = params;\n        const { rangeId } = position;\n        const formulaPopupService = accessor.get(UniFormulaPopupService);\n\n        if (type === 'existing' && !rangeId) return false;\n        return formulaPopupService.showDocPopup(unitId, startIndex, type, position);\n    },\n};\n\nexport const CloseFormulaPopupOperation: IOperation = {\n    id: 'uni-formula.operation.close-formula-popup',\n    type: CommandType.OPERATION,\n    handler(accessor) {\n        const docFormulaPopupService = accessor.get(UniFormulaPopupService);\n        return docFormulaPopupService.closePopup(true);\n    },\n};\n\nexport const ConfirmFormulaPopupCommand: ICommand = {\n    id: 'uni-formula.operation.confirm-formula-popup',\n    type: CommandType.COMMAND,\n    handler(accessor) {\n        const docFormulaPopupService = accessor.get(UniFormulaPopupService);\n        return docFormulaPopupService.confirmPopup();\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDocumentData, Nullable } from '@univerjs/core';\nimport type { IUniFormulaPopupInfo } from '../../services/formula-popup.service';\nimport { BooleanNumber, createInternalEditorID, DEFAULT_EMPTY_DOCUMENT_VALUE, DocumentFlavor, HorizontalAlign, ICommandService, LocaleService, VerticalAlign, WrapStrategy } from '@univerjs/core';\nimport { clsx } from '@univerjs/design';\n// import { TextEditor } from '@univerjs/docs-ui';\nimport { CheckMarkSingle, CloseSingle } from '@univerjs/icons';\nimport { useDependency, useObservable } from '@univerjs/ui';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\n\nimport { CloseFormulaPopupOperation, ConfirmFormulaPopupCommand } from '../../commands/operations/operation';\nimport { DOC_FORMULA_POPUP_KEY, UniFormulaPopupService } from '../../services/formula-popup.service';\nimport styles from './index.module.less';\n\nexport const UNI_FORMULA_EDITOR_ID = createInternalEditorID('UNI_FORMULA');\n\nfunction makeSnapshot(f: string): IDocumentData {\n    return {\n        id: UNI_FORMULA_EDITOR_ID,\n        body: {\n            dataStream: `${f}${DEFAULT_EMPTY_DOCUMENT_VALUE}`,\n            textRuns: [],\n            paragraphs: [\n                {\n                    startIndex: 0,\n                },\n            ],\n        },\n        documentStyle: {\n            documentFlavor: DocumentFlavor.UNSPECIFIED,\n            marginTop: 5,\n            marginBottom: 5,\n            marginRight: 0,\n            marginLeft: 0,\n            paragraphLineGapDefault: 0,\n            pageSize: {\n                width: Number.POSITIVE_INFINITY,\n                height: Number.POSITIVE_INFINITY,\n            },\n            renderConfig: {\n                horizontalAlign: HorizontalAlign.UNSPECIFIED,\n                verticalAlign: VerticalAlign.TOP,\n                centerAngle: 0,\n                vertexAngle: 0,\n                wrapStrategy: WrapStrategy.OVERFLOW,\n                isRenderStyle: BooleanNumber.FALSE,\n            },\n        },\n    };\n}\n\nexport function UniFormulaPopup() {\n    const docFormulaPopupService = useDependency(UniFormulaPopupService);\n    const popupInfo = useObservable(docFormulaPopupService.popupInfo$);\n\n    if (!popupInfo) {\n        return null;\n    }\n\n    return <DocFormula popupInfo={popupInfo} />;\n}\n\nUniFormulaPopup.componentKey = DOC_FORMULA_POPUP_KEY;\n\nfunction DocFormula(props: { popupInfo: IUniFormulaPopupInfo }) {\n    const { popupInfo } = props;\n    const { f } = popupInfo;\n\n    const localeService = useDependency(LocaleService);\n    const formulaPopupService = useDependency(UniFormulaPopupService);\n    const commandService = useDependency(ICommandService);\n\n    const [formulaString, setFormulaString] = useState<Nullable<string>>(f);\n    const snapshotRef = useRef(makeSnapshot(f ?? ''));\n\n    const [focused, setFocused] = useState(false);\n\n    const onFormulaStringChange = useCallback((formulaString: string) => {\n        setFormulaString(formulaString);\n        formulaPopupService.cacheFormulaString(formulaString);\n    }, [formulaPopupService]);\n\n    const onConfirm = useCallback(() => {\n        // TODO: call operation instead\n        commandService.executeCommand(ConfirmFormulaPopupCommand.id);\n    }, [commandService]);\n\n    const onHovered = useCallback((hovered: boolean) => {\n        formulaPopupService.hoverPopup(hovered);\n    }, [formulaPopupService]);\n\n    const onCancel = useCallback(() => {\n        commandService.executeCommand(CloseFormulaPopupOperation.id);\n    }, [commandService]);\n\n    const handleEscKey = useCallback((event: { key: string }) => {\n        if (event.key === 'Escape') {\n            onCancel();\n        }\n    }, [onCancel]);\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleEscKey);\n        return () => {\n            document.removeEventListener('keydown', handleEscKey);\n        };\n    }, [handleEscKey]);\n\n    return (\n        <div className={styles.docUiFormulaPopup} onMouseEnter={() => onHovered(true)} onMouseLeave={() => onHovered(false)}>\n            {/* <TextEditor\n                id={UNI_FORMULA_EDITOR_ID}\n                className={clsx(styles.docUiFormulaPopupEditor, focused && styles.docUiFormulaPopupEditorActivated)}\n                placeholder={localeService.t('uni-formula.popup.placeholder')}\n                snapshot={snapshotRef.current}\n                cancelDefaultResizeListener\n                value={f ?? ''}\n                isSingle\n                isFormulaEditor\n                onChange={(str) => onFormulaStringChange(str ?? '')}\n                onFocus={() => {\n                    formulaPopupService.lockPopup();\n                    setFocused(true);\n                }}\n                onBlur={() => setFocused(false)}\n            /> */}\n            <div className={clsx(styles.formulaIcon, { [styles.formulaIconDisable]: !formulaString })}>\n                <span\n                    className={clsx(styles.iconContainer, styles.iconContainerError)}\n                    onClick={onCancel}\n                >\n                    <CloseSingle />\n                </span>\n\n                <span\n                    className={clsx(styles.iconContainer, styles.iconContainerSuccess)}\n                    onClick={onConfirm}\n                >\n                    <CheckMarkSingle />\n                </span>\n            </div>\n        </div>\n    );\n}\n", "export default {\n  \"docUiFormulaPopup\": \"univer-doc-ui-formula-popup\",\n  \"docUiFormulaPopupTitle\": \"univer-doc-ui-formula-popup-title\",\n  \"docUiFormulaPopupEditor\": \"univer-doc-ui-formula-popup-editor\",\n  \"docUiFormulaPopupButtonGrp\": \"univer-doc-ui-formula-popup-button-grp\",\n  \"formulaIcon\": \"univer-formula-icon\",\n  \"iconContainer\": \"univer-icon-container\"\n};import \"ni:sha-256;WzXzGAgLVideIJRbUOPV1eVGIbGzhwKqWDHhytEvNK0\";", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DocumentDataModel } from '@univerjs/core';\nimport type { IInsertCommandParams } from '@univerjs/docs-ui';\nimport type { IShowFormulaPopupOperationParams } from '../commands/operations/operation';\nimport { CustomRangeType, Disposable, ICommandService, ILogService, Inject, IUniverInstanceService, UniverInstanceType } from '@univerjs/core';\nimport { DocSelectionManagerService } from '@univerjs/docs';\n\nimport { DeleteLeftCommand, DocEventManagerService, IEditorService, InsertCommand, MoveCursorOperation } from '@univerjs/docs-ui';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { filter, map, switchMap } from 'rxjs';\nimport { AddDocUniFormulaCommand, RemoveDocUniFormulaCommand, UpdateDocUniFormulaCommand } from '../commands/commands/doc.command';\nimport { CloseFormulaPopupOperation, ShowFormulaPopupOperation } from '../commands/operations/operation';\nimport { UniFormulaPopupService } from '../services/formula-popup.service';\nimport { UNI_FORMULA_EDITOR_ID } from '../views/components/DocFormulaPopup';\n\nconst FORMULA_INPUT_TRIGGER_CHAR = '=';\n\nexport class DocUniFormulaInputController extends Disposable {\n    constructor(\n        @ICommandService private readonly _commandService: ICommandService,\n        @IUniverInstanceService private readonly _instanceSrv: IUniverInstanceService,\n        @IEditorService private readonly _editorService: IEditorService,\n        @ILogService private readonly _logService: ILogService,\n        @Inject(UniFormulaPopupService) private readonly _formulaPopupSrv: UniFormulaPopupService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService,\n        @Inject(DocSelectionManagerService) private readonly _textSelectionManagerService: DocSelectionManagerService\n    ) {\n        super();\n\n        this._initKeyboardListeners();\n        this._initCommands();\n        this._initHoverListener();\n    }\n\n    private _initCommands(): void {\n        [\n            AddDocUniFormulaCommand,\n            RemoveDocUniFormulaCommand,\n            UpdateDocUniFormulaCommand,\n        ].forEach((command) => this._commandService.registerCommand(command));\n    }\n\n    private _initKeyboardListeners(): void {\n        // TODO@wzhudev: only need to listen when a doc unit is focused.\n        // The formula input trigger works not exactly the same as Mention.\n        this.disposeWithMe(this._commandService.onCommandExecuted((commandInfo) => {\n            const currentEditor = this._editorService.getFocusEditor();\n            const focusedUnit = this._instanceSrv.getFocusedUnit();\n\n            const { id } = commandInfo;\n\n            if (\n                currentEditor?.getEditorId() === UNI_FORMULA_EDITOR_ID ||\n                focusedUnit?.type !== UniverInstanceType.UNIVER_DOC\n            ) {\n                return;\n            }\n\n            if (id === InsertCommand.id) {\n                const params = commandInfo.params as IInsertCommandParams;\n                const activeRange = this._textSelectionManagerService.getActiveTextRange();\n                if (params.body.dataStream === FORMULA_INPUT_TRIGGER_CHAR && activeRange) {\n                    this._showPopup({\n                        startIndex: activeRange.startOffset! - 1,\n                        unitId: focusedUnit.getUnitId(),\n                        position: {},\n                    });\n                } else if (this._formulaPopupSrv.popupInfo) {\n                    this._closePopup();\n                }\n            }\n\n            if (id === MoveCursorOperation.id || id === DeleteLeftCommand.id) {\n                this._closePopup();\n            }\n        }));\n    }\n\n    private _initHoverListener(): void {\n        const rangesWithDoc$ = this._instanceSrv.focused$.pipe(\n            map((focused) => focused ? this._instanceSrv.getUnit<DocumentDataModel>(focused, UniverInstanceType.UNIVER_DOC) : null),\n            map((doc) => doc && { doc, docEventManagerService: this._renderManagerService.getRenderById(doc!.getUnitId())?.with(DocEventManagerService) }),\n            filter((info) => !!info),\n            switchMap((info) => info.docEventManagerService!.hoverCustomRanges$.pipe(map((ranges) => ({ doc: info.doc, ranges }))))\n        );\n\n        this.disposeWithMe(rangesWithDoc$.subscribe(({ doc, ranges: customRanges }) => {\n            if (\n                !doc ||\n                this._formulaPopupSrv.popupInfo?.type === 'new' ||\n                this._formulaPopupSrv.popupLocked\n            ) {\n                return;\n            }\n\n            const formulaCustomRange = customRanges.find((range) => range.range.rangeType === CustomRangeType.UNI_FORMULA)?.range;\n            if (formulaCustomRange) {\n                const { startIndex, rangeId } = formulaCustomRange;\n                this._logService.debug('[DocUniFormulaController]: activeCustomRanges', customRanges);\n                this._showPopup({\n                    startIndex,\n                    unitId: doc.getUnitId(),\n                    position: { rangeId },\n                    type: 'existing',\n                });\n            } else {\n                if (!this._hovered) {\n                    this._closePopup(500);\n                }\n            }\n        }));\n        this.disposeWithMe(rangesWithDoc$.subscribe(({ doc, ranges: customRanges }) => {\n            if (\n                !doc ||\n                this._formulaPopupSrv.popupInfo?.type === 'new' ||\n                this._formulaPopupSrv.popupLocked\n            ) {\n                return;\n            }\n\n            const formulaCustomRange = customRanges.find((range) => range.range.rangeType === CustomRangeType.UNI_FORMULA)?.range;\n            if (formulaCustomRange) {\n                const { startIndex, rangeId } = formulaCustomRange;\n                this._logService.debug('[DocUniFormulaController]: activeCustomRanges', customRanges);\n                this._showPopup({\n                    startIndex,\n                    unitId: doc.getUnitId(),\n                    position: { rangeId },\n                    type: 'existing',\n                });\n            } else {\n                if (!this._hovered) {\n                    this._closePopup(500);\n                }\n            }\n        }));\n\n        this.disposeWithMe(this._formulaPopupSrv.popupHovered$.subscribe((hovered) => {\n            if (hovered) {\n                this._removeTimer();\n            }\n\n            this._hovered = hovered;\n        }));\n    }\n\n    private _hovered = false;\n\n    private _removeTimer(): void {\n        if (this._closePopupTimer !== null) {\n            window.clearTimeout(this._closePopupTimer);\n            this._closePopupTimer = null;\n        }\n    }\n\n    private _showPopup(params: IShowFormulaPopupOperationParams): void {\n        this._removeTimer();\n        this._commandService.executeCommand(ShowFormulaPopupOperation.id, params);\n    }\n\n    private _closePopupTimer: number | null = null;\n    private _closePopup(timeout: number = 0): void {\n        if (!this._formulaPopupSrv.popupInfo) {\n            return;\n        }\n\n        if (timeout === 0) {\n            this._commandService.executeCommand(CloseFormulaPopupOperation.id);\n        } else {\n            this._closePopupTimer = window.setTimeout(() => this._closePopup(0), timeout);\n        }\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IInsertCommandParams } from '@univerjs/docs-ui';\nimport type { IShowFormulaPopupOperationParams, ISlidePopupPosition } from '../commands/operations/operation';\nimport { Disposable, ICommandService, Inject, Injector, IUniverInstanceService, UniverInstanceType } from '@univerjs/core';\nimport { DocSelectionManagerService } from '@univerjs/docs';\nimport { IEditorService, InsertCommand } from '@univerjs/docs-ui';\nimport { ISlideEditorBridgeService } from '@univerjs/slides-ui';\nimport { AddSlideUniFormulaCommand } from '../commands/commands/slide.command';\nimport { CloseFormulaPopupOperation, ShowFormulaPopupOperation } from '../commands/operations/operation';\nimport { UniFormulaPopupService } from '../services/formula-popup.service';\nimport { UNI_FORMULA_EDITOR_ID } from '../views/components/DocFormulaPopup';\n\nconst FORMULA_INPUT_TRIGGER_CHAR = '=';\n\nexport class SlideUniFormulaInputController extends Disposable {\n    constructor(\n        @Inject(Injector) private readonly _injector: Injector,\n        @IUniverInstanceService private readonly _instanceSrv: IUniverInstanceService,\n        @ICommandService private readonly _commandSrv: ICommandService,\n        @IEditorService private readonly _editorSrv: IEditorService,\n        @Inject(DocSelectionManagerService) private readonly _textSelectionManagerService: DocSelectionManagerService,\n        @Inject(UniFormulaPopupService) private readonly _formulaPopupSrv: UniFormulaPopupService\n    ) {\n        super();\n\n        this._initCommands();\n        this._initKeyboardListeners();\n    }\n\n    private _initCommands() {\n        [\n            AddSlideUniFormulaCommand,\n        ].forEach((cmd) => this._commandSrv.registerCommand(cmd));\n    }\n\n    private _initKeyboardListeners(): void {\n        this.disposeWithMe(this._commandSrv.onCommandExecuted((commandInfo) => {\n            const currentEditor = this._editorSrv.getFocusEditor();\n            const focusedUnit = this._instanceSrv.getFocusedUnit();\n\n            const { id } = commandInfo;\n\n            if (\n                currentEditor?.getEditorId() === UNI_FORMULA_EDITOR_ID ||\n                focusedUnit?.type !== UniverInstanceType.UNIVER_SLIDE\n            ) {\n                return;\n            }\n\n            if (id === InsertCommand.id) {\n                const params = commandInfo.params as IInsertCommandParams;\n                const activeRange = this._textSelectionManagerService.getActiveTextRange();\n                if (params.body.dataStream === FORMULA_INPUT_TRIGGER_CHAR && activeRange) {\n                    // NOTE: we can avoid manually get the SlideEditorBridgeService when we split\n                    // slide formula editor plugin into a separate package.\n                    const editorBridgeService = this._injector.get(ISlideEditorBridgeService);\n                    const editorRect = editorBridgeService.getEditorRect();\n                    const { pageId, richTextObj } = editorRect;\n                    const { oKey } = richTextObj;\n                    this._showPopup({\n                        startIndex: activeRange.startOffset! - 1,\n                        unitId: focusedUnit.getUnitId(),\n                        position: {\n                            pageId,\n                            elementId: oKey,\n                        } as ISlidePopupPosition,\n                    });\n                } else if (this._formulaPopupSrv.popupInfo) {\n                    this._closePopup();\n                }\n            }\n        }));\n    }\n\n    private _removeTimer(): void {\n        if (this._closePopupTimer !== null) {\n            window.clearTimeout(this._closePopupTimer);\n            this._closePopupTimer = null;\n        }\n    }\n\n    private _showPopup(params: IShowFormulaPopupOperationParams): void {\n        this._removeTimer();\n        this._commandSrv.executeCommand(ShowFormulaPopupOperation.id, params);\n    }\n\n    private _closePopupTimer: number | null = null;\n    private _closePopup(timeout: number = 0): void {\n        if (!this._formulaPopupSrv.popupInfo) {\n            return;\n        }\n\n        if (timeout === 0) {\n            this._commandSrv.executeCommand(CloseFormulaPopupOperation.id);\n        } else {\n            this._closePopupTimer = window.setTimeout(() => this._closePopup(0), timeout);\n        }\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Disposable, ICommandService, Inject } from '@univerjs/core';\nimport { ComponentManager } from '@univerjs/ui';\nimport { CloseFormulaPopupOperation, ConfirmFormulaPopupCommand, ShowFormulaPopupOperation } from '../commands/operations/operation';\nimport { UniFormulaPopup } from '../views/components/DocFormulaPopup';\n\nexport class UniFormulaUniController extends Disposable {\n    constructor(\n        @ICommandService private readonly _commandSrv: ICommandService,\n        @Inject(ComponentManager) private readonly _componentManager: ComponentManager\n    ) {\n        super();\n\n        [\n            ShowFormulaPopupOperation,\n            CloseFormulaPopupOperation,\n            ConfirmFormulaPopupCommand,\n        ].forEach((command) => this._commandSrv.registerCommand(command));\n\n        this.disposeWithMe(this._componentManager.register(UniFormulaPopup.componentKey, UniFormulaPopup));\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n    DocumentDataModel,\n    ICellData,\n    ICommand,\n    IDisposable,\n    IDocumentBody,\n    Nullable,\n    SlideDataModel,\n} from '@univerjs/core';\nimport type { IDocFormulaCache, ISlideFormulaCache } from '@univerjs/uni-formula';\nimport type { IDocPopupPosition, ISlidePopupPosition } from '../commands/operations/operation';\nimport {\n    BuildTextUtils,\n    CommandType,\n    CustomRangeType,\n    ICommandService,\n    Inject,\n    Injector,\n    IResourceManagerService,\n    IUniverInstanceService,\n    makeCustomRangeStream,\n    Quantity,\n    RCDisposable,\n    toDisposable,\n    UniverInstanceType,\n} from '@univerjs/core';\nimport { replaceSelectionFactory } from '@univerjs/docs';\nimport { RichText } from '@univerjs/engine-render';\nimport { DataSyncPrimaryController } from '@univerjs/rpc';\nimport { RegisterOtherFormulaService } from '@univerjs/sheets-formula';\nimport { CanvasView } from '@univerjs/slides-ui';\nimport { DumbUniFormulaService, IUniFormulaService } from '@univerjs/uni-formula';\nimport { take } from 'rxjs';\nimport { isSlidePosition } from '../commands/operations/operation';\n\nconst PSEUDO_SUBUNIT = 'PSEUDO_SUBUNIT';\n\nexport interface IUpdateSlideUniFormulaCacheCommandParams {\n    unitId: string;\n    positions: ISlidePopupPosition[];\n    cache: ISlideFormulaCache[];\n}\n\nexport interface IUpdateDocUniFormulaCacheCommandParams {\n    /** The doc in which formula results changed. */\n    unitId: string;\n    positions: ISlidePopupPosition[] | IDocPopupPosition[];\n    /** Calculation results. */\n    cache: IDocFormulaCache[];\n}\n\nexport const UpdateSlideUniFormulaCacheCommand: ICommand<IUpdateSlideUniFormulaCacheCommandParams> = {\n    type: CommandType.COMMAND,\n    id: 'uni-formula.mutation.update-slide-uni-formula-cache',\n    handler(accessor, params: IUpdateSlideUniFormulaCacheCommandParams) {\n        const { unitId, positions, cache } = params;\n\n        const uniFormulaService = accessor.get(IUniFormulaService);\n        const instanceService = accessor.get(IUniverInstanceService);\n        const slideCanvasView = accessor.get(CanvasView);\n\n        const slide = instanceService.getUnit<SlideDataModel>(unitId, UniverInstanceType.UNIVER_SLIDE);\n        if (!slide) return true;\n\n        return positions.every((position, index) => {\n            // TODO@wzhudev: we should get the slide's rendering modules to update the formula results.\n            // Note that this is very hacky because Univer Slide hasn't provide any mutations to\n            // modify its content. This is just for POC of uni formula.\n            const scene = slideCanvasView.getRenderUnitByPageId(position.pageId, unitId).scene;\n            if (!scene) return false;\n\n            const element = scene.getObject(position.elementId);\n            if (!element || !(element instanceof RichText)) return false;\n\n            const documentModel = element.documentModel;\n            const originBody = documentModel.getBody()!;\n            const range = originBody.customRanges?.find((r) => r.rangeId === position.rangeId);\n            if (!range) return false;\n\n            const dataStream = makeCustomRangeStream(`${cache[index].v ?? ''}`);\n            const body: IDocumentBody = {\n                dataStream,\n                customRanges: [{\n                    startIndex: 0,\n                    endIndex: dataStream.length - 1,\n                    rangeId: position.rangeId!,\n                    rangeType: CustomRangeType.UNI_FORMULA,\n                    wholeEntity: true,\n                }],\n            };\n\n            const redoMutation = replaceSelectionFactory(accessor, {\n                unitId,\n                body,\n                selection: BuildTextUtils.selection.makeSelection(range.startIndex, range.endIndex),\n                doc: documentModel,\n            });\n\n            if (!redoMutation) return false;\n\n            // This is pretty annoying...\n            element.documentModel.apply(redoMutation.params.actions);\n            element.refreshDocumentByDocData(); // trigger re-render\n\n            uniFormulaService.updateSlideFormulaResults(unitId, position.pageId, position.elementId, position.rangeId!, cache[index]);\n\n            return true;\n        });\n    },\n};\n\n/**\n * This command is internal. It should not be exposed to third-party developers.\n *\n * @ignore\n */\nexport const UpdateDocUniFormulaCacheCommand: ICommand<IUpdateDocUniFormulaCacheCommandParams> = {\n    type: CommandType.COMMAND,\n    id: 'uni-formula.mutation.update-doc-uni-formula-cache',\n    handler(accessor, params: IUpdateDocUniFormulaCacheCommandParams) {\n        const { unitId, positions, cache } = params;\n\n        const uniFormulaService = accessor.get(IUniFormulaService);\n        const instanceService = accessor.get(IUniverInstanceService);\n        const commandService = accessor.get(ICommandService);\n\n        const doc = instanceService.getUnit<DocumentDataModel>(unitId, UniverInstanceType.UNIVER_DOC);\n        // The document may have not loaded on this client. We are safe to ignore cache updating.\n        if (!doc) return true;\n\n        const body = doc.getBody();\n\n        function getRange(rangeId: string) {\n            return body?.customRanges?.find((r) => r.rangeId === rangeId);\n        }\n\n        const ids = positions.map((position) => position.rangeId!);\n        const saveCacheResult = uniFormulaService.updateDocFormulaResults(unitId, ids, cache);\n        if (!saveCacheResult) return false;\n\n        return ids.every((id, index) => {\n            const range = getRange(id);\n            if (!range) return true; // If we cannot find that rangeId, we are save to ignore cache.\n\n            const dataStream = makeCustomRangeStream(`${cache[index].v ?? ''}`);\n            const body: IDocumentBody = {\n                dataStream,\n                customRanges: [{\n                    startIndex: 0,\n                    endIndex: dataStream.length - 1,\n                    rangeId: id,\n                    rangeType: CustomRangeType.UNI_FORMULA,\n                    wholeEntity: true,\n                }],\n            };\n\n            const redoMutation = replaceSelectionFactory(accessor, {\n                unitId,\n                body,\n                selection: BuildTextUtils.selection.makeSelection(range.startIndex, range.endIndex),\n            });\n\n            if (redoMutation) {\n                return commandService.syncExecuteCommand(redoMutation.id, redoMutation.params);\n            }\n\n            return false;\n        });\n    },\n};\n\n/**\n * This service provides methods for docs and slides to register a formula into Univer's formula system.\n * And it also manages formula resources fields of docs and slides. `SHEET_FORMULA_REMOTE_PLUGIN`\n * is not required but optional here.\n */\nexport class UniFormulaService extends DumbUniFormulaService implements IUniFormulaService {\n    private readonly _formulaIdToKey = new Map<string, string>();\n\n    private _canPerformFormulaCalculation = false;\n\n    private get _registerOtherFormulaSrv() { return this._injector.get(RegisterOtherFormulaService); }\n    private get _dataSyncPrimaryController() { return this._injector.get(DataSyncPrimaryController, Quantity.OPTIONAL); }\n\n    constructor(\n        @Inject(Injector) private readonly _injector: Injector,\n        @IResourceManagerService resourceManagerService: IResourceManagerService,\n        @ICommandService commandSrv: ICommandService,\n        @IUniverInstanceService instanceSrv: IUniverInstanceService\n    ) {\n        super(resourceManagerService, commandSrv, instanceSrv);\n\n        [\n            UpdateSlideUniFormulaCacheCommand,\n            UpdateDocUniFormulaCacheCommand,\n        ].forEach((command) => commandSrv.registerCommand(command));\n\n        // Only able to perform formula calculation after a sheet is loaded.\n        // FIXME: the formula engine is not unit-agnostic.\n        if (instanceSrv.getAllUnitsForType(UniverInstanceType.UNIVER_SHEET).length) {\n            this._canPerformFormulaCalculation = true;\n        } else {\n            this.disposeWithMe(this._instanceSrv.getTypeOfUnitAdded$(UniverInstanceType.UNIVER_SHEET).pipe(take(1))\n                .subscribe(() => {\n                    this._canPerformFormulaCalculation = true;\n                    this._initFormulaRegistration();\n                }));\n        }\n    }\n\n    /**\n     * Register a doc formula into the formula system.\n     */\n    override registerDocFormula(unitId: string, rangeId: string, f: string, v: ICellData['v'], t: ICellData['t']): IDisposable {\n        const key = getDocFormulaKey(unitId, rangeId);\n        if (this._docFormulas.has(key)) {\n            throw new Error(`[UniFormulaService]: cannot register formula ${key} when it is already registered!`);\n        }\n\n        if (this._canPerformFormulaCalculation) {\n            const pseudoId = getPseudoUnitKey(unitId);\n            this._checkSyncingUnit(pseudoId);\n\n            const id = this._registerOtherFormulaSrv.registerFormulaWithRange(pseudoId, PSEUDO_SUBUNIT, f);\n            this._docFormulas.set(key, { unitId, rangeId, f, formulaId: id, v, t });\n            this._formulaIdToKey.set(id, key);\n\n            this._checkResultSubscription();\n        } else {\n            this._docFormulas.set(key, { unitId, rangeId, f, formulaId: '', v, t });\n        }\n\n        return toDisposable(() => this.unregisterDocFormula(unitId, rangeId));\n    }\n\n    override registerSlideFormula(\n        unitId: string,\n        pageId: string,\n        elementId: string,\n        rangeId: string,\n        f: string,\n        v: ICellData['v'],\n        t: ICellData['t']\n    ): IDisposable {\n        const key = getSlideFormulaKey(unitId, pageId, elementId, rangeId);\n        if (this._slideFormulas.has(key)) {\n            throw new Error(`[UniFormulaService]: cannot register formula ${key} when it is already registered!`);\n        }\n\n        if (this._canPerformFormulaCalculation) {\n            const pseudoId = getPseudoUnitKey(unitId);\n            this._checkSyncingUnit(pseudoId);\n\n            const id = this._registerOtherFormulaSrv.registerFormulaWithRange(pseudoId, PSEUDO_SUBUNIT, f);\n            this._slideFormulas.set(key, { unitId, pageId, elementId, rangeId, f, formulaId: id, v, t });\n            this._formulaIdToKey.set(id, key);\n\n            this._checkResultSubscription();\n        } else {\n            this._slideFormulas.set(key, { unitId, pageId, elementId, rangeId, f, formulaId: '', v, t });\n        }\n\n        return toDisposable(() => this.unregisterSlideFormula(unitId, pageId, elementId, rangeId));\n    }\n\n    override unregisterDocFormula(unitId: string, rangeId: string): void {\n        const key = getDocFormulaKey(unitId, rangeId);\n        const item = this._docFormulas.get(key);\n        if (!item) return;\n\n        const pseudoId = getPseudoUnitKey(unitId);\n        this._checkDisposingResultSubscription();\n        this._dataSyncDisposables.get(pseudoId)?.dec();\n\n        if (this._canPerformFormulaCalculation) {\n            this._registerOtherFormulaSrv.deleteFormula(pseudoId, PSEUDO_SUBUNIT, [item.formulaId]);\n            this._formulaIdToKey.delete(item.formulaId);\n        }\n\n        this._docFormulas.delete(key);\n    }\n\n    override unregisterSlideFormula(unitId: string, pageId: string, elementId: string, formulaId: string): void {\n        const key = getSlideFormulaKey(unitId, pageId, elementId, formulaId);\n        const item = this._slideFormulas.get(key);\n        if (!item) return;\n\n        const pseudoId = getPseudoUnitKey(unitId);\n        this._checkDisposingResultSubscription();\n        this._dataSyncDisposables.get(pseudoId)?.dec();\n\n        if (this._canPerformFormulaCalculation) {\n            this._registerOtherFormulaSrv.deleteFormula(pseudoId, PSEUDO_SUBUNIT, [item.formulaId]);\n            this._formulaIdToKey.delete(item.formulaId);\n        }\n\n        this._slideFormulas.delete(key);\n    }\n\n    private _initFormulaRegistration(): void {\n        // When the doc bootstraps, there could be no sheets modules loaded. So we need to check if there\n        // are registered formulas but not added to the formula system.\n        this._docFormulas.forEach((value, key) => {\n            if (!value.formulaId) {\n                const { unitId, f } = value;\n                const pseudoId = getPseudoUnitKey(unitId);\n                this._checkSyncingUnit(pseudoId);\n\n                const id = this._registerOtherFormulaSrv.registerFormulaWithRange(pseudoId, PSEUDO_SUBUNIT, f);\n                value.formulaId = id;\n                this._formulaIdToKey.set(id, key);\n            }\n        });\n    }\n\n    private _dataSyncDisposables = new Map<string, RCDisposable>();\n    private _checkSyncingUnit(unitId: string): void {\n        if (!this._dataSyncPrimaryController) return;\n\n        if (!this._dataSyncDisposables.has(unitId)) {\n            this._dataSyncPrimaryController.syncUnit(unitId);\n            this._dataSyncDisposables.set(unitId, new RCDisposable(toDisposable(() => this._dataSyncDisposables.delete(unitId))));\n        }\n\n        this._dataSyncDisposables.get(unitId)!.inc();\n    }\n\n    private _resultSubscription: Nullable<IDisposable>;\n    private _checkResultSubscription(): void {\n        if (this._resultSubscription || !this._registerOtherFormulaSrv) return;\n\n        this._resultSubscription = toDisposable(this._registerOtherFormulaSrv.formulaResult$.subscribe((resultMap) => {\n            for (const resultOfUnit in resultMap) {\n                const results = resultMap[resultOfUnit][PSEUDO_SUBUNIT];\n                if (results) {\n                    const mutationParam = results.map((result) => {\n                        const formulaId = result.formulaId;\n                        const key = this._formulaIdToKey.get(formulaId);\n                        if (!key) return null;\n\n                        const docItem = this._docFormulas.get(key);\n                        if (docItem) {\n                            const r = result.result?.[0][0][0][0]; // Ranges defaults to one row and one column\n                            if (docItem.v === r?.v && docItem.t === r?.t) return null;\n\n                            return { position: { rangeId: docItem.rangeId }, unitId: docItem.unitId, cache: r };\n                        };\n\n                        const slideItem = this._slideFormulas.get(key);\n                        if (slideItem) {\n                            const r = result.result?.[0][0][0][0]; // Ranges defaults to one row and one column\n                            if (slideItem.v === r?.v && slideItem.t === r?.t) return null;\n\n                            return {\n                                unitId: slideItem.unitId,\n                                position: {\n                                    elementId: slideItem.elementId,\n                                    rangeId: slideItem.rangeId,\n                                    pageId: slideItem.pageId,\n                                },\n                                cache: r,\n                            };\n                        }\n\n                        return null;\n                    }).reduce((previous, curr) => {\n                        if (!curr || !curr.cache) return previous;\n\n                        if (!previous.unitId) previous.unitId = curr.unitId;\n                        previous.positions.push(curr.position);\n                        previous.cache.push(curr.cache);\n\n                        return previous;\n                    }, {\n                        unitId: '',\n                        positions: [] as (ISlidePopupPosition | IDocPopupPosition)[],\n                        cache: [] as Pick<ICellData, 'v' | 't'>[],\n                    });\n\n                    if (mutationParam.positions.length === 0) return;\n\n                    if (isSlidePosition(mutationParam.positions[0])) {\n                        this._commandSrv.executeCommand(UpdateSlideUniFormulaCacheCommand.id, mutationParam as IUpdateSlideUniFormulaCacheCommandParams);\n                    } else {\n                        this._commandSrv.executeCommand(UpdateDocUniFormulaCacheCommand.id, mutationParam as IUpdateDocUniFormulaCacheCommandParams);\n                    }\n                }\n            }\n        }));\n    }\n\n    private _checkDisposingResultSubscription(): void {\n        if (this._docFormulas.size === 0) this._disposeResultSubscription();\n    }\n\n    private _disposeResultSubscription(): void {\n        if (this._resultSubscription) {\n            this._resultSubscription.dispose();\n            this._resultSubscription = null;\n        }\n    }\n}\n\nfunction getPseudoUnitKey(unitId: string): string {\n    return `pseudo-${unitId}`;\n}\n\nfunction getDocFormulaKey(unitId: string, formulaId: string): string {\n    return `pseudo-${unitId}-${formulaId}`;\n}\n\nfunction getSlideFormulaKey(unitId: string, pageId: string, elementId: string, rangeId: string): string {\n    return `pseudo-${unitId}-${pageId}-${elementId}-${rangeId}`;\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport { DependentOn, Inject, Injector, Plugin, touchDependencies, UniverInstanceType } from '@univerjs/core';\n\nimport { IUniFormulaService, UniverDocUniFormulaPlugin } from '@univerjs/uni-formula';\nimport { DOC_FORMULA_UI_PLUGIN_NAME } from './const';\nimport { DocUniFormulaInputController } from './controllers/doc-formula-input.controller';\nimport { SlideUniFormulaInputController } from './controllers/slide-formula-input.controller';\nimport { UniFormulaUniController } from './controllers/uni-formula-ui.controller';\nimport { UniFormulaPopupService } from './services/formula-popup.service';\nimport { SlideUIFormulaCacheService } from './services/slide-ui-formula-cache.service';\nimport { UniFormulaService } from './services/uni-formula.service';\n\n@DependentOn(UniverDocUniFormulaPlugin)\nexport class UniverDocUniFormulaUIPlugin extends Plugin {\n    static override pluginName: string = DOC_FORMULA_UI_PLUGIN_NAME;\n    static override type: UniverInstanceType = UniverInstanceType.UNIVER_UNKNOWN;\n\n    constructor(\n        _config: unknown,\n        @Inject(Injector) protected readonly _injector: Injector\n    ) {\n        super();\n    }\n\n    override onStarting() {\n        ([\n            [UniFormulaUniController],\n            [DocUniFormulaInputController],\n            [SlideUniFormulaInputController],\n            [SlideUIFormulaCacheService],\n            [UniFormulaPopupService],\n            [IUniFormulaService, { useClass: UniFormulaService }],\n        ] as Dependency[]).forEach((d) => this._injector.add(d));\n    }\n\n    override onReady(): void {\n        touchDependencies(this._injector, [\n            [IUniFormulaService],\n        ]);\n    }\n\n    override onSteady(): void {\n        touchDependencies(this._injector, [\n            [UniFormulaUniController],\n            [DocUniFormulaInputController],\n            [SlideUniFormulaInputController],\n        ]);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UniverSheetsFilterUIPlugin } from '@univerjs/sheets-filter-ui';\nimport { UniverDocUniFormulaUIPlugin } from '@univerjs/uni-formula-ui';\nimport type { Plugin, PluginCtor } from '@univerjs/core';\n// import { UniverUniscriptPlugin } from '@univerjs/uniscript';\n\nexport default function getLazyPlugins(): Array<[PluginCtor<Plugin>] | [PluginCtor<Plugin>, unknown]> {\n    return [\n        // [\n        //     UniverUniscriptPlugin,\n        //     {\n        //         getWorkerUrl(moduleID: string, label: string) {\n        //             if (label === 'typescript' || label === 'javascript') {\n        //                 return './vs/language/typescript/ts.worker.js';\n        //             }\n\n        //             return './vs/editor/editor.worker.js';\n        //         },\n        //     },\n        // ],\n        [UniverSheetsFilterUIPlugin],\n        [UniverDocUniFormulaUIPlugin],\n    ];\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBO,IAAM,6BAA6B;;;ACanC,IAAM,0BAAoE;AAAA,EAC7E;AAAA,EACA,IAAI;AAAA,EACJ,MAAM,QAAQ,UAAU,QAAwC;AAC5D,UAAM,EAAE,GAAG,QAAQ,WAAW,IAAI;AAElC,UAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,UAAM,gBAAgB,SAAS,IAAI,aAAa;AAEhD,UAAM,UAAU,iBAAiB;AACjC,UAAM,cAAc,cAAc,EAAE,wCAAwC;AAC5E,UAAM,aAAa,sBAAsB,WAAW;AACpD,UAAM,OAAsB;AAAA,MACxB;AAAA,MACA,cAAc,CAAC;AAAA,QACX,YAAY;AAAA,QACZ,UAAU,WAAW,SAAS;AAAA,QAC9B;AAAA,QACA;AAAA,QACA,aAAa;AAAA,MACjB,CAAC;AAAA,IACL;AAEA,UAAM,4BAA4B,wBAAwB,UAAU;AAAA,MAChE;AAAA,MACA;AAAA,MACA,WAAW,eAAe,UAAU,cAAc,YAAY,aAAa,CAAC;AAAA,IAChF,CAAC;AAED,QAAI,2BAA2B;AAC3B,YAAM,6BAA6E;AAAA,QAC/E,IAAI,yBAAyB;AAAA,QAC7B,QAAQ,EAAE,QAAQ,SAAS,EAAE;AAAA,MACjC;AAEA,aAAO,gBAAgB,CAAC,2BAA2B,0BAA0B,GAAG,cAAc,EAAE;AAAA,IACpG;AAEA,WAAO;AAAA,EACX;AACJ;AAUO,IAAM,6BAA0E;AAAA,EACnF;AAAA,EACA,IAAI;AAAA,EACJ,SAAS,CAAC,UAAU,WAA8C;AAC9D,UAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,WAAO,eAAe,mBAAmB,4BAA4B,IAAI,MAA4C;AAAA,EACzH;AACJ;AAOO,IAAM,6BAA0E;AAAA,EACnF;AAAA,EACA,IAAI;AAAA,EACJ,SAAS,CAAC,UAAU,WAA8C;AAC9D,UAAM,iBAAiB,SAAS,IAAI,eAAe;AAEnD,WAAO,eAAe,mBAAmB,4BAA4B,IAAI,MAA4C;AAAA,EACzH;AACJ;;;AC9EO,IAAM,6BAAN,cAAyC,WAAW;AAAA,EAGvD,YACgD,sBACP,oBACvC;AACE,UAAM;AAHsC;AACP;AAJzC,wBAAiB,WAAyD,oBAAI,IAAI;AAQ9E,SAAK,qBAAqB,YAAY,UAAU,CAAC,aAAa,KAAK,iBAAiB,QAAQ,CAAC;AAAA,EACjG;AAAA,EAEA,WAAW,SAAiB,QAA0C;AAnC1E;AAoCQ,QAAI,KAAK,QAAQ,UAAQ,UAAK,QAAQ,OAAO,EAAE,KAAK,EAAE,UAA7B,mBAAoC,YAAW,OAAO,QAAQ;AACnF,WAAK,WAAW;AAAA,IACpB;AAEA,SAAK,QAAQ,IAAI,SAAS,MAAM;AAAA,EACpC;AAAA,EAEQ,iBAAiB,UAAoB;AA3CjD;AA4CQ,UAAMA,YAAW,SAAS;AAC1B,UAAM,gBAAe,KAAAA,UAAS,SAAT,mBAAe;AACpC,QAAI,CAAC,gBAAgB,aAAa,WAAW,GAAG;AAC5C,WAAK,WAAW;AAChB;AAAA,IACJ;AAAC;AAID,iBAAa,QAAQ,CAAC,UAAU;AAC5B,UAAI,MAAM,mCAA2C;AACjD,cAAM,QAAQ,KAAK,QAAQ,IAAI,MAAM,OAAO;AAC5C,YAAI,OAAO;AACP,eAAK,YAAY,MAAM,SAAS,KAAK;AAAA,QACzC,OAAO;AACH,gBAAM,IAAI,MAAM,gDAAgD;AAAA,QACpE;AAAA,MACJ;AAAA,IACJ,CAAC;AAED,SAAK,WAAW;AAAA,EACpB;AAAA,EAEQ,YAAY,SAAiB,OAAyC;AAC1E,UAAM,EAAE,QAAQ,QAAQ,WAAW,EAAE,IAAI;AACzC,SAAK,mBAAmB,qBAAqB,QAAQ,QAAQ,WAAW,SAAS,CAAC;AAAA,EACtF;AAAA,EAEA,aAAa;AACT,SAAK,QAAQ,MAAM;AAAA,EACvB;AACJ;AApDa,6BAAN;AAAA,EAIE;AAAA,EACA;AAAA,GALI;;;ACQN,IAAM,4BAAwE;AAAA,EACjF;AAAA,EACA,IAAI;AAAA,EACJ,MAAM,QAAQ,UAAU,QAA0C;AAC9D,UAAM,EAAE,WAAW,IAAI;AAEvB,UAAM,iBAAiB,SAAS,IAAI,eAAe;AACnD,UAAM,6BAA6B,SAAS,IAAI,0BAA0B;AAC1E,UAAM,gBAAgB,SAAS,IAAI,aAAa;AAChD,UAAM,cAAc,cAAc,EAAE,wCAAwC;AAG5E,UAAM,UAAU,iBAAiB;AACjC,UAAM,aAAa,sBAAsB,WAAW;AACpD,UAAM,OAAsB;AAAA,MACxB;AAAA,MACA,cAAc,CAAC;AAAA,QACX,YAAY;AAAA,QACZ,UAAU,WAAW,SAAS;AAAA,QAC9B;AAAA,QACA;AAAA,QACA,aAAa;AAAA,MACjB,CAAC;AAAA,IACL;AAEA,UAAM,4BAA4B,wBAAwB,UAAU;AAAA,MAChE,QAAQ;AAAA,MACR;AAAA,MACA,WAAW,eAAe,UAAU,cAAc,YAAY,aAAa,CAAC;AAAA,IAChF,CAAC;AAOD,QAAI,2BAA2B;AAC3B,iCAA2B,WAAW,SAAS,MAAM;AACrD,aAAO,eAAe,eAAe,0BAA0B,IAAI,0BAA0B,QAAQ,EAAE,WAAW,KAAK,CAAC;AAAA,IAC5H;AAEA,WAAO;AAAA,EACX;AACJ;;;AC3CO,IAAM,wBAAwB;AAW9B,IAAM,yBAAN,cAAqC,WAAW;AAAA,EAanD,YACyD,+BAChB,oBACH,iBACJ,aACI,iBACC,kBACrC;AACE,UAAM;AAP+C;AAChB;AACH;AACJ;AACI;AACC;AAlBvC,wBAAiB,eAAc,IAAI,gBAAgD,IAAI;AACvF,wBAAS,cAAa,KAAK,YAAY,aAAa;AAGpD,wBAAQ,gBAAe;AAGvB,wBAAiB,kBAAiB,IAAI,QAAiB;AACvD,wBAAS,iBAAgB,KAAK,eAAe,aAAa;AAE1D,wBAAQ,wBAAuB;AAY3B,UAAM,4BAA2C;AAAA,MAC7C,IAAI,2BAA2B;AAAA,MAC/B;AAAA,MACA,aAAa;AAAA,MACb,eAAe,CAAC,mBACZ,CAAC,eAAe,gBAAgB,wBAAwB,KAAK,KAAK,gBAAgB;AAAA,MACtF,UAAU;AAAA,IACd;AAEA,SAAK,cAAc,KAAK,iBAAiB,iBAAiB,yBAAyB,CAAC;AAAA,EACxF;AAAA,EA9BA,IAAI,YAA4C;AAAE,WAAO,KAAK,YAAY,SAAS;AAAA,EAAG;AAAA,EAGtF,IAAI,cAAuB;AAAE,WAAO,KAAK;AAAA,EAAc;AAAA,EA6B9C,UAAgB;AACrB,UAAM,QAAQ;AAEd,SAAK,YAAY,KAAK,IAAI;AAC1B,SAAK,YAAY,SAAS;AAE1B,SAAK,eAAe,SAAS;AAAA,EACjC;AAAA,EAEA,mBAAmB,GAAiB;AAChC,SAAK,uBAAuB;AAAA,EAChC;AAAA,EAEA,WAAW,SAAwB;AAC/B,SAAK,eAAe,KAAK,OAAO;AAAA,EACpC;AAAA,EAKA,aAAa,QAAgB,YAAoB,MAA0B,UAAoC;AAjGnH;AAkGQ,SAAK,WAAW;AAGhB,UAAM,IAAK,YAAY,SAAS,WAAW,SAAS,cAC9C,gBAAK,mBAAmB,cAAc,QAAQ,SAAS,OAAO,MAA9D,mBAAiE,MAAjE,YAAsE,MACtE;AAEN,UAAM,aAAa,KAAK,8BAA8B;AAAA,MAClD,eAAe,UAAU,cAAc,UAAU;AAAA,MACjD;AAAA,QACI,cAAc;AAAA,QACd,gBAAgB,MAAM,KAAK,WAAW;AAAA;AAAA,QACtC,WAAW;AAAA,MACf;AAAA,MACA;AAAA,IACJ;AACA,SAAK,YAAY,KAAK,EAAE,QAAQ,YAAY,MAAM,GAAG,YAAY,SAAS,CAAC;AAC3E,WAAO;AAAA,EACX;AAAA,EAEA,YAAkB;AACd,SAAK,eAAe;AACpB,SAAK,gBAAgB,gBAAgB,0BAA0B,IAAI;AAAA,EACvE;AAAA,EAEA,kBAA2B;AACvB,WAAO,KAAK,yBAAyB;AAAA,EACzC;AAAA,EAEA,MAAM,eAAiC;AACnC,UAAM,OAAO,KAAK;AAClB,QAAI,CAAC,KAAM,QAAO;AAElB,UAAM,IAAI,KAAK;AACf,QAAI,CAAC,GAAG;AACJ,WAAK,YAAY,KAAK,mEAAmE;AACzF,aAAO;AAAA,IACX;AAEA,SAAK,YAAY;AACjB,SAAK,WAAW;AAGhB,QAAI,gBAAgB,KAAK,QAAQ,GAAG;AAChC,aAAO,KAAK,gBAAgB,eAAiD,0BAA0B,IAAI;AAAA,QACvG,QAAQ,KAAK;AAAA,QACb;AAAA,QACA,YAAY,KAAK;AAAA,QACjB,QAAQ,KAAK,SAAS;AAAA,QACtB,WAAW,KAAK,SAAS;AAAA,MAC7B,CAAC;AAAA,IACL;AAGA,WAAO,KAAK,gBAAgB,eAAe,wBAAwB,IAAI;AAAA,MACnE,QAAQ,KAAK;AAAA,MACb;AAAA,MACA,YAAY,KAAK;AAAA,IACrB,CAAmC;AAAA,EACvC;AAAA,EAEA,cAAoB;AAChB,SAAK,eAAe;AAAA,EACxB;AAAA,EAEA,WAAW,QAAQ,OAAgB;AAnKvC;AAoKQ,QAAI,KAAK,gBAAgB,CAAC,MAAO,QAAO;AAExC,SAAK,eAAe;AACpB,SAAK,uBAAuB;AAE5B,eAAK,cAAL,mBAAgB,WAAW;AAC3B,SAAK,YAAY,KAAK,IAAI;AAC1B,SAAK,eAAe,KAAK,KAAK;AAE9B,SAAK,gBAAgB,gBAAgB,0BAA0B,KAAK;AAEpE,WAAO;AAAA,EACX;AACJ;AAvIa,yBAAN;AAAA,EAcE,0BAAO,0BAA0B;AAAA,EACjC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAnBI;;;ACXN,SAAS,gBAAgB,UAA4D;AACxF,SAAO,CAAC,CAAC,YAAY,YAAY;AACrC;AAeO,IAAM,4BAA0E;AAAA,EACnF,IAAI;AAAA,EACJ;AAAA,EACA,QAAQ,UAAU,QAA0C;AACxD,UAAM,EAAE,OAAO,OAAO,YAAY,QAAQ,SAAS,IAAI;AACvD,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,sBAAsB,SAAS,IAAI,sBAAsB;AAE/D,QAAI,SAAS,cAAc,CAAC,QAAS,QAAO;AAC5C,WAAO,oBAAoB,aAAa,QAAQ,YAAY,MAAM,QAAQ;AAAA,EAC9E;AACJ;AAEO,IAAM,6BAAyC;AAAA,EAClD,IAAI;AAAA,EACJ;AAAA,EACA,QAAQ,UAAU;AACd,UAAM,yBAAyB,SAAS,IAAI,sBAAsB;AAClE,WAAO,uBAAuB,WAAW,IAAI;AAAA,EACjD;AACJ;AAEO,IAAM,6BAAuC;AAAA,EAChD,IAAI;AAAA,EACJ;AAAA,EACA,QAAQ,UAAU;AACd,UAAM,yBAAyB,SAAS,IAAI,sBAAsB;AAClE,WAAO,uBAAuB,aAAa;AAAA,EAC/C;AACJ;;;ACtDA,mBAAgE;;;ACvBhE,IAAO,uBAAQ;AAAA,EACb,qBAAqB;AAAA,EACrB,0BAA0B;AAAA,EAC1B,2BAA2B;AAAA,EAC3B,8BAA8B;AAAA,EAC9B,eAAe;AAAA,EACf,iBAAiB;AACnB;;;ADmEW;AA7CJ,IAAM,wBAAwB,uBAAuB,aAAa;AAEzE,SAAS,aAAa,GAA0B;AAC5C,SAAO;AAAA,IACH,IAAI;AAAA,IACJ,MAAM;AAAA,MACF,YAAY,GAAG,CAAC,GAAG,4BAA4B;AAAA,MAC/C,UAAU,CAAC;AAAA,MACX,YAAY;AAAA,QACR;AAAA,UACI,YAAY;AAAA,QAChB;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,eAAe;AAAA,MACX;AAAA,MACA,WAAW;AAAA,MACX,cAAc;AAAA,MACd,aAAa;AAAA,MACb,YAAY;AAAA,MACZ,yBAAyB;AAAA,MACzB,UAAU;AAAA,QACN,OAAO,OAAO;AAAA,QACd,QAAQ,OAAO;AAAA,MACnB;AAAA,MACA,cAAc;AAAA,QACV;AAAA,QACA;AAAA,QACA,aAAa;AAAA,QACb,aAAa;AAAA,QACb;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AAEO,SAAS,kBAAkB;AAC9B,QAAM,yBAAyB,cAAc,sBAAsB;AACnE,QAAM,YAAY,cAAc,uBAAuB,UAAU;AAEjE,MAAI,CAAC,WAAW;AACZ,WAAO;AAAA,EACX;AAEA,SAAO,4CAAC,cAAW,WAAsB;AAC7C;AAEA,gBAAgB,eAAe;AAE/B,SAAS,WAAW,OAA4C;AAC5D,QAAM,EAAE,UAAU,IAAI;AACtB,QAAM,EAAE,EAAE,IAAI;AAEd,QAAM,gBAAgB,cAAc,aAAa;AACjD,QAAM,sBAAsB,cAAc,sBAAsB;AAChE,QAAM,iBAAiB,cAAc,eAAe;AAEpD,QAAM,CAAC,eAAe,gBAAgB,QAAI,uBAA2B,CAAC;AACtE,QAAM,kBAAc,qBAAO,aAAa,gBAAK,EAAE,CAAC;AAEhD,QAAM,CAAC,SAAS,UAAU,QAAI,uBAAS,KAAK;AAE5C,QAAM,4BAAwB,0BAAY,CAACC,mBAA0B;AACjE,qBAAiBA,cAAa;AAC9B,wBAAoB,mBAAmBA,cAAa;AAAA,EACxD,GAAG,CAAC,mBAAmB,CAAC;AAExB,QAAM,gBAAY,0BAAY,MAAM;AAEhC,mBAAe,eAAe,2BAA2B,EAAE;AAAA,EAC/D,GAAG,CAAC,cAAc,CAAC;AAEnB,QAAM,gBAAY,0BAAY,CAAC,YAAqB;AAChD,wBAAoB,WAAW,OAAO;AAAA,EAC1C,GAAG,CAAC,mBAAmB,CAAC;AAExB,QAAM,eAAW,0BAAY,MAAM;AAC/B,mBAAe,eAAe,2BAA2B,EAAE;AAAA,EAC/D,GAAG,CAAC,cAAc,CAAC;AAEnB,QAAM,mBAAe,0BAAY,CAAC,UAA2B;AACzD,QAAI,MAAM,QAAQ,UAAU;AACxB,eAAS;AAAA,IACb;AAAA,EACJ,GAAG,CAAC,QAAQ,CAAC;AAEb,8BAAU,MAAM;AACZ,aAAS,iBAAiB,WAAW,YAAY;AACjD,WAAO,MAAM;AACT,eAAS,oBAAoB,WAAW,YAAY;AAAA,IACxD;AAAA,EACJ,GAAG,CAAC,YAAY,CAAC;AAEjB,SACI,4CAAC,SAAI,WAAW,qBAAO,mBAAmB,cAAc,MAAM,UAAU,IAAI,GAAG,cAAc,MAAM,UAAU,KAAK,GAiB9G,uDAAC,SAAI,WAAW,KAAK,qBAAO,aAAa,EAAE,CAAC,qBAAO,kBAAkB,GAAG,CAAC,cAAc,CAAC,GACpF;AAAA;AAAA,MAAC;AAAA;AAAA,QACG,WAAW,KAAK,qBAAO,eAAe,qBAAO,kBAAkB;AAAA,QAC/D,SAAS;AAAA,QAET,sDAAC,wBAAY;AAAA;AAAA,IACjB;AAAA,IAEA;AAAA,MAAC;AAAA;AAAA,QACG,WAAW,KAAK,qBAAO,eAAe,qBAAO,oBAAoB;AAAA,QACjE,SAAS;AAAA,QAET,sDAAC,6BAAgB;AAAA;AAAA,IACrB;AAAA,KACJ,GACJ;AAER;;;AEhIA,IAAM,6BAA6B;AAE5B,IAAM,+BAAN,cAA2C,WAAW;AAAA,EACzD,YACsC,iBACO,cACR,gBACH,aACmB,kBACT,uBACa,8BACvD;AACE,UAAM;AAR4B;AACO;AACR;AACH;AACmB;AACT;AACa;AAyHzD,wBAAQ,YAAW;AAcnB,wBAAQ,oBAAkC;AAnItC,SAAK,uBAAuB;AAC5B,SAAK,cAAc;AACnB,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EAEQ,gBAAsB;AAC1B;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,IACJ,EAAE,QAAQ,CAAC,YAAY,KAAK,gBAAgB,gBAAgB,OAAO,CAAC;AAAA,EACxE;AAAA,EAEQ,yBAA+B;AAGnC,SAAK,cAAc,KAAK,gBAAgB,kBAAkB,CAAC,gBAAgB;AACvE,YAAM,gBAAgB,KAAK,eAAe,eAAe;AACzD,YAAM,cAAc,KAAK,aAAa,eAAe;AAErD,YAAM,EAAE,GAAG,IAAI;AAEf,WACI,+CAAe,mBAAkB,0BACjC,2CAAa,UAAS,EAAmB,YAC3C;AACE;AAAA,MACJ;AAEA,UAAI,OAAO,cAAc,IAAI;AACzB,cAAM,SAAS,YAAY;AAC3B,cAAM,cAAc,KAAK,6BAA6B,mBAAmB;AACzE,YAAI,OAAO,KAAK,eAAe,8BAA8B,aAAa;AACtE,eAAK,WAAW;AAAA,YACZ,YAAY,YAAY,cAAe;AAAA,YACvC,QAAQ,YAAY,UAAU;AAAA,YAC9B,UAAU,CAAC;AAAA,UACf,CAAC;AAAA,QACL,WAAW,KAAK,iBAAiB,WAAW;AACxC,eAAK,YAAY;AAAA,QACrB;AAAA,MACJ;AAEA,UAAI,OAAO,oBAAoB,MAAM,OAAO,kBAAkB,IAAI;AAC9D,aAAK,YAAY;AAAA,MACrB;AAAA,IACJ,CAAC,CAAC;AAAA,EACN;AAAA,EAEQ,qBAA2B;AAC/B,UAAM,iBAAiB,KAAK,aAAa,SAAS;AAAA,MAC9C,IAAI,CAAC,YAAY,UAAU,KAAK,aAAa,QAA2B,SAAS,EAAmB,UAAU,IAAI,IAAI;AAAA,MACtH,IAAI,CAAC,QAAK;AAhGtB;AAgGyB,sBAAO,EAAE,KAAK,yBAAwB,UAAK,sBAAsB,cAAc,IAAK,UAAU,CAAC,MAAzD,mBAA4D,KAAK,wBAAwB;AAAA,OAAC;AAAA,MAC7I,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI;AAAA,MACvB,UAAU,CAAC,SAAS,KAAK,uBAAwB,mBAAmB,KAAK,IAAI,CAAC,YAAY,EAAE,KAAK,KAAK,KAAK,OAAO,EAAE,CAAC,CAAC;AAAA,IAC1H;AAEA,SAAK,cAAc,eAAe,UAAU,CAAC,EAAE,KAAK,QAAQ,aAAa,MAAM;AArGvF;AAsGY,UACI,CAAC,SACD,UAAK,iBAAiB,cAAtB,mBAAiC,UAAS,SAC1C,KAAK,iBAAiB,aACxB;AACE;AAAA,MACJ;AAEA,YAAM,sBAAqB,kBAAa,KAAK,CAAC,UAAU,MAAM,MAAM,iCAAyC,MAAlF,mBAAqF;AAChH,UAAI,oBAAoB;AACpB,cAAM,EAAE,YAAY,QAAQ,IAAI;AAChC,aAAK,YAAY,MAAM,iDAAiD,YAAY;AACpF,aAAK,WAAW;AAAA,UACZ;AAAA,UACA,QAAQ,IAAI,UAAU;AAAA,UACtB,UAAU,EAAE,QAAQ;AAAA,UACpB,MAAM;AAAA,QACV,CAAC;AAAA,MACL,OAAO;AACH,YAAI,CAAC,KAAK,UAAU;AAChB,eAAK,YAAY,GAAG;AAAA,QACxB;AAAA,MACJ;AAAA,IACJ,CAAC,CAAC;AACF,SAAK,cAAc,eAAe,UAAU,CAAC,EAAE,KAAK,QAAQ,aAAa,MAAM;AA9HvF;AA+HY,UACI,CAAC,SACD,UAAK,iBAAiB,cAAtB,mBAAiC,UAAS,SAC1C,KAAK,iBAAiB,aACxB;AACE;AAAA,MACJ;AAEA,YAAM,sBAAqB,kBAAa,KAAK,CAAC,UAAU,MAAM,MAAM,iCAAyC,MAAlF,mBAAqF;AAChH,UAAI,oBAAoB;AACpB,cAAM,EAAE,YAAY,QAAQ,IAAI;AAChC,aAAK,YAAY,MAAM,iDAAiD,YAAY;AACpF,aAAK,WAAW;AAAA,UACZ;AAAA,UACA,QAAQ,IAAI,UAAU;AAAA,UACtB,UAAU,EAAE,QAAQ;AAAA,UACpB,MAAM;AAAA,QACV,CAAC;AAAA,MACL,OAAO;AACH,YAAI,CAAC,KAAK,UAAU;AAChB,eAAK,YAAY,GAAG;AAAA,QACxB;AAAA,MACJ;AAAA,IACJ,CAAC,CAAC;AAEF,SAAK,cAAc,KAAK,iBAAiB,cAAc,UAAU,CAAC,YAAY;AAC1E,UAAI,SAAS;AACT,aAAK,aAAa;AAAA,MACtB;AAEA,WAAK,WAAW;AAAA,IACpB,CAAC,CAAC;AAAA,EACN;AAAA,EAIQ,eAAqB;AACzB,QAAI,KAAK,qBAAqB,MAAM;AAChC,aAAO,aAAa,KAAK,gBAAgB;AACzC,WAAK,mBAAmB;AAAA,IAC5B;AAAA,EACJ;AAAA,EAEQ,WAAW,QAAgD;AAC/D,SAAK,aAAa;AAClB,SAAK,gBAAgB,eAAe,0BAA0B,IAAI,MAAM;AAAA,EAC5E;AAAA,EAGQ,YAAY,UAAkB,GAAS;AAC3C,QAAI,CAAC,KAAK,iBAAiB,WAAW;AAClC;AAAA,IACJ;AAEA,QAAI,YAAY,GAAG;AACf,WAAK,gBAAgB,eAAe,2BAA2B,EAAE;AAAA,IACrE,OAAO;AACH,WAAK,mBAAmB,OAAO,WAAW,MAAM,KAAK,YAAY,CAAC,GAAG,OAAO;AAAA,IAChF;AAAA,EACJ;AACJ;AA3Ja,+BAAN;AAAA,EAEE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,0BAAO,sBAAsB;AAAA,EAC7B;AAAA,EACA,0BAAO,0BAA0B;AAAA,GAR7B;;;ACLb,IAAMC,8BAA6B;AAE5B,IAAM,iCAAN,cAA6C,WAAW;AAAA,EAC3D,YACuC,WACM,cACP,aACD,YACoB,8BACJ,kBACnD;AACE,UAAM;AAP6B;AACM;AACP;AACD;AACoB;AACJ;AAiErD,wBAAQ,oBAAkC;AA7DtC,SAAK,cAAc;AACnB,SAAK,uBAAuB;AAAA,EAChC;AAAA,EAEQ,gBAAgB;AACpB;AAAA,MACI;AAAA,IACJ,EAAE,QAAQ,CAAC,QAAQ,KAAK,YAAY,gBAAgB,GAAG,CAAC;AAAA,EAC5D;AAAA,EAEQ,yBAA+B;AACnC,SAAK,cAAc,KAAK,YAAY,kBAAkB,CAAC,gBAAgB;AACnE,YAAM,gBAAgB,KAAK,WAAW,eAAe;AACrD,YAAM,cAAc,KAAK,aAAa,eAAe;AAErD,YAAM,EAAE,GAAG,IAAI;AAEf,WACI,+CAAe,mBAAkB,0BACjC,2CAAa,UAAS,EAAmB,cAC3C;AACE;AAAA,MACJ;AAEA,UAAI,OAAO,cAAc,IAAI;AACzB,cAAM,SAAS,YAAY;AAC3B,cAAM,cAAc,KAAK,6BAA6B,mBAAmB;AACzE,YAAI,OAAO,KAAK,eAAeA,+BAA8B,aAAa;AAGtE,gBAAM,sBAAsB,KAAK,UAAU,IAAI,yBAAyB;AACxE,gBAAM,aAAa,oBAAoB,cAAc;AACrD,gBAAM,EAAE,QAAQ,YAAY,IAAI;AAChC,gBAAM,EAAE,KAAK,IAAI;AACjB,eAAK,WAAW;AAAA,YACZ,YAAY,YAAY,cAAe;AAAA,YACvC,QAAQ,YAAY,UAAU;AAAA,YAC9B,UAAU;AAAA,cACN;AAAA,cACA,WAAW;AAAA,YACf;AAAA,UACJ,CAAC;AAAA,QACL,WAAW,KAAK,iBAAiB,WAAW;AACxC,eAAK,YAAY;AAAA,QACrB;AAAA,MACJ;AAAA,IACJ,CAAC,CAAC;AAAA,EACN;AAAA,EAEQ,eAAqB;AACzB,QAAI,KAAK,qBAAqB,MAAM;AAChC,aAAO,aAAa,KAAK,gBAAgB;AACzC,WAAK,mBAAmB;AAAA,IAC5B;AAAA,EACJ;AAAA,EAEQ,WAAW,QAAgD;AAC/D,SAAK,aAAa;AAClB,SAAK,YAAY,eAAe,0BAA0B,IAAI,MAAM;AAAA,EACxE;AAAA,EAGQ,YAAY,UAAkB,GAAS;AAC3C,QAAI,CAAC,KAAK,iBAAiB,WAAW;AAClC;AAAA,IACJ;AAEA,QAAI,YAAY,GAAG;AACf,WAAK,YAAY,eAAe,2BAA2B,EAAE;AAAA,IACjE,OAAO;AACH,WAAK,mBAAmB,OAAO,WAAW,MAAM,KAAK,YAAY,CAAC,GAAG,OAAO;AAAA,IAChF;AAAA,EACJ;AACJ;AApFa,iCAAN;AAAA,EAEE,0BAAO,QAAQ;AAAA,EACf;AAAA,EACA;AAAA,EACA;AAAA,EACA,0BAAO,0BAA0B;AAAA,EACjC,0BAAO,sBAAsB;AAAA,GAPzB;;;ACRN,IAAM,0BAAN,cAAsC,WAAW;AAAA,EACpD,YACsC,aACS,mBAC7C;AACE,UAAM;AAH4B;AACS;AAI3C;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,IACJ,EAAE,QAAQ,CAAC,YAAY,KAAK,YAAY,gBAAgB,OAAO,CAAC;AAEhE,SAAK,cAAc,KAAK,kBAAkB,SAAS,gBAAgB,cAAc,eAAe,CAAC;AAAA,EACrG;AACJ;AAfa,0BAAN;AAAA,EAEE;AAAA,EACA,0BAAO,gBAAgB;AAAA,GAHnB;;;AC8Bb,IAAM,iBAAiB;AAgBhB,IAAM,oCAAwF;AAAA,EACjG;AAAA,EACA,IAAI;AAAA,EACJ,QAAQ,UAAU,QAAkD;AAChE,UAAM,EAAE,QAAQ,WAAW,MAAM,IAAI;AAErC,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,UAAM,kBAAkB,SAAS,IAAI,sBAAsB;AAC3D,UAAM,kBAAkB,SAAS,IAAI,UAAU;AAE/C,UAAM,QAAQ,gBAAgB,QAAwB,QAAQ,EAAmB,YAAY;AAC7F,QAAI,CAAC,MAAO,QAAO;AAEnB,WAAO,UAAU,MAAM,CAAC,UAAU,UAAU;AAhFpD;AAoFY,YAAM,QAAQ,gBAAgB,sBAAsB,SAAS,QAAQ,MAAM,EAAE;AAC7E,UAAI,CAAC,MAAO,QAAO;AAEnB,YAAM,UAAU,MAAM,UAAU,SAAS,SAAS;AAClD,UAAI,CAAC,WAAW,EAAE,mBAAmB,UAAW,QAAO;AAEvD,YAAM,gBAAgB,QAAQ;AAC9B,YAAM,aAAa,cAAc,QAAQ;AACzC,YAAM,SAAQ,gBAAW,iBAAX,mBAAyB,KAAK,CAAC,MAAM,EAAE,YAAY,SAAS;AAC1E,UAAI,CAAC,MAAO,QAAO;AAEnB,YAAM,aAAa,sBAAsB,IAAG,WAAM,KAAK,EAAE,MAAb,YAAkB,EAAE,EAAE;AAClE,YAAM,OAAsB;AAAA,QACxB;AAAA,QACA,cAAc,CAAC;AAAA,UACX,YAAY;AAAA,UACZ,UAAU,WAAW,SAAS;AAAA,UAC9B,SAAS,SAAS;AAAA,UAClB;AAAA,UACA,aAAa;AAAA,QACjB,CAAC;AAAA,MACL;AAEA,YAAM,eAAe,wBAAwB,UAAU;AAAA,QACnD;AAAA,QACA;AAAA,QACA,WAAW,eAAe,UAAU,cAAc,MAAM,YAAY,MAAM,QAAQ;AAAA,QAClF,KAAK;AAAA,MACT,CAAC;AAED,UAAI,CAAC,aAAc,QAAO;AAG1B,cAAQ,cAAc,MAAM,aAAa,OAAO,OAAO;AACvD,cAAQ,yBAAyB;AAEjC,wBAAkB,0BAA0B,QAAQ,SAAS,QAAQ,SAAS,WAAW,SAAS,SAAU,MAAM,KAAK,CAAC;AAExH,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AACJ;AAOO,IAAM,kCAAoF;AAAA,EAC7F;AAAA,EACA,IAAI;AAAA,EACJ,QAAQ,UAAU,QAAgD;AAC9D,UAAM,EAAE,QAAQ,WAAW,MAAM,IAAI;AAErC,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AACzD,UAAM,kBAAkB,SAAS,IAAI,sBAAsB;AAC3D,UAAM,iBAAiB,SAAS,IAAI,eAAe;AAEnD,UAAM,MAAM,gBAAgB,QAA2B,QAAQ,EAAmB,UAAU;AAE5F,QAAI,CAAC,IAAK,QAAO;AAEjB,UAAM,OAAO,IAAI,QAAQ;AAEzB,aAAS,SAAS,SAAiB;AApJ3C;AAqJY,cAAO,kCAAM,iBAAN,mBAAoB,KAAK,CAAC,MAAM,EAAE,YAAY;AAAA,IACzD;AAEA,UAAM,MAAM,UAAU,IAAI,CAAC,aAAa,SAAS,OAAQ;AACzD,UAAM,kBAAkB,kBAAkB,wBAAwB,QAAQ,KAAK,KAAK;AACpF,QAAI,CAAC,gBAAiB,QAAO;AAE7B,WAAO,IAAI,MAAM,CAAC,IAAI,UAAU;AA5JxC;AA6JY,YAAM,QAAQ,SAAS,EAAE;AACzB,UAAI,CAAC,MAAO,QAAO;AAEnB,YAAM,aAAa,sBAAsB,IAAG,WAAM,KAAK,EAAE,MAAb,YAAkB,EAAE,EAAE;AAClE,YAAMC,QAAsB;AAAA,QACxB;AAAA,QACA,cAAc,CAAC;AAAA,UACX,YAAY;AAAA,UACZ,UAAU,WAAW,SAAS;AAAA,UAC9B,SAAS;AAAA,UACT;AAAA,UACA,aAAa;AAAA,QACjB,CAAC;AAAA,MACL;AAEA,YAAM,eAAe,wBAAwB,UAAU;AAAA,QACnD;AAAA,QACA,MAAAA;AAAA,QACA,WAAW,eAAe,UAAU,cAAc,MAAM,YAAY,MAAM,QAAQ;AAAA,MACtF,CAAC;AAED,UAAI,cAAc;AACd,eAAO,eAAe,mBAAmB,aAAa,IAAI,aAAa,MAAM;AAAA,MACjF;AAEA,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AACJ;AAOO,IAAM,oBAAN,cAAgC,sBAAoD;AAAA,EAQvF,YACuC,WACV,wBACR,YACO,aAC1B;AACE,UAAM,wBAAwB,YAAY,WAAW;AALlB;AARvC,wBAAiB,mBAAkB,oBAAI,IAAoB;AAE3D,wBAAQ,iCAAgC;AAwIxC,wBAAQ,wBAAuB,oBAAI,IAA0B;AAY7D,wBAAQ;AAvIJ;AAAA,MACI;AAAA,MACA;AAAA,IACJ,EAAE,QAAQ,CAAC,YAAY,WAAW,gBAAgB,OAAO,CAAC;AAI1D,QAAI,YAAY,mBAAmB,EAAmB,YAAY,EAAE,QAAQ;AACxE,WAAK,gCAAgC;AAAA,IACzC,OAAO;AACH,WAAK,cAAc,KAAK,aAAa,oBAAoB,EAAmB,YAAY,EAAE,KAAK,KAAK,CAAC,CAAC,EACjG,UAAU,MAAM;AACb,aAAK,gCAAgC;AACrC,aAAK,yBAAyB;AAAA,MAClC,CAAC,CAAC;AAAA,IACV;AAAA,EACJ;AAAA,EA3BA,IAAY,2BAA2B;AAAE,WAAO,KAAK,UAAU,IAAI,2BAA2B;AAAA,EAAG;AAAA,EACjG,IAAY,6BAA6B;AAAE,WAAO,KAAK,UAAU,IAAI,2BAA2B,SAAS,QAAQ;AAAA,EAAG;AAAA;AAAA;AAAA;AAAA,EA+B3G,mBAAmB,QAAgB,SAAiB,GAAW,GAAmB,GAAgC;AACvH,UAAM,MAAM,iBAAiB,QAAQ,OAAO;AAC5C,QAAI,KAAK,aAAa,IAAI,GAAG,GAAG;AAC5B,YAAM,IAAI,MAAM,gDAAgD,GAAG,iCAAiC;AAAA,IACxG;AAEA,QAAI,KAAK,+BAA+B;AACpC,YAAM,WAAW,iBAAiB,MAAM;AACxC,WAAK,kBAAkB,QAAQ;AAE/B,YAAM,KAAK,KAAK,yBAAyB,yBAAyB,UAAU,gBAAgB,CAAC;AAC7F,WAAK,aAAa,IAAI,KAAK,EAAE,QAAQ,SAAS,GAAG,WAAW,IAAI,GAAG,EAAE,CAAC;AACtE,WAAK,gBAAgB,IAAI,IAAI,GAAG;AAEhC,WAAK,yBAAyB;AAAA,IAClC,OAAO;AACH,WAAK,aAAa,IAAI,KAAK,EAAE,QAAQ,SAAS,GAAG,WAAW,IAAI,GAAG,EAAE,CAAC;AAAA,IAC1E;AAEA,WAAO,aAAa,MAAM,KAAK,qBAAqB,QAAQ,OAAO,CAAC;AAAA,EACxE;AAAA,EAES,qBACL,QACA,QACA,WACA,SACA,GACA,GACA,GACW;AACX,UAAM,MAAM,mBAAmB,QAAQ,QAAQ,WAAW,OAAO;AACjE,QAAI,KAAK,eAAe,IAAI,GAAG,GAAG;AAC9B,YAAM,IAAI,MAAM,gDAAgD,GAAG,iCAAiC;AAAA,IACxG;AAEA,QAAI,KAAK,+BAA+B;AACpC,YAAM,WAAW,iBAAiB,MAAM;AACxC,WAAK,kBAAkB,QAAQ;AAE/B,YAAM,KAAK,KAAK,yBAAyB,yBAAyB,UAAU,gBAAgB,CAAC;AAC7F,WAAK,eAAe,IAAI,KAAK,EAAE,QAAQ,QAAQ,WAAW,SAAS,GAAG,WAAW,IAAI,GAAG,EAAE,CAAC;AAC3F,WAAK,gBAAgB,IAAI,IAAI,GAAG;AAEhC,WAAK,yBAAyB;AAAA,IAClC,OAAO;AACH,WAAK,eAAe,IAAI,KAAK,EAAE,QAAQ,QAAQ,WAAW,SAAS,GAAG,WAAW,IAAI,GAAG,EAAE,CAAC;AAAA,IAC/F;AAEA,WAAO,aAAa,MAAM,KAAK,uBAAuB,QAAQ,QAAQ,WAAW,OAAO,CAAC;AAAA,EAC7F;AAAA,EAES,qBAAqB,QAAgB,SAAuB;AAzRzE;AA0RQ,UAAM,MAAM,iBAAiB,QAAQ,OAAO;AAC5C,UAAM,OAAO,KAAK,aAAa,IAAI,GAAG;AACtC,QAAI,CAAC,KAAM;AAEX,UAAM,WAAW,iBAAiB,MAAM;AACxC,SAAK,kCAAkC;AACvC,eAAK,qBAAqB,IAAI,QAAQ,MAAtC,mBAAyC;AAEzC,QAAI,KAAK,+BAA+B;AACpC,WAAK,yBAAyB,cAAc,UAAU,gBAAgB,CAAC,KAAK,SAAS,CAAC;AACtF,WAAK,gBAAgB,OAAO,KAAK,SAAS;AAAA,IAC9C;AAEA,SAAK,aAAa,OAAO,GAAG;AAAA,EAChC;AAAA,EAES,uBAAuB,QAAgB,QAAgB,WAAmB,WAAyB;AA1ShH;AA2SQ,UAAM,MAAM,mBAAmB,QAAQ,QAAQ,WAAW,SAAS;AACnE,UAAM,OAAO,KAAK,eAAe,IAAI,GAAG;AACxC,QAAI,CAAC,KAAM;AAEX,UAAM,WAAW,iBAAiB,MAAM;AACxC,SAAK,kCAAkC;AACvC,eAAK,qBAAqB,IAAI,QAAQ,MAAtC,mBAAyC;AAEzC,QAAI,KAAK,+BAA+B;AACpC,WAAK,yBAAyB,cAAc,UAAU,gBAAgB,CAAC,KAAK,SAAS,CAAC;AACtF,WAAK,gBAAgB,OAAO,KAAK,SAAS;AAAA,IAC9C;AAEA,SAAK,eAAe,OAAO,GAAG;AAAA,EAClC;AAAA,EAEQ,2BAAiC;AAGrC,SAAK,aAAa,QAAQ,CAAC,OAAO,QAAQ;AACtC,UAAI,CAAC,MAAM,WAAW;AAClB,cAAM,EAAE,QAAQ,EAAE,IAAI;AACtB,cAAM,WAAW,iBAAiB,MAAM;AACxC,aAAK,kBAAkB,QAAQ;AAE/B,cAAM,KAAK,KAAK,yBAAyB,yBAAyB,UAAU,gBAAgB,CAAC;AAC7F,cAAM,YAAY;AAClB,aAAK,gBAAgB,IAAI,IAAI,GAAG;AAAA,MACpC;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAGQ,kBAAkB,QAAsB;AAC5C,QAAI,CAAC,KAAK,2BAA4B;AAEtC,QAAI,CAAC,KAAK,qBAAqB,IAAI,MAAM,GAAG;AACxC,WAAK,2BAA2B,SAAS,MAAM;AAC/C,WAAK,qBAAqB,IAAI,QAAQ,IAAI,aAAa,aAAa,MAAM,KAAK,qBAAqB,OAAO,MAAM,CAAC,CAAC,CAAC;AAAA,IACxH;AAEA,SAAK,qBAAqB,IAAI,MAAM,EAAG,IAAI;AAAA,EAC/C;AAAA,EAGQ,2BAAiC;AACrC,QAAI,KAAK,uBAAuB,CAAC,KAAK,yBAA0B;AAEhE,SAAK,sBAAsB,aAAa,KAAK,yBAAyB,eAAe,UAAU,CAAC,cAAc;AAC1G,iBAAW,gBAAgB,WAAW;AAClC,cAAM,UAAU,UAAU,YAAY,EAAE,cAAc;AACtD,YAAI,SAAS;AACT,gBAAM,gBAAgB,QAAQ,IAAI,CAAC,WAAW;AA/VlE;AAgWwB,kBAAM,YAAY,OAAO;AACzB,kBAAM,MAAM,KAAK,gBAAgB,IAAI,SAAS;AAC9C,gBAAI,CAAC,IAAK,QAAO;AAEjB,kBAAM,UAAU,KAAK,aAAa,IAAI,GAAG;AACzC,gBAAI,SAAS;AACT,oBAAM,KAAI,YAAO,WAAP,mBAAgB,GAAG,GAAG,GAAG;AACnC,kBAAI,QAAQ,OAAM,uBAAG,MAAK,QAAQ,OAAM,uBAAG,GAAG,QAAO;AAErD,qBAAO,EAAE,UAAU,EAAE,SAAS,QAAQ,QAAQ,GAAG,QAAQ,QAAQ,QAAQ,OAAO,EAAE;AAAA,YACtF;AAAC;AAED,kBAAM,YAAY,KAAK,eAAe,IAAI,GAAG;AAC7C,gBAAI,WAAW;AACX,oBAAM,KAAI,YAAO,WAAP,mBAAgB,GAAG,GAAG,GAAG;AACnC,kBAAI,UAAU,OAAM,uBAAG,MAAK,UAAU,OAAM,uBAAG,GAAG,QAAO;AAEzD,qBAAO;AAAA,gBACH,QAAQ,UAAU;AAAA,gBAClB,UAAU;AAAA,kBACN,WAAW,UAAU;AAAA,kBACrB,SAAS,UAAU;AAAA,kBACnB,QAAQ,UAAU;AAAA,gBACtB;AAAA,gBACA,OAAO;AAAA,cACX;AAAA,YACJ;AAEA,mBAAO;AAAA,UACX,CAAC,EAAE,OAAO,CAAC,UAAU,SAAS;AAC1B,gBAAI,CAAC,QAAQ,CAAC,KAAK,MAAO,QAAO;AAEjC,gBAAI,CAAC,SAAS,OAAQ,UAAS,SAAS,KAAK;AAC7C,qBAAS,UAAU,KAAK,KAAK,QAAQ;AACrC,qBAAS,MAAM,KAAK,KAAK,KAAK;AAE9B,mBAAO;AAAA,UACX,GAAG;AAAA,YACC,QAAQ;AAAA,YACR,WAAW,CAAC;AAAA,YACZ,OAAO,CAAC;AAAA,UACZ,CAAC;AAED,cAAI,cAAc,UAAU,WAAW,EAAG;AAE1C,cAAI,gBAAgB,cAAc,UAAU,CAAC,CAAC,GAAG;AAC7C,iBAAK,YAAY,eAAe,kCAAkC,IAAI,aAAyD;AAAA,UACnI,OAAO;AACH,iBAAK,YAAY,eAAe,gCAAgC,IAAI,aAAuD;AAAA,UAC/H;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,CAAC,CAAC;AAAA,EACN;AAAA,EAEQ,oCAA0C;AAC9C,QAAI,KAAK,aAAa,SAAS,EAAG,MAAK,2BAA2B;AAAA,EACtE;AAAA,EAEQ,6BAAmC;AACvC,QAAI,KAAK,qBAAqB;AAC1B,WAAK,oBAAoB,QAAQ;AACjC,WAAK,sBAAsB;AAAA,IAC/B;AAAA,EACJ;AACJ;AAjOa,oBAAN;AAAA,EASE,0BAAO,QAAQ;AAAA,EACf;AAAA,EACA;AAAA,EACA;AAAA,GAZI;AAmOb,SAAS,iBAAiB,QAAwB;AAC9C,SAAO,UAAU,MAAM;AAC3B;AAEA,SAAS,iBAAiB,QAAgB,WAA2B;AACjE,SAAO,UAAU,MAAM,IAAI,SAAS;AACxC;AAEA,SAAS,mBAAmB,QAAgB,QAAgB,WAAmB,SAAyB;AACpG,SAAO,UAAU,MAAM,IAAI,MAAM,IAAI,SAAS,IAAI,OAAO;AAC7D;;;AChZO,IAAM,8BAAN,cAA0C,OAAO;AAAA,EAIpD,YACI,SACqC,WACvC;AACE,UAAM;AAF+B;AAAA,EAGzC;AAAA,EAES,aAAa;AAClB,IAAC;AAAA,MACG,CAAC,uBAAuB;AAAA,MACxB,CAAC,4BAA4B;AAAA,MAC7B,CAAC,8BAA8B;AAAA,MAC/B,CAAC,0BAA0B;AAAA,MAC3B,CAAC,sBAAsB;AAAA,MACvB,CAAC,oBAAoB,EAAE,UAAU,kBAAkB,CAAC;AAAA,IACxD,EAAmB,QAAQ,CAAC,MAAM,KAAK,UAAU,IAAI,CAAC,CAAC;AAAA,EAC3D;AAAA,EAES,UAAgB;AACrB,sBAAkB,KAAK,WAAW;AAAA,MAC9B,CAAC,kBAAkB;AAAA,IACvB,CAAC;AAAA,EACL;AAAA,EAES,WAAiB;AACtB,sBAAkB,KAAK,WAAW;AAAA,MAC9B,CAAC,uBAAuB;AAAA,MACxB,CAAC,4BAA4B;AAAA,MAC7B,CAAC,8BAA8B;AAAA,IACnC,CAAC;AAAA,EACL;AACJ;AAlCI,cADS,6BACO,cAAqB;AACrC,cAFS,6BAEO,QAA2B,EAAmB;AAFrD,8BAAN;AAAA,EADN,YAAY,yBAAyB;AAAA,EAO7B,0BAAO,QAAQ;AAAA,GANX;;;ACRE,SAAR,iBAA+F;AAClG,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAaH,CAAC,0BAA0B;AAAA,IAC3B,CAAC,2BAA2B;AAAA,EAChC;AACJ;",
  "names": ["document", "formulaString", "FORMULA_INPUT_TRIGGER_CHAR", "body"]
}
