{
  "version": 3,
  "sources": ["../../packages-experimental/uni-formula/src/const.ts", "../../packages-experimental/uni-formula/src/models/doc-formula.ts", "../../packages-experimental/uni-formula/src/services/uni-formula.service.ts", "../../packages-experimental/uni-formula/src/commands/mutations/doc-formula.mutation.ts", "../../packages-experimental/uni-formula/src/controller/uni-formula.controller.ts", "../../packages-experimental/uni-formula/src/uni-formula.plugin.ts"],
  "sourcesContent": ["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const UNI_FORMULA_PLUGIN_NAME = 'UI_FORMULA_PLUGIN';\n\nexport const DOC_UNI_FORMULA_RESOURCE_NAME = 'DOC_FORMULA_PLUGIN';\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICellData } from '@univerjs/core';\n\nexport const DOC_FORMULA_RESOURCE_KEY = 'DOC_FORMULA_RESOURCE';\n\n/**\n * This interface represents a single formula entity in a Univer Doc.\n */\nexport interface IDocFormulaData {\n    /** Id of this formula. It should be unique in a single document, and bound to the custom range's id. */\n    rangeId: string;\n\n    /**\n     * Raw formula string. For example `=SUM(A1:B4)`.\n     */\n    f: string;\n\n    /**\n     * Formula calculation result.\n     */\n    v?: ICellData['v'];\n\n    /**\n     * Formula calculation format.\n     */\n    t?: ICellData['t'];\n}\n\nexport interface IDocFormulaReference extends IDocFormulaData {\n    unitId: string;\n\n    /** Formula id assigned by the formula engine. It should not be written to snapshot. */\n    formulaId: string;\n}\n\nexport interface IDocFormulaCache extends Pick<ICellData, 'v' | 't'> { }\n\nexport function toJson(formulas: IDocFormulaReference[]): string {\n    return JSON.stringify(formulas.map((f) => ({ rangeId: f.rangeId, f: f.f, v: f.v, t: f.t })));\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICellData, IDisposable, Nullable } from '@univerjs/core';\nimport type { IDocFormulaCache, IDocFormulaData, IDocFormulaReference } from '../models/doc-formula';\n\nimport type { ISlideFormulaReference } from '../models/slide-formula';\nimport {\n    createIdentifier,\n    Disposable,\n    ICommandService,\n    IResourceManagerService,\n    IUniverInstanceService,\n    toDisposable,\n    UniverInstanceType,\n} from '@univerjs/core';\nimport { DOC_UNI_FORMULA_RESOURCE_NAME } from '../const';\nimport { toJson } from '../models/doc-formula';\n\nexport interface IUniFormulaService {\n    updateDocFormulaResults(unitId: string, formulaIds: string[], v: IDocFormulaCache[]): boolean;\n    updateSlideFormulaResults(unitId: string, pageId: string, elementId: string, formulaId: string, v: IDocFormulaCache): boolean;\n\n    // #region doc\n\n    hasDocFormula(unitId: string, formulaId: string): boolean;\n    getDocFormula(unitId: string, rangeId: string): Nullable<IDocFormulaReference>;\n    registerDocFormula(unitId: string, rangeId: string, f: string, v: ICellData['v'], t: ICellData['t']): IDisposable;\n    unregisterDocFormula(unitId: string, rangeId: string): void;\n\n    // #endregion\n\n    // #region slide\n\n    hasSlideFormula(unitId: string, pageId: string, elementId: string, formulaId: string): boolean;\n    getSlideFormula(unitId: string, pageId: string, elementId: string, formulaId: string): Nullable<ISlideFormulaReference>;\n    registerSlideFormula(unitId: string, pageId: string, elementId: string, f: string, v: ICellData['v'], t: ICellData['t']): IDisposable;\n    unregisterSlideFormula(unitId: string, pageId: string, elementId: string, formulaId: string): void;\n\n    // #endregion\n}\n\nexport const IUniFormulaService = createIdentifier<IUniFormulaService>('uni-formula.uni-formula.service');\n\n// NOTE@wzhudev: we implement formula for doc and slide here for convenience, but we should separate them in the future.\n\nexport class DumbUniFormulaService extends Disposable implements IUniFormulaService {\n    protected readonly _docFormulas = new Map<string, IDocFormulaReference>();\n    protected readonly _slideFormulas = new Map<string, ISlideFormulaReference>();\n\n    constructor(\n        @IResourceManagerService resourceManagerSrv: IResourceManagerService,\n        @ICommandService protected readonly _commandSrv: ICommandService,\n        @IUniverInstanceService protected readonly _instanceSrv: IUniverInstanceService\n    ) {\n        super();\n\n        this._initDocFormulaResources(resourceManagerSrv);\n\n        this._instanceSrv.getTypeOfUnitDisposed$(UniverInstanceType.UNIVER_DOC).subscribe((doc) => {\n            this._unregisterDoc(doc.getUnitId());\n        });\n    }\n\n    // #region docs\n\n    hasDocFormula(unitId: string, formulaId: string): boolean {\n        return this._docFormulas.has(getDocFormulaKey(unitId, formulaId));\n    }\n\n    getDocFormula(unitId: string, rangeId: string): Nullable<IDocFormulaReference> {\n        return this._docFormulas.get(getDocFormulaKey(unitId, rangeId)) ?? null;\n    }\n\n    updateDocFormulaResults(unitId: string, formulaIds: string[], v: IDocFormulaCache[]): boolean {\n        formulaIds.forEach((id, index) => {\n            const formulaData = this._docFormulas.get(getDocFormulaKey(unitId, id));\n            if (!formulaData) return true;\n\n            formulaData.v = v[index].v;\n            formulaData.t = v[index].t;\n            return true;\n        });\n\n        return true;\n    }\n\n    /**\n     * Register a doc formula into the formula system.\n     */\n    registerDocFormula(unitId: string, rangeId: string, f: string, v: ICellData['v'], t: ICellData['t']): IDisposable {\n        const key = getDocFormulaKey(unitId, rangeId);\n        if (this._docFormulas.has(key)) {\n            throw new Error(`[UniFormulaService]: cannot register formula ${key} when it is already registered!`);\n        }\n\n        this._docFormulas.set(key, { unitId, rangeId, f, formulaId: '', v, t });\n\n        return toDisposable(() => this.unregisterDocFormula(unitId, rangeId));\n    }\n\n    unregisterDocFormula(unitId: string, rangeId: string): void {\n        const key = getDocFormulaKey(unitId, rangeId);\n        const item = this._docFormulas.get(key);\n        if (item) {\n            this._docFormulas.delete(key);\n        }\n    }\n\n    updateSlideFormulaResults(unitId: string, pageId: string, elementId: string, formulaId: string, v: IDocFormulaCache): boolean {\n        const formulaData = this._slideFormulas.get(getSlideFormulaKey(unitId, pageId, elementId, formulaId));\n        if (!formulaData) return true;\n\n        formulaData.v = v.v;\n        formulaData.t = v.t;\n        return true;\n    }\n\n    private _initDocFormulaResources(resourceManagerService: IResourceManagerService): void {\n        resourceManagerService.registerPluginResource({\n            pluginName: DOC_UNI_FORMULA_RESOURCE_NAME,\n            businesses: [UniverInstanceType.UNIVER_DOC],\n            toJson: (unitId: string) => {\n                const formulas = this._getAllFormulasOfUnit(unitId);\n                return toJson(formulas.map((f) => f[1]));\n            },\n            parseJson: (json: string) => {\n                const formulas = JSON.parse(json) as IDocFormulaData[];\n                return formulas;\n            },\n            onLoad: (unitId, formulas) => {\n                formulas.forEach((f) => this.registerDocFormula(unitId, f.rangeId, f.f, f.v, f.t));\n            },\n            onUnLoad: (unitId) => {\n                this._unregisterDoc(unitId);\n            },\n        });\n    }\n\n    /**\n     * Remove all formulas under a doc.\n     */\n    private _unregisterDoc(unitId: string): void {\n        const existingFormulas = Array.from(this._docFormulas.entries());\n        existingFormulas.forEach(([_, value]) => {\n            if (value.unitId === unitId) this.unregisterDocFormula(unitId, value.rangeId);\n        });\n    }\n\n    // #endregion\n\n    // #region slides\n\n    registerSlideFormula(\n        unitId: string,\n        pageId: string,\n        elementId: string,\n        rangeId: string,\n        f: string,\n        v: ICellData['v'],\n        t: ICellData['t']\n    ): IDisposable {\n        const key = getSlideFormulaKey(unitId, pageId, elementId, f);\n        if (this._slideFormulas.has(key)) {\n            throw new Error(`[UniFormulaService]: cannot register formula ${key} when it is already registered!`);\n        }\n\n        this._slideFormulas.set(key, { unitId, pageId, elementId, rangeId, formulaId: '', f, v, t });\n\n        return toDisposable(() => this.unregisterDocFormula(unitId, rangeId));\n    }\n\n    hasSlideFormula(unitId: string, pageId: string, elementId: string, formulaId: string): boolean {\n        return this._slideFormulas.has(getSlideFormulaKey(unitId, pageId, elementId, formulaId));\n    }\n\n    getSlideFormula(unitId: string, pageId: string, elementId: string, formulaId: string): Nullable<ISlideFormulaReference> {\n        return this._slideFormulas.get(getSlideFormulaKey(unitId, pageId, elementId, formulaId)) ?? null;\n    }\n\n    unregisterSlideFormula(unitId: string, pageId: string, elementId: string, formulaId: string): void {\n        const key = getSlideFormulaKey(unitId, pageId, elementId, formulaId);\n        const item = this._slideFormulas.get(key);\n        if (item) {\n            this._slideFormulas.delete(key);\n        }\n    }\n\n    // #endregion\n\n    private _getAllFormulasOfUnit(unitId: string) {\n        const formulas = Array.from(this._docFormulas.entries()).filter((v) => v[1].unitId === unitId);\n        return formulas;\n    }\n}\n\nexport function getPseudoDocUnitKey(unitId: string): string {\n    return `pseudo-${unitId}`;\n}\n\nexport function getDocFormulaKey(unitId: string, formulaId: string): string {\n    return `pseudo-${unitId}-${formulaId}`;\n}\n\nfunction getSlideFormulaKey(unitId: string, pageId: string, elementId: string, formulaId: string): string {\n    return `pseudo-${unitId}-${pageId}-${elementId}-${formulaId}`;\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IMutation } from '@univerjs/core';\nimport { CommandType } from '@univerjs/core';\n\nimport { IUniFormulaService } from '../../services/uni-formula.service';\n\nexport interface IAddDocUniFormulaMutationParams {\n    unitId: string;\n    rangeId: string;\n\n    f: string;\n}\n\nexport const AddDocUniFormulaMutation: IMutation<IAddDocUniFormulaMutationParams> = {\n    type: CommandType.MUTATION,\n    id: 'doc.mutation.add-doc-uni-formula',\n    handler(accessor, params: IAddDocUniFormulaMutationParams) {\n        const { unitId, f, rangeId: id } = params;\n        const uniFormulaService = accessor.get(IUniFormulaService);\n\n        uniFormulaService.registerDocFormula(unitId, id, f);\n\n        return true;\n    },\n};\n\nexport interface IUpdateDocUniFormulaMutationParams extends IAddDocUniFormulaMutationParams {}\n\nexport const UpdateDocUniFormulaMutation: IMutation<IUpdateDocUniFormulaMutationParams> = {\n    type: CommandType.MUTATION,\n    id: 'doc.mutation.update-doc-uni-formula',\n    handler(accessor, params: IUpdateDocUniFormulaMutationParams) {\n        const { unitId, f, rangeId: id } = params;\n        const uniFormulaService = accessor.get(IUniFormulaService);\n\n        if (!uniFormulaService.hasDocFormula(unitId, id)) return false;\n\n        uniFormulaService.unregisterDocFormula(unitId, id);\n        uniFormulaService.registerDocFormula(unitId, id, f);\n        return true;\n    },\n};\n\nexport interface IRemoveDocUniFormulaMutationParams {\n    unitId: string;\n    rangeId: string;\n}\n\nexport const RemoveDocUniFormulaMutation: IMutation<IRemoveDocUniFormulaMutationParams> = {\n    type: CommandType.MUTATION,\n    id: 'doc.mutation.remove-doc-uni-formula',\n    handler(accessor, params: IRemoveDocUniFormulaMutationParams) {\n        const { unitId, rangeId: id } = params;\n        const uniFormulaService = accessor.get(IUniFormulaService);\n\n        if (!uniFormulaService.hasDocFormula(unitId, id)) {\n            return false;\n        }\n\n        uniFormulaService.unregisterDocFormula(unitId, id);\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ICommandService } from '@univerjs/core';\nimport { AddDocUniFormulaMutation, RemoveDocUniFormulaMutation, UpdateDocUniFormulaMutation } from '../commands/mutations/doc-formula.mutation';\n\nexport class UniFormulaController {\n    constructor(\n        @ICommandService private readonly _commandSrv: ICommandService\n    ) {\n        this._initCommands();\n    }\n\n    private _initCommands(): void {\n        [\n            AddDocUniFormulaMutation,\n            UpdateDocUniFormulaMutation,\n            RemoveDocUniFormulaMutation,\n        ].forEach((command) => this._commandSrv.registerCommand(command));\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport { Inject, Injector, Plugin, UniverInstanceType } from '@univerjs/core';\nimport { DumbUniFormulaService, IUniFormulaService } from './services/uni-formula.service';\nimport { UNI_FORMULA_PLUGIN_NAME } from './const';\nimport { UniFormulaController } from './controller/uni-formula.controller';\n\nexport class UniverDocUniFormulaPlugin extends Plugin {\n    static override pluginName: string = UNI_FORMULA_PLUGIN_NAME;\n\n    // This plugin should load only when sheet related modules are loaded.\n    static override type: UniverInstanceType = UniverInstanceType.UNIVER_UNKNOWN;\n\n    constructor(\n        private readonly _config: { playDumb: boolean } | undefined,\n        @Inject(Injector) protected readonly _injector: Injector\n    ) {\n        super();\n    }\n\n    override onStarting(): void {\n        this._injector.add([UniFormulaController]);\n        this._injector.get(UniFormulaController);\n\n        if (this._config?.playDumb) {\n            this._injector.add([IUniFormulaService, { useClass: DumbUniFormulaService }] as Dependency);\n            this._injector.get(IUniFormulaService);\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAgBO,IAAM,0BAA0B;AAEhC,IAAM,gCAAgC;;;ACkCtC,SAAS,OAAO,UAA0C;AAC7D,SAAO,KAAK,UAAU,SAAS,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,CAAC;AAC/F;;;ACCO,IAAM,qBAAqB,iBAAqC,iCAAiC;AAIjG,IAAM,wBAAN,cAAoC,WAAyC;AAAA,EAIhF,YAC6B,oBACW,aACO,cAC7C;AACE,UAAM;AAH8B;AACO;AAN/C,wBAAmB,gBAAe,oBAAI,IAAkC;AACxE,wBAAmB,kBAAiB,oBAAI,IAAoC;AASxE,SAAK,yBAAyB,kBAAkB;AAEhD,SAAK,aAAa,uBAAuB,EAAmB,UAAU,EAAE,UAAU,CAAC,QAAQ;AACvF,WAAK,eAAe,IAAI,UAAU,CAAC;AAAA,IACvC,CAAC;AAAA,EACL;AAAA;AAAA,EAIA,cAAc,QAAgB,WAA4B;AACtD,WAAO,KAAK,aAAa,IAAI,iBAAiB,QAAQ,SAAS,CAAC;AAAA,EACpE;AAAA,EAEA,cAAc,QAAgB,SAAiD;AAnFnF;AAoFQ,YAAO,UAAK,aAAa,IAAI,iBAAiB,QAAQ,OAAO,CAAC,MAAvD,YAA4D;AAAA,EACvE;AAAA,EAEA,wBAAwB,QAAgB,YAAsB,GAAgC;AAC1F,eAAW,QAAQ,CAAC,IAAI,UAAU;AAC9B,YAAM,cAAc,KAAK,aAAa,IAAI,iBAAiB,QAAQ,EAAE,CAAC;AACtE,UAAI,CAAC,YAAa,QAAO;AAEzB,kBAAY,IAAI,EAAE,KAAK,EAAE;AACzB,kBAAY,IAAI,EAAE,KAAK,EAAE;AACzB,aAAO;AAAA,IACX,CAAC;AAED,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,mBAAmB,QAAgB,SAAiB,GAAW,GAAmB,GAAgC;AAC9G,UAAM,MAAM,iBAAiB,QAAQ,OAAO;AAC5C,QAAI,KAAK,aAAa,IAAI,GAAG,GAAG;AAC5B,YAAM,IAAI,MAAM,gDAAgD,GAAG,iCAAiC;AAAA,IACxG;AAEA,SAAK,aAAa,IAAI,KAAK,EAAE,QAAQ,SAAS,GAAG,WAAW,IAAI,GAAG,EAAE,CAAC;AAEtE,WAAO,aAAa,MAAM,KAAK,qBAAqB,QAAQ,OAAO,CAAC;AAAA,EACxE;AAAA,EAEA,qBAAqB,QAAgB,SAAuB;AACxD,UAAM,MAAM,iBAAiB,QAAQ,OAAO;AAC5C,UAAM,OAAO,KAAK,aAAa,IAAI,GAAG;AACtC,QAAI,MAAM;AACN,WAAK,aAAa,OAAO,GAAG;AAAA,IAChC;AAAA,EACJ;AAAA,EAEA,0BAA0B,QAAgB,QAAgB,WAAmB,WAAmB,GAA8B;AAC1H,UAAM,cAAc,KAAK,eAAe,IAAI,mBAAmB,QAAQ,QAAQ,WAAW,SAAS,CAAC;AACpG,QAAI,CAAC,YAAa,QAAO;AAEzB,gBAAY,IAAI,EAAE;AAClB,gBAAY,IAAI,EAAE;AAClB,WAAO;AAAA,EACX;AAAA,EAEQ,yBAAyB,wBAAuD;AACpF,2BAAuB,uBAAuB;AAAA,MAC1C,YAAY;AAAA,MACZ,YAAY,CAAC,EAAmB,UAAU;AAAA,MAC1C,QAAQ,CAAC,WAAmB;AACxB,cAAM,WAAW,KAAK,sBAAsB,MAAM;AAClD,eAAO,OAAO,SAAS,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AAAA,MAC3C;AAAA,MACA,WAAW,CAAC,SAAiB;AACzB,cAAM,WAAW,KAAK,MAAM,IAAI;AAChC,eAAO;AAAA,MACX;AAAA,MACA,QAAQ,CAAC,QAAQ,aAAa;AAC1B,iBAAS,QAAQ,CAAC,MAAM,KAAK,mBAAmB,QAAQ,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;AAAA,MACrF;AAAA,MACA,UAAU,CAAC,WAAW;AAClB,aAAK,eAAe,MAAM;AAAA,MAC9B;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKQ,eAAe,QAAsB;AACzC,UAAM,mBAAmB,MAAM,KAAK,KAAK,aAAa,QAAQ,CAAC;AAC/D,qBAAiB,QAAQ,CAAC,CAAC,GAAG,KAAK,MAAM;AACrC,UAAI,MAAM,WAAW,OAAQ,MAAK,qBAAqB,QAAQ,MAAM,OAAO;AAAA,IAChF,CAAC;AAAA,EACL;AAAA;AAAA;AAAA,EAMA,qBACI,QACA,QACA,WACA,SACA,GACA,GACA,GACW;AACX,UAAM,MAAM,mBAAmB,QAAQ,QAAQ,WAAW,CAAC;AAC3D,QAAI,KAAK,eAAe,IAAI,GAAG,GAAG;AAC9B,YAAM,IAAI,MAAM,gDAAgD,GAAG,iCAAiC;AAAA,IACxG;AAEA,SAAK,eAAe,IAAI,KAAK,EAAE,QAAQ,QAAQ,WAAW,SAAS,WAAW,IAAI,GAAG,GAAG,EAAE,CAAC;AAE3F,WAAO,aAAa,MAAM,KAAK,qBAAqB,QAAQ,OAAO,CAAC;AAAA,EACxE;AAAA,EAEA,gBAAgB,QAAgB,QAAgB,WAAmB,WAA4B;AAC3F,WAAO,KAAK,eAAe,IAAI,mBAAmB,QAAQ,QAAQ,WAAW,SAAS,CAAC;AAAA,EAC3F;AAAA,EAEA,gBAAgB,QAAgB,QAAgB,WAAmB,WAAqD;AA7L5H;AA8LQ,YAAO,UAAK,eAAe,IAAI,mBAAmB,QAAQ,QAAQ,WAAW,SAAS,CAAC,MAAhF,YAAqF;AAAA,EAChG;AAAA,EAEA,uBAAuB,QAAgB,QAAgB,WAAmB,WAAyB;AAC/F,UAAM,MAAM,mBAAmB,QAAQ,QAAQ,WAAW,SAAS;AACnE,UAAM,OAAO,KAAK,eAAe,IAAI,GAAG;AACxC,QAAI,MAAM;AACN,WAAK,eAAe,OAAO,GAAG;AAAA,IAClC;AAAA,EACJ;AAAA;AAAA,EAIQ,sBAAsB,QAAgB;AAC1C,UAAM,WAAW,MAAM,KAAK,KAAK,aAAa,QAAQ,CAAC,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,WAAW,MAAM;AAC7F,WAAO;AAAA,EACX;AACJ;AApJa,wBAAN;AAAA,EAKE;AAAA,EACA;AAAA,EACA;AAAA,GAPI;AA0JN,SAAS,iBAAiB,QAAgB,WAA2B;AACxE,SAAO,UAAU,MAAM,IAAI,SAAS;AACxC;AAEA,SAAS,mBAAmB,QAAgB,QAAgB,WAAmB,WAA2B;AACtG,SAAO,UAAU,MAAM,IAAI,MAAM,IAAI,SAAS,IAAI,SAAS;AAC/D;;;AC/LO,IAAM,2BAAuE;AAAA,EAChF;AAAA,EACA,IAAI;AAAA,EACJ,QAAQ,UAAU,QAAyC;AACvD,UAAM,EAAE,QAAQ,GAAG,SAAS,GAAG,IAAI;AACnC,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AAEzD,sBAAkB,mBAAmB,QAAQ,IAAI,CAAC;AAElD,WAAO;AAAA,EACX;AACJ;AAIO,IAAM,8BAA6E;AAAA,EACtF;AAAA,EACA,IAAI;AAAA,EACJ,QAAQ,UAAU,QAA4C;AAC1D,UAAM,EAAE,QAAQ,GAAG,SAAS,GAAG,IAAI;AACnC,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AAEzD,QAAI,CAAC,kBAAkB,cAAc,QAAQ,EAAE,EAAG,QAAO;AAEzD,sBAAkB,qBAAqB,QAAQ,EAAE;AACjD,sBAAkB,mBAAmB,QAAQ,IAAI,CAAC;AAClD,WAAO;AAAA,EACX;AACJ;AAOO,IAAM,8BAA6E;AAAA,EACtF;AAAA,EACA,IAAI;AAAA,EACJ,QAAQ,UAAU,QAA4C;AAC1D,UAAM,EAAE,QAAQ,SAAS,GAAG,IAAI;AAChC,UAAM,oBAAoB,SAAS,IAAI,kBAAkB;AAEzD,QAAI,CAAC,kBAAkB,cAAc,QAAQ,EAAE,GAAG;AAC9C,aAAO;AAAA,IACX;AAEA,sBAAkB,qBAAqB,QAAQ,EAAE;AACjD,WAAO;AAAA,EACX;AACJ;;;AC1DO,IAAM,uBAAN,MAA2B;AAAA,EAC9B,YACsC,aACpC;AADoC;AAElC,SAAK,cAAc;AAAA,EACvB;AAAA,EAEQ,gBAAsB;AAC1B;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,IACJ,EAAE,QAAQ,CAAC,YAAY,KAAK,YAAY,gBAAgB,OAAO,CAAC;AAAA,EACpE;AACJ;AAda,uBAAN;AAAA,EAEE;AAAA,GAFI;;;ACGN,IAAM,4BAAN,cAAwC,OAAO;AAAA,EAMlD,YACqB,SACoB,WACvC;AACE,UAAM;AAHW;AACoB;AAAA,EAGzC;AAAA,EAES,aAAmB;AAnChC;AAoCQ,SAAK,UAAU,IAAI,CAAC,oBAAoB,CAAC;AACzC,SAAK,UAAU,IAAI,oBAAoB;AAEvC,SAAI,UAAK,YAAL,mBAAc,UAAU;AACxB,WAAK,UAAU,IAAI,CAAC,oBAAoB,EAAE,UAAU,sBAAsB,CAAC,CAAe;AAC1F,WAAK,UAAU,IAAI,kBAAkB;AAAA,IACzC;AAAA,EACJ;AACJ;AArBI,cADS,2BACO,cAAqB;AAAA;AAGrC,cAJS,2BAIO,QAA2B,EAAmB;AAJrD,4BAAN;AAAA,EAQE,0BAAO,QAAQ;AAAA,GARX;",
  "names": []
}
