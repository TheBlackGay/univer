{
  "version": 3,
  "sources": ["../../packages/data-validation/src/common/util.ts", "../../packages/data-validation/src/models/data-validation-model.ts", "../../packages/data-validation/src/controllers/dv-resource.controller.ts", "../../packages/data-validation/src/services/data-validator-registry.service.ts", "../../packages/data-validation/src/commands/mutations/data-validation.mutation.ts", "../../packages/data-validation/src/commands/commands/data-validation.command.ts", "../../packages/data-validation/src/controllers/config.schema.ts", "../../packages/data-validation/src/plugin.ts", "../../packages/data-validation/src/types/const/operator-text-map.ts", "../../packages/data-validation/src/types/const/two-formula-operators.ts", "../../packages/data-validation/src/validators/base-data-validator.ts", "../../packages/sheets-data-validation/src/services/dv-cache.service.ts", "../../packages/sheets-data-validation/src/utils/formula.ts", "../../packages/sheets-data-validation/src/services/dv-custom-formula.service.ts", "../../packages/sheets-data-validation/src/services/dv-formula.service.ts", "../../packages/sheets-data-validation/src/utils/get-cell-data-origin.ts", "../../packages/sheets-data-validation/src/models/rule-matrix.ts", "../../packages/sheets-data-validation/src/models/sheet-data-validation-model.ts", "../../packages/sheets-data-validation/src/validators/checkbox-validator.ts", "../../packages/sheets-data-validation/src/common/date-text-map.ts", "../../packages/sheets-data-validation/src/types/const/two-formula-operators.ts", "../../packages/sheets-data-validation/src/validators/const.ts", "../../packages/sheets-data-validation/src/validators/util.ts", "../../packages/sheets-data-validation/src/validators/date-validator.ts", "../../packages/sheets-data-validation/src/types/const/operator-text-map.ts", "../../packages/sheets-data-validation/src/validators/decimal-validator.ts", "../../packages/sheets-data-validation/src/validators/list-validator.ts", "../../packages/sheets-data-validation/src/validators/text-length-validator.ts", "../../packages/sheets-data-validation/src/commands/commands/data-validation.command.ts", "../../packages/sheets-data-validation/src/common/const.ts", "../../packages/sheets-data-validation/src/controllers/config.schema.ts", "../../packages/sheets-data-validation/src/controllers/dv-formula-ref-range.controller.ts", "../../packages/sheets-data-validation/src/controllers/dv-formula.controller.ts", "../../packages/sheets-data-validation/src/controllers/dv-ref-range.controller.ts", "../../packages/sheets-data-validation/src/controllers/dv-sheet.controller.ts", "../../packages/sheets-data-validation/src/validators/any-validator.ts", "../../packages/sheets-data-validation/src/validators/custom-validator.ts", "../../packages/sheets-data-validation/src/validators/list-multiple-validator.ts", "../../packages/sheets-data-validation/src/validators/whole-validator.ts", "../../packages/sheets-data-validation/src/controllers/dv.controller.ts", "../../packages/sheets-data-validation/src/services/dv-validator-service.ts", "../../packages/sheets-data-validation/src/plugin.ts", "../../packages/sheets-data-validation/src/utils/create.ts"],
  "sourcesContent": ["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDataValidationRuleBase, IDataValidationRuleOptions } from '@univerjs/core';\n\nexport function getRuleSetting(rule: IDataValidationRuleBase): IDataValidationRuleBase {\n    return {\n        type: rule.type,\n        operator: rule.operator,\n        formula1: rule.formula1,\n        formula2: rule.formula2,\n        allowBlank: rule.allowBlank,\n    };\n}\n\nexport function getRuleOptions(rule: IDataValidationRuleOptions): IDataValidationRuleOptions {\n    return {\n        error: rule.error,\n        errorStyle: rule.errorStyle,\n        errorTitle: rule.errorTitle,\n        imeMode: rule.imeMode,\n        prompt: rule.prompt,\n        promptTitle: rule.promptTitle,\n        showDropDown: rule.showDropDown,\n        showErrorMessage: rule.showErrorMessage,\n        showInputMessage: rule.showInputMessage,\n        renderMode: rule.renderMode,\n        bizInfo: rule.bizInfo,\n    };\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDataValidationRule } from '@univerjs/core';\nimport type { IUpdateRulePayload } from '../types/interfaces/i-update-rule-payload';\nimport { Disposable, ILogService, Tools } from '@univerjs/core';\nimport { debounceTime, Subject } from 'rxjs';\nimport { getRuleOptions, getRuleSetting } from '../common/util';\nimport { UpdateRuleType } from '../types/enum/update-rule-type';\n\nexport type DataValidationChangeType = 'update' | 'add' | 'remove';\nexport type DataValidationChangeSource = 'command' | 'patched';\n\nexport interface IRuleChange {\n    rule: IDataValidationRule;\n    type: DataValidationChangeType;\n    unitId: string;\n    subUnitId: string;\n    source: DataValidationChangeSource;\n    updatePayload?: IUpdateRulePayload;\n    oldRule?: IDataValidationRule;\n}\n\ninterface ISubUnitDataValidation {\n    map: Map<string, IDataValidationRule>;\n    list: IDataValidationRule[];\n}\n\nexport class DataValidationModel extends Disposable {\n    private readonly _model = new Map<string, Map<string, ISubUnitDataValidation>>();\n    private readonly _ruleChange$ = new Subject<IRuleChange>();\n\n    ruleChange$ = this._ruleChange$.asObservable();\n    ruleChangeDebounce$ = this.ruleChange$.pipe(debounceTime(20));\n\n    constructor(\n        @ILogService private readonly _logService: ILogService\n    ) {\n        super();\n\n        this.disposeWithMe({\n            dispose: () => {\n                this._ruleChange$.complete();\n            },\n        });\n    }\n\n    private _ensureMap(unitId: string, subUnitId: string) {\n        if (!this._model.has(unitId)) {\n            this._model.set(unitId, new Map());\n        }\n        const unitMap = this._model.get(unitId)!;\n\n        if (unitMap.has(subUnitId)) {\n            return unitMap.get(subUnitId)!;\n        }\n\n        const map = { map: new Map<string, IDataValidationRule>(), list: [] as IDataValidationRule[] };\n        unitMap.set(subUnitId, map);\n\n        return map;\n    }\n\n    private _addSubUnitRule(subUnit: ISubUnitDataValidation, rule: IDataValidationRule | IDataValidationRule[], index?: number) {\n        const { map: dataValidationMap, list: dataValidations } = subUnit;\n        const _rules = Array.isArray(rule) ? rule : [rule];\n        const rules = _rules.filter((item) => !dataValidationMap.has(item.uid));\n\n        if (typeof index === 'number' && index < dataValidations.length) {\n            dataValidations.splice(index, 0, ...rules);\n        } else {\n            dataValidations.push(...rules);\n        }\n\n        rules.forEach((item) => {\n            dataValidationMap.set(item.uid, item);\n        });\n    }\n\n    private _removeSubUnitRule(subUnit: ISubUnitDataValidation, ruleId: string) {\n        const { map: dataValidationMap, list: dataValidations } = subUnit;\n        const index = dataValidations.findIndex((item) => item.uid === ruleId);\n        if (index > -1) {\n            dataValidations.splice(index, 1);\n            dataValidationMap.delete(ruleId);\n        }\n    }\n\n    private _updateSubUnitRule(subUnit: ISubUnitDataValidation, ruleId: string, payload: IUpdateRulePayload): IDataValidationRule {\n        const { map: dataValidationMap, list: dataValidations } = subUnit;\n        const oldRule = dataValidationMap.get(ruleId);\n        const index = dataValidations.findIndex((rule) => ruleId === rule.uid);\n\n        if (!oldRule) {\n            throw new Error(`Data validation rule is not found, ruleId: ${ruleId}.`);\n        }\n\n        const rule = { ...oldRule };\n\n        switch (payload.type) {\n            case UpdateRuleType.RANGE: {\n                rule.ranges = payload.payload;\n                break;\n            }\n            case UpdateRuleType.SETTING: {\n                Object.assign(rule, getRuleSetting(payload.payload));\n                break;\n            }\n\n            case UpdateRuleType.OPTIONS: {\n                Object.assign(rule, getRuleOptions(payload.payload));\n                break;\n            }\n\n            case UpdateRuleType.ALL: {\n                Object.assign(rule, payload.payload);\n                break;\n            }\n            default:\n                break;\n        }\n\n        dataValidations[index] = rule;\n        dataValidationMap.set(ruleId, rule);\n        return rule;\n    }\n\n    private _addRuleSideEffect(unitId: string, subUnitId: string, rule: IDataValidationRule, source: DataValidationChangeSource) {\n        const subUnitMap = this._ensureMap(unitId, subUnitId);\n        const oldRule = subUnitMap.map.get(rule.uid);\n        if (oldRule) {\n            return;\n        }\n\n        return {\n            rule,\n            type: 'add',\n            unitId,\n            subUnitId,\n            source,\n        } as const;\n    }\n\n    addRule(unitId: string, subUnitId: string, rule: IDataValidationRule | IDataValidationRule[], source: DataValidationChangeSource, index?: number) {\n        try {\n            const subUnitMap = this._ensureMap(unitId, subUnitId);\n            const rules = Array.isArray(rule) ? rule : [rule];\n            const effects = rules.map((item) => this._addRuleSideEffect(unitId, subUnitId, item, source));\n\n            this._addSubUnitRule(subUnitMap, rule, index);\n            effects.forEach((effect) => {\n                if (effect) {\n                    this._ruleChange$.next(effect);\n                }\n            });\n        } catch (error) {\n            this._logService.error(error);\n        }\n    }\n\n    updateRule(unitId: string, subUnitId: string, ruleId: string, payload: IUpdateRulePayload, source: DataValidationChangeSource) {\n        try {\n            const subUnitMap = this._ensureMap(unitId, subUnitId);\n            const oldRule = Tools.deepClone(subUnitMap.map.get(ruleId));\n            if (!oldRule) {\n                throw new Error(`Data validation rule is not found, ruleId: ${ruleId}.`);\n            }\n            const rule = this._updateSubUnitRule(subUnitMap, ruleId, payload);\n            this._ruleChange$.next({\n                rule,\n                type: 'update',\n                unitId,\n                subUnitId,\n                source,\n                updatePayload: payload,\n                oldRule,\n            });\n        } catch (error) {\n            this._logService.error(error);\n        }\n    }\n\n    removeRule(unitId: string, subUnitId: string, ruleId: string, source: DataValidationChangeSource) {\n        try {\n            const map = this._ensureMap(unitId, subUnitId);\n            const oldRule = map.map.get(ruleId);\n            if (oldRule) {\n                this._removeSubUnitRule(map, ruleId);\n                this._ruleChange$.next({\n                    rule: oldRule,\n                    type: 'remove',\n                    unitId,\n                    subUnitId,\n                    source,\n                });\n            }\n        } catch (error) {\n            this._logService.error(error);\n        }\n    }\n\n    getRuleById(unitId: string, subUnitId: string, ruleId: string) {\n        const map = this._ensureMap(unitId, subUnitId);\n        return map.map.get(ruleId);\n    }\n\n    getRuleIndex(unitId: string, subUnitId: string, ruleId: string) {\n        const map = this._ensureMap(unitId, subUnitId);\n        return map.list.findIndex((rule) => rule.uid === ruleId);\n    }\n\n    getRules(unitId: string, subUnitId: string) {\n        const manager = this._ensureMap(unitId, subUnitId);\n        return [...manager.list];\n    }\n\n    getUnitRules(unitId: string) {\n        const unitMap = this._model.get(unitId);\n        if (!unitMap) {\n            return [];\n        }\n        const res = [] as [string, IDataValidationRule[]][];\n\n        unitMap.forEach((manager, subUnitId) => {\n            res.push([subUnitId, manager.list]);\n        });\n\n        return res;\n    }\n\n    deleteUnitRules(unitId: string) {\n        this._model.delete(unitId);\n    }\n\n    getSubUnitIds(unitId: string) {\n        return Array.from(this._model.get(unitId)?.keys() ?? []);\n    }\n\n    getAll() {\n        return Array.from(this._model.keys()).map((unitId) => [unitId, this.getUnitRules(unitId)] as const);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ISheetDataValidationRule } from '@univerjs/core';\nimport { Disposable, Inject, IResourceManagerService, IUniverInstanceService, UniverInstanceType } from '@univerjs/core';\nimport { DataValidationModel } from '../models/data-validation-model';\n\ntype DataValidationJSON = Record<string, ISheetDataValidationRule[]>;\n\nconst DATA_VALIDATION_PLUGIN_NAME = 'SHEET_DATA_VALIDATION_PLUGIN';\n\nexport class DataValidationResourceController extends Disposable {\n    constructor(\n        @IResourceManagerService private readonly _resourceManagerService: IResourceManagerService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @Inject(DataValidationModel) private readonly _dataValidationModel: DataValidationModel\n    ) {\n        super();\n        this._initSnapshot();\n    }\n\n    private _initSnapshot() {\n        const toJson = (unitID: string) => {\n            const map = this._dataValidationModel.getUnitRules(unitID);\n            const resultMap: DataValidationJSON = {};\n            if (map) {\n                map.forEach(([key, v]) => {\n                    resultMap[key] = v;\n                });\n                return JSON.stringify(resultMap);\n            }\n            return '';\n        };\n        const parseJson = (json: string): DataValidationJSON => {\n            if (!json) {\n                return {};\n            }\n            try {\n                return JSON.parse(json);\n            } catch (err) {\n                return {};\n            }\n        };\n        this.disposeWithMe(\n            this._resourceManagerService.registerPluginResource<DataValidationJSON>({\n                pluginName: DATA_VALIDATION_PLUGIN_NAME,\n                businesses: [UniverInstanceType.UNIVER_SHEET],\n                toJson: (unitID) => toJson(unitID),\n                parseJson: (json) => parseJson(json),\n                onUnLoad: (unitID) => {\n                    this._dataValidationModel.deleteUnitRules(unitID);\n                },\n                onLoad: (unitID, value) => {\n                    Object.keys(value).forEach((subunitId) => {\n                        const ruleList = value[subunitId];\n                        ruleList.forEach((rule) => {\n                            this._dataValidationModel.addRule(unitID, subunitId, rule, 'patched');\n                        });\n                    });\n                },\n            })\n        );\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { BaseDataValidator } from '../validators/base-data-validator';\nimport { toDisposable } from '@univerjs/core';\nimport { BehaviorSubject } from 'rxjs';\n\nexport enum DataValidatorRegistryScope {\n    SHEET = 'sheet',\n}\n\n/**\n * Register data validator\n */\nexport class DataValidatorRegistryService {\n    private _validatorByScopes = new Map<string, Array<BaseDataValidator>>();\n\n    private _validatorMap = new Map<string, BaseDataValidator>();\n\n    private _validatorsChange$ = new BehaviorSubject<void>(undefined);\n    validatorsChange$ = this._validatorsChange$.asObservable();\n\n    private _addValidatorToScope(validator: BaseDataValidator, scope: string) {\n        if (!this._validatorByScopes.has(scope)) {\n            this._validatorByScopes.set(scope, []);\n        }\n\n        const validators = this._validatorByScopes.get(scope)!;\n        if (validators.findIndex((m) => m.id === validator.id) > -1) {\n            throw new Error(`Validator item with the same id ${validator.id} has already been added!`);\n        }\n        validators.push(validator);\n    }\n\n    private _removeValidatorFromScope(validator: BaseDataValidator, scope: string) {\n        const validators = this._validatorByScopes.get(scope);\n        if (!validators) {\n            return;\n        }\n\n        const index = validators.findIndex((v) => v.id === validator.id);\n        if (index > -1) {\n            validators.splice(index, 1);\n        }\n    }\n\n    register(validator: BaseDataValidator) {\n        this._validatorMap.set(validator.id, validator);\n\n        if (Array.isArray(validator.scopes)) {\n            validator.scopes.forEach((scope) => {\n                this._addValidatorToScope(validator, scope);\n            });\n        } else {\n            this._addValidatorToScope(validator, validator.scopes);\n        }\n\n        this._validatorsChange$.next();\n\n        return toDisposable(() => {\n            this._validatorMap.delete(validator.id);\n\n            if (Array.isArray(validator.scopes)) {\n                validator.scopes.forEach((scope) => {\n                    this._removeValidatorFromScope(validator, scope);\n                });\n            } else {\n                this._removeValidatorFromScope(validator, validator.scopes);\n            }\n\n            this._validatorsChange$.next();\n        });\n    }\n\n    getValidatorItem(id: string) {\n        return this._validatorMap.get(id);\n    }\n\n    getValidatorsByScope(scope: string) {\n        return this._validatorByScopes.get(scope);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommand, IDataValidationRule } from '@univerjs/core';\nimport type { DataValidationChangeSource } from '../../models/data-validation-model';\nimport type { IUpdateRulePayload } from '../../types/interfaces/i-update-rule-payload';\nimport { CommandType } from '@univerjs/core';\nimport { DataValidationModel } from '../../models/data-validation-model';\n\nexport interface IAddDataValidationMutationParams {\n    rule: IDataValidationRule | IDataValidationRule[];\n    index?: number;\n    source?: DataValidationChangeSource;\n    unitId: string;\n    subUnitId: string;\n}\n\nexport const AddDataValidationMutation: ICommand<IAddDataValidationMutationParams> = {\n    type: CommandType.MUTATION,\n    id: 'data-validation.mutation.addRule',\n    handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n        const { unitId, subUnitId, rule, index, source = 'command' } = params;\n        const dataValidationModel = accessor.get(DataValidationModel);\n        dataValidationModel.addRule(unitId, subUnitId, rule, source, index);\n\n        return true;\n    },\n};\n\nexport interface IRemoveDataValidationMutationParams {\n    ruleId: string | string[];\n    source?: DataValidationChangeSource;\n    unitId: string;\n    subUnitId: string;\n}\n\nexport const RemoveDataValidationMutation: ICommand<IRemoveDataValidationMutationParams> = {\n    type: CommandType.MUTATION,\n    id: 'data-validation.mutation.removeRule',\n    handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n\n        const { unitId, subUnitId, ruleId, source = 'command' } = params;\n        const dataValidationModel = accessor.get(DataValidationModel);\n        if (Array.isArray(ruleId)) {\n            ruleId.forEach((item) => {\n                dataValidationModel.removeRule(unitId, subUnitId, item, source);\n            });\n        } else {\n            dataValidationModel.removeRule(unitId, subUnitId, ruleId, source);\n        }\n\n        return true;\n    },\n};\n\nexport interface IUpdateDataValidationMutationParams {\n    payload: IUpdateRulePayload;\n    ruleId: string;\n    source?: DataValidationChangeSource;\n    unitId: string;\n    subUnitId: string;\n}\n\nexport const UpdateDataValidationMutation: ICommand<IUpdateDataValidationMutationParams> = {\n    type: CommandType.MUTATION,\n    id: 'data-validation.mutation.updateRule',\n    handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n\n        const { unitId, subUnitId, ruleId, payload, source = 'command' } = params;\n        const dataValidationModel = accessor.get(DataValidationModel);\n        dataValidationModel.updateRule(unitId, subUnitId, ruleId, payload, source);\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommandType, ICommandService, ILogService, IUndoRedoService } from '@univerjs/core';\nimport type { ICommand, IDataValidationRule, IDataValidationRuleBase, IDataValidationRuleOptions, IMutationInfo, Injector, IRange, ISheetDataValidationRule } from '@univerjs/core';\nimport { getRuleOptions, getRuleSetting } from '../../common/util';\nimport { DataValidationModel } from '../../models/data-validation-model';\nimport { DataValidatorRegistryService } from '../../services/data-validator-registry.service';\nimport { UpdateRuleType } from '../../types/enum/update-rule-type';\nimport { AddDataValidationMutation, RemoveDataValidationMutation, UpdateDataValidationMutation } from '../mutations/data-validation.mutation';\nimport type { IAddDataValidationMutationParams, IRemoveDataValidationMutationParams, IUpdateDataValidationMutationParams } from '../mutations/data-validation.mutation';\n\ninterface ISheetCommandSharedParams {\n    unitId: string;\n    subUnitId: string;\n}\n\nexport interface IAddDataValidationCommandParams extends ISheetCommandSharedParams {\n    rule: Omit<IDataValidationRule, 'ranges'> & {\n        range: IRange;\n    };\n    index?: number;\n}\n\n/**\n * @deprecated `AddDataValidationCommand` is deprecated, please use `AddSheetDataValidationCommand` in `@univerjs/sheets-data-validation` instead!\n */\nexport const AddDataValidationCommand: ICommand<IAddDataValidationCommandParams> = {\n    type: CommandType.COMMAND,\n    id: 'data-validation.command.addRule',\n    async handler(accessor, params) {\n        const logService = accessor.get(ILogService);\n        logService.error('[Deprecated]: `AddDataValidationCommand` is deprecated, please use `AddSheetDataValidationCommand` in `@univerjs/sheets-data-validation` instead!');\n        if (!params) {\n            return false;\n        }\n        const { rule, unitId, subUnitId } = params;\n        const commandService = accessor.get(ICommandService);\n        const undoRedoService = accessor.get(IUndoRedoService);\n        const mutationParams: IAddDataValidationMutationParams = {\n            ...params,\n            rule: {\n                ...params.rule,\n                ranges: [params.rule.range],\n            },\n        };\n        const redoMutations: IMutationInfo[] = [{\n            id: AddDataValidationMutation.id,\n            params: mutationParams,\n        }];\n\n        const undoMutations: IMutationInfo[] = [{\n            id: RemoveDataValidationMutation.id,\n            params: {\n                unitId,\n                subUnitId,\n                ruleId: rule.uid,\n            },\n        }];\n        undoRedoService.pushUndoRedo({\n            unitID: unitId,\n            redoMutations,\n            undoMutations,\n        });\n\n        await commandService.executeCommand(AddDataValidationMutation.id, mutationParams);\n        return true;\n    },\n};\n\nexport interface IRemoveDataValidationCommandParams extends ISheetCommandSharedParams {\n    ruleId: string;\n}\n\nexport const removeDataValidationUndoFactory = (accessor: Injector, redoParams: IRemoveDataValidationMutationParams) => {\n    const dataValidationModel = accessor.get(DataValidationModel);\n    const { unitId, subUnitId, ruleId, source } = redoParams;\n    if (Array.isArray(ruleId)) {\n        const rules = ruleId.map((id) => dataValidationModel.getRuleById(unitId, subUnitId, id)).filter(Boolean) as ISheetDataValidationRule[];\n        return [{\n            id: AddDataValidationMutation.id,\n            params: {\n                unitId,\n                subUnitId,\n                rule: rules,\n                source,\n            } as IAddDataValidationMutationParams,\n        }];\n    }\n\n    const undoMutations: IMutationInfo[] = [{\n        id: AddDataValidationMutation.id,\n        params: {\n            unitId,\n            subUnitId,\n            rule: {\n                ...dataValidationModel.getRuleById(unitId, subUnitId, ruleId),\n            },\n            index: dataValidationModel.getRuleIndex(unitId, subUnitId, ruleId),\n        } as IAddDataValidationMutationParams,\n    }];\n\n    return undoMutations;\n};\n\n/**\n * @deprecated `RemoveDataValidationCommand` is deprecated, please use `RemoveSheetDataValidationCommand` in `@univerjs/sheets-data-validation` instead!\n */\nexport const RemoveDataValidationCommand: ICommand<IRemoveDataValidationCommandParams> = {\n    type: CommandType.COMMAND,\n    id: 'data-validation.command.removeRule',\n    handler(accessor, params) {\n        const logService = accessor.get(ILogService);\n        logService.error('[Deprecated]: `RemoveDataValidationCommand` is deprecated, please use `RemoveSheetDataValidationCommand` in `@univerjs/sheets-data-validation` instead!');\n\n        if (!params) {\n            return false;\n        }\n        const { unitId, subUnitId, ruleId } = params;\n        const commandService = accessor.get(ICommandService);\n        const undoRedoService = accessor.get(IUndoRedoService);\n        const dataValidationModel = accessor.get(DataValidationModel);\n\n        const redoMutations: IMutationInfo[] = [{\n            id: RemoveDataValidationMutation.id,\n            params,\n        }];\n        const undoMutations: IMutationInfo[] = [{\n            id: AddDataValidationMutation.id,\n            params: {\n                unitId,\n                subUnitId,\n                rule: {\n                    ...dataValidationModel.getRuleById(unitId, subUnitId, ruleId),\n                },\n                index: dataValidationModel.getRuleIndex(unitId, subUnitId, ruleId),\n            } as IAddDataValidationMutationParams,\n        }];\n\n        undoRedoService.pushUndoRedo({\n            undoMutations,\n            redoMutations,\n            unitID: params.unitId,\n        });\n\n        commandService.executeCommand(RemoveDataValidationMutation.id, params);\n        return true;\n    },\n};\n\nexport interface IUpdateDataValidationOptionsCommandParams extends ISheetCommandSharedParams {\n    ruleId: string;\n    options: IDataValidationRuleOptions;\n}\n\n/**\n * @deprecated `UpdateDataValidationOptionsCommand` is deprecated, please use `UpdateSheetDataValidationOptionsCommand` in `@univerjs/sheets-data-validation` instead!\n */\nexport const UpdateDataValidationOptionsCommand: ICommand<IUpdateDataValidationOptionsCommandParams> = {\n    type: CommandType.COMMAND,\n    id: 'data-validation.command.updateDataValidationSetting',\n    handler(accessor, params) {\n        const logService = accessor.get(ILogService);\n        logService.warn('[Deprecated]: `UpdateDataValidationOptionsCommand` is deprecated, please use `UpdateSheetDataValidationOptionsCommand` in `@univerjs/sheets-data-validation` instead!');\n        if (!params) {\n            return false;\n        }\n        const commandService = accessor.get(ICommandService);\n        const redoUndoService = accessor.get(IUndoRedoService);\n        const dataValidationModel = accessor.get(DataValidationModel);\n\n        const { unitId, subUnitId, ruleId, options } = params;\n\n        const rule = dataValidationModel.getRuleById(unitId, subUnitId, ruleId);\n        if (!rule) {\n            return false;\n        }\n\n        const mutationParams: IUpdateDataValidationMutationParams = {\n            unitId,\n            subUnitId,\n            ruleId,\n            payload: {\n                type: UpdateRuleType.OPTIONS,\n                payload: options,\n            },\n        };\n\n        const redoMutations: IMutationInfo[] = [{\n            id: UpdateDataValidationMutation.id,\n            params: mutationParams,\n        }];\n        const undoMutationParams: IUpdateDataValidationMutationParams = {\n            unitId,\n            subUnitId,\n            ruleId,\n            payload: {\n                type: UpdateRuleType.OPTIONS,\n                payload: getRuleOptions(rule),\n            },\n        };\n        const undoMutations: IMutationInfo[] = [{\n            id: UpdateDataValidationMutation.id,\n            params: undoMutationParams,\n        }];\n\n        redoUndoService.pushUndoRedo({\n            unitID: unitId,\n            redoMutations,\n            undoMutations,\n        });\n\n        commandService.executeCommand(UpdateDataValidationMutation.id, mutationParams);\n        return true;\n    },\n};\n\nexport interface IUpdateDataValidationSettingCommandParams extends ISheetCommandSharedParams {\n    ruleId: string;\n    setting: IDataValidationRuleBase;\n}\n\n/**\n * @deprecated `UpdateDataValidationSettingCommand` is deprecated, please use `UpdateSheetDataValidationSettingCommand` in `@univerjs/sheets-data-validation` instead!\n */\nexport const UpdateDataValidationSettingCommand: ICommand<IUpdateDataValidationSettingCommandParams> = {\n    type: CommandType.COMMAND,\n    id: 'data-validation.command.updateDataValidationOptions',\n    handler(accessor, params) {\n        const logService = accessor.get(ILogService);\n        logService.error('[Deprecated]: `UpdateDataValidationSettingCommand` is deprecated, please use `UpdateSheetDataValidationSettingCommand` in `@univerjs/sheets-data-validation` instead!');\n\n        if (!params) {\n            return false;\n        }\n        const commandService = accessor.get(ICommandService);\n        const redoUndoService = accessor.get(IUndoRedoService);\n        const dataValidationModel = accessor.get(DataValidationModel);\n        const dataValidatorRegistryService = accessor.get(DataValidatorRegistryService);\n\n        const { unitId, subUnitId, ruleId, setting } = params;\n        const validator = dataValidatorRegistryService.getValidatorItem(setting.type);\n\n        if (!validator) {\n            return false;\n        }\n        const rule = dataValidationModel.getRuleById(unitId, subUnitId, ruleId);\n        if (!rule) {\n            return false;\n        }\n\n        const newRule = { ...rule, ...setting };\n        if (!validator.validatorFormula(newRule, unitId, subUnitId).success) {\n            return false;\n        }\n\n        const mutationParams: IUpdateDataValidationMutationParams = {\n            unitId,\n            subUnitId,\n            ruleId,\n            payload: {\n                type: UpdateRuleType.SETTING,\n                payload: {\n                    ...setting,\n                    ...validator.normalizeFormula(newRule, unitId, subUnitId),\n                },\n            },\n        };\n\n        const redoMutations: IMutationInfo[] = [{\n            id: UpdateDataValidationMutation.id,\n            params: mutationParams,\n        }];\n        const undoMutationParams: IUpdateDataValidationMutationParams = {\n            unitId,\n            subUnitId,\n            ruleId,\n            payload: {\n                type: UpdateRuleType.SETTING,\n                payload: getRuleSetting(rule),\n            },\n        };\n        const undoMutations: IMutationInfo[] = [{\n            id: UpdateDataValidationMutation.id,\n            params: undoMutationParams,\n        }];\n\n        redoUndoService.pushUndoRedo({\n            unitID: unitId,\n            redoMutations,\n            undoMutations,\n        });\n\n        commandService.executeCommand(UpdateDataValidationMutation.id, mutationParams);\n        return true;\n    },\n};\n\nexport interface IRemoveAllDataValidationCommandParams extends ISheetCommandSharedParams {\n}\n\n/**\n * @deprecated `RemoveAllDataValidationCommand` is deprecated, please use `RemoveSheetAllDataValidationCommand` in `@univerjs/sheets-data-validation` instead!\n */\nexport const RemoveAllDataValidationCommand: ICommand<IRemoveAllDataValidationCommandParams> = {\n    type: CommandType.COMMAND,\n    id: 'data-validation.command.removeAll',\n    handler(accessor, params) {\n        const logService = accessor.get(ILogService);\n        logService.error('[Deprecated]: `RemoveAllDataValidationCommand` is deprecated, please use `RemoveSheetAllDataValidationCommand` in `@univerjs/sheets-data-validation` instead!');\n\n        if (!params) {\n            return false;\n        }\n        const { unitId, subUnitId } = params;\n        const commandService = accessor.get(ICommandService);\n        const dataValidationModel = accessor.get(DataValidationModel);\n        const undoRedoService = accessor.get(IUndoRedoService);\n        const currentRules = [...dataValidationModel.getRules(unitId, subUnitId)];\n\n        const redoParams: IRemoveDataValidationMutationParams = {\n            unitId,\n            subUnitId,\n            ruleId: currentRules.map((rule) => rule.uid),\n        };\n        const redoMutations: IMutationInfo[] = [{\n            id: RemoveDataValidationMutation.id,\n            params: redoParams,\n        }];\n\n        const undoMutations: IMutationInfo[] = [{\n            id: AddDataValidationMutation.id,\n            params: {\n                unitId,\n                subUnitId,\n                rule: currentRules,\n            },\n        }];\n\n        undoRedoService.pushUndoRedo({\n            redoMutations,\n            undoMutations,\n            unitID: unitId,\n        });\n\n        commandService.executeCommand(RemoveDataValidationMutation.id, redoParams);\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DATA_VALIDATION_PLUGIN_CONFIG_KEY = 'data-validation.config';\n\nexport const configSymbol = Symbol(DATA_VALIDATION_PLUGIN_CONFIG_KEY);\n\nexport interface IUniverDataValidationConfig {\n}\n\nexport const defaultPluginConfig: IUniverDataValidationConfig = {};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport type { IUniverDataValidationConfig } from './controllers/config.schema';\nimport { ICommandService, IConfigService, Inject, Injector, merge, Plugin, UniverInstanceType } from '@univerjs/core';\nimport { AddDataValidationCommand, RemoveAllDataValidationCommand, RemoveDataValidationCommand, UpdateDataValidationOptionsCommand, UpdateDataValidationSettingCommand } from './commands/commands/data-validation.command';\nimport { AddDataValidationMutation, RemoveDataValidationMutation, UpdateDataValidationMutation } from './commands/mutations/data-validation.mutation';\nimport { DATA_VALIDATION_PLUGIN_CONFIG_KEY, defaultPluginConfig } from './controllers/config.schema';\nimport { DataValidationResourceController } from './controllers/dv-resource.controller';\nimport { DataValidationModel } from './models/data-validation-model';\nimport { DataValidatorRegistryService } from './services/data-validator-registry.service';\n\nconst PLUGIN_NAME = 'UNIVER_DATA_VALIDATION_PLUGIN';\n\nexport class UniverDataValidationPlugin extends Plugin {\n    static override pluginName = PLUGIN_NAME;\n    static override type = UniverInstanceType.UNIVER_SHEET;\n\n    constructor(\n        private readonly _config: Partial<IUniverDataValidationConfig> = defaultPluginConfig,\n        @Inject(Injector) protected _injector: Injector,\n        @ICommandService private _commandService: ICommandService,\n        @IConfigService private readonly _configService: IConfigService\n    ) {\n        super();\n\n        // Manage the plugin configuration.\n        const { ...rest } = merge(\n            {},\n            defaultPluginConfig,\n            this._config\n        );\n        this._configService.setConfig(DATA_VALIDATION_PLUGIN_CONFIG_KEY, rest);\n    }\n\n    override onStarting(): void {\n        ([\n            [DataValidationModel],\n            [DataValidatorRegistryService],\n            [DataValidationResourceController],\n        ] as Dependency[]).forEach((d) => this._injector.add(d));\n\n        [\n            // command\n            AddDataValidationCommand,\n            RemoveAllDataValidationCommand,\n            UpdateDataValidationOptionsCommand,\n            UpdateDataValidationSettingCommand,\n            RemoveDataValidationCommand,\n\n            // mutation\n            AddDataValidationMutation,\n            UpdateDataValidationMutation,\n            RemoveDataValidationMutation,\n        ].forEach((command) => {\n            this._commandService.registerCommand(command);\n        });\n    }\n\n    override onReady(): void {\n        this._injector.get(DataValidationResourceController);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataValidationOperator } from '@univerjs/core';\n\nexport const OperatorTextMap: Record<DataValidationOperator, string> = {\n    [DataValidationOperator.BETWEEN]: 'dataValidation.operators.between',\n    [DataValidationOperator.EQUAL]: 'dataValidation.operators.equal',\n    [DataValidationOperator.GREATER_THAN]: 'dataValidation.operators.greaterThan',\n    [DataValidationOperator.GREATER_THAN_OR_EQUAL]: 'dataValidation.operators.greaterThanOrEqual',\n    [DataValidationOperator.LESS_THAN]: 'dataValidation.operators.lessThan',\n    [DataValidationOperator.LESS_THAN_OR_EQUAL]: 'dataValidation.operators.lessThanOrEqual',\n    [DataValidationOperator.NOT_BETWEEN]: 'dataValidation.operators.notBetween',\n    [DataValidationOperator.NOT_EQUAL]: 'dataValidation.operators.notEqual',\n};\n\nexport const OperatorTitleMap: Record<DataValidationOperator, string> = {\n    [DataValidationOperator.BETWEEN]: 'dataValidation.ruleName.between',\n    [DataValidationOperator.EQUAL]: 'dataValidation.ruleName.equal',\n    [DataValidationOperator.GREATER_THAN]: 'dataValidation.ruleName.greaterThan',\n    [DataValidationOperator.GREATER_THAN_OR_EQUAL]: 'dataValidation.ruleName.greaterThanOrEqual',\n    [DataValidationOperator.LESS_THAN]: 'dataValidation.ruleName.lessThan',\n    [DataValidationOperator.LESS_THAN_OR_EQUAL]: 'dataValidation.ruleName.lessThanOrEqual',\n    [DataValidationOperator.NOT_BETWEEN]: 'dataValidation.ruleName.notBetween',\n    [DataValidationOperator.NOT_EQUAL]: 'dataValidation.ruleName.notEqual',\n};\n\nexport const OperatorErrorTitleMap: Record<DataValidationOperator, string> = {\n    [DataValidationOperator.BETWEEN]: 'dataValidation.errorMsg.between',\n    [DataValidationOperator.EQUAL]: 'dataValidation.errorMsg.equal',\n    [DataValidationOperator.GREATER_THAN]: 'dataValidation.errorMsg.greaterThan',\n    [DataValidationOperator.GREATER_THAN_OR_EQUAL]: 'dataValidation.errorMsg.greaterThanOrEqual',\n    [DataValidationOperator.LESS_THAN]: 'dataValidation.errorMsg.lessThan',\n    [DataValidationOperator.LESS_THAN_OR_EQUAL]: 'dataValidation.errorMsg.lessThanOrEqual',\n    [DataValidationOperator.NOT_BETWEEN]: 'dataValidation.errorMsg.notBetween',\n    [DataValidationOperator.NOT_EQUAL]: 'dataValidation.errorMsg.notEqual',\n};\n\nexport const TextLengthErrorTitleMap: Record<DataValidationOperator, string> = {\n    [DataValidationOperator.BETWEEN]: 'dataValidation.textLength.errorMsg.between',\n    [DataValidationOperator.EQUAL]: 'dataValidation.textLength.errorMsg.equal',\n    [DataValidationOperator.GREATER_THAN]: 'dataValidation.textLength.errorMsg.greaterThan',\n    [DataValidationOperator.GREATER_THAN_OR_EQUAL]: 'dataValidation.textLength.errorMsg.greaterThanOrEqual',\n    [DataValidationOperator.LESS_THAN]: 'dataValidation.textLength.errorMsg.lessThan',\n    [DataValidationOperator.LESS_THAN_OR_EQUAL]: 'dataValidation.textLength.errorMsg.lessThanOrEqual',\n    [DataValidationOperator.NOT_BETWEEN]: 'dataValidation.textLength.errorMsg.notBetween',\n    [DataValidationOperator.NOT_EQUAL]: 'dataValidation.textLength.errorMsg.notEqual',\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataValidationOperator } from '@univerjs/core';\n\nexport const TWO_FORMULA_OPERATOR_COUNT: DataValidationOperator[] = [\n    DataValidationOperator.BETWEEN,\n    DataValidationOperator.NOT_BETWEEN,\n];\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CellValue, IDataValidationRule, IDataValidationRuleBase, IStyleData, Nullable, Workbook, Worksheet } from '@univerjs/core';\nimport type { CellValueType } from '@univerjs/protocol';\nimport type { ISheetLocationBase } from '@univerjs/sheets';\nimport type { IBaseDataValidationWidget } from './base-widget';\nimport { DataValidationOperator, Inject, Injector, LocaleService, Tools } from '@univerjs/core';\nimport { OperatorErrorTitleMap, OperatorTitleMap } from '../types/const/operator-text-map';\n\nconst FORMULA1 = '{FORMULA1}';\nconst FORMULA2 = '{FORMULA2}';\n\nconst operatorNameMap: Record<DataValidationOperator, string> = {\n    [DataValidationOperator.BETWEEN]: 'dataValidation.operators.between',\n    [DataValidationOperator.EQUAL]: 'dataValidation.operators.equal',\n    [DataValidationOperator.GREATER_THAN]: 'dataValidation.operators.greaterThan',\n    [DataValidationOperator.GREATER_THAN_OR_EQUAL]: 'dataValidation.operators.greaterThanOrEqual',\n    [DataValidationOperator.LESS_THAN]: 'dataValidation.operators.lessThan',\n    [DataValidationOperator.LESS_THAN_OR_EQUAL]: 'dataValidation.operators.lessThanOrEqual',\n    [DataValidationOperator.NOT_BETWEEN]: 'dataValidation.operators.notBetween',\n    [DataValidationOperator.NOT_EQUAL]: 'dataValidation.operators.notEqual',\n};\n\nexport interface IValidatorCellInfo<DataType = Nullable<CellValue>> {\n    value: DataType;\n    interceptValue: Nullable<CellValue>;\n    row: number;\n    column: number;\n    unitId: string;\n    subUnitId: string;\n    worksheet: Worksheet;\n    workbook: Workbook;\n    t: Nullable<CellValueType>;\n}\n\nexport interface IFormulaResult<T = any> {\n    formula1: T;\n    formula2: T;\n    isFormulaValid: boolean;\n}\n\nexport interface IFormulaValidResult {\n    success: boolean;\n    formula1?: string;\n    formula2?: string;\n}\n\nexport abstract class BaseDataValidator {\n    abstract id: string;\n    abstract title: string;\n    abstract operators: DataValidationOperator[];\n    abstract scopes: string[] | string;\n\n    offsetFormulaByRange = true;\n\n    // #region UI related\n\n    formulaInput: string | undefined = undefined;\n    canvasRender: Nullable<IBaseDataValidationWidget> = null;\n    dropdown: string | undefined = undefined;\n    optionsInput: string | undefined = undefined;\n\n    // #endregion\n\n    constructor(\n        @Inject(LocaleService) readonly localeService: LocaleService,\n        @Inject(Injector) readonly injector: Injector\n    ) {\n        // empty\n    }\n\n    get operatorNames() {\n        return this.operators.map((operator) => this.localeService.t(operatorNameMap[operator]));\n    }\n\n    get titleStr() {\n        return this.localeService.t(this.title);\n    }\n\n    skipDefaultFontRender: ((rule: IDataValidationRule, cellValue: Nullable<CellValue>, pos: any) => boolean) | undefined;\n\n    generateRuleName(rule: IDataValidationRuleBase): string {\n        if (!rule.operator) {\n            return this.titleStr;\n        }\n\n        const ruleName = this.localeService.t(OperatorTitleMap[rule.operator]).replace(FORMULA1, rule.formula1 ?? '').replace(FORMULA2, rule.formula2 ?? '');\n        return `${this.titleStr} ${ruleName}`;\n    }\n\n    generateRuleErrorMessage(rule: IDataValidationRuleBase, position: ISheetLocationBase) {\n        if (!rule.operator) {\n            return this.titleStr;\n        }\n\n        const errorMsg = this.localeService.t(OperatorErrorTitleMap[rule.operator]).replace(FORMULA1, rule.formula1 ?? '').replace(FORMULA2, rule.formula2 ?? '');\n        return `${errorMsg}`;\n    }\n\n    getExtraStyle(rule: IDataValidationRuleBase, value: Nullable<CellValue>, ctx: { style: IStyleData }, row: number, column: number): Nullable<IStyleData> {}\n\n    getRuleFinalError(rule: IDataValidationRule, position: ISheetLocationBase) {\n        if (rule.showErrorMessage && rule.error) {\n            return rule.error;\n        }\n\n        return this.generateRuleErrorMessage(rule, position);\n    }\n\n    isEmptyCellValue(cellValue: Nullable<CellValue>): cellValue is null | undefined | void {\n        if (cellValue === '' || cellValue === undefined || cellValue === null) {\n            return true;\n        }\n\n        return false;\n    }\n\n    abstract parseFormula(rule: IDataValidationRule, unitId: string, subUnitId: string, row: number, column: number): Promise<IFormulaResult<number | undefined>>;\n\n    abstract validatorFormula(rule: IDataValidationRule, unitId: string, subUnitId: string): IFormulaValidResult;\n\n    normalizeFormula(rule: IDataValidationRule, unitId: string, subUnitId: string) {\n        return {\n            formula1: rule.formula1,\n            formula2: rule.formula2,\n        };\n    }\n\n    async isValidType(cellInfo: IValidatorCellInfo, formula: IFormulaResult, rule: IDataValidationRule): Promise<boolean> {\n        return true;\n    };\n\n    transform(cellInfo: IValidatorCellInfo, formula: IFormulaResult, rule: IDataValidationRule): IValidatorCellInfo<number> {\n        return cellInfo as IValidatorCellInfo<number>;\n    };\n\n    async validatorIsEqual(cellInfo: IValidatorCellInfo<CellValue>, formula: IFormulaResult, rule: IDataValidationRule) {\n        const { formula1 } = formula;\n        const { value: cellValue } = cellInfo;\n        if (Number.isNaN(formula1)) {\n            return true;\n        }\n\n        return cellValue === formula1;\n    }\n\n    async validatorIsNotEqual(cellInfo: IValidatorCellInfo<number>, formula: IFormulaResult, _rule: IDataValidationRule) {\n        const { formula1 } = formula;\n        if (Number.isNaN(formula1)) {\n            return true;\n        }\n\n        return cellInfo.value !== formula1;\n    }\n\n    async validatorIsBetween(cellInfo: IValidatorCellInfo<number>, formula: IFormulaResult, _rule: IDataValidationRule) {\n        const { formula1, formula2 } = formula;\n        if (Number.isNaN(formula1) || Number.isNaN(formula2)) {\n            return true;\n        }\n\n        const start = Math.min(formula1, formula2);\n        const end = Math.max(formula1, formula2);\n        return cellInfo.value >= start && cellInfo.value <= end;\n    }\n\n    async validatorIsNotBetween(cellInfo: IValidatorCellInfo<number>, formula: IFormulaResult, _rule: IDataValidationRule) {\n        const { formula1, formula2 } = formula;\n        if (Number.isNaN(formula1) || Number.isNaN(formula2)) {\n            return true;\n        }\n        const start = Math.min(formula1, formula2);\n        const end = Math.max(formula1, formula2);\n        return cellInfo.value < start || cellInfo.value > end;\n    }\n\n    async validatorIsGreaterThan(cellInfo: IValidatorCellInfo<number>, formula: IFormulaResult, _rule: IDataValidationRule) {\n        const { formula1 } = formula;\n        if (Number.isNaN(formula1)) {\n            return true;\n        }\n        return cellInfo.value > formula1;\n    }\n\n    async validatorIsGreaterThanOrEqual(cellInfo: IValidatorCellInfo<number>, formula: IFormulaResult, _rule: IDataValidationRule) {\n        const { formula1 } = formula;\n        if (Number.isNaN(formula1)) {\n            return true;\n        }\n        return cellInfo.value >= formula1;\n    }\n\n    async validatorIsLessThan(cellInfo: IValidatorCellInfo<number>, formula: IFormulaResult, _rule: IDataValidationRule) {\n        const { formula1 } = formula;\n        if (Number.isNaN(formula1)) {\n            return true;\n        }\n        return cellInfo.value < formula1;\n    }\n\n    async validatorIsLessThanOrEqual(cellInfo: IValidatorCellInfo<number>, formula: IFormulaResult, _rule: IDataValidationRule) {\n        const { formula1 } = formula;\n        if (Number.isNaN(formula1)) {\n            return true;\n        }\n\n        return cellInfo.value <= formula1;\n    }\n\n    async validator(cellInfo: IValidatorCellInfo, rule: IDataValidationRule): Promise<boolean> {\n        const { value: cellValue, unitId, subUnitId } = cellInfo;\n        const isEmpty = this.isEmptyCellValue(cellValue);\n        const { allowBlank = true, operator } = rule;\n        if (isEmpty) {\n            return allowBlank;\n        }\n\n        const formulaInfo = await this.parseFormula(rule, unitId, subUnitId, cellInfo.row, cellInfo.column);\n\n        if (!formulaInfo.isFormulaValid) {\n            return false;\n        }\n\n        if (!(await this.isValidType(cellInfo, formulaInfo, rule))) {\n            return false;\n        }\n\n        if (!Tools.isDefine(operator)) {\n            return true;\n        }\n\n        const transformedCell = this.transform(cellInfo, formulaInfo, rule);\n\n        switch (operator) {\n            case DataValidationOperator.BETWEEN:\n                return this.validatorIsBetween(transformedCell, formulaInfo, rule);\n            case DataValidationOperator.EQUAL:\n                return this.validatorIsEqual(transformedCell, formulaInfo, rule);\n            case DataValidationOperator.GREATER_THAN:\n                return this.validatorIsGreaterThan(transformedCell, formulaInfo, rule);\n            case DataValidationOperator.GREATER_THAN_OR_EQUAL:\n                return this.validatorIsGreaterThanOrEqual(transformedCell, formulaInfo, rule);\n            case DataValidationOperator.LESS_THAN:\n                return this.validatorIsLessThan(transformedCell, formulaInfo, rule);\n            case DataValidationOperator.LESS_THAN_OR_EQUAL:\n                return this.validatorIsLessThanOrEqual(transformedCell, formulaInfo, rule);\n            case DataValidationOperator.NOT_BETWEEN:\n                return this.validatorIsNotBetween(transformedCell, formulaInfo, rule);\n            case DataValidationOperator.NOT_EQUAL:\n                return this.validatorIsNotEqual(transformedCell, formulaInfo, rule);\n            default:\n                throw new Error('Unknown operator.');\n        }\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DataValidationStatus, IRange, ISheetDataValidationRule, Nullable } from '@univerjs/core';\nimport type { IRemoveSheetMutationParams, ISetRangeValuesMutationParams } from '@univerjs/sheets';\nimport { Disposable, ICommandService, Inject, IUniverInstanceService, ObjectMatrix, Range, UniverInstanceType } from '@univerjs/core';\nimport { RemoveSheetMutation, SetRangeValuesMutation } from '@univerjs/sheets';\nimport { Subject } from 'rxjs';\n\nexport class DataValidationCacheService extends Disposable {\n    private _cacheMatrix: Map<string, Map<string, ObjectMatrix<Nullable<DataValidationStatus>>>> = new Map();\n    private _dirtyRanges$ = new Subject<{ unitId: string; subUnitId: string; ranges: IRange[]; isSetRange?: boolean }>();\n\n    readonly dirtyRanges$ = this._dirtyRanges$.asObservable();\n\n    constructor(\n        @Inject(ICommandService) private readonly _commandService: ICommandService,\n        @Inject(IUniverInstanceService) private readonly _univerInstanceService: IUniverInstanceService\n    ) {\n        super();\n        this._initDirtyRanges();\n        this._initSheetRemove();\n    }\n\n    private _initDirtyRanges() {\n        this.disposeWithMe(this._commandService.onCommandExecuted((commandInfo) => {\n            if (commandInfo.id === SetRangeValuesMutation.id) {\n                const { cellValue, unitId, subUnitId } = commandInfo.params as ISetRangeValuesMutationParams;\n                if (cellValue) {\n                    const range = new ObjectMatrix(cellValue).getDataRange();\n                    if (range.endRow === -1) return;\n                    this.markRangeDirty(unitId, subUnitId, [range], true);\n                }\n            }\n        }));\n    }\n\n    private _initSheetRemove() {\n        this.disposeWithMe(this._commandService.onCommandExecuted((commandInfo) => {\n            if (commandInfo.id === RemoveSheetMutation.id) {\n                const { unitId, subUnitId } = commandInfo.params as IRemoveSheetMutationParams;\n                this._cacheMatrix.get(unitId)?.delete(subUnitId);\n            }\n        }));\n\n        this.disposeWithMe(this._univerInstanceService.unitDisposed$.subscribe((univerInstance) => {\n            if (univerInstance.type === UniverInstanceType.UNIVER_SHEET) {\n                this._cacheMatrix.delete(univerInstance.getUnitId());\n            }\n        }));\n    }\n\n    private _ensureCache(unitId: string, subUnitId: string) {\n        let unitMap = this._cacheMatrix.get(unitId);\n\n        if (!unitMap) {\n            unitMap = new Map();\n            this._cacheMatrix.set(unitId, unitMap);\n        }\n\n        let cacheMatrix = unitMap.get(subUnitId);\n\n        if (!cacheMatrix) {\n            cacheMatrix = new ObjectMatrix();\n            unitMap.set(subUnitId, cacheMatrix);\n        }\n\n        return cacheMatrix;\n    }\n\n    ensureCache(unitId: string, subUnitId: string) {\n        return this._ensureCache(unitId, subUnitId);\n    }\n\n    addRule(unitId: string, subUnitId: string, rule: ISheetDataValidationRule) {\n        this.markRangeDirty(unitId, subUnitId, rule.ranges);\n    }\n\n    removeRule(unitId: string, subUnitId: string, rule: ISheetDataValidationRule) {\n        this._deleteRange(unitId, subUnitId, rule.ranges);\n    }\n\n    markRangeDirty(unitId: string, subUnitId: string, ranges: IRange[], isSetRange?: boolean) {\n        const cache = this._ensureCache(unitId, subUnitId);\n        ranges.forEach((range) => {\n            Range.foreach(range, (row, col) => {\n                cache.setValue(row, col, undefined);\n            });\n        });\n\n        this._dirtyRanges$.next({ unitId, subUnitId, ranges, isSetRange });\n    }\n\n    private _deleteRange(unitId: string, subUnitId: string, ranges: IRange[]) {\n        const cache = this._ensureCache(unitId, subUnitId);\n        ranges.forEach((range) => {\n            Range.foreach(range, (row, col) => {\n                cache.realDeleteValue(row, col);\n            });\n        });\n        this._dirtyRanges$.next({ unitId, subUnitId, ranges });\n    }\n\n    getValue(unitId: string, subUnitId: string, row: number, col: number) {\n        const cache = this._ensureCache(unitId, subUnitId);\n        return cache.getValue(row, col);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DataValidationType, ICellData, Nullable } from '@univerjs/core';\nimport type { DataValidatorRegistryService } from '@univerjs/data-validation';\nimport { ERROR_TYPE_SET } from '@univerjs/engine-formula';\n\nexport function getFormulaResult(result: Nullable<Nullable<ICellData>[][]>) {\n    return result?.[0]?.[0]?.v;\n}\n\nexport function getFormulaCellData(result: Nullable<Nullable<ICellData>[][]>) {\n    return result?.[0]?.[0];\n}\n\nexport function isLegalFormulaResult(res: string) {\n    return !(ERROR_TYPE_SET as Set<string>).has(res);\n}\n\n/**\n * Judge if the data-validation's formula need to be offseted by ranges\n */\nexport function shouldOffsetFormulaByRange(type: DataValidationType | string, validatorRegistryService: DataValidatorRegistryService) {\n    const validator = validatorRegistryService.getValidatorItem(type);\n    return validator?.offsetFormulaByRange ?? false;\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IRange, ISheetDataValidationRule } from '@univerjs/core';\nimport { Disposable, Inject, isFormulaString, IUniverInstanceService, Rectangle, UniverInstanceType } from '@univerjs/core';\nimport { DataValidationModel, DataValidatorRegistryService } from '@univerjs/data-validation';\nimport { RegisterOtherFormulaService } from '@univerjs/sheets-formula';\nimport { getFormulaCellData, shouldOffsetFormulaByRange } from '../utils/formula';\nimport { DataValidationCacheService } from './dv-cache.service';\n\ninterface IFormulaData {\n    formula: string;\n    originRow: number;\n    originCol: number;\n    formulaId: string;\n}\n\ntype RuleId = string;\ntype UnitId = string;\ntype SubUnitId = string;\n\nexport class DataValidationCustomFormulaService extends Disposable {\n    /**\n     * Map of origin formula of rule\n     */\n    private _ruleFormulaMap: Map<UnitId, Map<SubUnitId, Map<RuleId, IFormulaData>>> = new Map();\n    private _ruleFormulaMap2: Map<UnitId, Map<SubUnitId, Map<RuleId, IFormulaData>>> = new Map();\n\n    constructor(\n        @IUniverInstanceService private readonly _instanceSrv: IUniverInstanceService,\n        @Inject(RegisterOtherFormulaService) private _registerOtherFormulaService: RegisterOtherFormulaService,\n        @Inject(DataValidationModel) private readonly _dataValidationModel: DataValidationModel,\n        @Inject(DataValidationCacheService) private readonly _dataValidationCacheService: DataValidationCacheService,\n        @Inject(DataValidatorRegistryService) private readonly _validatorRegistryService: DataValidatorRegistryService\n    ) {\n        super();\n\n        this._initFormulaResultHandler();\n        this._initDirtyRanges();\n    }\n\n    private _initFormulaResultHandler() {\n        this.disposeWithMe(this._registerOtherFormulaService.formulaResult$.subscribe((resultMap) => {\n            for (const unitId in resultMap) {\n                const unitMap = resultMap[unitId];\n\n                const type = this._instanceSrv.getUnitType(unitId);\n                if (type !== UniverInstanceType.UNIVER_SHEET) continue;\n\n                for (const subUnitId in unitMap) {\n                    const results = unitMap[subUnitId];\n                    const { ruleFormulaMap } = this._ensureMaps(unitId, subUnitId);\n                    results.forEach((result) => {\n                        const ruleInfo = ruleFormulaMap.get(result.extra?.ruleId);\n                        const rule = this._dataValidationModel.getRuleById(unitId, subUnitId, result.extra?.ruleId);\n\n                        if (rule && ruleInfo) {\n                            this._dataValidationCacheService.markRangeDirty(unitId, subUnitId, rule.ranges);\n                        }\n                    });\n                }\n            }\n        }));\n    }\n\n    private _ensureMaps(unitId: string, subUnitId: string) {\n        let ruleFormulaUnitMap = this._ruleFormulaMap.get(unitId);\n        let ruleFormulaUnitMap2 = this._ruleFormulaMap2.get(unitId);\n        if (!ruleFormulaUnitMap) {\n            ruleFormulaUnitMap = new Map();\n            this._ruleFormulaMap.set(unitId, ruleFormulaUnitMap);\n        }\n        if (!ruleFormulaUnitMap2) {\n            ruleFormulaUnitMap2 = new Map();\n            this._ruleFormulaMap2.set(unitId, ruleFormulaUnitMap2);\n        }\n\n        let ruleFormulaMap = ruleFormulaUnitMap.get(subUnitId);\n\n        if (!ruleFormulaMap) {\n            ruleFormulaMap = new Map();\n            ruleFormulaUnitMap.set(subUnitId, ruleFormulaMap);\n        }\n\n        let ruleFormulaMap2 = ruleFormulaUnitMap2.get(subUnitId);\n        if (!ruleFormulaMap2) {\n            ruleFormulaMap2 = new Map();\n            ruleFormulaUnitMap2.set(subUnitId, ruleFormulaMap2);\n        }\n\n        return { ruleFormulaMap, ruleFormulaMap2 };\n    };\n\n    private _registerFormula(unitId: string, subUnitId: string, ruleId: string, formulaString: string, ranges: IRange[]) {\n        return this._registerOtherFormulaService.registerFormulaWithRange(unitId, subUnitId, formulaString, ranges, { ruleId });\n    };\n\n    private _handleDirtyRanges(unitId: string, subUnitId: string, ranges: IRange[]) {\n        const rules = this._dataValidationModel.getRules(unitId, subUnitId);\n        rules.forEach((rule) => {\n            const ruleRanges = rule.ranges as IRange[];\n            const hasOverLap = Rectangle.doAnyRangesIntersect(ruleRanges, ranges);\n            if (hasOverLap) {\n                this.makeRuleDirty(unitId, subUnitId, rule.uid);\n            }\n        });\n    }\n\n    private _initDirtyRanges() {\n        this._dataValidationCacheService.dirtyRanges$.subscribe((data) => {\n            if (data.isSetRange) {\n                this._handleDirtyRanges(data.unitId, data.subUnitId, data.ranges);\n            }\n        });\n    }\n\n    deleteByRuleId(unitId: string, subUnitId: string, ruleId: string) {\n        const { ruleFormulaMap, ruleFormulaMap2 } = this._ensureMaps(unitId, subUnitId);\n        const rule = this._dataValidationModel.getRuleById(unitId, subUnitId, ruleId) as ISheetDataValidationRule;\n        const formulaInfo = ruleFormulaMap.get(ruleId);\n\n        if (!rule || !formulaInfo) {\n            return;\n        }\n\n        const current = ruleFormulaMap.get(ruleId);\n        if (current) {\n            ruleFormulaMap.delete(ruleId);\n            this._registerOtherFormulaService.deleteFormula(unitId, subUnitId, [current.formulaId]);\n        }\n\n        const current2 = ruleFormulaMap2.get(ruleId);\n        if (current2) {\n            ruleFormulaMap2.delete(ruleId);\n            this._registerOtherFormulaService.deleteFormula(unitId, subUnitId, [current2.formulaId]);\n        }\n    }\n\n    private _addFormulaByRange(unitId: string, subUnitId: string, ruleId: string, formula: string | undefined, formula2: string | undefined, ranges: IRange[]) {\n        const { ruleFormulaMap, ruleFormulaMap2 } = this._ensureMaps(unitId, subUnitId);\n\n        const originRow = ranges[0].startRow;\n        const originCol = ranges[0].startColumn;\n\n        if (formula && isFormulaString(formula)) {\n            const formulaId = this._registerFormula(unitId, subUnitId, ruleId, formula, ranges);\n            ruleFormulaMap.set(ruleId, {\n                formula,\n                originCol,\n                originRow,\n                formulaId,\n            });\n        }\n\n        if (formula2 && isFormulaString(formula2)) {\n            const formulaId2 = this._registerFormula(unitId, subUnitId, ruleId, formula2, ranges);\n            ruleFormulaMap2.set(ruleId, {\n                formula: formula2,\n                originCol,\n                originRow,\n                formulaId: formulaId2,\n            });\n        }\n    }\n\n    addRule(unitId: string, subUnitId: string, rule: ISheetDataValidationRule) {\n        if (shouldOffsetFormulaByRange(rule.type, this._validatorRegistryService)) {\n            const { ranges, formula1, formula2, uid: ruleId } = rule;\n            this._addFormulaByRange(unitId, subUnitId, ruleId, formula1, formula2, ranges);\n        }\n    }\n\n    async getCellFormulaValue(unitId: string, subUnitId: string, ruleId: string, row: number, column: number) {\n        const { ruleFormulaMap } = this._ensureMaps(unitId, subUnitId);\n        const current = ruleFormulaMap.get(ruleId);\n        if (!current) {\n            return Promise.resolve(undefined);\n        }\n\n        const result = await this._registerOtherFormulaService.getFormulaValue(unitId, subUnitId, current.formulaId);\n        const { originRow, originCol } = current;\n        const offsetRow = row - originRow;\n        const offsetCol = column - originCol;\n        return getFormulaCellData(result?.result?.[offsetRow]?.[offsetCol]);\n    }\n\n    async getCellFormula2Value(unitId: string, subUnitId: string, ruleId: string, row: number, column: number) {\n        const { ruleFormulaMap2 } = this._ensureMaps(unitId, subUnitId);\n        const current = ruleFormulaMap2.get(ruleId);\n        if (!current) {\n            return Promise.resolve(undefined);\n        }\n\n        const result = await this._registerOtherFormulaService.getFormulaValue(unitId, subUnitId, current.formulaId);\n        const { originRow, originCol } = current;\n        const offsetRow = row - originRow;\n        const offsetCol = column - originCol;\n        return getFormulaCellData(result?.result?.[offsetRow]?.[offsetCol]);\n    }\n\n    getCellFormulaValueSync(unitId: string, subUnitId: string, ruleId: string, row: number, column: number) {\n        const { ruleFormulaMap } = this._ensureMaps(unitId, subUnitId);\n        const current = ruleFormulaMap.get(ruleId);\n        if (!current) {\n            return undefined;\n        }\n\n        const result = this._registerOtherFormulaService.getFormulaValueSync(unitId, subUnitId, current.formulaId);\n        const { originRow, originCol } = current;\n        const offsetRow = row - originRow;\n        const offsetCol = column - originCol;\n        return getFormulaCellData(result?.result?.[offsetRow]?.[offsetCol]);\n    }\n\n    getCellFormula2ValueSync(unitId: string, subUnitId: string, ruleId: string, row: number, column: number) {\n        const { ruleFormulaMap2 } = this._ensureMaps(unitId, subUnitId);\n        const current = ruleFormulaMap2.get(ruleId);\n        if (!current) {\n            return undefined;\n        }\n\n        const result = this._registerOtherFormulaService.getFormulaValueSync(unitId, subUnitId, current.formulaId);\n        const { originRow, originCol } = current;\n        const offsetRow = row - originRow;\n        const offsetCol = column - originCol;\n        return getFormulaCellData(result?.result?.[offsetRow]?.[offsetCol]);\n    }\n\n    getRuleFormulaInfo(unitId: string, subUnitId: string, ruleId: string) {\n        const { ruleFormulaMap } = this._ensureMaps(unitId, subUnitId);\n\n        return ruleFormulaMap.get(ruleId);\n    }\n\n    makeRuleDirty(unitId: string, subUnitId: string, ruleId: string) {\n        const formula1 = this._ruleFormulaMap.get(unitId)?.get(subUnitId)?.get(ruleId);\n        const formula2 = this._ruleFormulaMap2.get(unitId)?.get(subUnitId)?.get(ruleId);\n        if (formula1) {\n            this._registerOtherFormulaService.markFormulaDirty(unitId, subUnitId, formula1.formulaId);\n        }\n        if (formula2) {\n            this._registerOtherFormulaService.markFormulaDirty(unitId, subUnitId, formula2.formulaId);\n        }\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ISheetDataValidationRule, Nullable } from '@univerjs/core';\nimport type { IFormulaInfo, IOtherFormulaResult } from '@univerjs/sheets-formula';\nimport { DataValidationType, Disposable, Inject, isFormulaString, IUniverInstanceService, UniverInstanceType } from '@univerjs/core';\nimport { DataValidationModel, DataValidatorRegistryService } from '@univerjs/data-validation';\nimport { RegisterOtherFormulaService } from '@univerjs/sheets-formula';\nimport { shouldOffsetFormulaByRange } from '../utils/formula';\nimport { DataValidationCacheService } from './dv-cache.service';\n\ntype RuleId = string;\ntype UnitId = string;\ntype SubUnitId = string;\n\nexport class DataValidationFormulaService extends Disposable {\n    private _formulaRuleMap: Map<UnitId, Map<SubUnitId, Map<RuleId, [IFormulaInfo | undefined, IFormulaInfo | undefined]>>> = new Map();\n\n    constructor(\n        @IUniverInstanceService private readonly _instanceService: IUniverInstanceService,\n        @Inject(RegisterOtherFormulaService) private _registerOtherFormulaService: RegisterOtherFormulaService,\n        @Inject(DataValidationCacheService) private readonly _dataValidationCacheService: DataValidationCacheService,\n        @Inject(DataValidationModel) private readonly _dataValidationModel: DataValidationModel,\n        @Inject(DataValidatorRegistryService) private readonly _validatorRegistryService: DataValidatorRegistryService\n    ) {\n        super();\n        this._initFormulaResultHandler();\n    }\n\n    private _initFormulaResultHandler() {\n        this.disposeWithMe(this._registerOtherFormulaService.formulaResult$.subscribe((resultMap) => {\n            for (const unitId in resultMap) {\n                const unitMap = resultMap[unitId];\n\n                const type = this._instanceService.getUnitType(unitId);\n                if (type !== UniverInstanceType.UNIVER_SHEET) continue;\n\n                for (const subUnitId in unitMap) {\n                    const results = unitMap[subUnitId];\n                    const formulaMap = this._ensureRuleFormulaMap(unitId, subUnitId);\n                    results.forEach((result) => {\n                        if (formulaMap.get(result.extra?.ruleId)) {\n                            const rule = this._dataValidationModel.getRuleById(unitId, subUnitId, result.extra?.ruleId);\n                            if (rule) {\n                                this._dataValidationCacheService.markRangeDirty(unitId, subUnitId, rule.ranges);\n                            }\n                        };\n                    });\n                }\n            }\n        }));\n    }\n\n    private _ensureRuleFormulaMap(unitId: string, subUnitId: string) {\n        let unitMap = this._formulaRuleMap.get(unitId);\n\n        if (!unitMap) {\n            unitMap = new Map();\n            this._formulaRuleMap.set(unitId, unitMap);\n        }\n\n        let subUnitMap = unitMap.get(subUnitId);\n\n        if (!subUnitMap) {\n            subUnitMap = new Map();\n            unitMap.set(subUnitId, subUnitMap);\n        }\n\n        return subUnitMap;\n    }\n\n    private _registerSingleFormula(unitId: string, subUnitId: string, formula: string, ruleId: string) {\n        const ranges = [{ startColumn: 0, endColumn: 0, startRow: 0, endRow: 0 }];\n        return this._registerOtherFormulaService.registerFormulaWithRange(unitId, subUnitId, formula, ranges, { ruleId });\n    }\n\n    addRule(unitId: string, subUnitId: string, rule: ISheetDataValidationRule) {\n        if (!shouldOffsetFormulaByRange(rule.type, this._validatorRegistryService) && rule.type !== DataValidationType.CHECKBOX) {\n            const { formula1, formula2, uid: ruleId } = rule;\n            const isFormula1Legal = isFormulaString(formula1);\n            const isFormula2Legal = isFormulaString(formula2);\n            if (!isFormula1Legal && !isFormula2Legal) {\n                return;\n            }\n            const formulaRuleMap = this._ensureRuleFormulaMap(unitId, subUnitId);\n            const item: [IFormulaInfo | undefined, IFormulaInfo | undefined] = [undefined, undefined];\n            if (isFormula1Legal) {\n                const id = this._registerSingleFormula(unitId, subUnitId, formula1!, ruleId);\n                item[0] = { id, text: formula1! };\n            }\n            if (isFormula2Legal) {\n                const id = this._registerSingleFormula(unitId, subUnitId, formula2!, ruleId);\n                item[1] = { id, text: formula2! };\n            }\n            formulaRuleMap.set(ruleId, item);\n        }\n    }\n\n    removeRule(unitId: string, subUnitId: string, ruleId: string) {\n        const formulaRuleMap = this._ensureRuleFormulaMap(unitId, subUnitId);\n        const item = formulaRuleMap.get(ruleId);\n        if (!item) {\n            return;\n        }\n        const [formula1, formula2] = item;\n        const idList = [formula1?.id, formula2?.id].filter(Boolean) as string[];\n        idList.length && this._registerOtherFormulaService.deleteFormula(unitId, subUnitId, idList);\n    }\n\n    getRuleFormulaResult(unitId: string, subUnitId: string, ruleId: string): Promise<Nullable<[Nullable<IOtherFormulaResult>, Nullable<IOtherFormulaResult>]>> {\n        const ruleFormulaMap = this._ensureRuleFormulaMap(unitId, subUnitId);\n\n        const formulaInfo = ruleFormulaMap.get(ruleId);\n        if (!formulaInfo) {\n            return Promise.resolve(null);\n        }\n        const getResult = async (info: IFormulaInfo | undefined) => info && this._registerOtherFormulaService.getFormulaValue(unitId, subUnitId, info.id);\n\n        return Promise.all([\n            getResult(formulaInfo[0]),\n            getResult(formulaInfo[1]),\n        ]);\n    }\n\n    getRuleFormulaResultSync(unitId: string, subUnitId: string, ruleId: string) {\n        const ruleFormulaMap = this._ensureRuleFormulaMap(unitId, subUnitId);\n\n        const formulaInfo = ruleFormulaMap.get(ruleId);\n\n        if (!formulaInfo) {\n            return undefined;\n        }\n\n        return formulaInfo.map((i) => {\n            if (i) {\n                return this._registerOtherFormulaService.getFormulaValueSync(unitId, subUnitId, i.id);\n            }\n\n            return undefined;\n        });\n    }\n\n    getRuleFormulaInfo(unitId: string, subUnitId: string, ruleId: string) {\n        const ruleFormulaMap = this._ensureRuleFormulaMap(unitId, subUnitId);\n        return ruleFormulaMap.get(ruleId);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getOriginCellValue, type ICellData, type Nullable } from '@univerjs/core';\n\nexport function getCellValueOrigin(cell: Nullable<ICellData>) {\n    return getOriginCellValue(cell);\n}\n\nexport function getStringCellValue(cell: Nullable<ICellData>) {\n    return String(getCellValueOrigin(cell) ?? '');\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { BBox, IRange, ISheetDataValidationRule, IUniverInstanceService, Workbook } from '@univerjs/core';\n\nimport { debounce, Range, RBush, Rectangle, Tools, UniverInstanceType } from '@univerjs/core';\n\ninterface IRuleItem extends BBox {\n    ruleId: string;\n\n}\n\nexport type RangeMutation = {\n    type: 'update';\n    ruleId: string;\n    oldRanges: IRange[];\n    newRanges: IRange[];\n    rule: ISheetDataValidationRule;\n} | {\n    type: 'delete';\n    rule: ISheetDataValidationRule;\n    index: number;\n} | {\n    type: 'add';\n    rule: ISheetDataValidationRule;\n};\n\nexport class RuleMatrix {\n    private _map: Map<string, IRange[]>;\n    private _tree = new RBush<IRuleItem>();\n    private _dirty = true;\n\n    constructor(\n        value: Map<string, IRange[]>,\n        private _unitId: string,\n        private _subUnitId: string,\n        private _univerInstanceService: IUniverInstanceService,\n        private _disableTree = false\n    ) {\n        this._map = value;\n        this._buildTree();\n    }\n\n    private _buildTree = () => {\n        if (!this._dirty || this._disableTree) {\n            return;\n        }\n        this._tree.clear();\n        const items: IRuleItem[] = [];\n        this._map.forEach((ranges, ruleId) => {\n            ranges.forEach((range) => {\n                items.push({\n                    minX: range.startRow,\n                    maxX: range.endRow,\n                    minY: range.startColumn,\n                    maxY: range.endColumn,\n                    ruleId,\n                });\n            });\n        });\n        this._tree.load(items);\n        this._dirty = false;\n    };\n\n    private _debonceBuildTree = debounce(this._buildTree, 0);\n\n    get _worksheet() {\n        return this._univerInstanceService.getUnit<Workbook>(this._unitId, UniverInstanceType.UNIVER_SHEET)?.getSheetBySheetId(this._subUnitId);\n    }\n\n    private _addRule(ruleId: string, _ranges: IRange[]) {\n        if (!this._worksheet) {\n            return;\n        }\n\n        const ranges = Rectangle.mergeRanges(_ranges.map((range) => Range.transformRange(range, this._worksheet!)));\n\n        this._map.forEach((value, key) => {\n            const newRanges = Rectangle.subtractMulti(value, ranges);\n            if (newRanges.length === 0) {\n                this._map.delete(key);\n            } else {\n                this._map.set(key, newRanges);\n            }\n        });\n\n        this._dirty = true;\n        this._map.set(ruleId, ranges);\n        this._debonceBuildTree();\n    }\n\n    addRule(rule: ISheetDataValidationRule) {\n        this._addRule(rule.uid, rule.ranges);\n    }\n\n    removeRange(_ranges: IRange[]) {\n        if (!this._worksheet) {\n            return;\n        }\n        const ranges = _ranges.map((range) => Range.transformRange(range, this._worksheet!));\n        this._map.forEach((value, key) => {\n            const newRanges = Rectangle.subtractMulti(value, ranges);\n            if (newRanges.length === 0) {\n                this._map.delete(key);\n            } else {\n                this._map.set(key, newRanges);\n            }\n        });\n        this._dirty = true;\n        this._debonceBuildTree();\n    }\n\n    private _removeRule(ruleId: string) {\n        this._map.delete(ruleId);\n        this._dirty = true;\n        this._debonceBuildTree();\n    }\n\n    removeRule(rule: ISheetDataValidationRule) {\n        this._removeRule(rule.uid);\n    }\n\n    updateRange(ruleId: string, _newRanges: IRange[]) {\n        this._removeRule(ruleId);\n        this._addRule(ruleId, _newRanges);\n    }\n\n    addRangeRules(rules: { id: string; ranges: IRange[] }[]) {\n        rules.forEach(({ id: ruleId, ranges }) => {\n            if (!ranges.length) {\n                return;\n            }\n\n            let current = this._map.get(ruleId);\n            if (!current) {\n                current = ranges;\n                this._map.set(ruleId, current);\n            } else {\n                this._map.set(ruleId, Rectangle.mergeRanges([...current, ...ranges]));\n                current = this._map.get(ruleId)!;\n            }\n\n            this._map.forEach((value, key) => {\n                if (key === ruleId) {\n                    return;\n                }\n                const newRanges = Rectangle.subtractMulti(value, ranges);\n                if (newRanges.length === 0) {\n                    this._map.delete(key);\n                } else {\n                    this._map.set(key, newRanges);\n                }\n            });\n        });\n        this._dirty = true;\n        this._debonceBuildTree();\n    }\n\n    diff(rules: ISheetDataValidationRule[]) {\n        const mutations: RangeMutation[] = [];\n        let deleteIndex = 0;\n        rules.forEach((rule, index) => {\n            const newRanges = this._map.get(rule.uid) ?? [];\n            const oldRanges = rule.ranges;\n\n            if (newRanges.length !== 0 && (newRanges.length !== oldRanges.length || newRanges.some((range, i) => !Rectangle.equals(range, oldRanges[i])))) {\n                mutations.push({\n                    type: 'update',\n                    ruleId: rule.uid,\n                    oldRanges,\n                    newRanges: Rectangle.sort(newRanges),\n                    rule,\n                });\n            }\n\n            if (newRanges.length === 0) {\n                mutations.push({\n                    type: 'delete',\n                    rule,\n                    index: index - deleteIndex,\n                });\n                deleteIndex++;\n            }\n        });\n\n        return mutations;\n    }\n\n    diffWithAddition(rules: ISheetDataValidationRule[], additionRules: IterableIterator<ISheetDataValidationRule>) {\n        const mutations: RangeMutation[] = [];\n        let deleteIndex = 0;\n        rules.forEach((rule, index) => {\n            const newRanges = this._map.get(rule.uid) ?? [];\n            const oldRanges = rule.ranges;\n\n            if (newRanges.length !== 0 && (newRanges.length !== oldRanges.length || newRanges.some((range, i) => !Rectangle.equals(range, oldRanges[i])))) {\n                mutations.push({\n                    type: 'update',\n                    ruleId: rule.uid,\n                    oldRanges,\n                    newRanges: Rectangle.sort(newRanges),\n                    rule,\n                });\n            }\n\n            if (newRanges.length === 0) {\n                mutations.push({\n                    type: 'delete',\n                    rule,\n                    index: index - deleteIndex,\n                });\n                deleteIndex++;\n            }\n        });\n\n        Array.from(additionRules).forEach((rule) => {\n            const newRanges = this._map.get(rule.uid) ?? [];\n            mutations.push({\n                type: 'add',\n                rule: {\n                    ...rule,\n                    ranges: Rectangle.sort(newRanges),\n                },\n            });\n        });\n\n        return mutations;\n    }\n\n    clone() {\n        return new RuleMatrix(\n            new Map(Tools.deepClone(Array.from(this._map.entries()))),\n            this._unitId,\n            this._subUnitId,\n            this._univerInstanceService,\n            // disable tree on cloned matrix, cause there is no need to search\n            true\n        );\n    }\n\n    getValue(row: number, col: number): string | undefined {\n        if (this._dirty) {\n            this._buildTree();\n        }\n\n        const result = this._tree.search({\n            minX: row,\n            maxX: row,\n            minY: col,\n            maxY: col,\n        });\n        return result.length > 0 ? result[0].ruleId : undefined;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DataValidationType, ISheetDataValidationRule } from '@univerjs/core';\nimport type { IRuleChange, IUpdateRulePayload } from '@univerjs/data-validation';\nimport type { IRemoveSheetMutationParams, ISheetLocation } from '@univerjs/sheets';\nimport { DataValidationStatus, Disposable, ICommandService, Inject, IUniverInstanceService } from '@univerjs/core';\nimport { DataValidationModel, DataValidatorRegistryService, UpdateRuleType } from '@univerjs/data-validation';\nimport { RemoveSheetMutation } from '@univerjs/sheets';\nimport { Subject } from 'rxjs';\nimport { DataValidationCacheService } from '../services/dv-cache.service';\nimport { DataValidationCustomFormulaService } from '../services/dv-custom-formula.service';\nimport { DataValidationFormulaService } from '../services/dv-formula.service';\nimport { getCellValueOrigin } from '../utils/get-cell-data-origin';\nimport { RuleMatrix } from './rule-matrix';\n\nexport interface IValidStatusChange {\n    unitId: string;\n    subUnitId: string;\n    row: number;\n    col: number;\n    ruleId: string;\n    status: DataValidationStatus;\n}\n\nexport class SheetDataValidationModel extends Disposable {\n    private readonly _ruleMatrixMap = new Map<string, Map<string, RuleMatrix>>();\n    private readonly _validStatusChange$ = new Subject<IValidStatusChange>();\n    private readonly _ruleChange$ = new Subject<IRuleChange>();\n\n    readonly ruleChange$ = this._ruleChange$.asObservable();\n    readonly validStatusChange$ = this._validStatusChange$.asObservable();\n\n    constructor(\n        @Inject(DataValidationModel) private readonly _dataValidationModel: DataValidationModel,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @Inject(DataValidatorRegistryService) private _dataValidatorRegistryService: DataValidatorRegistryService,\n        @Inject(DataValidationCacheService) private _dataValidationCacheService: DataValidationCacheService,\n        @Inject(DataValidationFormulaService) private _dataValidationFormulaService: DataValidationFormulaService,\n        @Inject(DataValidationCustomFormulaService) private _dataValidationCustomFormulaService: DataValidationCustomFormulaService,\n        @ICommandService private readonly _commandService: ICommandService\n    ) {\n        super();\n        this._initRuleUpdateListener();\n\n        this.disposeWithMe(() => {\n            this._ruleChange$.complete();\n            this._validStatusChange$.complete();\n        });\n\n        this._initUniverInstanceListener();\n    }\n\n    private _initUniverInstanceListener() {\n        this.disposeWithMe(\n            this._univerInstanceService.unitDisposed$.subscribe((unit) => {\n                this._ruleMatrixMap.delete(unit.getUnitId());\n            })\n        );\n\n        this.disposeWithMe(\n            this._commandService.onCommandExecuted((command) => {\n                if (command.id === RemoveSheetMutation.id) {\n                    const { unitId, subUnitId } = command.params as IRemoveSheetMutationParams;\n                    const subUnitMap = this._ruleMatrixMap.get(unitId);\n                    if (subUnitMap) {\n                        subUnitMap.delete(subUnitId);\n                    }\n                }\n            })\n        );\n    }\n\n    private _initRuleUpdateListener() {\n        const allRules = this._dataValidationModel.getAll();\n        for (const [unitId, subUnitMap] of allRules) {\n            for (const [subUnitId, rules] of subUnitMap) {\n                for (const rule of rules) {\n                    this._addRule(unitId, subUnitId, rule);\n\n                    this._ruleChange$.next({\n                        type: 'add',\n                        unitId,\n                        subUnitId,\n                        rule,\n                        source: 'patched',\n                    });\n                }\n            }\n        }\n\n        this.disposeWithMe(\n            this._dataValidationModel.ruleChange$.subscribe((ruleChange) => {\n                switch (ruleChange.type) {\n                    case 'add':\n                        this._addRule(ruleChange.unitId, ruleChange.subUnitId, ruleChange.rule);\n                        break;\n                    case 'update':\n                        this._updateRule(ruleChange.unitId, ruleChange.subUnitId, ruleChange.rule.uid, ruleChange.oldRule!, ruleChange.updatePayload!);\n                        break;\n                    case 'remove':\n                        this._removeRule(ruleChange.unitId, ruleChange.subUnitId, ruleChange.rule);\n                        break;\n                }\n\n                this._ruleChange$.next(ruleChange);\n            })\n        );\n    }\n\n    private _ensureRuleMatrix(unitId: string, subUnitId: string) {\n        let unitMap = this._ruleMatrixMap.get(unitId);\n\n        if (!unitMap) {\n            unitMap = new Map();\n            this._ruleMatrixMap.set(unitId, unitMap);\n        }\n\n        let matrix = unitMap.get(subUnitId);\n        if (!matrix) {\n            matrix = new RuleMatrix(new Map(), unitId, subUnitId, this._univerInstanceService);\n            unitMap.set(subUnitId, matrix);\n        }\n\n        return matrix;\n    }\n\n    private _addRuleSideEffect(unitId: string, subUnitId: string, rule: ISheetDataValidationRule) {\n        const ruleMatrix = this._ensureRuleMatrix(unitId, subUnitId);\n        ruleMatrix.addRule(rule);\n        this._dataValidationCacheService.addRule(unitId, subUnitId, rule);\n        this._dataValidationFormulaService.addRule(unitId, subUnitId, rule);\n        this._dataValidationCustomFormulaService.addRule(unitId, subUnitId, rule);\n    }\n\n    private _addRule(unitId: string, subUnitId: string, rule: ISheetDataValidationRule | ISheetDataValidationRule[]): void {\n        const rules = Array.isArray(rule) ? rule : [rule];\n\n        rules.forEach((item) => {\n            this._addRuleSideEffect(unitId, subUnitId, item);\n        });\n    }\n\n    private _updateRule(unitId: string, subUnitId: string, ruleId: string, oldRule: ISheetDataValidationRule, payload: IUpdateRulePayload) {\n        const ruleMatrix = this._ensureRuleMatrix(unitId, subUnitId);\n        const newRule = {\n            ...oldRule,\n            ...payload.payload,\n        };\n\n        if (payload.type === UpdateRuleType.RANGE) {\n            ruleMatrix.updateRange(ruleId, payload.payload);\n        } else if (payload.type === UpdateRuleType.ALL) {\n            ruleMatrix.updateRange(ruleId, payload.payload.ranges);\n        }\n\n        this._dataValidationCacheService.removeRule(unitId, subUnitId, oldRule);\n        this._dataValidationCacheService.addRule(unitId, subUnitId, newRule);\n        this._dataValidationFormulaService.removeRule(unitId, subUnitId, oldRule.uid);\n        this._dataValidationFormulaService.addRule(unitId, subUnitId, newRule);\n        this._dataValidationCustomFormulaService.deleteByRuleId(unitId, subUnitId, ruleId);\n        this._dataValidationCustomFormulaService.addRule(unitId, subUnitId, newRule);\n    }\n\n    private _removeRule(unitId: string, subUnitId: string, oldRule: ISheetDataValidationRule): void {\n        const ruleMatrix = this._ensureRuleMatrix(unitId, subUnitId);\n        ruleMatrix.removeRule(oldRule);\n        this._dataValidationCacheService.removeRule(unitId, subUnitId, oldRule);\n        this._dataValidationCustomFormulaService.deleteByRuleId(unitId, subUnitId, oldRule.uid);\n    }\n\n    getValidator(type: DataValidationType | string) {\n        return this._dataValidatorRegistryService.getValidatorItem(type);\n    }\n\n    getRuleIdByLocation(unitId: string, subUnitId: string, row: number, col: number): string | undefined {\n        const ruleMatrix = this._ensureRuleMatrix(unitId, subUnitId);\n        return ruleMatrix.getValue(row, col)!;\n    }\n\n    getRuleByLocation(unitId: string, subUnitId: string, row: number, col: number): ISheetDataValidationRule | undefined {\n        const ruleId = this.getRuleIdByLocation(unitId, subUnitId, row, col);\n        if (!ruleId) {\n            return undefined;\n        }\n\n        return this._dataValidationModel.getRuleById(unitId, subUnitId, ruleId);\n    }\n\n    validator(rule: ISheetDataValidationRule, pos: ISheetLocation, _onCompete?: (status: DataValidationStatus, changed: boolean) => void): DataValidationStatus {\n        const { col, row, unitId, subUnitId, worksheet } = pos;\n        const onCompete = (status: DataValidationStatus, changed: boolean) => {\n            if (_onCompete) {\n                _onCompete(status, changed);\n            }\n            if (changed) {\n                this._validStatusChange$.next({\n                    unitId,\n                    subUnitId,\n                    ruleId: rule.uid,\n                    status,\n                    row,\n                    col,\n                });\n            }\n        };\n\n        const cell = worksheet.getCellValueOnly(row, col);\n        const validator = this.getValidator(rule.type);\n        const cellRaw = worksheet.getCellRaw(row, col);\n        const cellValue = getCellValueOrigin(cellRaw);\n\n        if (validator) {\n            const cache = this._dataValidationCacheService.ensureCache(unitId, subUnitId);\n            const current = cache.getValue(row, col);\n            if (current === null || current === undefined) {\n                cache.setValue(row, col, DataValidationStatus.VALIDATING);\n                validator.validator(\n                    {\n                        value: cellValue,\n                        unitId,\n                        subUnitId,\n                        row,\n                        column: col,\n                        worksheet: pos.worksheet,\n                        workbook: pos.workbook,\n                        interceptValue: getCellValueOrigin(cell),\n                        t: cellRaw?.t,\n                    },\n                    rule\n                ).then((status) => {\n                    const realStatus = status ? DataValidationStatus.VALID : DataValidationStatus.INVALID;\n                    if (realStatus === DataValidationStatus.VALID) {\n                        cache.realDeleteValue(row, col);\n                    } else {\n                        cache.setValue(row, col, realStatus);\n                    }\n                    const now = cache.getValue(row, col);\n                    onCompete(realStatus, current !== now);\n                });\n                return DataValidationStatus.VALIDATING;\n            }\n\n            onCompete(current ?? DataValidationStatus.VALID, false);\n            return current ?? DataValidationStatus.VALID;\n        } else {\n            onCompete(DataValidationStatus.VALID, false);\n            return DataValidationStatus.VALID;\n        }\n    }\n\n    getRuleObjectMatrix(unitId: string, subUnitId: string) {\n        return this._ensureRuleMatrix(unitId, subUnitId);\n    }\n\n    getRuleById(unitId: string, subUnitId: string, ruleId: string): ISheetDataValidationRule | undefined {\n        return this._dataValidationModel.getRuleById(unitId, subUnitId, ruleId);\n    }\n\n    getRuleIndex(unitId: string, subUnitId: string, ruleId: string) {\n        return this._dataValidationModel.getRuleIndex(unitId, subUnitId, ruleId);\n    }\n\n    getRules(unitId: string, subUnitId: string): ISheetDataValidationRule[] {\n        return [...this._dataValidationModel.getRules(unitId, subUnitId)];\n    }\n\n    getUnitRules(unitId: string): [string, ISheetDataValidationRule[]][] {\n        return this._dataValidationModel.getUnitRules(unitId);\n    }\n\n    deleteUnitRules(unitId: string) {\n        return this._dataValidationModel.deleteUnitRules(unitId);\n    }\n\n    getSubUnitIds(unitId: string) {\n        return this._dataValidationModel.getSubUnitIds(unitId);\n    }\n\n    getAll() {\n        return this._dataValidationModel.getAll();\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CellValue, DataValidationOperator, IDataValidationRule, IDataValidationRuleBase, ISheetDataValidationRule, LocaleService, Nullable } from '@univerjs/core';\nimport type { IFormulaResult, IFormulaValidResult, IValidatorCellInfo } from '@univerjs/data-validation';\nimport { DataValidationType, isFormulaString, Tools, WrapStrategy } from '@univerjs/core';\nimport { BaseDataValidator } from '@univerjs/data-validation';\nimport { DataValidationFormulaService } from '../services/dv-formula.service';\nimport { getFormulaResult, isLegalFormulaResult } from '../utils/formula';\n\nexport const CHECKBOX_FORMULA_1 = 1;\nexport const CHECKBOX_FORMULA_2 = 0;\n\ninterface ICheckboxFormulaResult extends IFormulaResult {\n    originFormula1: Nullable<CellValue>;\n    originFormula2: Nullable<CellValue>;\n}\n\nfunction getFailMessage(formula: string | undefined, localeService: LocaleService) {\n    if (Tools.isBlank(formula)) {\n        return localeService.t('dataValidation.validFail.value');\n    }\n\n    if (isFormulaString(formula)) {\n        return localeService.t('dataValidation.validFail.primitive');\n    }\n\n    return '';\n}\n\nexport const transformCheckboxValue = (value: Nullable<CellValue>) =>\n    Tools.isDefine(value) && String(value).toLowerCase() === 'true'\n        ? '1'\n        : String(value).toLowerCase() === 'false'\n            ? '0'\n            : value;\n\nexport class CheckboxValidator extends BaseDataValidator {\n    override id: string = DataValidationType.CHECKBOX;\n    override title: string = 'dataValidation.checkbox.title';\n    override operators: DataValidationOperator[] = [];\n    override scopes: string | string[] = ['sheet'];\n\n    override readonly offsetFormulaByRange = false;\n\n    private _formulaService = this.injector.get(DataValidationFormulaService);\n\n    override skipDefaultFontRender = (rule: ISheetDataValidationRule, cellValue: Nullable<CellValue>, pos: { unitId: string; subUnitId: string; row: number; column: number }) => {\n        const { unitId, subUnitId } = pos;\n        const { formula1, formula2 } = this.parseFormulaSync(rule, unitId, subUnitId);\n\n        const valueStr = `${cellValue ?? ''}`;\n\n        const res = !valueStr || (valueStr === (`${formula1}`) || valueStr === `${formula2}`);\n        return res;\n    };\n\n    override validatorFormula(rule: IDataValidationRule, unitId: string, subUnitId: string): IFormulaValidResult {\n        const { formula1, formula2 } = rule;\n        const isEqual = formula1 === formula2;\n\n        if (Tools.isBlank(formula1) && Tools.isBlank(formula2)) {\n            return {\n                success: true,\n            };\n        }\n\n        if (isEqual) {\n            return {\n                success: false,\n                formula1: this.localeService.t('dataValidation.validFail.checkboxEqual'),\n                formula2: this.localeService.t('dataValidation.validFail.checkboxEqual'),\n            };\n        }\n\n        const error1 = getFailMessage(formula1, this.localeService);\n        const error2 = getFailMessage(formula2, this.localeService);\n\n        return {\n            success: (!error1 && !error2),\n            formula1: error1,\n            formula2: error2,\n        };\n    }\n\n    override async parseFormula(rule: IDataValidationRule, unitId: string, subUnitId: string): Promise<ICheckboxFormulaResult> {\n        const { formula1 = CHECKBOX_FORMULA_1, formula2 = CHECKBOX_FORMULA_2 } = rule;\n        const results = await this._formulaService.getRuleFormulaResult(unitId, subUnitId, rule.uid);\n\n        const originFormula1 = isFormulaString(formula1) ? getFormulaResult(results?.[0]?.result?.[0][0]) : formula1;\n        const originFormula2 = isFormulaString(formula2) ? getFormulaResult(results?.[1]?.result?.[0][0]) : formula2;\n        const isFormulaValid = isLegalFormulaResult(String(originFormula1)) && isLegalFormulaResult(String(originFormula2));\n\n        return {\n            formula1: transformCheckboxValue(originFormula1),\n            formula2: transformCheckboxValue(originFormula2),\n            originFormula1,\n            originFormula2,\n            isFormulaValid,\n        };\n    }\n\n    override getExtraStyle(rule: IDataValidationRule, value: Nullable<CellValue>) {\n        return {\n            tb: WrapStrategy.CLIP,\n        };\n    }\n\n    parseFormulaSync(rule: IDataValidationRule, unitId: string, subUnitId: string): ICheckboxFormulaResult {\n        const { formula1 = CHECKBOX_FORMULA_1, formula2 = CHECKBOX_FORMULA_2 } = rule;\n        const results = this._formulaService.getRuleFormulaResultSync(unitId, subUnitId, rule.uid);\n        const originFormula1 = isFormulaString(formula1) ? getFormulaResult(results?.[0]?.result?.[0][0]) : formula1;\n        const originFormula2 = isFormulaString(formula2) ? getFormulaResult(results?.[1]?.result?.[0][0]) : formula2;\n        const isFormulaValid = isLegalFormulaResult(String(originFormula1)) && isLegalFormulaResult(String(originFormula2)); // TODO@Dushusir Handling return type errors, not sure if this is correct\n\n        return {\n            formula1: transformCheckboxValue(originFormula1),\n            formula2: transformCheckboxValue(originFormula2),\n            originFormula1,\n            originFormula2,\n            isFormulaValid,\n        };\n    }\n\n    override async isValidType(cellInfo: IValidatorCellInfo<CellValue>, formula: IFormulaResult, rule: IDataValidationRule): Promise<boolean> {\n        const { value, unitId, subUnitId } = cellInfo;\n        const { formula1, formula2, originFormula1, originFormula2 } = await this.parseFormula(rule, unitId, subUnitId);\n        if (!Tools.isDefine(formula1) || !Tools.isDefine(formula2)) {\n            return true;\n        }\n\n        return Tools.isDefine(value) && (\n            String(value) === String(formula1)\n            || String(value) === String(formula2)\n            || String(value) === String(originFormula1 ?? '')\n            || String(value) === String(originFormula2 ?? '')\n        );\n    }\n\n    override generateRuleErrorMessage(rule: IDataValidationRuleBase): string {\n        return this.localeService.t('dataValidation.checkbox.error');\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataValidationOperator } from '@univerjs/core';\n\nexport const DateOperatorNameMap: Record<DataValidationOperator, string> = {\n    [DataValidationOperator.BETWEEN]: 'dataValidation.date.operators.between',\n    [DataValidationOperator.EQUAL]: 'dataValidation.date.operators.equal',\n    [DataValidationOperator.GREATER_THAN]: 'dataValidation.date.operators.greaterThan',\n    [DataValidationOperator.GREATER_THAN_OR_EQUAL]: 'dataValidation.date.operators.greaterThanOrEqual',\n    [DataValidationOperator.LESS_THAN]: 'dataValidation.date.operators.lessThan',\n    [DataValidationOperator.LESS_THAN_OR_EQUAL]: 'dataValidation.date.operators.lessThanOrEqual',\n    [DataValidationOperator.NOT_BETWEEN]: 'dataValidation.date.operators.notBetween',\n    [DataValidationOperator.NOT_EQUAL]: 'dataValidation.date.operators.notEqual',\n};\n\nexport const DateOperatorTextMap: Record<DataValidationOperator, string> = {\n    [DataValidationOperator.BETWEEN]: 'dataValidation.date.operators.between',\n    [DataValidationOperator.EQUAL]: 'dataValidation.date.operators.equal',\n    [DataValidationOperator.GREATER_THAN]: 'dataValidation.date.operators.greaterThan',\n    [DataValidationOperator.GREATER_THAN_OR_EQUAL]: 'dataValidation.date.operators.greaterThanOrEqual',\n    [DataValidationOperator.LESS_THAN]: 'dataValidation.date.operators.lessThan',\n    [DataValidationOperator.LESS_THAN_OR_EQUAL]: 'dataValidation.date.operators.lessThanOrEqual',\n    [DataValidationOperator.NOT_BETWEEN]: 'dataValidation.date.operators.notBetween',\n    [DataValidationOperator.NOT_EQUAL]: 'dataValidation.date.operators.notEqual',\n};\n\nexport const DateOperatorTitleMap: Record<DataValidationOperator, string> = {\n    [DataValidationOperator.BETWEEN]: 'dataValidation.date.ruleName.between',\n    [DataValidationOperator.EQUAL]: 'dataValidation.date.ruleName.equal',\n    [DataValidationOperator.GREATER_THAN]: 'dataValidation.date.ruleName.greaterThan',\n    [DataValidationOperator.GREATER_THAN_OR_EQUAL]: 'dataValidation.date.ruleName.greaterThanOrEqual',\n    [DataValidationOperator.LESS_THAN]: 'dataValidation.date.ruleName.lessThan',\n    [DataValidationOperator.LESS_THAN_OR_EQUAL]: 'dataValidation.date.ruleName.lessThanOrEqual',\n    [DataValidationOperator.NOT_BETWEEN]: 'dataValidation.date.ruleName.notBetween',\n    [DataValidationOperator.NOT_EQUAL]: 'dataValidation.date.ruleName.notEqual',\n};\n\nexport const DateOperatorErrorTitleMap: Record<DataValidationOperator, string> = {\n    [DataValidationOperator.BETWEEN]: 'dataValidation.date.errorMsg.between',\n    [DataValidationOperator.EQUAL]: 'dataValidation.date.errorMsg.equal',\n    [DataValidationOperator.GREATER_THAN]: 'dataValidation.date.errorMsg.greaterThan',\n    [DataValidationOperator.GREATER_THAN_OR_EQUAL]: 'dataValidation.date.errorMsg.greaterThanOrEqual',\n    [DataValidationOperator.LESS_THAN]: 'dataValidation.date.errorMsg.lessThan',\n    [DataValidationOperator.LESS_THAN_OR_EQUAL]: 'dataValidation.date.errorMsg.lessThanOrEqual',\n    [DataValidationOperator.NOT_BETWEEN]: 'dataValidation.date.errorMsg.notBetween',\n    [DataValidationOperator.NOT_EQUAL]: 'dataValidation.date.errorMsg.notEqual',\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataValidationOperator } from '@univerjs/core';\n\nexport const TWO_FORMULA_OPERATOR_COUNT: DataValidationOperator[] = [\n    DataValidationOperator.BETWEEN,\n    DataValidationOperator.NOT_BETWEEN,\n];\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const FORMULA1 = '{FORMULA1}';\nexport const FORMULA2 = '{FORMULA2}';\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICellData, ISheetDataValidationRule, IUnitRangeName, IUniverInstanceService, Nullable, Workbook } from '@univerjs/core';\nimport type { LexerTreeBuilder } from '@univerjs/engine-formula';\nimport type { ISheetLocationBase } from '@univerjs/sheets';\nimport { isFormulaString, Range, UniverInstanceType } from '@univerjs/core';\nimport { getCellValueOrigin } from '../utils/get-cell-data-origin';\n\nexport function getSheetRangeValueSet(grid: IUnitRangeName, univerInstanceService: IUniverInstanceService, currUnitId: string, currSubUnitId: string) {\n    const set = new Set<string>();\n    const unitId = grid.unitId || currUnitId;\n    const workbook = univerInstanceService.getUniverSheetInstance(unitId) ?? univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET)!;\n    const worksheet = workbook.getSheetBySheetName(grid.sheetName) ?? workbook.getSheetBySheetId(currSubUnitId) ?? workbook.getActiveSheet();\n    Range.foreach(grid.range, (row, col) => {\n        const data = worksheet?.getCellRaw(row, col);\n        if (!data) {\n            return;\n        }\n\n        const cellValue = getCellValueOrigin(data);\n\n        if (cellValue === undefined || cellValue === null || cellValue === '') {\n            return;\n        }\n\n        const list = deserializeListOptions(`${cellValue}`);\n\n        list.forEach((item) => {\n            if (item) {\n                set.add(`${cellValue}`);\n            }\n        });\n    });\n\n    return Array.from(set);\n}\n\nexport function serializeListOptions(options: string[]) {\n    return options.filter(Boolean).join(',');\n}\n\nexport function deserializeListOptions(optionsStr: string) {\n    return optionsStr.split(',').filter(Boolean);\n}\n\nexport function getDataValidationCellValue(cellData: Nullable<ICellData>) {\n    const cellValue = getCellValueOrigin(cellData);\n    if (cellValue === undefined || cellValue === null) {\n        return '';\n    }\n\n    return cellValue.toString();\n}\n\nexport function getTransformedFormula(lexerTreeBuilder: LexerTreeBuilder, rule: ISheetDataValidationRule, position: ISheetLocationBase) {\n    const { formula1, formula2 } = rule;\n    const originStartRow = rule.ranges[0].startRow;\n    const originStartColumn = rule.ranges[0].startColumn;\n    const offsetRow = position.row - originStartRow;\n    const offsetColumn = position.col - originStartColumn;\n\n    const transformedFormula1 = isFormulaString(formula1) ? lexerTreeBuilder.moveFormulaRefOffset(formula1!, offsetColumn, offsetRow, true) : formula1;\n    const transformedFormula2 = isFormulaString(formula2) ? lexerTreeBuilder.moveFormulaRefOffset(formula2!, offsetColumn, offsetRow, true) : formula2;\n\n    return {\n        transformedFormula1,\n        transformedFormula2,\n    };\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CellValue, IDataValidationRule, IDataValidationRuleBase, ISheetDataValidationRule, Nullable } from '@univerjs/core';\nimport type { IFormulaResult, IFormulaValidResult, IValidatorCellInfo } from '@univerjs/data-validation';\nimport type { ISheetLocationBase } from '@univerjs/sheets';\nimport { DataValidationOperator, DataValidationType, dayjs, isFormulaString, numfmt, Tools } from '@univerjs/core';\nimport { BaseDataValidator } from '@univerjs/data-validation';\nimport { LexerTreeBuilder } from '@univerjs/engine-formula';\nimport { DateOperatorErrorTitleMap, DateOperatorNameMap, DateOperatorTitleMap } from '../common/date-text-map';\nimport { DataValidationCustomFormulaService } from '../services/dv-custom-formula.service';\nimport { TWO_FORMULA_OPERATOR_COUNT } from '../types/const/two-formula-operators';\nimport { isLegalFormulaResult } from '../utils/formula';\nimport { FORMULA1, FORMULA2 } from './const';\nimport { getTransformedFormula } from './util';\n\nconst transformDate2SerialNumber = (value: Nullable<CellValue>) => {\n    if (value === undefined || value === null || typeof value === 'boolean') {\n        return undefined;\n    }\n\n    if (typeof value === 'number' || !Number.isNaN(+value)) {\n        return +value;\n    }\n\n    // transform date string to serial number\n    const v = numfmt.parseDate(value)?.v as number | undefined;\n    if (Tools.isDefine(v)) {\n        return v;\n    }\n\n    // support like 2020\u5E7411\u670811\u65E5 locale date\n    return numfmt.parseDate(dayjs(value).format('YYYY-MM-DD HH:mm:ss'))?.v as number | undefined;\n};\n\nexport class DateValidator extends BaseDataValidator {\n    id: string = DataValidationType.DATE;\n    title: string = 'dataValidation.date.title';\n    operators: DataValidationOperator[] = [\n        DataValidationOperator.BETWEEN,\n        DataValidationOperator.EQUAL,\n        DataValidationOperator.GREATER_THAN,\n        DataValidationOperator.GREATER_THAN_OR_EQUAL,\n        DataValidationOperator.LESS_THAN,\n        DataValidationOperator.LESS_THAN_OR_EQUAL,\n        DataValidationOperator.NOT_BETWEEN,\n        DataValidationOperator.NOT_EQUAL,\n    ];\n\n    scopes: string | string[] = ['sheet'];\n    private readonly _customFormulaService = this.injector.get(DataValidationCustomFormulaService);\n    private readonly _lexerTreeBuilder = this.injector.get(LexerTreeBuilder);\n\n    override async parseFormula(rule: IDataValidationRule, unitId: string, subUnitId: string, row: number, column: number): Promise<IFormulaResult<number | undefined>> {\n        const formulaResult1 = await this._customFormulaService.getCellFormulaValue(unitId, subUnitId, rule.uid, row, column);\n        const formulaResult2 = await this._customFormulaService.getCellFormula2Value(unitId, subUnitId, rule.uid, row, column);\n\n        const { formula1, formula2 } = rule;\n        const isFormulaValid = isLegalFormulaResult(String(formulaResult1?.v)) && isLegalFormulaResult(String(formulaResult2?.v));\n\n        return {\n            formula1: transformDate2SerialNumber(isFormulaString(formula1) ? formulaResult1?.v : formula1),\n            formula2: transformDate2SerialNumber(isFormulaString(formula2) ? formulaResult2?.v : formula2),\n            isFormulaValid,\n        };\n    }\n\n    override async isValidType(info: IValidatorCellInfo): Promise<boolean> {\n        const { interceptValue, value } = info;\n        if (typeof value === 'number' && typeof interceptValue === 'string') {\n            return true;\n        }\n\n        if (typeof interceptValue === 'string') {\n            return Boolean(numfmt.parseDate(interceptValue));\n        }\n\n        return false;\n    }\n\n    private _validatorSingleFormula(formula: string | undefined) {\n        return !Tools.isBlank(formula) && (isFormulaString(formula) || !Number.isNaN(+formula!) || Boolean(formula && numfmt.parseDate(formula)));\n    }\n\n    override validatorFormula(rule: IDataValidationRule, unitId: string, subUnitId: string): IFormulaValidResult {\n        const operator = rule.operator;\n        if (!operator) {\n            return {\n                success: false,\n            };\n        }\n\n        const formula1Success = this._validatorSingleFormula(rule.formula1);\n        const errorMsg = this.localeService.t('dataValidation.validFail.date');\n        const isTwoFormula = TWO_FORMULA_OPERATOR_COUNT.includes(operator);\n        if (isTwoFormula) {\n            const formula2Success = this._validatorSingleFormula(rule.formula2);\n            return {\n                success: formula1Success && formula2Success,\n                formula1: formula1Success ? undefined : errorMsg,\n                formula2: formula2Success ? undefined : errorMsg,\n            };\n        }\n\n        return {\n            success: formula1Success,\n            formula1: formula1Success ? undefined : errorMsg,\n        };\n    }\n\n    override normalizeFormula(rule: IDataValidationRule, _unitId: string, _subUnitId: string): { formula1: string | undefined; formula2: string | undefined } {\n        const { formula1, formula2, bizInfo } = rule;\n        const normlizeSingleFormula = (formula: string | undefined) => {\n            if (!formula) {\n                return formula;\n            }\n            let date;\n            if (!Number.isNaN(+formula)) {\n                date = numfmt.dateFromSerial(+formula) as unknown as [number, number, number, number, number, number];\n            } else {\n                const res = numfmt.parseDate(formula)?.v as number;\n                if (res === undefined || res === null) {\n                    return '';\n                }\n                date = numfmt.dateFromSerial(res) as unknown as [number, number, number, number, number, number];\n            }\n\n            return dayjs(`${date[0]}/${date[1]}/${date[2]} ${date[3]}:${date[4]}:${date[5]}`).format(bizInfo?.showTime ? 'YYYY-MM-DD HH:mm:ss' : 'YYYY-MM-DD');\n        };\n\n        return {\n            formula1: isFormulaString(formula1) ? formula1 : normlizeSingleFormula(`${formula1}`),\n            formula2: isFormulaString(formula2) ? formula2 : normlizeSingleFormula(`${formula2}`),\n        };\n    }\n\n    override transform(cellInfo: IValidatorCellInfo<CellValue>, _formula: IFormulaResult, _rule: IDataValidationRule): IValidatorCellInfo<number> {\n        const { value } = cellInfo;\n\n        return {\n            ...cellInfo,\n            value: transformDate2SerialNumber(value)!,\n        };\n    }\n\n    override get operatorNames() {\n        return this.operators.map((operator) => this.localeService.t(DateOperatorNameMap[operator]));\n    }\n\n    override generateRuleName(rule: IDataValidationRuleBase): string {\n        if (!rule.operator) {\n            return this.titleStr;\n        }\n\n        const ruleName = this.localeService.t(DateOperatorTitleMap[rule.operator]).replace(FORMULA1, rule.formula1 ?? '').replace(FORMULA2, rule.formula2 ?? '');\n        return `${this.titleStr} ${ruleName}`;\n    }\n\n    override generateRuleErrorMessage(rule: IDataValidationRuleBase, pos: ISheetLocationBase) {\n        if (!rule.operator) {\n            return this.titleStr;\n        }\n        const { transformedFormula1, transformedFormula2 } = getTransformedFormula(this._lexerTreeBuilder, rule as ISheetDataValidationRule, pos);\n\n        const errorMsg = this.localeService.t(DateOperatorErrorTitleMap[rule.operator]).replace(FORMULA1, transformedFormula1 ?? '').replace(FORMULA2, transformedFormula2 ?? '');\n        return `${errorMsg}`;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataValidationOperator } from '@univerjs/core';\n\nexport const OperatorTextMap: Record<DataValidationOperator, string> = {\n    [DataValidationOperator.BETWEEN]: 'dataValidation.operators.between',\n    [DataValidationOperator.EQUAL]: 'dataValidation.operators.equal',\n    [DataValidationOperator.GREATER_THAN]: 'dataValidation.operators.greaterThan',\n    [DataValidationOperator.GREATER_THAN_OR_EQUAL]: 'dataValidation.operators.greaterThanOrEqual',\n    [DataValidationOperator.LESS_THAN]: 'dataValidation.operators.lessThan',\n    [DataValidationOperator.LESS_THAN_OR_EQUAL]: 'dataValidation.operators.lessThanOrEqual',\n    [DataValidationOperator.NOT_BETWEEN]: 'dataValidation.operators.notBetween',\n    [DataValidationOperator.NOT_EQUAL]: 'dataValidation.operators.notEqual',\n};\n\nexport const OperatorTitleMap: Record<DataValidationOperator, string> = {\n    [DataValidationOperator.BETWEEN]: 'dataValidation.ruleName.between',\n    [DataValidationOperator.EQUAL]: 'dataValidation.ruleName.equal',\n    [DataValidationOperator.GREATER_THAN]: 'dataValidation.ruleName.greaterThan',\n    [DataValidationOperator.GREATER_THAN_OR_EQUAL]: 'dataValidation.ruleName.greaterThanOrEqual',\n    [DataValidationOperator.LESS_THAN]: 'dataValidation.ruleName.lessThan',\n    [DataValidationOperator.LESS_THAN_OR_EQUAL]: 'dataValidation.ruleName.lessThanOrEqual',\n    [DataValidationOperator.NOT_BETWEEN]: 'dataValidation.ruleName.notBetween',\n    [DataValidationOperator.NOT_EQUAL]: 'dataValidation.ruleName.notEqual',\n};\n\nexport const OperatorErrorTitleMap: Record<DataValidationOperator, string> = {\n    [DataValidationOperator.BETWEEN]: 'dataValidation.errorMsg.between',\n    [DataValidationOperator.EQUAL]: 'dataValidation.errorMsg.equal',\n    [DataValidationOperator.GREATER_THAN]: 'dataValidation.errorMsg.greaterThan',\n    [DataValidationOperator.GREATER_THAN_OR_EQUAL]: 'dataValidation.errorMsg.greaterThanOrEqual',\n    [DataValidationOperator.LESS_THAN]: 'dataValidation.errorMsg.lessThan',\n    [DataValidationOperator.LESS_THAN_OR_EQUAL]: 'dataValidation.errorMsg.lessThanOrEqual',\n    [DataValidationOperator.NOT_BETWEEN]: 'dataValidation.errorMsg.notBetween',\n    [DataValidationOperator.NOT_EQUAL]: 'dataValidation.errorMsg.notEqual',\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CellValue, IDataValidationRule, IDataValidationRuleBase, ISheetDataValidationRule, Nullable } from '@univerjs/core';\nimport type { IFormulaResult, IFormulaValidResult, IValidatorCellInfo } from '@univerjs/data-validation';\nimport type { ISheetLocationBase } from '@univerjs/sheets';\nimport { DataValidationOperator, DataValidationType, isFormulaString, Tools } from '@univerjs/core';\nimport { BaseDataValidator } from '@univerjs/data-validation';\nimport { LexerTreeBuilder } from '@univerjs/engine-formula';\nimport { DataValidationCustomFormulaService } from '../services/dv-custom-formula.service';\nimport { OperatorErrorTitleMap } from '../types';\nimport { TWO_FORMULA_OPERATOR_COUNT } from '../types/const/two-formula-operators';\nimport { isLegalFormulaResult } from '../utils/formula';\nimport { FORMULA1, FORMULA2 } from './const';\nimport { getTransformedFormula } from './util';\n\nexport function getCellValueNumber(cellValue: CellValue) {\n    let str = cellValue;\n    if (typeof cellValue === 'string') {\n        if (cellValue.startsWith('\u00A5') || cellValue.startsWith('$')) {\n            str = cellValue.slice(1);\n        }\n\n        return +str;\n    }\n\n    return +cellValue;\n}\n\nexport class DecimalValidator extends BaseDataValidator {\n    private readonly _customFormulaService = this.injector.get(DataValidationCustomFormulaService);\n    id: string = DataValidationType.DECIMAL;\n    private readonly _lexerTreeBuilder = this.injector.get(LexerTreeBuilder);\n    title: string = 'dataValidation.decimal.title';\n\n    operators: DataValidationOperator[] = [\n        DataValidationOperator.BETWEEN,\n        DataValidationOperator.EQUAL,\n        DataValidationOperator.GREATER_THAN,\n        DataValidationOperator.GREATER_THAN_OR_EQUAL,\n        DataValidationOperator.LESS_THAN,\n        DataValidationOperator.LESS_THAN_OR_EQUAL,\n        DataValidationOperator.NOT_BETWEEN,\n        DataValidationOperator.NOT_EQUAL,\n    ];\n\n    scopes: string | string[] = ['sheet'];\n\n    private _isFormulaOrNumber(formula: string) {\n        return !Tools.isBlank(formula) && (isFormulaString(formula) || !Number.isNaN(+formula));\n    }\n\n    override async isValidType(cellInfo: IValidatorCellInfo<CellValue>, formula: IFormulaResult, rule: IDataValidationRule) {\n        const { value: cellValue } = cellInfo;\n\n        return !Number.isNaN(getCellValueNumber(cellValue));\n    }\n\n    override transform(cellInfo: IValidatorCellInfo<CellValue>, formula: IFormulaResult, rule: IDataValidationRule) {\n        const { value: cellValue } = cellInfo;\n\n        return {\n            ...cellInfo,\n            value: getCellValueNumber(cellValue),\n        };\n    }\n\n    private _parseNumber(formula: Nullable<string | number | boolean>) {\n        if (formula === undefined || formula === null) {\n            return Number.NaN;\n        }\n\n        return +formula;\n    }\n\n    async parseFormula(rule: IDataValidationRule, unitId: string, subUnitId: string, row: number, column: number): Promise<IFormulaResult> {\n        const formulaResult1 = await this._customFormulaService.getCellFormulaValue(unitId, subUnitId, rule.uid, row, column);\n        const formulaResult2 = await this._customFormulaService.getCellFormula2Value(unitId, subUnitId, rule.uid, row, column);\n        const { formula1, formula2 } = rule;\n\n        const isFormulaValid = isLegalFormulaResult(String(formulaResult1?.v)) && isLegalFormulaResult(String(formulaResult2?.v));\n        const info = {\n            formula1: this._parseNumber(isFormulaString(formula1) ? formulaResult1?.v : formula1),\n            formula2: this._parseNumber(isFormulaString(formula2) ? formulaResult2?.v : formula2),\n            isFormulaValid,\n        };\n\n        return info;\n    }\n\n    override validatorFormula(rule: IDataValidationRule, unitId: string, subUnitId: string): IFormulaValidResult {\n        const operator = rule.operator;\n        if (!operator) {\n            return {\n                success: false,\n            };\n        }\n        const formula1Success = Tools.isDefine(rule.formula1) && this._isFormulaOrNumber(rule.formula1);\n        const formula2Success = Tools.isDefine(rule.formula2) && this._isFormulaOrNumber(rule.formula2);\n        const isTwoFormula = TWO_FORMULA_OPERATOR_COUNT.includes(operator);\n        const errorMsg = this.localeService.t('dataValidation.validFail.number');\n        if (isTwoFormula) {\n            return {\n                success: formula1Success && formula2Success,\n                formula1: formula1Success ? undefined : errorMsg,\n                formula2: formula2Success ? undefined : errorMsg,\n            };\n        }\n\n        return {\n            success: formula1Success,\n            formula1: formula1Success ? '' : errorMsg,\n        };\n    }\n\n    override generateRuleErrorMessage(rule: IDataValidationRuleBase, position: ISheetLocationBase) {\n        if (!rule.operator) {\n            return this.titleStr;\n        }\n\n        const { transformedFormula1, transformedFormula2 } = getTransformedFormula(this._lexerTreeBuilder, rule as ISheetDataValidationRule, position);\n        const errorMsg = this.localeService.t(OperatorErrorTitleMap[rule.operator]).replace(FORMULA1, transformedFormula1 ?? '').replace(FORMULA2, transformedFormula2 ?? '');\n        return `${errorMsg}`;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CellValue, DataValidationOperator, ICellData, IDataValidationRule, IRange, ISheetDataValidationRule, IStyleData, Nullable, Workbook } from '@univerjs/core';\nimport type { IFormulaResult, IFormulaValidResult, IValidatorCellInfo } from '@univerjs/data-validation';\nimport { DataValidationRenderMode, DataValidationType, isFormulaString, IUniverInstanceService, numfmt, Rectangle, Tools, UniverInstanceType, WrapStrategy } from '@univerjs/core';\nimport { BaseDataValidator } from '@univerjs/data-validation';\nimport { deserializeRangeWithSheet, isReferenceString, LexerTreeBuilder, sequenceNodeType } from '@univerjs/engine-formula';\nimport { DataValidationFormulaService } from '../services/dv-formula.service';\nimport { getFormulaResult, isLegalFormulaResult } from '../utils/formula';\nimport { getCellValueOrigin } from '../utils/get-cell-data-origin';\nimport { deserializeListOptions } from './util';\n\nexport function getRuleFormulaResultSet(result: Nullable<Nullable<ICellData>[][]>) {\n    if (!result) {\n        return [];\n    }\n    const resultSet = new Set<string>();\n    result.forEach(\n        (row) => {\n            row.forEach((cell) => {\n                const value = getCellValueOrigin(cell);\n                if (value !== null && value !== undefined) {\n                    if (typeof value !== 'string' && typeof cell?.s === 'object' && cell.s?.n?.pattern) {\n                        resultSet.add(numfmt.format(cell.s.n.pattern, value, { throws: false }));\n                        return;\n                    }\n\n                    if (isLegalFormulaResult(value.toString())) {\n                        resultSet.add(value.toString());\n                    }\n                }\n            });\n        }\n    );\n\n    return [...resultSet];\n}\n\nconst supportedFormula = [\n    'if',\n    'indirect',\n    'choose',\n    'offset',\n];\n\n// 1. must have REFERENCE or DEFINED_NAME node.\n// 2. only support some formula\nexport function isValidListFormula(formula: string, lexer: LexerTreeBuilder) {\n    if (!isFormulaString(formula)) {\n        return true;\n    }\n\n    const isRefString = isReferenceString(formula.slice(1));\n    if (isRefString) {\n        return true;\n    }\n\n    const nodes = lexer.sequenceNodesBuilder(formula);\n\n    return (nodes) && nodes.some((node) => typeof node === 'object' && node.nodeType === sequenceNodeType.FUNCTION && supportedFormula.indexOf(node.token.toLowerCase()) > -1);\n}\n\nfunction isRuleIntersects(rule: IDataValidationRule, sheetName: string) {\n    const { formula1 = '', ranges } = rule;\n    const isRefString = isReferenceString(formula1.slice(1));\n\n    if (isRefString) {\n        const refRange = deserializeRangeWithSheet(formula1.slice(1));\n        if ((!refRange.sheetName || refRange.sheetName === sheetName) && ranges.some((range: IRange) => Rectangle.intersects(range, refRange.range))) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport class ListValidator extends BaseDataValidator {\n    protected formulaService = this.injector.get(DataValidationFormulaService);\n    private _lexer = this.injector.get(LexerTreeBuilder);\n    private _univerInstanceService = this.injector.get(IUniverInstanceService);\n\n    override readonly offsetFormulaByRange = false;\n\n    id: string = DataValidationType.LIST;\n    title: string = 'dataValidation.list.title';\n    operators: DataValidationOperator[] = [];\n    scopes: string | string[] = ['sheet'];\n\n    override skipDefaultFontRender = (rule: ISheetDataValidationRule) => {\n        return rule.renderMode !== DataValidationRenderMode.TEXT;\n    };\n\n    override validatorFormula(rule: IDataValidationRule, unitId: string, subUnitId: string): IFormulaValidResult {\n        const success = !Tools.isBlank(rule.formula1);\n        const valid = isValidListFormula(rule.formula1 ?? '', this._lexer);\n        const sheetName = this._univerInstanceService.getUnit<Workbook>(unitId, UniverInstanceType.UNIVER_SHEET)?.getSheetBySheetId(subUnitId)?.getName();\n        const isIntersects = isRuleIntersects(rule, sheetName ?? '');\n\n        return {\n            success: Boolean(success && valid && !isIntersects),\n            formula1: success\n                ? valid\n                    ? !isIntersects ?\n                        undefined :\n                        this.localeService.t('dataValidation.validFail.listIntersects') :\n                    this.localeService.t('dataValidation.validFail.listInvalid')\n                : this.localeService.t('dataValidation.validFail.list'),\n        };\n    }\n\n    override getExtraStyle(rule: IDataValidationRule, value: Nullable<CellValue>, { style: defaultStyle }: { style: IStyleData }): Nullable<IStyleData> {\n        const tb = (defaultStyle.tb !== WrapStrategy.OVERFLOW ? defaultStyle.tb : WrapStrategy.CLIP) ?? WrapStrategy.WRAP;\n        if (rule.type === DataValidationType.LIST && (rule.renderMode === DataValidationRenderMode.ARROW || rule.renderMode === DataValidationRenderMode.TEXT)) {\n            const colorMap = this.getListWithColorMap(rule);\n            const valueStr = `${value ?? ''}`;\n            const color = colorMap[valueStr];\n            if (color) {\n                return {\n                    bg: {\n                        rgb: color,\n                    },\n                    tb,\n                };\n            }\n        }\n\n        return {\n            tb,\n        };\n    }\n\n    parseCellValue(cellValue: CellValue) {\n        const cellString = cellValue.toString();\n        return deserializeListOptions(cellString);\n    }\n\n    override async parseFormula(rule: IDataValidationRule, unitId: string, subUnitId: string): Promise<IFormulaResult<number | undefined>> {\n        const results = await this.formulaService.getRuleFormulaResult(unitId, subUnitId, rule.uid);\n        const formulaResult1 = getFormulaResult(results?.[0]?.result?.[0][0]);\n        const isFormulaValid = isLegalFormulaResult(String(formulaResult1));\n\n        return {\n            formula1: undefined,\n            formula2: undefined,\n            isFormulaValid,\n        };\n    }\n\n    override async isValidType(cellInfo: IValidatorCellInfo<Nullable<CellValue>>, formula: IFormulaResult<string[] | undefined>, rule: IDataValidationRule): Promise<boolean> {\n        const { value, unitId, subUnitId } = cellInfo;\n        const { formula1 = '' } = rule;\n        const results = await this.formulaService.getRuleFormulaResult(unitId, subUnitId, rule.uid);\n        const formula1Result = isFormulaString(formula1) ? getRuleFormulaResultSet(results?.[0]?.result?.[0][0]) : deserializeListOptions(formula1);\n        const selected = this.parseCellValue(value!);\n        return selected.every((i) => formula1Result.includes(i));\n    }\n\n    override generateRuleName() {\n        return this.localeService.t('dataValidation.list.name');\n    }\n\n    override generateRuleErrorMessage(): string {\n        return this.localeService.t('dataValidation.list.error');\n    }\n\n    getList(rule: IDataValidationRule, currentUnitId?: string, currentSubUnitId?: string) {\n        const { formula1 = '' } = rule;\n        const univerInstanceService = this.injector.get(IUniverInstanceService);\n        const workbook = (currentUnitId ? univerInstanceService.getUniverSheetInstance(currentUnitId) : undefined) ?? univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET);\n        if (!workbook) return [];\n\n        const worksheet = (currentSubUnitId ? workbook.getSheetBySheetId(currentSubUnitId) : undefined) ?? workbook.getActiveSheet();\n        if (!worksheet) return [];\n\n        const unitId = workbook.getUnitId();\n        const subUnitId = worksheet.getSheetId();\n        const results = this.formulaService.getRuleFormulaResultSync(unitId, subUnitId, rule.uid);\n        return isFormulaString(formula1) ? getRuleFormulaResultSet(results?.[0]?.result?.[0][0]) : deserializeListOptions(formula1);\n    }\n\n    async getListAsync(rule: IDataValidationRule, currentUnitId?: string, currentSubUnitId?: string) {\n        const { formula1 = '' } = rule;\n        const univerInstanceService = this.injector.get(IUniverInstanceService);\n        const workbook = (currentUnitId ? univerInstanceService.getUniverSheetInstance(currentUnitId) : undefined) ?? univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET);\n        if (!workbook) return [];\n\n        const worksheet = (currentSubUnitId ? workbook.getSheetBySheetId(currentSubUnitId) : undefined) ?? workbook.getActiveSheet();\n        if (!worksheet) return [];\n\n        const unitId = workbook.getUnitId();\n        const subUnitId = worksheet.getSheetId();\n        const results = await this.formulaService.getRuleFormulaResult(unitId, subUnitId, rule.uid);\n        return isFormulaString(formula1) ? getRuleFormulaResultSet(results?.[0]?.result?.[0][0]) : deserializeListOptions(formula1);\n    }\n\n    getListWithColor(rule: IDataValidationRule, currentUnitId?: string, currentSubUnitId?: string) {\n        const list = this.getList(rule, currentUnitId, currentSubUnitId);\n        const colorList = (rule.formula2 || '').split(',');\n\n        return list.map((label, i) => ({ label, color: colorList[i] }));\n    }\n\n    getListWithColorMap(rule: IDataValidationRule, currentUnitId?: string, currentSubUnitId?: string) {\n        const list = this.getListWithColor(rule, currentUnitId, currentSubUnitId);\n        const map: Record<string, string> = {};\n\n        list.forEach((item) => {\n            if (item.color) {\n                map[item.label] = item.color;\n            }\n        });\n        return map;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CellValue, IDataValidationRule, IDataValidationRuleBase, ISheetDataValidationRule, Nullable } from '@univerjs/core';\nimport type { IFormulaResult, IFormulaValidResult, IValidatorCellInfo } from '@univerjs/data-validation';\nimport type { ISheetLocationBase } from '@univerjs/sheets';\nimport { DataValidationOperator, DataValidationType, isFormulaString, Tools } from '@univerjs/core';\nimport { BaseDataValidator, TextLengthErrorTitleMap } from '@univerjs/data-validation';\nimport { LexerTreeBuilder } from '@univerjs/engine-formula';\nimport { DataValidationCustomFormulaService } from '../services/dv-custom-formula.service';\nimport { TWO_FORMULA_OPERATOR_COUNT } from '../types/const/two-formula-operators';\nimport { isLegalFormulaResult } from '../utils/formula';\nimport { FORMULA1, FORMULA2 } from './const';\nimport { getTransformedFormula } from './util';\n\nexport class TextLengthValidator extends BaseDataValidator {\n    id: string = DataValidationType.TEXT_LENGTH;\n    title: string = 'dataValidation.textLength.title';\n    private readonly _lexerTreeBuilder = this.injector.get(LexerTreeBuilder);\n\n    operators: DataValidationOperator[] = [\n        DataValidationOperator.BETWEEN,\n        DataValidationOperator.EQUAL,\n        DataValidationOperator.GREATER_THAN,\n        DataValidationOperator.GREATER_THAN_OR_EQUAL,\n        DataValidationOperator.LESS_THAN,\n        DataValidationOperator.LESS_THAN_OR_EQUAL,\n        DataValidationOperator.NOT_BETWEEN,\n        DataValidationOperator.NOT_EQUAL,\n    ];\n\n    scopes: string | string[] = ['sheet'];\n\n    private readonly _customFormulaService = this.injector.get(DataValidationCustomFormulaService);\n\n    private _isFormulaOrInt(formula: string) {\n        return !Tools.isBlank(formula) && (isFormulaString(formula) || (!Number.isNaN(+formula) && Number.isInteger(+formula)));\n    }\n\n    override validatorFormula(rule: IDataValidationRule, _unitId: string, _subUnitId: string): IFormulaValidResult {\n        const operator = rule.operator;\n        if (!operator) {\n            return {\n                success: false,\n            };\n        }\n        const formula1Success = Tools.isDefine(rule.formula1) && this._isFormulaOrInt(rule.formula1);\n        const formula2Success = Tools.isDefine(rule.formula2) && this._isFormulaOrInt(rule.formula2);\n        const isTwoFormula = TWO_FORMULA_OPERATOR_COUNT.includes(operator);\n        const errorMsg = this.localeService.t('dataValidation.validFail.number');\n        if (isTwoFormula) {\n            return {\n                success: formula1Success && formula2Success,\n                formula1: formula1Success ? undefined : errorMsg,\n                formula2: formula2Success ? undefined : errorMsg,\n            };\n        }\n\n        return {\n            success: formula1Success,\n            formula1: errorMsg,\n        };\n    }\n\n    private _parseNumber(formula: Nullable<string | number | boolean>) {\n        if (formula === undefined || formula === null) {\n            return Number.NaN;\n        }\n\n        return +formula;\n    }\n\n    override async parseFormula(rule: IDataValidationRule, unitId: string, subUnitId: string, row: number, column: number): Promise<IFormulaResult<number | undefined>> {\n        const formulaResult1 = await this._customFormulaService.getCellFormulaValue(unitId, subUnitId, rule.uid, row, column);\n        const formulaResult2 = await this._customFormulaService.getCellFormula2Value(unitId, subUnitId, rule.uid, row, column);\n        const { formula1, formula2 } = rule;\n\n        const isFormulaValid = isLegalFormulaResult(String(formulaResult1?.v)) && isLegalFormulaResult(String(formulaResult2?.v));\n\n        return {\n            formula1: this._parseNumber(isFormulaString(formula1) ? formulaResult1?.v : formula1),\n            formula2: this._parseNumber(isFormulaString(formula2) ? formulaResult2?.v : formula2),\n            isFormulaValid,\n        };\n    }\n\n    override transform(cellInfo: IValidatorCellInfo<CellValue>, _formula: IFormulaResult, _rule: IDataValidationRule) {\n        return {\n            ...cellInfo,\n            value: cellInfo.value.toString().length,\n        };\n    }\n\n    override async isValidType(cellInfo: IValidatorCellInfo<number>, _formula: IFormulaResult, _rule: IDataValidationRule) {\n        const { value: cellValue } = cellInfo;\n        return typeof cellValue === 'string' || typeof cellValue === 'number';\n    }\n\n    override generateRuleErrorMessage(rule: IDataValidationRuleBase, pos: ISheetLocationBase) {\n        if (!rule.operator) {\n            return this.titleStr;\n        }\n\n        const { transformedFormula1, transformedFormula2 } = getTransformedFormula(this._lexerTreeBuilder, rule as ISheetDataValidationRule, pos);\n        const errorMsg = this.localeService.t(TextLengthErrorTitleMap[rule.operator]).replace(FORMULA1, transformedFormula1 ?? '').replace(FORMULA2, transformedFormula2 ?? '');\n        return `${errorMsg}`;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CellValue, IAccessor, ICellData, ICommand, IDataValidationRuleBase, IDataValidationRuleOptions, IMutationInfo, Injector, IRange, ISheetDataValidationRule, Nullable } from '@univerjs/core';\nimport type { DataValidationChangeSource, IAddDataValidationMutationParams, IRemoveDataValidationMutationParams, IUpdateDataValidationMutationParams } from '@univerjs/data-validation';\nimport type { ISetRangeValuesMutationParams, ISheetCommandSharedParams } from '@univerjs/sheets';\nimport type { RangeMutation } from '../../models/rule-matrix';\nimport { CommandType, DataValidationType, ICommandService, isFormulaString, isRangesEqual, IUndoRedoService, IUniverInstanceService, ObjectMatrix, Range, sequenceExecute, Tools } from '@univerjs/core';\nimport { AddDataValidationMutation, DataValidatorRegistryService, getRuleOptions, getRuleSetting, RemoveDataValidationMutation, UpdateDataValidationMutation, UpdateRuleType } from '@univerjs/data-validation';\nimport { LexerTreeBuilder } from '@univerjs/engine-formula';\nimport { getSheetCommandTarget, SetRangeValuesMutation, SetRangeValuesUndoMutationFactory } from '@univerjs/sheets';\nimport { SheetDataValidationModel } from '../../models/sheet-data-validation-model';\nimport { shouldOffsetFormulaByRange } from '../../utils/formula';\nimport { getStringCellValue } from '../../utils/get-cell-data-origin';\nimport { CHECKBOX_FORMULA_1, CHECKBOX_FORMULA_2, type CheckboxValidator } from '../../validators';\n\nexport interface IUpdateSheetDataValidationRangeCommandParams {\n    unitId: string;\n    subUnitId: string;\n    ruleId: string;\n    ranges: IRange[];\n}\n\nfunction isBlankCell(cellData: Nullable<ICellData>) {\n    if (!cellData) {\n        return true;\n    }\n\n    if (!cellData.p) {\n        return Tools.isBlank(cellData.v);\n    }\n\n    const dataStream = (cellData.p.body?.dataStream ?? '').slice(0, -2).trim();\n    return !dataStream;\n}\n\n// eslint-disable-next-line max-lines-per-function\nexport function getDataValidationDiffMutations(\n    unitId: string,\n    subUnitId: string,\n    diffs: RangeMutation[],\n    accessor: IAccessor,\n    source: DataValidationChangeSource = 'command',\n    fillDefaultValue = true\n) {\n    const lexerTreeBuilder = accessor.get(LexerTreeBuilder);\n    const validatorRegistryService = accessor.get(DataValidatorRegistryService);\n    const redoMutations: IMutationInfo[] = [];\n    const undoMutations: IMutationInfo[] = [];\n    const sheetDataValidationModel = accessor.get(SheetDataValidationModel);\n    const univerInstanceService = accessor.get(IUniverInstanceService);\n    const target = getSheetCommandTarget(univerInstanceService, { unitId, subUnitId });\n    if (!target) {\n        return {\n            redoMutations,\n            undoMutations,\n        };\n    }\n    const { worksheet } = target;\n    const redoMatrix = new ObjectMatrix<ICellData>();\n    let setRangeValue = false;\n    function setRangesDefaultValue(ranges: IRange[], defaultValue: CellValue) {\n        if (!fillDefaultValue) {\n            return;\n        }\n        ranges.forEach((range) => {\n            Range.foreach(range, (row, column) => {\n                const cellData = worksheet.getCellRaw(row, column);\n                const value = getStringCellValue(cellData);\n                if ((isBlankCell(cellData) || value === defaultValue) && !cellData?.p) {\n                    setRangeValue = true;\n                    redoMatrix.setValue(row, column, {\n                        v: defaultValue,\n                        p: null,\n                    });\n                }\n            });\n        });\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    diffs.forEach((diff) => {\n        switch (diff.type) {\n            case 'delete':\n                redoMutations.push({\n                    id: RemoveDataValidationMutation.id,\n                    params: {\n                        unitId,\n                        subUnitId,\n                        ruleId: diff.rule.uid,\n                        source,\n                    },\n                });\n                undoMutations.unshift({\n                    id: AddDataValidationMutation.id,\n                    params: {\n                        unitId,\n                        subUnitId,\n                        rule: diff.rule,\n                        index: diff.index,\n                        source,\n                    },\n                });\n                break;\n            case 'update': {\n                if (shouldOffsetFormulaByRange(diff.rule.type, validatorRegistryService)) {\n                    const originRow = diff.oldRanges[0].startRow;\n                    const originColumn = diff.oldRanges[0].startColumn;\n                    const newRow = diff.newRanges[0].startRow;\n                    const newColumn = diff.newRanges[0].startColumn;\n                    const rowDiff = newRow - originRow;\n                    const columnDiff = newColumn - originColumn;\n                    const newFormula = isFormulaString(diff.rule.formula1!) ? lexerTreeBuilder.moveFormulaRefOffset(diff.rule.formula1!, columnDiff, rowDiff) : diff.rule.formula1;\n                    const newFormula2 = isFormulaString(diff.rule.formula2!) ? lexerTreeBuilder.moveFormulaRefOffset(diff.rule.formula2!, columnDiff, rowDiff) : diff.rule.formula2;\n\n                    if (newFormula !== diff.rule.formula1 || newFormula2 !== diff.rule.formula2 || !isRangesEqual(diff.newRanges, diff.oldRanges)) {\n                        redoMutations.push({\n                            id: UpdateDataValidationMutation.id,\n                            params: {\n                                unitId,\n                                subUnitId,\n                                ruleId: diff.ruleId,\n                                payload: {\n                                    type: UpdateRuleType.ALL,\n                                    payload: {\n                                        formula1: newFormula,\n                                        formula2: newFormula2,\n                                        ranges: diff.newRanges,\n                                    },\n                                },\n                            } as IUpdateDataValidationMutationParams,\n                        });\n\n                        undoMutations.unshift({\n                            id: UpdateDataValidationMutation.id,\n                            params: {\n                                unitId,\n                                subUnitId,\n                                ruleId: diff.ruleId,\n                                payload: {\n                                    type: UpdateRuleType.ALL,\n                                    payload: {\n                                        formula1: diff.rule.formula1,\n                                        formula2: diff.rule.formula2,\n                                        ranges: diff.oldRanges,\n                                    },\n                                },\n                            } as IUpdateDataValidationMutationParams,\n                        });\n                    } else {\n                        redoMutations.push({\n                            id: UpdateDataValidationMutation.id,\n                            params: {\n                                unitId,\n                                subUnitId,\n                                ruleId: diff.ruleId,\n                                payload: {\n                                    type: UpdateRuleType.RANGE,\n                                    payload: diff.newRanges,\n                                },\n                                source,\n                            } as IUpdateDataValidationMutationParams,\n                        });\n\n                        undoMutations.unshift({\n                            id: UpdateDataValidationMutation.id,\n                            params: {\n                                unitId,\n                                subUnitId,\n                                ruleId: diff.ruleId,\n                                payload: {\n                                    type: UpdateRuleType.RANGE,\n                                    payload: diff.oldRanges,\n                                },\n                                source,\n                            } as IUpdateDataValidationMutationParams,\n                        });\n                    }\n                } else {\n                    redoMutations.push({\n                        id: UpdateDataValidationMutation.id,\n                        params: {\n                            unitId,\n                            subUnitId,\n                            ruleId: diff.ruleId,\n                            payload: {\n                                type: UpdateRuleType.RANGE,\n                                payload: diff.newRanges,\n                            },\n                            source,\n                        } as IUpdateDataValidationMutationParams,\n                    });\n\n                    undoMutations.unshift({\n                        id: UpdateDataValidationMutation.id,\n                        params: {\n                            unitId,\n                            subUnitId,\n                            ruleId: diff.ruleId,\n                            payload: {\n                                type: UpdateRuleType.RANGE,\n                                payload: diff.oldRanges,\n                            },\n                            source,\n                        } as IUpdateDataValidationMutationParams,\n                    });\n                }\n\n                const rule = sheetDataValidationModel.getRuleById(unitId, subUnitId, diff.ruleId);\n                if (rule && rule.type === DataValidationType.CHECKBOX) {\n                    const validator = sheetDataValidationModel.getValidator(DataValidationType.CHECKBOX) as CheckboxValidator;\n                    const formula = validator.parseFormulaSync(rule, unitId, subUnitId);\n                    setRangesDefaultValue(diff.newRanges, formula.formula2!);\n                }\n                break;\n            }\n            case 'add': {\n                redoMutations.push({\n                    id: AddDataValidationMutation.id,\n                    params: {\n                        unitId,\n                        subUnitId,\n                        rule: diff.rule,\n                        source,\n                    } as IAddDataValidationMutationParams,\n                });\n                undoMutations.unshift({\n                    id: RemoveDataValidationMutation.id,\n                    params: {\n                        unitId,\n                        subUnitId,\n                        ruleId: diff.rule.uid,\n                        source,\n                    },\n                });\n                if (diff.rule.type === DataValidationType.CHECKBOX) {\n                    const validator = sheetDataValidationModel.getValidator(DataValidationType.CHECKBOX) as CheckboxValidator;\n                    const formula = validator.parseFormulaSync(diff.rule, unitId, subUnitId);\n                    setRangesDefaultValue(diff.rule.ranges, formula.originFormula2!);\n                }\n                break;\n            }\n            default:\n                break;\n        }\n    });\n\n    if (setRangeValue) {\n        const redoSetRangeValues = {\n            id: SetRangeValuesMutation.id,\n            params: {\n                unitId,\n                subUnitId,\n                cellValue: redoMatrix.getData(),\n            } as ISetRangeValuesMutationParams,\n        };\n\n        const undoSetRangeValues = {\n            id: SetRangeValuesMutation.id,\n            params: SetRangeValuesUndoMutationFactory(accessor, redoSetRangeValues.params),\n        };\n\n        redoMutations.push(redoSetRangeValues);\n        undoMutations.push(undoSetRangeValues);\n    }\n\n    return {\n        redoMutations,\n        undoMutations,\n    };\n}\n\nexport const UpdateSheetDataValidationRangeCommand: ICommand<IUpdateSheetDataValidationRangeCommandParams> = {\n    type: CommandType.COMMAND,\n    id: 'sheet.command.updateDataValidationRuleRange',\n    handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n        const { unitId, subUnitId, ranges, ruleId } = params;\n        const sheetDataValidationModel = accessor.get(SheetDataValidationModel);\n        const commandService = accessor.get(ICommandService);\n        const undoRedoService = accessor.get(IUndoRedoService);\n        const currentRule = sheetDataValidationModel.getRuleById(unitId, subUnitId, ruleId);\n        if (!currentRule) {\n            return false;\n        }\n        const matrix = sheetDataValidationModel.getRuleObjectMatrix(unitId, subUnitId).clone();\n        matrix.updateRange(ruleId, ranges);\n        const diffs = matrix.diff(sheetDataValidationModel.getRules(unitId, subUnitId));\n\n        const { redoMutations, undoMutations } = getDataValidationDiffMutations(unitId, subUnitId, diffs, accessor);\n\n        undoRedoService.pushUndoRedo({\n            undoMutations,\n            redoMutations,\n            unitID: unitId,\n        });\n        sequenceExecute(redoMutations, commandService);\n        return true;\n    },\n};\n\nexport interface IAddSheetDataValidationCommandParams {\n    unitId: string;\n    subUnitId: string;\n    rule: ISheetDataValidationRule;\n}\n\nexport const AddSheetDataValidationCommand: ICommand<IAddSheetDataValidationCommandParams> = {\n    type: CommandType.COMMAND,\n    id: 'sheet.command.addDataValidation',\n    handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n        const { unitId, subUnitId, rule } = params;\n        const sheetDataValidationModel = accessor.get(SheetDataValidationModel);\n        const commandService = accessor.get(ICommandService);\n        const undoRedoService = accessor.get(IUndoRedoService);\n\n        const matrix = sheetDataValidationModel.getRuleObjectMatrix(unitId, subUnitId).clone();\n        matrix.addRule(rule);\n        const diffs = matrix.diff(sheetDataValidationModel.getRules(unitId, subUnitId));\n        const validator = sheetDataValidationModel.getValidator(rule.type);\n\n        const mutationParams: IAddDataValidationMutationParams = {\n            unitId,\n            subUnitId,\n            rule: {\n                ...rule,\n                ...validator?.normalizeFormula(rule, unitId, subUnitId),\n            },\n        };\n\n        const { redoMutations, undoMutations } = getDataValidationDiffMutations(unitId, subUnitId, diffs, accessor);\n\n        redoMutations.push({\n            id: AddDataValidationMutation.id,\n            params: mutationParams,\n        });\n\n        undoMutations.unshift({\n            id: RemoveDataValidationMutation.id,\n            params: {\n                unitId,\n                subUnitId,\n                ruleId: rule.uid,\n            },\n        });\n\n        undoRedoService.pushUndoRedo({\n            unitID: unitId,\n            redoMutations,\n            undoMutations,\n        });\n\n        sequenceExecute(redoMutations, commandService);\n        return true;\n    },\n};\n\nexport interface IUpdateSheetDataValidationSettingCommandParams extends ISheetCommandSharedParams {\n    ruleId: string;\n    setting: IDataValidationRuleBase;\n}\n\nexport const UpdateSheetDataValidationSettingCommand: ICommand<IUpdateSheetDataValidationSettingCommandParams> = {\n    type: CommandType.COMMAND,\n    id: 'sheets.command.update-data-validation-setting',\n    // eslint-disable-next-line max-lines-per-function\n    handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n        const commandService = accessor.get(ICommandService);\n        const redoUndoService = accessor.get(IUndoRedoService);\n        const sheetDataValidationModel = accessor.get(SheetDataValidationModel);\n        const dataValidatorRegistryService = accessor.get(DataValidatorRegistryService);\n\n        const { unitId, subUnitId, ruleId, setting } = params;\n        const validator = dataValidatorRegistryService.getValidatorItem(setting.type);\n\n        if (!validator) {\n            return false;\n        }\n        const rule = sheetDataValidationModel.getRuleById(unitId, subUnitId, ruleId);\n        if (!rule) {\n            return false;\n        }\n\n        const newRule = { ...rule, ...setting };\n        if (!validator.validatorFormula(newRule, unitId, subUnitId).success) {\n            return false;\n        }\n\n        const mutationParams: IUpdateDataValidationMutationParams = {\n            unitId,\n            subUnitId,\n            ruleId,\n            payload: {\n                type: UpdateRuleType.SETTING,\n                payload: {\n                    ...setting,\n                    ...validator.normalizeFormula(newRule, unitId, subUnitId),\n                },\n            },\n        };\n\n        const redoMutations: IMutationInfo[] = [{\n            id: UpdateDataValidationMutation.id,\n            params: mutationParams,\n        }];\n        const undoMutationParams: IUpdateDataValidationMutationParams = {\n            unitId,\n            subUnitId,\n            ruleId,\n            payload: {\n                type: UpdateRuleType.SETTING,\n                payload: getRuleSetting(rule),\n            },\n        };\n        const undoMutations: IMutationInfo[] = [{\n            id: UpdateDataValidationMutation.id,\n            params: undoMutationParams,\n        }];\n\n        if (setting.type === DataValidationType.CHECKBOX) {\n            const ranges = rule.ranges as IRange[];\n            const univerInstanceService = accessor.get(IUniverInstanceService);\n            const target = getSheetCommandTarget(univerInstanceService, { unitId, subUnitId });\n            if (target) {\n                const redoMatrix = new ObjectMatrix<ICellData>();\n                const { worksheet } = target;\n                const { formula2: oldFormula2 = CHECKBOX_FORMULA_2, formula1: oldFormula1 = CHECKBOX_FORMULA_1 } = rule;\n                const { formula2 = CHECKBOX_FORMULA_2, formula1 = CHECKBOX_FORMULA_1 } = setting;\n                let setted = false;\n                ranges.forEach((range) => {\n                    Range.foreach(range, (row, column) => {\n                        const cellData = worksheet.getCellRaw(row, column);\n                        const value = getStringCellValue(cellData);\n                        if ((isBlankCell(cellData) || value === String(oldFormula2)) && !cellData?.p) {\n                            redoMatrix.setValue(row, column, {\n                                v: formula2,\n                                p: null,\n                            });\n                            setted = true;\n                        } else if (value === String(oldFormula1) && !cellData?.p) {\n                            redoMatrix.setValue(row, column, {\n                                v: formula1,\n                                p: null,\n                            });\n                            setted = true;\n                        }\n                    });\n                });\n\n                if (setted) {\n                    const redoSetRangeValues = {\n                        id: SetRangeValuesMutation.id,\n                        params: {\n                            unitId,\n                            subUnitId,\n                            cellValue: redoMatrix.getData(),\n                        } as ISetRangeValuesMutationParams,\n                    };\n\n                    const undoSetRangeValues = {\n                        id: SetRangeValuesMutation.id,\n                        params: SetRangeValuesUndoMutationFactory(accessor, redoSetRangeValues.params),\n                    };\n                    redoMutations.push(redoSetRangeValues);\n                    undoMutations.push(undoSetRangeValues);\n                }\n            }\n        }\n        const res = sequenceExecute(redoMutations, commandService);\n        if (res.result) {\n            redoUndoService.pushUndoRedo({\n                unitID: unitId,\n                redoMutations,\n                undoMutations,\n            });\n            return true;\n        }\n\n        return false;\n    },\n};\n\nexport interface IUpdateSheetDataValidationOptionsCommandParams extends ISheetCommandSharedParams {\n    ruleId: string;\n    options: IDataValidationRuleOptions;\n}\n\nexport const UpdateSheetDataValidationOptionsCommand: ICommand<IUpdateSheetDataValidationOptionsCommandParams> = {\n    type: CommandType.COMMAND,\n    id: 'sheets.command.update-data-validation-options',\n    handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n        const commandService = accessor.get(ICommandService);\n        const redoUndoService = accessor.get(IUndoRedoService);\n        const sheetDataValidationModel = accessor.get(SheetDataValidationModel);\n\n        const { unitId, subUnitId, ruleId, options } = params;\n\n        const rule = sheetDataValidationModel.getRuleById(unitId, subUnitId, ruleId);\n        if (!rule) {\n            return false;\n        }\n\n        const mutationParams: IUpdateDataValidationMutationParams = {\n            unitId,\n            subUnitId,\n            ruleId,\n            payload: {\n                type: UpdateRuleType.OPTIONS,\n                payload: options,\n            },\n        };\n\n        const redoMutations: IMutationInfo[] = [{\n            id: UpdateDataValidationMutation.id,\n            params: mutationParams,\n        }];\n        const undoMutationParams: IUpdateDataValidationMutationParams = {\n            unitId,\n            subUnitId,\n            ruleId,\n            payload: {\n                type: UpdateRuleType.OPTIONS,\n                payload: getRuleOptions(rule),\n            },\n        };\n        const undoMutations: IMutationInfo[] = [{\n            id: UpdateDataValidationMutation.id,\n            params: undoMutationParams,\n        }];\n\n        redoUndoService.pushUndoRedo({\n            unitID: unitId,\n            redoMutations,\n            undoMutations,\n        });\n\n        commandService.executeCommand(UpdateDataValidationMutation.id, mutationParams);\n        return true;\n    },\n};\n\nexport interface IClearRangeDataValidationCommandParams {\n    unitId: string;\n    subUnitId: string;\n    ranges: IRange[];\n}\n\nexport const ClearRangeDataValidationCommand: ICommand<IClearRangeDataValidationCommandParams> = {\n    type: CommandType.COMMAND,\n    id: 'sheets.command.clear-range-data-validation',\n    handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n        const { unitId, subUnitId, ranges } = params;\n        const commandService = accessor.get(ICommandService);\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        const target = getSheetCommandTarget(univerInstanceService, { unitId, subUnitId });\n        const sheetDataValidationModel = accessor.get(SheetDataValidationModel);\n\n        if (!target) return false;\n        const undoRedoService = accessor.get(IUndoRedoService);\n\n        const matrix = sheetDataValidationModel.getRuleObjectMatrix(unitId, subUnitId).clone();\n        matrix.removeRange(ranges);\n\n        const diffs = matrix.diff(sheetDataValidationModel.getRules(unitId, subUnitId));\n        const { redoMutations, undoMutations } = getDataValidationDiffMutations(unitId, subUnitId, diffs, accessor);\n\n        undoRedoService.pushUndoRedo({\n            unitID: unitId,\n            redoMutations,\n            undoMutations,\n        });\n\n        return sequenceExecute(redoMutations, commandService).result;\n    },\n};\n\nexport interface IRemoveSheetAllDataValidationCommandParams extends ISheetCommandSharedParams {\n}\n\nexport const RemoveSheetAllDataValidationCommand: ICommand<IRemoveSheetAllDataValidationCommandParams> = {\n    type: CommandType.COMMAND,\n    id: 'sheet.command.remove-all-data-validation',\n    handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n        const { unitId, subUnitId } = params;\n        const commandService = accessor.get(ICommandService);\n        const sheetDataValidationModel = accessor.get(SheetDataValidationModel);\n        const undoRedoService = accessor.get(IUndoRedoService);\n        const currentRules = [...sheetDataValidationModel.getRules(unitId, subUnitId)];\n\n        const redoParams: IRemoveDataValidationMutationParams = {\n            unitId,\n            subUnitId,\n            ruleId: currentRules.map((rule) => rule.uid),\n        };\n        const redoMutations: IMutationInfo[] = [{\n            id: RemoveDataValidationMutation.id,\n            params: redoParams,\n        }];\n\n        const undoMutations: IMutationInfo[] = [{\n            id: AddDataValidationMutation.id,\n            params: {\n                unitId,\n                subUnitId,\n                rule: currentRules,\n            },\n        }];\n\n        undoRedoService.pushUndoRedo({\n            redoMutations,\n            undoMutations,\n            unitID: unitId,\n        });\n\n        commandService.executeCommand(RemoveDataValidationMutation.id, redoParams);\n        return true;\n    },\n};\n\nexport interface IRemoveSheetDataValidationCommandParams extends ISheetCommandSharedParams {\n    ruleId: string;\n}\n\nexport const removeDataValidationUndoFactory = (accessor: Injector, redoParams: IRemoveDataValidationMutationParams) => {\n    const sheetDataValidationModel = accessor.get(SheetDataValidationModel);\n    const { unitId, subUnitId, ruleId, source } = redoParams;\n    if (Array.isArray(ruleId)) {\n        const rules = ruleId.map((id) => sheetDataValidationModel.getRuleById(unitId, subUnitId, id)).filter(Boolean) as ISheetDataValidationRule[];\n        return [{\n            id: AddDataValidationMutation.id,\n            params: {\n                unitId,\n                subUnitId,\n                rule: rules,\n                source,\n            } as IAddDataValidationMutationParams,\n        }];\n    }\n\n    const undoMutations: IMutationInfo[] = [{\n        id: AddDataValidationMutation.id,\n        params: {\n            unitId,\n            subUnitId,\n            rule: {\n                ...sheetDataValidationModel.getRuleById(unitId, subUnitId, ruleId),\n            },\n            index: sheetDataValidationModel.getRuleIndex(unitId, subUnitId, ruleId),\n        } as IAddDataValidationMutationParams,\n    }];\n\n    return undoMutations;\n};\n\nexport const RemoveSheetDataValidationCommand: ICommand<IRemoveSheetDataValidationCommandParams> = {\n    type: CommandType.COMMAND,\n    id: 'sheet.command.remove-data-validation-rule',\n    handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n        const { unitId, subUnitId, ruleId } = params;\n        const commandService = accessor.get(ICommandService);\n        const undoRedoService = accessor.get(IUndoRedoService);\n        const sheetDataValidationModel = accessor.get(SheetDataValidationModel);\n\n        const redoMutations: IMutationInfo[] = [{\n            id: RemoveDataValidationMutation.id,\n            params,\n        }];\n        const undoMutations: IMutationInfo[] = [{\n            id: AddDataValidationMutation.id,\n            params: {\n                unitId,\n                subUnitId,\n                rule: {\n                    ...sheetDataValidationModel.getRuleById(unitId, subUnitId, ruleId),\n                },\n                index: sheetDataValidationModel.getRuleIndex(unitId, subUnitId, ruleId),\n            } as IAddDataValidationMutationParams,\n        }];\n\n        undoRedoService.pushUndoRedo({\n            undoMutations,\n            redoMutations,\n            unitID: params.unitId,\n        });\n\n        commandService.executeCommand(RemoveDataValidationMutation.id, params);\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DATA_VALIDATION_PLUGIN_NAME = 'SHEET_DATA_VALIDATION_PLUGIN';\n\nexport const DROP_DOWN_COLORS = [];\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const SHEETS_DATA_VALIDATION_PLUGIN_CONFIG_KEY = 'sheets-data-validation.config';\n\nexport const configSymbol = Symbol(SHEETS_DATA_VALIDATION_PLUGIN_CONFIG_KEY);\n\nexport interface IUniverSheetsDataValidationConfig {\n}\n\nexport const defaultPluginConfig: IUniverSheetsDataValidationConfig = {};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, IMutationInfo, ISheetDataValidationRule } from '@univerjs/core';\nimport type { IUpdateDataValidationMutationParams } from '@univerjs/data-validation';\nimport { Disposable, generateRandomId, Inject, toDisposable } from '@univerjs/core';\nimport { AddDataValidationMutation, DataValidatorRegistryService, RemoveDataValidationMutation, UpdateDataValidationMutation, UpdateRuleType } from '@univerjs/data-validation';\nimport { FormulaRefRangeService } from '@univerjs/sheets-formula';\nimport { SheetDataValidationModel } from '../models/sheet-data-validation-model';\nimport { shouldOffsetFormulaByRange } from '../utils/formula';\n\nexport class DataValidationFormulaRefRangeController extends Disposable {\n    private _disposableMap: Map<string, IDisposable> = new Map();\n\n    constructor(\n        @Inject(SheetDataValidationModel) private _dataValidationModel: SheetDataValidationModel,\n        @Inject(FormulaRefRangeService) private _formulaRefRangeService: FormulaRefRangeService,\n        @Inject(DataValidatorRegistryService) private _validatorRegistryService: DataValidatorRegistryService\n    ) {\n        super();\n        this._initRefRange();\n    }\n\n    private _getIdWithUnitId(unitID: string, subUnitId: string, ruleId: string) {\n        return `${unitID}_${subUnitId}_${ruleId}`;\n    }\n\n    registerRule = (unitId: string, subUnitId: string, rule: ISheetDataValidationRule) => {\n        if (!shouldOffsetFormulaByRange(rule.type, this._validatorRegistryService)) {\n            return;\n        }\n\n        this.register(unitId, subUnitId, rule);\n    };\n\n    // eslint-disable-next-line max-lines-per-function\n    register(unitId: string, subUnitId: string, rule: ISheetDataValidationRule) {\n        const oldRanges = rule.ranges;\n        const oldFormula1 = rule.formula1;\n        const oldFormula2 = rule.formula2;\n        // eslint-disable-next-line max-lines-per-function\n        const disposable = this._formulaRefRangeService.registerRangeFormula(unitId, subUnitId, oldRanges, [oldFormula1 ?? '', oldFormula2 ?? ''], (res) => {\n            if (res.length === 0) {\n                return {\n                    undos: [{\n                        id: AddDataValidationMutation.id,\n                        params: {\n                            unitId,\n                            subUnitId,\n                            rule,\n                            source: 'patched',\n                        },\n                    }],\n                    redos: [{\n                        id: RemoveDataValidationMutation.id,\n                        params: {\n                            unitId,\n                            subUnitId,\n                            ruleId: rule.uid,\n                            source: 'patched',\n                        },\n                    }],\n                };\n            }\n            const redos: IMutationInfo[] = [];\n            const undos: IMutationInfo[] = [];\n            const first = res[0];\n            redos.push({\n                id: UpdateDataValidationMutation.id,\n                params: {\n                    unitId,\n                    subUnitId,\n                    ruleId: rule.uid,\n                    payload: {\n                        type: UpdateRuleType.ALL,\n                        payload: {\n                            ranges: first.ranges,\n                            formula1: first.formulas[0],\n                            formula2: first.formulas[1],\n                        },\n                    },\n                    source: 'patched',\n                } as IUpdateDataValidationMutationParams,\n            });\n            undos.push({\n                id: UpdateDataValidationMutation.id,\n                params: {\n                    unitId,\n                    subUnitId,\n                    ruleId: rule.uid,\n                    payload: {\n                        type: UpdateRuleType.ALL,\n                        payload: {\n                            ranges: oldRanges,\n                            formula1: oldFormula1,\n                            formula2: oldFormula2,\n                        },\n                    },\n                    source: 'patched',\n                },\n            });\n\n            for (let i = 1; i < res.length; i++) {\n                const item = res[i];\n                const id = generateRandomId();\n                redos.push({\n                    id: AddDataValidationMutation.id,\n                    params: {\n                        unitId,\n                        subUnitId,\n                        rule: {\n                            ...rule,\n                            uid: id,\n                            formula1: item.formulas[0],\n                            formula2: item.formulas[1],\n                            ranges: item.ranges,\n                        },\n                        source: 'patched',\n                    },\n                });\n                undos.push({\n                    id: RemoveDataValidationMutation.id,\n                    params: {\n                        unitId,\n                        subUnitId,\n                        ruleId: id,\n                        source: 'patched',\n                    },\n                });\n            }\n            return {\n                undos,\n                redos,\n            };\n        });\n        const id = this._getIdWithUnitId(unitId, subUnitId, rule.uid);\n        this._disposableMap.set(id, disposable);\n    };\n\n    private _initRefRange() {\n        const allRules = this._dataValidationModel.getAll();\n        for (const [unitId, subUnitMap] of allRules) {\n            for (const [subUnitId, rules] of subUnitMap) {\n                for (const rule of rules) {\n                    this.registerRule(unitId, subUnitId, rule);\n                }\n            }\n        }\n\n        this.disposeWithMe(\n            this._dataValidationModel.ruleChange$.subscribe((option) => {\n                const { unitId, subUnitId, rule } = option;\n                switch (option.type) {\n                    case 'add': {\n                        const rule = option.rule!;\n                        this.registerRule(option.unitId, option.subUnitId, rule);\n                        break;\n                    }\n                    case 'remove': {\n                        const disposeSet = this._disposableMap.get(this._getIdWithUnitId(unitId, subUnitId, rule!.uid));\n                        if (disposeSet) {\n                            disposeSet.dispose();\n                        }\n                        break;\n                    }\n                    case 'update': {\n                        const rule = option.rule!;\n                        const disposeSet = this._disposableMap.get(this._getIdWithUnitId(unitId, subUnitId, rule!.uid));\n                        if (disposeSet) {\n                            disposeSet.dispose();\n                        }\n                        this.registerRule(option.unitId, option.subUnitId, rule);\n                        break;\n                    }\n                }\n            })\n        );\n\n        this.disposeWithMe(toDisposable(() => {\n            this._disposableMap.forEach((item) => {\n                item.dispose();\n            });\n            this._disposableMap.clear();\n        }));\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICellDataForSheetInterceptor, Nullable, Workbook, Worksheet } from '@univerjs/core';\nimport { Disposable, Inject, IPermissionService, IUniverInstanceService, UniverInstanceType } from '@univerjs/core';\nimport { deserializeRangeWithSheetWithCache, LexerTreeBuilder } from '@univerjs/engine-formula';\nimport { UnitAction } from '@univerjs/protocol';\nimport { type ICellPermission, WorksheetViewPermission } from '@univerjs/sheets';\n\nexport class DataValidationFormulaController extends Disposable {\n    constructor(\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @IPermissionService private readonly _permissionService: IPermissionService,\n        @Inject(LexerTreeBuilder) private readonly _lexerTreeBuilder: LexerTreeBuilder\n    ) {\n        super();\n    }\n\n    getFormulaRefCheck(formulaString: string) {\n        const sequenceNodes = this._lexerTreeBuilder.sequenceNodesBuilder(formulaString);\n        if (!sequenceNodes) {\n            return true;\n        }\n        for (let i = 0; i < sequenceNodes.length; i++) {\n            const node = sequenceNodes[i];\n            if (typeof node === 'string') {\n                continue;\n            }\n            const { token } = node;\n            const sequenceGrid = deserializeRangeWithSheetWithCache(token);\n            const workbook = this._univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET)!;\n            let targetSheet: Nullable<Worksheet> = workbook.getActiveSheet();\n            const unitId = workbook.getUnitId();\n            if (sequenceGrid.sheetName) {\n                targetSheet = workbook.getSheetBySheetName(sequenceGrid.sheetName);\n                if (!targetSheet) {\n                    return false;\n                }\n                const subUnitId = targetSheet?.getSheetId();\n                const viewPermission = this._permissionService.getPermissionPoint(new WorksheetViewPermission(unitId, subUnitId).id);\n                if (!viewPermission) return false;\n            }\n            if (!targetSheet) {\n                return false;\n            }\n            const { startRow, endRow, startColumn, endColumn } = sequenceGrid.range;\n            for (let i = startRow; i <= endRow; i++) {\n                for (let j = startColumn; j <= endColumn; j++) {\n                    const permission = (targetSheet.getCell(i, j) as (ICellDataForSheetInterceptor & { selectionProtection: ICellPermission[] }))?.selectionProtection?.[0];\n                    if (permission?.[UnitAction.View] === false) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ISheetDataValidationRule } from '@univerjs/core';\nimport type { IRemoveDataValidationMutationParams, IUpdateDataValidationMutationParams } from '@univerjs/data-validation';\nimport type { EffectRefRangeParams } from '@univerjs/sheets';\nimport { Disposable, Inject, Injector, isRangesEqual, toDisposable } from '@univerjs/core';\nimport { DataValidatorRegistryService, RemoveDataValidationMutation, UpdateDataValidationMutation, UpdateRuleType } from '@univerjs/data-validation';\nimport { handleCommonDefaultRangeChangeWithEffectRefCommands, RefRangeService } from '@univerjs/sheets';\nimport { FormulaRefRangeService } from '@univerjs/sheets-formula';\nimport { removeDataValidationUndoFactory } from '../commands/commands/data-validation.command';\nimport { SheetDataValidationModel } from '../models/sheet-data-validation-model';\nimport { DataValidationFormulaService } from '../services/dv-formula.service';\nimport { shouldOffsetFormulaByRange } from '../utils/formula';\n\nexport class DataValidationRefRangeController extends Disposable {\n    private _disposableMap: Map<string, Set<() => void>> = new Map();\n\n    constructor(\n        @Inject(SheetDataValidationModel) private _dataValidationModel: SheetDataValidationModel,\n        @Inject(Injector) private _injector: Injector,\n        @Inject(RefRangeService) private _refRangeService: RefRangeService,\n        @Inject(DataValidationFormulaService) private _dataValidationFormulaService: DataValidationFormulaService,\n        @Inject(FormulaRefRangeService) private _formulaRefRangeService: FormulaRefRangeService,\n        @Inject(DataValidatorRegistryService) private _validatorRegistryService: DataValidatorRegistryService\n    ) {\n        super();\n        this._initRefRange();\n    }\n\n    private _getIdWithUnitId(unitID: string, subUnitId: string, ruleId: string) {\n        return `${unitID}_${subUnitId}_${ruleId}`;\n    }\n\n    registerRule = (unitId: string, subUnitId: string, rule: ISheetDataValidationRule) => {\n        if (shouldOffsetFormulaByRange(rule.type, this._validatorRegistryService)) {\n            return;\n        }\n        this.register(unitId, subUnitId, rule);\n        this.registerFormula(unitId, subUnitId, rule);\n    };\n\n    // eslint-disable-next-line max-lines-per-function\n    registerFormula(unitId: string, subUnitId: string, rule: ISheetDataValidationRule) {\n        const ruleId = rule.uid;\n        const id = this._getIdWithUnitId(unitId, subUnitId, ruleId);\n        const disposeSet = this._disposableMap.get(id) ?? new Set();\n        const handleFormulaChange = (type: 'formula1' | 'formula2', formulaString: string) => {\n            const oldRule = this._dataValidationModel.getRuleById(unitId, subUnitId, ruleId);\n            if (!oldRule) {\n                return { redos: [], undos: [] };\n            }\n            const oldFormula = oldRule[type];\n            if (!oldFormula || oldFormula === formulaString) {\n                return { redos: [], undos: [] };\n            }\n            const redoParams: IUpdateDataValidationMutationParams = {\n                unitId,\n                subUnitId,\n                ruleId: rule.uid,\n                payload: {\n                    type: UpdateRuleType.SETTING,\n                    payload: {\n                        type: oldRule.type,\n                        formula1: oldRule.formula1,\n                        formula2: oldRule.formula2,\n                        [type]: formulaString,\n                    },\n                },\n                source: 'patched',\n            };\n            const undoParams: IUpdateDataValidationMutationParams = {\n                unitId,\n                subUnitId,\n                ruleId: rule.uid,\n                payload: {\n                    type: UpdateRuleType.SETTING,\n                    payload: {\n                        type: oldRule.type,\n                        formula1: oldRule.formula1,\n                        formula2: oldRule.formula2,\n                    },\n                },\n                source: 'patched',\n            };\n            const redos = [\n                {\n                    id: UpdateDataValidationMutation.id,\n                    params: redoParams,\n                },\n            ];\n            const undos = [\n                {\n                    id: UpdateDataValidationMutation.id,\n                    params: undoParams,\n                },\n            ];\n            return { redos, undos };\n        };\n\n        const currentFormula = this._dataValidationFormulaService.getRuleFormulaInfo(unitId, subUnitId, ruleId);\n        if (currentFormula) {\n            const [formula1, formula2] = currentFormula;\n            if (formula1) {\n                const disposable = this._formulaRefRangeService.registerFormula(\n                    unitId,\n                    subUnitId,\n                    formula1.text,\n                    (newFormulaString) => handleFormulaChange('formula1', newFormulaString)\n                );\n                disposeSet.add(() => disposable.dispose());\n            }\n\n            if (formula2) {\n                const disposable = this._formulaRefRangeService.registerFormula(\n                    unitId,\n                    subUnitId,\n                    formula2.text,\n                    (newFormulaString) => handleFormulaChange('formula2', newFormulaString)\n                );\n                disposeSet.add(() => disposable.dispose());\n            }\n        }\n    }\n\n    register(unitId: string, subUnitId: string, rule: ISheetDataValidationRule) {\n        const handleRangeChange = (commandInfo: EffectRefRangeParams) => {\n            const oldRanges = [...rule.ranges];\n            const resultRangesOrigin = oldRanges.map((range) => {\n                return handleCommonDefaultRangeChangeWithEffectRefCommands(range, commandInfo);\n            }).filter((range) => !!range);\n            const resultRanges = resultRangesOrigin.flat();\n\n            const isEqual = isRangesEqual(resultRanges, oldRanges);\n            if (isEqual) {\n                return { redos: [], undos: [] };\n            }\n\n            if (resultRanges.length) {\n                const redoParams: IUpdateDataValidationMutationParams = {\n                    unitId,\n                    subUnitId,\n                    ruleId: rule.uid,\n                    payload: {\n                        type: UpdateRuleType.RANGE,\n                        payload: resultRanges,\n                    },\n                    source: 'patched',\n                };\n                // in ref-range case, there won't be any overlap about rule ranges\n                const redos = [{ id: UpdateDataValidationMutation.id, params: redoParams }];\n                const undos = [{\n                    id: UpdateDataValidationMutation.id,\n                    params: {\n                        unitId,\n                        subUnitId,\n                        ruleId: rule.uid,\n                        payload: {\n                            type: UpdateRuleType.RANGE,\n                            payload: oldRanges,\n                        },\n                        source: 'patched',\n                    },\n                }];\n                return { redos, undos };\n            } else {\n                const redoParams: IRemoveDataValidationMutationParams = { unitId, subUnitId, ruleId: rule.uid };\n                const redos = [{ id: RemoveDataValidationMutation.id, params: redoParams }];\n                const undos = removeDataValidationUndoFactory(this._injector, redoParams);\n                return { redos, undos };\n            }\n        };\n        const disposeList: (() => void)[] = [];\n\n        rule.ranges.forEach((range) => {\n            const disposable = this._refRangeService.registerRefRange(range, handleRangeChange, unitId, subUnitId);\n            disposeList.push(() => disposable.dispose());\n        });\n        const id = this._getIdWithUnitId(unitId, subUnitId, rule.uid);\n        const current = this._disposableMap.get(id) ?? new Set();\n        current.add(() => disposeList.forEach((dispose) => dispose()));\n        this._disposableMap.set(id, current);\n    };\n\n    private _initRefRange() {\n        const allRules = this._dataValidationModel.getAll();\n        for (const [unitId, subUnitMap] of allRules) {\n            for (const [subUnitId, rules] of subUnitMap) {\n                for (const rule of rules) {\n                    this.registerRule(unitId, subUnitId, rule);\n                }\n            }\n        }\n\n        this.disposeWithMe(\n            this._dataValidationModel.ruleChange$.subscribe((option) => {\n                const { unitId, subUnitId, rule } = option;\n                switch (option.type) {\n                    case 'add': {\n                        const rule = option.rule!;\n                        this.registerRule(option.unitId, option.subUnitId, rule);\n                        break;\n                    }\n                    case 'remove': {\n                        const disposeSet = this._disposableMap.get(this._getIdWithUnitId(unitId, subUnitId, rule!.uid));\n                        if (disposeSet) {\n                            disposeSet.forEach((dispose) => dispose());\n                        }\n                        break;\n                    }\n                    case 'update': {\n                        const rule = option.rule!;\n                        const disposeSet = this._disposableMap.get(this._getIdWithUnitId(unitId, subUnitId, rule!.uid));\n                        if (disposeSet) {\n                            disposeSet.forEach((dispose) => dispose());\n                        }\n                        this.registerRule(option.unitId, option.subUnitId, rule);\n                        break;\n                    }\n                }\n            })\n        );\n\n        this.disposeWithMe(toDisposable(() => {\n            this._disposableMap.forEach((item) => {\n                item.forEach((dispose) => dispose());\n            });\n            this._disposableMap.clear();\n        }));\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Workbook } from '@univerjs/core';\nimport type { IAddDataValidationMutationParams, IRemoveDataValidationMutationParams } from '@univerjs/data-validation';\nimport type { IRemoveSheetCommandParams } from '@univerjs/sheets';\nimport { Disposable, Inject, IUniverInstanceService, UniverInstanceType } from '@univerjs/core';\nimport { AddDataValidationMutation, RemoveDataValidationMutation } from '@univerjs/data-validation';\nimport { RemoveSheetCommand, SheetInterceptorService } from '@univerjs/sheets';\nimport { SheetDataValidationModel } from '../models/sheet-data-validation-model';\n\nexport class SheetDataValidationSheetController extends Disposable {\n    constructor(\n        @Inject(SheetInterceptorService) private _sheetInterceptorService: SheetInterceptorService,\n        @Inject(IUniverInstanceService) private _univerInstanceService: IUniverInstanceService,\n        @Inject(SheetDataValidationModel) private readonly _sheetDataValidationModel: SheetDataValidationModel\n    ) {\n        super();\n        this._initSheetChange();\n    }\n\n    private _initSheetChange() {\n        this.disposeWithMe(\n            this._sheetInterceptorService.interceptCommand({\n                getMutations: (commandInfo) => {\n                    if (commandInfo.id === RemoveSheetCommand.id) {\n                        const params = commandInfo.params as IRemoveSheetCommandParams;\n                        const unitId = params.unitId || this._univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET)!.getUnitId();\n                        const workbook = this._univerInstanceService.getUniverSheetInstance(unitId);\n                        if (!workbook) {\n                            return { redos: [], undos: [] };\n                        }\n                        const subUnitId = params.subUnitId || workbook.getActiveSheet()?.getSheetId();\n\n                        if (!subUnitId) {\n                            return { redos: [], undos: [] };\n                        }\n\n                        const rules = this._sheetDataValidationModel.getRules(unitId, subUnitId);\n\n                        if (rules.length === 0) {\n                            return { redos: [], undos: [] };\n                        }\n\n                        const ids = rules.map((i) => i.uid);\n                        const redoParams: IRemoveDataValidationMutationParams = {\n                            unitId,\n                            subUnitId,\n                            ruleId: ids,\n                            source: 'patched',\n                        };\n                        const undoParams: IAddDataValidationMutationParams = {\n                            unitId,\n                            subUnitId,\n                            rule: [...rules],\n                            source: 'patched',\n                        };\n\n                        return {\n                            redos: [{\n                                id: RemoveDataValidationMutation.id,\n                                params: redoParams,\n                            }],\n                            undos: [{\n                                id: AddDataValidationMutation.id,\n                                params: undoParams,\n                            }],\n                        };\n                    }\n                    return { redos: [], undos: [] };\n                },\n            })\n        );\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CellValue, DataValidationOperator, IDataValidationRule, IDataValidationRuleBase } from '@univerjs/core';\nimport type { IFormulaResult, IFormulaValidResult, IValidatorCellInfo } from '@univerjs/data-validation';\nimport { DataValidationType } from '@univerjs/core';\nimport { BaseDataValidator } from '@univerjs/data-validation';\n\nexport class AnyValidator extends BaseDataValidator {\n    override id: string = DataValidationType.ANY;\n    override title: string = 'dataValidation.any.title';\n    override operators: DataValidationOperator[] = [];\n    override scopes: string | string[] = ['sheet'];\n\n    override readonly offsetFormulaByRange = false;\n\n    override async parseFormula(rule: IDataValidationRule, unitId: string, subUnitId: string): Promise<IFormulaResult> {\n        return {\n            formula1: rule.formula1,\n            formula2: rule.formula2,\n            isFormulaValid: true,\n        };\n    }\n\n    override validatorFormula(rule: IDataValidationRule, unitId: string, subUnitId: string): IFormulaValidResult {\n        return {\n            success: true,\n        };\n    }\n\n    override async isValidType(cellInfo: IValidatorCellInfo<CellValue>, formula: IFormulaResult, rule: IDataValidationRule): Promise<boolean> {\n        return true;\n    }\n\n    override generateRuleErrorMessage(rule: IDataValidationRuleBase): string {\n        return this.localeService.t('dataValidation.any.error');\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CellValue, DataValidationOperator, IDataValidationRule, IDataValidationRuleBase } from '@univerjs/core';\nimport type { IFormulaResult, IFormulaValidResult, IValidatorCellInfo } from '@univerjs/data-validation';\nimport { CellValueType, DataValidationType, isFormulaString, Tools } from '@univerjs/core';\nimport { BaseDataValidator } from '@univerjs/data-validation';\nimport { LexerTreeBuilder, operatorToken } from '@univerjs/engine-formula';\nimport { DataValidationCustomFormulaService } from '../services/dv-custom-formula.service';\nimport { isLegalFormulaResult } from '../utils/formula';\n\nexport class CustomFormulaValidator extends BaseDataValidator {\n    override id: string = DataValidationType.CUSTOM;\n    override title: string = 'dataValidation.custom.title';\n    override operators: DataValidationOperator[] = [];\n    override scopes: string | string[] = ['sheet'];\n\n    private readonly _customFormulaService = this.injector.get(DataValidationCustomFormulaService);\n    private readonly _lexerTreeBuilder = this.injector.get(LexerTreeBuilder);\n\n    override validatorFormula(rule: IDataValidationRule, unitId: string, subUnitId: string): IFormulaValidResult {\n        const success = isFormulaString(rule.formula1);\n        const formulaText = rule.formula1 ?? '';\n        const result = this._lexerTreeBuilder.checkIfAddBracket(formulaText);\n        const valid = result === 0 && formulaText.startsWith(operatorToken.EQUALS);\n\n        return {\n            success: success && valid,\n            formula1: success && valid ? '' : this.localeService.t('dataValidation.validFail.formula'),\n        };\n    }\n\n    override async parseFormula(_rule: IDataValidationRule, _unitId: string, _subUnitId: string): Promise<IFormulaResult> {\n        return {\n            formula1: undefined,\n            formula2: undefined,\n            isFormulaValid: true,\n        };\n    }\n\n    override async isValidType(cellInfo: IValidatorCellInfo<CellValue>, _formula: IFormulaResult, _rule: IDataValidationRule): Promise<boolean> {\n        const { column, row, unitId, subUnitId } = cellInfo;\n        const cellData = await this._customFormulaService.getCellFormulaValue(unitId, subUnitId, _rule.uid, row, column);\n        const formulaResult = cellData?.v;\n\n        if (!isLegalFormulaResult(String(formulaResult))) {\n            return false;\n        }\n\n        if (Tools.isDefine(formulaResult) && formulaResult !== '') {\n            if (cellData!.t === CellValueType.BOOLEAN) {\n                return Boolean(formulaResult);\n            }\n\n            if (typeof formulaResult === 'boolean') {\n                return formulaResult;\n            }\n\n            if (typeof formulaResult === 'number') {\n                return Boolean(formulaResult);\n            }\n\n            if (typeof formulaResult === 'string') {\n                return isLegalFormulaResult(formulaResult);\n            }\n\n            return Boolean(formulaResult);\n        }\n\n        return false;\n    }\n\n    override generateRuleErrorMessage(rule: IDataValidationRuleBase): string {\n        return this.localeService.t('dataValidation.custom.error');\n    }\n\n    override generateRuleName(rule: IDataValidationRuleBase): string {\n        return (this.localeService.t('dataValidation.custom.ruleName')).replace('{FORMULA1}', rule.formula1 ?? '');\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataValidationType } from '@univerjs/core';\nimport { ListValidator } from './list-validator';\n\nexport class ListMultipleValidator extends ListValidator {\n    override id: string = DataValidationType.LIST_MULTIPLE;\n    override title: string = 'dataValidation.listMultiple.title';\n    override readonly offsetFormulaByRange = false;\n\n    override skipDefaultFontRender = () => {\n        return true;\n    };\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CellValue, IDataValidationRule, IDataValidationRuleBase, ISheetDataValidationRule, Nullable } from '@univerjs/core';\nimport type { IFormulaResult, IFormulaValidResult, IValidatorCellInfo } from '@univerjs/data-validation';\nimport type { ISheetLocationBase } from '@univerjs/sheets';\nimport { DataValidationOperator, DataValidationType, isFormulaString, Tools } from '@univerjs/core';\nimport { BaseDataValidator } from '@univerjs/data-validation';\nimport { LexerTreeBuilder } from '@univerjs/engine-formula';\nimport { DataValidationCustomFormulaService } from '../services/dv-custom-formula.service';\nimport { OperatorErrorTitleMap } from '../types';\nimport { TWO_FORMULA_OPERATOR_COUNT } from '../types/const/two-formula-operators';\nimport { isLegalFormulaResult } from '../utils/formula';\nimport { FORMULA1, FORMULA2 } from './const';\nimport { getCellValueNumber } from './decimal-validator';\nimport { getTransformedFormula } from './util';\n\nexport class WholeValidator extends BaseDataValidator {\n    private readonly _customFormulaService = this.injector.get(DataValidationCustomFormulaService);\n    private readonly _lexerTreeBuilder = this.injector.get(LexerTreeBuilder);\n\n    id: string = DataValidationType.WHOLE;\n    title: string = 'dataValidation.whole.title';\n\n    operators: DataValidationOperator[] = [\n        DataValidationOperator.BETWEEN,\n        DataValidationOperator.EQUAL,\n        DataValidationOperator.GREATER_THAN,\n        DataValidationOperator.GREATER_THAN_OR_EQUAL,\n        DataValidationOperator.LESS_THAN,\n        DataValidationOperator.LESS_THAN_OR_EQUAL,\n        DataValidationOperator.NOT_BETWEEN,\n        DataValidationOperator.NOT_EQUAL,\n    ];\n\n    scopes: string | string[] = ['sheet'];\n\n    private _isFormulaOrInt(formula: string) {\n        return !Tools.isBlank(formula) && (isFormulaString(formula) || (!Number.isNaN(+formula) && Number.isInteger(+formula)));\n    }\n\n    override async isValidType(cellInfo: IValidatorCellInfo<CellValue>, _formula: IFormulaResult, _rule: IDataValidationRule) {\n        const { value: cellValue } = cellInfo;\n        const num = getCellValueNumber(cellValue);\n        return !Number.isNaN(num) && Number.isInteger(num);\n    }\n\n    override transform(cellInfo: IValidatorCellInfo<CellValue>, _formula: IFormulaResult, _rule: IDataValidationRule) {\n        const { value: cellValue } = cellInfo;\n        return {\n            ...cellInfo,\n            value: getCellValueNumber(cellValue),\n        };\n    }\n\n    private _parseNumber(formula: Nullable<string | number | boolean>) {\n        if (formula === undefined || formula === null) {\n            return Number.NaN;\n        }\n\n        return +formula;\n    }\n\n    override async parseFormula(rule: IDataValidationRule, unitId: string, subUnitId: string, row: number, column: number): Promise<IFormulaResult> {\n        const res1 = await this._customFormulaService.getCellFormulaValue(unitId, subUnitId, rule.uid, row, column);\n        const res2 = await this._customFormulaService.getCellFormula2Value(unitId, subUnitId, rule.uid, row, column);\n        const { formula1, formula2 } = rule;\n\n        const formula1Result = isFormulaString(formula1) ? res1?.v : formula1;\n        const formula2Result = isFormulaString(formula2) ? res2?.v : formula2;\n        const isFormulaValid = isLegalFormulaResult(`${formula1Result}`) && isLegalFormulaResult(`${formula2Result}`);\n\n        const info = {\n            formula1: this._parseNumber(formula1Result),\n            formula2: this._parseNumber(formula2Result),\n            isFormulaValid,\n        };\n\n        return info;\n    }\n\n    override validatorFormula(rule: IDataValidationRuleBase, _unitId: string, _subUnitId: string): IFormulaValidResult {\n        const operator = rule.operator;\n        if (!operator) {\n            return {\n                success: false,\n            };\n        }\n        const formula1Success = Tools.isDefine(rule.formula1) && this._isFormulaOrInt(rule.formula1);\n        const formula2Success = Tools.isDefine(rule.formula2) && this._isFormulaOrInt(rule.formula2);\n        const isTwoFormula = TWO_FORMULA_OPERATOR_COUNT.includes(operator);\n        const errorMsg = this.localeService.t('dataValidation.validFail.number');\n        if (isTwoFormula) {\n            return {\n                success: formula1Success && formula2Success,\n                formula1: formula1Success ? undefined : errorMsg,\n                formula2: formula2Success ? undefined : errorMsg,\n            };\n        }\n\n        return {\n            success: formula1Success,\n            formula1: errorMsg,\n        };\n    }\n\n    override generateRuleErrorMessage(rule: IDataValidationRuleBase, position: ISheetLocationBase) {\n        if (!rule.operator) {\n            return this.titleStr;\n        }\n        const { transformedFormula1, transformedFormula2 } = getTransformedFormula(this._lexerTreeBuilder, rule as ISheetDataValidationRule, position);\n        const errorMsg = this.localeService.t(OperatorErrorTitleMap[rule.operator]).replace(FORMULA1, transformedFormula1 ?? '').replace(FORMULA2, transformedFormula2 ?? '');\n        return `${errorMsg}`;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Workbook } from '@univerjs/core';\nimport { Inject, Injector, IUniverInstanceService, RxDisposable, toDisposable, UniverInstanceType } from '@univerjs/core';\nimport { DataValidatorRegistryService } from '@univerjs/data-validation';\nimport { ClearSelectionAllCommand, SheetInterceptorService, SheetsSelectionsService } from '@univerjs/sheets';\nimport { getDataValidationDiffMutations } from '../commands/commands/data-validation.command';\nimport { SheetDataValidationModel } from '../models/sheet-data-validation-model';\nimport { CheckboxValidator, DateValidator, DecimalValidator, ListValidator, TextLengthValidator } from '../validators';\nimport { AnyValidator } from '../validators/any-validator';\nimport { CustomFormulaValidator } from '../validators/custom-validator';\nimport { ListMultipleValidator } from '../validators/list-multiple-validator';\nimport { WholeValidator } from '../validators/whole-validator';\n\nexport class DataValidationController extends RxDisposable {\n    constructor(\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @Inject(DataValidatorRegistryService) private readonly _dataValidatorRegistryService: DataValidatorRegistryService,\n        @Inject(Injector) private readonly _injector: Injector,\n        @Inject(SheetsSelectionsService) private _selectionManagerService: SheetsSelectionsService,\n        @Inject(SheetInterceptorService) private readonly _sheetInterceptorService: SheetInterceptorService,\n        @Inject(SheetDataValidationModel) private readonly _sheetDataValidationModel: SheetDataValidationModel\n    ) {\n        super();\n        this._init();\n    }\n\n    private _init() {\n        this._registerValidators();\n        this._initCommandInterceptor();\n    }\n\n    private _registerValidators(): void {\n        ([\n            AnyValidator,\n            DecimalValidator,\n            WholeValidator,\n            TextLengthValidator,\n            DateValidator,\n            CheckboxValidator,\n            ListValidator,\n            ListMultipleValidator,\n            CustomFormulaValidator,\n        ]).forEach((Validator) => {\n            const validator = this._injector.createInstance(Validator as typeof ListValidator);\n            this.disposeWithMe(this._dataValidatorRegistryService.register(validator));\n            this.disposeWithMe(toDisposable(() => this._injector.delete(Validator as typeof ListValidator)));\n        });\n    }\n\n    private _initCommandInterceptor() {\n        this._sheetInterceptorService.interceptCommand({\n            getMutations: (commandInfo) => {\n                if (commandInfo.id === ClearSelectionAllCommand.id) {\n                    const workbook = this._univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET)!;\n                    const unitId = workbook.getUnitId();\n                    const worksheet = workbook.getActiveSheet();\n                    if (!worksheet) {\n                        throw new Error('No active sheet found');\n                    }\n\n                    const subUnitId = worksheet.getSheetId();\n                    const selections = this._selectionManagerService.getCurrentSelections()?.map((s) => s.range);\n\n                    const ruleMatrix = this._sheetDataValidationModel.getRuleObjectMatrix(unitId, subUnitId).clone();\n\n                    if (selections) {\n                        ruleMatrix.removeRange(selections);\n                    }\n                    const diffs = ruleMatrix.diff(this._sheetDataValidationModel.getRules(unitId, subUnitId));\n                    const { redoMutations, undoMutations } = getDataValidationDiffMutations(unitId, subUnitId, diffs, this._injector, 'patched');\n\n                    return {\n                        undos: undoMutations,\n                        redos: redoMutations,\n                    };\n                }\n\n                return {\n                    undos: [],\n                    redos: [],\n                };\n            },\n        });\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDataValidationRule, IRange, Nullable, ObjectMatrix, Workbook, Worksheet } from '@univerjs/core';\nimport { bufferDebounceTime, DataValidationStatus, Disposable, Inject, IUniverInstanceService, LifecycleService, LifecycleStages, Range, Tools, UniverInstanceType } from '@univerjs/core';\nimport { bufferWhen, filter } from 'rxjs';\nimport { SheetDataValidationModel } from '../models/sheet-data-validation-model';\nimport { DataValidationCacheService } from './dv-cache.service';\n\nexport class SheetsDataValidationValidatorService extends Disposable {\n    constructor(\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @Inject(SheetDataValidationModel) private readonly _sheetDataValidationModel: SheetDataValidationModel,\n        @Inject(DataValidationCacheService) private readonly _dataValidationCacheService: DataValidationCacheService,\n        @Inject(LifecycleService) private readonly _lifecycleService: LifecycleService\n    ) {\n        super();\n        this._initRecalculate();\n    }\n\n    private _initRecalculate() {\n        const handleDirtyRanges = (ranges: { unitId: string; subUnitId: string; ranges: IRange[] }[]) => {\n            if (ranges.length === 0) {\n                return;\n            }\n\n            const workbook = this._univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET);\n            const worksheet = workbook?.getActiveSheet();\n\n            const map: Record<string, Record<string, IRange[]>> = {};\n\n            ranges.flat().forEach((range) => {\n                if (!map[range.unitId]) {\n                    map[range.unitId] = {};\n                }\n                if (!map[range.unitId][range.subUnitId]) {\n                    map[range.unitId][range.subUnitId] = [];\n                }\n                const workbook = this._univerInstanceService.getUnit<Workbook>(range.unitId, UniverInstanceType.UNIVER_SHEET);\n                const worksheet = workbook?.getSheetBySheetId(range.subUnitId);\n                if (!worksheet) {\n                    return;\n                }\n                map[range.unitId][range.subUnitId].push(...range.ranges.map((range) => Range.transformRange(range, worksheet)));\n            });\n\n            Object.entries(map).forEach(([unitId, subUnitMap]) => {\n                Object.entries(subUnitMap).forEach(([subUnitId, ranges]) => {\n                    if (workbook?.getUnitId() === unitId && worksheet?.getSheetId() === subUnitId) {\n                        this.validatorRanges(unitId, subUnitId, ranges);\n                    } else {\n                        requestIdleCallback(() => {\n                            this.validatorRanges(unitId, subUnitId, ranges);\n                        });\n                    }\n                });\n            });\n        };\n\n        this.disposeWithMe(this._dataValidationCacheService.dirtyRanges$.pipe(bufferWhen(() => this._lifecycleService.lifecycle$.pipe(filter((stage) => stage === LifecycleStages.Rendered)))).subscribe(handleDirtyRanges));\n        this.disposeWithMe(this._dataValidationCacheService.dirtyRanges$.pipe(filter(() => this._lifecycleService.stage >= LifecycleStages.Rendered), bufferDebounceTime(20)).subscribe(handleDirtyRanges));\n    }\n\n    private async _validatorByCell(workbook: Workbook, worksheet: Worksheet, row: number, col: number) {\n        const unitId = workbook.getUnitId();\n        const subUnitId = worksheet.getSheetId();\n        if (!Tools.isDefine(row) || !Tools.isDefine(col)) {\n            throw new Error(`row or col is not defined, row: ${row}, col: ${col}`);\n        }\n\n        const rule = this._sheetDataValidationModel.getRuleByLocation(unitId, subUnitId, row, col);\n        if (!rule) {\n            return DataValidationStatus.VALID;\n        }\n\n        return new Promise<DataValidationStatus>((resolve) => {\n            this._sheetDataValidationModel.validator(rule, { unitId, subUnitId, row, col, worksheet, workbook }, (status) => {\n                resolve(status);\n            });\n        });\n    }\n\n    async validatorCell(unitId: string, subUnitId: string, row: number, col: number) {\n        const workbook = this._univerInstanceService.getUnit<Workbook>(unitId, UniverInstanceType.UNIVER_SHEET);\n        if (!workbook) {\n            throw new Error(`cannot find current workbook, unitId: ${unitId}`);\n        }\n\n        const worksheet = workbook.getSheetBySheetId(subUnitId);\n        if (!worksheet) {\n            throw new Error(`cannot find current worksheet, sheetId: ${subUnitId}`);\n        }\n\n        return this._validatorByCell(workbook, worksheet, row, col);\n    }\n\n    validatorRanges(unitId: string, subUnitId: string, ranges: IRange[]) {\n        if (!ranges.length) {\n            return Promise.resolve([]);\n        }\n\n        const workbook = this._univerInstanceService.getUnit<Workbook>(unitId, UniverInstanceType.UNIVER_SHEET);\n        if (!workbook) {\n            throw new Error(`cannot find current workbook, unitId: ${unitId}`);\n        }\n\n        const worksheet = workbook.getSheetBySheetId(subUnitId);\n        if (!worksheet) {\n            throw new Error(`cannot find current worksheet, sheetId: ${subUnitId}`);\n        }\n\n        return Promise.all(ranges.map((range) => {\n            const promises: Promise<DataValidationStatus>[] = [];\n            Range.foreach(range, (row, col) => {\n                promises.push(this._validatorByCell(workbook, worksheet, row, col));\n            });\n            return Promise.all(promises);\n        }));\n    }\n\n    async validatorWorksheet(unitId: string, subUnitId: string) {\n        const workbook = this._univerInstanceService.getUnit<Workbook>(unitId, UniverInstanceType.UNIVER_SHEET);\n        if (!workbook) {\n            throw new Error(`cannot find current workbook, unitId: ${unitId}`);\n        }\n\n        const worksheet = workbook.getSheetBySheetId(subUnitId);\n        if (!worksheet) {\n            throw new Error(`cannot find current worksheet, sheetId: ${subUnitId}`);\n        }\n        const rules = this._sheetDataValidationModel.getRules(unitId, subUnitId);\n        await Promise.all(rules.map((rule) => {\n            return Promise.all(rule.ranges.map((range) => {\n                const promises: Promise<DataValidationStatus>[] = [];\n                Range.foreach(range, (row, col) => {\n                    promises.push(this._validatorByCell(workbook, worksheet, row, col));\n                });\n                return promises;\n            }));\n        }));\n\n        return this._dataValidationCacheService.ensureCache(unitId, subUnitId);\n    }\n\n    async validatorWorkbook(unitId: string) {\n        const sheetIds = this._sheetDataValidationModel.getSubUnitIds(unitId);\n        const results = await Promise.all(sheetIds.map((id) => this.validatorWorksheet(unitId, id)));\n\n        const map: Record<string, ObjectMatrix<Nullable<DataValidationStatus>>> = {};\n\n        results.forEach((result, i) => {\n            map[sheetIds[i]] = result;\n        });\n\n        return map;\n    }\n\n    getDataValidations(unitId: string, subUnitId: string, ranges: IRange[]): IDataValidationRule[] {\n        const ruleMatrix = this._sheetDataValidationModel.getRuleObjectMatrix(unitId, subUnitId);\n        const ruleIdSet = new Set<string>();\n        ranges.forEach((range) => {\n            Range.foreach(range, (row, col) => {\n                const ruleId = ruleMatrix.getValue(row, col);\n                if (ruleId) {\n                    ruleIdSet.add(ruleId);\n                }\n            });\n        });\n\n        const rules = Array.from(ruleIdSet).map((id) => this._sheetDataValidationModel.getRuleById(unitId, subUnitId, id)).filter(Boolean) as IDataValidationRule[];\n        return rules;\n    }\n\n    getDataValidation(unitId: string, subUnitId: string, ranges: IRange[]): Nullable<IDataValidationRule> {\n        return this.getDataValidations(unitId, subUnitId, ranges)[0];\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport type { IUniverSheetsDataValidationConfig } from './controllers/config.schema';\nimport {\n    DependentOn,\n    ICommandService,\n    IConfigService,\n    Inject,\n    Injector,\n    merge,\n    Plugin,\n    UniverInstanceType,\n} from '@univerjs/core';\nimport { UniverDataValidationPlugin } from '@univerjs/data-validation';\nimport {\n    AddSheetDataValidationCommand,\n    ClearRangeDataValidationCommand,\n    RemoveSheetAllDataValidationCommand,\n    RemoveSheetDataValidationCommand,\n    UpdateSheetDataValidationOptionsCommand,\n    UpdateSheetDataValidationRangeCommand,\n    UpdateSheetDataValidationSettingCommand,\n} from './commands/commands/data-validation.command';\nimport { DATA_VALIDATION_PLUGIN_NAME } from './common/const';\nimport { defaultPluginConfig, SHEETS_DATA_VALIDATION_PLUGIN_CONFIG_KEY } from './controllers/config.schema';\nimport { DataValidationFormulaRefRangeController } from './controllers/dv-formula-ref-range.controller';\nimport { DataValidationFormulaController } from './controllers/dv-formula.controller';\nimport { DataValidationRefRangeController } from './controllers/dv-ref-range.controller';\nimport { SheetDataValidationSheetController } from './controllers/dv-sheet.controller';\nimport { DataValidationController } from './controllers/dv.controller';\nimport { SheetDataValidationModel } from './models/sheet-data-validation-model';\nimport { DataValidationCacheService } from './services/dv-cache.service';\nimport { DataValidationCustomFormulaService } from './services/dv-custom-formula.service';\nimport { DataValidationFormulaService } from './services/dv-formula.service';\nimport { SheetsDataValidationValidatorService } from './services/dv-validator-service';\n\n@DependentOn(UniverDataValidationPlugin)\nexport class UniverSheetsDataValidationPlugin extends Plugin {\n    static override pluginName = DATA_VALIDATION_PLUGIN_NAME;\n    static override type = UniverInstanceType.UNIVER_SHEET;\n\n    constructor(\n        private readonly _config: Partial<IUniverSheetsDataValidationConfig> = defaultPluginConfig,\n        @Inject(Injector) protected _injector: Injector,\n        @ICommandService private readonly _commandService: ICommandService,\n        @IConfigService private readonly _configService: IConfigService\n    ) {\n        super();\n\n        // Manage the plugin configuration.\n        const { ...rest } = merge(\n            {},\n            defaultPluginConfig,\n            this._config\n        );\n        this._configService.setConfig(SHEETS_DATA_VALIDATION_PLUGIN_CONFIG_KEY, rest);\n    }\n\n    override onStarting() {\n        ([\n            [DataValidationCacheService],\n            [DataValidationFormulaService],\n            [DataValidationCustomFormulaService],\n            [SheetsDataValidationValidatorService],\n            [SheetDataValidationModel],\n            [DataValidationController],\n            [DataValidationFormulaController],\n            [SheetDataValidationSheetController],\n            [DataValidationRefRangeController],\n            [DataValidationFormulaRefRangeController],\n        ] as Dependency[]).forEach((dep) => {\n            this._injector.add(dep);\n        });\n\n        [\n            AddSheetDataValidationCommand,\n            UpdateSheetDataValidationRangeCommand,\n            UpdateSheetDataValidationSettingCommand,\n            UpdateSheetDataValidationOptionsCommand,\n            RemoveSheetDataValidationCommand,\n            RemoveSheetAllDataValidationCommand,\n            ClearRangeDataValidationCommand,\n        ].forEach((command) => {\n            this._commandService.registerCommand(command);\n        });\n\n        this._injector.get(DataValidationCacheService);\n        this._injector.get(SheetsDataValidationValidatorService);\n        this._injector.get(DataValidationController);\n        this._injector.get(DataValidationFormulaRefRangeController);\n        this._injector.get(DataValidationRefRangeController);\n    }\n\n    override onReady(): void {\n        this._injector.get(SheetDataValidationSheetController);\n    }\n\n    override onRendered(): void {\n        this._injector.get(DataValidationFormulaController);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor } from '@univerjs/core';\nimport { DataValidationOperator, DataValidationType, Tools } from '@univerjs/core';\nimport { SheetsSelectionsService } from '@univerjs/sheets';\n\nexport function createDefaultNewRule(accessor: IAccessor) {\n    const selectionManagerService = accessor.get(SheetsSelectionsService);\n    const currentRanges = selectionManagerService.getCurrentSelections().map((s) => s.range);\n    const uid = Tools.generateRandomId(6);\n    const rule = {\n        uid,\n        type: DataValidationType.DECIMAL,\n        operator: DataValidationOperator.EQUAL,\n        formula1: '100',\n        ranges: currentRanges ?? [{ startColumn: 0, endColumn: 0, startRow: 0, endRow: 0 }],\n    };\n\n    return rule;\n}\n"],
  "mappings": "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",
  "names": ["rule", "TWO_FORMULA_OPERATOR_COUNT", "FORMULA1", "FORMULA2", "dayjs", "TWO_FORMULA_OPERATOR_COUNT", "FORMULA1", "FORMULA2", "OperatorTextMap", "OperatorTitleMap", "OperatorErrorTitleMap", "TWO_FORMULA_OPERATOR_COUNT", "OperatorErrorTitleMap", "FORMULA1", "FORMULA2", "TWO_FORMULA_OPERATOR_COUNT", "FORMULA1", "FORMULA2", "DATA_VALIDATION_PLUGIN_NAME", "configSymbol", "defaultPluginConfig", "id", "rule", "i", "rule", "TWO_FORMULA_OPERATOR_COUNT", "OperatorErrorTitleMap", "FORMULA1", "FORMULA2", "workbook", "worksheet", "range", "ranges", "defaultPluginConfig", "DATA_VALIDATION_PLUGIN_NAME"]
}
