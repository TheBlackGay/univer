{
  "version": 3,
  "sources": ["../../packages/sheets-data-validation-ui/src/services/data-validation-panel.service.ts", "../../packages/sheets-data-validation-ui/src/views/components/drop-down/CellDropdown.tsx", "../../packages/sheets-data-validation-ui/src/views/components/drop-down/index.ts", "../../packages/sheets-data-validation-ui/src/services/dropdown-manager.service.ts", "../../packages/sheets-data-validation-ui/src/commands/operations/data-validation.operation.ts", "../../packages/sheets-data-validation-ui/src/commands/commands/data-validation-ui.command.ts", "../../packages/sheets-data-validation-ui/src/controllers/config.schema.ts", "../../packages/sheets-data-validation-ui/src/controllers/dv-alert.controller.ts", "../../packages/sheets-data-validation-ui/src/controllers/dv-auto-fill.controller.ts", "../../packages/sheets-data-validation-ui/src/controllers/dv-copy-paste.controller.ts", "../../packages/sheets-data-validation-ui/src/controllers/dv-permission.controller.ts", "../../packages/sheets-data-validation-ui/src/controllers/dv-reject-input.controller.ts", "../../packages/sheets-data-validation-ui/src/controllers/dv.menu.ts", "../../packages/sheets-data-validation-ui/src/controllers/menu.schema.ts", "../../packages/sheets-data-validation-ui/src/controllers/dv-render.controller.ts", "../../packages/sheets-data-validation-ui/src/controllers/dv-rerender.controller.ts", "../../packages/sheets-data-validation-ui/src/views/components/date-dropdown/index.tsx", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/sheets-data-validation-ui/src/views/components/date-dropdown/index.module.less", "../../packages/sheets-data-validation-ui/src/views/components/list-dropdown/index.tsx", "../../packages/sheets-data-validation-ui/src/const.ts", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/sheets-data-validation-ui/src/views/components/list-dropdown/index.module.less", "../../packages/sheets-data-validation-ui/src/views/components/detail/index.tsx", "../../packages/sheets-data-validation-ui/src/views/components/options/index.tsx", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/sheets-data-validation-ui/src/views/components/options/index.module.less", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/sheets-data-validation-ui/src/views/components/detail/index.module.less", "../../packages/sheets-data-validation-ui/src/views/components/list/index.tsx", "../../packages/sheets-data-validation-ui/src/views/components/item/index.tsx", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/sheets-data-validation-ui/src/views/components/item/index.module.less", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/sheets-data-validation-ui/src/views/components/list/index.module.less", "../../packages/sheets-data-validation-ui/src/views/components/panel/index.tsx", "../../packages/sheets-data-validation-ui/src/views/components/index.ts", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/sheets-data-validation-ui/src/views/components/formula-input/index.module.less", "../../packages/sheets-data-validation-ui/src/views/components/formula-input/base-formula-input.tsx", "../../packages/sheets-data-validation-ui/src/views/components/formula-input/checkbox-formula-input.tsx", "../../packages/sheets-data-validation-ui/src/views/components/formula-input/custom-formula-input.tsx", "../../packages/sheets-data-validation-ui/src/views/components/formula-input/list-formula-input.tsx", "../../packages/sheets-data-validation-ui/src/views/components/formula-input/index.ts", "../../packages/sheets-data-validation-ui/src/views/components/render-mode/index.tsx", "../../packages/sheets-data-validation-ui/src/views/components/show-time/index.tsx", "../../packages/sheets-data-validation-ui/src/views/widgets/checkbox-widget.ts", "../../packages/sheets-data-validation-ui/src/views/validator-views/sheet-validator-view.ts", "../../packages/sheets-data-validation-ui/src/views/validator-views/checkbox-validator-view.ts", "../../packages/sheets-data-validation-ui/src/views/validator-views/custom-validator-view.ts", "../../packages/sheets-data-validation-ui/src/views/components/formula-input/formula-input.ts", "../../packages/sheets-data-validation-ui/src/views/validator-views/date-validator-view.ts", "../../packages/sheets-data-validation-ui/src/views/validator-views/decimal-validator-view.ts", "../../packages/sheets-data-validation-ui/src/views/widgets/shape/layout.ts", "../../packages/sheets-data-validation-ui/src/views/widgets/shape/dropdown.ts", "../../packages/sheets-data-validation-ui/src/views/widgets/dropdown-multiple-widget.ts", "../../packages/sheets-data-validation-ui/src/views/validator-views/list-multiple-view.ts", "../../packages/sheets-data-validation-ui/src/views/widgets/dropdown-widget.ts", "../../packages/sheets-data-validation-ui/src/views/validator-views/list-validator-view.ts", "../../packages/sheets-data-validation-ui/src/views/validator-views/text-length-validator.view.ts", "../../packages/sheets-data-validation-ui/src/views/validator-views/whole-validator-view.ts", "../../packages/sheets-data-validation-ui/src/controllers/dv-ui.controller.ts", "../../packages/sheets-data-validation-ui/src/plugin.ts", "../../packages/sheets-data-validation-ui/src/mobile-plugin.ts"],
  "sourcesContent": ["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDataValidationRule, IDisposable, Nullable } from '@univerjs/core';\nimport { Disposable, IUniverInstanceService, toDisposable, UniverInstanceType } from '@univerjs/core';\nimport { ISidebarService } from '@univerjs/ui';\nimport { BehaviorSubject, distinctUntilChanged, filter } from 'rxjs';\nimport { DATA_VALIDATION_PANEL } from '../commands/operations/data-validation.operation';\n\nexport class DataValidationPanelService extends Disposable {\n    private _open$ = new BehaviorSubject<boolean>(false);\n    readonly open$ = this._open$.pipe(distinctUntilChanged());\n\n    private _activeRule: Nullable<{ unitId: string; subUnitId: string; rule: IDataValidationRule }> = undefined;\n    private _activeRule$ = new BehaviorSubject<Nullable<{ unitId: string; subUnitId: string; rule: IDataValidationRule }>>(undefined);\n    readonly activeRule$ = this._activeRule$.asObservable();\n\n    get activeRule() {\n        return this._activeRule;\n    }\n\n    get isOpen(): boolean {\n        return this._open$.getValue();\n    }\n\n    private _closeDisposable: Nullable<IDisposable> = null;\n\n    constructor(\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @ISidebarService private readonly _sidebarService: ISidebarService\n    ) {\n        super();\n\n        this.disposeWithMe(\n            this._univerInstanceService.getCurrentTypeOfUnit$(UniverInstanceType.UNIVER_SHEET)\n                .pipe(filter((sheet) => !sheet)).subscribe(() => {\n                    this.close();\n                })\n        );\n\n        this.disposeWithMe(this._sidebarService.sidebarOptions$.subscribe((info) => {\n            if (info.id === DATA_VALIDATION_PANEL) {\n                if (!info.visible) {\n                    setTimeout(() => {\n                        this._sidebarService.sidebarOptions$.next({ visible: false });\n                    });\n                }\n            }\n        }));\n    }\n\n    override dispose(): void {\n        super.dispose();\n\n        this._open$.next(false);\n        this._open$.complete();\n        this._activeRule$.complete();\n        this._closeDisposable?.dispose();\n    }\n\n    open(): void {\n        this._open$.next(true);\n    }\n\n    close(): void {\n        this._open$.next(false);\n        this._closeDisposable?.dispose();\n    }\n\n    setCloseDisposable(disposable: IDisposable): void {\n        this._closeDisposable = toDisposable(() => {\n            disposable.dispose();\n            this._closeDisposable = null;\n        });\n    }\n\n    setActiveRule(rule: Nullable<{ unitId: string; subUnitId: string; rule: IDataValidationRule }>): void {\n        this._activeRule = rule;\n        this._activeRule$.next(rule);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentManager, useDependency, useObservable } from '@univerjs/ui';\nimport React from 'react';\nimport { DataValidationDropdownManagerService } from '../../../services/dropdown-manager.service';\n\nexport function CellDropdown() {\n    const dropdownManagerService = useDependency(DataValidationDropdownManagerService);\n    const activeDropdown = useObservable(dropdownManagerService.activeDropdown$, dropdownManagerService.activeDropdown);\n    const componentManager = useDependency(ComponentManager);\n    if (!activeDropdown) {\n        return null;\n    }\n\n    const { location, componentKey } = activeDropdown;\n    const Component = componentManager.get(componentKey);\n\n    const key = `${location.unitId}-${location.subUnitId}-${location.row}-${location.col}`;\n\n    if (!Component) {\n        return null;\n    }\n\n    const hideFn = () => {\n        dropdownManagerService.hideDropdown();\n    };\n\n    return (\n        <Component\n            key={key}\n            location={location}\n            hideFn={hideFn}\n        />\n    );\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { CellDropdown } from './CellDropdown';\nconst DROP_DOWN_KEY = 'sheet.ui.dropdown';\nexport { DROP_DOWN_KEY };\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, Nullable, Workbook } from '@univerjs/core';\nimport { Disposable, DisposableCollection, DOCS_FORMULA_BAR_EDITOR_UNIT_ID_KEY, Inject, IUniverInstanceService, UniverInstanceType } from '@univerjs/core';\nimport { DataValidatorRegistryService } from '@univerjs/data-validation';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { type ISheetLocation, SheetsSelectionsService } from '@univerjs/sheets';\nimport { SheetDataValidationModel } from '@univerjs/sheets-data-validation';\nimport { SheetCanvasPopManagerService } from '@univerjs/sheets-ui';\nimport { IZenZoneService } from '@univerjs/ui';\nimport { Subject } from 'rxjs';\nimport { DROP_DOWN_KEY } from '../views/components/drop-down';\n\nexport interface IDropdownParam {\n    location: ISheetLocation;\n    onHide?: () => void;\n    componentKey: string;\n    trigger?: 'editor-bridge';\n}\n\nexport interface IDropdownComponentProps {\n    componentKey: string;\n    location: ISheetLocation;\n    hideFn: () => void;\n}\n\nexport class DataValidationDropdownManagerService extends Disposable {\n    private _activeDropdown: Nullable<IDropdownParam>;\n    private _activeDropdown$ = new Subject<Nullable<IDropdownParam>>();\n    private _currentPopup: Nullable<IDisposable> = null;\n\n    activeDropdown$ = this._activeDropdown$.asObservable();\n\n    private _zenVisible = false;\n\n    get activeDropdown() {\n        return this._activeDropdown;\n    }\n\n    constructor(\n        @Inject(SheetCanvasPopManagerService) private readonly _canvasPopupManagerService: SheetCanvasPopManagerService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @Inject(DataValidatorRegistryService) private readonly _dataValidatorRegistryService: DataValidatorRegistryService,\n        @IZenZoneService private readonly _zenZoneService: IZenZoneService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService,\n        @Inject(SheetDataValidationModel) private readonly _dataValidationModel: SheetDataValidationModel,\n        @Inject(SheetsSelectionsService) private readonly _sheetsSelectionsService: SheetsSelectionsService\n    ) {\n        super();\n        this._init();\n\n        this._initSelectionChange();\n        this.disposeWithMe(() => {\n            this._activeDropdown$.complete();\n        });\n    }\n\n    private _init() {\n        this.disposeWithMe(this._zenZoneService.visible$.subscribe((visible) => {\n            this._zenVisible = visible;\n            if (visible) {\n                this.hideDropdown();\n            }\n        }));\n    }\n\n    private _getDropdownByCell(unitId: string | undefined, subUnitId: string | undefined, row: number, col: number) {\n        const workbook = unitId ?\n            this._univerInstanceService.getUnit<Workbook>(unitId, UniverInstanceType.UNIVER_SHEET)\n            : this._univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET);\n        if (!workbook) {\n            return;\n        }\n\n        const worksheet = subUnitId ? workbook.getSheetBySheetId(subUnitId) : workbook.getActiveSheet();\n        if (!worksheet) {\n            return;\n        }\n\n        const rule = this._dataValidationModel.getRuleByLocation(workbook.getUnitId(), worksheet.getSheetId(), row, col);\n        if (!rule) {\n            return;\n        }\n\n        const validator = this._dataValidatorRegistryService.getValidatorItem(rule.type);\n\n        return validator?.dropdown;\n    }\n\n    private _initSelectionChange() {\n        this.disposeWithMe(this._sheetsSelectionsService.selectionMoveEnd$.subscribe((selections) => {\n            if (selections && selections.every((selection) => !(selection.primary && this._getDropdownByCell(selection.primary.unitId, selection.primary.sheetId, selection.primary.actualRow, selection.primary.actualColumn)))) {\n                this.hideDropdown();\n            }\n        }));\n    }\n\n    showDropdown(param: IDropdownParam, closeOnOutSide = true) {\n        const { location } = param;\n        const { row, col, unitId, subUnitId } = location;\n\n        if (this._currentPopup) {\n            this._currentPopup.dispose();\n        };\n\n        if (this._zenVisible) {\n            return;\n        }\n\n        this._activeDropdown = param;\n        this._activeDropdown$.next(this._activeDropdown);\n        const currentRender = this._renderManagerService.getRenderById(DOCS_FORMULA_BAR_EDITOR_UNIT_ID_KEY);\n        const popupDisposable = this._canvasPopupManagerService.attachPopupToCell(\n            row,\n            col,\n            {\n                componentKey: DROP_DOWN_KEY,\n                onClickOutside: () => {\n                    if (closeOnOutSide) {\n                        this.hideDropdown();\n                    }\n                },\n                offset: [0, 3],\n                excludeOutside: [currentRender?.engine.getCanvasElement()].filter(Boolean) as HTMLElement[],\n            },\n            unitId,\n            subUnitId\n        );\n\n        if (!popupDisposable) {\n            throw new Error('[DataValidationDropdownManagerService]: cannot show dropdown!');\n        }\n\n        const disposableCollection = new DisposableCollection();\n        disposableCollection.add(popupDisposable);\n        disposableCollection.add({\n            dispose: () => {\n                this._activeDropdown?.onHide?.();\n            },\n        });\n\n        this._currentPopup = disposableCollection;\n    }\n\n    hideDropdown() {\n        if (!this._activeDropdown) {\n            return;\n        }\n        this._currentPopup && this._currentPopup.dispose();\n        this._currentPopup = null;\n\n        this._activeDropdown = null;\n        this._activeDropdown$.next(null);\n    }\n\n    showDataValidationDropdown(unitId: string, subUnitId: string, row: number, col: number, onHide?: () => void) {\n        const workbook = this._univerInstanceService.getUnit<Workbook>(unitId, UniverInstanceType.UNIVER_SHEET);\n        if (!workbook) {\n            return;\n        }\n\n        const worksheet = workbook.getSheetBySheetId(subUnitId);\n        if (!worksheet) {\n            return;\n        }\n\n        const rule = this._dataValidationModel.getRuleByLocation(workbook.getUnitId(), worksheet.getSheetId(), row, col);\n        if (!rule) {\n            return;\n        }\n\n        const validator = this._dataValidatorRegistryService.getValidatorItem(rule.type);\n        if (!validator || !validator.dropdown) {\n            this.hideDropdown();\n            return;\n        }\n\n        this.showDropdown({\n            location: {\n                workbook,\n                worksheet,\n                row,\n                col,\n                unitId,\n                subUnitId,\n            },\n            componentKey: validator.dropdown,\n            onHide,\n        });\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommandType, type ICommand, ICommandService, IUniverInstanceService } from '@univerjs/core';\nimport { DataValidationModel } from '@univerjs/data-validation';\nimport { getSheetCommandTarget } from '@univerjs/sheets';\nimport { ISidebarService } from '@univerjs/ui';\nimport { DataValidationPanelService } from '../../services/data-validation-panel.service';\nimport { DataValidationDropdownManagerService } from '../../services/dropdown-manager.service';\n\nexport const DATA_VALIDATION_PANEL = 'DataValidationPanel';\n\nexport interface IOpenValidationPanelOperationParams {\n    ruleId?: string;\n    isAdd?: boolean;\n}\n\nexport const OpenValidationPanelOperation: ICommand<IOpenValidationPanelOperationParams> = {\n    id: 'data-validation.operation.open-validation-panel',\n    type: CommandType.OPERATION,\n    handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n        const { ruleId, isAdd } = params;\n        const dataValidationPanelService = accessor.get(DataValidationPanelService);\n        const dataValidationModel = accessor.get(DataValidationModel);\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        const sidebarService = accessor.get(ISidebarService);\n        const target = getSheetCommandTarget(univerInstanceService);\n        if (!target) return false;\n\n        const { unitId, subUnitId } = target;\n        const rule = ruleId ? dataValidationModel.getRuleById(unitId, subUnitId, ruleId) : undefined;\n        dataValidationPanelService.open();\n        dataValidationPanelService.setActiveRule(rule && {\n            unitId,\n            subUnitId,\n            rule,\n        });\n\n        const disposable = sidebarService.open({\n            id: DATA_VALIDATION_PANEL,\n            header: { title: isAdd ? 'dataValidation.panel.addTitle' : 'dataValidation.panel.title' },\n            children: { label: DATA_VALIDATION_PANEL },\n            width: 312,\n            onClose: () => dataValidationPanelService.close(),\n        });\n\n        dataValidationPanelService.setCloseDisposable(disposable);\n\n        return true;\n    },\n};\n\nexport const CloseValidationPanelOperation: ICommand = {\n    id: 'data-validation.operation.close-validation-panel',\n    type: CommandType.OPERATION,\n    handler(accessor) {\n        const dataValidationPanelService = accessor.get(DataValidationPanelService);\n        dataValidationPanelService.close();\n        return true;\n    },\n};\n\nexport const ToggleValidationPanelOperation: ICommand = {\n    id: 'data-validation.operation.toggle-validation-panel',\n    type: CommandType.OPERATION,\n    handler(accessor) {\n        const commandService = accessor.get(ICommandService);\n        const dataValidationPanelService = accessor.get(DataValidationPanelService);\n        dataValidationPanelService.open();\n        const isOpen = dataValidationPanelService.isOpen;\n\n        if (isOpen) {\n            commandService.executeCommand(CloseValidationPanelOperation.id);\n        } else {\n            commandService.executeCommand(OpenValidationPanelOperation.id);\n        }\n        return true;\n    },\n};\n\nexport interface IShowDataValidationDropdownParams {\n    unitId: string;\n    subUnitId: string;\n    row: number;\n    column: number;\n}\n\nexport const ShowDataValidationDropdown: ICommand<IShowDataValidationDropdownParams> = {\n    type: CommandType.OPERATION,\n    id: 'sheet.operation.show-data-validation-dropdown',\n    handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n        const dataValidationDropdownManagerService = accessor.get(DataValidationDropdownManagerService);\n        const { unitId, subUnitId, row, column } = params;\n\n        const activeDropdown = dataValidationDropdownManagerService.activeDropdown;\n        const currLoc = activeDropdown?.location;\n        if (\n            currLoc &&\n            currLoc.unitId === unitId &&\n            currLoc.subUnitId === subUnitId &&\n            currLoc.row === row &&\n            currLoc.col === column\n        ) {\n            return true;\n        }\n\n        dataValidationDropdownManagerService.showDataValidationDropdown(\n            unitId,\n            subUnitId,\n            row,\n            column\n        );\n        return true;\n    },\n};\n\nexport const HideDataValidationDropdown: ICommand = {\n    type: CommandType.OPERATION,\n    id: 'sheet.operation.hide-data-validation-dropdown',\n    handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n        const dataValidationDropdownManagerService = accessor.get(DataValidationDropdownManagerService);\n        dataValidationDropdownManagerService.hideDropdown();\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommand } from '@univerjs/core';\nimport type { IAddSheetDataValidationCommandParams } from '@univerjs/sheets-data-validation';\nimport { CommandType, ICommandService, IUniverInstanceService } from '@univerjs/core';\nimport { getSheetCommandTarget } from '@univerjs/sheets';\nimport { AddSheetDataValidationCommand, createDefaultNewRule } from '@univerjs/sheets-data-validation';\nimport { OpenValidationPanelOperation } from '../operations/data-validation.operation';\n\nexport const AddSheetDataValidationAndOpenCommand: ICommand = {\n    type: CommandType.COMMAND,\n    id: 'data-validation.command.addRuleAndOpen',\n    handler(accessor) {\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        const target = getSheetCommandTarget(univerInstanceService);\n        if (!target) return false;\n\n        const { workbook, worksheet } = target;\n        const rule = createDefaultNewRule(accessor);\n        const commandService = accessor.get(ICommandService);\n        const unitId = workbook.getUnitId();\n        const subUnitId = worksheet.getSheetId();\n\n        const addParams: IAddSheetDataValidationCommandParams = {\n            rule,\n            unitId,\n            subUnitId,\n        };\n\n        const res = commandService.syncExecuteCommand(AddSheetDataValidationCommand.id, addParams);\n\n        if (res) {\n            commandService.syncExecuteCommand(OpenValidationPanelOperation.id, {\n                ruleId: rule.uid,\n                isAdd: true,\n            });\n\n            return true;\n        }\n        return false;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { MenuConfig } from '@univerjs/ui';\n\nexport const SHEETS_DATA_VALIDATION_UI_PLUGIN_CONFIG_KEY = 'sheets-data-validation-ui.config';\n\nexport const configSymbol = Symbol(SHEETS_DATA_VALIDATION_UI_PLUGIN_CONFIG_KEY);\n\nexport interface IUniverSheetsDataValidationUIConfig {\n    menu?: MenuConfig;\n\n    showEditOnDropdown?: boolean;\n}\n\nexport const defaultPluginConfig: IUniverSheetsDataValidationUIConfig = {};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Workbook } from '@univerjs/core';\nimport type { BaseDataValidator } from '@univerjs/data-validation';\nimport { DataValidationStatus, Disposable, Inject, IUniverInstanceService, LocaleService, UniverInstanceType } from '@univerjs/core';\nimport { SheetDataValidationModel } from '@univerjs/sheets-data-validation';\nimport { CellAlertManagerService, CellAlertType, HoverManagerService } from '@univerjs/sheets-ui';\nimport { IZenZoneService } from '@univerjs/ui';\nimport { debounceTime } from 'rxjs';\n\nconst ALERT_KEY = 'SHEET_DATA_VALIDATION_ALERT';\n\nexport class DataValidationAlertController extends Disposable {\n    constructor(\n        @Inject(HoverManagerService) private readonly _hoverManagerService: HoverManagerService,\n        @Inject(CellAlertManagerService) private readonly _cellAlertManagerService: CellAlertManagerService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @Inject(LocaleService) private readonly _localeService: LocaleService,\n        @IZenZoneService private readonly _zenZoneService: IZenZoneService,\n        @Inject(SheetDataValidationModel) private readonly _dataValidationModel: SheetDataValidationModel\n    ) {\n        super();\n        this._init();\n    }\n\n    private _init() {\n        this._initCellAlertPopup();\n        this._initZenService();\n    }\n\n    private _initCellAlertPopup() {\n        this.disposeWithMe(this._hoverManagerService.currentCell$.pipe(debounceTime(100)).subscribe((cellPos) => {\n            if (cellPos) {\n                const workbook = this._univerInstanceService.getUnit<Workbook>(cellPos.location.unitId, UniverInstanceType.UNIVER_SHEET)!;\n                const worksheet = workbook.getSheetBySheetId(cellPos.location.subUnitId);\n                if (!worksheet) return;\n                const rule = this._dataValidationModel.getRuleByLocation(cellPos.location.unitId, cellPos.location.subUnitId, cellPos.location.row, cellPos.location.col);\n                if (!rule) {\n                    this._cellAlertManagerService.removeAlert(ALERT_KEY);\n                    return;\n                }\n\n                const validStatus = this._dataValidationModel.validator(rule, { ...cellPos.location, workbook, worksheet });\n                if (validStatus === DataValidationStatus.INVALID) {\n                    const currentAlert = this._cellAlertManagerService.currentAlert.get(ALERT_KEY);\n                    const currentLoc = currentAlert?.alert?.location;\n                    if (\n                        currentLoc &&\n                        currentLoc.row === cellPos.location.row &&\n                        currentLoc.col === cellPos.location.col &&\n                        currentLoc.subUnitId === cellPos.location.subUnitId &&\n                        currentLoc.unitId === cellPos.location.unitId\n                    ) {\n                        this._cellAlertManagerService.removeAlert(ALERT_KEY);\n                        return;\n                    }\n\n                    const validator = this._dataValidationModel.getValidator(rule.type) as BaseDataValidator;\n                    if (!validator) {\n                        this._cellAlertManagerService.removeAlert(ALERT_KEY);\n                        return;\n                    }\n                    this._cellAlertManagerService.showAlert({\n                        type: CellAlertType.ERROR,\n                        title: this._localeService.t('dataValidation.error.title'),\n                        message: validator?.getRuleFinalError(rule, cellPos.location),\n                        location: cellPos.location,\n                        width: 200,\n                        height: 74,\n                        key: ALERT_KEY,\n                    });\n                    return;\n                }\n            }\n\n            this._cellAlertManagerService.removeAlert(ALERT_KEY);\n        }));\n    }\n\n    private _initZenService() {\n        this.disposeWithMe(this._zenZoneService.visible$.subscribe((visible) => {\n            if (visible) {\n                this._cellAlertManagerService.removeAlert(ALERT_KEY);\n            }\n        }));\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAutoFillLocation, ISheetAutoFillHook } from '@univerjs/sheets-ui';\nimport { DataValidationType, Disposable, Inject, Injector, ObjectMatrix, queryObjectMatrix, Range, Rectangle } from '@univerjs/core';\nimport { DATA_VALIDATION_PLUGIN_NAME, getDataValidationDiffMutations, SheetDataValidationModel } from '@univerjs/sheets-data-validation';\nimport { APPLY_TYPE, getAutoFillRepeatRange, IAutoFillService, virtualizeDiscreteRanges } from '@univerjs/sheets-ui';\n\n// TODO: adjust imports\n\nexport class DataValidationAutoFillController extends Disposable {\n    constructor(\n        @IAutoFillService private readonly _autoFillService: IAutoFillService,\n        @Inject(SheetDataValidationModel) private readonly _sheetDataValidationModel: SheetDataValidationModel,\n        @Inject(Injector) private readonly _injector: Injector\n    ) {\n        super();\n        this._initAutoFill();\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    private _initAutoFill() {\n        const noopReturnFunc = () => ({ redos: [], undos: [] });\n\n        const generalApplyFunc = (location: IAutoFillLocation, applyType: APPLY_TYPE) => {\n            const { source: sourceRange, target: targetRange, unitId, subUnitId } = location;\n            const ruleMatrixCopy = this._sheetDataValidationModel.getRuleObjectMatrix(unitId, subUnitId).clone();\n\n            const virtualRange = virtualizeDiscreteRanges([sourceRange, targetRange]);\n            const [vSourceRange, vTargetRange] = virtualRange.ranges;\n            const { mapFunc } = virtualRange;\n            const sourceStartCell = {\n                row: vSourceRange.startRow,\n                col: vSourceRange.startColumn,\n            };\n            const repeats = getAutoFillRepeatRange(vSourceRange, vTargetRange);\n            const additionMatrix = new ObjectMatrix();\n            const additionRules = new Set<string>();\n            repeats.forEach((repeat) => {\n                const targetStartCell = repeat.repeatStartCell;\n                const relativeRange = repeat.relativeRange;\n                const sourceRange = {\n                    startRow: sourceStartCell.row,\n                    startColumn: sourceStartCell.col,\n                    endColumn: sourceStartCell.col,\n                    endRow: sourceStartCell.row,\n                };\n                const targetRange = {\n                    startRow: targetStartCell.row,\n                    startColumn: targetStartCell.col,\n                    endColumn: targetStartCell.col,\n                    endRow: targetStartCell.row,\n                };\n                Range.foreach(relativeRange, (row, col) => {\n                    const sourcePositionRange = Rectangle.getPositionRange(\n                        {\n                            startRow: row,\n                            startColumn: col,\n                            endColumn: col,\n                            endRow: row,\n                        },\n                        sourceRange\n                    );\n                    const { row: sourceRow, col: sourceCol } = mapFunc(sourcePositionRange.startRow, sourcePositionRange.startColumn);\n                    // if ruleId exists, set more dv rules, if not, clear dv rules.\n                    const ruleId = this._sheetDataValidationModel.getRuleIdByLocation(unitId, subUnitId, sourceRow, sourceCol) || '';\n                    const targetPositionRange = Rectangle.getPositionRange(\n                        {\n                            startRow: row,\n                            startColumn: col,\n                            endColumn: col,\n                            endRow: row,\n                        },\n                        targetRange\n                    );\n                    const { row: targetRow, col: targetCol } = mapFunc(targetPositionRange.startRow, targetPositionRange.startColumn);\n\n                    additionMatrix.setValue(targetRow, targetCol, ruleId);\n                    additionRules.add(ruleId);\n                });\n            });\n            const additions = Array.from(additionRules).map((id) => ({ id, ranges: queryObjectMatrix(additionMatrix, (value) => value === id) }));\n            ruleMatrixCopy.addRangeRules(additions);\n            const diffs = ruleMatrixCopy.diff(this._sheetDataValidationModel.getRules(unitId, subUnitId));\n            const { redoMutations, undoMutations } = getDataValidationDiffMutations(unitId, subUnitId, diffs, this._injector, 'patched', applyType === APPLY_TYPE.ONLY_FORMAT);\n            return {\n                undos: undoMutations,\n                redos: redoMutations,\n            };\n        };\n        const hook: ISheetAutoFillHook = {\n            id: DATA_VALIDATION_PLUGIN_NAME,\n            onBeforeFillData: (location) => {\n                const { source: sourceRange, unitId, subUnitId } = location;\n                for (const row of sourceRange.rows) {\n                    for (const col of sourceRange.cols) {\n                        const dv = this._sheetDataValidationModel.getRuleByLocation(unitId, subUnitId, row, col);\n                        if (dv && dv.type === DataValidationType.CHECKBOX) {\n                            this._autoFillService.setDisableApplyType(APPLY_TYPE.SERIES, true);\n                            return;\n                        }\n                    }\n                }\n            },\n            onFillData: (location, direction, applyType) => {\n                if (\n                    applyType === APPLY_TYPE.COPY ||\n                    applyType === APPLY_TYPE.ONLY_FORMAT ||\n                    applyType === APPLY_TYPE.SERIES\n                ) {\n                    return generalApplyFunc(location, applyType);\n                }\n\n                return noopReturnFunc();\n            },\n            onAfterFillData: () => {\n            },\n        };\n        this.disposeWithMe(this._autoFillService.addHook(hook));\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IRange, ISheetDataValidationRule, Nullable } from '@univerjs/core';\nimport type { IDiscreteRange, IPasteHookValueType } from '@univerjs/sheets-ui';\nimport { Disposable, Inject, Injector, ObjectMatrix, queryObjectMatrix, Rectangle } from '@univerjs/core';\nimport { rangeToDiscreteRange } from '@univerjs/sheets';\nimport { DATA_VALIDATION_PLUGIN_NAME, getDataValidationDiffMutations, SheetDataValidationModel } from '@univerjs/sheets-data-validation';\nimport { COPY_TYPE, getRepeatRange, ISheetClipboardService, PREDEFINED_HOOK_NAME, virtualizeDiscreteRanges } from '@univerjs/sheets-ui';\n\nexport class DataValidationCopyPasteController extends Disposable {\n    private _copyInfo: Nullable<{\n        matrix: ObjectMatrix<string>;\n        unitId: string;\n        subUnitId: string;\n    }>;\n\n    constructor(\n        @ISheetClipboardService private _sheetClipboardService: ISheetClipboardService,\n        @Inject(SheetDataValidationModel) private _sheetDataValidationModel: SheetDataValidationModel,\n        @Inject(Injector) private _injector: Injector\n    ) {\n        super();\n        this._initCopyPaste();\n    }\n\n    private _initCopyPaste() {\n        this._sheetClipboardService.addClipboardHook({\n            id: DATA_VALIDATION_PLUGIN_NAME,\n            onBeforeCopy: (unitId, subUnitId, range) => this._collect(unitId, subUnitId, range),\n            onPasteCells: (pasteFrom, pasteTo, data, payload) => {\n                const { copyType = COPY_TYPE.COPY, pasteType } = payload;\n                const { range: copyRange } = pasteFrom || {};\n                const { range: pastedRange, unitId, subUnitId } = pasteTo;\n                return this._generateMutations(pastedRange, { copyType, pasteType, copyRange, unitId, subUnitId });\n            },\n        });\n    }\n\n    private _collect(unitId: string, subUnitId: string, range: IRange) {\n        const matrix = new ObjectMatrix<string>();\n        this._copyInfo = {\n            unitId,\n            subUnitId,\n            matrix,\n        };\n\n        const discreteRange = this._injector.invoke((accessor) => {\n            return rangeToDiscreteRange(range, accessor, unitId, subUnitId);\n        });\n        if (!discreteRange) {\n            return;\n        }\n        const { rows, cols } = discreteRange;\n        rows.forEach((row, rowIndex) => {\n            cols.forEach((col, colIndex) => {\n                const ruleId = this._sheetDataValidationModel.getRuleIdByLocation(unitId, subUnitId, row, col);\n                matrix.setValue(rowIndex, colIndex, ruleId ?? '');\n            });\n        });\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    private _generateMutations(\n        pastedRange: IDiscreteRange,\n        copyInfo: {\n            copyType: COPY_TYPE;\n            copyRange?: IDiscreteRange;\n            pasteType: IPasteHookValueType;\n            unitId: string;\n            subUnitId: string;\n        }\n    ) {\n        if (!this._copyInfo) {\n            return { redos: [], undos: [] };\n        }\n        if (copyInfo.copyType === COPY_TYPE.CUT) {\n            this._copyInfo = null;\n            return { redos: [], undos: [] };\n        }\n        if (!this._copyInfo || !this._copyInfo.matrix.getSizeOf() || !copyInfo.copyRange) {\n            return { redos: [], undos: [] };\n        }\n\n        const specialPastes: IPasteHookValueType[] = [\n            PREDEFINED_HOOK_NAME.SPECIAL_PASTE_COL_WIDTH,\n            PREDEFINED_HOOK_NAME.SPECIAL_PASTE_VALUE,\n            PREDEFINED_HOOK_NAME.SPECIAL_PASTE_FORMAT,\n            PREDEFINED_HOOK_NAME.SPECIAL_PASTE_FORMULA,\n        ];\n\n        if (specialPastes.includes(copyInfo.pasteType)) {\n            return { redos: [], undos: [] };\n        }\n\n        const { unitId, subUnitId } = this._copyInfo;\n\n        if (copyInfo.unitId !== unitId || subUnitId !== copyInfo.subUnitId) {\n            const ruleMatrix = this._sheetDataValidationModel.getRuleObjectMatrix(copyInfo.unitId, copyInfo.subUnitId).clone();\n            const additionMatrix = new ObjectMatrix();\n            const addRules = new Set<string>();\n\n            const { ranges: [vCopyRange, vPastedRange], mapFunc } = virtualizeDiscreteRanges([copyInfo.copyRange, pastedRange]);\n\n            const repeatRange = getRepeatRange(vCopyRange, vPastedRange, true);\n            const additionRules: Map<string, ISheetDataValidationRule> = new Map();\n\n            repeatRange.forEach(({ startRange }) => {\n                this._copyInfo?.matrix.forValue((row, col, ruleId) => {\n                    const range = Rectangle.getPositionRange(\n                        {\n                            startRow: row,\n                            endRow: row,\n                            startColumn: col,\n                            endColumn: col,\n                        },\n                        startRange\n                    );\n                    const transformedRuleId = `${subUnitId}-${ruleId}`;\n                    const oldRule = this._sheetDataValidationModel.getRuleById(unitId, subUnitId, ruleId);\n\n                    if (!this._sheetDataValidationModel.getRuleById(copyInfo.unitId, copyInfo.subUnitId, transformedRuleId) && oldRule) {\n                        additionRules.set(transformedRuleId, { ...oldRule, uid: transformedRuleId });\n                    }\n\n                    const { row: startRow, col: startColumn } = mapFunc(range.startRow, range.startColumn);\n                    addRules.add(transformedRuleId);\n                    additionMatrix.setValue(startRow, startColumn, transformedRuleId);\n                });\n            });\n\n            const additions = Array.from(addRules).map((id) => ({ id, ranges: queryObjectMatrix(additionMatrix, (value) => value === id) }));\n            ruleMatrix.addRangeRules(additions);\n\n            const { redoMutations, undoMutations } = getDataValidationDiffMutations(\n                copyInfo.unitId,\n                copyInfo.subUnitId,\n                ruleMatrix.diffWithAddition(this._sheetDataValidationModel.getRules(copyInfo.unitId, copyInfo.subUnitId), additionRules.values()),\n                this._injector,\n                'patched',\n                false\n            );\n\n            return {\n                redos: redoMutations,\n                undos: undoMutations,\n            };\n        } else {\n            const ruleMatrix = this._sheetDataValidationModel.getRuleObjectMatrix(unitId, subUnitId).clone();\n            const additionMatrix = new ObjectMatrix();\n            const additionRules = new Set<string>();\n\n            const { ranges: [vCopyRange, vPastedRange], mapFunc } = virtualizeDiscreteRanges([copyInfo.copyRange, pastedRange]);\n\n            const repeatRange = getRepeatRange(vCopyRange, vPastedRange, true);\n\n            repeatRange.forEach(({ startRange }) => {\n                this._copyInfo?.matrix.forValue((row, col, ruleId) => {\n                    const range = Rectangle.getPositionRange(\n                        {\n                            startRow: row,\n                            endRow: row,\n                            startColumn: col,\n                            endColumn: col,\n                        },\n                        startRange\n                    );\n                    const { row: startRow, col: startColumn } = mapFunc(range.startRow, range.startColumn);\n                    additionMatrix.setValue(startRow, startColumn, ruleId);\n                    additionRules.add(ruleId);\n                });\n            });\n\n            const additions = Array.from(additionRules).map((id) => ({ id, ranges: queryObjectMatrix(additionMatrix, (value) => value === id) }));\n            ruleMatrix.addRangeRules(additions);\n            const { redoMutations, undoMutations } = getDataValidationDiffMutations(\n                unitId,\n                subUnitId,\n                ruleMatrix.diff(this._sheetDataValidationModel.getRules(unitId, subUnitId)),\n                this._injector,\n                'patched',\n                false\n            );\n\n            return {\n                redos: redoMutations,\n                undos: undoMutations,\n            };\n        }\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommandInfo } from '@univerjs/core';\nimport type { IUpdateSheetDataValidationRangeCommandParams } from '@univerjs/sheets-data-validation';\nimport { Disposable, ICommandService, Inject, LocaleService } from '@univerjs/core';\nimport { RangeProtectionPermissionEditPoint, SheetPermissionCheckController, WorkbookEditablePermission, WorksheetEditPermission, WorksheetSetCellStylePermission } from '@univerjs/sheets';\nimport { AddSheetDataValidationCommand, UpdateSheetDataValidationRangeCommand } from '@univerjs/sheets-data-validation';\n\nexport class DataValidationPermissionController extends Disposable {\n    constructor(\n        @Inject(LocaleService) private _localeService: LocaleService,\n        @ICommandService private readonly _commandService: ICommandService,\n        @Inject(SheetPermissionCheckController) private readonly _sheetPermissionCheckController: SheetPermissionCheckController\n    ) {\n        super();\n        this._commandExecutedListener();\n    }\n\n    private _commandExecutedListener() {\n        this.disposeWithMe(\n            this._commandService.beforeCommandExecuted((command: ICommandInfo) => {\n                if (command.id === AddSheetDataValidationCommand.id) {\n                    const permission = this._sheetPermissionCheckController.permissionCheckWithRanges({\n                        workbookTypes: [WorkbookEditablePermission],\n                        rangeTypes: [RangeProtectionPermissionEditPoint],\n                        worksheetTypes: [WorksheetEditPermission, WorksheetSetCellStylePermission],\n                    });\n                    if (!permission) {\n                        this._sheetPermissionCheckController.blockExecuteWithoutPermission(this._localeService.t('permission.dialog.setStyleErr'));\n                    }\n                }\n                if (command.id === UpdateSheetDataValidationRangeCommand.id) {\n                    const permission = this._sheetPermissionCheckController.permissionCheckWithRanges({\n                        workbookTypes: [WorkbookEditablePermission],\n                        rangeTypes: [RangeProtectionPermissionEditPoint],\n                        worksheetTypes: [WorksheetEditPermission, WorksheetSetCellStylePermission],\n                    }, (command.params as IUpdateSheetDataValidationRangeCommandParams).ranges);\n                    if (!permission) {\n                        this._sheetPermissionCheckController.blockExecuteWithoutPermission(this._localeService.t('permission.dialog.setStyleErr'));\n                    }\n                }\n            })\n        );\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataValidationErrorStyle, DataValidationStatus, Disposable, Inject, LocaleService } from '@univerjs/core';\nimport { DataValidatorRegistryService } from '@univerjs/data-validation';\nimport { Button } from '@univerjs/design';\nimport { SheetInterceptorService, VALIDATE_CELL } from '@univerjs/sheets';\nimport { SheetDataValidationModel, SheetsDataValidationValidatorService } from '@univerjs/sheets-data-validation';\nimport { IDialogService } from '@univerjs/ui';\nimport React from 'react';\n\nexport class DataValidationRejectInputController extends Disposable {\n    constructor(\n        @Inject(SheetInterceptorService) private readonly _sheetInterceptorService: SheetInterceptorService,\n        @Inject(SheetDataValidationModel) private readonly _dataValidationModel: SheetDataValidationModel,\n        @Inject(DataValidatorRegistryService) private readonly _dataValidatorRegistryService: DataValidatorRegistryService,\n        @IDialogService private readonly _dialogService: IDialogService,\n        @Inject(LocaleService) private readonly _localeService: LocaleService,\n        @Inject(SheetsDataValidationValidatorService) private readonly _sheetsDataValidationValidatorService: SheetsDataValidationValidatorService\n    ) {\n        super();\n        this._initEditorBridgeInterceptor();\n    }\n\n    private _initEditorBridgeInterceptor() {\n        this._sheetInterceptorService.writeCellInterceptor.intercept(\n            VALIDATE_CELL,\n            {\n                handler: async (lastResult, context, next) => {\n                    const cell = await lastResult;\n                    const { row, col, unitId, subUnitId } = context;\n                    const ruleId = this._dataValidationModel.getRuleIdByLocation(unitId, subUnitId, row, col);\n                    const rule = ruleId ? this._dataValidationModel.getRuleById(unitId, subUnitId, ruleId) : undefined;\n                    if (cell === false) {\n                        return next(Promise.resolve(false))!;\n                    }\n\n                    if (!rule || rule.errorStyle !== DataValidationErrorStyle.STOP) {\n                        return next(Promise.resolve(true))!;\n                    }\n                    const validator = this._dataValidatorRegistryService.getValidatorItem(rule.type);\n                    if (!validator) {\n                        return next(Promise.resolve(true))!;\n                    }\n\n                    const res = await this._sheetsDataValidationValidatorService.validatorCell(unitId, subUnitId, row, col);\n                    if (res === DataValidationStatus.VALID) {\n                        return next(Promise.resolve(true))!;\n                    }\n\n                    this._dialogService.open({\n                        width: 368,\n                        title: {\n                            title: this._localeService.t('dataValidation.alert.title'),\n                        },\n                        id: 'reject-input-dialog',\n                        children: {\n                            title: validator.getRuleFinalError(rule, { row, col, unitId, subUnitId }),\n                        },\n                        footer: {\n                            title: React.createElement(\n                                Button,\n                                {\n                                    type: 'primary',\n                                    onClick: () => this._dialogService.close('reject-input-dialog'),\n                                },\n                                this._localeService.t('dataValidation.alert.ok')\n                            ),\n                        },\n                        onClose: () => {\n                            this._dialogService.close('reject-input-dialog');\n                        },\n                    });\n\n                    return next(Promise.resolve(false))!; // Add explicit return for invalid data\n                },\n            }\n        );\n    }\n\n    showReject(title: string) {\n        this._dialogService.open({\n            width: 368,\n            title: {\n                title: this._localeService.t('dataValidation.alert.title'),\n            },\n            id: 'reject-input-dialog',\n            children: {\n                title,\n            },\n            footer: {\n                title: React.createElement(\n                    Button,\n                    {\n                        type: 'primary',\n                        onClick: () => this._dialogService.close('reject-input-dialog'),\n                    },\n                    this._localeService.t('dataValidation.alert.ok')\n                ),\n            },\n            onClose: () => {\n                this._dialogService.close('reject-input-dialog');\n            },\n        });\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor } from '@univerjs/core';\nimport { UniverInstanceType } from '@univerjs/core';\nimport { RangeProtectionPermissionEditPoint, WorkbookEditablePermission, WorksheetEditPermission, WorksheetSetCellStylePermission } from '@univerjs/sheets';\nimport { getCurrentRangeDisable$ } from '@univerjs/sheets-ui';\nimport { getMenuHiddenObservable, type IMenuItem, MenuItemType } from '@univerjs/ui';\nimport { AddSheetDataValidationAndOpenCommand } from '../commands/commands/data-validation-ui.command';\nimport { OpenValidationPanelOperation } from '../commands/operations/data-validation.operation';\n\nexport const DataValidationIcon = 'data-validation-single';\nexport const DATA_VALIDATION_MENU_ID = 'sheet.menu.data-validation';\n\nexport function dataValidationMenuFactory(accessor: IAccessor): IMenuItem {\n    return {\n        id: DATA_VALIDATION_MENU_ID,\n        type: MenuItemType.SUBITEMS,\n        icon: DataValidationIcon,\n        tooltip: 'dataValidation.title',\n        hidden$: getMenuHiddenObservable(accessor, UniverInstanceType.UNIVER_SHEET),\n        disabled$: getCurrentRangeDisable$(accessor, { workbookTypes: [WorkbookEditablePermission], worksheetTypes: [WorksheetSetCellStylePermission, WorksheetEditPermission], rangeTypes: [RangeProtectionPermissionEditPoint] }),\n    };\n}\n\nexport function openDataValidationMenuFactory(_accessor: IAccessor): IMenuItem {\n    return {\n        id: OpenValidationPanelOperation.id,\n        title: 'dataValidation.panel.title',\n        type: MenuItemType.BUTTON,\n    };\n}\n\nexport function addDataValidationMenuFactory(_accessor: IAccessor): IMenuItem {\n    return {\n        id: AddSheetDataValidationAndOpenCommand.id,\n        title: 'dataValidation.panel.add',\n        type: MenuItemType.BUTTON,\n    };\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { MenuSchemaType } from '@univerjs/ui';\nimport { RibbonStartGroup } from '@univerjs/ui';\nimport { AddSheetDataValidationAndOpenCommand } from '../commands/commands/data-validation-ui.command';\nimport { OpenValidationPanelOperation } from '../commands/operations/data-validation.operation';\nimport {\n    addDataValidationMenuFactory,\n    DATA_VALIDATION_MENU_ID,\n    dataValidationMenuFactory,\n    openDataValidationMenuFactory,\n} from './dv.menu';\n\nexport const menuSchema: MenuSchemaType = {\n    [RibbonStartGroup.FORMULAS_INSERT]: {\n        [DATA_VALIDATION_MENU_ID]: {\n            order: 9,\n            menuItemFactory: dataValidationMenuFactory,\n            [OpenValidationPanelOperation.id]: {\n                order: 0,\n                menuItemFactory: openDataValidationMenuFactory,\n            },\n            [AddSheetDataValidationAndOpenCommand.id]: {\n                order: 1,\n                menuItemFactory: addDataValidationMenuFactory,\n            },\n        },\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CellValue, ICellRenderContext, IRange, Nullable } from '@univerjs/core';\nimport { DataValidationStatus, DataValidationType, ICommandService, Inject, InterceptorEffectEnum, IUniverInstanceService, Optional, RxDisposable, sequenceExecute } from '@univerjs/core';\nimport { DataValidatorRegistryService } from '@univerjs/data-validation';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { InterceptCellContentPriority, INTERCEPTOR_POINT, SheetInterceptorService } from '@univerjs/sheets';\nimport { DataValidationCacheService, getCellValueOrigin, SheetDataValidationModel } from '@univerjs/sheets-data-validation';\nimport { AutoHeightController, IEditorBridgeService, SheetSkeletonManagerService } from '@univerjs/sheets-ui';\nimport { IMenuManagerService } from '@univerjs/ui';\nimport { bufferTime, filter } from 'rxjs';\nimport { DataValidationDropdownManagerService } from '../services/dropdown-manager.service';\nimport { menuSchema } from './menu.schema';\n\nconst INVALID_MARK = {\n    tr: {\n        size: 6,\n        color: '#fe4b4b',\n    },\n};\n\nexport class SheetsDataValidationRenderController extends RxDisposable {\n    constructor(\n        @ICommandService private readonly _commandService: ICommandService,\n        @IMenuManagerService private readonly _menuManagerService: IMenuManagerService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @Inject(AutoHeightController) private readonly _autoHeightController: AutoHeightController,\n        @Inject(DataValidationDropdownManagerService) private readonly _dropdownManagerService: DataValidationDropdownManagerService,\n        @Inject(SheetDataValidationModel) private readonly _sheetDataValidationModel: SheetDataValidationModel,\n        @Inject(DataValidatorRegistryService) private readonly _dataValidatorRegistryService: DataValidatorRegistryService,\n        @Inject(SheetInterceptorService) private readonly _sheetInterceptorService: SheetInterceptorService,\n        @Inject(DataValidationCacheService) private readonly _dataValidationCacheService: DataValidationCacheService,\n        @Optional(IEditorBridgeService) private readonly _editorBridgeService?: IEditorBridgeService\n    ) {\n        super();\n\n        this._initMenu();\n        this._initDropdown();\n        this._initViewModelIntercept();\n        this._initAutoHeight();\n    }\n\n    private _initMenu() {\n        this._menuManagerService.mergeMenu(menuSchema);\n    }\n\n    private _initDropdown() {\n        if (!this._editorBridgeService) {\n            return;\n        }\n\n        this.disposeWithMe(this._editorBridgeService.visible$.subscribe((visible) => {\n            if (!visible.visible) {\n                if (this._dropdownManagerService.activeDropdown?.trigger === 'editor-bridge') {\n                    this._dropdownManagerService.hideDropdown();\n                }\n                return;\n            }\n\n            const state = this._editorBridgeService!.getEditCellState();\n            if (state) {\n                const { unitId, sheetId, row, column } = state;\n                const workbook = this._univerInstanceService.getUniverSheetInstance(unitId);\n                if (!workbook) {\n                    return;\n                }\n                const rule = this._sheetDataValidationModel.getRuleByLocation(unitId, sheetId, row, column);\n\n                if (!rule) {\n                    return;\n                }\n                const validator = this._dataValidatorRegistryService.getValidatorItem(rule.type);\n\n                if (!validator?.dropdown) {\n                    return;\n                }\n\n                const worksheet = workbook.getActiveSheet();\n                if (!worksheet) return;\n\n                const activeDropdown = this._dropdownManagerService.activeDropdown;\n                const currLoc = activeDropdown?.location;\n                if (\n                    currLoc &&\n                    currLoc.unitId === unitId &&\n                    currLoc.subUnitId === sheetId &&\n                    currLoc.row === row &&\n                    currLoc.col === column\n                ) {\n                    return;\n                }\n\n                this._dropdownManagerService.showDropdown(\n                    {\n                        location: {\n                            unitId,\n                            subUnitId: sheetId,\n                            row,\n                            col: column,\n                            workbook,\n                            worksheet,\n                        },\n                        componentKey: validator.dropdown,\n                        onHide: () => { /* empty */ },\n                        trigger: 'editor-bridge',\n                    },\n                    false\n                );\n            }\n        }));\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    private _initViewModelIntercept() {\n        this.disposeWithMe(\n            this._sheetInterceptorService.intercept(\n                INTERCEPTOR_POINT.CELL_CONTENT,\n                {\n                    effect: InterceptorEffectEnum.Style,\n                    // must be after numfmt\n                    priority: InterceptCellContentPriority.DATA_VALIDATION,\n                    // eslint-disable-next-line max-lines-per-function, complexity\n                    handler: (cell, pos, next) => {\n                        const { row, col, unitId, subUnitId, workbook, worksheet } = pos;\n\n                        const ruleId = this._sheetDataValidationModel.getRuleIdByLocation(unitId, subUnitId, row, col);\n                        if (!ruleId) {\n                            return next(cell);\n                        }\n                        const rule = this._sheetDataValidationModel.getRuleById(unitId, subUnitId, ruleId);\n                        if (!rule) {\n                            return next(cell);\n                        }\n                        const validStatus = this._dataValidationCacheService.getValue(unitId, subUnitId, row, col) ?? DataValidationStatus.VALID;\n                        const validator = this._dataValidatorRegistryService.getValidatorItem(rule.type);\n                        const cellOrigin = pos.rawData;\n                        let cache: Nullable<CellValue>;\n                        const cellValue = {\n                            get value() {\n                                if (cache !== undefined) {\n                                    return cache;\n                                }\n                                cache = getCellValueOrigin(cellOrigin) ?? null;\n                                return cache;\n                            },\n                        };\n                        const valueStr = {\n                            get value() {\n                                return `${cellValue.value ?? ''}`;\n                            },\n                        };\n\n                        return next({\n                            ...cell,\n                            markers: {\n                                ...cell?.markers,\n                                ...validStatus === DataValidationStatus.INVALID ? INVALID_MARK : null,\n                            },\n                            customRender: [\n                                ...(cell?.customRender ?? []),\n                                ...(validator?.canvasRender ? [validator.canvasRender] : []),\n                            ],\n                            fontRenderExtension: {\n                                ...cell?.fontRenderExtension,\n                                isSkip: cell?.fontRenderExtension?.isSkip || validator?.skipDefaultFontRender?.(rule, cellValue.value, pos),\n                            },\n                            interceptorStyle: {\n                                ...cell?.interceptorStyle,\n                                ...validator?.getExtraStyle(rule, valueStr.value, {\n                                    get style() {\n                                        const styleMap = workbook.getStyles();\n                                        return (typeof cell?.s === 'string' ? styleMap.get(cell?.s) : cell?.s) || {};\n                                    },\n                                }, row, col),\n                            },\n                            interceptorAutoHeight: () => {\n                                const skeleton = this._renderManagerService.getRenderById(unitId)\n                                    ?.with(SheetSkeletonManagerService)\n                                    .getSkeletonParam(subUnitId)\n                                    ?.skeleton;\n                                if (!skeleton) {\n                                    return undefined;\n                                }\n                                const mergeCell = skeleton.worksheet.getMergedCell(row, col);\n\n                                const info: ICellRenderContext = {\n                                    data: cell,\n                                    style: skeleton.getStyles().getStyleByCell(cell),\n                                    primaryWithCoord: skeleton.getCellWithCoordByIndex(mergeCell?.startRow ?? row, mergeCell?.startColumn ?? col),\n                                    unitId,\n                                    subUnitId,\n                                    row,\n                                    col,\n                                    workbook,\n                                    worksheet,\n                                };\n                                return validator?.canvasRender?.calcCellAutoHeight?.(info);\n                            },\n                            interceptorAutoWidth: () => {\n                                const skeleton = this._renderManagerService.getRenderById(unitId)\n                                    ?.with(SheetSkeletonManagerService)\n                                    .getSkeletonParam(subUnitId)\n                                    ?.skeleton;\n                                if (!skeleton) {\n                                    return undefined;\n                                }\n                                const mergeCell = skeleton.worksheet.getMergedCell(row, col);\n\n                                const info: ICellRenderContext = {\n                                    data: cell,\n                                    style: skeleton.getStyles().getStyleByCell(cell),\n                                    primaryWithCoord: skeleton.getCellWithCoordByIndex(mergeCell?.startRow ?? row, mergeCell?.startColumn ?? col),\n                                    unitId,\n                                    subUnitId,\n                                    row,\n                                    col,\n                                    workbook,\n                                    worksheet,\n                                };\n                                return validator?.canvasRender?.calcCellAutoWidth?.(info);\n                            },\n                            coverable: (cell?.coverable ?? true) && !(rule.type === DataValidationType.LIST || rule.type === DataValidationType.LIST_MULTIPLE),\n                        });\n                    },\n                }\n            )\n        );\n    }\n\n    private _initAutoHeight() {\n        this._sheetDataValidationModel.ruleChange$\n            .pipe(\n                // patched data-validation change don't need to re-calc row height\n                // re-calc of row height will be triggered precisely by the origin command\n                filter((change) => change.source === 'command'),\n                bufferTime(100)\n            )\n            .subscribe((infos) => {\n                if (infos.length === 0) {\n                    return;\n                }\n\n                const ranges: IRange[] = [];\n                infos.forEach((info) => {\n                    if (info.rule.type === DataValidationType.LIST_MULTIPLE || info.rule.type === DataValidationType.LIST) {\n                        if (info.rule?.ranges) {\n                            ranges.push(...info.rule.ranges);\n                        }\n                    }\n                });\n\n                if (ranges.length) {\n                    const mutations = this._autoHeightController.getUndoRedoParamsOfAutoHeight(ranges);\n                    sequenceExecute(mutations.redos, this._commandService);\n                }\n            });\n    }\n}\n\n// The mobile version does not provide the ability to change data validation model.\nexport class SheetsDataValidationMobileRenderController extends RxDisposable {\n    constructor(\n        @ICommandService private readonly _commandService: ICommandService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService,\n        @Inject(AutoHeightController) private readonly _autoHeightController: AutoHeightController,\n        @Inject(DataValidatorRegistryService) private readonly _dataValidatorRegistryService: DataValidatorRegistryService,\n        @Inject(SheetInterceptorService) private readonly _sheetInterceptorService: SheetInterceptorService,\n        @Inject(SheetDataValidationModel) private readonly _sheetDataValidationModel: SheetDataValidationModel,\n        @Inject(DataValidationCacheService) private readonly _dataValidationCacheService: DataValidationCacheService\n    ) {\n        super();\n\n        this._initViewModelIntercept();\n        this._initAutoHeight();\n    }\n\n    private _initViewModelIntercept() {\n        this.disposeWithMe(\n            this._sheetInterceptorService.intercept(\n                INTERCEPTOR_POINT.CELL_CONTENT,\n                {\n                    effect: InterceptorEffectEnum.Style,\n                    // must be after numfmt\n                    priority: InterceptCellContentPriority.DATA_VALIDATION,\n                    // eslint-disable-next-line complexity\n                    handler: (cell, pos, next) => {\n                        const { row, col, unitId, subUnitId, workbook, worksheet } = pos;\n\n                        const ruleId = this._sheetDataValidationModel.getRuleIdByLocation(unitId, subUnitId, row, col);\n                        if (!ruleId) {\n                            return next(cell);\n                        }\n                        const rule = this._sheetDataValidationModel.getRuleById(unitId, subUnitId, ruleId);\n                        if (!rule) {\n                            return next(cell);\n                        }\n                        const validStatus = this._dataValidationCacheService.getValue(unitId, subUnitId, row, col) ?? DataValidationStatus.VALID;\n                        const validator = this._dataValidatorRegistryService.getValidatorItem(rule.type);\n                        const cellOrigin = worksheet.getCellRaw(row, col);\n                        const cellValue = getCellValueOrigin(cellOrigin);\n                        const valueStr = `${cellValue ?? ''}`;\n\n                        return next({\n                            ...cell,\n                            markers: {\n                                ...cell?.markers,\n                                ...validStatus === DataValidationStatus.INVALID ? INVALID_MARK : null,\n                            },\n                            customRender: [\n                                ...(cell?.customRender ?? []),\n                                ...(validator?.canvasRender ? [validator.canvasRender] : []),\n                            ],\n                            fontRenderExtension: {\n                                ...cell?.fontRenderExtension,\n                                isSkip: cell?.fontRenderExtension?.isSkip || validator?.skipDefaultFontRender?.(rule, cellValue, pos),\n                            },\n                            interceptorStyle: {\n                                ...cell?.interceptorStyle,\n                                ...validator?.getExtraStyle(rule, valueStr, {\n                                    get style() {\n                                        const styleMap = workbook.getStyles();\n                                        return (typeof cell?.s === 'string' ? styleMap.get(cell?.s) : cell?.s) || {};\n                                    },\n                                }, row, col),\n                            },\n                            interceptorAutoHeight: () => {\n                                const skeleton = this._renderManagerService.getRenderById(unitId)\n                                    ?.with(SheetSkeletonManagerService)\n                                    .getSkeletonParam(subUnitId)\n                                    ?.skeleton;\n                                if (!skeleton) {\n                                    return undefined;\n                                }\n                                const mergeCell = skeleton.worksheet.getMergedCell(row, col);\n\n                                const info: ICellRenderContext = {\n                                    data: cell,\n                                    style: skeleton.getStyles().getStyleByCell(cell),\n                                    primaryWithCoord: skeleton.getCellWithCoordByIndex(mergeCell?.startRow ?? row, mergeCell?.startColumn ?? col),\n                                    unitId,\n                                    subUnitId,\n                                    row,\n                                    col,\n                                    workbook,\n                                    worksheet,\n                                };\n                                return validator?.canvasRender?.calcCellAutoHeight?.(info);\n                            },\n                            coverable: (cell?.coverable ?? true) && !(rule.type === DataValidationType.LIST || rule.type === DataValidationType.LIST_MULTIPLE),\n                        });\n                    },\n                }\n            )\n        );\n    }\n\n    private _initAutoHeight() {\n        this._sheetDataValidationModel.ruleChange$\n            .pipe(\n                filter((change) => change.source === 'command'),\n                bufferTime(16)\n            )\n            .subscribe((infos) => {\n                const ranges: IRange[] = [];\n                infos.forEach((info) => {\n                    if (info.rule?.ranges) {\n                        ranges.push(...info.rule.ranges);\n                    }\n                });\n\n                if (ranges.length) {\n                    const mutations = this._autoHeightController.getUndoRedoParamsOfAutoHeight(ranges);\n                    sequenceExecute(mutations.redos, this._commandService);\n                }\n            });\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Workbook } from '@univerjs/core';\nimport type { IRenderContext, IRenderModule } from '@univerjs/engine-render';\nimport type { IValidStatusChange } from '@univerjs/sheets-data-validation';\nimport { bufferDebounceTime, Disposable, Inject } from '@univerjs/core';\nimport { SheetDataValidationModel } from '@univerjs/sheets-data-validation';\nimport { SheetSkeletonManagerService } from '@univerjs/sheets-ui';\n\nexport class SheetsDataValidationReRenderController extends Disposable implements IRenderModule {\n    constructor(\n        private readonly _context: IRenderContext<Workbook>,\n        @Inject(SheetDataValidationModel) private readonly _sheetDataValidationModel: SheetDataValidationModel,\n        @Inject(SheetSkeletonManagerService) private readonly _sheetSkeletonManagerService: SheetSkeletonManagerService\n    ) {\n        super();\n        this._initSkeletonChange();\n    }\n\n    private _initSkeletonChange() {\n        const reRender = (values: IValidStatusChange[]) => {\n            if (!values.length) {\n                return;\n            }\n            const sheetIds = new Set<string>();\n            values.forEach((value) => {\n                sheetIds.add(value.subUnitId);\n            });\n            sheetIds.forEach((sheetId) => {\n                this._sheetSkeletonManagerService.getSkeletonParam(sheetId)?.skeleton.makeDirty(true);\n            });\n            this._context.mainComponent?.makeForceDirty();\n        };\n\n        this.disposeWithMe(this._sheetDataValidationModel.validStatusChange$.pipe(bufferDebounceTime(16)).subscribe(reRender));\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CellValue, Nullable } from '@univerjs/core';\nimport type { DateValidator } from '@univerjs/sheets-data-validation';\nimport type { IEditorBridgeServiceVisibleParam } from '@univerjs/sheets-ui';\nimport type { IDropdownComponentProps } from '../../../services/dropdown-manager.service';\nimport { CellValueType, DataValidationErrorStyle, dayjs, ICommandService, LocaleService, numfmt } from '@univerjs/core';\nimport { Button, DatePanel } from '@univerjs/design';\nimport { DeviceInputEventType } from '@univerjs/engine-render';\nimport { SetRangeValuesCommand } from '@univerjs/sheets';\nimport { getCellValueOrigin, SheetDataValidationModel } from '@univerjs/sheets-data-validation';\nimport { getPatternType } from '@univerjs/sheets-numfmt';\nimport { SetCellEditVisibleOperation } from '@univerjs/sheets-ui';\nimport { KeyCode, useDependency } from '@univerjs/ui';\nimport React, { useState } from 'react';\nimport { DataValidationRejectInputController } from '../../../controllers/dv-reject-input.controller';\nimport styles from './index.module.less';\n\nconst transformDate = (value: Nullable<CellValue>) => {\n    if (value === undefined || value === null || typeof value === 'boolean') {\n        return undefined;\n    }\n\n    if (typeof value === 'number' || !Number.isNaN(+value)) {\n        return dayjs(numfmt.format('yyyy-MM-dd HH:mm:ss', Number(value)));\n    }\n\n    const date = dayjs(value);\n    if (date.isValid()) {\n        return date;\n    }\n    return undefined;\n};\n\nexport function DateDropdown(props: IDropdownComponentProps) {\n    const { location, hideFn } = props;\n    const { worksheet, row, col, unitId, subUnitId, workbook } = location;\n    const commandService = useDependency(ICommandService);\n    const rejectInputController = useDependency(DataValidationRejectInputController);\n    const cellData = worksheet.getCell(row, col);\n    const cellStr = getCellValueOrigin(worksheet.getCellRaw(row, col));\n    const originDate = transformDate(cellStr);\n    const [localDate, setLocalDate] = useState<dayjs.Dayjs | undefined>(originDate);\n\n    const date = localDate && localDate.isValid() ? localDate : dayjs();\n    const localeService = useDependency(LocaleService);\n    const sheetsDataValidationModel = useDependency(SheetDataValidationModel);\n\n    const rule = sheetsDataValidationModel.getRuleByLocation(unitId, subUnitId, row, col);\n    if (!rule) {\n        return null;\n    }\n    const validator = sheetsDataValidationModel.getValidator(rule.type) as DateValidator | undefined;\n\n    if (!cellData || !validator) {\n        return;\n    }\n    const showTime = Boolean(rule.bizInfo?.showTime);\n    const handleSave = async () => {\n        if (!date) {\n            return;\n        }\n        const newValue = date;\n        // convert current date to utc date\n        const dateStr = newValue.format(showTime ? 'YYYY-MM-DD HH:mm:ss' : 'YYYY-MM-DD 00:00:00');\n        const serialTime = numfmt.parseDate(dateStr)?.v as number;\n        const cellStyle = workbook.getStyles().getStyleByCell(cellData);\n        const format = cellStyle?.n?.pattern ?? '';\n        const patternType = getPatternType(format);\n\n        if (\n            rule.errorStyle !== DataValidationErrorStyle.STOP ||\n            (await validator.validator({\n                value: serialTime,\n                unitId,\n                subUnitId,\n                row,\n                column: col,\n                worksheet,\n                workbook,\n                interceptValue: dateStr.replace('Z', '').replace('T', ' '),\n                t: CellValueType.NUMBER,\n            }, rule))\n        ) {\n            hideFn();\n            await commandService.executeCommand(SetCellEditVisibleOperation.id, {\n                visible: false,\n                eventType: DeviceInputEventType.Keyboard,\n                unitId,\n                keycode: KeyCode.ESC,\n            } as IEditorBridgeServiceVisibleParam);\n            await commandService.executeCommand(SetRangeValuesCommand.id, {\n                unitId,\n                subUnitId,\n                range: {\n                    startColumn: col,\n                    endColumn: col,\n                    startRow: row,\n                    endRow: row,\n                },\n                value: {\n                    v: serialTime,\n                    t: 2,\n                    p: null,\n                    f: null,\n                    si: null,\n                    s: {\n                        n: {\n                            pattern: showTime\n                                ? patternType === 'datetime' ? format : 'yyyy-MM-dd hh:mm:ss'\n                                : patternType === 'date' ? format : 'yyyy-MM-dd',\n                        },\n                    },\n                },\n            });\n        } else {\n            rejectInputController.showReject(validator.getRuleFinalError(rule, { row, col, unitId, subUnitId }));\n        }\n    };\n\n    return (\n        <div className={styles.dvDateDropdown}>\n            <DatePanel\n                defaultValue={date}\n                pickerValue={date}\n                showTime={showTime || undefined}\n                onSelect={async (newValue) => {\n                    setLocalDate(newValue);\n                }}\n                onPanelChange={(value) => {\n                    setLocalDate(value);\n                }}\n                disabledDate={(current) => !numfmt.parseDate(current.format('YYYY-MM-DD'))}\n            />\n            <div className={styles.dvDateDropdownBtns}>\n                <Button size=\"small\" type=\"primary\" onClick={handleSave} disabled={!date.isValid()}>\n                    {localeService.t('dataValidation.alert.ok')}\n                </Button>\n            </div>\n        </div>\n\n    );\n}\n", "export default {\n  \"dvDateDropdown\": \"univer-dv-date-dropdown\",\n  \"dvDateDropdownBtns\": \"univer-dv-date-dropdown-btns\"\n};import \"ni:sha-256;YuOosiUlxnbUbMpplaixUGqSKe59FiOL892ewUkdGwc\";", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DocumentDataModel } from '@univerjs/core';\nimport type { IRichTextEditingMutationParams } from '@univerjs/docs';\nimport type { ISetRangeValuesCommandParams, ISheetLocation } from '@univerjs/sheets';\nimport type { ListMultipleValidator } from '@univerjs/sheets-data-validation';\nimport type { IEditorBridgeServiceVisibleParam } from '@univerjs/sheets-ui';\nimport type { IUniverSheetsDataValidationUIConfig } from '../../../controllers/config.schema';\nimport type { IDropdownComponentProps } from '../../../services/dropdown-manager.service';\nimport { BuildTextUtils, DataValidationRenderMode, DataValidationType, ICommandService, IConfigService, IUniverInstanceService, LocaleService, UniverInstanceType } from '@univerjs/core';\nimport { DataValidationModel } from '@univerjs/data-validation';\nimport { Scrollbar } from '@univerjs/design';\nimport { RichTextEditingMutation } from '@univerjs/docs';\nimport { DeviceInputEventType } from '@univerjs/engine-render';\nimport { CheckMarkSingle } from '@univerjs/icons';\nimport { RangeProtectionPermissionEditPoint, SetRangeValuesCommand, SheetPermissionCheckController, WorkbookEditablePermission, WorksheetEditPermission } from '@univerjs/sheets';\nimport { deserializeListOptions, getDataValidationCellValue, serializeListOptions, SheetDataValidationModel } from '@univerjs/sheets-data-validation';\nimport { IEditorBridgeService, SetCellEditVisibleOperation } from '@univerjs/sheets-ui';\nimport { KeyCode, RectPopup, useDependency, useObservable } from '@univerjs/ui';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { debounceTime } from 'rxjs';\nimport { OpenValidationPanelOperation } from '../../../commands/operations/data-validation.operation';\nimport { DROP_DOWN_DEFAULT_COLOR } from '../../../const';\nimport { SHEETS_DATA_VALIDATION_UI_PLUGIN_CONFIG_KEY } from '../../../controllers/config.schema';\nimport styles from './index.module.less';\n\ninterface ISelectListProps {\n    value: string[];\n    onChange: (val: string[]) => void;\n    multiple?: boolean;\n    options: { label: string; value: string; color?: string }[];\n    title?: string;\n    onEdit?: () => void;\n    style?: React.CSSProperties;\n    filter?: string;\n    location: ISheetLocation;\n}\n\nconst SelectList = (props: ISelectListProps) => {\n    const { value, onChange, multiple, options, title, onEdit, style, filter, location } = props;\n    const localeService = useDependency(LocaleService);\n    const configService = useDependency(IConfigService);\n    const lowerFilter = filter?.toLowerCase();\n    const { row, col, unitId, subUnitId } = location;\n    const filteredOptions = options.filter((item) => lowerFilter ? item.label.toLowerCase().includes(lowerFilter) : true);\n    const showEditOnDropdown = configService.getConfig<IUniverSheetsDataValidationUIConfig>(SHEETS_DATA_VALIDATION_UI_PLUGIN_CONFIG_KEY)?.showEditOnDropdown ?? true;\n    const sheetPermissionCheckController = useDependency(SheetPermissionCheckController);\n    const hasPermission = useMemo(() => sheetPermissionCheckController.permissionCheckWithRanges(\n        {\n            workbookTypes: [WorkbookEditablePermission],\n            rangeTypes: [RangeProtectionPermissionEditPoint],\n            worksheetTypes: [WorksheetEditPermission],\n        },\n        [{ startColumn: col, startRow: row, endColumn: col, endRow: row }],\n        unitId,\n        subUnitId\n    ), [sheetPermissionCheckController, col, row, unitId, subUnitId]);\n\n    return (\n        <div className={styles.dvListDropdown} style={style}>\n            <div className={styles.dvListDropdownTitle}>\n                {title}\n            </div>\n            <div className={styles.dvListDropdownList}>\n                <Scrollbar key={filter}>\n                    <div className={styles.dvListDropdownListContainer}>\n                        {filteredOptions.map((item, i) => {\n                            const selected = value.indexOf(item.value) > -1;\n                            const handleClick = () => {\n                                let set: Set<string>;\n                                if (selected) {\n                                    set = new Set(value.filter((sub) => sub !== item.value));\n                                } else {\n                                    set = new Set(multiple ? [...value, item.value] : [item.value]);\n                                }\n                                const newValue: string[] = [];\n                                options.forEach((opt) => {\n                                    if (set.has(opt.value)) {\n                                        newValue.push(opt.value);\n                                    }\n                                });\n\n                                onChange(newValue);\n                            };\n\n                            const index = item.label.toLocaleLowerCase().indexOf(lowerFilter!);\n                            return (\n                                <div key={i} className={styles.dvListDropdownItemContainer} onClick={handleClick}>\n                                    <div className={styles.dvListDropdownItem} style={{ background: item.color || DROP_DOWN_DEFAULT_COLOR }}>\n                                        {lowerFilter && item.label.toLowerCase().includes(lowerFilter)\n                                            ? (\n                                                <>\n                                                    <span>{item.label.substring(0, index)}</span>\n                                                    <span style={{ fontWeight: 'bold' }}>{item.label.substring(index, index + lowerFilter.length)}</span>\n                                                    <span>{item.label.substring(index + lowerFilter.length)}</span>\n                                                </>\n                                            )\n                                            : item.label}\n                                    </div>\n                                    <div className={styles.dvListDropdownSelectedIcon}>\n                                        {selected ? <CheckMarkSingle /> : null}\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </Scrollbar>\n            </div>\n            {showEditOnDropdown && hasPermission\n                ? (\n                    <>\n                        <div className={styles.dvListDropdownSplit} />\n                        <div className={styles.dvListDropdownEdit}>\n                            <a onClick={onEdit}>{localeService.t('dataValidation.list.edit')}</a>\n                        </div>\n                    </>\n                )\n                : null}\n        </div>\n    );\n};\n\nexport function ListDropDown(props: IDropdownComponentProps) {\n    const { location, hideFn } = props;\n    const { worksheet, row, col, unitId, subUnitId } = location;\n    const dataValidationModel = useDependency(DataValidationModel);\n    const [editingText, setEditingText] = useState('');\n    const commandService = useDependency(ICommandService);\n    const localeService = useDependency(LocaleService);\n    const [localValue, setLocalValue] = useState('');\n    const editorBridgeService = useDependency(IEditorBridgeService);\n    const instanceService = useDependency(IUniverInstanceService);\n    const ruleChange$ = useMemo(() => dataValidationModel.ruleChange$.pipe(debounceTime(16)), []);\n    const sheetsDataValidationModel = useDependency(SheetDataValidationModel);\n    useObservable(ruleChange$);\n    const anchorRect = RectPopup.useContext();\n    const cellWidth = (anchorRect.current?.right ?? 0) - (anchorRect.current?.left ?? 0);\n\n    useEffect(() => {\n        const dispose = commandService.onCommandExecuted((command) => {\n            if (command.id === RichTextEditingMutation.id) {\n                const params = command.params as IRichTextEditingMutationParams;\n                const { unitId } = params;\n                const unit = instanceService.getUnit<DocumentDataModel>(unitId, UniverInstanceType.UNIVER_DOC);\n                if (!unit || !editorBridgeService.isVisible().visible) return;\n                const text = BuildTextUtils.transform.getPlainText(unit.getSnapshot().body?.dataStream ?? '');\n                setEditingText(text);\n            }\n        });\n\n        return () => {\n            dispose.dispose();\n        };\n    }, [commandService, editorBridgeService, instanceService]);\n\n    if (!worksheet) {\n        return null;\n    }\n\n    const rule = sheetsDataValidationModel.getRuleByLocation(unitId, subUnitId, row, col);\n    if (!rule) {\n        return null;\n    }\n    const validator = sheetsDataValidationModel.getValidator(rule.type) as ListMultipleValidator | undefined;\n    if (!validator) {\n        return null;\n    }\n\n    const cellData = worksheet.getCell(row, col);\n\n    const showColor = rule?.renderMode === DataValidationRenderMode.CUSTOM || rule?.renderMode === undefined;\n\n    if (!cellData || !rule || !validator || validator.id.indexOf(DataValidationType.LIST) !== 0) {\n        return;\n    }\n\n    const multiple = rule.type === DataValidationType.LIST_MULTIPLE;\n    const list = validator.getListWithColor(rule, unitId, subUnitId);\n    const cellStr = localValue || getDataValidationCellValue(worksheet.getCellRaw(row, col));\n    const value = deserializeListOptions(cellStr);\n\n    const handleEdit = () => {\n        commandService.executeCommand(OpenValidationPanelOperation.id, {\n            ruleId: rule.uid,\n        });\n        hideFn();\n    };\n\n    const options = list.map((item) => ({\n        label: item.label,\n        value: item.label,\n        color: (showColor || item.color) ? item.color : 'transparent',\n    }));\n\n    return (\n        <SelectList\n            style={{ minWidth: cellWidth, maxWidth: Math.max(cellWidth, 200) }}\n            title={multiple ? localeService.t('dataValidation.listMultiple.dropdown') : localeService.t('dataValidation.list.dropdown')}\n            value={value}\n            multiple={multiple}\n            onChange={async (newValue) => {\n                const str = serializeListOptions(newValue);\n                const params: ISetRangeValuesCommandParams = {\n                    unitId,\n                    subUnitId,\n                    range: {\n                        startColumn: col,\n                        endColumn: col,\n                        startRow: row,\n                        endRow: row,\n                    },\n                    value: {\n                        v: str,\n                        p: null,\n                        f: null,\n                        si: null,\n                    },\n                };\n\n                if (editorBridgeService.isVisible()) {\n                    commandService.executeCommand(SetCellEditVisibleOperation.id, {\n                        visible: false,\n                        eventType: DeviceInputEventType.Keyboard,\n                        unitId,\n                        keycode: KeyCode.ESC,\n                    });\n                }\n                setLocalValue(str);\n                if (!multiple) {\n                    hideFn();\n                }\n\n                if (editorBridgeService.isVisible().visible) {\n                    await commandService.executeCommand(SetCellEditVisibleOperation.id, {\n                        visible: false,\n                        eventType: DeviceInputEventType.Keyboard,\n                        unitId,\n                        keycode: KeyCode.ESC,\n                    } as IEditorBridgeServiceVisibleParam);\n                }\n                commandService.executeCommand(SetRangeValuesCommand.id, params);\n            }}\n            options={options}\n            onEdit={handleEdit}\n            filter={editingText}\n            location={location}\n        />\n    );\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DROP_DOWN_DEFAULT_COLOR = '#ECECEC';\n", "export default {\n  \"dvListDropdown\": \"univer-dv-list-dropdown\",\n  \"dvListDropdownTitle\": \"univer-dv-list-dropdown-title\",\n  \"dvListDropdownList\": \"univer-dv-list-dropdown-list\",\n  \"dvListDropdownListContainer\": \"univer-dv-list-dropdown-list-container\",\n  \"dvListDropdownSelectedIcon\": \"univer-dv-list-dropdown-selected-icon\",\n  \"dvListDropdownItemContainer\": \"univer-dv-list-dropdown-item-container\",\n  \"dvListDropdownItem\": \"univer-dv-list-dropdown-item\",\n  \"dvListDropdownSplit\": \"univer-dv-list-dropdown-split\",\n  \"dvListDropdownEdit\": \"univer-dv-list-dropdown-edit\"\n};import \"ni:sha-256;mIBkoOS1RVx4XWML6LybOzfWjuMl7JYL2WYHgInn6vA\";", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DataValidationOperator, DataValidationType, IDataValidationRuleBase, IDataValidationRuleOptions, IExecutionOptions, ISheetDataValidationRule, IUnitRange, Workbook } from '@univerjs/core';\nimport type { IUpdateSheetDataValidationRangeCommandParams } from '@univerjs/sheets-data-validation';\nimport type { IRangeSelectorInstance } from '@univerjs/sheets-formula-ui';\nimport { debounce, ICommandService, isUnitRangesEqual, IUniverInstanceService, LocaleService, RedoCommand, shallowEqual, UndoCommand, UniverInstanceType } from '@univerjs/core';\nimport { DataValidationModel, DataValidatorRegistryScope, DataValidatorRegistryService, getRuleOptions, getRuleSetting, TWO_FORMULA_OPERATOR_COUNT } from '@univerjs/data-validation';\nimport { Button, Checkbox, FormLayout, Select } from '@univerjs/design';\nimport { deserializeRangeWithSheet, serializeRange } from '@univerjs/engine-formula';\nimport { SheetsSelectionsService } from '@univerjs/sheets';\nimport { RemoveSheetDataValidationCommand, UpdateSheetDataValidationOptionsCommand, UpdateSheetDataValidationRangeCommand, UpdateSheetDataValidationSettingCommand } from '@univerjs/sheets-data-validation';\nimport { RangeSelector } from '@univerjs/sheets-formula-ui';\nimport { ComponentManager, useDependency, useEvent, useObservable } from '@univerjs/ui';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { DataValidationPanelService } from '../../../services/data-validation-panel.service';\nimport { DataValidationOptions } from '../options';\n\nimport styles from './index.module.less';\n\n// debounce execute commands, for better redo-undo experience\nconst debounceExecuteFactory = (commandService: ICommandService) => debounce(\n    async (id: string, params?: any, options?: IExecutionOptions | undefined, callback?: (success: boolean) => void) => {\n        const res = await commandService.executeCommand(id, params, options);\n        callback?.(res);\n    },\n    1000\n);\nfunction getSheetIdByName(univerInstanceService: IUniverInstanceService, unitId: string, name: string) {\n    if (unitId) {\n        return univerInstanceService.getUnit<Workbook>(unitId)?.getSheetBySheetName(name)?.getSheetId() || '';\n    }\n    return univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET)?.getSheetBySheetName(name)?.getSheetId() || '';\n}\nexport function DataValidationDetail() {\n    const [key, setKey] = useState(0);\n    const dataValidationPanelService = useDependency(DataValidationPanelService);\n    const activeRuleInfo = useObservable(dataValidationPanelService.activeRule$, dataValidationPanelService.activeRule)!;\n    const { unitId, subUnitId, rule } = activeRuleInfo || {};\n    const ruleId = rule.uid;\n    const validatorService = useDependency(DataValidatorRegistryService);\n    const univerInstanceService = useDependency(IUniverInstanceService);\n    const componentManager = useDependency(ComponentManager);\n    const commandService = useDependency(ICommandService);\n    const dataValidationModel = useDependency(DataValidationModel);\n    const localeService = useDependency(LocaleService);\n    const [localRule, setLocalRule] = useState<ISheetDataValidationRule>(rule);\n    const validator = validatorService.getValidatorItem(localRule.type);\n    const [showError, setShowError] = useState(false);\n    const validators = validatorService.getValidatorsByScope(DataValidatorRegistryScope.SHEET);\n    const [localRanges, setLocalRanges] = useState<IUnitRange[]>(() => localRule.ranges.map((i) => ({ unitId: '', sheetId: '', range: i })));\n    const debounceExecute = useMemo(() => debounceExecuteFactory(commandService), [commandService]);\n    const [isRangeError, setIsRangeError] = useState(false);\n    const [isFocusRangeSelector, isFocusRangeSelectorSet] = useState(false);\n    const rangeSelectorInstance = useRef<IRangeSelectorInstance>(null);\n    const sheetSelectionService = useDependency(SheetsSelectionsService);\n\n    useEffect(() => {\n        return () => {\n            const currentSelection = sheetSelectionService.getCurrentLastSelection();\n            if (currentSelection) {\n                sheetSelectionService.setSelections([currentSelection]);\n            }\n        };\n    }, [sheetSelectionService]);\n\n    useEffect(() => {\n        commandService.onCommandExecuted((commandInfo) => {\n            if (commandInfo.id === UndoCommand.id || commandInfo.id === RedoCommand.id) {\n                setTimeout(() => {\n                    const activeRule = dataValidationModel.getRuleById(unitId, subUnitId, ruleId) as ISheetDataValidationRule;\n                    setKey((k) => k + 1);\n                    if (activeRule) {\n                        setLocalRule(activeRule);\n                        setLocalRanges(activeRule.ranges.map((i) => ({ unitId: '', sheetId: '', range: i })));\n                    }\n                }, 20);\n            }\n        });\n    }, [commandService, dataValidationModel, ruleId, subUnitId, unitId]);\n\n    if (!validator) {\n        return null;\n    }\n\n    const operators = validator.operators;\n    const operatorNames = validator.operatorNames;\n    const isTwoFormula = localRule.operator ? TWO_FORMULA_OPERATOR_COUNT.includes(localRule.operator) : false;\n\n    const handleOk = () => {\n        if (rangeSelectorInstance.current?.editor?.isFocus()) {\n            handleUpdateRuleRanges(rangeSelectorInstance.current?.getValue());\n        }\n        if (!localRule.ranges.length || isRangeError) {\n            return;\n        }\n        if (validator.validatorFormula(localRule, unitId, subUnitId).success) {\n            dataValidationPanelService.setActiveRule(null);\n        } else {\n            setShowError(true);\n        }\n    };\n\n    const handleUpdateRuleRanges = useEvent((rangeText: string) => {\n        const unitRanges = rangeText.split(',').filter(Boolean).map(deserializeRangeWithSheet).map((unitRange) => {\n            const sheetName = unitRange.sheetName;\n            if (sheetName) {\n                const sheetId = getSheetIdByName(univerInstanceService, unitRange.unitId, sheetName);\n                return { ...unitRange, sheetId };\n            }\n            return {\n                ...unitRange,\n                sheetId: '',\n            };\n        });\n        if (isUnitRangesEqual(unitRanges, localRanges)) {\n            return;\n        }\n        setLocalRanges(unitRanges);\n        const ranges = unitRanges.filter((i) => (!i.unitId || i.unitId === unitId) && (!i.sheetId || i.sheetId === subUnitId)).map((i) => i.range);\n        setLocalRule({\n            ...localRule,\n            ranges,\n        });\n\n        if (ranges.length === 0) {\n            return;\n        }\n\n        const params: IUpdateSheetDataValidationRangeCommandParams = {\n            unitId,\n            subUnitId,\n            ruleId,\n            ranges,\n        };\n\n        debounceExecute(UpdateSheetDataValidationRangeCommand.id, params);\n    });\n\n    const handleUpdateRuleSetting = (setting: IDataValidationRuleBase) => {\n        if (shallowEqual(setting, getRuleSetting(localRule))) {\n            return;\n        }\n\n        setLocalRule({\n            ...localRule,\n            ...setting,\n        });\n        const params = {\n            unitId,\n            subUnitId,\n            ruleId,\n            setting,\n        };\n\n        debounceExecute(\n            UpdateSheetDataValidationSettingCommand.id,\n            params,\n            undefined\n        );\n    };\n\n    const handleDelete = async () => {\n        await commandService.executeCommand(RemoveSheetDataValidationCommand.id, {\n            ruleId,\n            unitId,\n            subUnitId,\n        });\n        dataValidationPanelService.setActiveRule(null);\n    };\n\n    const baseRule = {\n        type: localRule.type,\n        operator: localRule.operator,\n        formula1: localRule.formula1,\n        formula2: localRule.formula2,\n        allowBlank: localRule.allowBlank,\n    };\n\n    const handleChangeType = (newType: string) => {\n        const validator = validatorService.getValidatorItem(newType);\n        if (!validator) {\n            return;\n        }\n\n        const operators = validator.operators;\n        const rule = dataValidationModel.getRuleById(unitId, subUnitId, ruleId);\n        const newRule = (newType === rule?.type || (newType.includes('list') && rule?.type.includes('list')))\n            ? {\n                ...rule,\n                type: newType as DataValidationType,\n            }\n            : {\n                ...localRule,\n                type: newType as DataValidationType,\n                operator: operators[0],\n                formula1: undefined,\n                formula2: undefined,\n            };\n        setLocalRule(newRule);\n\n        commandService.executeCommand(UpdateSheetDataValidationSettingCommand.id, {\n            unitId,\n            subUnitId,\n            ruleId: localRule.uid,\n            setting: getRuleSetting(newRule),\n        });\n    };\n\n    const FormulaInput = componentManager.get(validator.formulaInput!);\n    const rangeStr = useMemo(() => localRanges.map((i) => serializeRange(i.range)).join(','), []);\n\n    const options: IDataValidationRuleOptions = getRuleOptions(localRule);\n\n    const handleUpdateRuleOptions = (newOptions: IDataValidationRuleOptions) => {\n        if (shallowEqual(newOptions, getRuleOptions(localRule))) {\n            return;\n        }\n        setLocalRule({\n            ...localRule,\n            ...newOptions,\n        });\n\n        debounceExecute(\n            UpdateSheetDataValidationOptionsCommand.id,\n            {\n                unitId,\n                subUnitId,\n                ruleId,\n                options: newOptions,\n            }\n        );\n    };\n\n    return (\n        <div className={styles.dataValidationDetail}>\n            <FormLayout\n                label={localeService.t('dataValidation.panel.range')}\n                error={(!localRule.ranges.length || isRangeError) ? localeService.t('dataValidation.panel.rangeError') : ''}\n            >\n                <RangeSelector\n                    selectorRef={rangeSelectorInstance}\n                    unitId={unitId}\n                    subUnitId={subUnitId}\n                    initialValue={rangeStr}\n                    onChange={(doc, str) => {\n                        if (!isFocusRangeSelector && rangeSelectorInstance.current?.verify()) {\n                            handleUpdateRuleRanges(str);\n                        }\n                    }}\n                    onFocusChange={(focusing, str) => {\n                        isFocusRangeSelectorSet(focusing);\n                        if (!focusing && str && rangeSelectorInstance.current?.verify()) {\n                            handleUpdateRuleRanges(str);\n                        }\n                    }}\n                    onVerify={(isValid) => setIsRangeError(!isValid)}\n                />\n            </FormLayout>\n            <FormLayout label={localeService.t('dataValidation.panel.type')}>\n                <Select\n                    options={validators?.map((validator) => ({\n                        label: localeService.t(validator.title),\n                        value: validator.id,\n                    }))}\n                    value={localRule.type}\n                    onChange={handleChangeType}\n                    className={styles.dataValidationDetailFormItem}\n                />\n            </FormLayout>\n            {operators?.length\n                ? (\n                    <FormLayout label={localeService.t('dataValidation.panel.operator')}>\n                        <Select\n                            options={operators.map((op, i) => ({\n                                value: `${op}`,\n                                label: operatorNames[i],\n                            }))}\n                            value={`${localRule.operator}`}\n                            onChange={(operator) => {\n                                handleUpdateRuleSetting({\n                                    ...baseRule,\n                                    operator: operator as DataValidationOperator,\n                                });\n                            }}\n                            className={styles.dataValidationDetailFormItem}\n                        />\n                    </FormLayout>\n                )\n                : null}\n            {FormulaInput\n                ? (\n                    <FormLayout>\n                        <FormulaInput\n                            key={key + localRule.type}\n                            isTwoFormula={isTwoFormula}\n                            value={{\n                                formula1: localRule.formula1,\n                                formula2: localRule.formula2,\n                            }}\n                            onChange={(value: any) => {\n                                handleUpdateRuleSetting({\n                                    ...baseRule,\n                                    ...value,\n                                });\n                            }}\n                            showError={showError}\n                            validResult={validator.validatorFormula(localRule, unitId, subUnitId)}\n                            unitId={unitId}\n                            subUnitId={subUnitId}\n                            ruleId={ruleId}\n                        />\n                    </FormLayout>\n                )\n                : null}\n            <FormLayout>\n                <Checkbox\n                    checked={(localRule.allowBlank ?? true)}\n                    onChange={() => handleUpdateRuleSetting({\n                        ...baseRule,\n                        allowBlank: !(localRule.allowBlank ?? true),\n                    })}\n                >\n                    {localeService.t('dataValidation.panel.allowBlank')}\n                </Checkbox>\n            </FormLayout>\n            <DataValidationOptions value={options} onChange={handleUpdateRuleOptions} extraComponent={validator.optionsInput} />\n            <div className={styles.dataValidationDetailButtons}>\n                <Button className={styles.dataValidationDetailButton} onClick={handleDelete}>\n                    {localeService.t('dataValidation.panel.removeRule')}\n                </Button>\n                <Button className={styles.dataValidationDetailButton} type=\"primary\" onClick={handleOk}>\n                    {localeService.t('dataValidation.panel.done')}\n                </Button>\n            </div>\n        </div>\n    );\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDataValidationRuleOptions } from '@univerjs/core';\nimport { DataValidationErrorStyle, LocaleService } from '@univerjs/core';\nimport { Checkbox, FormLayout, Input, Radio, RadioGroup } from '@univerjs/design';\nimport { MoreDownSingle, MoreUpSingle } from '@univerjs/icons';\nimport { ComponentManager, useDependency } from '@univerjs/ui';\nimport React, { useState } from 'react';\nimport styles from './index.module.less';\n\nexport interface IDataValidationOptionsParams {\n    value: IDataValidationRuleOptions;\n    onChange: (value: IDataValidationRuleOptions) => void;\n    extraComponent?: string;\n}\n\nexport function DataValidationOptions(props: IDataValidationOptionsParams) {\n    const localeService = useDependency(LocaleService);\n    const componentManager = useDependency(ComponentManager);\n    const { value, onChange, extraComponent } = props;\n    const [show, setShow] = useState(false);\n\n    const ExtraOptions = extraComponent ? componentManager.get(extraComponent) : null;\n\n    return (\n        <>\n            <div className={styles.dataValidationOptionsButton} onClick={() => setShow(!show)}>\n                {localeService.t('dataValidation.panel.options')}\n                {show ? <MoreUpSingle className={styles.dataValidationOptionsButtonIcon} /> : <MoreDownSingle className={styles.dataValidationOptionsButtonIcon} />}\n            </div>\n            {show && (\n                <>\n                    {ExtraOptions ? <ExtraOptions value={value} onChange={onChange} /> : null}\n                    <FormLayout\n                        label={localeService.t('dataValidation.panel.invalid')}\n                    >\n                        <RadioGroup\n                            value={`${value.errorStyle ?? DataValidationErrorStyle.WARNING}`}\n                            onChange={(errorStyle) => onChange({ ...value, errorStyle: +errorStyle })}\n                        >\n                            <Radio value={`${DataValidationErrorStyle.WARNING}`}>\n                                {localeService.t('dataValidation.panel.showWarning')}\n                            </Radio>\n                            <Radio value={`${DataValidationErrorStyle.STOP}`}>\n                                {localeService.t('dataValidation.panel.rejectInput')}\n                            </Radio>\n                        </RadioGroup>\n                    </FormLayout>\n                    <FormLayout\n                        label={localeService.t('dataValidation.panel.messageInfo')}\n                    >\n                        <Checkbox\n                            checked={value.showErrorMessage}\n                            onChange={() => onChange({\n                                ...value,\n                                showErrorMessage: !value.showErrorMessage,\n                            })}\n                        >\n                            {localeService.t('dataValidation.panel.showInfo')}\n                        </Checkbox>\n                    </FormLayout>\n                    {value.showErrorMessage\n                        ? (\n                            <FormLayout>\n                                <Input value={value.error} onChange={(error) => onChange({ ...value, error })} />\n                            </FormLayout>\n                        )\n                        : null}\n                </>\n            )}\n        </>\n    );\n}\n", "export default {\n  \"dataValidationOptionsButton\": \"univer-data-validation-options-button\",\n  \"dataValidationOptionsButtonIcon\": \"univer-data-validation-options-button-icon\"\n};import \"ni:sha-256;1H7AV-bymQtsy7DIvhn8aF06WpRD5DGGPtIMsR4QBLs\";", "export default {\n  \"dataValidationDetail\": \"univer-data-validation-detail\",\n  \"dataValidationDetailFormItem\": \"univer-data-validation-detail-form-item\",\n  \"dataValidationDetailButtons\": \"univer-data-validation-detail-buttons\",\n  \"dataValidationDetailButton\": \"univer-data-validation-detail-button\"\n};import \"ni:sha-256;qnAjK9a2NJeaVa1ObUVl4DFBMqkNpZSond4kGHJ9o48\";", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ISheetDataValidationRule, Workbook } from '@univerjs/core';\nimport type { IAddSheetDataValidationCommandParams } from '@univerjs/sheets-data-validation';\nimport { ICommandService, Injector, IUniverInstanceService, LocaleService, UniverInstanceType } from '@univerjs/core';\nimport { Button } from '@univerjs/design';\nimport { checkRangesEditablePermission } from '@univerjs/sheets';\nimport { AddSheetDataValidationCommand, createDefaultNewRule, RemoveSheetAllDataValidationCommand, SheetDataValidationModel } from '@univerjs/sheets-data-validation';\nimport { useDependency, useObservable } from '@univerjs/ui';\nimport React, { useEffect, useState } from 'react';\nimport { DataValidationPanelService } from '../../../services/data-validation-panel.service';\nimport { DataValidationItem } from '../item';\nimport styles from './index.module.less';\n\nexport function DataValidationList(props: { workbook: Workbook }) {\n    const sheetDataValidationModel = useDependency(SheetDataValidationModel);\n    const univerInstanceService = useDependency(IUniverInstanceService);\n    const commandService = useDependency(ICommandService);\n    const injector = useDependency(Injector);\n    const dataValidationPanelService = useDependency(DataValidationPanelService);\n    const localeService = useDependency(LocaleService);\n    const [rules, setRules] = useState<ISheetDataValidationRule[]>([]);\n\n    const { workbook } = props;\n    const worksheet = useObservable(workbook.activeSheet$, undefined, true)!;\n    const unitId = workbook.getUnitId();\n    const subUnitId = worksheet?.getSheetId();\n\n    useEffect(() => {\n        setRules(sheetDataValidationModel.getRules(unitId, subUnitId));\n\n        const subscription = sheetDataValidationModel.ruleChange$.subscribe((change) => {\n            if (change.unitId === unitId && change.subUnitId === subUnitId) {\n                setRules(sheetDataValidationModel.getRules(unitId, subUnitId));\n            }\n        });\n\n        return () => {\n            subscription.unsubscribe();\n        };\n    }, [unitId, subUnitId, sheetDataValidationModel]);\n\n    const handleAddRule = async () => {\n        const rule = createDefaultNewRule(injector);\n        const params: IAddSheetDataValidationCommandParams = {\n            unitId,\n            subUnitId,\n            rule,\n        };\n        await commandService.executeCommand(AddSheetDataValidationCommand.id, params);\n        dataValidationPanelService.setActiveRule({\n            unitId,\n            subUnitId,\n            rule,\n        });\n    };\n\n    const handleRemoveAll = () => {\n        commandService.executeCommand(RemoveSheetAllDataValidationCommand.id, {\n            unitId,\n            subUnitId,\n        });\n    };\n\n    const getDvRulesByPermissionCorrect = (rules: ISheetDataValidationRule[]) => {\n        const workbook = univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET)!;\n        const worksheet = workbook.getActiveSheet();\n        const unitId = workbook.getUnitId();\n        const subUnitId = worksheet.getSheetId();\n        const rulesByPermissionCheck = rules.map((rule) => {\n            const hasPermission = checkRangesEditablePermission(injector, unitId, subUnitId, rule.ranges);\n            if (hasPermission) {\n                return { ...rule };\n            } else {\n                return { ...rule, disable: true };\n            }\n        });\n\n        return rulesByPermissionCheck;\n    };\n\n    const rulesByPermissionCheck: (ISheetDataValidationRule & { disable?: boolean })[] = getDvRulesByPermissionCorrect(rules);\n    const hasDisableRule = rulesByPermissionCheck?.some((rule) => rule.disable);\n\n    return (\n        <div className={styles.dataValidationList}>\n            {rulesByPermissionCheck?.map((rule) => (\n                <DataValidationItem\n                    unitId={unitId}\n                    subUnitId={subUnitId}\n                    onClick={() => {\n                        if (rule.disable) return;\n                        dataValidationPanelService.setActiveRule({\n                            unitId,\n                            subUnitId,\n                            rule,\n                        });\n                    }}\n                    rule={rule}\n                    key={rule.uid}\n                    disable={rule.disable ?? false}\n                />\n            ))}\n            <div className={styles.dataValidationListButtons}>\n                {(rules.length && !hasDisableRule)\n                    ? (\n                        <Button className={styles.dataValidationListButton} onClick={handleRemoveAll}>\n                            {localeService.t('dataValidation.panel.removeAll')}\n                        </Button>\n                    )\n                    : null}\n                <Button className={styles.dataValidationListButton} type=\"primary\" onClick={handleAddRule}>\n                    {localeService.t('dataValidation.panel.add')}\n                </Button>\n            </div>\n        </div>\n    );\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ISheetDataValidationRule } from '@univerjs/core';\nimport { ColorKit, ICommandService, ThemeService } from '@univerjs/core';\nimport { DataValidatorRegistryService } from '@univerjs/data-validation';\nimport { serializeRange } from '@univerjs/engine-formula';\nimport { DeleteSingle } from '@univerjs/icons';\nimport { RemoveSheetDataValidationCommand } from '@univerjs/sheets-data-validation';\nimport { IMarkSelectionService } from '@univerjs/sheets-ui';\nimport { useDependency, useObservable } from '@univerjs/ui';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport styles from './index.module.less';\n\nexport interface IDataValidationDetailProps {\n    rule: ISheetDataValidationRule;\n    onClick: () => void;\n    unitId: string;\n    subUnitId: string;\n    disable?: boolean;\n}\n\nexport const DataValidationItem = (props: IDataValidationDetailProps) => {\n    const { rule, onClick, unitId, subUnitId, disable } = props;\n    const validatorRegistry = useDependency(DataValidatorRegistryService);\n    const commandService = useDependency(ICommandService);\n    const markSelectionService = useDependency(IMarkSelectionService);\n    const validator = validatorRegistry.getValidatorItem(rule.type);\n    const ids = useRef<(string | null)[]>(undefined);\n    const [isHover, setIsHover] = useState(false);\n    const themeService = useDependency(ThemeService);\n    const theme = useObservable(themeService.currentTheme$);\n    const style = useMemo(() => {\n        const color = theme?.loopColor2 ?? '#49B811';\n        const rgb = new ColorKit(color).toRgb();\n        return {\n            fill: `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.1)`,\n            stroke: color,\n        };\n    }, [theme]);\n    const handleDelete = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        commandService.executeCommand(RemoveSheetDataValidationCommand.id, {\n            ruleId: rule.uid,\n            unitId,\n            subUnitId,\n        });\n        e.stopPropagation();\n    };\n\n    useEffect(() => {\n        return () => {\n            if (ids.current) {\n                ids.current?.forEach((id) => {\n                    id && markSelectionService.removeShape(id);\n                });\n            }\n        };\n    }, [markSelectionService]);\n\n    return (\n        <div\n            className={styles.dataValidationItemContainer}\n            onClick={onClick}\n            onMouseEnter={() => {\n                if (disable) return;\n                setIsHover(true);\n                ids.current = rule.ranges.map((range) => markSelectionService.addShape({\n                    range,\n                    style,\n                    primary: null,\n                }));\n            }}\n            onMouseLeave={() => {\n                setIsHover(false);\n                ids.current?.forEach((id) => {\n                    id && markSelectionService.removeShape(id);\n                });\n                ids.current = undefined;\n            }}\n        >\n            <div className={styles.dataValidationItemTitle}>\n                {validator?.generateRuleName(rule)}\n            </div>\n            <div className={styles.dataValidationItemContent}>\n                {rule.ranges.map((range) => serializeRange(range)).join(',')}\n            </div>\n            {isHover\n                ? (\n                    <div className={styles.dataValidationItemIcon} onClick={handleDelete}>\n                        <DeleteSingle />\n                    </div>\n                )\n                : null}\n        </div>\n    );\n};\n", "export default {\n  \"dataValidationItemContainer\": \"univer-data-validation-item-container\",\n  \"dataValidationItemTitle\": \"univer-data-validation-item-title\",\n  \"dataValidationItemContent\": \"univer-data-validation-item-content\",\n  \"dataValidationItemIcon\": \"univer-data-validation-item-icon\"\n};import \"ni:sha-256;093baH2rz582iP3FScDyiHXZ8saAbU1xpiKQ6HwIXO4\";", "export default {\n  \"dataValidationList\": \"univer-data-validation-list\",\n  \"dataValidationListButtons\": \"univer-data-validation-list-buttons\",\n  \"dataValidationListButton\": \"univer-data-validation-list-button\"\n};import \"ni:sha-256;IRJWRzBEH3QlFCbNVpCcTNJkDtW-zHEOjTQsS7Eyma8\";", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Workbook } from '@univerjs/core';\nimport { IUniverInstanceService, UniverInstanceType } from '@univerjs/core';\nimport { useDependency, useObservable } from '@univerjs/ui';\nimport { of } from 'rxjs';\nimport { DataValidationPanelService } from '../../../services/data-validation-panel.service';\nimport { DataValidationDetail } from '../detail';\nimport { DataValidationList } from '../list';\n\nexport const DataValidationPanel = () => {\n    const dataValidationPanelService = useDependency(DataValidationPanelService);\n    const activeRule = useObservable(dataValidationPanelService.activeRule$, dataValidationPanelService.activeRule);\n    const univerInstanceService = useDependency(IUniverInstanceService);\n    const workbook = useObservable(\n        () => univerInstanceService.getCurrentTypeOfUnit$<Workbook>(UniverInstanceType.UNIVER_SHEET),\n        undefined,\n        undefined,\n        []\n    );\n    const worksheet = useObservable(() => workbook?.activeSheet$ ?? of(null), undefined, undefined, []);\n    if (!workbook || !worksheet) return null;\n\n    return (\n        activeRule && activeRule.subUnitId === worksheet.getSheetId()\n            ? <DataValidationDetail key={activeRule.rule.uid} />\n            : <DataValidationList workbook={workbook} />\n    );\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { DateDropdown } from './date-dropdown';\nexport { ListDropDown } from './list-dropdown';\nexport { DataValidationPanel } from './panel';\nexport const LIST_DROPDOWN_KEY = 'data-validation.list.dropdown';\nexport const DATE_DROPDOWN_KEY = 'data-validation.date.dropdown';\n", "export default {\n  \"dataValidationFormula\": \"univer-data-validation-formula\",\n  \"dataValidationFormulaAnd\": \"univer-data-validation-formula-and\",\n  \"dataValidationFormulaListItem\": \"univer-data-validation-formula-list-item\",\n  \"dataValidationFormulaListItemIcon\": \"univer-data-validation-formula-list-item-icon\",\n  \"dataValidationFormulaListItemDrag\": \"univer-data-validation-formula-list-item-drag\",\n  \"dataValidationFormulaListAdd\": \"univer-data-validation-formula-list-add\",\n  \"dataValidationFormulaColorSelect\": \"univer-data-validation-formula-color-select\",\n  \"dataValidationFormulaColorSelectPanel\": \"univer-data-validation-formula-color-select-panel\",\n  \"dataValidationFormulaColorItem\": \"univer-data-validation-formula-color-item\"\n};import \"ni:sha-256;G6aCyb7vELMMPG672oEATbTnfBt8XmB8OBmxQYFD_rA\";", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IFormulaInputProps } from '@univerjs/data-validation';\nimport { LocaleService } from '@univerjs/core';\nimport { FormLayout, Input } from '@univerjs/design';\nimport { useDependency } from '@univerjs/ui';\nimport styles from './index.module.less';\n\nexport const BaseFormulaInput = (props: IFormulaInputProps) => {\n    const { isTwoFormula = false, value, onChange, showError, validResult } = props;\n    const localeService = useDependency(LocaleService);\n    const formula1Res = showError ? validResult?.formula1 : '';\n    const formula2Res = showError ? validResult?.formula2 : '';\n\n    if (isTwoFormula) {\n        return (\n            <>\n                <FormLayout error={formula1Res}>\n                    <Input\n                        className={styles.dataValidationFormula}\n                        placeholder={localeService.t('dataValidation.panel.formulaPlaceholder')}\n                        value={value?.formula1}\n                        onChange={(newValue) => {\n                            onChange?.({\n                                ...value,\n                                formula1: newValue,\n                            });\n                        }}\n                    />\n                </FormLayout>\n                <div className={styles.dataValidationFormulaAnd}>\n                    {localeService.t('dataValidation.panel.formulaAnd')}\n                </div>\n                <FormLayout error={formula2Res}>\n                    <Input\n                        className={styles.dataValidationFormula}\n                        placeholder={localeService.t('dataValidation.panel.formulaPlaceholder')}\n                        value={value?.formula2}\n                        onChange={(newValue) => {\n                            onChange?.({\n                                ...value,\n                                formula2: newValue,\n                            });\n                        }}\n                    />\n                </FormLayout>\n            </>\n        );\n    }\n\n    return (\n        <FormLayout error={formula1Res}>\n            <Input\n                className={styles.dataValidationFormula}\n                placeholder={localeService.t('dataValidation.panel.formulaPlaceholder')}\n                value={value?.formula1}\n                onChange={(newValue) => {\n                    onChange?.({ formula1: newValue });\n                }}\n            />\n        </FormLayout>\n    );\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IFormulaInputProps } from '@univerjs/data-validation';\nimport { LocaleService } from '@univerjs/core';\nimport { Checkbox, FormLayout, Input } from '@univerjs/design';\nimport { useDependency } from '@univerjs/ui';\nimport React, { useState } from 'react';\nimport styles from './index.module.less';\n\nexport function CheckboxFormulaInput(props: IFormulaInputProps) {\n    const { value, onChange, showError, validResult } = props;\n    const localeService = useDependency(LocaleService);\n    const formula1Res = showError ? validResult?.formula1 : '';\n    const formula2Res = showError ? validResult?.formula2 : '';\n\n    const [checked, setChecked] = useState(!(value?.formula1 === undefined && value?.formula2 === undefined));\n\n    return (\n        <>\n            <FormLayout>\n                <Checkbox\n                    checked={checked}\n                    onChange={(newValue) => {\n                        if (newValue) {\n                            setChecked(true);\n                        } else {\n                            setChecked(false);\n                            onChange?.({\n                                ...value,\n                                formula1: undefined,\n                                formula2: undefined,\n                            });\n                        }\n                    }}\n                >\n                    {localeService.t('dataValidation.checkbox.tips')}\n                </Checkbox>\n            </FormLayout>\n            {checked\n                ? (\n                    <FormLayout label={localeService.t('dataValidation.checkbox.checked')} error={formula1Res}>\n                        <Input\n                            className={styles.dataValidationFormula}\n                            placeholder={localeService.t('dataValidation.panel.valuePlaceholder')}\n                            value={value?.formula1}\n                            onChange={(newValue) => {\n                                onChange?.({\n                                    ...value,\n                                    formula1: newValue || undefined,\n                                });\n                            }}\n                        />\n                    </FormLayout>\n                )\n                : null}\n            {checked\n                ? (\n                    <FormLayout label={localeService.t('dataValidation.checkbox.unchecked')} error={formula2Res}>\n                        <Input\n                            className={styles.dataValidationFormula}\n                            placeholder={localeService.t('dataValidation.panel.valuePlaceholder')}\n                            value={value?.formula2}\n                            onChange={(newValue) => {\n                                onChange?.({\n                                    ...value,\n                                    formula2: newValue || undefined,\n                                });\n                            }}\n                        />\n                    </FormLayout>\n                )\n                : null}\n        </>\n    );\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IFormulaInputProps } from '@univerjs/data-validation';\nimport { FormulaEditor } from '@univerjs/sheets-formula-ui';\nimport { useSidebarClick } from '@univerjs/ui';\nimport React, { useRef, useState } from 'react';\n\nexport function CustomFormulaInput(props: IFormulaInputProps) {\n    const { unitId, subUnitId, value, onChange, showError, validResult } = props;\n    const formula1Res = showError ? validResult?.formula1 : undefined;\n    const formulaEditorActionsRef = useRef<Parameters<typeof FormulaEditor>[0]['actions']>({});\n    const [isFocusFormulaEditor, isFocusFormulaEditorSet] = useState(false);\n\n    useSidebarClick((e: MouseEvent) => {\n        const handleOutClick = formulaEditorActionsRef.current?.handleOutClick;\n        handleOutClick && handleOutClick(e, () => isFocusFormulaEditorSet(false));\n    });\n\n    return (\n        <FormulaEditor\n            initValue={value?.formula1 ?? '=' as any}\n            unitId={unitId}\n            subUnitId={subUnitId}\n            isFocus={isFocusFormulaEditor}\n            onChange={(newValue) => {\n                const newFormula = (newValue ?? '').trim();\n                if (newFormula === value?.formula1) {\n                    return;\n                }\n\n                onChange?.({\n                    ...value,\n                    formula1: newFormula,\n                });\n            }}\n            errorText={formula1Res}\n            onFocus={() => isFocusFormulaEditorSet(true)}\n            actions={formulaEditorActionsRef.current}\n            isSupportAcrossSheet\n        />\n    );\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IFormulaInputProps } from '@univerjs/data-validation';\nimport type { ListValidator } from '@univerjs/sheets-data-validation';\nimport type { CSSProperties } from 'react';\nimport { DataValidationType, isFormulaString, LocaleService, Tools } from '@univerjs/core';\nimport { DataValidationModel, DataValidatorRegistryService } from '@univerjs/data-validation';\nimport { clsx, DraggableList, FormLayout, Input, Radio, RadioGroup, Select } from '@univerjs/design';\nimport { DeleteSingle, IncreaseSingle, SequenceSingle } from '@univerjs/icons';\nimport { DataValidationFormulaController, deserializeListOptions, serializeListOptions } from '@univerjs/sheets-data-validation';\nimport { FormulaEditor } from '@univerjs/sheets-formula-ui';\nimport { useDependency, useEvent, useObservable, useSidebarClick } from '@univerjs/ui';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { debounceTime } from 'rxjs';\nimport { DROP_DOWN_DEFAULT_COLOR } from '../../../const';\nimport styles from './index.module.less';\n\nconst DEFAULT_COLOR_PRESET = [\n    '#FFFFFF',\n    '#FEE7E7',\n    '#FEF0E6',\n    '#EFFBD0',\n    '#E4F4FE',\n    '#E8ECFD',\n    '#F1EAFA',\n    '#FDE8F3',\n    '#E5E5E5',\n    '#FDCECE',\n    '#FDC49B',\n    '#DEF6A2',\n    '#9FDAFF',\n    '#D0D9FB',\n    '#E3D5F6',\n    '#FBD0E8',\n    '#656565',\n    '#FE4B4B',\n    '#FF8C51',\n    '#8BBB11',\n    '#0B9EFB',\n    '#3A60F7',\n    '#9E6DE3',\n    '#F248A6',\n];\n\ninterface IDropdownItem {\n    color: string;\n    label: string;\n    isRef: boolean;\n    id: string;\n}\n\ninterface IColorSelectProps {\n    value: string;\n    onChange: (value: string) => void;\n    disabled?: boolean;\n}\n\nconst ColorSelect = (props: IColorSelectProps) => {\n    const { value, onChange, disabled } = props;\n    const [open, setOpen] = useState(false);\n    return (\n        <Select\n            disabled={disabled}\n            open={open}\n            onDropdownVisibleChange={setOpen}\n            dropdownStyle={{ width: 112 }}\n            style={{ width: 96, cursor: 'pointer' }}\n            className={styles.dataValidationFormulaColorSelect}\n            value={value}\n            onChange={onChange}\n            labelRender={(item) => (\n                <div\n                    className={styles.dataValidationFormulaColorItem}\n                    style={{ background: item.value, marginTop: 5 }}\n                />\n            )}\n            dropdownRender={() => {\n                return (\n                    <div className={styles.dataValidationFormulaColorSelectPanel}>\n                        {DEFAULT_COLOR_PRESET.map(\n                            (color) => (\n                                <div\n                                    onClick={() => {\n                                        onChange(color);\n                                        setOpen(false);\n                                    }}\n                                    className={styles.dataValidationFormulaColorItem}\n                                    style={{ background: color }}\n                                    key={color}\n                                />\n                            )\n                        )}\n                    </div>\n                );\n            }}\n        />\n    );\n};\n\nconst Template = (props: { item: IDropdownItem; commonProps: any; style?: CSSProperties }) => {\n    const { item, commonProps, style } = props;\n    const { onItemChange, onItemDelete } = commonProps;\n\n    return (\n        <div className={styles.dataValidationFormulaListItem} style={style}>\n            {!item.isRef\n                ? (\n                    <div className={clsx(styles.dataValidationFormulaListItemDrag, 'draggableHandle')}>\n                        <SequenceSingle />\n                    </div>\n                )\n                : null}\n            <ColorSelect\n                value={item.color}\n                onChange={(color) => {\n                    onItemChange(item.id, item.label, color);\n                }}\n            />\n            <Input\n                disabled={item.isRef}\n                value={item.label}\n                onChange={(label) => {\n                    onItemChange(item.id, label, item.color);\n                }}\n            />\n            {item.isRef\n                ? null\n                : (\n                    <div className={styles.dataValidationFormulaListItemIcon}>\n                        <DeleteSingle onClick={() => onItemDelete(item.id)} />\n                    </div>\n                )}\n        </div>\n    );\n};\n\nexport function ListFormulaInput(props: IFormulaInputProps) {\n    const { value, onChange: _onChange = () => { /* empty */ }, unitId, subUnitId, validResult, showError, ruleId } = props;\n    const { formula1 = '', formula2 = '' } = value || {};\n    const containerRef = useRef<HTMLDivElement>(null);\n    const [isFormulaStr, setIsFormulaStr] = useState(() => isFormulaString(formula1) ? '1' : '0');\n    const [formulaStr, setFormulaStr] = useState(isFormulaStr === '1' ? formula1 : '=');\n    const [formulaStrCopy, setFormulaStrCopy] = useState(isFormulaStr === '1' ? formula1 : '=');\n    const localeService = useDependency(LocaleService);\n    const dataValidatorRegistryService = useDependency(DataValidatorRegistryService);\n    const dataValidationModel = useDependency(DataValidationModel);\n    const dataValidationFormulaController = useDependency(DataValidationFormulaController);\n    const [refColors, setRefColors] = useState(() => formula2.split(','));\n    const listValidator = dataValidatorRegistryService.getValidatorItem(DataValidationType.LIST) as ListValidator;\n    const [refOptions, setRefOptions] = useState<string[]>([]);\n    const [localError, setLocalError] = useState('');\n    const formula1Res = showError ? validResult?.formula1 : '';\n    const ruleChange$ = useMemo(() => dataValidationModel.ruleChange$.pipe(debounceTime(16)), []);\n    const ruleChange = useObservable(ruleChange$);\n\n    const onChange = useEvent(_onChange);\n\n    useEffect(() => {\n        (async () => {\n            await new Promise<any>((resolve) => {\n                setTimeout(() => resolve(true), 100);\n            });\n\n            const rule = dataValidationModel.getRuleById(unitId, subUnitId, ruleId);\n            const formula1 = rule?.formula1;\n            if (isFormulaString(formula1) && listValidator && rule) {\n                const res = await listValidator.getListAsync(rule, unitId, subUnitId);\n                setRefOptions(res);\n            }\n        })();\n    }, [dataValidationModel, ruleChange, listValidator, ruleId, subUnitId, unitId]);\n\n    useEffect(() => {\n        if (isFormulaString(formula1) && formula1 !== formulaStrCopy) {\n            setFormulaStr(formula1);\n            setFormulaStrCopy(formulaStrCopy);\n        }\n    }, [formulaStrCopy, formula1]);\n\n    const [strList, setStrList] = useState<IDropdownItem[]>(() => {\n        const strOptions = isFormulaStr !== '1' ? deserializeListOptions(formula1) : [];\n        const strColors = formula2.split(',');\n        return strOptions.map((label, i) => ({\n            label,\n            color: strColors[i] || DROP_DOWN_DEFAULT_COLOR,\n            isRef: false,\n            id: Tools.generateRandomId(4),\n        }));\n    });\n\n    const handleStrItemChange = (id: string, value: string, color: string) => {\n        const item = strList.find((i) => i.id === id);\n        if (!item) {\n            return;\n        }\n\n        item.label = value;\n        item.color = color;\n\n        setStrList([...strList]);\n    };\n\n    const handleStrItemDelete = (id: string) => {\n        const index = strList.findIndex((i) => i.id === id);\n        if (index !== -1) {\n            strList.splice(index, 1);\n            setStrList([...strList]);\n        }\n    };\n\n    const colorList = formula2.split(',');\n\n    const refFinalList: IDropdownItem[] = useMemo(() => refOptions.map((label, i) => ({\n        label,\n        color: colorList[i] || DROP_DOWN_DEFAULT_COLOR,\n        id: `${i}`,\n        isRef: true,\n    })), [colorList, refOptions]);\n\n    const handleRefItemChange = (id: string, value: string, color: string) => {\n        const newColors = [...refColors];\n        newColors[+id] = color;\n        setRefColors(newColors);\n\n        onChange({\n            formula1,\n            formula2: newColors.join(','),\n        });\n    };\n\n    const handleAdd = () => {\n        setStrList([\n            ...strList,\n            {\n                label: '',\n                color: DROP_DOWN_DEFAULT_COLOR,\n                isRef: false,\n                id: Tools.generateRandomId(4),\n            },\n        ]);\n    };\n\n    useEffect(() => {\n        if (isFormulaStr === '1') {\n            return;\n        }\n        const labelSet = new Set<string>();\n        const finalList: { color: string; label: string }[] = [];\n        strList.map((item) => {\n            const labelList = item.label.split(',');\n            return {\n                labelList,\n                item,\n            };\n        }).forEach(({ item, labelList }) => {\n            labelList.forEach((labelItem) => {\n                if (!labelSet.has(labelItem)) {\n                    labelSet.add(labelItem);\n                    finalList.push({\n                        label: labelItem,\n                        color: item.color,\n                    });\n                }\n            });\n        });\n\n        onChange({\n            formula1: serializeListOptions(finalList.map((item) => item.label)),\n            formula2: finalList.map((item) => item.color === DROP_DOWN_DEFAULT_COLOR ? '' : item.color).join(','),\n        });\n    }, [strList, onChange, isFormulaStr, formulaStrCopy, refColors]);\n\n    const updateFormula = useEvent(async (str: string) => {\n        if (!isFormulaString(str)) {\n            onChange?.({\n                formula1: '',\n                formula2,\n            });\n            return;\n        }\n        if (dataValidationFormulaController.getFormulaRefCheck(str)) {\n            onChange?.({\n                formula1: isFormulaString(str) ? str : '',\n                formula2,\n            });\n            setLocalError('');\n        } else {\n            onChange?.({\n                formula1: '',\n                formula2,\n            });\n            setFormulaStr('=');\n            setLocalError(localeService.t('dataValidation.validFail.formulaError'));\n        }\n    });\n\n    const formulaEditorActionsRef = useRef<Parameters<typeof FormulaEditor>[0]['actions']>({});\n    const [isFocusFormulaEditor, isFocusFormulaEditorSet] = useState(false);\n\n    useSidebarClick((e: MouseEvent) => {\n        const handleOutClick = formulaEditorActionsRef.current?.handleOutClick;\n        handleOutClick && handleOutClick(e, () => isFocusFormulaEditorSet(false));\n    });\n\n    return (\n        <>\n            <FormLayout label={localeService.t('dataValidation.list.options')}>\n                <RadioGroup\n                    value={isFormulaStr}\n                    onChange={(v) => {\n                        setIsFormulaStr(v as string);\n                        setFormulaStr(formulaStrCopy);\n                        if (v === '1') {\n                            onChange({\n                                formula1: formulaStrCopy === '=' ? '' : formulaStrCopy,\n                                formula2: refColors.join(','),\n                            });\n                        }\n                    }}\n                >\n                    <Radio value=\"0\">{localeService.t('dataValidation.list.customOptions')}</Radio>\n                    <Radio value=\"1\">{localeService.t('dataValidation.list.refOptions')}</Radio>\n                </RadioGroup>\n            </FormLayout>\n            {isFormulaStr === '1'\n                ? (\n                    <>\n                        <FormulaEditor\n                            initValue={formulaStr as any}\n                            unitId={unitId}\n                            subUnitId={subUnitId}\n                            isFocus={isFocusFormulaEditor}\n                            onChange={(v = '') => {\n                                const str = (v ?? '').trim();\n                                setFormulaStrCopy(str);\n                                updateFormula(str);\n                            }}\n                            errorText={(formula1Res || localError) || undefined}\n                            onFocus={() => isFocusFormulaEditorSet(true)}\n                            actions={formulaEditorActionsRef.current}\n                            isSupportAcrossSheet\n                        />\n                        <div ref={containerRef} style={{ marginTop: '12px' }}>\n                            {refFinalList.map((item) => {\n                                return <Template key={item.id} item={item} commonProps={{ onItemChange: handleRefItemChange }} style={{ marginBottom: 12 }} />;\n                            })}\n                        </div>\n                    </>\n                )\n                : (\n                    <FormLayout error={formula1Res}>\n                        <div ref={containerRef} style={{ marginTop: '-12px' }}>\n                            <DraggableList\n                                list={strList}\n                                onListChange={setStrList}\n                                rowHeight={32}\n                                margin={[0, 12]}\n                                draggableHandle=\".draggableHandle\"\n                                itemRender={(item) => (\n                                    <Template\n                                        key={item.id}\n                                        item={item}\n                                        commonProps={{\n                                            onItemChange: handleStrItemChange,\n                                            onItemDelete: handleStrItemDelete,\n                                        }}\n                                    />\n                                )}\n                                idKey=\"id\"\n                            />\n                            <a className={styles.dataValidationFormulaListAdd} onClick={handleAdd}>\n                                <IncreaseSingle />\n                                {localeService.t('dataValidation.list.add')}\n                            </a>\n                        </div>\n                    </FormLayout>\n                )}\n        </>\n    );\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FormulaInputType } from '@univerjs/data-validation';\nimport { BaseFormulaInput } from './base-formula-input';\nimport { CheckboxFormulaInput } from './checkbox-formula-input';\nimport { CustomFormulaInput } from './custom-formula-input';\nimport { ListFormulaInput } from './list-formula-input';\n\nexport const CUSTOM_FORMULA_INPUT_NAME = 'data-validation.custom-formula-input';\nexport const BASE_FORMULA_INPUT_NAME = 'data-validation.formula-input';\nexport const LIST_FORMULA_INPUT_NAME = 'data-validation.list-formula-input';\nexport const CHECKBOX_FORMULA_INPUT_NAME = 'data-validation.checkbox-formula-input';\n\nexport const FORMULA_INPUTS: [string, FormulaInputType][] = [\n    [\n        CUSTOM_FORMULA_INPUT_NAME,\n        CustomFormulaInput,\n    ],\n    [\n        BASE_FORMULA_INPUT_NAME,\n        BaseFormulaInput,\n    ],\n    [\n        LIST_FORMULA_INPUT_NAME,\n        ListFormulaInput,\n    ],\n    [\n        CHECKBOX_FORMULA_INPUT_NAME,\n        CheckboxFormulaInput,\n    ],\n];\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDataValidationRuleOptions } from '@univerjs/core';\nimport { DataValidationRenderMode, LocaleService } from '@univerjs/core';\nimport { FormLayout, Radio, RadioGroup } from '@univerjs/design';\nimport { useDependency } from '@univerjs/ui';\n\nexport interface IListRenderModeInputProps {\n    value: IDataValidationRuleOptions;\n    onChange: (value: IDataValidationRuleOptions) => void;\n}\nconst LIST_RENDER_MODE_OPTION_INPUT = 'LIST_RENDER_MODE_OPTION_INPUT';\n\nexport function ListRenderModeInput(props: IListRenderModeInputProps) {\n    const { value, onChange } = props;\n    const localeService = useDependency(LocaleService);\n\n    return (\n        <FormLayout label={localeService.t('dataValidation.renderMode.label')}>\n            <RadioGroup value={`${value.renderMode ?? DataValidationRenderMode.CUSTOM}`} onChange={(renderMode) => onChange({ ...value, renderMode: +renderMode })}>\n                <Radio value={`${DataValidationRenderMode.CUSTOM}`}>\n                    {localeService.t('dataValidation.renderMode.chip')}\n                </Radio>\n                <Radio value={`${DataValidationRenderMode.ARROW}`}>\n                    {localeService.t('dataValidation.renderMode.arrow')}\n                </Radio>\n                <Radio value={`${DataValidationRenderMode.TEXT}`}>\n                    {localeService.t('dataValidation.renderMode.text')}\n                </Radio>\n            </RadioGroup>\n        </FormLayout>\n    );\n}\n\nListRenderModeInput.componentKey = LIST_RENDER_MODE_OPTION_INPUT;\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDataValidationRuleOptions } from '@univerjs/core';\nimport { LocaleService } from '@univerjs/core';\nimport { Checkbox, FormLayout } from '@univerjs/design';\nimport { useDependency } from '@univerjs/ui';\nimport React from 'react';\n\nexport interface IDateShowTimeOptionProps {\n    value: IDataValidationRuleOptions;\n    onChange: (value: IDataValidationRuleOptions) => void;\n}\nconst DATE_SHOW_TIME_OPTION = 'DATE_SHOW_TIME_OPTION';\n\nexport function DateShowTimeOption(props: IDateShowTimeOptionProps) {\n    const { value, onChange } = props;\n    const localeService = useDependency(LocaleService);\n\n    return (\n        <FormLayout>\n            <Checkbox\n                checked={value.bizInfo?.showTime}\n                onChange={(showTime) => {\n                    onChange({\n                        ...value,\n                        bizInfo: {\n                            ...value.bizInfo,\n                            showTime: showTime as boolean,\n                        },\n                    });\n                }}\n            >\n                {localeService.t('dataValidation.showTime.label')}\n            </Checkbox>\n        </FormLayout>\n    );\n}\n\nDateShowTimeOption.componentKey = DATE_SHOW_TIME_OPTION;\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICellRenderContext, IDataValidationRule, IStyleData, Nullable } from '@univerjs/core';\nimport type { IBaseDataValidationWidget, IFormulaResult } from '@univerjs/data-validation';\nimport type { IMouseEvent, IPointerEvent, UniverRenderingContext, UniverRenderingContext2D } from '@univerjs/engine-render';\nimport type { ISetRangeValuesCommandParams } from '@univerjs/sheets';\nimport type { CheckboxValidator } from '@univerjs/sheets-data-validation';\nimport { HorizontalAlign, ICommandService, Inject, isFormulaString, IUniverInstanceService, ThemeService, UniverInstanceType, VerticalAlign } from '@univerjs/core';\nimport { CheckboxShape as Checkbox, CURSOR_TYPE, fixLineWidthByScale, getCurrentTypeOfRenderer, IRenderManagerService, Transform } from '@univerjs/engine-render';\nimport { SetRangeValuesCommand } from '@univerjs/sheets';\nimport { CHECKBOX_FORMULA_1, CHECKBOX_FORMULA_2, DataValidationFormulaService, getCellValueOrigin, getFormulaResult, isLegalFormulaResult, SheetDataValidationModel, transformCheckboxValue } from '@univerjs/sheets-data-validation';\n\nconst MARGIN_H = 6;\n\nexport class CheckboxRender implements IBaseDataValidationWidget {\n    private _calc(cellInfo: { startX: number; endX: number; startY: number; endY: number }, style: Nullable<IStyleData>) {\n        const { vt, ht } = style || {};\n        const width = cellInfo.endX - cellInfo.startX - (MARGIN_H * 2);\n        const height = cellInfo.endY - cellInfo.startY;\n        const size = (style?.fs ?? 10) * 1.6;\n        let widgetLeft = 0;\n        let widgetTop = 0;\n        switch (vt) {\n            case VerticalAlign.TOP:\n                widgetTop = 0;\n                break;\n            case VerticalAlign.BOTTOM:\n                widgetTop = 0 + (height - size);\n                break;\n            default:\n                widgetTop = 0 + (height - size) / 2;\n                break;\n        }\n\n        switch (ht) {\n            case HorizontalAlign.LEFT:\n                widgetLeft = MARGIN_H;\n                break;\n            case HorizontalAlign.RIGHT:\n                widgetLeft = MARGIN_H + (width - size);\n                break;\n\n            default:\n                widgetLeft = MARGIN_H + (width - size) / 2;\n                break;\n        }\n\n        return {\n            left: cellInfo.startX + widgetLeft,\n            top: cellInfo.startY + widgetTop,\n            width: (style?.fs ?? 10) * 1.6,\n            height: (style?.fs ?? 10) * 1.6,\n        };\n    }\n\n    constructor(\n        @ICommandService private readonly _commandService: ICommandService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @Inject(DataValidationFormulaService) private readonly _formulaService: DataValidationFormulaService,\n        @Inject(ThemeService) private readonly _themeService: ThemeService,\n        @Inject(IRenderManagerService) private readonly _renderManagerService: IRenderManagerService,\n        @Inject(SheetDataValidationModel) private readonly _dataValidationModel: SheetDataValidationModel\n    ) {\n    }\n\n    calcCellAutoHeight(info: ICellRenderContext): number | undefined {\n        const { style } = info;\n        return (style?.fs ?? 10) * 1.6;\n    }\n\n    calcCellAutoWidth(info: ICellRenderContext): number | undefined {\n        const { style } = info;\n        return (style?.fs ?? 10) * 1.6;\n    }\n\n    private async _parseFormula(rule: IDataValidationRule, unitId: string, subUnitId: string): Promise<IFormulaResult> {\n        const { formula1 = CHECKBOX_FORMULA_1, formula2 = CHECKBOX_FORMULA_2 } = rule;\n        const results = await this._formulaService.getRuleFormulaResult(unitId, subUnitId, rule.uid);\n        const formulaResult1 = getFormulaResult(results?.[0]?.result?.[0]?.[0]);\n        const formulaResult2 = getFormulaResult(results?.[1]?.result?.[0]?.[0]);\n        const isFormulaValid = isLegalFormulaResult(String(formulaResult1)) && isLegalFormulaResult(String(formulaResult2));\n\n        return {\n            formula1: isFormulaString(formula1) ? getFormulaResult(results?.[0]?.result?.[0]?.[0]) : formula1,\n            formula2: isFormulaString(formula2) ? formulaResult2 : formula2,\n            isFormulaValid,\n        };\n    }\n\n    drawWith(ctx: UniverRenderingContext2D, info: ICellRenderContext): void {\n        const { style, primaryWithCoord, unitId, subUnitId, worksheet, row, col } = info;\n        const cellBounding = primaryWithCoord.isMergedMainCell ? primaryWithCoord.mergeInfo : primaryWithCoord;\n        const value = getCellValueOrigin(worksheet.getCellRaw(row, col));\n        const rule = this._dataValidationModel.getRuleByLocation(unitId, subUnitId, row, col);\n        if (!rule) {\n            return;\n        }\n        const validator = this._dataValidationModel.getValidator(rule.type) as CheckboxValidator;\n        if (!validator) {\n            return;\n        }\n\n        const colors = this._themeService.getCurrentTheme();\n        if (!validator.skipDefaultFontRender?.(rule, value, { unitId: unitId!, subUnitId, row, column: col })) {\n            return;\n        }\n\n        const result = validator.parseFormulaSync(rule, unitId, subUnitId);\n        const { formula1 } = result;\n        const layout = this._calc(cellBounding, style);\n        const { a: scaleX, d: scaleY } = ctx.getTransform();\n        const left = fixLineWidthByScale(layout.left, scaleX);\n        const top = fixLineWidthByScale(layout.top, scaleY);\n\n        const transform = Transform.create().composeMatrix({\n            left,\n            top,\n            scaleX: 1,\n            scaleY: 1,\n            angle: 0,\n            skewX: 0,\n            skewY: 0,\n            flipX: false,\n            flipY: false,\n        });\n\n        const cellWidth = cellBounding.endX - cellBounding.startX;\n        const cellHeight = cellBounding.endY - cellBounding.startY;\n\n        ctx.save();\n        ctx.beginPath();\n        ctx.rect(cellBounding.startX, cellBounding.startY, cellWidth, cellHeight);\n        ctx.clip();\n\n        const m = transform.getMatrix();\n        ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n        const size = (style?.fs ?? 10) * 1.6;\n\n        const checked = String(value) === String(formula1);\n        const defaultColor = colors.hyacinth500;\n\n        Checkbox.drawWith(ctx as UniverRenderingContext, {\n            checked,\n            width: size,\n            height: size,\n            fill: style?.cl?.rgb ?? defaultColor,\n        });\n\n        ctx.restore();\n    }\n\n    isHit(evt: { x: number; y: number }, info: ICellRenderContext): boolean {\n        const cellBounding = info.primaryWithCoord.isMergedMainCell ? info.primaryWithCoord.mergeInfo : info.primaryWithCoord;\n        const layout = this._calc(cellBounding, info.style);\n        const startY = layout.top;\n        const endY = layout.top + layout.height;\n        const startX = layout.left;\n        const endX = layout.left + layout.width;\n        const { x: offsetX, y: offsetY } = evt;\n        if (offsetX <= endX && offsetX >= startX && offsetY <= endY && offsetY >= startY) {\n            return true;\n        }\n\n        return false;\n    }\n\n    async onPointerDown(info: ICellRenderContext, evt: IPointerEvent | IMouseEvent) {\n        if (evt.button === 2) {\n            return;\n        }\n        const { primaryWithCoord, unitId, subUnitId, worksheet, row, col } = info;\n        const value = getCellValueOrigin(worksheet.getCellRaw(row, col));\n        const rule = this._dataValidationModel.getRuleByLocation(unitId, subUnitId, row, col);\n        if (!rule) {\n            return;\n        }\n        const validator = this._dataValidationModel.getValidator(rule.type) as CheckboxValidator;\n        if (!validator) {\n            return;\n        }\n\n        if (!validator.skipDefaultFontRender?.(rule, value, { unitId, subUnitId, row, column: col })) {\n            return;\n        }\n\n        const { formula1, formula2 } = await this._parseFormula(rule, unitId!, subUnitId);\n        const params: ISetRangeValuesCommandParams = {\n            range: {\n                startColumn: primaryWithCoord.actualColumn,\n                endColumn: primaryWithCoord.actualColumn,\n                startRow: primaryWithCoord.actualRow,\n                endRow: primaryWithCoord.actualRow,\n            },\n            value: {\n                v: String(value) === transformCheckboxValue(String(formula1)) ? formula2 : formula1,\n                p: null,\n            },\n        };\n\n        this._commandService.executeCommand(\n            SetRangeValuesCommand.id,\n            params\n        );\n    };\n\n    onPointerEnter(info: ICellRenderContext, evt: IPointerEvent | IMouseEvent) {\n        getCurrentTypeOfRenderer(UniverInstanceType.UNIVER_SHEET, this._univerInstanceService, this._renderManagerService)\n            ?.mainComponent\n            ?.setCursor(CURSOR_TYPE.POINTER);\n    }\n\n    onPointerLeave(info: ICellRenderContext, evt: IPointerEvent | IMouseEvent) {\n        getCurrentTypeOfRenderer(UniverInstanceType.UNIVER_SHEET, this._univerInstanceService, this._renderManagerService)\n            ?.mainComponent\n            ?.setCursor(CURSOR_TYPE.DEFAULT);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IBaseDataValidationWidget } from '@univerjs/data-validation';\nimport { Inject, Injector, type Nullable } from '@univerjs/core';\nimport { LIST_FORMULA_INPUT_NAME } from '../components/formula-input';\n\n/**\n * This is the base class for all sheet data validator views. It is used to extend {@link BaseDataValidator}.\n */\nexport abstract class BaseSheetDataValidatorView {\n    canvasRender: Nullable<IBaseDataValidationWidget> = null;\n    dropdown: string | undefined = undefined;\n    optionsInput: string | undefined = undefined;\n\n    abstract id: string;\n    formulaInput: string = LIST_FORMULA_INPUT_NAME;\n\n    constructor(\n        @Inject(Injector) protected readonly injector: Injector\n    ) {\n        // empty\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataValidationType } from '@univerjs/core';\nimport { CHECKBOX_FORMULA_INPUT_NAME } from '../components/formula-input';\nimport { CheckboxRender } from '../widgets/checkbox-widget';\nimport { BaseSheetDataValidatorView } from './sheet-validator-view';\n\nexport class CheckboxValidatorView extends BaseSheetDataValidatorView {\n    override id = DataValidationType.CHECKBOX;\n    override canvasRender = this.injector.createInstance(CheckboxRender);\n    override formulaInput: string = CHECKBOX_FORMULA_INPUT_NAME;\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataValidationType } from '@univerjs/core';\nimport { CUSTOM_FORMULA_INPUT_NAME } from '../components/formula-input';\nimport { BaseSheetDataValidatorView } from './sheet-validator-view';\n\nexport class CustomFormulaValidatorView extends BaseSheetDataValidatorView {\n    override id = DataValidationType.CUSTOM;\n    override formulaInput: string = CUSTOM_FORMULA_INPUT_NAME;\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FormulaInputType } from '@univerjs/data-validation';\nimport { BaseFormulaInput } from './base-formula-input';\nimport { ListFormulaInput } from './list-formula-input';\n\nexport const BASE_FORMULA_INPUT_NAME = 'data-validation.formula-input';\nexport const LIST_FORMULA_INPUT_NAME = 'data-validation.list-formula-input';\n\nexport const FORMULA_INPUTS: [string, FormulaInputType][] = [\n    [\n        BASE_FORMULA_INPUT_NAME,\n        BaseFormulaInput,\n    ],\n    [\n        LIST_FORMULA_INPUT_NAME,\n        ListFormulaInput,\n    ],\n];\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataValidationType } from '@univerjs/core';\nimport { DATE_DROPDOWN_KEY } from '../components';\nimport { BASE_FORMULA_INPUT_NAME } from '../components/formula-input/formula-input';\nimport { DateShowTimeOption } from '../components/show-time';\nimport { BaseSheetDataValidatorView } from './sheet-validator-view';\n\nexport class DateValidatorView extends BaseSheetDataValidatorView {\n    override id = DataValidationType.DATE;\n    override formulaInput: string = BASE_FORMULA_INPUT_NAME;\n    override optionsInput = DateShowTimeOption.componentKey;\n    override dropdown = DATE_DROPDOWN_KEY;\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataValidationType } from '@univerjs/core';\nimport { BASE_FORMULA_INPUT_NAME } from '../components/formula-input';\nimport { BaseSheetDataValidatorView } from './sheet-validator-view';\n\nexport class DecimalValidatorView extends BaseSheetDataValidatorView {\n    override id = DataValidationType.DECIMAL;\n    override formulaInput: string = BASE_FORMULA_INPUT_NAME;\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IStyleData, Nullable } from '@univerjs/core';\nimport type { IDocumentSkeletonFontStyle } from '@univerjs/engine-render';\nimport { FontCache, getFontStyleString } from '@univerjs/engine-render';\n\nexport const PADDING_H = 4;\nexport const PADDING_V = 0;\nexport const MARGIN_H = 4;\nexport const MARGIN_V = 4;\nexport const CELL_PADDING_H = 6;\nexport const CELL_PADDING_V = 6;\nexport const ICON_PLACE = 14;\n\nexport function measureDropdownItemText(text: string, style: Nullable<IStyleData>) {\n    const fontStyle = getFontStyleString(style ?? undefined);\n    const bBox = FontCache.getTextSize(text, fontStyle);\n    return bBox;\n}\n\nexport function getDropdownItemSize(text: string, fontStyle: IDocumentSkeletonFontStyle) {\n    const bBox = FontCache.getTextSize(text, fontStyle);\n    const rectWidth = bBox.width + PADDING_H * 2;\n\n    const { ba, bd } = bBox;\n    const height = ba + bd;\n    return {\n        width: rectWidth,\n        height: height + (PADDING_V * 2),\n        ba,\n    };\n}\n\nexport interface IDropdownLayoutInfo {\n    layout: {\n        width: number;\n        height: number;\n        ba: number;\n    };\n    text: string;\n}\n\nexport interface IDropdownLine {\n    width: number;\n    height: number;\n    items: (IDropdownLayoutInfo & { left: number })[];\n}\n\nexport function layoutDropdowns(items: string[], fontStyle: IDocumentSkeletonFontStyle, cellWidth: number, cellHeight: number) {\n    const cellPaddingH = ICON_PLACE + CELL_PADDING_H * 2;\n    const widthAvailableForContent = cellWidth - cellPaddingH;\n    const heightAvailableForContent = cellHeight - CELL_PADDING_V * 2;\n    const textLayout = items.map((item) => ({\n        layout: getDropdownItemSize(item, fontStyle),\n        text: item,\n    }));\n\n    let currentLine: IDropdownLine | undefined;\n    const lines: IDropdownLine[] = [];\n\n    textLayout.forEach((item) => {\n        const { layout } = item;\n        const { width, height } = layout;\n\n        if (!currentLine || ((currentLine.width + width + MARGIN_H) > widthAvailableForContent)) {\n            currentLine = {\n                width,\n                height,\n                items: [{\n                    ...item,\n                    left: 0,\n                }],\n            };\n            lines.push(currentLine);\n        } else {\n            currentLine.items.push({\n                ...item,\n                left: currentLine.width + MARGIN_H,\n            });\n            currentLine.width = currentLine.width + width + MARGIN_H;\n        }\n    });\n    let totalHeight = 0;\n    let maxLineWidth = 0;\n    lines.forEach((line, index) => {\n        maxLineWidth = Math.max(maxLineWidth, line.width);\n        if (index === lines.length - 1) {\n            totalHeight += line.height;\n        } else {\n            totalHeight += line.height + MARGIN_V;\n        }\n    });\n\n    return {\n        lines,\n        totalHeight,\n        contentWidth: widthAvailableForContent,\n        contentHeight: heightAvailableForContent,\n        cellAutoHeight: totalHeight + CELL_PADDING_V * 2,\n        calcAutoWidth: maxLineWidth + cellPaddingH,\n    };\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IShapeProps, UniverRenderingContext } from '@univerjs/engine-render';\nimport type { IDropdownLayoutInfo } from './layout';\nimport { Rect, Shape } from '@univerjs/engine-render';\nimport { DROP_DOWN_DEFAULT_COLOR } from '../../../const';\nimport { PADDING_H } from './layout';\n\nconst RADIUS = 8;\n\nexport interface IDropdownProps extends IShapeProps {\n    fontString: string;\n    fontFamily: string;\n    fontSize: number;\n    info: IDropdownLayoutInfo;\n    color: string;\n}\n\nexport class Dropdown extends Shape<IDropdownProps> {\n    static override drawWith(ctx: UniverRenderingContext, props: IDropdownProps) {\n        const { fontString, info, fill, color } = props;\n        const { layout, text } = info;\n        ctx.save();\n        Rect.drawWith(ctx, {\n            width: layout.width,\n            height: layout.height,\n            radius: RADIUS,\n            fill: fill || DROP_DOWN_DEFAULT_COLOR,\n        });\n        ctx.translateWithPrecision(PADDING_H, layout.ba);\n        ctx.font = fontString;\n        ctx.fillStyle = color;\n        ctx.fillText(text, 0, 0);\n        ctx.restore();\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICellRenderContext } from '@univerjs/core';\nimport type { IBaseDataValidationWidget } from '@univerjs/data-validation';\nimport type { IMouseEvent, IPointerEvent, Spreadsheet, SpreadsheetSkeleton, UniverRenderingContext, UniverRenderingContext2D } from '@univerjs/engine-render';\nimport type { ListMultipleValidator } from '@univerjs/sheets-data-validation';\nimport type { IShowDataValidationDropdownParams } from '../../commands/operations/data-validation.operation';\nimport type { IDropdownInfo } from './dropdown-widget';\nimport { HorizontalAlign, ICommandService, Inject, IUniverInstanceService, UniverInstanceType, VerticalAlign } from '@univerjs/core';\nimport { CURSOR_TYPE, getCurrentTypeOfRenderer, getFontStyleString, IRenderManagerService } from '@univerjs/engine-render';\nimport { getCellValueOrigin, SheetDataValidationModel } from '@univerjs/sheets-data-validation';\nimport { ShowDataValidationDropdown } from '../../commands/operations/data-validation.operation';\nimport { CELL_PADDING_H, CELL_PADDING_V, Dropdown, ICON_PLACE, layoutDropdowns, MARGIN_V } from './shape';\n\nconst downPath = new Path2D('M3.32201 4.84556C3.14417 5.05148 2.85583 5.05148 2.67799 4.84556L0.134292 1.90016C-0.152586 1.56798 0.0505937 1 0.456301 1L5.5437 1C5.94941 1 6.15259 1.56798 5.86571 1.90016L3.32201 4.84556Z');\n\nexport class DropdownMultipleWidget implements IBaseDataValidationWidget {\n    zIndex?: number | undefined;\n    private _dropdownInfoMap: Map<string, Map<string, IDropdownInfo>> = new Map();\n\n    constructor(\n        @ICommandService private readonly _commandService: ICommandService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @Inject(IRenderManagerService) private readonly _renderManagerService: IRenderManagerService,\n        @Inject(SheetDataValidationModel) private readonly _dataValidationModel: SheetDataValidationModel\n    ) {\n        // empty\n    }\n\n    private _ensureMap(subUnitId: string) {\n        let map = this._dropdownInfoMap.get(subUnitId);\n\n        if (!map) {\n            map = new Map();\n            this._dropdownInfoMap.set(subUnitId, map);\n        }\n        return map;\n    }\n\n    private _generateKey(row: number, col: number) {\n        return `${row}.${col}`;\n    }\n\n    private _drawDownIcon(ctx: UniverRenderingContext2D, cellBounding: { startX: number; startY: number }, cellWidth: number, cellHeight: number, vt: VerticalAlign) {\n        const left = cellWidth - ICON_PLACE + 4;\n        let top = 4;\n\n        switch (vt) {\n            case VerticalAlign.MIDDLE:\n                top = (cellHeight - ICON_PLACE) / 2 + 4;\n                break;\n            case VerticalAlign.BOTTOM:\n                top = (cellHeight - ICON_PLACE) + 4;\n                break;\n            default:\n                break;\n        }\n\n        ctx.save();\n        ctx.translateWithPrecision(cellBounding.startX + left, cellBounding.startY + top);\n        ctx.fillStyle = '#565656';\n        ctx.fill(downPath);\n        ctx.restore();\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    drawWith(ctx: UniverRenderingContext2D, info: ICellRenderContext, skeleton: SpreadsheetSkeleton, spreadsheets: Spreadsheet): void {\n        const { primaryWithCoord, row, col, style, data, subUnitId } = info;\n        const _cellBounding = primaryWithCoord.isMergedMainCell ? primaryWithCoord.mergeInfo : primaryWithCoord;\n\n        const fontRenderExtension = data?.fontRenderExtension;\n        const { leftOffset = 0, rightOffset = 0, topOffset = 0, downOffset = 0 } = fontRenderExtension || {};\n\n        const map = this._ensureMap(subUnitId);\n        const key = this._generateKey(row, col);\n        const rule = this._dataValidationModel.getRuleByLocation(info.unitId, info.subUnitId, row, col);\n        if (!rule) {\n            return;\n        }\n        const validator = this._dataValidationModel.getValidator(rule.type) as ListMultipleValidator;\n        if (!validator) {\n            return;\n        }\n\n        const cellBounding = {\n            startX: _cellBounding.startX + leftOffset,\n            endX: _cellBounding.endX - rightOffset,\n            startY: _cellBounding.startY + topOffset,\n            endY: _cellBounding.endY - downOffset,\n        };\n        const cellWidth = cellBounding.endX - cellBounding.startX;\n        const cellHeight = cellBounding.endY - cellBounding.startY;\n        const { cl } = style || {};\n        const color = (typeof cl === 'object' ? cl?.rgb : cl) ?? '#000';\n        const fontStyle = getFontStyleString(style ?? undefined);\n        const { vt: _vt, ht } = style || {};\n        const vt = _vt ?? VerticalAlign.MIDDLE;\n        const cellValue = getCellValueOrigin(data) ?? '';\n        const items = validator.parseCellValue(cellValue);\n        const labelColorMap = validator.getListWithColorMap(rule);\n        const layout = layoutDropdowns(items, fontStyle, cellWidth, cellHeight);\n        this._drawDownIcon(ctx, cellBounding, cellWidth, cellHeight, vt);\n        ctx.save();\n        ctx.translateWithPrecision(cellBounding.startX, cellBounding.startY);\n        ctx.beginPath();\n        ctx.rect(0, 0, cellWidth - ICON_PLACE, cellHeight);\n        ctx.clip();\n        ctx.translateWithPrecision(CELL_PADDING_H, CELL_PADDING_V);\n        let top = 0;\n        switch (vt) {\n            case VerticalAlign.MIDDLE:\n                top = (layout.contentHeight - layout.totalHeight) / 2;\n                break;\n            case VerticalAlign.BOTTOM:\n                top = (layout.contentHeight - layout.totalHeight);\n                break;\n            default:\n                break;\n        }\n        ctx.translateWithPrecision(0, top);\n        layout.lines.forEach((line, index) => {\n            ctx.save();\n            const { width, height, items } = line;\n            let left = 0;\n            switch (ht) {\n                case HorizontalAlign.RIGHT:\n                    left = layout.contentWidth - width;\n                    break;\n                case HorizontalAlign.CENTER:\n                    left = (layout.contentWidth - width) / 2;\n                    break;\n                default:\n                    break;\n            }\n            ctx.translate(left, index * (height + MARGIN_V));\n            items.forEach((item) => {\n                ctx.save();\n                ctx.translateWithPrecision(item.left, 0);\n                Dropdown.drawWith(ctx as UniverRenderingContext, {\n                    ...fontStyle,\n                    info: item,\n                    color,\n                    fill: labelColorMap[item.text],\n                });\n                ctx.restore();\n            });\n\n            ctx.restore();\n        });\n\n        ctx.restore();\n\n        map.set(key, {\n            left: cellBounding.startX,\n            top: cellBounding.startY,\n            width: layout.contentWidth + CELL_PADDING_H + ICON_PLACE,\n            height: layout.contentHeight + CELL_PADDING_V * 2,\n        });\n    }\n\n    calcCellAutoHeight(info: ICellRenderContext): number | undefined {\n        const { primaryWithCoord, style, data, row, col } = info;\n        const fontRenderExtension = data?.fontRenderExtension;\n        const { leftOffset = 0, rightOffset = 0, topOffset = 0, downOffset = 0 } = fontRenderExtension || {};\n        const _cellBounding = primaryWithCoord.isMergedMainCell ? primaryWithCoord.mergeInfo : primaryWithCoord;\n        const cellBounding = {\n            startX: _cellBounding.startX + leftOffset,\n            endX: _cellBounding.endX - rightOffset,\n            startY: _cellBounding.startY + topOffset,\n            endY: _cellBounding.endY - downOffset,\n        };\n        const rule = this._dataValidationModel.getRuleByLocation(info.unitId, info.subUnitId, row, col);\n        if (!rule) {\n            return;\n        }\n        const validator = this._dataValidationModel.getValidator(rule.type) as ListMultipleValidator;\n        if (!validator) {\n            return;\n        }\n        const cellWidth = cellBounding.endX - cellBounding.startX;\n        const cellHeight = cellBounding.endY - cellBounding.startY;\n        const cellValue = getCellValueOrigin(data) ?? '';\n        const items = validator.parseCellValue(cellValue);\n        const fontStyle = getFontStyleString(style ?? undefined);\n        const layout = layoutDropdowns(items, fontStyle, cellWidth, cellHeight);\n        return layout.cellAutoHeight;\n    }\n\n    calcCellAutoWidth(info: ICellRenderContext): number | undefined {\n        const { primaryWithCoord, style, data, row, col } = info;\n        const fontRenderExtension = data?.fontRenderExtension;\n        const { leftOffset = 0, rightOffset = 0, topOffset = 0, downOffset = 0 } = fontRenderExtension || {};\n        const _cellBounding = primaryWithCoord.isMergedMainCell ? primaryWithCoord.mergeInfo : primaryWithCoord;\n        const cellBounding = {\n            startX: _cellBounding.startX + leftOffset,\n            endX: _cellBounding.endX - rightOffset,\n            startY: _cellBounding.startY + topOffset,\n            endY: _cellBounding.endY - downOffset,\n        };\n        const rule = this._dataValidationModel.getRuleByLocation(info.unitId, info.subUnitId, row, col);\n        if (!rule) {\n            return;\n        }\n        const validator = this._dataValidationModel.getValidator(rule.type) as ListMultipleValidator;\n        if (!validator) {\n            return;\n        }\n        const cellWidth = cellBounding.endX - cellBounding.startX;\n        const cellHeight = cellBounding.endY - cellBounding.startY;\n        const cellValue = getCellValueOrigin(data) ?? '';\n        const items = validator.parseCellValue(cellValue);\n        const fontStyle = getFontStyleString(style ?? undefined);\n        const layout = layoutDropdowns(items, fontStyle, cellWidth, cellHeight);\n        return layout.calcAutoWidth;\n    }\n\n    isHit(position: { x: number; y: number }, info: ICellRenderContext) {\n        const { primaryWithCoord } = info;\n        const cellBounding = primaryWithCoord.isMergedMainCell ? primaryWithCoord.mergeInfo : primaryWithCoord;\n        const { endX } = cellBounding;\n        const { x } = position;\n        if (x >= endX - ICON_PLACE && x <= endX) {\n            return true;\n        }\n        return false;\n    };\n\n    onPointerDown(info: ICellRenderContext, evt: IPointerEvent | IMouseEvent) {\n        if (evt.button === 2) {\n            return;\n        }\n        const { unitId, subUnitId, row, col } = info;\n\n        const params: IShowDataValidationDropdownParams = {\n            unitId: unitId!,\n            subUnitId,\n            row,\n            column: col,\n        };\n\n        this._commandService.executeCommand(ShowDataValidationDropdown.id, params);\n    }\n\n    onPointerEnter(info: ICellRenderContext, evt: IPointerEvent | IMouseEvent) {\n        return getCurrentTypeOfRenderer(UniverInstanceType.UNIVER_SHEET, this._univerInstanceService, this._renderManagerService)\n            ?.mainComponent\n            ?.setCursor(CURSOR_TYPE.POINTER);\n    }\n\n    onPointerLeave(info: ICellRenderContext, evt: IPointerEvent | IMouseEvent) {\n        return getCurrentTypeOfRenderer(UniverInstanceType.UNIVER_SHEET, this._univerInstanceService, this._renderManagerService)\n            ?.mainComponent\n            ?.setCursor(CURSOR_TYPE.DEFAULT);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataValidationType } from '@univerjs/core';\nimport { LIST_DROPDOWN_KEY } from '../components';\nimport { DropdownMultipleWidget } from '../widgets/dropdown-multiple-widget';\nimport { BaseSheetDataValidatorView } from './sheet-validator-view';\n\nexport class ListMultipleValidatorView extends BaseSheetDataValidatorView {\n    override id = DataValidationType.LIST_MULTIPLE;\n    override canvasRender = this.injector.createInstance(DropdownMultipleWidget);\n    override dropdown: string | undefined = LIST_DROPDOWN_KEY;\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICellRenderContext, IDocumentData, IPaddingData, IStyleData, Nullable } from '@univerjs/core';\nimport type { IBaseDataValidationWidget } from '@univerjs/data-validation';\nimport type { IMouseEvent, IPointerEvent, SpreadsheetSkeleton, UniverRenderingContext, UniverRenderingContext2D } from '@univerjs/engine-render';\nimport type { ListValidator } from '@univerjs/sheets-data-validation';\nimport type { IShowDataValidationDropdownParams } from '../../commands/operations/data-validation.operation';\nimport { BooleanNumber, DataValidationRenderMode, DataValidationType, DEFAULT_EMPTY_DOCUMENT_VALUE, DEFAULT_STYLES, DocumentDataModel, HorizontalAlign, ICommandService, Inject, IUniverInstanceService, LocaleService, Tools, UniverInstanceType, VerticalAlign, WrapStrategy } from '@univerjs/core';\nimport { CURSOR_TYPE, Documents, DocumentSkeleton, DocumentViewModel, getCurrentTypeOfRenderer, getDocsSkeletonPageSize, IRenderManagerService, Rect } from '@univerjs/engine-render';\nimport { getCellValueOrigin, SheetDataValidationModel } from '@univerjs/sheets-data-validation';\nimport { ShowDataValidationDropdown } from '../../commands/operations/data-validation.operation';\nimport { DROP_DOWN_DEFAULT_COLOR } from '../../const';\n\n/**\n * padding in Capsule\n */\nconst PADDING_H = 4;\nconst ICON_SIZE = 4;\nconst ICON_PLACE = 14;\n\n/**\n * margin for Capsule, that means distance between capsule and cell border\n */\nconst MARGIN_H = 6;\nconst MARGIN_V = 4;\nconst RADIUS_BG = 8;\nconst DROP_DOWN_ICON_COLOR = '#565656';\n\nconst downPath = new Path2D('M3.32201 4.84556C3.14417 5.05148 2.85583 5.05148 2.67799 4.84556L0.134292 1.90016C-0.152586 1.56798 0.0505937 1 0.456301 1L5.5437 1C5.94941 1 6.15259 1.56798 5.86571 1.90016L3.32201 4.84556Z');\n\nfunction convertToDocumentData(text: string, style?: Nullable<IStyleData>) {\n    const contentLength = text.length;\n    const documentData: IDocumentData = {\n        id: 'd',\n        body: {\n            dataStream: `${text}${DEFAULT_EMPTY_DOCUMENT_VALUE}`,\n            textRuns: [\n                {\n                    ts: {\n                        fs: 11,\n                        ff: undefined,\n                        it: BooleanNumber.FALSE,\n                        bl: BooleanNumber.FALSE,\n                        ul: {\n                            s: BooleanNumber.FALSE,\n                        },\n                        st: {\n                            s: BooleanNumber.FALSE,\n                        },\n                        ol: {\n                            s: BooleanNumber.FALSE,\n                        },\n                        cl: undefined,\n                        ...style,\n                        bg: undefined,\n                        bd: undefined,\n                    },\n                    st: 0,\n                    ed: contentLength,\n                },\n            ],\n        },\n        documentStyle: {\n            pageSize: {\n                width: Number.POSITIVE_INFINITY,\n                height: Number.POSITIVE_INFINITY,\n            },\n        },\n    };\n\n    return documentData;\n}\n\nfunction createDocSkeleton(text: string, localeService: LocaleService, style?: Nullable<IStyleData>) {\n    const documentData = convertToDocumentData(text, style);\n\n    const docModel = new DocumentDataModel(documentData);\n    const docViewModel = new DocumentViewModel(docModel);\n\n    const documentSkeleton = DocumentSkeleton.create(docViewModel, localeService);\n\n    return {\n        documentSkeleton,\n        docModel,\n        docViewModel,\n    };\n}\n\nfunction createDocuments(text: string, localeService: LocaleService, style?: Nullable<IStyleData>) {\n    const {\n        documentSkeleton,\n        docModel,\n        docViewModel,\n    } = createDocSkeleton(text, localeService, style);\n\n    const documents = new Documents(`DOCUMENTS_${Tools.generateRandomId()}`, documentSkeleton, {\n        pageMarginLeft: 0,\n        pageMarginTop: 0,\n    });\n    return {\n        documents,\n        documentSkeleton,\n        docModel,\n        docViewModel,\n    };\n}\n\nfunction calcPadding(cellWidth: number, cellHeight: number, fontWidth: number, fontHeight: number, vt: VerticalAlign, ht: HorizontalAlign, margin = true) {\n    let paddingTop = 0;\n    const realMargin = margin ? MARGIN_V : 0;\n    switch (vt) {\n        case VerticalAlign.BOTTOM:\n            paddingTop = cellHeight - fontHeight - realMargin;\n            break;\n        case VerticalAlign.MIDDLE:\n            paddingTop = (cellHeight - fontHeight) / 2;\n            break;\n        default:\n            paddingTop = realMargin;\n            break;\n    }\n    paddingTop = Math.max(MARGIN_V, paddingTop);\n\n    let paddingLeft = 0;\n    switch (ht) {\n        case HorizontalAlign.CENTER:\n            paddingLeft = (cellWidth - fontWidth) / 2;\n            break;\n        case HorizontalAlign.RIGHT:\n            paddingLeft = (cellWidth - fontWidth);\n            break;\n\n        default:\n            break;\n    }\n    paddingLeft = Math.max(MARGIN_H, paddingLeft);\n\n    return {\n        paddingLeft,\n        paddingTop,\n    };\n}\n\nexport interface IDropdownInfo {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n}\n\nexport class DropdownWidget implements IBaseDataValidationWidget {\n    private _dropdownInfoMap: Map<string, Map<string, IDropdownInfo>> = new Map();\n\n    constructor(\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @Inject(LocaleService) private readonly _localeService: LocaleService,\n        @ICommandService private readonly _commandService: ICommandService,\n        @Inject(IRenderManagerService) private readonly _renderManagerService: IRenderManagerService,\n        @Inject(SheetDataValidationModel) private readonly _dataValidationModel: SheetDataValidationModel\n    ) {\n        // super\n    }\n\n    zIndex?: number | undefined;\n\n    private _ensureMap(subUnitId: string) {\n        let map = this._dropdownInfoMap.get(subUnitId);\n\n        if (!map) {\n            map = new Map();\n            this._dropdownInfoMap.set(subUnitId, map);\n        }\n        return map;\n    }\n\n    private _generateKey(row: number, col: number) {\n        return `${row}.${col}`;\n    }\n\n    private _drawDownIcon(\n        ctx: UniverRenderingContext2D,\n        cellBounding: { startX: number; startY: number },\n        cellWidth: number,\n        cellHeight: number,\n        fontHeight: number,\n        vt: VerticalAlign,\n        pd: IPaddingData\n    ) {\n        const { t = DEFAULT_STYLES.pd.t, b = DEFAULT_STYLES.pd.b } = pd;\n        const left = cellWidth - ICON_PLACE;\n        let top;\n        switch (vt) {\n            case VerticalAlign.MIDDLE:\n                top = (cellHeight - ICON_SIZE) / 2;\n                break;\n            case VerticalAlign.BOTTOM:\n                top = (cellHeight - b - fontHeight - MARGIN_V) + (fontHeight / 2 - ICON_SIZE / 2);\n                break;\n            default:\n                top = t + MARGIN_V + (fontHeight / 2 - ICON_SIZE / 2);\n                break;\n        }\n        ctx.save();\n        ctx.translateWithPrecision(cellBounding.startX + left, cellBounding.startY + top);\n        ctx.fillStyle = '#565656';\n        ctx.fill(downPath);\n        ctx.restore();\n    }\n\n    // eslint-disable-next-line max-lines-per-function, complexity\n    drawWith(ctx: UniverRenderingContext2D, info: ICellRenderContext, skeleton: SpreadsheetSkeleton): void {\n        const { primaryWithCoord, row, col, style, data, subUnitId } = info;\n        const _cellBounding = primaryWithCoord.isMergedMainCell ? primaryWithCoord.mergeInfo : primaryWithCoord;\n        const rule = this._dataValidationModel.getRuleByLocation(info.unitId, info.subUnitId, row, col);\n        if (!rule) {\n            return;\n        }\n        const validator = this._dataValidationModel.getValidator(rule.type) as ListValidator;\n        if (!validator) {\n            return;\n        }\n        const fontRenderExtension = data?.fontRenderExtension;\n        const { leftOffset = 0, rightOffset = 0, topOffset = 0, downOffset = 0 } = fontRenderExtension || {};\n\n        if (!rule || !validator || !validator || validator.id.indexOf(DataValidationType.LIST) !== 0) {\n            return;\n        }\n\n        if (!validator.skipDefaultFontRender(rule)) {\n            return;\n        }\n\n        const cellBounding = {\n            startX: _cellBounding.startX + leftOffset,\n            endX: _cellBounding.endX - rightOffset,\n            startY: _cellBounding.startY + topOffset,\n            endY: _cellBounding.endY - downOffset,\n\n        };\n        const cellWidth = cellBounding.endX - cellBounding.startX;\n        const cellHeight = cellBounding.endY - cellBounding.startY;\n        const map = this._ensureMap(subUnitId);\n        const key = this._generateKey(row, col);\n\n        const list = validator.getListWithColor(rule);\n        const value = getCellValueOrigin(data);\n        const valueStr = `${value ?? ''}`;\n        const activeItem = list.find((i) => i.label === valueStr);\n        let { tb, vt, ht, pd } = style || {};\n        tb = tb ?? WrapStrategy.WRAP;\n        vt = vt ?? VerticalAlign.BOTTOM;\n        ht = ht ?? DEFAULT_STYLES.ht;\n        pd = pd ?? DEFAULT_STYLES.pd;\n\n        if (rule.renderMode === DataValidationRenderMode.ARROW) {\n            const { l = DEFAULT_STYLES.pd.l, t = DEFAULT_STYLES.pd.t, r = DEFAULT_STYLES.pd.r, b = DEFAULT_STYLES.pd.b } = pd;\n            const realWidth = cellWidth - l - r - ICON_PLACE - 4;\n            const { documentSkeleton, documents, docModel } = createDocuments(valueStr, this._localeService, style);\n\n            if (\n                tb === WrapStrategy.WRAP\n            ) {\n                docModel.updateDocumentDataPageSize(Math.max(realWidth, 1));\n            }\n\n            documentSkeleton.calculate();\n            documentSkeleton.getActualSize();\n            const textLayout = getDocsSkeletonPageSize(documentSkeleton)!;\n            const { height: fontHeight, width: fontWidth } = textLayout;\n            const { paddingTop, paddingLeft } = calcPadding(realWidth, cellHeight - t - b, fontWidth, fontHeight, vt, ht, true);\n\n            this._drawDownIcon(ctx, cellBounding, cellWidth, cellHeight, fontHeight, vt, pd);\n            ctx.save();\n            ctx.translateWithPrecision(cellBounding.startX + l, cellBounding.startY + t);\n            ctx.beginPath();\n            ctx.rect(0, 0, cellWidth - l - r, cellHeight - t - b);\n            ctx.clip();\n\n            ctx.translateWithPrecision(0, paddingTop);\n            ctx.save();\n            ctx.translateWithPrecision(PADDING_H, 0);\n            ctx.beginPath();\n            ctx.rect(0, 0, realWidth, fontHeight);\n            ctx.clip();\n            documents.render(ctx as UniverRenderingContext);\n            ctx.translateWithPrecision(paddingLeft, 0);\n            ctx.restore();\n\n            ctx.restore();\n\n            map.set(key, {\n                left: cellBounding.endX + l + skeleton.rowHeaderWidth - ICON_PLACE,\n                top: cellBounding.startY + t + skeleton.columnHeaderHeight,\n                width: ICON_PLACE,\n                height: cellHeight - t - b,\n            });\n        } else {\n            ctx.save();\n            ctx.translateWithPrecision(cellBounding.startX, cellBounding.startY);\n            ctx.beginPath();\n            ctx.rect(0, 0, cellWidth, cellHeight);\n            ctx.clip();\n\n            const realWidth = cellWidth - (MARGIN_H * 2) - PADDING_H - ICON_PLACE - 4;\n            const { documentSkeleton, documents, docModel } = createDocuments(valueStr, this._localeService, style);\n            if (\n                tb === WrapStrategy.WRAP\n            ) {\n                docModel.updateDocumentDataPageSize(Math.max(realWidth, 1));\n            }\n            documentSkeleton.calculate();\n            const textLayout = getDocsSkeletonPageSize(documentSkeleton)!;\n            const { height: fontHeight, width: fontWidth } = textLayout;\n            const { paddingTop, paddingLeft } = calcPadding(realWidth, cellHeight, fontWidth, fontHeight, vt, ht);\n\n            ctx.translateWithPrecision(MARGIN_H, paddingTop);\n            const rectWidth = Math.max(cellWidth - MARGIN_H * 2, 1);\n            const rectHeight = fontHeight;\n            Rect.drawWith(ctx as UniverRenderingContext, {\n                width: rectWidth,\n                height: rectHeight,\n                fill: activeItem?.color || DROP_DOWN_DEFAULT_COLOR,\n                radius: RADIUS_BG,\n            });\n            ctx.save();\n            ctx.translateWithPrecision(PADDING_H, 0);\n            ctx.beginPath();\n            ctx.rect(0, 0, realWidth, fontHeight);\n            ctx.clip();\n            ctx.translateWithPrecision(paddingLeft, 0);\n            documents.render(ctx as UniverRenderingContext);\n            ctx.restore();\n            ctx.translateWithPrecision(realWidth + PADDING_H + 4, (fontHeight - ICON_SIZE) / 2);\n            ctx.fillStyle = DROP_DOWN_ICON_COLOR;\n            ctx.fill(downPath);\n            ctx.restore();\n\n            map.set(key, {\n                left: cellBounding.startX + MARGIN_H + skeleton.rowHeaderWidth,\n                top: cellBounding.startY + paddingTop + skeleton.columnHeaderHeight,\n                width: rectWidth,\n                height: rectHeight,\n            });\n        }\n    }\n\n    calcCellAutoHeight(info: ICellRenderContext): number | undefined {\n        const { primaryWithCoord, style, data, row, col } = info;\n        const _cellBounding = primaryWithCoord.isMergedMainCell ? primaryWithCoord.mergeInfo : primaryWithCoord;\n\n        const fontRenderExtension = data?.fontRenderExtension;\n        const { leftOffset = 0, rightOffset = 0, topOffset = 0, downOffset = 0 } = fontRenderExtension || {};\n\n        const rule = this._dataValidationModel.getRuleByLocation(info.unitId, info.subUnitId, row, col);\n        if (!rule) {\n            return;\n        }\n\n        if (rule.renderMode === DataValidationRenderMode.TEXT) {\n            return undefined;\n        }\n\n        const cellBounding = {\n            startX: _cellBounding.startX + leftOffset,\n            endX: _cellBounding.endX - rightOffset,\n            startY: _cellBounding.startY + topOffset,\n            endY: _cellBounding.endY - downOffset,\n\n        };\n        const cellWidth = cellBounding.endX - cellBounding.startX;\n        const value = getCellValueOrigin(data);\n        const valueStr = `${value ?? ''}`;\n\n        let { tb, pd } = style || {};\n        const { t = DEFAULT_STYLES.pd.t, b = DEFAULT_STYLES.pd.b } = (pd ?? {});\n        tb = tb ?? WrapStrategy.WRAP;\n\n        if (rule.renderMode === DataValidationRenderMode.ARROW) {\n            const realWidth = cellWidth - ICON_PLACE;\n            const { documentSkeleton, docModel } = createDocuments(valueStr, this._localeService, style);\n            if (\n                tb === WrapStrategy.WRAP\n            ) {\n                docModel.updateDocumentDataPageSize(Math.max(realWidth, 1));\n            }\n\n            documentSkeleton.calculate();\n            documentSkeleton.getActualSize();\n            const textLayout = getDocsSkeletonPageSize(documentSkeleton)!;\n            const { height: fontHeight } = textLayout;\n\n            return fontHeight + t + b + MARGIN_V * 2;\n        } else {\n            const realWidth = cellWidth - (MARGIN_H * 2) - PADDING_H - ICON_PLACE;\n            const { documentSkeleton, docModel } = createDocSkeleton(valueStr, this._localeService, style);\n            if (\n                tb === WrapStrategy.WRAP\n            ) {\n                docModel.updateDocumentDataPageSize(Math.max(realWidth, 1));\n            }\n\n            documentSkeleton.calculate();\n            const textLayout = getDocsSkeletonPageSize(documentSkeleton)!;\n\n            const {\n                height: fontHeight,\n            } = textLayout;\n\n            return fontHeight + (MARGIN_V * 2);\n        }\n    }\n\n    calcCellAutoWidth(info: ICellRenderContext): number | undefined {\n        const { primaryWithCoord, style, data, row, col } = info;\n        const cellRange = primaryWithCoord.isMergedMainCell ? primaryWithCoord.mergeInfo : primaryWithCoord;\n\n        const fontRenderExtension = data?.fontRenderExtension;\n        const { leftOffset = 0, rightOffset = 0, topOffset = 0, downOffset = 0 } = fontRenderExtension || {};\n\n        const rule = this._dataValidationModel.getRuleByLocation(info.unitId, info.subUnitId, row, col);\n        if (!rule) {\n            return;\n        }\n\n        if (rule.renderMode === DataValidationRenderMode.TEXT) {\n            return;\n        }\n\n        const cellBounding = {\n            startX: cellRange.startX + leftOffset,\n            endX: cellRange.endX - rightOffset,\n            startY: cellRange.startY + topOffset,\n            endY: cellRange.endY - downOffset,\n        };\n        const cellWidth = cellBounding.endX - cellBounding.startX;\n        const value = getCellValueOrigin(data);\n        const valueStr = `${value ?? ''}`;\n\n        let { tb, pd } = style || {};\n        const { l = DEFAULT_STYLES.pd.l, r = DEFAULT_STYLES.pd.r } = (pd ?? {});\n        tb = tb ?? WrapStrategy.WRAP;\n\n        let paddingAll = MARGIN_H * 2 + ICON_PLACE;\n        switch (rule.renderMode) {\n            case DataValidationRenderMode.ARROW:\n                paddingAll = ICON_PLACE + MARGIN_H * 2 + r + l;\n                break;\n            case DataValidationRenderMode.CUSTOM:\n                // + 1 is must, or last character will be cut\n                paddingAll = ICON_PLACE + MARGIN_H * 2 + PADDING_H * 2 + r + l + RADIUS_BG / 2 + 1;\n                break;\n                // default is CUSTOM\n            default:\n                paddingAll = ICON_PLACE + MARGIN_H * 2 + PADDING_H * 2 + r + l + RADIUS_BG / 2 + 1;\n        }\n        const widthForTextLayout = cellWidth - paddingAll;\n        const { documentSkeleton, docModel } = createDocuments(valueStr, this._localeService, style);\n        if (tb === WrapStrategy.WRAP) {\n            docModel.updateDocumentDataPageSize(Math.max(widthForTextLayout, 1));\n        }\n\n        documentSkeleton.calculate();\n        documentSkeleton.getActualSize();\n        const textLayout = getDocsSkeletonPageSize(documentSkeleton)!;\n        return textLayout.width + paddingAll;\n    }\n\n    isHit(position: { x: number; y: number }, info: ICellRenderContext) {\n        const { subUnitId, row, col } = info;\n        const map = this._ensureMap(subUnitId);\n        const dropdownInfo = map.get(this._generateKey(row, col));\n        const rule = this._dataValidationModel.getRuleByLocation(info.unitId, info.subUnitId, row, col);\n        if (!rule) {\n            return false;\n        }\n\n        if (!dropdownInfo) {\n            return false;\n        }\n        if (rule.renderMode === DataValidationRenderMode.TEXT) {\n            return false;\n        }\n        const { top, left, width, height } = dropdownInfo;\n        const { x, y } = position;\n\n        if (x >= left && (x <= (left + width)) && y >= top && (y <= (top + height))) {\n            return true;\n        }\n\n        return false;\n    };\n\n    onPointerDown(info: ICellRenderContext, evt: IPointerEvent | IMouseEvent) {\n        if (evt.button === 2) {\n            return;\n        }\n\n        const { unitId, subUnitId, row, col } = info;\n\n        const params: IShowDataValidationDropdownParams = {\n            unitId: unitId!,\n            subUnitId,\n            row,\n            column: col,\n        };\n\n        this._commandService.executeCommand(ShowDataValidationDropdown.id, params);\n    };\n\n    onPointerEnter(info: ICellRenderContext, evt: IPointerEvent | IMouseEvent) {\n        getCurrentTypeOfRenderer(UniverInstanceType.UNIVER_SHEET, this._univerInstanceService, this._renderManagerService)\n            ?.mainComponent\n            ?.setCursor(CURSOR_TYPE.POINTER);\n    }\n\n    onPointerLeave(info: ICellRenderContext, evt: IPointerEvent | IMouseEvent) {\n        getCurrentTypeOfRenderer(UniverInstanceType.UNIVER_SHEET, this._univerInstanceService, this._renderManagerService)\n            ?.mainComponent\n            ?.setCursor(CURSOR_TYPE.DEFAULT);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IBaseDataValidationWidget } from '@univerjs/data-validation';\nimport { DataValidationType, type Nullable } from '@univerjs/core';\nimport { LIST_DROPDOWN_KEY } from '../components';\nimport { LIST_FORMULA_INPUT_NAME } from '../components/formula-input';\nimport { ListRenderModeInput } from '../components/render-mode';\nimport { DropdownWidget } from '../widgets/dropdown-widget';\nimport { BaseSheetDataValidatorView } from './sheet-validator-view';\n\nexport class ListValidatorView extends BaseSheetDataValidatorView {\n    override id = DataValidationType.LIST;\n    override canvasRender: Nullable<IBaseDataValidationWidget> = this.injector.createInstance(DropdownWidget);\n    override dropdown: string | undefined = LIST_DROPDOWN_KEY;\n    override optionsInput: string | undefined = ListRenderModeInput.componentKey;\n    override formulaInput: string = LIST_FORMULA_INPUT_NAME;\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataValidationType } from '@univerjs/core';\nimport { BASE_FORMULA_INPUT_NAME } from '../components/formula-input';\nimport { BaseSheetDataValidatorView } from './sheet-validator-view';\n\nexport class TextLengthValidatorView extends BaseSheetDataValidatorView {\n    override id = DataValidationType.TEXT_LENGTH;\n    override formulaInput: string = BASE_FORMULA_INPUT_NAME;\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataValidationType } from '@univerjs/core';\nimport { BASE_FORMULA_INPUT_NAME } from '../components/formula-input';\nimport { BaseSheetDataValidatorView } from './sheet-validator-view';\n\nexport class WholeValidatorView extends BaseSheetDataValidatorView {\n    override id = DataValidationType.WHOLE;\n    override formulaInput: string = BASE_FORMULA_INPUT_NAME;\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Ctor } from '@univerjs/core';\nimport type { BaseSheetDataValidatorView } from '../views/validator-views/sheet-validator-view';\nimport { Inject, Injector, RxDisposable } from '@univerjs/core';\nimport { DataValidatorRegistryService } from '@univerjs/data-validation';\nimport { DataValidationSingle } from '@univerjs/icons';\nimport { ComponentManager } from '@univerjs/ui';\nimport { DATA_VALIDATION_PANEL } from '../commands/operations/data-validation.operation';\nimport { DataValidationPanel, DATE_DROPDOWN_KEY, DateDropdown, LIST_DROPDOWN_KEY, ListDropDown } from '../views/components';\nimport { CellDropdown, DROP_DOWN_KEY } from '../views/components/drop-down';\nimport { FORMULA_INPUTS } from '../views/components/formula-input';\nimport { ListRenderModeInput } from '../views/components/render-mode';\nimport { DateShowTimeOption } from '../views/components/show-time';\nimport { CheckboxValidatorView } from '../views/validator-views/checkbox-validator-view';\nimport { CustomFormulaValidatorView } from '../views/validator-views/custom-validator-view';\nimport { DateValidatorView } from '../views/validator-views/date-validator-view';\nimport { DecimalValidatorView } from '../views/validator-views/decimal-validator-view';\nimport { ListMultipleValidatorView } from '../views/validator-views/list-multiple-view';\nimport { ListValidatorView } from '../views/validator-views/list-validator-view';\nimport { TextLengthValidatorView } from '../views/validator-views/text-length-validator.view';\nimport { WholeValidatorView } from '../views/validator-views/whole-validator-view';\nimport { DataValidationIcon } from './dv.menu';\n\nexport class SheetsDataValidationUIController extends RxDisposable {\n    constructor(\n        @Inject(Injector) private readonly _injector: Injector,\n        @Inject(ComponentManager) private readonly _componentManger: ComponentManager,\n        @Inject(DataValidatorRegistryService) private readonly _dataValidatorRegistryService: DataValidatorRegistryService\n    ) {\n        super();\n\n        this._initComponents();\n        this._registerValidatorViews();\n    }\n\n    private _initComponents() {\n        ([\n            [DataValidationIcon, DataValidationSingle],\n            [DATA_VALIDATION_PANEL, DataValidationPanel],\n            [DROP_DOWN_KEY, CellDropdown],\n            [LIST_DROPDOWN_KEY, ListDropDown],\n            [DATE_DROPDOWN_KEY, DateDropdown],\n            [ListRenderModeInput.componentKey, ListRenderModeInput],\n            [DateShowTimeOption.componentKey, DateShowTimeOption],\n            ...FORMULA_INPUTS,\n        ] as const).forEach(([key, component]) => {\n            this.disposeWithMe(this._componentManger.register(\n                key,\n                component\n            ));\n        });\n    }\n\n    private _registerValidatorViews(): void {\n        ([\n            DecimalValidatorView,\n            WholeValidatorView,\n            TextLengthValidatorView,\n            DateValidatorView,\n            CheckboxValidatorView,\n            ListValidatorView,\n            ListMultipleValidatorView,\n            CustomFormulaValidatorView,\n        ] as Ctor<BaseSheetDataValidatorView>[]).forEach((v) => {\n            const view = this._injector.createInstance(v);\n            const validator = this._dataValidatorRegistryService.getValidatorItem(view.id);\n            if (validator) {\n                validator.formulaInput = view.formulaInput;\n                validator.canvasRender = view.canvasRender;\n                validator.dropdown = view.dropdown;\n                validator.optionsInput = view.optionsInput;\n            }\n        });\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency, Workbook } from '@univerjs/core';\nimport type { IUniverSheetsDataValidationUIConfig } from './controllers/config.schema';\nimport { ICommandService, IConfigService, Inject, Injector, merge, Plugin, UniverInstanceType } from '@univerjs/core';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { AddSheetDataValidationAndOpenCommand } from './commands/commands/data-validation-ui.command';\nimport {\n    CloseValidationPanelOperation,\n    HideDataValidationDropdown,\n    OpenValidationPanelOperation,\n    ShowDataValidationDropdown,\n    ToggleValidationPanelOperation,\n} from './commands/operations/data-validation.operation';\nimport { defaultPluginConfig, SHEETS_DATA_VALIDATION_UI_PLUGIN_CONFIG_KEY } from './controllers/config.schema';\nimport { DataValidationAlertController } from './controllers/dv-alert.controller';\nimport { DataValidationAutoFillController } from './controllers/dv-auto-fill.controller';\nimport { DataValidationCopyPasteController } from './controllers/dv-copy-paste.controller';\nimport { DataValidationPermissionController } from './controllers/dv-permission.controller';\nimport { DataValidationRejectInputController } from './controllers/dv-reject-input.controller';\nimport { SheetsDataValidationRenderController } from './controllers/dv-render.controller';\nimport { SheetsDataValidationReRenderController } from './controllers/dv-rerender.controller';\nimport { SheetsDataValidationUIController } from './controllers/dv-ui.controller';\nimport { DataValidationPanelService } from './services/data-validation-panel.service';\nimport { DataValidationDropdownManagerService } from './services/dropdown-manager.service';\n\nconst PLUGIN_NAME = 'SHEET_DATA_VALIDATION_UI_PLUGIN';\n\nexport class UniverSheetsDataValidationUIPlugin extends Plugin {\n    static override pluginName: string = PLUGIN_NAME;\n    static override type = UniverInstanceType.UNIVER_SHEET;\n\n    constructor(\n        private readonly _config: Partial<IUniverSheetsDataValidationUIConfig> = defaultPluginConfig,\n        @Inject(Injector) protected readonly _injector: Injector,\n        @ICommandService private readonly _commandService: ICommandService,\n        @IConfigService private readonly _configService: IConfigService\n    ) {\n        super();\n\n        // Manage the plugin configuration.\n        const { menu, ...rest } = merge(\n            {},\n            defaultPluginConfig,\n            this._config\n        );\n        if (menu) {\n            this._configService.setConfig('menu', menu, { merge: true });\n        }\n        this._configService.setConfig(SHEETS_DATA_VALIDATION_UI_PLUGIN_CONFIG_KEY, rest);\n    }\n\n    override onStarting(): void {\n        ([\n            [DataValidationPanelService],\n            [DataValidationDropdownManagerService],\n            [DataValidationAlertController],\n            [DataValidationAutoFillController],\n            [SheetsDataValidationRenderController],\n            [DataValidationPermissionController],\n            [DataValidationCopyPasteController],\n            [DataValidationRejectInputController],\n            [SheetsDataValidationUIController],\n        ] as Dependency[]).forEach((dep) => {\n            this._injector.add(dep);\n        });\n\n        [\n            AddSheetDataValidationAndOpenCommand,\n            ShowDataValidationDropdown,\n            HideDataValidationDropdown,\n            CloseValidationPanelOperation,\n            OpenValidationPanelOperation,\n            ToggleValidationPanelOperation,\n        ].forEach((command) => {\n            this._commandService.registerCommand(command);\n        });\n    }\n\n    override onReady(): void {\n        this._injector.get(DataValidationCopyPasteController);\n        this._injector.get(DataValidationPermissionController);\n        this._injector.get(DataValidationRejectInputController);\n        this._injector.get(DataValidationAlertController);\n\n        const renderManager = this._injector.get(IRenderManagerService);\n        renderManager.registerRenderModule<Workbook>(\n            UniverInstanceType.UNIVER_SHEET,\n            [SheetsDataValidationReRenderController] as Dependency\n        );\n    }\n\n    override onRendered(): void {\n        this._injector.get(SheetsDataValidationUIController);\n        this._injector.get(SheetsDataValidationRenderController);\n    }\n\n    override onSteady(): void {\n        this._injector.get(DataValidationAutoFillController);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency, Workbook } from '@univerjs/core';\nimport type { IUniverSheetsDataValidationUIConfig } from './controllers/config.schema';\nimport { ICommandService, IConfigService, Inject, Injector, merge, Plugin, UniverInstanceType } from '@univerjs/core';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { AddSheetDataValidationAndOpenCommand } from './commands/commands/data-validation-ui.command';\nimport {\n    CloseValidationPanelOperation,\n    HideDataValidationDropdown,\n    OpenValidationPanelOperation,\n    ShowDataValidationDropdown,\n    ToggleValidationPanelOperation,\n} from './commands/operations/data-validation.operation';\nimport { defaultPluginConfig, SHEETS_DATA_VALIDATION_UI_PLUGIN_CONFIG_KEY } from './controllers/config.schema';\nimport { DataValidationAlertController } from './controllers/dv-alert.controller';\nimport { DataValidationAutoFillController } from './controllers/dv-auto-fill.controller';\nimport { DataValidationCopyPasteController } from './controllers/dv-copy-paste.controller';\nimport { DataValidationPermissionController } from './controllers/dv-permission.controller';\nimport { SheetsDataValidationRenderController } from './controllers/dv-render.controller';\nimport { SheetsDataValidationReRenderController } from './controllers/dv-rerender.controller';\nimport { SheetsDataValidationUIController } from './controllers/dv-ui.controller';\nimport { DataValidationPanelService } from './services/data-validation-panel.service';\nimport { DataValidationDropdownManagerService } from './services/dropdown-manager.service';\n\nconst PLUGIN_NAME = 'SHEET_DATA_VALIDATION_UI_PLUGIN';\n\nexport class UniverSheetsDataValidationMobileUIPlugin extends Plugin {\n    static override pluginName: string = PLUGIN_NAME;\n    static override type = UniverInstanceType.UNIVER_SHEET;\n\n    constructor(\n        private readonly _config: Partial<IUniverSheetsDataValidationUIConfig> = defaultPluginConfig,\n        @Inject(Injector) protected readonly _injector: Injector,\n        @ICommandService private readonly _commandService: ICommandService,\n        @IConfigService private readonly _configService: IConfigService\n    ) {\n        super();\n\n        // Manage the plugin configuration.\n        const { menu, ...rest } = merge(\n            {},\n            defaultPluginConfig,\n            this._config\n        );\n        if (menu) {\n            this._configService.setConfig('menu', menu, { merge: true });\n        }\n        this._configService.setConfig(SHEETS_DATA_VALIDATION_UI_PLUGIN_CONFIG_KEY, rest);\n    }\n\n    override onStarting(): void {\n        ([\n            [DataValidationPanelService],\n            [DataValidationDropdownManagerService],\n            [DataValidationAlertController],\n            [DataValidationAutoFillController],\n            [SheetsDataValidationRenderController],\n            [DataValidationPermissionController],\n            [DataValidationCopyPasteController],\n            [SheetsDataValidationUIController],\n        ] as Dependency[]).forEach((dep) => {\n            this._injector.add(dep);\n        });\n\n        [\n            AddSheetDataValidationAndOpenCommand,\n            ShowDataValidationDropdown,\n            HideDataValidationDropdown,\n            CloseValidationPanelOperation,\n            OpenValidationPanelOperation,\n            ToggleValidationPanelOperation,\n        ].forEach((command) => {\n            this._commandService.registerCommand(command);\n        });\n    }\n\n    override onReady(): void {\n        this._injector.get(DataValidationCopyPasteController);\n        this._injector.get(DataValidationPermissionController);\n\n        const renderManager = this._injector.get(IRenderManagerService);\n        renderManager.registerRenderModule<Workbook>(\n            UniverInstanceType.UNIVER_SHEET,\n            [SheetsDataValidationReRenderController] as Dependency\n        );\n    }\n\n    override onRendered(): void {\n        this._injector.get(SheetsDataValidationUIController);\n        this._injector.get(SheetsDataValidationRenderController);\n    }\n\n    override onSteady(): void {\n        this._injector.get(DataValidationAutoFillController);\n    }\n}\n"],
  "mappings": "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",
  "names": ["sourceRange", "targetRange", "React", "_a", "_b", "_c", "_d", "_e", "_a", "import_react", "import_jsx_runtime", "dayjs", "_a", "import_react", "index_module_default", "import_jsx_runtime", "filter", "index_module_default", "_a", "_b", "unitId", "import_react", "import_react", "index_module_default", "import_jsx_runtime", "index_module_default", "index_module_default", "import_jsx_runtime", "_a", "validator", "operators", "rule", "index_module_default", "import_react", "import_react", "index_module_default", "import_jsx_runtime", "index_module_default", "index_module_default", "import_jsx_runtime", "rules", "workbook", "worksheet", "unitId", "subUnitId", "rulesByPermissionCheck", "index_module_default", "import_jsx_runtime", "index_module_default", "import_jsx_runtime", "index_module_default", "import_react", "import_jsx_runtime", "index_module_default", "import_react", "import_jsx_runtime", "_a", "import_react", "import_jsx_runtime", "index_module_default", "formula1", "value", "import_jsx_runtime", "import_jsx_runtime", "BASE_FORMULA_INPUT_NAME", "BASE_FORMULA_INPUT_NAME", "MARGIN_H", "MARGIN_H", "items", "PADDING_H", "ICON_PLACE", "MARGIN_H", "MARGIN_V", "downPath", "PLUGIN_NAME"]
}
