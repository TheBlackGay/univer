{
  "version": 3,
  "sources": ["../../packages/sheets-filter/src/controllers/config.schema.ts", "../../packages/sheets-filter/src/common/const.ts", "../../packages/sheets-filter/src/models/types.ts", "../../packages/sheets-filter/src/models/custom-filters.ts", "../../packages/sheets-filter/src/models/filter-model.ts", "../../packages/sheets-filter/src/services/sheet-filter.service.ts", "../../packages/sheets-filter/src/commands/mutations/sheets-filter.mutation.ts", "../../packages/sheets-filter/src/utils.ts", "../../packages/sheets-filter/src/controllers/sheets-filter.controller.ts", "../../packages/sheets-filter/src/services/sheet-filter-formula.service.ts", "../../packages/sheets-filter/src/plugin.ts", "../../packages/sheets-filter/src/commands/commands/sheets-filter.command.ts"],
  "sourcesContent": ["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const SHEETS_FILTER_PLUGIN_CONFIG_KEY = 'sheets-filter.config';\n\nexport const configSymbol = Symbol(SHEETS_FILTER_PLUGIN_CONFIG_KEY);\n\nexport interface IUniverSheetsFilterConfig {\n}\n\nexport const defaultPluginConfig: IUniverSheetsFilterConfig = {};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const SetSheetsFilterRangeMutationId = 'sheet.mutation.set-filter-range';\nexport const SetSheetsFilterCriteriaMutationId = 'sheet.mutation.set-filter-criteria';\nexport const RemoveSheetsFilterMutationId = 'sheet.mutation.remove-filter';\nexport const ReCalcSheetsFilterMutationId = 'sheet.mutation.re-calc-filter';\n\nexport const FILTER_MUTATIONS = new Set([\n    SetSheetsFilterRangeMutationId,\n    SetSheetsFilterCriteriaMutationId,\n    RemoveSheetsFilterMutationId,\n    ReCalcSheetsFilterMutationId,\n]);\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { BooleanNumber, IRange } from '@univerjs/core';\n\n/**\n * Data of a filter in a {@link Worksheet}.\n *\n * Please refer to 18.3.2 AutoFilter Settings. Properties of this interface would be added in the future.\n * Please make sure that it is backward compatible.\n *\n * @property {IRange} ref The range of the filter.\n * @property {IFilterColumn[]} [filterColumns] The filter criteria of each column.\n * @property {number[]} [cachedFilteredOut] The cached filtered out row numbers.\n */\nexport interface IAutoFilter {\n    ref: IRange;\n\n    filterColumns?: IFilterColumn[];\n    cachedFilteredOut?: number[];\n}\n\n/**\n * The filter criteria of a column.\n *\n * @property {number} colId The column number.\n * @property {IFilters} [filters] The basic filters (filter by value).\n * @property {ICustomFilters} [customFilters] The custom filters.\n */\nexport interface IFilterColumn {\n    colId: number;\n    filters?: IFilters;\n    customFilters?: ICustomFilters;\n};\n\n/**\n * Basic filters (filter by value).\n *\n * @property {true} [blank] Filter by blank. If this field is present, blank cells would be visible.\n * @property {Array<string>} [filters] Filter by values. Cells with values in this array would be visible.\n */\nexport interface IFilters {\n    blank?: true;\n    filters?: Array<string>;\n}\n\n/**\n * Custom filters.\n *\n * @property {BooleanNumber.TRUE} and The logical operator of the custom filters. If this field is present,\n * the custom filters would be connected by 'and'. Otherwise, they would be connected by 'or'.\n * @property {ICustomFilter[]} customFilters The custom filters.\n */\nexport interface ICustomFilters {\n    and?: BooleanNumber.TRUE;\n    customFilters: [ICustomFilter] | [ICustomFilter, ICustomFilter];\n}\n\n/**\n * A custom filter.\n *\n * @property {string | number} val The value to be compared.\n * @property {CustomFilterOperator} [operator] The operator of the comparison. If this field is empty, the operator would be 'equal'.\n */\nexport interface ICustomFilter {\n    val: string | number;\n    operator?: CustomFilterOperator;\n}\n\n/**\n * Basic custom filter operators.\n *\n * @internal\n * doesNotContain, isBlank, isNotBlank are not defined in OOXML. They are represented by regex-like values.\n */\nexport enum CustomFilterOperator {\n    /** \"EQUAL\" operator. */\n    EQUAL = 'equal',\n    /** \"GREATER_THAN\" operator. */\n    GREATER_THAN = 'greaterThan',\n    /** \"GREATER_THAN_OR_EQUAL\" operator. */\n    GREATER_THAN_OR_EQUAL = 'greaterThanOrEqual',\n    /** \"LESS_THAN\" operator. */\n    LESS_THAN = 'lessThan',\n    /** \"LESS_THAN_OR_EQUAL\" operator. */\n    LESS_THAN_OR_EQUAL = 'lessThanOrEqual',\n    /** \"NOT_EQUALS\" operator. */\n    NOT_EQUALS = 'notEqual',\n}\n\nexport interface IDynamicFilter {\n    val: string | number;\n\n    type: DynamicFilterOperator;\n}\n\n/**\n * Not used now. Would be used in the future.\n */\nexport enum DynamicFilterOperator {\n    ABOVE_AVERAGE = 'aboveAverage',\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CellValue, Nullable } from '@univerjs/core';\nimport { isNumeric } from '@univerjs/core';\nimport { CustomFilterOperator } from './types';\n\nexport interface IFilterFn<P extends unknown[]> {\n    label?: string;\n\n    /**\n     * Description of this operator. Should be an i18n key.\n     */\n    description?: string;\n\n    fn: (...params: P) => boolean;\n\n}\n\n/**\n * Custom filter functions normally used in \"Filter by Conditions\".\n */\nexport interface ICustomFilterFn<P extends unknown[]> extends IFilterFn<P> {\n    /**\n     * Operator of the custom filter function.\n     */\n    operator?: CustomFilterOperator;\n\n    /**\n     * Group of the custom filter belongs to. It would be rendered in the panel by groups.\n     */\n    group?: string;\n\n    fn: (...params: P) => boolean;\n}\n\ntype TwoParameters<C = string> = [value: Nullable<CellValue>, compare: C];\n\nexport const greaterThan: ICustomFilterFn<TwoParameters<number>> = {\n    operator: CustomFilterOperator.GREATER_THAN,\n    fn: (value, compare): boolean => {\n        if (!ensureNumber(value)) {\n            return false;\n        }\n\n        return value > compare;\n    },\n};\n\nexport const greaterThanOrEqualTo: ICustomFilterFn<TwoParameters<number>> = {\n    operator: CustomFilterOperator.GREATER_THAN_OR_EQUAL,\n    fn: (value, compare): boolean => {\n        if (!ensureNumber(value)) {\n            return false;\n        }\n\n        return value >= compare;\n    },\n};\n\nexport const lessThan: ICustomFilterFn<TwoParameters<number>> = {\n    operator: CustomFilterOperator.LESS_THAN,\n    fn: (value, compare): boolean => {\n        if (!ensureNumber(value)) {\n            return false;\n        }\n\n        return value < compare;\n    },\n};\n\nexport const lessThanOrEqualTo: ICustomFilterFn<TwoParameters<number>> = {\n    operator: CustomFilterOperator.LESS_THAN_OR_EQUAL,\n    fn: (value, compare): boolean => {\n        if (!ensureNumber(value)) {\n            return false;\n        }\n\n        return value <= compare;\n    },\n};\n\nexport const equals: ICustomFilterFn<TwoParameters<number>> = {\n    operator: CustomFilterOperator.EQUAL,\n    fn: (value, compare): boolean => {\n        if (!ensureNumber(value)) {\n            return false;\n        }\n\n        return value === compare;\n    },\n};\n\nexport const notEquals: ICustomFilterFn<TwoParameters<number | string>> = {\n    operator: CustomFilterOperator.NOT_EQUALS,\n    fn: (value, compare): boolean => {\n        // As text match.\n        if (typeof compare === 'string') {\n            if (compare === ' ') {\n                if (value !== undefined && value !== null) return true;\n                return false;\n            };\n\n            const ensuredString = ensureString(value);\n            if (ensuredString && isWildCardString(compare)) return !createREGEXFromWildChar(compare as string).test(ensuredString);\n            return ensuredString !== compare;\n        }\n\n        // As numeric match.\n        if (!ensureNumber(value)) return true;\n        return value !== compare;\n    },\n};\n\n// Register the custom filter functions to the registry, making it easier to get them.\nexport const CustomFilterFnRegistry = new Map<CustomFilterOperator, ICustomFilterFn<TwoParameters<number>>>([]);\n\nconst ALL_CUSTOM_FILTER_FUNCTIONS = [greaterThan, greaterThanOrEqualTo, lessThan, lessThanOrEqualTo, equals, notEquals];\nALL_CUSTOM_FILTER_FUNCTIONS.forEach((fn) => {\n    CustomFilterFnRegistry.set(fn.operator!, fn);\n});\n\nexport function isNumericFilterFn(operator?: CustomFilterOperator): boolean {\n    return !!operator;\n}\n\n/** This operators matches texts. */\nexport const textMatch: ICustomFilterFn<TwoParameters<string>> = {\n    fn: (value, compare): boolean => {\n        const ensured = ensureString(value);\n        if (ensured === null) {\n            if (compare === '') return true;\n            return false;\n        }\n\n        return createREGEXFromWildChar(compare).test(ensured);\n    },\n};\n\n// eslint-disable-next-line ts/no-explicit-any\nexport function getCustomFilterFn(operator?: CustomFilterOperator): ICustomFilterFn<TwoParameters<any>> {\n    if (!operator) {\n        return textMatch;\n    }\n\n    return CustomFilterFnRegistry.get(operator)!;\n}\n\nfunction ensureNumber(value: Nullable<CellValue>): value is number {\n    return typeof value === 'number';\n}\n\nexport function ensureNumeric(value: Nullable<CellValue>): boolean {\n    if (typeof value === 'number') {\n        return true;\n    };\n\n    if (typeof value === 'string' && isNumeric(value)) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction ensureString(value: Nullable<CellValue>): string | null {\n    if (typeof value === 'boolean' || value == null) {\n        return null;\n    }\n\n    return typeof value === 'string' ? value : value.toString();\n}\n\nfunction isWildCardString(str: string | number): boolean {\n    if (typeof str === 'number') {\n        return false;\n    }\n\n    return str.indexOf('*') !== -1 || str.indexOf('?') !== -1;\n}\n\nfunction createREGEXFromWildChar(wildChar: string): RegExp {\n    // only '*' and '?' is supported\n    const regexpStr = wildChar.replace(/[.+^${}()|[\\]\\\\]/g, '\\\\$&').replaceAll('?', '.').replace(/[*]/g, '.$&');\n    return new RegExp(`^${regexpStr}$`);\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CellValue, ICellData, IRange, Nullable, Worksheet } from '@univerjs/core';\nimport type { Observable } from 'rxjs';\nimport type { IAutoFilter, ICustomFilter, ICustomFilters, IFilterColumn, IFilters } from './types';\nimport { CellValueType, Disposable, extractPureTextFromCell, mergeSets, Rectangle, Tools } from '@univerjs/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ensureNumeric, getCustomFilterFn, isNumericFilterFn, notEquals } from './custom-filters';\nimport { CustomFilterOperator } from './types';\n\nconst EMPTY = () => new Set<number>();\n\n/**\n * This is the in-memory model of filter.\n */\nexport class FilterModel extends Disposable {\n    private readonly _filteredOutRows$ = new BehaviorSubject<Readonly<Set<number>>>(EMPTY());\n    /** An observable value. A set of filtered out rows. */\n    readonly filteredOutRows$: Observable<Readonly<Set<number>>> = this._filteredOutRows$.asObservable();\n    get filteredOutRows() { return this._filteredOutRows$.getValue(); }\n    set filteredOutRows(rows: Set<number>) {\n        this._alreadyFilteredOutRows = rows;\n        this._filteredOutRows$.next(rows);\n    }\n    // TODO: we may need to update which cols have criteria rather than simple boolean\n\n    private readonly _hasCriteria$ = new BehaviorSubject<boolean>(false);\n    readonly hasCriteria$: Observable<boolean> = this._hasCriteria$.asObservable();\n\n    private _filterColumnByIndex = new Map<number, FilterColumn>();\n\n    private _alreadyFilteredOutRows = EMPTY();\n\n    private _range: Nullable<IRange>;\n\n    constructor(\n        public readonly unitId: string,\n        public readonly subUnitId: string,\n        private readonly _worksheet: Worksheet\n    ) {\n        super();\n    }\n\n    override dispose(): void {\n        super.dispose();\n\n        this._filteredOutRows$.complete();\n        this._hasCriteria$.complete();\n    }\n\n    /**\n     * Serialize this filter model to the JSON format representation.\n     */\n    serialize(): IAutoFilter {\n        const result: IAutoFilter = {\n            ref: Rectangle.clone(this._range!),\n            filterColumns: this._getAllFilterColumns(true)\n                .sort(([offset1], [offset2]) => offset1 - offset2)\n                .map(([_, filterColumn]) => filterColumn.serialize()),\n        };\n\n        if (this._alreadyFilteredOutRows) {\n            result.cachedFilteredOut = Array.from(this._alreadyFilteredOutRows).sort();\n        }\n\n        return result;\n    }\n\n    /**\n     * Deserialize auto filter info to construct a `FilterModel` object.\n     * @param unitId workbook id\n     * @param subUnitId worksheet id\n     * @param worksheet the Worksheet object\n     * @param autoFilter auto filter data\n     */\n    static deserialize(\n        unitId: string,\n        subUnitId: string,\n        worksheet: Worksheet,\n        autoFilter: IAutoFilter\n    ): FilterModel {\n        const filterModel = new FilterModel(unitId, subUnitId, worksheet);\n        filterModel._dump(autoFilter);\n\n        return filterModel;\n    }\n\n    private _dump(autoFilter: IAutoFilter) {\n        this.setRange(autoFilter.ref);\n        autoFilter.filterColumns?.forEach((filterColumn) => this._setCriteriaWithoutReCalc(filterColumn.colId, filterColumn));\n\n        if (autoFilter.cachedFilteredOut) {\n            this._alreadyFilteredOutRows = new Set(autoFilter.cachedFilteredOut);\n            this._emit();\n        }\n\n        this._emitHasCriteria();\n    }\n\n    isRowFiltered(row: number): boolean {\n        return this._alreadyFilteredOutRows.has(row);\n    }\n\n    getRange(): IRange {\n        if (!this._range) {\n            throw new Error('[FilterModel] could not get range before a range is set!');\n        }\n\n        return this._range;\n    }\n\n    /**\n     * Get filtered out rows except the specific column. This method is considered as \"pure\". In\n     * another word it would not change `filteredOutRows` on `FilterModel` nor `FilterColumn`.\n     * @param col\n     */\n    getFilteredOutRowsExceptCol(col: number): Set<number> {\n        return this._getAllFilterColumns(true)\n            .filter(([colOffset]) => colOffset !== col)\n            .reduce((acc, [, filterColumn]) => {\n                const newResult = filterColumn.calc({ getAlreadyFilteredOutRows: () => acc });\n                if (newResult) return mergeSets(acc, newResult);\n                return acc;\n            }, new Set<number>());\n    }\n\n    /**\n     * Set range of the filter model, this would remove some `IFilterColumn`\n     * if the new range not overlaps the old range.\n     */\n    setRange(range: IRange): void {\n        this._range = range;\n\n        // TODO@wzhudev: maybe we should remove the FilterColumn that is not in the new range!\n        // TODO@wzhudev: when a column in the range is deleted, we may need to change some FilterColumns' offset\n\n        // set range for each FilterColumn\n        this._getAllFilterColumns(true)\n            .forEach(([col, filterColumn]) => {\n                filterColumn.setRangeAndColumn({\n                    startRow: range.startRow,\n                    endRow: range.endRow,\n                    startColumn: col,\n                    endColumn: col,\n                }, col);\n            });\n    }\n\n    /**\n     * Set or remove filter criteria on a specific row.\n     */\n    setCriteria(col: number, criteria: Nullable<IFilterColumn>, reCalc = false): void {\n        if (!this._range) {\n            throw new Error('[FilterModel] could not set criteria before a range is set!');\n        }\n\n        if (!criteria) {\n            this._removeCriteria(col);\n            this._rebuildAlreadyFilteredOutRowsWithCache();\n            if (reCalc) {\n                this._reCalcAllColumns();\n            }\n            this._emit();\n            this._emitHasCriteria();\n            return;\n        }\n\n        this._setCriteriaWithoutReCalc(col, criteria);\n        if (reCalc) {\n            this._rebuildAlreadyFilteredOutRowsWithCache();\n            this._reCalcWithNoCacheColumns();\n            this._emit();\n            this._emitHasCriteria();\n        }\n    }\n\n    getAllFilterColumns(): [number, FilterColumn][] {\n        return this._getAllFilterColumns(true);\n    }\n\n    getFilterColumn(index: number): Nullable<FilterColumn> {\n        return this._filterColumnByIndex.get(index) ?? null;\n    }\n\n    reCalc(): void {\n        this._reCalcAllColumns();\n        this._emit();\n    }\n\n    private _getAllFilterColumns(): FilterColumn[];\n    private _getAllFilterColumns(withCol: true): [number, FilterColumn][];\n    private _getAllFilterColumns(withCol = false): [number, FilterColumn][] | FilterColumn[] {\n        const columns = Array.from(this._filterColumnByIndex.entries());\n        if (withCol) {\n            return columns;\n        }\n\n        return columns.map(([_, filterColumn]) => filterColumn);\n    }\n\n    private _reCalcAllColumns(): void {\n        this._alreadyFilteredOutRows = EMPTY();\n        this._getAllFilterColumns().forEach((filterColumn) => filterColumn.__clearCache());\n        this._reCalcWithNoCacheColumns();\n    }\n\n    private _setCriteriaWithoutReCalc(col: number, criteria: IFilterColumn): void {\n        const range = this._range;\n        if (!range) {\n            throw new Error('[FilterModel] could not set criteria before a range is set!');\n        }\n\n        const { startColumn, endColumn } = range;\n        if (col > endColumn || col < startColumn) {\n            throw new Error(`[FilterModel] could not set criteria on column ${col} which is out of range!`);\n        }\n\n        let filterColumn: FilterColumn;\n        if (this._filterColumnByIndex.has(col)) {\n            filterColumn = this._filterColumnByIndex.get(col)!;\n        } else {\n            filterColumn = new FilterColumn(\n                this.unitId,\n                this.subUnitId,\n                this._worksheet,\n                criteria,\n                { getAlreadyFilteredOutRows: () => this._alreadyFilteredOutRows }\n            );\n            filterColumn.setRangeAndColumn(range, col);\n\n            this._filterColumnByIndex.set(col, filterColumn);\n        }\n\n        filterColumn.setCriteria(criteria);\n    }\n\n    private _removeCriteria(col: number): void {\n        const filterColumn = this._filterColumnByIndex.get(col);\n        if (filterColumn) {\n            filterColumn.dispose();\n            this._filterColumnByIndex.delete(col);\n        }\n    }\n\n    private _emit(): void {\n        this._filteredOutRows$.next(this._alreadyFilteredOutRows);\n    }\n\n    private _emitHasCriteria(): void {\n        this._hasCriteria$.next(this._filterColumnByIndex.size > 0);\n    }\n\n    private _rebuildAlreadyFilteredOutRowsWithCache(): void {\n        const newFilteredOutRows = this._getAllFilterColumns()\n            .filter((filterColumn) => filterColumn.hasCache())\n            .reduce((acc, filterColumn) => {\n                return mergeSets(acc, filterColumn.filteredOutRows!);\n            }, new Set<number>());\n\n        this._alreadyFilteredOutRows = newFilteredOutRows;\n    }\n\n    private _reCalcWithNoCacheColumns(): void {\n        const noCacheFilteredOutRows = this._getAllFilterColumns().filter((filterColumn) => !filterColumn.hasCache());\n        for (const filterColumn of noCacheFilteredOutRows) {\n            const filteredRows = filterColumn.reCalc();\n            if (filteredRows) {\n                this._alreadyFilteredOutRows = mergeSets(this._alreadyFilteredOutRows, filteredRows);\n            }\n        }\n    }\n}\n\ninterface IFilterColumnContext {\n    getAlreadyFilteredOutRows(): Set<number>;\n}\n\n/**\n * This is the filter criteria on a specific column.\n */\nexport class FilterColumn extends Disposable {\n    private _filteredOutRows: Nullable<Set<number>> = null;\n    get filteredOutRows(): Readonly<Nullable<Set<number>>> { return this._filteredOutRows; }\n\n    /** Cache the filter function.  */\n    private _filterFn: Nullable<FilterFn> = null;\n\n    private _range: Nullable<IRange> = null;\n    private _column: number = 0;\n\n    private _filterByValues = false;\n\n    constructor(\n        public readonly unitId: string,\n        public readonly subUnitId: string,\n        private readonly _worksheet: Worksheet,\n\n        /**\n         * A `FilterColumn` instance should not be created without a filter criteria.\n         */\n        private _criteria: IFilterColumn,\n        private readonly _filterColumnContext: IFilterColumnContext\n    ) {\n        super();\n    }\n\n    override dispose(): void {\n        super.dispose();\n\n        this._filteredOutRows = null;\n    }\n\n    /**\n     * @internal\n     */\n    __clearCache(): void {\n        this._filteredOutRows = null;\n    }\n\n    serialize(): IFilterColumn {\n        if (!this._criteria) {\n            throw new Error('[FilterColumn]: could not serialize without a filter column!');\n        }\n\n        return Tools.deepClone({\n            ...this._criteria,\n            colId: this._column,\n        });\n    }\n\n    hasCache(): boolean {\n        return this._filteredOutRows !== null;\n    }\n\n    // The first row should be omitted!\n    setRangeAndColumn(range: IRange, column: number): void {\n        this._range = range;\n        this._column = column;\n    }\n\n    setCriteria(criteria: IFilterColumn): void {\n        this._criteria = criteria;\n        this._generateFilterFn();\n\n        // clear cache\n        this._filteredOutRows = null;\n    }\n\n    getColumnData(): Readonly<IFilterColumn> {\n        return Tools.deepClone(this._criteria);\n    }\n\n    /**\n     * Trigger new calculation on this `FilterModel` instance.\n     *\n     * @external DO NOT EVER call this method from `FilterColumn` itself. The whole process heavily relies on\n     * `filteredOutByOthers`, and it is more comprehensible if we let `FilterModel` take full control over the process.\n     */\n    reCalc(): Readonly<Nullable<Set<number>>> {\n        this._filteredOutRows = this.calc(this._filterColumnContext);\n        return this._filteredOutRows;\n    }\n\n    calc(context: IFilterColumnContext): Readonly<Nullable<Set<number>>> {\n        if (!this._filterFn) {\n            throw new Error('[FilterColumn] cannot calculate without a filter fn!');\n        }\n\n        if (!this._range) {\n            throw new Error('[FilterColumn] cannot calculate without a range!');\n        }\n\n        if (typeof this._column !== 'number') {\n            throw new TypeError('[FilterColumn] cannot calculate without a column offset!');\n        }\n\n        const column = this._column;\n        const iterateRange: IRange = { startColumn: column, endColumn: column, startRow: this._range.startRow + 1, endRow: this._range.endRow };\n        const filteredOutRows = new Set<number>();\n        const filteredOutByOthers = context.getAlreadyFilteredOutRows();\n\n        // Merged cells are take into consideration here.\n        for (const range of this._worksheet.iterateByColumn(iterateRange, false, false)) {\n            const { row, rowSpan, col } = range;\n\n            // If this row is already filtered out by others, we don't need to check it again.\n            // But it only works for non-vertically-merged cells.\n            if (filteredOutByOthers.has(row) && (!rowSpan || rowSpan === 1)) {\n                continue;\n            }\n\n            const value = this._filterByValues\n                ? extractPureTextFromCell(this._worksheet.getCell(row, col))\n                : getFilterValueForConditionalFiltering(this._worksheet, row, col);\n            if (!this._filterFn(value)) {\n                filteredOutRows.add(row);\n\n                // Add all rows into filtered out rows if the cell is a merged cell.\n                if (rowSpan) {\n                    for (let i = 1; i < rowSpan; i++) {\n                        filteredOutRows.add(row + i);\n                    }\n                }\n            }\n        }\n\n        return filteredOutRows;\n    }\n\n    private _generateFilterFn(): void {\n        if (!this._criteria) {\n            return;\n        }\n\n        this._filterFn = generateFilterFn(this._criteria);\n        this._filterByValues = !!this._criteria.filters;\n    }\n}\n\n/**\n * Filter function is a close function which received a cell's content and determine this value is considered as\n * \"matched\" and the corresponding row would not be filtered out.\n */\nexport type FilterFn = (value: Nullable<CellValue>) => boolean;\n\n/**\n * This functions take a `IFilterColumn` as input and return a function that can be used to filter rows.\n * @param column\n * @returns the filter function that takes the cell's value and return a boolean.\n */\nexport function generateFilterFn(column: IFilterColumn): FilterFn {\n    if (column.filters) {\n        return filterByValuesFnFactory(column.filters);\n    }\n\n    if (column.customFilters) {\n        return customFilterFnFactory(column.customFilters);\n    }\n\n    throw new Error('[FilterModel]: other types of filters are not supported yet.');\n}\n\nfunction filterByValuesFnFactory(values: IFilters): FilterFn {\n    const includeBlank = !!values.blank;\n    const valuesSet = new Set(values.filters);\n\n    return (value) => {\n        if (value === undefined || value === '') return includeBlank;\n        return valuesSet.has(typeof value === 'string' ? value : `${value}`);\n    };\n}\n\nfunction customFilterFnFactory(customFilters: ICustomFilters): FilterFn {\n    const customFilterFns: FilterFn[] = customFilters.customFilters.map((filter) => generateCustomFilterFn(filter));\n    if (isCompoundCustomFilter(customFilterFns)) {\n        if (customFilters.and) {\n            return AND(customFilterFns);\n        }\n\n        return OR(customFilterFns);\n    }\n\n    return customFilterFns[0];\n}\n\nfunction AND(filterFns: [FilterFn, FilterFn]): FilterFn {\n    const [fn1, fn2] = filterFns;\n    return (value) => fn1(value) && fn2(value);\n}\n\nfunction OR(filterFns: [FilterFn, FilterFn]): FilterFn {\n    const [fn1, fn2] = filterFns;\n    return (value) => fn1(value) || fn2(value);\n}\n\nfunction isCompoundCustomFilter(filter: FilterFn[]): filter is [FilterFn, FilterFn] {\n    return filter.length === 2;\n}\n\n// TODO@wzhudev: this is not ideal\nfunction generateCustomFilterFn(filter: ICustomFilter): FilterFn {\n    const compare = filter.val;\n\n    // Not NOT_EQUALS, if the compare cannot be ensured as number, we should treat it like test not matching.\n    // Otherwise it goes to numeric match.\n    if (filter.operator === CustomFilterOperator.NOT_EQUALS) {\n        const ensured = ensureNumeric(compare);\n        if (!ensured) return (value) => notEquals.fn(value, compare);\n    }\n\n    // numeric match\n    if (isNumericFilterFn(filter.operator)) {\n        const ensured = ensureNumeric(compare);\n        if (!ensured) return () => false;\n\n        const customFilterFn = getCustomFilterFn(filter.operator);\n        const ensuredNumber = Number(compare);\n        return (value) => customFilterFn.fn(value, ensuredNumber);\n    }\n\n    // text match\n    const customFilterFn = getCustomFilterFn(filter.operator);\n    return (value) => customFilterFn.fn(value, compare);\n}\n\nfunction getFilterValueForConditionalFiltering(worksheet: Worksheet, row: number, col: number): Nullable<string | number | boolean> {\n    const interceptedCell = worksheet.getCell(row, col);\n    if (!interceptedCell) return null;\n\n    const rawCell = worksheet.getCellRaw(row, col);\n\n    if (interceptedCell && !rawCell) return extractFilterValueFromCell(interceptedCell);\n\n    if (!rawCell) return null;\n\n    if (interceptedCell.t === CellValueType.NUMBER && typeof interceptedCell.v === 'string') {\n        return rawCell.v as number;\n    }\n\n    return extractFilterValueFromCell(rawCell);\n}\n\nfunction extractFilterValueFromCell(cell: ICellData): string | number {\n    const richTextValue = cell.p?.body?.dataStream;\n    if (richTextValue) return richTextValue.trimEnd();\n\n    const rawValue = cell.v;\n\n    if (typeof rawValue === 'string') {\n        if (cell.t === CellValueType.BOOLEAN) return rawValue.toUpperCase();\n        return rawValue;\n    };\n\n    if (typeof rawValue === 'number') {\n        if (cell.t === CellValueType.BOOLEAN) return rawValue ? 'TRUE' : 'FALSE';\n        return rawValue;\n    };\n\n    if (typeof rawValue === 'boolean') return rawValue ? 'TRUE' : 'FALSE';\n\n    return '';\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Nullable, Workbook } from '@univerjs/core';\nimport type { IAutoFilter } from '../models/types';\nimport {\n    CommandType,\n    Disposable,\n    fromCallback,\n    ICommandService,\n    IResourceManagerService,\n    IUniverInstanceService,\n    UniverInstanceType,\n} from '@univerjs/core';\nimport { BehaviorSubject, filter, merge, of, switchMap } from 'rxjs';\nimport { FILTER_MUTATIONS } from '../common/const';\nimport { FilterModel } from '../models/filter-model';\n\ntype WorksheetID = string;\nexport interface ISheetsFilterResource {\n    [key: WorksheetID]: IAutoFilter;\n}\n\nexport const SHEET_FILTER_SNAPSHOT_ID = 'SHEET_FILTER_PLUGIN';\n\n/**\n * This service is responsible for managing filter models, especially their lifecycle.\n */\nexport class SheetsFilterService extends Disposable {\n    private readonly _filterModels = new Map<string, Map<string, FilterModel>>();\n\n    private readonly _loadedUnitId$ = new BehaviorSubject<Nullable<string>>(null);\n    readonly loadedUnitId$ = this._loadedUnitId$.asObservable();\n\n    private readonly _errorMsg$ = new BehaviorSubject<Nullable<string>>(null);\n    readonly errorMsg$ = this._errorMsg$.asObservable();\n\n    private readonly _activeFilterModel$ = new BehaviorSubject<Nullable<FilterModel>>(null);\n    /** An observable value emitting the current Workbook's active Worksheet's filter model (if there is one). */\n    readonly activeFilterModel$ = this._activeFilterModel$.asObservable();\n    /** The current Workbook's active Worksheet's filter model (if there is one). */\n    get activeFilterModel(): Nullable<FilterModel> { return this._activeFilterModel$.getValue(); }\n\n    constructor(\n        @IResourceManagerService private readonly _resourcesManagerService: IResourceManagerService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @ICommandService private readonly _commandService: ICommandService\n    ) {\n        super();\n\n        this._initModel();\n        this._initActiveFilterModel();\n    }\n\n    /**\n     *\n     * @param unitId\n     * @param subUnitId\n     */\n    ensureFilterModel(unitId: string, subUnitId: string): FilterModel {\n        const already = this.getFilterModel(unitId, subUnitId);\n        if (already) {\n            return already;\n        }\n\n        const workbook = this._univerInstanceService.getUniverSheetInstance(unitId);\n        if (!workbook) {\n            throw new Error(`[SheetsFilterService]: could not create \"FilterModel\" on a non-existing workbook ${unitId}!`);\n        }\n\n        const worksheet = workbook.getSheetBySheetId(subUnitId);\n        if (!worksheet) {\n            throw new Error(`[SheetsFilterService]: could not create \"FilterModel\" on a non-existing worksheet ${subUnitId}!`);\n        }\n\n        const filterModel = new FilterModel(unitId, subUnitId, worksheet);\n        this._cacheFilterModel(unitId, subUnitId, filterModel);\n        return filterModel;\n    }\n\n    getFilterModel(unitId: string, subUnitId: string): Nullable<FilterModel> {\n        return this._filterModels.get(unitId)?.get(subUnitId) ?? null;\n    }\n\n    removeFilterModel(unitId: string, subUnitId: string): boolean {\n        const already = this.getFilterModel(unitId, subUnitId);\n        if (already) {\n            already.dispose();\n            this._filterModels.get(unitId)!.delete(subUnitId);\n            return true;\n        }\n\n        return false;\n    }\n\n    setFilterErrorMsg(content: string): void {\n        this._errorMsg$.next(content);\n    }\n\n    private _updateActiveFilterModel(): void {\n        let workbook: Nullable<Workbook>;\n        try {\n            workbook = this._univerInstanceService.getCurrentUnitForType(UniverInstanceType.UNIVER_SHEET);\n            if (!workbook) {\n                this._activeFilterModel$.next(null);\n                return;\n            }\n        } catch (err) {\n            console.error('[SheetsFilterService]: could not get active workbook!', err);\n            return;\n        }\n\n        // Use getActiveSheet to avoid automatically activating the next sheet when deleting the sheet, causing the sheet switching in ActiveWorksheetController to be invalid.\n        const activeSheet = workbook.getActiveSheet(true);\n        if (!activeSheet) {\n            this._activeFilterModel$.next(null);\n            return;\n        }\n\n        const unitId = activeSheet.getUnitId();\n        const subUnitId = activeSheet.getSheetId();\n        const filterModel = this.getFilterModel(unitId, subUnitId);\n        this._activeFilterModel$.next(filterModel);\n    }\n\n    private _initActiveFilterModel(): void {\n        this.disposeWithMe(\n            merge(\n                // source1: executing filter related mutations\n                fromCallback(this._commandService.onCommandExecuted.bind(this._commandService))\n                    .pipe(filter(([command]) => command.type === CommandType.MUTATION && FILTER_MUTATIONS.has(command.id))),\n\n                // source2: activate sheet changes\n                this._univerInstanceService.getCurrentTypeOfUnit$<Workbook>(UniverInstanceType.UNIVER_SHEET)\n                    .pipe(switchMap((workbook) => workbook?.activeSheet$ ?? of(null)))\n            ).subscribe(() => this._updateActiveFilterModel())\n        );\n    }\n\n    private _serializeAutoFiltersForUnit(unitId: string): string {\n        const allFilterModels = this._filterModels.get(unitId);\n        if (!allFilterModels) {\n            return '{}';\n        }\n\n        const json: ISheetsFilterResource = {};\n        allFilterModels.forEach((model, worksheetId) => {\n            json[worksheetId] = model.serialize();\n        });\n\n        return JSON.stringify(json);\n    }\n\n    private _deserializeAutoFiltersForUnit(unitId: string, json: ISheetsFilterResource): void {\n        const workbook = this._univerInstanceService.getUniverSheetInstance(unitId)!;\n        Object.keys(json).forEach((worksheetId: WorksheetID) => {\n            const autoFilter = json[worksheetId]!;\n            const filterModel = FilterModel.deserialize(unitId, worksheetId, workbook.getSheetBySheetId(worksheetId)!, autoFilter);\n            this._cacheFilterModel(unitId, worksheetId, filterModel);\n        });\n    }\n\n    private _initModel(): void {\n        this._resourcesManagerService.registerPluginResource<ISheetsFilterResource>({\n            pluginName: SHEET_FILTER_SNAPSHOT_ID,\n            businesses: [UniverInstanceType.UNIVER_SHEET],\n            toJson: (id) => this._serializeAutoFiltersForUnit(id),\n            parseJson: (json) => JSON.parse(json),\n            onLoad: (unitId, value) => {\n                this._deserializeAutoFiltersForUnit(unitId, value);\n                this._loadedUnitId$.next(unitId);\n                this._updateActiveFilterModel();\n            },\n            onUnLoad: (unitId: string) => {\n                const allFilterModels = this._filterModels.get(unitId);\n                if (allFilterModels) {\n                    allFilterModels.forEach((model) => model.dispose());\n                    this._filterModels.delete(unitId);\n                }\n            },\n        });\n    }\n\n    private _cacheFilterModel(unitId: string, subUnitId: string, filterModel: FilterModel): void {\n        if (!this._filterModels.has(unitId)) {\n            this._filterModels.set(unitId, new Map());\n        }\n        this._filterModels.get(unitId)!.set(subUnitId, filterModel);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IMutation, IRange, Nullable } from '@univerjs/core';\nimport type { ISheetCommandSharedParams } from '@univerjs/sheets';\nimport type { IFilterColumn } from '../../models/types';\n\nimport { CommandType } from '@univerjs/core';\nimport { ReCalcSheetsFilterMutationId, RemoveSheetsFilterMutationId, SetSheetsFilterCriteriaMutationId, SetSheetsFilterRangeMutationId } from '../../common/const';\nimport { SheetsFilterService } from '../../services/sheet-filter.service';\n\n/**\n * Parameters of mutation {@link SetSheetsFilterRangeMutation}.\n * @property range - the range to be set as filter range.\n */\nexport interface ISetSheetsFilterRangeMutationParams extends ISheetCommandSharedParams {\n    range: IRange;\n}\n\n/**\n * A {@link CommandType.MUTATION} to set filter range in a {@link Worksheet}. If no {@link FilterModel} exists,\n * a new `FilterModel` will be created.\n *\n * Since there could only be a filter on a worksheet, when you want to update the range, you\n * don't necessarily need to remove the filter first, you can just execute this mutation.\n */\nexport const SetSheetsFilterRangeMutation: IMutation<ISetSheetsFilterRangeMutationParams> = {\n    id: SetSheetsFilterRangeMutationId,\n    type: CommandType.MUTATION,\n    handler: (accessor, params) => {\n        const { subUnitId, unitId, range } = params;\n        const sheetsFilterService = accessor.get(SheetsFilterService);\n\n        // check if the range is in bound?\n        const filterModel = sheetsFilterService.ensureFilterModel(unitId, subUnitId);\n        filterModel.setRange(range);\n\n        return true;\n    },\n};\n\n/**\n * Parameters of mutation {@link SetSheetsFilterCriteriaMutation}.\n * @property {number} col - the column index to set filter criteria.\n * @property {IFilterColumn | null} criteria - the filter criteria to set. If it is `null`, the criteria will be removed.\n * @property {boolean} [reCalc=true] - if it should trigger calculation on this `FilterColumn`.\n */\nexport interface ISetSheetsFilterCriteriaMutationParams extends ISheetCommandSharedParams {\n    col: number;\n    criteria: Nullable<IFilterColumn>;\n    reCalc?: boolean;\n}\n\n/**\n * A {@link CommandType.MUTATION} to set filter criteria of a given column of a {@link FilterModel}.\n */\nexport const SetSheetsFilterCriteriaMutation: IMutation<ISetSheetsFilterCriteriaMutationParams> = {\n    id: SetSheetsFilterCriteriaMutationId,\n    type: CommandType.MUTATION,\n    handler: (accessor, params) => {\n        const { subUnitId, unitId, criteria, col, reCalc = true } = params;\n        const sheetsFilterService = accessor.get(SheetsFilterService);\n\n        const filterModel = sheetsFilterService.getFilterModel(unitId, subUnitId);\n        if (!filterModel) return false;\n\n        filterModel.setCriteria(col, criteria, reCalc);\n        return true;\n    },\n};\n\n/**\n * A {@link CommandType.MUTATION} to remove a {@link FilterModel} in a {@link Worksheet}.\n */\nexport const RemoveSheetsFilterMutation: IMutation<ISheetCommandSharedParams> = {\n    id: RemoveSheetsFilterMutationId,\n    type: CommandType.MUTATION,\n    handler: (accessor, params) => {\n        const { unitId, subUnitId } = params;\n        const sheetsFilterService = accessor.get(SheetsFilterService);\n        return sheetsFilterService.removeFilterModel(unitId, subUnitId);\n    },\n};\n\n/**\n * A {@link CommandType.MUTATION} to re-calculate a {@link FilterModel}.\n */\nexport const ReCalcSheetsFilterMutation: IMutation<ISheetCommandSharedParams> = {\n    id: ReCalcSheetsFilterMutationId,\n    type: CommandType.MUTATION,\n    handler: (accessor, params) => {\n        const { unitId, subUnitId } = params;\n        const sheetsFilterService = accessor.get(SheetsFilterService);\n        const filterModel = sheetsFilterService.getFilterModel(unitId, subUnitId);\n        if (!filterModel) {\n            return false;\n        }\n\n        filterModel.reCalc();\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IMutationInfo, Nullable } from '@univerjs/core';\nimport type { ISetSheetsFilterCriteriaMutationParams } from './commands/mutations/sheets-filter.mutation';\nimport { SetSheetsFilterCriteriaMutation } from './commands/mutations/sheets-filter.mutation';\n\ninterface ILine {\n    start: number;\n    end: number;\n}\nexport function lineIntersect(line1: ILine, line2: ILine): boolean {\n    return line1.start <= line2.end && line1.end >= line2.start;\n}\n\nexport function lineContains(line1: ILine, line2: ILine): boolean {\n    return line1.start <= line2.start && line1.end >= line2.end;\n}\n\nexport function objectsShaker<T>(target: Nullable<T>[], isEqual: (o1: T, o2: T) => boolean) {\n    for (let i = 0; i < target.length; i++) {\n        let cur = i;\n        if (target[i]) {\n            for (let j = i + 1; j < target.length; j++) {\n                if (target[cur] && target[j] && isEqual(target[cur]!, target[j]!)) {\n                    target[cur] = null;\n                    cur = j;\n                }\n            }\n        }\n    }\n    return target.filter((o) => o !== null) as T[];\n};\n\nexport function mergeSetFilterCriteria(mutations: IMutationInfo[]) {\n    return objectsShaker(mutations, (o1, o2) =>\n        o1.id === SetSheetsFilterCriteriaMutation.id && o2.id === SetSheetsFilterCriteriaMutation.id\n    && (o1.params as ISetSheetsFilterCriteriaMutationParams).unitId === (o2.params as ISetSheetsFilterCriteriaMutationParams).unitId\n    && (o1.params as ISetSheetsFilterCriteriaMutationParams).subUnitId === (o2.params as ISetSheetsFilterCriteriaMutationParams).subUnitId\n    && (o1.params as ISetSheetsFilterCriteriaMutationParams).col === (o2.params as ISetSheetsFilterCriteriaMutationParams).col);\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICellData, ICommandInfo, IMutationInfo, IObjectArrayPrimitiveType, IRange, Nullable, Workbook } from '@univerjs/core';\nimport type { EffectRefRangeParams, IAddWorksheetMergeMutationParams, ICopySheetCommandParams, IInsertColCommandParams, IInsertRowCommandParams, IInsertRowMutationParams, IMoveColsCommandParams, IMoveRangeCommandParams, IMoveRowsCommandParams, IRemoveColMutationParams, IRemoveRowsMutationParams, IRemoveSheetCommandParams, ISetRangeValuesMutationParams, ISetWorksheetActiveOperationParams, ISheetCommandSharedParams } from '@univerjs/sheets';\nimport type { ISetSheetsFilterCriteriaMutationParams, ISetSheetsFilterRangeMutationParams } from '../commands/mutations/sheets-filter.mutation';\nimport type { FilterColumn } from '../models/filter-model';\n\nimport { Disposable, DisposableCollection, ICommandService, Inject, IUniverInstanceService, moveMatrixArray, Optional, Rectangle } from '@univerjs/core';\nimport { DataSyncPrimaryController } from '@univerjs/rpc';\nimport { CopySheetCommand, EffectRefRangId, expandToContinuousRange, getSheetCommandTarget, InsertColCommand, InsertRowCommand, InsertRowMutation, INTERCEPTOR_POINT, MoveRangeCommand, MoveRowsCommand, RefRangeService, RemoveColCommand, RemoveRowCommand, RemoveRowMutation, RemoveSheetCommand, SetRangeValuesMutation, SetWorksheetActiveOperation, SheetInterceptorService } from '@univerjs/sheets';\nimport { ReCalcSheetsFilterMutation, RemoveSheetsFilterMutation, SetSheetsFilterCriteriaMutation, SetSheetsFilterRangeMutation } from '../commands/mutations/sheets-filter.mutation';\nimport { SheetsFilterService } from '../services/sheet-filter.service';\nimport { mergeSetFilterCriteria } from '../utils';\n\nexport class SheetsFilterController extends Disposable {\n    private _disposableCollection: DisposableCollection = new DisposableCollection();\n    constructor(\n        @ICommandService private readonly _commandService: ICommandService,\n        @Inject(SheetInterceptorService) private readonly _sheetInterceptorService: SheetInterceptorService,\n        @Inject(SheetsFilterService) private readonly _sheetsFilterService: SheetsFilterService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @Inject(RefRangeService) private readonly _refRangeService: RefRangeService,\n        @Optional(DataSyncPrimaryController) private readonly _dataSyncPrimaryController: DataSyncPrimaryController\n    ) {\n        super();\n\n        this._initCommands();\n        this._initRowFilteredInterceptor();\n        this._initInterceptors();\n        this._commandExecutedListener();\n        this._initErrorHandling();\n    }\n\n    private _initCommands(): void {\n        [\n            SetSheetsFilterCriteriaMutation,\n            SetSheetsFilterRangeMutation,\n            ReCalcSheetsFilterMutation,\n            RemoveSheetsFilterMutation,\n        ].forEach((command) => {\n            this.disposeWithMe(this._commandService.registerCommand(command));\n            this._dataSyncPrimaryController?.registerSyncingMutations(command);\n        });\n    }\n\n    private _initInterceptors(): void {\n        this.disposeWithMe(this._sheetInterceptorService.interceptCommand({\n            getMutations: (command) => this._getUpdateFilter(command),\n        }));\n\n        this.disposeWithMe(this._commandService.onCommandExecuted((commandInfo) => {\n            if (commandInfo.id === SetWorksheetActiveOperation.id) {\n                const params = commandInfo.params as ISetWorksheetActiveOperationParams;\n                const sheetId = params.subUnitId;\n                const unitId = params.unitId;\n                if (!sheetId || !unitId) {\n                    return;\n                }\n                this._registerRefRange(unitId, sheetId);\n            }\n            if (commandInfo.id === SetSheetsFilterRangeMutation.id) {\n                const params = commandInfo.params as IAddWorksheetMergeMutationParams;\n                const sheetId = params.subUnitId;\n                const unitId = params.unitId;\n                if (!sheetId || !unitId) {\n                    return;\n                }\n                this._registerRefRange(params.unitId, params.subUnitId);\n            }\n        }));\n\n        this.disposeWithMe(this._sheetsFilterService.loadedUnitId$.subscribe((unitId) => {\n            if (unitId) {\n                const workbook = this._univerInstanceService.getUniverSheetInstance(unitId);\n                const sheet = workbook?.getActiveSheet();\n                if (sheet) {\n                    this._registerRefRange(unitId, sheet.getSheetId());\n                }\n            }\n        }));\n    }\n\n    private _registerRefRange(unitId: string, subUnitId: string): void {\n        this._disposableCollection.dispose();\n        const workbook = this._univerInstanceService.getUniverSheetInstance(unitId);\n        const workSheet = workbook?.getSheetBySheetId(subUnitId);\n        if (!workbook || !workSheet) return;\n        const range = this._sheetsFilterService.getFilterModel(unitId, subUnitId)?.getRange();\n        const handler = (config: EffectRefRangeParams) => {\n            switch (config.id) {\n                case InsertRowCommand.id: {\n                    const params = config.params as IInsertRowCommandParams;\n                    const _unitId = params.unitId || unitId;\n                    const _subUnitId = params.subUnitId || subUnitId;\n                    return this._handleInsertRowCommand(params, _unitId, _subUnitId);\n                }\n                case InsertColCommand.id: {\n                    const params = config.params as IInsertColCommandParams;\n                    const _unitId = params.unitId || unitId;\n                    const _subUnitId = params.subUnitId || subUnitId;\n                    return this._handleInsertColCommand(params, _unitId, _subUnitId);\n                }\n                case RemoveColCommand.id: {\n                    const params = config.params as IRemoveColMutationParams;\n                    return this._handleRemoveColCommand(params, unitId, subUnitId);\n                }\n                case RemoveRowCommand.id: {\n                    const params = config.params as IRemoveRowsMutationParams;\n                    return this._handleRemoveRowCommand(params, unitId, subUnitId);\n                }\n                case EffectRefRangId.MoveColsCommandId: {\n                    const params = config.params as IMoveColsCommandParams;\n                    return this._handleMoveColsCommand(params, unitId, subUnitId);\n                }\n                case EffectRefRangId.MoveRowsCommandId: {\n                    const params = config.params as IMoveRowsCommandParams;\n                    return this._handleMoveRowsCommand(params, unitId, subUnitId);\n                }\n                case MoveRangeCommand.id: {\n                    const params = config.params as IMoveRangeCommandParams;\n                    return this._handleMoveRangeCommand(params, unitId, subUnitId);\n                }\n            }\n            return { redos: [], undos: [] };\n        };\n\n        if (range) {\n            this._disposableCollection.add(this._refRangeService.registerRefRange(range, handler, unitId, subUnitId));\n        }\n    }\n\n    private _getUpdateFilter(command: ICommandInfo) {\n        const { id } = command;\n        switch (id) {\n            case RemoveSheetCommand.id: {\n                const params = command.params as ISheetCommandSharedParams;\n                return this._handleRemoveSheetCommand(params, params.unitId, params.subUnitId);\n            }\n            case CopySheetCommand.id: {\n                const params = command.params as ICopySheetCommandParams & { targetSubUnitId: string };\n                const { targetSubUnitId, unitId, subUnitId } = params;\n                if (!unitId || !subUnitId || !targetSubUnitId) {\n                    return this._handleNull();\n                }\n\n                return this._handleCopySheetCommand(unitId, subUnitId, targetSubUnitId);\n            }\n        }\n\n        return {\n            redos: [],\n            undos: [],\n        };\n    }\n\n    private _handleInsertColCommand(config: IInsertColCommandParams, unitId: string, subUnitId: string) {\n        const filterModel = this._sheetsFilterService.getFilterModel(unitId, subUnitId);\n        const filterRange = filterModel?.getRange() ?? null;\n        if (!filterModel || !filterRange) {\n            return this._handleNull();\n        }\n        const { startColumn, endColumn } = filterRange;\n        const { startColumn: insertStartColumn, endColumn: insertEndColumn } = config.range;\n        const count = insertEndColumn - insertStartColumn + 1;\n\n        if (insertEndColumn > endColumn) {\n            return this._handleNull();\n        }\n\n        const redos: IMutationInfo[] = [];\n        const undos: IMutationInfo[] = [];\n\n        const anchor = insertStartColumn;\n        const setFilterRangeMutationParams: ISetSheetsFilterRangeMutationParams = {\n            unitId,\n            subUnitId,\n            range: {\n                ...filterRange,\n                startColumn: insertStartColumn <= startColumn ? startColumn + count : startColumn,\n                endColumn: endColumn + count,\n            },\n        };\n\n        const undoSetFilterRangeMutationParams: ISetSheetsFilterRangeMutationParams = {\n            unitId,\n            subUnitId,\n            range: filterRange,\n        };\n\n        redos.push({ id: SetSheetsFilterRangeMutation.id, params: setFilterRangeMutationParams });\n        undos.push({ id: SetSheetsFilterRangeMutation.id, params: undoSetFilterRangeMutationParams });\n\n        const filterColumn = filterModel.getAllFilterColumns();\n        const effected = filterColumn.filter((column) => column[0] >= anchor);\n        if (effected.length !== 0) {\n            const { newRange, oldRange } = this._moveCriteria(unitId, subUnitId, effected, count);\n            redos.push(...newRange.redos, ...oldRange.redos);\n            undos.push(...newRange.undos, ...oldRange.undos);\n        }\n\n        return { redos: mergeSetFilterCriteria(redos), undos: mergeSetFilterCriteria(undos) };\n    }\n\n    private _handleInsertRowCommand(config: IInsertRowCommandParams, unitId: string, subUnitId: string) {\n        const filterModel = this._sheetsFilterService.getFilterModel(unitId, subUnitId);\n        const filterRange = filterModel?.getRange() ?? null;\n        if (!filterModel || !filterRange) {\n            return this._handleNull();\n        }\n        const { startRow, endRow } = filterRange;\n        const { startRow: insertStartRow, endRow: insertEndRow } = config.range;\n        const rowCount = insertEndRow - insertStartRow + 1;\n        if (insertEndRow > endRow) {\n            return this._handleNull();\n        }\n        const redos: IMutationInfo[] = [];\n        const undos: IMutationInfo[] = [];\n        const setFilterRangeParams: ISetSheetsFilterRangeMutationParams = {\n            unitId,\n            subUnitId,\n            range: {\n                ...filterRange,\n                startRow: insertStartRow <= startRow ? startRow + rowCount : startRow,\n                endRow: endRow + rowCount,\n            },\n        };\n        const undoSetFilterRangeMutationParams: ISetSheetsFilterRangeMutationParams = {\n            unitId,\n            subUnitId,\n            range: filterRange,\n        };\n\n        redos.push({ id: SetSheetsFilterRangeMutation.id, params: setFilterRangeParams });\n        undos.push({ id: SetSheetsFilterRangeMutation.id, params: undoSetFilterRangeMutationParams });\n        return {\n            redos: mergeSetFilterCriteria(redos),\n            undos: mergeSetFilterCriteria(undos),\n        };\n    }\n\n    private _handleRemoveColCommand(config: IRemoveColMutationParams, unitId: string, subUnitId: string) {\n        const filterModel = this._sheetsFilterService.getFilterModel(unitId, subUnitId);\n        const filterRange = filterModel?.getRange() ?? null;\n        if (!filterModel || !filterRange) {\n            return this._handleNull();\n        }\n        const { startColumn, endColumn } = filterRange;\n        const { startColumn: removeStartColumn, endColumn: removeEndColumn } = config.range;\n\n        if (removeStartColumn > endColumn) {\n            return this._handleNull();\n        }\n        const redos: IMutationInfo[] = [];\n        const undos: IMutationInfo[] = [];\n\n        const rangeRemoveCount =\n            removeEndColumn < startColumn\n                ? 0 :\n                Math.min(removeEndColumn, endColumn) - Math.max(removeStartColumn, startColumn) + 1;\n\n        const removeCount = removeEndColumn - removeStartColumn + 1;\n\n        const filterColumn = filterModel.getAllFilterColumns();\n        filterColumn.forEach((column) => {\n            const [col, filter] = column;\n            if (col <= removeEndColumn && col >= removeStartColumn) {\n                redos.push({ id: SetSheetsFilterCriteriaMutation.id, params: { unitId, subUnitId, col, criteria: null } });\n                undos.push({ id: SetSheetsFilterCriteriaMutation.id, params: { unitId, subUnitId, col, criteria: { ...filter.serialize(), colId: col } } });\n            }\n        });\n\n        const shifted = filterColumn.filter((column) => {\n            const [col, _] = column;\n            return col > removeEndColumn;\n        });\n\n        let newRangeCriteria: { undos: IMutationInfo[]; redos: IMutationInfo[] } = { undos: [], redos: [] };\n        if (shifted.length > 0) {\n            const { oldRange, newRange } = this._moveCriteria(unitId, subUnitId, shifted, -removeCount);\n            newRangeCriteria = newRange;\n            redos.push(...oldRange.redos);\n            undos.unshift(...oldRange.undos);\n        }\n\n        if (rangeRemoveCount === endColumn - startColumn + 1) {\n            const removeFilterRangeMutationParams: ISheetCommandSharedParams = {\n                unitId,\n                subUnitId,\n            };\n            redos.push({ id: RemoveSheetsFilterMutation.id, params: removeFilterRangeMutationParams });\n            undos.unshift({ id: SetSheetsFilterRangeMutation.id, params: { range: filterRange, unitId, subUnitId } });\n        } else {\n            const newStartColumn = startColumn <= removeStartColumn\n                ? startColumn :\n                (rangeRemoveCount === 0 ? startColumn - removeCount : removeStartColumn);\n            const newEndColumn = startColumn <= removeStartColumn ? endColumn - rangeRemoveCount : endColumn - removeCount;\n            const setFilterRangeMutationParams: ISetSheetsFilterRangeMutationParams = {\n                unitId,\n                subUnitId,\n                range: { ...filterRange, startColumn: newStartColumn, endColumn: newEndColumn },\n            };\n            redos.push({ id: SetSheetsFilterRangeMutation.id, params: setFilterRangeMutationParams });\n            undos.unshift({ id: SetSheetsFilterRangeMutation.id, params: { range: filterRange, unitId, subUnitId } });\n\n            redos.push(...newRangeCriteria.redos);\n            undos.unshift(...newRangeCriteria.undos);\n        }\n\n        return {\n            undos,\n            redos,\n        };\n    }\n\n    private _handleRemoveRowCommand(config: IRemoveRowsMutationParams, unitId: string, subUnitId: string) {\n        const filterModel = this._sheetsFilterService.getFilterModel(unitId, subUnitId);\n        if (!filterModel) {\n            return this._handleNull();\n        }\n\n        const filterRange = filterModel.getRange();\n        const { startRow, endRow } = filterRange;\n        const { startRow: removeStartRow, endRow: removeEndRow } = config.range;\n        if (removeStartRow > endRow) {\n            return this._handleNull();\n        }\n        if (removeEndRow < startRow) {\n            return {\n                undos: [{ id: SetSheetsFilterRangeMutation.id, params: { range: filterRange, unitId, subUnitId } }],\n                redos: [{\n                    id: SetSheetsFilterRangeMutation.id,\n                    params: {\n                        range: {\n                            ...filterRange,\n                            startRow: startRow - (removeEndRow - removeStartRow + 1),\n                            endRow: endRow - (removeEndRow - removeStartRow + 1),\n                        },\n                        unitId,\n                        subUnitId,\n                    },\n                }],\n            };\n        }\n        const redos: IMutationInfo[] = [];\n        const undos: IMutationInfo[] = [];\n        const filterColumn = filterModel.getAllFilterColumns();\n\n        const filterHeaderIsRemoved = startRow <= removeEndRow && startRow >= removeStartRow;\n\n        undos.push({ id: SetSheetsFilterRangeMutation.id, params: { range: filterRange, unitId, subUnitId } });\n\n        const count = Math.min(removeEndRow, endRow) - Math.max(removeStartRow, startRow) + 1;\n        if (count === endRow - startRow + 1 || filterHeaderIsRemoved) {\n            const removeFilterRangeMutationParams: ISheetCommandSharedParams = {\n                unitId,\n                subUnitId,\n            };\n            redos.push({ id: RemoveSheetsFilterMutation.id, params: removeFilterRangeMutationParams });\n\n            filterColumn.forEach((column) => {\n                const [offset, filter] = column;\n                const setCriteriaMutationParams: ISetSheetsFilterCriteriaMutationParams = {\n                    unitId,\n                    subUnitId,\n                    col: offset,\n                    criteria: { ...filter.serialize(), colId: offset },\n                };\n                undos.push({ id: SetSheetsFilterCriteriaMutation.id, params: setCriteriaMutationParams });\n            });\n        } else {\n            const worksheet = this._univerInstanceService.getUniverSheetInstance(unitId)?.getSheetBySheetId(subUnitId);\n            if (!worksheet) {\n                return this._handleNull();\n            }\n            const hiddenRows = [];\n            for (let r = removeStartRow; r <= removeEndRow; r++) {\n                if (worksheet.getRowFiltered(r)) {\n                    hiddenRows.push(r);\n                }\n            }\n            const afterStartRow = Math.min(startRow, removeStartRow);\n            const afterEndRow = afterStartRow + (endRow - startRow) - count + hiddenRows.length;\n            const setFilterRangeMutationParams: ISetSheetsFilterRangeMutationParams = {\n                unitId,\n                subUnitId,\n                range: {\n                    ...filterRange,\n                    startRow: afterStartRow,\n                    endRow: afterEndRow,\n                },\n            };\n            redos.push({ id: SetSheetsFilterRangeMutation.id, params: setFilterRangeMutationParams });\n        }\n\n        return {\n            undos: mergeSetFilterCriteria(undos),\n            redos: mergeSetFilterCriteria(redos),\n        };\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    private _handleMoveColsCommand(config: IMoveColsCommandParams, unitId: string, subUnitId: string) {\n        const filterModel = this._sheetsFilterService.getFilterModel(unitId, subUnitId);\n        const filterRange = filterModel?.getRange() ?? null;\n        if (!filterModel || !filterRange) {\n            return this._handleNull();\n        }\n        const { startColumn, endColumn } = filterRange;\n        const { fromRange, toRange } = config;\n        if ((fromRange.endColumn < startColumn && toRange.startColumn <= startColumn) || (\n            fromRange.startColumn > endColumn && toRange.endColumn > endColumn\n        )) {\n            return this._handleNull();\n        }\n        const redos: IMutationInfo[] = [];\n        const undos: IMutationInfo[] = [];\n        const filterCol: IObjectArrayPrimitiveType<{ colIndex: number; filter: Nullable<FilterColumn> }> = {};\n        for (let col = startColumn; col <= endColumn; col++) {\n            filterCol[col] = {\n                colIndex: col,\n                filter: filterModel.getFilterColumn(col),\n            };\n        }\n        moveMatrixArray(fromRange.startColumn, fromRange.endColumn - fromRange.startColumn + 1, toRange.startColumn, filterCol);\n\n        let startBorder = filterRange.startColumn;\n        let endBorder = filterRange.endColumn;\n\n        // border will change if first col or last col moves.\n        if (startColumn >= fromRange.startColumn && startColumn <= fromRange.endColumn\n            && toRange.startColumn > fromRange.startColumn\n            && fromRange.endColumn < endColumn\n        ) {\n            startBorder = fromRange.endColumn + 1;\n        }\n        if (endColumn >= fromRange.startColumn && endColumn <= fromRange.endColumn\n            && toRange.startColumn < fromRange.startColumn\n            && fromRange.startColumn > startColumn\n        ) {\n            endBorder = fromRange.startColumn - 1;\n        }\n\n        const numberCols = Object.keys(filterCol).map((col) => Number(col)) as number[];\n\n        // find the start col & end col of new filter range by border.\n        const newEnd = numberCols.find((col) => filterCol[col].colIndex === endBorder) as number;\n        const newStart = numberCols.find((col) => filterCol[col].colIndex === startBorder) as number;\n\n        numberCols.forEach((col) => {\n            const { colIndex: oldColIndex, filter } = filterCol[col];\n            const newColIndex = col;\n\n            if (filter) {\n                if (newColIndex >= newStart && newColIndex <= newEnd) {\n                    const setCriteriaMutationParams: ISetSheetsFilterCriteriaMutationParams = {\n                        unitId,\n                        subUnitId,\n                        col: newColIndex,\n                        criteria: { ...filter.serialize(), colId: newColIndex },\n                    };\n\n                    const undoSetCriteriaMutationParams: ISetSheetsFilterCriteriaMutationParams = {\n                        unitId,\n                        subUnitId,\n                        col: newColIndex,\n                        criteria: filterModel.getFilterColumn(newColIndex) ?\n                            { ...filterModel.getFilterColumn(newColIndex)?.serialize(), colId: newColIndex }\n                            : null,\n                    };\n                    redos.push({ id: SetSheetsFilterCriteriaMutation.id, params: setCriteriaMutationParams });\n                    undos.push({ id: SetSheetsFilterCriteriaMutation.id, params: undoSetCriteriaMutationParams });\n                }\n                if (!filterCol[oldColIndex]?.filter) {\n                    const setCriteriaMutationParams: ISetSheetsFilterCriteriaMutationParams = {\n                        unitId,\n                        subUnitId,\n                        col: oldColIndex,\n                        criteria: null,\n                    };\n                    redos.push({ id: SetSheetsFilterCriteriaMutation.id, params: setCriteriaMutationParams });\n                    undos.push({ id: SetSheetsFilterCriteriaMutation.id, params: { unitId, subUnitId, col: oldColIndex, criteria: { ...filter.serialize(), colId: oldColIndex } } });\n                }\n            }\n        });\n\n        if (startColumn !== newStart || endColumn !== newEnd) {\n            const setFilterRangeMutationParams: ISetSheetsFilterRangeMutationParams = {\n                unitId,\n                subUnitId,\n                range: {\n                    ...filterRange,\n                    startColumn: newStart,\n                    endColumn: newEnd,\n                },\n            };\n            redos.unshift({ id: SetSheetsFilterRangeMutation.id, params: setFilterRangeMutationParams });\n            undos.unshift({ id: SetSheetsFilterRangeMutation.id, params: { range: filterRange, unitId, subUnitId } });\n        }\n\n        return {\n            undos,\n            redos,\n        };\n    }\n\n    private _handleMoveRowsCommand(config: IMoveRowsCommandParams, unitId: string, subUnitId: string) {\n        const filterModel = this._sheetsFilterService.getFilterModel(unitId, subUnitId);\n        const filterRange = filterModel?.getRange() ?? null;\n        if (!filterModel || !filterRange) {\n            return this._handleNull();\n        }\n        const { startRow, endRow } = filterRange;\n        const { fromRange, toRange } = config;\n        if ((fromRange.endRow < startRow && toRange.startRow <= startRow) || (\n            fromRange.startRow > endRow && toRange.endRow > endRow\n        )) {\n            return this._handleNull();\n        }\n        const redos: IMutationInfo[] = [];\n        const undos: IMutationInfo[] = [];\n        const filterRow: IObjectArrayPrimitiveType<{ oldIndex: number }> = {};\n        for (let row = startRow; row <= endRow; row++) {\n            filterRow[row] = {\n                oldIndex: row,\n            };\n        }\n        const startBorder = startRow;\n        let endBorder = endRow;\n\n        // only need to deal with endBorder, startRow will not be moved.\n        if (endRow >= fromRange.startRow && endRow <= fromRange.endRow\n            && toRange.startRow < fromRange.startRow\n            && fromRange.startRow > startRow\n        ) {\n            endBorder = fromRange.startRow - 1;\n        }\n\n        moveMatrixArray(fromRange.startRow, fromRange.endRow - fromRange.startRow + 1, toRange.startRow, filterRow);\n        const numberRows = Object.keys(filterRow).map((row) => Number(row));\n\n        const newEnd = numberRows.find((row) => filterRow[row].oldIndex === endBorder) as number;\n        const newStart = numberRows.find((row) => filterRow[row].oldIndex === startBorder) as number;\n\n        if (startRow !== newStart || endRow !== newEnd) {\n            const setFilterRangeMutationParams: ISetSheetsFilterRangeMutationParams = {\n                unitId,\n                subUnitId,\n                range: {\n                    ...filterRange,\n                    startRow: newStart,\n                    endRow: newEnd,\n                },\n            };\n            redos.push({ id: SetSheetsFilterRangeMutation.id, params: setFilterRangeMutationParams }, { id: ReCalcSheetsFilterMutation.id, params: { unitId, subUnitId } });\n            undos.push({ id: SetSheetsFilterRangeMutation.id, params: { range: filterRange, unitId, subUnitId } }, { id: ReCalcSheetsFilterMutation.id, params: { unitId, subUnitId } });\n        }\n        return {\n            redos,\n            undos,\n        };\n    }\n\n    private _handleMoveRangeCommand(config: IMoveRangeCommandParams, unitId: string, subUnitId: string) {\n        const { fromRange, toRange } = config;\n        const filterModel = this._sheetsFilterService.getFilterModel(unitId, subUnitId);\n        if (!filterModel) {\n            return this._handleNull();\n        }\n        const filterRange = filterModel.getRange();\n        if (!filterRange) {\n            return this._handleNull();\n        }\n\n        const redos: IMutationInfo[] = [];\n        const undos: IMutationInfo[] = [];\n\n        if (Rectangle.contains(fromRange, filterRange)) {\n            const rowOffset = filterRange.startRow - fromRange.startRow;\n            const colOffset = filterRange.startColumn - fromRange.startColumn;\n            const newFilterRange = {\n                startRow: toRange.startRow + rowOffset,\n                startColumn: toRange.startColumn + colOffset,\n                endRow: toRange.startRow + rowOffset + (filterRange.endRow - filterRange.startRow),\n                endColumn: toRange.startColumn + colOffset + (filterRange.endColumn - filterRange.startColumn),\n            };\n            const removeFilter = {\n                id: RemoveSheetsFilterMutation.id,\n                params: {\n                    unitId,\n                    subUnitId,\n                },\n            };\n            const setNewFilterRange = { id: SetSheetsFilterRangeMutation.id, params: { unitId, subUnitId, range: newFilterRange } as ISetSheetsFilterRangeMutationParams };\n            const setOldFilterRange = { id: SetSheetsFilterRangeMutation.id, params: { unitId, subUnitId, range: filterRange } as ISetSheetsFilterRangeMutationParams };\n\n            redos.push(removeFilter, setNewFilterRange);\n\n            undos.push(removeFilter, setOldFilterRange);\n\n            const filterColumn = filterModel.getAllFilterColumns();\n            const moveColDelta = toRange.startColumn - fromRange.startColumn;\n            filterColumn.forEach((column) => {\n                const [col, criteria] = column;\n                if (criteria) {\n                    redos.push({ id: SetSheetsFilterCriteriaMutation.id, params: { unitId, subUnitId, col: col + moveColDelta, criteria: { ...criteria.serialize(), colId: col + moveColDelta } } });\n                    undos.push({ id: SetSheetsFilterCriteriaMutation.id, params: { unitId, subUnitId, col, criteria: { ...criteria.serialize(), colId: col } } });\n                }\n            });\n\n            // redos.push({ id: ReCalcSheetsFilterMutation.id, params: { unitId, subUnitId } });\n            // undos.push({ id: ReCalcSheetsFilterMutation.id, params: { unitId, subUnitId } });\n        } else if (Rectangle.intersects(toRange, filterRange)) {\n            const newFilterRange: IRange = {\n                ...filterRange,\n                endRow: Math.max(filterRange.endRow, toRange.endRow),\n            };\n            redos.push({ id: SetSheetsFilterRangeMutation.id, params: { unitId, subUnitId, range: newFilterRange } });\n            undos.push({ id: SetSheetsFilterRangeMutation.id, params: { unitId, subUnitId, range: filterRange } });\n        }\n        return {\n            redos,\n            undos,\n        };\n    }\n\n    private _handleRemoveSheetCommand(config: IRemoveSheetCommandParams, unitId: string, subUnitId: string) {\n        const filterModel = this._sheetsFilterService.getFilterModel(unitId, subUnitId);\n        if (!filterModel) {\n            return this._handleNull();\n        }\n        const filterRange = filterModel.getRange();\n        if (!filterRange) {\n            return this._handleNull();\n        }\n        const redos: IMutationInfo[] = [];\n        const undos: IMutationInfo[] = [];\n        const filterCols = filterModel.getAllFilterColumns();\n        filterCols.forEach(([col, filter]) => {\n            undos.push({ id: SetSheetsFilterCriteriaMutation.id, params: { unitId, subUnitId, col, criteria: { ...filter.serialize(), colId: col } } });\n        });\n        redos.push({ id: RemoveSheetsFilterMutation.id, params: { unitId, subUnitId, range: filterRange } });\n        undos.unshift({ id: SetSheetsFilterRangeMutation.id, params: { range: filterRange, unitId, subUnitId } });\n        return {\n            undos,\n            redos,\n        };\n    }\n\n    private _handleCopySheetCommand(unitId: string, subUnitId: string, targetSubUnitId: string) {\n        const filterModel = this._sheetsFilterService.getFilterModel(unitId, subUnitId);\n        if (!filterModel) {\n            return this._handleNull();\n        }\n        const filterRange = filterModel.getRange();\n        if (!filterRange) {\n            return this._handleNull();\n        }\n        const redos: IMutationInfo[] = [];\n        const undos: IMutationInfo[] = [];\n        const preUndos: IMutationInfo[] = [];\n        const preRedos: IMutationInfo[] = [];\n        const filterCols = filterModel.getAllFilterColumns();\n        filterCols.forEach(([col, filter]) => {\n            redos.push({ id: SetSheetsFilterCriteriaMutation.id, params: { unitId, subUnitId: targetSubUnitId, col, criteria: { ...filter.serialize(), colId: col } } });\n            preUndos.push({ id: SetSheetsFilterCriteriaMutation.id, params: { unitId, subUnitId: targetSubUnitId, col, criteria: null } });\n        });\n        preUndos.push({ id: RemoveSheetsFilterMutation.id, params: { unitId, subUnitId: targetSubUnitId, range: filterRange } });\n        redos.unshift({ id: SetSheetsFilterRangeMutation.id, params: { range: filterRange, unitId, subUnitId: targetSubUnitId } });\n        return {\n            undos,\n            redos,\n            preUndos,\n            preRedos,\n        };\n    }\n\n    private _handleNull() {\n        return { redos: [], undos: [] };\n    }\n\n    private _initRowFilteredInterceptor(): void {\n        this.disposeWithMe(this._sheetInterceptorService.intercept(INTERCEPTOR_POINT.ROW_FILTERED, {\n\n            // sheet-interceptor.service.ts\n            handler: (filtered, rowLocation) => {\n                if (filtered) return true;\n                return this._sheetsFilterService.getFilterModel(\n                    rowLocation.unitId,\n                    rowLocation.subUnitId\n                )?.isRowFiltered(rowLocation.row) ?? false;\n            },\n        }));\n    }\n\n    private _moveCriteria(unitId: string, subUnitId: string, target: [number, FilterColumn][], step: number) {\n        const defaultSetCriteriaMutationParams: ISetSheetsFilterCriteriaMutationParams = {\n            unitId,\n            subUnitId,\n            criteria: null,\n            col: -1,\n        };\n        const oldUndos: IMutationInfo[] = [];\n        const oldRedos: IMutationInfo[] = [];\n        const newUndos: IMutationInfo[] = [];\n        const newRedos: IMutationInfo[] = [];\n\n        target.forEach((column) => {\n            const [offset, filter] = column;\n            oldRedos.push({\n                id: SetSheetsFilterCriteriaMutation.id,\n                params: {\n                    ...defaultSetCriteriaMutationParams,\n                    col: offset,\n                },\n            });\n            oldUndos.push({\n                id: SetSheetsFilterCriteriaMutation.id,\n                params: {\n                    ...defaultSetCriteriaMutationParams,\n                    col: offset,\n                    criteria: { ...filter.serialize(), colId: offset },\n                },\n            });\n        });\n\n        target.forEach((column) => {\n            const [offset, filter] = column;\n            newRedos.push({\n                id: SetSheetsFilterCriteriaMutation.id,\n                params: {\n                    ...defaultSetCriteriaMutationParams,\n                    col: offset + step,\n                    criteria: { ...filter.serialize(), colId: offset + step },\n                },\n            });\n            newUndos.push({\n                id: SetSheetsFilterCriteriaMutation.id,\n                params: {\n                    ...defaultSetCriteriaMutationParams,\n                    col: offset + step,\n                    criteria: null,\n                },\n            });\n        });\n\n        return {\n            newRange: {\n                redos: newRedos,\n                undos: newUndos,\n            },\n            oldRange: {\n                redos: oldRedos,\n                undos: oldUndos,\n            },\n        };\n    }\n\n    private _commandExecutedListener(): void {\n        this.disposeWithMe(this._commandService.onCommandExecuted((command: ICommandInfo, options) => {\n            const { unitId, subUnitId } = command.params as unknown as ISheetCommandSharedParams || {};\n\n            const filterModel = this._sheetsFilterService.getFilterModel(unitId, subUnitId);\n            if (!filterModel) return;\n            const filteredOutRows = Array.from(filterModel.filteredOutRows).sort((a, b) => a - b);\n            const newFilteredOutRows: number[] = [];\n            let changed = false;\n\n            if (command.id === RemoveRowMutation.id) {\n                const { startRow, endRow } = (command.params as IRemoveRowsMutationParams).range;\n                const filterOutInRemove = filteredOutRows.filter((row) => row >= startRow && row <= endRow);\n                filteredOutRows.forEach((row) => {\n                    if (row < startRow) {\n                        newFilteredOutRows.push(row);\n                    } else {\n                        changed = true;\n                        if (row <= endRow) {\n                            const newIndex = Math.max(startRow, newFilteredOutRows.length ? newFilteredOutRows[newFilteredOutRows.length - 1] + 1 : startRow);\n                            newFilteredOutRows.push(newIndex);\n                        } else {\n                            newFilteredOutRows.push(row - (endRow - startRow + 1 - filterOutInRemove.length));\n                        }\n                    }\n                });\n            }\n\n            if (command.id === InsertRowMutation.id) {\n                const { startRow, endRow } = (command.params as IInsertRowMutationParams).range;\n                filteredOutRows.forEach((row) => {\n                    if (row >= startRow) {\n                        changed = true;\n                        newFilteredOutRows.push(row + (endRow - startRow + 1));\n                    } else {\n                        newFilteredOutRows.push(row);\n                    }\n                });\n            }\n\n            if (changed) {\n                filterModel.filteredOutRows = new Set(newFilteredOutRows);\n            }\n\n            // extend filter range when set range values\n            if (command.id === SetRangeValuesMutation.id && !options?.onlyLocal) {\n                const extendRegion = this._getExtendRegion(unitId, subUnitId);\n                if (extendRegion) {\n                    const cellValue = (command.params as ISetRangeValuesMutationParams).cellValue;\n                    if (cellValue) {\n                        for (let col = extendRegion.startColumn; col <= extendRegion.endColumn; col++) {\n                            const cell = cellValue?.[extendRegion.startRow]?.[col];\n                            if (cell && this._cellHasValue(cell)) {\n                                const worksheet = (this._univerInstanceService.getUnit(unitId) as Workbook)?.getSheetBySheetId(subUnitId);\n                                if (worksheet) {\n                                    const extendedRange = expandToContinuousRange(extendRegion, { down: true }, worksheet);\n                                    const filterModel = this._sheetsFilterService.getFilterModel(unitId, subUnitId)!;\n                                    const filterRange = filterModel.getRange();\n                                    filterModel.setRange({\n                                        ...filterRange,\n                                        endRow: extendedRange.endRow,\n                                    });\n                                    this._registerRefRange(unitId, subUnitId);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }));\n    }\n\n    private _getExtendRegion(unitId: string, subUnitId: string): Nullable<IRange> {\n        const filterModel = this._sheetsFilterService.getFilterModel(unitId, subUnitId);\n        if (!filterModel) {\n            return null;\n        }\n        const worksheet = (this._univerInstanceService.getUnit(unitId) as Workbook)?.getSheetBySheetId(subUnitId);\n        if (!worksheet) {\n            return null;\n        }\n        const filterRange = filterModel.getRange();\n        if (!filterRange) {\n            return null;\n        }\n        const maxRowIndex = worksheet.getRowCount() - 1;\n        const rowManager = worksheet.getRowManager();\n        for (let row = filterRange.endRow + 1; row <= maxRowIndex; row++) {\n            if (rowManager.getRowRawVisible(row)) {\n                return {\n                    startRow: row,\n                    endRow: row,\n                    startColumn: filterRange.startColumn,\n                    endColumn: filterRange.endColumn,\n                };\n            }\n        }\n        return null;\n    }\n\n    private _initErrorHandling() {\n        this.disposeWithMe(this._commandService.beforeCommandExecuted((command) => {\n            const params = command.params as IMoveRowsCommandParams;\n            const target = getSheetCommandTarget(this._univerInstanceService);\n            if (!target) return;\n\n            const { subUnitId, unitId } = target;\n            const filterModel = this._sheetsFilterService.getFilterModel(unitId, subUnitId);\n            if (!filterModel) return;\n            const filterRange = filterModel.getRange();\n            if (command.id === MoveRowsCommand.id && params.fromRange.startRow <= filterRange.startRow && params.fromRange.endRow < filterRange.endRow && params.fromRange.endRow >= filterRange.startRow) {\n                this._sheetsFilterService.setFilterErrorMsg('sheets-filter.msg.filter-header-forbidden');\n                throw new Error('[SheetsFilterController]: Cannot move header row of filter');\n            }\n        }));\n    }\n\n    private _cellHasValue(cell: ICellData): boolean {\n        const values = Object.values(cell);\n        if (values.length === 0 || values.every((v) => v == null)) {\n            return false;\n        }\n\n        return true;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Workbook } from '@univerjs/core';\nimport type { ISheetCommandSharedParams } from '@univerjs/sheets';\nimport { Disposable, Inject, IUniverInstanceService } from '@univerjs/core';\nimport { IActiveDirtyManagerService, ISheetRowFilteredService } from '@univerjs/engine-formula';\nimport { FILTER_MUTATIONS } from '../common/const';\nimport { SheetsFilterService } from './sheet-filter.service';\n\n/**\n * Hidden rows after filtering affect formula calculations, such as SUBTOTAL\n */\nexport class SheetsFilterFormulaService extends Disposable {\n    constructor(\n        @Inject(IActiveDirtyManagerService) private _activeDirtyManagerService: IActiveDirtyManagerService,\n        @Inject(ISheetRowFilteredService) private _sheetRowFilteredService: ISheetRowFilteredService,\n        @Inject(SheetsFilterService) private _sheetsFilterService: SheetsFilterService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService\n    ) {\n        super();\n\n        this._initFormulaDirtyRange();\n        this._registerSheetRowFiltered();\n    }\n\n    private _initFormulaDirtyRange() {\n        FILTER_MUTATIONS.forEach((commandId) => {\n            this._activeDirtyManagerService.register(\n                commandId,\n                {\n                    commandId,\n                    getDirtyData: (commandInfo) => {\n                        const params = commandInfo.params as ISheetCommandSharedParams;\n                        const { unitId, subUnitId } = params;\n                        return {\n                            dirtyRanges: this._getHideRowMutation(unitId, subUnitId),\n                            clearDependencyTreeCache: {\n                                [unitId]: {\n                                    [subUnitId]: '1',\n                                },\n                            },\n                        };\n                    },\n                }\n            );\n        });\n    }\n\n    private _getHideRowMutation(unitId: string, subUnitId: string) {\n        const range = this._sheetsFilterService.getFilterModel(unitId, subUnitId)?.getRange();\n\n        const sheet = this._univerInstanceService.getUnit<Workbook>(unitId)?.getSheetBySheetId(subUnitId);\n\n        if (range == null || sheet == null) {\n            return [];\n        }\n\n        const { startRow, endRow } = range;\n\n        // covert hidden rows to dirtyRanges\n        const dirtyRanges = [{\n            unitId,\n            sheetId: subUnitId,\n            range: {\n                startRow,\n                startColumn: 0,\n                endRow,\n                endColumn: sheet.getColumnCount() - 1,\n            },\n        }];\n\n        return dirtyRanges;\n    }\n\n    private _registerSheetRowFiltered() {\n        this._sheetRowFilteredService.register((unitId, subUnitId, row) => {\n            return this._sheetsFilterService.getFilterModel(unitId, subUnitId)?.isRowFiltered(row) ?? false;\n        });\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport type { IUniverSheetsFilterConfig } from './controllers/config.schema';\n\nimport { IConfigService, Inject, Injector, merge, Plugin, touchDependencies, UniverInstanceType } from '@univerjs/core';\nimport { defaultPluginConfig, SHEETS_FILTER_PLUGIN_CONFIG_KEY } from './controllers/config.schema';\nimport { SheetsFilterController } from './controllers/sheets-filter.controller';\nimport { SheetsFilterFormulaService } from './services/sheet-filter-formula.service';\nimport { SHEET_FILTER_SNAPSHOT_ID, SheetsFilterService } from './services/sheet-filter.service';\n\nexport class UniverSheetsFilterPlugin extends Plugin {\n    static override type = UniverInstanceType.UNIVER_SHEET;\n    static override pluginName = SHEET_FILTER_SNAPSHOT_ID;\n\n    constructor(\n        private readonly _config: Partial<IUniverSheetsFilterConfig> = defaultPluginConfig,\n        @Inject(Injector) protected readonly _injector: Injector,\n        @IConfigService private readonly _configService: IConfigService\n    ) {\n        super();\n\n        // Manage the plugin configuration.\n        const { ...rest } = merge(\n            {},\n            defaultPluginConfig,\n            this._config\n        );\n        this._configService.setConfig(SHEETS_FILTER_PLUGIN_CONFIG_KEY, rest);\n    }\n\n    override onStarting(): void {\n        ([\n            [SheetsFilterFormulaService],\n            [SheetsFilterService],\n            [SheetsFilterController],\n        ] as Dependency[]).forEach((d) => this._injector.add(d));\n    }\n\n    override onReady(): void {\n        touchDependencies(this._injector, [\n            [SheetsFilterFormulaService],\n            [SheetsFilterController],\n        ]);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand, IMutationInfo, IRange, Nullable, Workbook } from '@univerjs/core';\nimport type { ISheetCommandSharedParams } from '@univerjs/sheets';\nimport type { FilterColumn } from '../../models/filter-model';\nimport type { IAutoFilter, IFilterColumn } from '../../models/types';\nimport type { ISetSheetsFilterCriteriaMutationParams, ISetSheetsFilterRangeMutationParams } from '../mutations/sheets-filter.mutation';\nimport { CommandType, ErrorService, ICommandService, IUndoRedoService, IUniverInstanceService, LocaleService, sequenceExecute, UniverInstanceType } from '@univerjs/core';\nimport { expandToContinuousRange, getSheetCommandTarget, isSingleCellSelection, SheetsSelectionsService } from '@univerjs/sheets';\nimport { SheetsFilterService } from '../../services/sheet-filter.service';\nimport { ReCalcSheetsFilterMutation, RemoveSheetsFilterMutation, SetSheetsFilterCriteriaMutation, SetSheetsFilterRangeMutation } from '../mutations/sheets-filter.mutation';\n\n/**\n * Parameters of command {@link SetSheetFilterRangeCommand}.\n * @property {IRange} range - the range to be set as filter range.\n */\nexport interface ISetSheetFilterRangeCommandParams extends ISheetCommandSharedParams {\n    range: IRange;\n}\n\n/**\n * A {@link CommandType.COMMAND} to set filter range in a Worksheet. Its params {@link ISetSheetFilterRangeCommandParams}\n * is required. If the {@link FilterModel} does not exist, it will be created.\n */\nexport const SetSheetFilterRangeCommand: ICommand<ISetSheetFilterRangeCommandParams> = {\n    id: 'sheet.command.set-filter-range',\n    type: CommandType.COMMAND,\n    handler: (accessor, params: ISetSheetFilterRangeCommandParams) => {\n        const sheetsFilterService = accessor.get(SheetsFilterService);\n        const commandService = accessor.get(ICommandService);\n        const undoRedoService = accessor.get(IUndoRedoService);\n        const instanceSrv = accessor.get(IUniverInstanceService);\n\n        const { unitId, subUnitId, range } = params;\n\n        const commandTarget = getSheetCommandTarget(instanceSrv, params);\n        if (!commandTarget) return false;\n\n        const filterModel = sheetsFilterService.getFilterModel(unitId, subUnitId);\n        if (filterModel) return false;\n\n        if (range.endRow === range.startRow) {\n            const errorService = accessor.get(ErrorService);\n            const localeService = accessor.get(LocaleService);\n            errorService.emit(localeService.t('sheets-filter.command.not-valid-filter-range'));\n            return false;\n        }\n\n        // Execute the command to set filter range and prepare undo redo.\n        const redoMutation = { id: SetSheetsFilterRangeMutation.id, params: { unitId, subUnitId, range } };\n        const result = commandService.syncExecuteCommand(redoMutation.id, redoMutation.params);\n        if (result) {\n            undoRedoService.pushUndoRedo({\n                unitID: unitId,\n                undoMutations: [{ id: RemoveSheetsFilterMutation.id, params: { unitId, subUnitId } }],\n                redoMutations: [redoMutation],\n            });\n        }\n\n        return result;\n    },\n};\n\n/**\n * A {@link CommandType.COMMAND} to remove filter in a Worksheet. Its params {@link ISheetCommandSharedParams} is\n * required. If the {@link FilterModel} does not exist, it will fail to execute.\n */\nexport const RemoveSheetFilterCommand: ICommand<ISheetCommandSharedParams> = {\n    id: 'sheet.command.remove-sheet-filter',\n    type: CommandType.COMMAND,\n    handler: (accessor, params: ISheetCommandSharedParams) => {\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        const sheetsFilterService = accessor.get(SheetsFilterService);\n        const commandService = accessor.get(ICommandService);\n\n        const undoRedoService = accessor.get(IUndoRedoService);\n\n        const commandTarget = getSheetCommandTarget(univerInstanceService, params);\n        if (!commandTarget) return false;\n\n        // If there is a filter model, we should remove it and prepare undo redo.\n        const { unitId, subUnitId } = commandTarget;\n        const filterModel = sheetsFilterService.getFilterModel(unitId, subUnitId);\n        if (!filterModel) return false;\n\n        const autoFilter = filterModel?.serialize();\n        const undoMutations = destructFilterModel(unitId, subUnitId, autoFilter);\n        const result = commandService.syncExecuteCommand(RemoveSheetsFilterMutation.id, { unitId, subUnitId });\n        if (result) {\n            undoRedoService.pushUndoRedo({\n                unitID: unitId,\n                undoMutations,\n                redoMutations: [{ id: RemoveSheetsFilterMutation.id, params: { unitId, subUnitId } }],\n            });\n        }\n\n        return result;\n    },\n};\n\n/**\n * A {@link CommandType.COMMAND} to toggle filter in the current {@link Worksheet}.\n */\nexport const SmartToggleSheetsFilterCommand: ICommand = {\n    id: 'sheet.command.smart-toggle-filter',\n    type: CommandType.COMMAND,\n    handler: async (accessor: IAccessor) => {\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        const sheetsFilterService = accessor.get(SheetsFilterService);\n        const commandService = accessor.get(ICommandService);\n\n        const currentWorkbook = univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET);\n        const currentWorksheet = currentWorkbook?.getActiveSheet();\n        if (!currentWorksheet || !currentWorkbook) return false;\n\n        const unitId = currentWorkbook.getUnitId();\n        const subUnitId = currentWorksheet.getSheetId();\n\n        // If there is a filter model, we should remove it and prepare undo redo.\n        const filterModel = sheetsFilterService.getFilterModel(unitId, subUnitId);\n        if (filterModel) {\n            return commandService.executeCommand(RemoveSheetFilterCommand.id, { unitId, subUnitId });\n        }\n\n        // Other wise we should set the filter range to the current selection.\n        const selectionManager = accessor.get(SheetsSelectionsService);\n        const lastSelection = selectionManager.getCurrentLastSelection();\n        if (!lastSelection) return false;\n\n        const startRange = lastSelection.range;\n        const targetFilterRange = isSingleCellSelection(lastSelection)\n            ? expandToContinuousRange(startRange, { left: true, right: true, up: true, down: true }, currentWorksheet)\n            : startRange;\n\n        return commandService.executeCommand(SetSheetFilterRangeCommand.id, {\n            unitId,\n            subUnitId,\n            range: targetFilterRange,\n        } as ISetSheetFilterRangeCommandParams);\n    },\n};\n\n/**\n * Parameters of command {@link SetSheetsFilterCriteriaCommand}.\n * @property {number} col - the column index of the filter criteria\n * @property {Nullable<IFilterColumn>} criteria - the filter criteria to be set\n */\nexport interface ISetSheetsFilterCriteriaCommandParams extends ISheetCommandSharedParams {\n    col: number;\n    criteria: Nullable<IFilterColumn>;\n}\n\n/**\n * A {@link CommandType.COMMAND} to set filter criteria to a column in the targeting {@link FilterModel}. Its params\n * {@link ISetSheetsFilterCriteriaCommandParams} is required.\n */\nexport const SetSheetsFilterCriteriaCommand: ICommand<ISetSheetsFilterCriteriaCommandParams> = {\n    id: 'sheet.command.set-filter-criteria',\n    type: CommandType.COMMAND,\n    handler: (accessor: IAccessor, params: ISetSheetsFilterCriteriaCommandParams) => {\n        const sheetsFilterService = accessor.get(SheetsFilterService);\n        const commandService = accessor.get(ICommandService);\n        const undoRedoService = accessor.get(IUndoRedoService);\n\n        const { unitId, subUnitId, col, criteria } = params;\n        const filterModel = sheetsFilterService.getFilterModel(unitId, subUnitId);\n        if (!filterModel) return false;\n\n        const range = filterModel.getRange();\n        if (!range || col < range.startColumn || col > range.endColumn) return false;\n\n        const filterColumn = filterModel.getFilterColumn(col);\n        const undoMutation = destructFilterColumn(unitId, subUnitId, col, filterColumn);\n        const redoMutation: IMutationInfo<ISetSheetsFilterCriteriaMutationParams> = {\n            id: SetSheetsFilterCriteriaMutation.id,\n            params: {\n                unitId,\n                subUnitId,\n                col,\n                criteria,\n            },\n        };\n\n        const result = commandService.syncExecuteCommand(redoMutation.id, redoMutation.params);\n        if (result) {\n            undoRedoService.pushUndoRedo({\n                unitID: unitId,\n                undoMutations: [undoMutation],\n                redoMutations: [redoMutation],\n            });\n        }\n\n        return result;\n    },\n};\n\n/**\n * A {@link CommandType.COMMAND} to clear all filter criteria in the targeting {@link FilterModel}. Its params\n * {@link ISheetCommandSharedParams} is required.\n */\nexport const ClearSheetsFilterCriteriaCommand: ICommand<ISheetCommandSharedParams> = {\n    id: 'sheet.command.clear-filter-criteria',\n    type: CommandType.COMMAND,\n    handler: (accessor: IAccessor, params) => {\n        const sheetsFilterService = accessor.get(SheetsFilterService);\n        const undoRedoService = accessor.get(IUndoRedoService);\n        const commandService = accessor.get(ICommandService);\n        const instanceSrv = accessor.get(IUniverInstanceService);\n\n        const commandTarget = getSheetCommandTarget(instanceSrv, params);\n        if (!commandTarget) return false;\n\n        const { unitId, subUnitId } = commandTarget;\n        const filterModel = sheetsFilterService.getFilterModel(commandTarget.unitId, commandTarget.subUnitId);\n        if (!filterModel) return false;\n\n        const autoFilter = filterModel.serialize();\n        const undoMutations = destructFilterCriteria(unitId, subUnitId, autoFilter);\n        const redoMutations = generateRemoveCriteriaMutations(unitId, subUnitId, autoFilter);\n\n        const result = sequenceExecute(redoMutations, commandService);\n        if (result.result) {\n            undoRedoService.pushUndoRedo({\n                unitID: unitId,\n                undoMutations,\n                redoMutations,\n            });\n\n            return true;\n        }\n\n        return false;\n    },\n};\n\n/**\n * A {@link CommandType.COMMAND} forcing the currently active {@link FilterModel} to re-calculate all filter criteria.\n * Its params {@link ISheetCommandSharedParams} is required.\n */\nexport const ReCalcSheetsFilterCommand: ICommand<ISheetCommandSharedParams> = {\n    id: 'sheet.command.re-calc-filter',\n    type: CommandType.COMMAND,\n    handler: (accessor, params) => {\n        const sheetsFilterService = accessor.get(SheetsFilterService);\n        const commandService = accessor.get(ICommandService);\n        const instanceSrv = accessor.get(IUniverInstanceService);\n\n        const commandTarget = getSheetCommandTarget(instanceSrv, params);\n        if (!commandTarget) return false;\n\n        const { unitId, subUnitId } = commandTarget;\n        const filterModel = sheetsFilterService.getFilterModel(commandTarget.unitId, commandTarget.subUnitId);\n        if (!filterModel) return false;\n\n        // No need to handle undo redo for this command.\n        return commandService.executeCommand(ReCalcSheetsFilterMutation.id, { unitId, subUnitId } as ISheetCommandSharedParams);\n    },\n};\n\n/**\n * Destruct a `FilterModel` to a list of mutations.\n * @param {string} unitId - the unit id of the Workbook\n * @param {string} subUnitId - the sub unit id of the Worksheet\n * @param {IAutoFilter} autoFilter - the to be destructed FilterModel\n * @returns a list of mutations those can be used to reconstruct the FilterModel\n */\nfunction destructFilterModel(\n    unitId: string,\n    subUnitId: string,\n    autoFilter: IAutoFilter\n): IMutationInfo[] {\n    const mutations: IMutationInfo[] = [];\n\n    const setFilterMutation: IMutationInfo<ISetSheetsFilterRangeMutationParams> = {\n        id: SetSheetsFilterRangeMutation.id,\n        params: {\n            unitId,\n            subUnitId,\n            range: autoFilter.ref,\n        },\n    };\n    mutations.push(setFilterMutation);\n\n    const criteriaMutations = destructFilterCriteria(unitId, subUnitId, autoFilter);\n    criteriaMutations.forEach((m) => mutations.push(m));\n\n    return mutations;\n}\n\n/**\n * Transform a {@link FilterModel} to a list of mutations to set the filter criteria.\n * @param unitId - the unit id of the {@link Workbook}\n * @param subUnitId - the sub unit id of the {@link Worksheet}\n * @param autoFilter - the to be destructed {@link FilterModel}\n * @returns {IMutationInfo<ISetSheetsFilterCriteriaMutationParams>} a list of mutations those can be used to\n * reconstruct the {@link FilterModel}\n */\nexport function destructFilterCriteria(\n    unitId: string,\n    subUnitId: string,\n    autoFilter: IAutoFilter\n): IMutationInfo<ISetSheetsFilterCriteriaMutationParams>[] {\n    const mutations: IMutationInfo<ISetSheetsFilterCriteriaMutationParams>[] = [];\n\n    autoFilter.filterColumns?.forEach((filterColumn) => {\n        const setFilterCriteriaMutation: IMutationInfo<ISetSheetsFilterCriteriaMutationParams> = {\n            id: SetSheetsFilterCriteriaMutation.id,\n            params: {\n                unitId,\n                subUnitId,\n                col: filterColumn.colId,\n                criteria: filterColumn,\n            },\n        };\n        mutations.push(setFilterCriteriaMutation);\n    });\n\n    return mutations;\n}\n\n/** Generate mutations to remove all criteria on a `FilterModel` */\nfunction generateRemoveCriteriaMutations(\n    unitId: string,\n    subUnitId: string,\n    autoFilter: IAutoFilter\n): IMutationInfo[] {\n    const mutations: IMutationInfo[] = [];\n\n    autoFilter.filterColumns?.forEach((filterColumn) => {\n        const removeFilterCriteriaMutation: IMutationInfo<ISetSheetsFilterCriteriaMutationParams> = {\n            id: SetSheetsFilterCriteriaMutation.id,\n            params: {\n                unitId,\n                subUnitId,\n                col: filterColumn.colId,\n                criteria: null,\n            },\n        };\n        mutations.push(removeFilterCriteriaMutation);\n    });\n\n    return mutations;\n}\n\n/**\n * Prepare the undo mutation, it should rollback to the old criteria if there's already a `FilterColumn`,\n * or remove the filter criteria when there is no `FilterColumn`.\n * @param {string} unitId\n * @param {string} subUnitId\n * @param {number} colId\n * @param {Nullable<FilterColumn>} filterColumn\n * @returns {IMutationInfo<ISetSheetsFilterCriteriaMutationParams>} the undo mutation\n */\nfunction destructFilterColumn(\n    unitId: string,\n    subUnitId: string,\n    colId: number,\n    filterColumn: Nullable<FilterColumn>\n): IMutationInfo<ISetSheetsFilterCriteriaMutationParams> {\n    if (!filterColumn) {\n        return {\n            id: SetSheetsFilterCriteriaMutation.id,\n            params: {\n                unitId,\n                subUnitId,\n                col: colId,\n                criteria: null,\n            },\n        };\n    }\n\n    const serialize = filterColumn.serialize();\n    return {\n        id: SetSheetsFilterCriteriaMutation.id,\n        params: {\n            unitId,\n            subUnitId,\n            col: colId,\n            criteria: serialize,\n        },\n    };\n}\n"],
  "mappings": "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",
  "names": ["CustomFilterOperator", "filter", "customFilterFn", "filter", "_a", "filterModel"]
}
