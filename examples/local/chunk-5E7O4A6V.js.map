{
  "version": 3,
  "sources": ["../../packages/sheets-thread-comment/src/models/sheets-thread-comment.model.ts", "../../packages/sheets-thread-comment/src/controllers/sheets-thread-comment-ref-range.controller.ts", "../../packages/sheets-thread-comment/src/types/const.ts", "../../packages/sheets-thread-comment/src/plugin.ts"],
  "sourcesContent": ["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CommentUpdate, IThreadComment } from '@univerjs/thread-comment';\nimport { Disposable, Inject, IUniverInstanceService, ObjectMatrix, UniverInstanceType } from '@univerjs/core';\nimport { singleReferenceToGrid } from '@univerjs/engine-formula';\nimport { ThreadCommentModel } from '@univerjs/thread-comment';\nimport { Subject } from 'rxjs';\n\nexport type SheetCommentUpdate = CommentUpdate & {\n    row: number;\n    column: number;\n};\n\nexport class SheetsThreadCommentModel extends Disposable {\n    private _matrixMap: Map<string, Map<string, ObjectMatrix<Set<string>>>> = new Map();\n    private _locationMap: Map<string, Map<string, Map<string, { row: number; column: number }>>> = new Map();\n    private _commentUpdate$ = new Subject<SheetCommentUpdate>();\n\n    commentUpdate$ = this._commentUpdate$.asObservable();\n\n    constructor(\n        @Inject(ThreadCommentModel) private readonly _threadCommentModel: ThreadCommentModel,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService\n    ) {\n        super();\n        this._init();\n        this.disposeWithMe(() => {\n            this._commentUpdate$.complete();\n        });\n    }\n\n    private _init() {\n        this._initData();\n        this._initUpdateTransform();\n    }\n\n    private _ensureCommentMatrix(unitId: string, subUnitId: string) {\n        let unitMap = this._matrixMap.get(unitId);\n\n        if (!unitMap) {\n            unitMap = new Map();\n            this._matrixMap.set(unitId, unitMap);\n        }\n\n        let subUnitMap = unitMap.get(subUnitId);\n        if (!subUnitMap) {\n            subUnitMap = new ObjectMatrix();\n            unitMap.set(subUnitId, subUnitMap);\n        }\n\n        return subUnitMap;\n    }\n\n    private _ensureCommentLocationMap(unitId: string, subUnitId: string) {\n        let unitMap = this._locationMap.get(unitId);\n\n        if (!unitMap) {\n            unitMap = new Map();\n            this._locationMap.set(unitId, unitMap);\n        }\n\n        let subUnitMap = unitMap.get(subUnitId);\n        if (!subUnitMap) {\n            subUnitMap = new Map();\n            unitMap.set(subUnitId, subUnitMap);\n        }\n\n        return subUnitMap;\n    }\n\n    private _addCommentToMatrix(matrix: ObjectMatrix<Set<string>>, row: number, column: number, commentId: string) {\n        const current = matrix.getValue(row, column) ?? new Set();\n        current.add(commentId);\n        matrix.setValue(row, column, current);\n    }\n\n    private _deleteCommentFromMatrix(matrix: ObjectMatrix<Set<string>>, row: number, column: number, commentId: string) {\n        if (row >= 0 && column >= 0) {\n            const current = matrix.getValue(row, column);\n            if (current && current.has(commentId)) {\n                current.delete(commentId);\n                if (current.size === 0) {\n                    matrix.realDeleteValue(row, column);\n                }\n            }\n        }\n    }\n\n    private _ensure(unitId: string, subUnitId: string) {\n        const matrix = this._ensureCommentMatrix(unitId, subUnitId);\n        const locationMap = this._ensureCommentLocationMap(unitId, subUnitId);\n        return { matrix, locationMap };\n    }\n\n    private _initData() {\n        const datas = this._threadCommentModel.getAll();\n\n        for (const data of datas) {\n            for (const thread of data.threads) {\n                const { unitId, subUnitId, root } = thread;\n                this._addComment(unitId, subUnitId, root);\n            }\n        }\n    }\n\n    private _addComment(unitId: string, subUnitId: string, comment: IThreadComment) {\n        const location = singleReferenceToGrid(comment.ref);\n        const parentId = comment.parentId;\n        const { row, column } = location;\n        const commentId = comment.id;\n        const { matrix, locationMap } = this._ensure(unitId, subUnitId);\n        if (!parentId && row >= 0 && column >= 0) {\n            this._addCommentToMatrix(matrix, row, column, commentId);\n            locationMap.set(commentId, { row, column });\n        }\n\n        if (!parentId) {\n            this._commentUpdate$.next({\n                unitId,\n                subUnitId,\n                payload: comment,\n                type: 'add',\n                isRoot: !parentId,\n                ...location,\n            });\n        }\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    private _initUpdateTransform() {\n        // eslint-disable-next-line max-lines-per-function\n        this.disposeWithMe(this._threadCommentModel.commentUpdate$.subscribe((update) => {\n            const { unitId, subUnitId } = update;\n\n            try {\n                const type = this._univerInstanceService.getUnitType(unitId);\n                if (type !== UniverInstanceType.UNIVER_SHEET) {\n                    return;\n                }\n            } catch (error) {\n                // do nothing\n            }\n\n            const { matrix, locationMap } = this._ensure(unitId, subUnitId);\n            switch (update.type) {\n                case 'add': {\n                    this._addComment(update.unitId, update.subUnitId, update.payload);\n                    break;\n                }\n                case 'delete': {\n                    const { isRoot, comment } = update.payload;\n                    if (isRoot) {\n                        const location = singleReferenceToGrid(comment.ref);\n                        const { row, column } = location;\n                        this._deleteCommentFromMatrix(matrix, row, column, comment.id);\n                        this._commentUpdate$.next({\n                            ...update,\n                            ...location,\n                        });\n                    }\n                    break;\n                }\n                case 'update': {\n                    const { commentId } = update.payload;\n                    const comment = this._threadCommentModel.getComment(unitId, subUnitId, commentId);\n                    if (!comment) {\n                        return;\n                    }\n                    const location = singleReferenceToGrid(comment.ref);\n                    this._commentUpdate$.next({\n                        ...update,\n                        ...location,\n                    });\n                    break;\n                }\n                case 'updateRef': {\n                    const location = singleReferenceToGrid(update.payload.ref);\n                    const { commentId } = update.payload;\n                    const currentLoc = locationMap.get(commentId);\n                    if (!currentLoc) {\n                        return;\n                    }\n                    const { row, column } = currentLoc;\n                    this._deleteCommentFromMatrix(matrix, row, column, commentId);\n                    locationMap.delete(commentId);\n\n                    if (location.row >= 0 && location.column >= 0) {\n                        this._addCommentToMatrix(matrix, location.row, location.column, commentId);\n                        locationMap.set(commentId, { row: location.row, column: location.column });\n                    }\n                    this._commentUpdate$.next({\n                        ...update,\n                        ...location,\n                    });\n                    break;\n                }\n                case 'resolve': {\n                    const { unitId, subUnitId, payload } = update;\n                    const { locationMap } = this._ensure(unitId, subUnitId);\n                    const location = locationMap.get(payload.commentId);\n                    if (location) {\n                        this._commentUpdate$.next({\n                            ...update,\n                            ...location,\n                        });\n                    }\n                    break;\n                }\n\n                default:\n                    break;\n            }\n        }));\n    }\n\n    getByLocation(unitId: string, subUnitId: string, row: number, column: number): string | undefined {\n        const comments = this.getAllByLocation(unitId, subUnitId, row, column);\n        const activeComments = comments.filter((comment) => !comment.resolved);\n        return activeComments[0]?.id;\n    }\n\n    getAllByLocation(unitId: string, subUnitId: string, row: number, column: number): IThreadComment[] {\n        const matrix = this._ensureCommentMatrix(unitId, subUnitId);\n        const current = matrix.getValue(row, column);\n        if (!current) {\n            return [];\n        }\n\n        return Array.from(current).map((id) => this.getComment(unitId, subUnitId, id)).filter(Boolean) as IThreadComment[];\n    }\n\n    getComment(unitId: string, subUnitId: string, commentId: string) {\n        return this._threadCommentModel.getComment(unitId, subUnitId, commentId);\n    }\n\n    getCommentWithChildren(unitId: string, subUnitId: string, row: number, column: number) {\n        const commentId = this.getByLocation(unitId, subUnitId, row, column);\n        if (!commentId) {\n            return undefined;\n        }\n        const comment = this.getComment(unitId, subUnitId, commentId);\n        if (!comment) {\n            return undefined;\n        }\n        return this._threadCommentModel.getThread(unitId, subUnitId, comment.threadId);\n    }\n\n    showCommentMarker(unitId: string, subUnitId: string, row: number, column: number) {\n        const commentId = this.getByLocation(unitId, subUnitId, row, column);\n        if (!commentId) {\n            return false;\n        }\n\n        const comment = this.getComment(unitId, subUnitId, commentId);\n        if (comment && !comment.resolved) {\n            return true;\n        }\n\n        return false;\n    }\n\n    getSubUnitAll(unitId: string, subUnitId: string) {\n        return this._threadCommentModel.getUnit(unitId).filter((i) => i.subUnitId === subUnitId).map((i) => i.root);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDisposable, IRange, Nullable } from '@univerjs/core';\nimport type { EffectRefRangeParams } from '@univerjs/sheets';\nimport type { IAddCommentMutationParams, IUpdateCommentRefMutationParams } from '@univerjs/thread-comment';\nimport type { ISheetThreadComment } from '../types/interfaces/i-sheet-thread-comment';\nimport { Disposable, ICommandService, Inject, sequenceExecuteAsync, toDisposable } from '@univerjs/core';\nimport { serializeRange, singleReferenceToGrid } from '@univerjs/engine-formula';\nimport { handleCommonRangeChangeWithEffectRefCommandsSkipNoInterests, RefRangeService, SheetsSelectionsService } from '@univerjs/sheets';\nimport { AddCommentMutation, DeleteCommentMutation, ThreadCommentModel, UpdateCommentRefMutation } from '@univerjs/thread-comment';\nimport { SheetsThreadCommentModel } from '../models/sheets-thread-comment.model';\n\nexport class SheetsThreadCommentRefRangeController extends Disposable {\n    private _disposableMap = new Map<string, IDisposable>();\n    private _watcherMap = new Map<string, IDisposable>();\n\n    constructor(\n        @Inject(RefRangeService) private readonly _refRangeService: RefRangeService,\n        @Inject(SheetsThreadCommentModel) private readonly _sheetsThreadCommentModel: SheetsThreadCommentModel,\n        @Inject(ThreadCommentModel) private readonly _threadCommentModel: ThreadCommentModel,\n        @Inject(SheetsSelectionsService) private readonly _selectionManagerService: SheetsSelectionsService,\n        @ICommandService private readonly _commandService: ICommandService\n    ) {\n        super();\n        this._initData();\n        this._initRefRange();\n    }\n\n    private _getIdWithUnitId(unitId: string, subUnitId: string, id: string) {\n        return `${unitId}-${subUnitId}-${id}`;\n    }\n\n    private _handleRangeChange = (unitId: string, subUnitId: string, comment: ISheetThreadComment, resultRange: Nullable<IRange>, silent?: boolean) => {\n        const commentId = comment.id;\n        const oldRange: IRange = {\n            startColumn: comment.column,\n            endColumn: comment.column,\n            startRow: comment.row,\n            endRow: comment.row,\n        };\n\n        if (!resultRange) {\n            return {\n                redos: [{\n                    id: DeleteCommentMutation.id,\n                    params: {\n                        unitId,\n                        subUnitId,\n                        commentId,\n                    },\n                }],\n                undos: [{\n                    id: AddCommentMutation.id,\n                    params: {\n                        unitId,\n                        subUnitId,\n                        comment,\n                        sync: true,\n                    } as IAddCommentMutationParams,\n                }],\n            };\n        }\n        return {\n            redos: [{\n                id: UpdateCommentRefMutation.id,\n                params: {\n                    unitId,\n                    subUnitId,\n                    payload: {\n                        ref: serializeRange(resultRange),\n                        commentId,\n                    },\n                    silent,\n                } as IUpdateCommentRefMutationParams,\n            }],\n            undos: [{\n                id: UpdateCommentRefMutation.id,\n                params: {\n                    unitId,\n                    subUnitId,\n                    payload: {\n                        ref: serializeRange(oldRange),\n                        commentId,\n                    },\n                    silent,\n                } as IUpdateCommentRefMutationParams,\n            }],\n        };\n    };\n\n    private _register(unitId: string, subUnitId: string, comment: ISheetThreadComment) {\n        const commentId = comment.id;\n        const oldRange: IRange = {\n            startColumn: comment.column,\n            endColumn: comment.column,\n            startRow: comment.row,\n            endRow: comment.row,\n        };\n\n        this._disposableMap.set(\n            this._getIdWithUnitId(unitId, subUnitId, commentId),\n            this._refRangeService.registerRefRange(oldRange, (commandInfo: EffectRefRangeParams) => {\n                const resultRanges = handleCommonRangeChangeWithEffectRefCommandsSkipNoInterests(oldRange, commandInfo, { selectionManagerService: this._selectionManagerService });\n                const resultRange = Array.isArray(resultRanges) ? resultRanges[0] : resultRanges;\n                if (resultRange && resultRange.startColumn === oldRange.startColumn && resultRange.startRow === oldRange.startRow) {\n                    return {\n                        undos: [],\n                        redos: [],\n                    };\n                }\n                const res = this._handleRangeChange(unitId, subUnitId, comment, resultRange, false);\n                return res;\n            }, unitId, subUnitId)\n        );\n    }\n\n    private _watch(unitId: string, subUnitId: string, comment: ISheetThreadComment) {\n        const commentId = comment.id;\n        const oldRange: IRange = {\n            startColumn: comment.column,\n            endColumn: comment.column,\n            startRow: comment.row,\n            endRow: comment.row,\n        };\n        this._watcherMap.set(\n            this._getIdWithUnitId(unitId, subUnitId, commentId),\n            this._refRangeService.watchRange(unitId, subUnitId, oldRange, (before, after) => {\n                const { redos } = this._handleRangeChange(unitId, subUnitId, comment, after, true);\n                sequenceExecuteAsync(redos, this._commandService, { onlyLocal: true });\n            }, true)\n        );\n    }\n\n    private _unwatch(unitId: string, subUnitId: string, commentId: string) {\n        const id = this._getIdWithUnitId(unitId, subUnitId, commentId);\n        this._watcherMap.get(id)?.dispose();\n        this._watcherMap.delete(id);\n    }\n\n    private _unregister(unitId: string, subUnitId: string, commentId: string) {\n        const id = this._getIdWithUnitId(unitId, subUnitId, commentId);\n        this._disposableMap.get(id)?.dispose();\n        this._disposableMap.delete(id);\n    }\n\n    private _initData() {\n        const datas = this._threadCommentModel.getAll();\n\n        for (const data of datas) {\n            for (const thread of data.threads) {\n                const { unitId, subUnitId, root } = thread;\n                const pos = singleReferenceToGrid(root.ref);\n                const sheetComment = {\n                    ...root,\n                    ...pos,\n                };\n                this._register(unitId, subUnitId, sheetComment);\n                this._watch(unitId, subUnitId, sheetComment);\n            }\n        }\n    }\n\n    private _initRefRange() {\n        this.disposeWithMe(\n            this._sheetsThreadCommentModel.commentUpdate$.subscribe((option) => {\n                const { unitId, subUnitId } = option;\n                switch (option.type) {\n                    case 'add': {\n                        if (option.payload.parentId) {\n                            return;\n                        }\n\n                        const comment = {\n                            ...option.payload,\n                            row: option.row,\n                            column: option.column,\n                        };\n\n                        this._register(option.unitId, option.subUnitId, comment);\n                        this._watch(option.unitId, option.subUnitId, comment);\n                        break;\n                    }\n                    case 'delete': {\n                        this._unregister(unitId, subUnitId, option.payload.commentId);\n                        this._unwatch(unitId, subUnitId, option.payload.commentId);\n                        break;\n                    }\n                    case 'updateRef': {\n                        const comment = this._sheetsThreadCommentModel.getComment(unitId, subUnitId, option.payload.commentId);\n                        if (!comment) {\n                            return;\n                        }\n\n                        this._unregister(unitId, subUnitId, option.payload.commentId);\n                        const sheetComment = {\n                            ...comment,\n                            row: option.row,\n                            column: option.column,\n                        };\n                        if (!option.silent) {\n                            this._unwatch(unitId, subUnitId, option.payload.commentId);\n                            this._watch(unitId, subUnitId, sheetComment);\n                        }\n\n                        this._register(option.unitId, option.subUnitId, sheetComment);\n                        break;\n                    }\n                }\n            })\n        );\n\n        this.disposeWithMe(toDisposable(() => {\n            this._disposableMap.forEach((item) => {\n                item.dispose();\n            });\n            this._disposableMap.clear();\n        }));\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const SHEET_THREAD_COMMENT_BASE = 'SHEET_THREAD_COMMENT_BASE_PLUGIN';\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport { DependentOn, ICommandService, Inject, Injector, Plugin, UniverInstanceType } from '@univerjs/core';\nimport { UniverThreadCommentPlugin } from '@univerjs/thread-comment';\nimport { SheetsThreadCommentRefRangeController } from './controllers/sheets-thread-comment-ref-range.controller';\nimport { SheetsThreadCommentModel } from './models/sheets-thread-comment.model';\nimport { SHEET_THREAD_COMMENT_BASE } from './types/const';\n\n@DependentOn(UniverThreadCommentPlugin)\nexport class UniverSheetsThreadCommentPlugin extends Plugin {\n    static override pluginName = SHEET_THREAD_COMMENT_BASE;\n    static override type = UniverInstanceType.UNIVER_SHEET;\n\n    constructor(\n        config: unknown,\n        @Inject(Injector) protected override _injector: Injector,\n        @Inject(ICommandService) protected _commandService: ICommandService\n    ) {\n        super();\n    }\n\n    override onStarting(): void {\n        ([\n            [SheetsThreadCommentModel],\n            [SheetsThreadCommentRefRangeController],\n        ] as Dependency[]).forEach((dep) => {\n            this._injector.add(dep);\n        });\n\n        this._injector.get(SheetsThreadCommentRefRangeController);\n    }\n}\n"],
  "mappings": "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",
  "names": ["unitId", "subUnitId", "locationMap"]
}
