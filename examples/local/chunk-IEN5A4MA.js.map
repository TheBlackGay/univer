{
  "version": 3,
  "sources": ["../../packages/docs-drawing-ui/src/controllers/config.schema.ts", "../../packages/docs-drawing-ui/src/controllers/doc-drawing-notification.controller.ts", "../../packages/docs-drawing-ui/src/services/doc-refresh-drawings.service.ts", "../../packages/docs-drawing-ui/src/commands/commands/update-doc-drawing.command.ts", "../../packages/docs-drawing-ui/src/controllers/doc-drawing-transformer-update.controller.ts", "../../packages/docs-drawing-ui/src/commands/commands/remove-doc-drawing.command.ts", "../../packages/docs-drawing-ui/src/commands/commands/delete-doc-drawing.command.ts", "../../packages/docs-drawing-ui/src/commands/commands/group-doc-drawing.command.ts", "../../packages/docs-drawing-ui/src/commands/commands/insert-doc-drawing.command.ts", "../../packages/docs-drawing-ui/src/commands/commands/set-drawing-arrange.command.ts", "../../packages/docs-drawing-ui/src/commands/commands/ungroup-doc-drawing.command.ts", "../../packages/docs-drawing-ui/src/controllers/render-controllers/doc-drawing-update.render-controller.ts", "../../packages/docs-drawing-ui/src/commands/commands/insert-image.command.ts", "../../packages/docs-drawing-ui/src/commands/commands/move-drawings.command.ts", "../../packages/docs-drawing-ui/src/commands/operations/clear-drawing-transformer.operation.ts", "../../packages/docs-drawing-ui/src/views/doc-image-panel/component-name.ts", "../../packages/docs-drawing-ui/src/commands/operations/open-drawing-panel.operation.ts", "../../packages/docs-drawing-ui/src/commands/operations/edit-doc-drawing.operation.ts", "../../packages/docs-drawing-ui/src/views/doc-image-panel/DocDrawingPanel.tsx", "../../packages/docs-drawing-ui/src/views/doc-image-panel/DocDrawingPosition.tsx", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/docs-drawing-ui/src/views/doc-image-panel/index.module.less", "../../packages/docs-drawing-ui/src/views/doc-image-panel/DocDrawingTextWrap.tsx", "../../packages/docs-drawing-ui/src/views/menu/image.menu.ts", "../../packages/docs-drawing-ui/src/controllers/menu.schema.ts", "../../packages/docs-drawing-ui/src/controllers/shortcuts/drawing.shortcut.ts", "../../packages/docs-drawing-ui/src/controllers/doc-drawing.controller.ts", "../../packages/docs-drawing-ui/src/controllers/doc-float-dom.controller.ts", "../../packages/docs-drawing-ui/src/controllers/drawing-popup-menu.controller.ts", "../../packages/docs-drawing-ui/src/controllers/render-controllers/doc-drawing-transform-update.controller.ts", "../../packages/docs-drawing-ui/src/plugin.ts"],
  "sourcesContent": ["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DOCS_DRAWING_UI_PLUGIN_CONFIG_KEY = 'docs-drawing-ui.config';\n\nexport const configSymbol = Symbol(DOCS_DRAWING_UI_PLUGIN_CONFIG_KEY);\n\nexport interface IUniverDocsDrawingUIConfig {\n}\n\nexport const defaultPluginConfig: IUniverDocsDrawingUIConfig = {};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable ts/no-explicit-any */\n\nimport type { ICommandInfo, IDrawingSearch, JSONXActions, Nullable } from '@univerjs/core';\nimport type { IRichTextEditingMutationParams } from '@univerjs/docs';\nimport type { IDocDrawing } from '@univerjs/docs-drawing';\nimport type { IDrawingJsonUndo1, IDrawingOrderMapParam } from '@univerjs/drawing';\nimport {\n    BlockType,\n    Disposable,\n    ICommandService,\n    IUniverInstanceService,\n    JSONX,\n    RedoCommand,\n    UndoCommand,\n} from '@univerjs/core';\nimport { RichTextEditingMutation } from '@univerjs/docs';\nimport { IDocDrawingService } from '@univerjs/docs-drawing';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { IRenderManagerService } from '@univerjs/engine-render';\n\ninterface IAddOrRemoveDrawing {\n    type: 'add' | 'remove';\n    drawingId: string;\n    drawing?: IDocDrawing;\n}\n\n// Check whether drawings are added or deleted from the mutation and obtain the drawing ID.\n// eslint-disable-next-line complexity\nfunction getAddOrRemoveDrawings(actions: JSONXActions): Nullable<IAddOrRemoveDrawing[]> {\n    if (JSONX.isNoop(actions) || !Array.isArray(actions)) {\n        return null;\n    }\n    const drawingsOp = actions.find((action) => Array.isArray(action) && action?.[0] === 'drawings');\n\n    if (drawingsOp == null || !Array.isArray(drawingsOp) || drawingsOp.length < 3) {\n        return null;\n    }\n\n    if (typeof drawingsOp[1] === 'string' && typeof drawingsOp[2] !== 'object') {\n        return null;\n    }\n\n    if (Array.isArray(drawingsOp[1]) && typeof drawingsOp[1][1] !== 'object') {\n        return null;\n    }\n\n    const drawings: IAddOrRemoveDrawing[] = [];\n\n    if (Array.isArray(drawingsOp?.[1])) {\n        for (const op of drawingsOp) {\n            if (Array.isArray(op)) {\n                drawings.push({\n                    type: (op?.[1] as any)?.i ? 'add' : 'remove',\n                    drawingId: op?.[0] as string,\n                    drawing: (op?.[1] as any)?.i,\n                });\n            }\n        }\n    } else {\n        drawings.push({\n            type: (drawingsOp[2] as any)?.i ? 'add' : 'remove',\n            drawingId: drawingsOp[1] as string,\n            drawing: (drawingsOp[2] as any)?.i,\n        });\n    }\n\n    return drawings;\n}\n\n// ReOrderedActions data like bellow:\n// [\n//     \"drawingsOrder\",\n//     [  4,\n//         {\n//             \"d\": 0\n//         }\n//     ],\n//     [  5,\n//         {\n//             \"p\": 0\n//         }\n//     ]\n// ]\nfunction getReOrderedDrawings(actions: JSONXActions): number[] {\n    if (!Array.isArray(actions) || actions.length < 3 || actions[0] !== 'drawingsOrder') {\n        return [];\n    }\n\n    const drawingIndexes: number[] = [];\n\n    for (let i = 1; i < actions.length; i++) {\n        const action = actions[i];\n        if (Array.isArray(action) && typeof action[0] === 'number' && typeof action[1] === 'object') {\n            drawingIndexes.push(action[0]);\n        } else {\n            drawingIndexes.length = 0;\n            break;\n        }\n    }\n\n    return drawingIndexes;\n}\n\nexport class DocDrawingAddRemoveController extends Disposable {\n    constructor(\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @ICommandService private readonly _commandService: ICommandService,\n        @IDrawingManagerService private readonly _drawingManagerService: IDrawingManagerService,\n        @IDocDrawingService private readonly _docDrawingService: IDocDrawingService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService\n    ) {\n        super();\n\n        this._initialize();\n    }\n\n    private _initialize() {\n        this._commandExecutedListener();\n    }\n\n    private _commandExecutedListener() {\n        this.disposeWithMe(\n            this._commandService.beforeCommandExecuted((command: ICommandInfo) => {\n                if (command.id !== RichTextEditingMutation.id) {\n                    return;\n                }\n\n                const params = command.params as IRichTextEditingMutationParams;\n                const { unitId, actions } = params;\n                const documentDataModel = this._univerInstanceService.getUniverDocInstance(unitId);\n                const customBlocks = documentDataModel?.getBody()?.customBlocks ?? [];\n\n                const addOrRemoveDrawings = getAddOrRemoveDrawings(actions);\n                if (addOrRemoveDrawings != null) {\n                    for (const { type, drawingId, drawing } of addOrRemoveDrawings) {\n                        const customBlock = customBlocks.find((customBlock) => customBlock.blockId === drawingId);\n\n                        // @yuhong, Only handle the custom block drawings. YOU need handle custom chart in your plugin.\n                        if (customBlock?.blockType === BlockType.CUSTOM) {\n                            continue;\n                        }\n\n                        if (type === 'add') {\n                            this._addDrawings(unitId, [drawing!]);\n                        } else {\n                            this._removeDrawings(unitId, [drawingId]);\n                        }\n                    }\n                }\n            })\n        );\n\n        this.disposeWithMe(\n            this._commandService.onCommandExecuted((command: ICommandInfo) => {\n                if (command.id !== RichTextEditingMutation.id) {\n                    return;\n                }\n\n                const params = command.params as IRichTextEditingMutationParams;\n                const { unitId, actions } = params;\n                const reOrderedDrawings = getReOrderedDrawings(actions);\n\n                if (reOrderedDrawings.length > 0) {\n                    this._updateDrawingsOrder(unitId);\n                }\n            })\n        );\n\n        this.disposeWithMe(\n            this._commandService.onCommandExecuted((command: ICommandInfo) => {\n                if (command.id !== UndoCommand.id && command.id !== RedoCommand.id) {\n                    return;\n                }\n\n                const unitId = this._univerInstanceService.getCurrentUniverDocInstance()?.getUnitId();\n                const focusedDrawings = this._drawingManagerService.getFocusDrawings();\n\n                if (unitId == null || focusedDrawings.length === 0) {\n                    return;\n                }\n\n                const renderObject = this._renderManagerService.getRenderById(unitId);\n                const scene = renderObject?.scene;\n                if (scene == null) {\n                    return false;\n                }\n                const transformer = scene.getTransformerByCreate();\n\n                transformer.refreshControls();\n            })\n        );\n    }\n\n    private _addDrawings(unitId: string, drawings: IDocDrawing[]) {\n        const drawingManagerService = this._drawingManagerService;\n        const docDrawingService = this._docDrawingService;\n\n        const jsonOp = this._docDrawingService.getBatchAddOp(drawings) as IDrawingJsonUndo1;\n\n        const { subUnitId, redo: op, objects } = jsonOp;\n\n        drawingManagerService.applyJson1(unitId, subUnitId, op);\n        docDrawingService.applyJson1(unitId, subUnitId, op);\n\n        drawingManagerService.addNotification(objects as IDrawingSearch[]);\n        docDrawingService.addNotification(objects as IDrawingSearch[]);\n    }\n\n    private _removeDrawings(unitId: string, drawingIds: string[]) {\n        const drawingManagerService = this._drawingManagerService;\n        const docDrawingService = this._docDrawingService;\n\n        const jsonOp = this._docDrawingService.getBatchRemoveOp(drawingIds.map((drawingId) => {\n            return {\n                unitId,\n                subUnitId: unitId,\n                drawingId,\n            };\n        }) as IDrawingSearch[]) as IDrawingJsonUndo1;\n\n        const { subUnitId, redo: op, objects } = jsonOp;\n\n        drawingManagerService.applyJson1(unitId, subUnitId, op);\n        docDrawingService.applyJson1(unitId, subUnitId, op);\n\n        drawingManagerService.removeNotification(objects as IDrawingSearch[]);\n        docDrawingService.removeNotification(objects as IDrawingSearch[]);\n    }\n\n    private _updateDrawingsOrder(unitId: string) {\n        const documentDataModel = this._univerInstanceService.getUniverDocInstance(unitId);\n\n        if (documentDataModel == null) {\n            return;\n        }\n\n        const drawingsOrder = documentDataModel.getSnapshot().drawingsOrder;\n\n        if (drawingsOrder == null) {\n            return;\n        }\n\n        const drawingManagerService = this._drawingManagerService;\n        const docDrawingService = this._docDrawingService;\n\n        drawingManagerService.setDrawingOrder(unitId, unitId, drawingsOrder);\n        docDrawingService.setDrawingOrder(unitId, unitId, drawingsOrder);\n\n        // FIXME: @Jocs, Only need to update the affected drawings.\n        const objects: IDrawingOrderMapParam = {\n            unitId,\n            subUnitId: unitId,\n            drawingIds: drawingsOrder,\n        };\n\n        drawingManagerService.orderNotification(objects);\n        docDrawingService.orderNotification(objects);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Nullable } from '@univerjs/core';\nimport type { DocumentSkeleton } from '@univerjs/engine-render';\nimport { BehaviorSubject } from 'rxjs';\n\nexport class DocRefreshDrawingsService {\n    private readonly _refreshDrawings$ = new BehaviorSubject<Nullable<DocumentSkeleton>>(null);\n    readonly refreshDrawings$ = this._refreshDrawings$.asObservable();\n\n    refreshDrawings(skeleton: Nullable<DocumentSkeleton>) {\n        this._refreshDrawings$.next(skeleton);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DocumentDataModel, IAccessor, ICommand, IDocDrawingBase, IDocDrawingPosition, IMutationInfo, IObjectPositionH, IObjectPositionV, ISize, JSONXActions, WrapTextType } from '@univerjs/core';\nimport type { IRichTextEditingMutationParams } from '@univerjs/docs';\nimport type { IDocDrawing } from '@univerjs/docs-drawing';\nimport {\n    BooleanNumber,\n    CommandType,\n    ICommandService,\n    IUniverInstanceService,\n    JSONX,\n    ObjectRelativeFromH,\n    ObjectRelativeFromV,\n    PositionedObjectLayoutType,\n    TextX,\n    TextXActionType,\n    Tools,\n} from '@univerjs/core';\nimport { DocSkeletonManagerService, RichTextEditingMutation } from '@univerjs/docs';\nimport { DocSelectionRenderService, getRichTextEditPath } from '@univerjs/docs-ui';\nimport { DocumentEditArea, IRenderManagerService } from '@univerjs/engine-render';\nimport { DocRefreshDrawingsService } from '../../services/doc-refresh-drawings.service';\n\nexport enum TextWrappingStyle {\n    INLINE = 'inline',\n    BEHIND_TEXT = 'behindText',\n    IN_FRONT_OF_TEXT = 'inFrontOfText',\n    WRAP_SQUARE = 'wrapSquare',\n    WRAP_TOP_AND_BOTTOM = 'wrapTopAndBottom',\n}\n\nconst WRAPPING_STYLE_TO_LAYOUT_TYPE = {\n    [TextWrappingStyle.INLINE]: PositionedObjectLayoutType.INLINE,\n    [TextWrappingStyle.WRAP_SQUARE]: PositionedObjectLayoutType.WRAP_SQUARE,\n    [TextWrappingStyle.WRAP_TOP_AND_BOTTOM]: PositionedObjectLayoutType.WRAP_TOP_AND_BOTTOM,\n    [TextWrappingStyle.IN_FRONT_OF_TEXT]: PositionedObjectLayoutType.WRAP_NONE,\n    [TextWrappingStyle.BEHIND_TEXT]: PositionedObjectLayoutType.WRAP_NONE,\n};\n\n// eslint-disable-next-line max-lines-per-function\nfunction getDeleteAndInsertCustomBlockActions(\n    segmentId: string,\n    oldSegmentId: string,\n    segmentPage: number,\n    offset: number,\n    drawingId: string,\n    documentDataModel: DocumentDataModel,\n    docSelectionRenderManager: DocSelectionRenderService\n) {\n    const textX = new TextX();\n    const jsonX = JSONX.getInstance();\n    const rawActions: JSONXActions = [];\n\n    const oldBody = documentDataModel.getSelfOrHeaderFooterModel(oldSegmentId).getBody();\n    const body = documentDataModel.getSelfOrHeaderFooterModel(segmentId).getBody();\n\n    if (oldBody == null || body == null) {\n        return;\n    }\n\n    const oldOffset = oldBody.customBlocks?.find((block) => block.blockId === drawingId)?.startIndex;\n\n    if (oldOffset == null) {\n        return;\n    }\n\n    // Can not put image after the last \\r.\n    offset = Math.min(body.dataStream.length - 2, offset);\n\n    if (segmentId === oldSegmentId) {\n        if (offset < oldOffset) {\n            // Insert first.\n            if (offset > 0) {\n                textX.push({\n                    t: TextXActionType.RETAIN,\n                    len: offset,\n                });\n            }\n\n            textX.push({\n                t: TextXActionType.INSERT,\n                body: {\n                    dataStream: '\\b',\n                    customBlocks: [{\n                        startIndex: 0,\n                        blockId: drawingId,\n                    }],\n                },\n                len: 1,\n            });\n\n            textX.push({\n                t: TextXActionType.RETAIN,\n                len: oldOffset - offset,\n            });\n\n            textX.push({\n                t: TextXActionType.DELETE,\n                len: 1,\n            });\n        } else {\n            // Delete first.\n            if (oldOffset > 0) {\n                textX.push({\n                    t: TextXActionType.RETAIN,\n                    len: oldOffset,\n                });\n            }\n\n            textX.push({\n                t: TextXActionType.DELETE,\n                len: 1,\n            });\n\n            if (offset - oldOffset - 1 > 0) {\n                textX.push({\n                    t: TextXActionType.RETAIN,\n                    len: offset - oldOffset - 1,\n                });\n            }\n\n            textX.push({\n                t: TextXActionType.INSERT,\n                body: {\n                    dataStream: '\\b',\n                    customBlocks: [{\n                        startIndex: 0,\n                        blockId: drawingId,\n                    }],\n                },\n                len: 1,\n            });\n        }\n\n        if (offset !== oldOffset) {\n            const path = getRichTextEditPath(documentDataModel, oldSegmentId);\n            const action = jsonX.editOp(textX.serialize(), path);\n            rawActions.push(action!);\n        }\n    } else {\n        if (oldOffset > 0) {\n            textX.push({\n                t: TextXActionType.RETAIN,\n                len: oldOffset,\n            });\n        }\n\n        textX.push({\n            t: TextXActionType.DELETE,\n            len: 1,\n        });\n\n        let path = getRichTextEditPath(documentDataModel, oldSegmentId);\n        let action = jsonX.editOp(textX.serialize(), path);\n        rawActions.push(action!);\n\n        textX.empty();\n\n        if (offset > 0) {\n            textX.push({\n                t: TextXActionType.RETAIN,\n                len: offset,\n            });\n        }\n\n        textX.push({\n            t: TextXActionType.INSERT,\n            body: {\n                dataStream: '\\b',\n                customBlocks: [{\n                    startIndex: 0,\n                    blockId: drawingId,\n                }],\n            },\n            len: 1,\n        });\n\n        path = getRichTextEditPath(documentDataModel, segmentId);\n        action = jsonX.editOp(textX.serialize(), path);\n        rawActions.push(action!);\n\n        docSelectionRenderManager.setSegment(segmentId);\n        docSelectionRenderManager.setSegmentPage(segmentPage);\n    }\n\n    return rawActions;\n}\n\ninterface IUpdateDocDrawingWrappingStyleParams {\n    unitId: string;\n    subUnitId: string;\n    drawings: IDocDrawing[];\n    wrappingStyle: TextWrappingStyle;\n}\n\n/**\n * The command to update drawing wrapping style.\n */\nexport const UpdateDocDrawingWrappingStyleCommand: ICommand = {\n    id: 'doc.command.update-doc-drawing-wrapping-style',\n\n    type: CommandType.COMMAND,\n\n    // eslint-disable-next-line max-lines-per-function, complexity\n    handler: (accessor: IAccessor, params?: IUpdateDocDrawingWrappingStyleParams) => {\n        if (params == null) {\n            return false;\n        }\n\n        const { drawings, wrappingStyle, unitId } = params;\n\n        const commandService = accessor.get(ICommandService);\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        const renderManagerService = accessor.get(IRenderManagerService);\n\n        const renderObject = renderManagerService.getRenderById(unitId);\n        const skeletonData = renderObject?.with(DocSkeletonManagerService)\n            .getSkeleton()\n            .getSkeletonData();\n        const viewModel = renderObject?.with(DocSkeletonManagerService).getViewModel();\n        const scene = renderObject?.scene;\n        const documentDataModel = univerInstanceService.getCurrentUniverDocInstance();\n\n        if (documentDataModel == null || skeletonData == null || scene == null || viewModel == null) {\n            return false;\n        }\n\n        const editArea = viewModel.getEditArea();\n        const transformer = scene.getTransformerByCreate();\n\n        const { pages, skeHeaders, skeFooters } = skeletonData;\n\n        const jsonX = JSONX.getInstance();\n        const rawActions: JSONXActions = [];\n\n        const { drawings: oldDrawings = {} } = documentDataModel.getSnapshot();\n\n        // Update drawing layoutType.\n        for (const drawing of drawings) {\n            const { drawingId } = drawing;\n\n            // Update layoutType.\n            const oldLayoutType = oldDrawings[drawingId].layoutType;\n            const newLayoutType = WRAPPING_STYLE_TO_LAYOUT_TYPE[wrappingStyle];\n\n            if (oldLayoutType !== newLayoutType) {\n                const updateLayoutTypeAction = jsonX.replaceOp(['drawings', drawingId, 'layoutType'], oldLayoutType, newLayoutType);\n\n                rawActions.push(updateLayoutTypeAction!);\n            }\n\n            // Update behindDoc if layoutType is WRAP_NONE.\n            if (wrappingStyle === TextWrappingStyle.BEHIND_TEXT || wrappingStyle === TextWrappingStyle.IN_FRONT_OF_TEXT) {\n                const oldBehindDoc = oldDrawings[drawingId].behindDoc;\n                const newBehindDoc = wrappingStyle === TextWrappingStyle.BEHIND_TEXT ? BooleanNumber.TRUE : BooleanNumber.FALSE;\n\n                if (oldBehindDoc !== newBehindDoc) {\n                    const updateBehindDocAction = jsonX.replaceOp(['drawings', drawingId, 'behindDoc'], oldBehindDoc, newBehindDoc);\n\n                    rawActions.push(updateBehindDocAction!);\n                }\n            }\n\n            if (wrappingStyle === TextWrappingStyle.INLINE) {\n                continue;\n            }\n\n            // Update positionH and positionV if layoutType is not inline.\n            let skeDrawing = null;\n            let pageMarginTop = 0;\n            let pageMarginLeft = 0;\n            for (const page of pages) {\n                const { headerId, footerId, marginTop, marginLeft, marginBottom, pageWidth, pageHeight } = page;\n\n                switch (editArea) {\n                    case DocumentEditArea.HEADER: {\n                        const headerSke = skeHeaders.get(headerId)?.get(pageWidth);\n\n                        if (headerSke != null && headerSke.skeDrawings.has(drawingId)) {\n                            skeDrawing = headerSke.skeDrawings.get(drawingId);\n                            pageMarginTop = headerSke.marginTop;\n                            pageMarginLeft = marginLeft;\n                        }\n\n                        break;\n                    }\n\n                    case DocumentEditArea.FOOTER: {\n                        const footerSke = skeFooters.get(footerId)?.get(pageWidth);\n                        if (footerSke != null && footerSke.skeDrawings.has(drawingId)) {\n                            skeDrawing = footerSke.skeDrawings.get(drawingId);\n                            pageMarginTop = pageHeight - marginBottom + footerSke.marginTop;\n                            pageMarginLeft = marginLeft;\n                        }\n                        break;\n                    }\n\n                    case DocumentEditArea.BODY: {\n                        if (page.skeDrawings.has(drawingId)) {\n                            skeDrawing = page.skeDrawings.get(drawingId);\n                            pageMarginTop = marginTop;\n                            pageMarginLeft = marginLeft;\n                        }\n                        break;\n                    }\n                }\n\n                if (skeDrawing != null) {\n                    break;\n                }\n            }\n\n            if (skeDrawing != null) {\n                const { aTop, aLeft } = skeDrawing;\n                const oldPositionH = oldDrawings[drawingId].docTransform.positionH;\n                let posOffsetH = aLeft;\n\n                if (oldPositionH.relativeFrom === ObjectRelativeFromH.MARGIN) {\n                    posOffsetH -= pageMarginLeft;\n                } else if (oldPositionH.relativeFrom === ObjectRelativeFromH.COLUMN) {\n                    posOffsetH -= skeDrawing.columnLeft;\n                }\n\n                const newPositionH = {\n                    relativeFrom: oldPositionH.relativeFrom,\n                    posOffset: posOffsetH,\n                };\n\n                if (oldPositionH.posOffset !== newPositionH.posOffset) {\n                    const action = jsonX.replaceOp(['drawings', drawingId, 'docTransform', 'positionH'], oldPositionH, newPositionH);\n\n                    rawActions.push(action!);\n                }\n\n                const oldPositionV = oldDrawings[drawingId].docTransform.positionV;\n                let posOffsetV = aTop;\n\n                if (oldPositionV.relativeFrom === ObjectRelativeFromV.PAGE) {\n                    posOffsetV += pageMarginTop;\n                } else if (oldPositionV.relativeFrom === ObjectRelativeFromV.LINE) {\n                    posOffsetV -= skeDrawing.lineTop;\n                } else if (oldPositionV.relativeFrom === ObjectRelativeFromV.PARAGRAPH) {\n                    posOffsetV -= skeDrawing.blockAnchorTop;\n                }\n\n                const newPositionV = {\n                    relativeFrom: oldPositionV.relativeFrom,\n                    posOffset: posOffsetV,\n                };\n\n                if (oldPositionV.posOffset !== newPositionV.posOffset) {\n                    const action = jsonX.replaceOp(['drawings', drawingId, 'docTransform', 'positionV'], oldPositionV, newPositionV);\n\n                    rawActions.push(action!);\n                }\n            }\n        }\n\n        const doMutation: IMutationInfo<IRichTextEditingMutationParams> = {\n            id: RichTextEditingMutation.id,\n            params: {\n                unitId,\n                actions: [],\n                textRanges: null,\n            },\n        };\n\n        doMutation.params.actions = rawActions.reduce((acc, cur) => {\n            return JSONX.compose(acc, cur as JSONXActions);\n        }, null as JSONXActions);\n\n        const result = commandService.syncExecuteCommand<\n            IRichTextEditingMutationParams,\n            IRichTextEditingMutationParams\n        >(doMutation.id, doMutation.params);\n\n        transformer.refreshControls();\n\n        return Boolean(result);\n    },\n};\n\ninterface IDist {\n    distT: number;\n    distB: number;\n    distL: number;\n    distR: number;\n}\n\ninterface IUpdateDocDrawingDistanceParams {\n    unitId: string;\n    subUnitId: string;\n    drawings: IDocDrawing[];\n    dist: IDist;\n}\n\n/**\n * The command to update drawing wrap text.\n */\nexport const UpdateDocDrawingDistanceCommand: ICommand = {\n    id: 'doc.command.update-doc-drawing-distance',\n\n    type: CommandType.COMMAND,\n\n    handler: (accessor: IAccessor, params?: IUpdateDocDrawingDistanceParams) => {\n        if (params == null) {\n            return false;\n        }\n\n        const commandService = accessor.get(ICommandService);\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n\n        const documentDataModel = univerInstanceService.getCurrentUniverDocInstance();\n        if (documentDataModel == null) {\n            return false;\n        }\n\n        const { drawings, dist, unitId } = params;\n\n        const jsonX = JSONX.getInstance();\n        const rawActions: JSONXActions = [];\n\n        const { drawings: oldDrawings = {} } = documentDataModel.getSnapshot();\n\n        for (const drawing of drawings) {\n            const { drawingId } = drawing;\n\n            for (const [key, value] of Object.entries(dist)) {\n                const oldValue = oldDrawings[drawingId][key as keyof IDist];\n\n                if (oldValue !== value) {\n                    const action = jsonX.replaceOp(['drawings', drawingId, key], oldValue, value);\n\n                    rawActions.push(action!);\n                }\n            }\n        }\n\n        const doMutation: IMutationInfo<IRichTextEditingMutationParams> = {\n            id: RichTextEditingMutation.id,\n            params: {\n                unitId,\n                actions: [],\n                textRanges: null,\n            },\n        };\n\n        doMutation.params.actions = rawActions.reduce((acc, cur) => {\n            return JSONX.compose(acc, cur as JSONXActions);\n        }, null as JSONXActions);\n\n        const result = commandService.syncExecuteCommand<\n            IRichTextEditingMutationParams,\n            IRichTextEditingMutationParams\n        >(doMutation.id, doMutation.params);\n\n        return Boolean(result);\n    },\n};\n\ninterface IUpdateDocDrawingWrapTextParams {\n    unitId: string;\n    subUnitId: string;\n    drawings: IDocDrawing[];\n    wrapText: WrapTextType;\n}\n\n/**\n * The command to update drawing wrap text.\n */\nexport const UpdateDocDrawingWrapTextCommand: ICommand = {\n    id: 'doc.command.update-doc-drawing-wrap-text',\n\n    type: CommandType.COMMAND,\n\n    handler: (accessor: IAccessor, params?: IUpdateDocDrawingWrapTextParams) => {\n        if (params == null) {\n            return false;\n        }\n\n        const commandService = accessor.get(ICommandService);\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n\n        const documentDataModel = univerInstanceService.getCurrentUniverDocInstance();\n        if (documentDataModel == null) {\n            return false;\n        }\n\n        const { drawings, wrapText, unitId } = params;\n\n        const jsonX = JSONX.getInstance();\n        const rawActions: JSONXActions = [];\n\n        const { drawings: oldDrawings = {} } = documentDataModel.getSnapshot();\n\n        // Update drawing layoutType.\n        for (const drawing of drawings) {\n            const { drawingId } = drawing;\n\n            const oldWrapText = oldDrawings[drawingId].wrapText;\n\n            if (oldWrapText !== wrapText) {\n                const action = jsonX.replaceOp(['drawings', drawingId, 'wrapText'], oldWrapText, wrapText);\n\n                rawActions.push(action!);\n            }\n        }\n\n        const doMutation: IMutationInfo<IRichTextEditingMutationParams> = {\n            id: RichTextEditingMutation.id,\n            params: {\n                unitId,\n                actions: [],\n                textRanges: null,\n            },\n        };\n\n        doMutation.params.actions = rawActions.reduce((acc, cur) => {\n            return JSONX.compose(acc, cur as JSONXActions);\n        }, null as JSONXActions);\n\n        const result = commandService.syncExecuteCommand<\n            IRichTextEditingMutationParams,\n            IRichTextEditingMutationParams\n        >(doMutation.id, doMutation.params);\n\n        return Boolean(result);\n    },\n};\n\nexport interface IDrawingDocTransform {\n    drawingId: string;\n    key: 'size' | 'angle' | 'positionH' | 'positionV';\n    value: ISize | number | IObjectPositionH | IObjectPositionV;\n}\n\nexport interface IUpdateDrawingDocTransformParams {\n    unitId: string;\n    subUnitId: string;\n    drawings: IDrawingDocTransform[];\n}\n\n/**\n * The command to update drawing position.\n */\nexport const UpdateDrawingDocTransformCommand: ICommand = {\n    id: 'doc.command.update-drawing-doc-transform',\n\n    type: CommandType.COMMAND,\n\n    handler: (accessor: IAccessor, params?: IUpdateDrawingDocTransformParams) => {\n        if (params == null) {\n            return false;\n        }\n\n        const commandService = accessor.get(ICommandService);\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        const renderManagerService = accessor.get(IRenderManagerService);\n\n        const renderObject = renderManagerService.getRenderById(params.unitId);\n        const scene = renderObject?.scene;\n        if (scene == null) {\n            return false;\n        }\n        const transformer = scene.getTransformerByCreate();\n\n        const documentDataModel = univerInstanceService.getCurrentUniverDocInstance();\n        if (documentDataModel == null) {\n            return false;\n        }\n\n        const { drawings, unitId } = params;\n\n        const jsonX = JSONX.getInstance();\n        const rawActions: JSONXActions = [];\n\n        const { drawings: oldDrawings = {} } = documentDataModel.getSnapshot();\n\n        // Update drawing layoutType.\n        for (const drawing of drawings) {\n            const { drawingId, key, value } = drawing;\n\n            const oldValue = oldDrawings[drawingId].docTransform[key];\n\n            if (!Tools.diffValue(oldValue, value)) {\n                const action = jsonX.replaceOp(['drawings', drawingId, 'docTransform', key], oldValue, value);\n\n                rawActions.push(action!);\n            }\n        }\n\n        const doMutation: IMutationInfo<IRichTextEditingMutationParams> = {\n            id: RichTextEditingMutation.id,\n            params: {\n                unitId,\n                actions: [],\n                textRanges: null,\n                debounce: true,\n            },\n        };\n\n        doMutation.params.actions = rawActions.reduce((acc, cur) => {\n            return JSONX.compose(acc, cur as JSONXActions);\n        }, null as JSONXActions);\n\n        const result = commandService.syncExecuteCommand<\n            IRichTextEditingMutationParams,\n            IRichTextEditingMutationParams\n        >(doMutation.id, doMutation.params);\n\n        transformer.refreshControls();\n\n        return Boolean(result);\n    },\n};\n\nexport interface IMoveInlineDrawingParams {\n    unitId: string;\n    subUnitId: string;\n    drawing: IDocDrawingBase;\n    offset: number;\n    segmentId: string;\n    segmentPage: number;\n    needRefreshDrawings?: boolean;\n}\n\n/**\n * The command to move inline drawing.\n */\nexport const IMoveInlineDrawingCommand: ICommand = {\n    id: 'doc.command.move-inline-drawing',\n\n    type: CommandType.COMMAND,\n\n    handler: (accessor: IAccessor, params: IMoveInlineDrawingParams) => {\n        if (params == null) {\n            return false;\n        }\n\n        const renderManagerService = accessor.get(IRenderManagerService);\n        const docSelectionRenderService = renderManagerService.getRenderById(params.unitId)?.with(DocSelectionRenderService);\n\n        const docRefreshDrawingsService = accessor.get(DocRefreshDrawingsService);\n        const renderObject = renderManagerService.getRenderById(params.unitId);\n        const scene = renderObject?.scene;\n        const skeleton = renderObject?.with(DocSkeletonManagerService).getSkeleton();\n        if (scene == null || docSelectionRenderService == null) {\n            return false;\n        }\n        const transformer = scene.getTransformerByCreate();\n\n        const commandService = accessor.get(ICommandService);\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n\n        const documentDataModel = univerInstanceService.getCurrentUniverDocInstance();\n        if (documentDataModel == null) {\n            return false;\n        }\n\n        const { drawing, unitId, offset, segmentId: newSegmentId, segmentPage, needRefreshDrawings } = params;\n\n        // Need to refresh drawings if not find the anchor position.\n        if (needRefreshDrawings) {\n            docRefreshDrawingsService.refreshDrawings(skeleton);\n            transformer.refreshControls();\n            return true;\n        }\n\n        const rawActions: JSONXActions = [];\n\n        const { drawingId } = drawing;\n        const segmentId = docSelectionRenderService.getSegment() ?? '';\n\n        const actions = getDeleteAndInsertCustomBlockActions(\n            newSegmentId,\n            segmentId,\n            segmentPage,\n            offset,\n            drawingId,\n            documentDataModel,\n            docSelectionRenderService\n        );\n\n        if (actions == null || actions.length === 0) {\n            docRefreshDrawingsService.refreshDrawings(skeleton);\n            transformer.refreshControls();\n            return false;\n        }\n\n        rawActions.push(...actions);\n\n        const doMutation: IMutationInfo<IRichTextEditingMutationParams> = {\n            id: RichTextEditingMutation.id,\n            params: {\n                unitId,\n                actions: [],\n                textRanges: null,\n            },\n        };\n\n        doMutation.params.actions = rawActions.reduce((acc, cur) => {\n            return JSONX.compose(acc, cur as JSONXActions);\n        }, null as JSONXActions);\n\n        const result = commandService.syncExecuteCommand<\n            IRichTextEditingMutationParams,\n            IRichTextEditingMutationParams\n        >(doMutation.id, doMutation.params);\n\n        transformer.refreshControls();\n\n        return Boolean(result);\n    },\n};\n\nexport interface ITransformNonInlineDrawingParams {\n    unitId: string;\n    subUnitId: string;\n    drawing: IDocDrawingBase;\n    offset: number;\n    docTransform: IDocDrawingPosition;\n    segmentId: string;\n    segmentPage: number;\n}\n\n/**\n * The command to transform non-inline drawing.\n */\nexport const ITransformNonInlineDrawingCommand: ICommand = {\n    id: 'doc.command.transform-non-inline-drawing',\n\n    type: CommandType.COMMAND,\n\n    // eslint-disable-next-line max-lines-per-function\n    handler: (accessor: IAccessor, params?: ITransformNonInlineDrawingParams) => {\n        if (params == null) {\n            return false;\n        }\n\n        const renderManagerService = accessor.get(IRenderManagerService);\n\n        const docSelectionRenderService = renderManagerService.getRenderById(params.unitId)?.with(DocSelectionRenderService);\n\n        const renderObject = renderManagerService.getRenderById(params.unitId);\n        const scene = renderObject?.scene;\n        if (scene == null || docSelectionRenderService == null) {\n            return false;\n        }\n        const transformer = scene.getTransformerByCreate();\n\n        const commandService = accessor.get(ICommandService);\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n\n        const documentDataModel = univerInstanceService.getCurrentUniverDocInstance();\n        if (documentDataModel == null) {\n            return false;\n        }\n\n        const { drawing, unitId, offset, docTransform, segmentId: newSegmentId, segmentPage } = params;\n        const rawActions: JSONXActions = [];\n\n        const { drawingId } = drawing;\n\n        const segmentId = docSelectionRenderService.getSegment() ?? '';\n\n        const actions = getDeleteAndInsertCustomBlockActions(\n            newSegmentId,\n            segmentId,\n            segmentPage,\n            offset,\n            drawingId,\n            documentDataModel,\n            docSelectionRenderService\n        );\n\n        if (actions == null) {\n            return false;\n        }\n\n        if (actions.length > 0) {\n            rawActions.push(...actions);\n        }\n\n        const jsonX = JSONX.getInstance();\n\n        const { drawings: oldDrawings = {} } = documentDataModel.getSnapshot();\n        const oldDocTransform = oldDrawings[drawingId].docTransform;\n        const { positionH: oldPositionH, positionV: oldPositionV, size: oldSize, angle: oldAngle } = oldDocTransform;\n\n        if (!Tools.diffValue(oldPositionH, docTransform.positionH)) {\n            const updateAction = jsonX.replaceOp(['drawings', drawingId, 'docTransform', 'positionH'], oldPositionH, docTransform.positionH);\n\n            rawActions.push(updateAction!);\n        }\n\n        if (!Tools.diffValue(oldPositionV, docTransform.positionV)) {\n            const updateAction = jsonX.replaceOp(['drawings', drawingId, 'docTransform', 'positionV'], oldPositionV, docTransform.positionV);\n\n            rawActions.push(updateAction!);\n        }\n\n        if (!Tools.diffValue(oldSize, docTransform.size)) {\n            const updateAction = jsonX.replaceOp(['drawings', drawingId, 'docTransform', 'size'], oldSize, docTransform.size);\n\n            rawActions.push(updateAction!);\n        }\n\n        if (!Tools.diffValue(oldAngle, docTransform.angle)) {\n            const updateAction = jsonX.replaceOp(['drawings', drawingId, 'docTransform', 'angle'], oldAngle, docTransform.angle);\n\n            rawActions.push(updateAction!);\n        }\n\n        const doMutation: IMutationInfo<IRichTextEditingMutationParams> = {\n            id: RichTextEditingMutation.id,\n            params: {\n                unitId,\n                actions: [],\n                textRanges: null,\n                debounce: true,\n            },\n        };\n\n        doMutation.params.actions = rawActions.reduce((acc, cur) => {\n            return JSONX.compose(acc, cur as JSONXActions);\n        }, null as JSONXActions);\n\n        const result = commandService.syncExecuteCommand<\n            IRichTextEditingMutationParams,\n            IRichTextEditingMutationParams\n        >(doMutation.id, doMutation.params);\n\n        transformer.refreshControls();\n\n        return Boolean(result);\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDocDrawingBase, IDocDrawingPosition, Nullable } from '@univerjs/core';\nimport type { BaseObject, Documents, IDocumentSkeletonGlyph, IDocumentSkeletonPage, Image, INodeSearch, IPoint, Viewport } from '@univerjs/engine-render';\nimport type { IDrawingDocTransform } from '../commands/commands/update-doc-drawing.command';\nimport {\n    BooleanNumber,\n    COLORS,\n    Disposable,\n    ICommandService,\n    IUniverInstanceService,\n    ObjectRelativeFromH,\n    ObjectRelativeFromV,\n    PositionedObjectLayoutType,\n    throttle,\n    toDisposable,\n    Tools,\n} from '@univerjs/core';\nimport { DocSkeletonManagerService } from '@univerjs/docs';\nimport { DocSelectionRenderService, getAnchorBounding, getDocObject, getOneTextSelectionRange, NodePositionConvertToCursor, TEXT_RANGE_LAYER_INDEX } from '@univerjs/docs-ui';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { DocumentSkeletonPageType, getColor, IRenderManagerService, Liquid, PageLayoutType, Rect, Vector2 } from '@univerjs/engine-render';\nimport { IMoveInlineDrawingCommand, ITransformNonInlineDrawingCommand, UpdateDrawingDocTransformCommand } from '../commands/commands/update-doc-drawing.command';\n\nconst INLINE_DRAWING_ANCHOR_KEY_PREFIX = '__InlineDrawingAnchor__';\n\ninterface IDrawingCache {\n    drawing: IDocDrawingBase;\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n    angle: number;\n}\n\ninterface IDrawingAnchor {\n    offset: number;\n    segmentId: string;\n    segmentPage: number;\n    docTransform?: IDocDrawingPosition;\n    contentBoxPointGroup?: IPoint[][];\n}\n\nfunction isInTableCell(nodePosition: INodeSearch) {\n    const { path } = nodePosition;\n\n    return path.some((p) => p === 'cells');\n}\n\n// Listen doc drawing transformer change, and update drawing data.\nexport class DocDrawingTransformerController extends Disposable {\n    private _liquid = new Liquid();\n    private _listenerOnImageMap = new Set();\n    // Use to cache the drawings is under transforming or scaling.\n    private _transformerCache: Map<string, IDrawingCache> = new Map();\n    private _anchorShape: Nullable<Rect>;\n\n    constructor(\n        @ICommandService private readonly _commandService: ICommandService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @IDrawingManagerService private readonly _drawingManagerService: IDrawingManagerService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService\n    ) {\n        super();\n\n        this._init();\n    }\n\n    private _init(): void {\n        this._listenDrawingFocus();\n    }\n\n    private _listenDrawingFocus(): void {\n        this.disposeWithMe(\n            this._drawingManagerService.add$.subscribe((drawingParams) => {\n                if (drawingParams.length === 0) {\n                    return;\n                }\n\n                for (const drawingParam of drawingParams) {\n                    const { unitId } = drawingParam;\n\n                    if (!this._listenerOnImageMap.has(unitId)) {\n                        this._listenTransformerChange(unitId);\n                        this._listenerOnImageMap.add(unitId);\n                    }\n                }\n            })\n        );\n    }\n\n    // Only handle one drawing transformer change.\n\n    // eslint-disable-next-line max-lines-per-function\n    private _listenTransformerChange(unitId: string): void {\n        const transformer = this._getSceneAndTransformerByDrawingSearch(unitId)?.transformer;\n\n        if (transformer == null) {\n            return;\n        }\n\n        this.disposeWithMe(\n            toDisposable(\n                transformer.changeStart$.subscribe((state) => {\n                    this._transformerCache.clear();\n                    const { objects } = state;\n\n                    for (const object of objects.values()) {\n                        const { oKey, width, height, left, top, angle } = object;\n                        const drawing = this._drawingManagerService.getDrawingOKey(oKey);\n                        if (drawing == null) {\n                            continue;\n                        }\n\n                        const documentDataModel = this._univerInstanceService.getUniverDocInstance(drawing.unitId);\n                        const drawingData = documentDataModel?.getSnapshot().drawings?.[drawing.drawingId];\n\n                        if (drawingData?.layoutType === PositionedObjectLayoutType.INLINE) {\n                            try {\n                                (object as Image).setOpacity(0.2);\n                            } catch (e) {\n                            }\n                        }\n\n                        if (drawingData != null) {\n                            this._transformerCache.set(drawing.drawingId, {\n                                drawing: drawingData,\n                                top,\n                                left,\n                                width,\n                                height,\n                                angle,\n                            });\n                        }\n                    }\n                })\n            )\n        );\n\n        const throttleMultipleDrawingUpdate = throttle(this._updateMultipleDrawingDocTransform.bind(this), 50);\n        const throttleNonInlineMoveUpdate = throttle(this._nonInlineDrawingTransform.bind(this), 50);\n\n        this.disposeWithMe(\n            toDisposable(\n                transformer.changing$.subscribe((state) => {\n                    const { objects, offsetX, offsetY } = state;\n\n                    if (objects.size > 1) {\n                        throttleMultipleDrawingUpdate(objects);\n                    } else if (objects.size === 1) {\n                        const drawingCache: Nullable<IDrawingCache> = this._transformerCache.values().next().value;\n                        const object: BaseObject = objects.values().next().value!;\n                        const { width, height, top, left, angle } = object;\n\n                        if (\n                            drawingCache &&\n                            width === drawingCache.width &&\n                            height === drawingCache.height &&\n                            top === drawingCache.top &&\n                            left === drawingCache.left &&\n                            angle === drawingCache.angle\n                        ) {\n                            return;\n                        }\n\n                        if (drawingCache && drawingCache.drawing.layoutType !== PositionedObjectLayoutType.INLINE) {\n                            // throttleNonInlineMoveUpdate(drawingCache.drawing, object, true);\n                        }\n\n                        if (drawingCache && drawingCache.drawing.layoutType === PositionedObjectLayoutType.INLINE && offsetX != null && offsetY != null) {\n                            this._updateInlineDrawingAnchor(drawingCache.drawing, offsetX, offsetY);\n                        }\n                    }\n                })\n            )\n        );\n\n        // Handle transformer mouseup.\n        this.disposeWithMe(\n            toDisposable(\n                // eslint-disable-next-line complexity\n                transformer.changeEnd$.subscribe((state) => {\n                    const { objects, offsetX, offsetY } = state;\n\n                    // Recovery the opacity of inline drawings.\n                    for (const object of objects.values()) {\n                        const drawing = this._drawingManagerService.getDrawingOKey(object.oKey);\n                        if (drawing == null) {\n                            continue;\n                        }\n                        const drawingCache = this._transformerCache.get(drawing?.drawingId);\n\n                        if (drawingCache?.drawing.layoutType === PositionedObjectLayoutType.INLINE) {\n                            try {\n                                (object as Image).setOpacity(1);\n                            } catch (e) {\n                            }\n                        }\n                    }\n\n                    if (this._anchorShape) {\n                        this._anchorShape.hide();\n                    }\n\n                    if (objects.size > 1) {\n                        this._updateMultipleDrawingDocTransform(objects);\n                    } else if (objects.size === 1) {\n                        const drawingCache: Nullable<IDrawingCache> = this._transformerCache.values().next().value;\n                        const object: BaseObject = objects.values().next().value!;\n                        const { width, height, top, left, angle } = object;\n\n                        if (\n                            drawingCache &&\n                            width === drawingCache.width &&\n                            height === drawingCache.height &&\n                            top === drawingCache.top &&\n                            left === drawingCache.left &&\n                            angle === drawingCache.angle\n                        ) {\n                            return;\n                        }\n\n                        if (drawingCache && drawingCache.drawing.layoutType === PositionedObjectLayoutType.INLINE) {\n                            // Handle inline drawing.\n\n                            if (width !== drawingCache.width || height !== drawingCache.height || angle !== drawingCache.angle) {\n                                this._updateDrawingSize(drawingCache, object);\n                            } else if (offsetX != null && offsetY != null) {\n                                this._moveInlineDrawing(drawingCache.drawing, offsetX, offsetY);\n                            }\n                        } else if (drawingCache) {\n                            // Handle non-inline drawing.\n                            this._nonInlineDrawingTransform(drawingCache.drawing, object);\n                        }\n                    }\n\n                    this._transformerCache.clear();\n                })\n            )\n        );\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    private _updateMultipleDrawingDocTransform(objects: Map<string, BaseObject>): void {\n        if (objects.size < 1) {\n            return;\n        }\n\n        const drawings: IDrawingDocTransform[] = [];\n        let unitId;\n        let subUnitId;\n        // The new position is calculated based on the offset.\n        for (const object of objects.values()) {\n            const { oKey, left, top, angle } = object;\n            let { width, height } = object;\n            const drawing = this._drawingManagerService.getDrawingOKey(oKey);\n            if (drawing == null) {\n                continue;\n            }\n\n            if (unitId == null) {\n                unitId = drawing.unitId;\n            }\n\n            if (subUnitId == null) {\n                subUnitId = drawing.subUnitId;\n            }\n\n            const drawingCache = this._transformerCache.get(drawing.drawingId);\n\n            if (drawingCache == null) {\n                continue;\n            }\n\n            const { drawing: drawingData, top: oldTop, left: oldLeft, width: oldWidth, height: oldHeight, angle: oldAngle } = drawingCache;\n\n            const { width: maxWidth, height: maxHeight } = this._getPageContentSize(drawingData);\n\n            // Drawing's width and height should not exceed the page's width and height.\n            width = Math.min(width, maxWidth);\n            height = Math.min(height, maxHeight);\n\n            if (oldWidth !== width || oldHeight !== height) {\n                drawings.push({\n                    drawingId: drawing.drawingId,\n                    key: 'size',\n                    value: {\n                        width,\n                        height,\n                    },\n                });\n            }\n\n            if (oldAngle !== angle) {\n                drawings.push({\n                    drawingId: drawing.drawingId,\n                    key: 'angle',\n                    value: angle,\n                });\n            }\n\n            if (oldTop !== top || oldLeft !== left) {\n                const verticalDelta = top - oldTop;\n                const horizontalDelta = left - oldLeft;\n\n                if (verticalDelta !== 0) {\n                    drawings.push({\n                        drawingId: drawing.drawingId,\n                        key: 'positionV',\n                        value: {\n                            relativeFrom: drawingData.docTransform.positionV.relativeFrom,\n                            posOffset: drawingData.docTransform.positionV.posOffset! + verticalDelta,\n                        },\n                    });\n                }\n\n                if (horizontalDelta !== 0) {\n                    drawings.push({\n                        drawingId: drawing.drawingId,\n                        key: 'positionH',\n                        value: {\n                            relativeFrom: drawingData.docTransform.positionH.relativeFrom,\n                            posOffset: drawingData.docTransform.positionH.posOffset! + horizontalDelta,\n                        },\n                    });\n                }\n            }\n        }\n\n        if (drawings.length > 0 && unitId && subUnitId) {\n            this._commandService.executeCommand(UpdateDrawingDocTransformCommand.id, {\n                unitId,\n                subUnitId,\n                drawings,\n            });\n        }\n    }\n\n    // TODO: @JOCS, Use to draw and update the drawing anchor.\n    private _updateDrawingAnchor(objects: Map<string, BaseObject>) {\n        if (this._transformerCache.size !== 1) {\n            return;\n        }\n\n        const drawingCache: IDrawingCache = this._transformerCache.values().next().value!;\n        const object = objects.values().next().value!;\n\n        const anchor = this._getDrawingAnchor(drawingCache.drawing, object);\n    }\n\n    private _updateInlineDrawingAnchor(drawing: IDocDrawingBase, offsetX: number, offsetY: number) {\n        if (this._transformerCache.size !== 1) {\n            return;\n        }\n\n        const { contentBoxPointGroup } = this._getInlineDrawingAnchor(drawing, offsetX, offsetY) ?? {};\n\n        if (contentBoxPointGroup == null) {\n            return;\n        }\n\n        this._createOrUpdateInlineAnchor(drawing.unitId, contentBoxPointGroup);\n    }\n\n    private _getInlineDrawingAnchor(drawing: IDocDrawingBase, offsetX: number, offsetY: number): Nullable<IDrawingAnchor> {\n        const currentRender = this._renderManagerService.getRenderById(drawing.unitId);\n\n        const skeleton = currentRender?.with(DocSkeletonManagerService).getSkeleton();\n\n        if (currentRender == null) {\n            return;\n        }\n\n        const { mainComponent, scene } = currentRender;\n        const documentComponent = mainComponent as Documents;\n        const activeViewport = scene.getViewports()[0];\n        const {\n            pageLayoutType = PageLayoutType.VERTICAL,\n            pageMarginLeft,\n            pageMarginTop,\n        } = documentComponent.getOffsetConfig();\n        let glyphAnchor: Nullable<IDocumentSkeletonGlyph> = null;\n        let isBack = false;\n        let segmentPageIndex = -1;\n        let segmentId = '';\n        const HALF = 0.5;\n        const coord = this._getTransformCoordForDocumentOffset(documentComponent, activeViewport, offsetX, offsetY);\n        if (coord == null) {\n            return;\n        }\n\n        const docSelectionRenderService = this._renderManagerService.getRenderById(drawing.unitId)?.with(DocSelectionRenderService);\n\n        if (docSelectionRenderService == null) {\n            return;\n        }\n\n        const nodeInfo = skeleton?.findNodeByCoord(coord, pageLayoutType, pageMarginLeft, pageMarginTop, {\n            strict: false,\n            segmentId: docSelectionRenderService.getSegment(),\n            segmentPage: docSelectionRenderService.getSegmentPage(),\n        });\n        if (nodeInfo) {\n            const { node, ratioX, segmentPage, segmentId: nodeSegmentId } = nodeInfo;\n            isBack = ratioX < HALF;\n            glyphAnchor = node;\n            segmentPageIndex = segmentPage;\n            segmentId = nodeSegmentId;\n        }\n\n        if (glyphAnchor == null) {\n            return;\n        }\n\n        const nodePosition = skeleton?.findPositionByGlyph(glyphAnchor, segmentPageIndex);\n        const docObject = this._getDocObject();\n\n        if (nodePosition == null || skeleton == null || docObject == null) {\n            return;\n        }\n\n        // TODO: @JOCS, table cell do not support drawings now. so need to disable it.\n        if (isInTableCell(nodePosition)) {\n            return;\n        }\n\n        const positionWithIsBack = {\n            ...nodePosition,\n            isBack,\n        };\n\n        const documentOffsetConfig = docObject.document.getOffsetConfig();\n        const convertor = new NodePositionConvertToCursor(documentOffsetConfig, skeleton);\n        const { cursorList, contentBoxPointGroup } = convertor.getRangePointData(positionWithIsBack, positionWithIsBack);\n        const { startOffset } = getOneTextSelectionRange(cursorList) ?? {};\n        if (startOffset == null) {\n            return;\n        }\n\n        // Put drawing before the anchor.\n        return { offset: startOffset, contentBoxPointGroup, segmentId, segmentPage: segmentPageIndex };\n    }\n\n    // eslint-disable-next-line max-lines-per-function, complexity\n    private _getDrawingAnchor(drawing: IDocDrawingBase, object: BaseObject): Nullable<IDrawingAnchor> {\n        const currentRender = this._renderManagerService.getRenderById(drawing.unitId);\n        const skeleton = currentRender?.with(DocSkeletonManagerService).getSkeleton();\n\n        const skeletonData = skeleton?.getSkeletonData();\n        if (skeletonData == null || currentRender == null) {\n            return;\n        }\n\n        const { pages, skeHeaders, skeFooters } = skeletonData;\n\n        const { mainComponent, scene } = currentRender;\n        const documentComponent = mainComponent as Documents;\n        const activeViewport = scene.getViewports()[0];\n        const { pageLayoutType = PageLayoutType.VERTICAL, pageMarginLeft, pageMarginTop, docsLeft, docsTop } = documentComponent.getOffsetConfig();\n        const { left, top, angle } = object;\n        let { width, height } = object;\n        const { positionV, positionH } = drawing.docTransform;\n\n        const { width: maxWidth, height: maxHeight } = this._getPageContentSize(drawing);\n\n        width = Math.min(width, maxWidth);\n        height = Math.min(height, maxHeight);\n\n        let glyphAnchor: Nullable<IDocumentSkeletonGlyph> = null;\n        let segmentId = '';\n        let segmentPage = -1;\n        const isBack = false;\n        const docTransform = {\n            ...drawing.docTransform,\n            size: {\n                width,\n                height,\n            },\n            angle,\n        };\n\n        const { x, y } = scene.getViewportScrollXY(activeViewport);\n\n        const coord = this._getTransformCoordForDocumentOffset(documentComponent, activeViewport, left - x, top - y);\n        if (coord == null) {\n            return;\n        }\n\n        const docSelectionRenderService = this._renderManagerService.getRenderById(drawing.unitId)?.with(DocSelectionRenderService);\n\n        if (docSelectionRenderService == null) {\n            return;\n        }\n\n        const nodeInfo = skeleton?.findNodeByCoord(coord, pageLayoutType, pageMarginLeft, pageMarginTop, {\n            strict: false,\n            segmentId: docSelectionRenderService.getSegment(),\n            segmentPage: docSelectionRenderService.getSegmentPage(),\n        });\n        if (nodeInfo) {\n            const { node, segmentPage: segmentPageIndex, segmentId: nodeSegmentId } = nodeInfo;\n            glyphAnchor = node;\n            segmentPage = segmentPageIndex;\n            segmentId = nodeSegmentId;\n        }\n\n        if (glyphAnchor == null) {\n            return;\n        }\n\n        const line = glyphAnchor.parent?.parent;\n        const column = line?.parent;\n        const paragraphStartLine = column?.lines.find((l) => l.paragraphIndex === line?.paragraphIndex && l.paragraphStart) ?? column?.lines[0];\n        const page = column?.parent?.parent;\n\n        if (line == null || column == null || paragraphStartLine == null || page == null) {\n            return;\n        }\n\n        this._liquid.reset();\n\n        const pageType = page.type;\n\n        for (const p of pages) {\n            const { headerId, footerId, pageHeight, pageWidth, marginLeft, marginBottom } = p;\n            const pIndex = pages.indexOf(p);\n\n            if (segmentPage > -1 && pIndex === segmentPage) {\n                switch (pageType) {\n                    case DocumentSkeletonPageType.HEADER: {\n                        const headerSke = skeHeaders.get(headerId)?.get(pageWidth);\n\n                        if (headerSke) {\n                            this._liquid.translatePagePadding({\n                                marginTop: headerSke.marginTop,\n                                marginLeft,\n                            } as IDocumentSkeletonPage);\n                        } else {\n                            throw new Error('header skeleton not found');\n                        }\n\n                        break;\n                    }\n\n                    case DocumentSkeletonPageType.FOOTER: {\n                        const footerSke = skeFooters.get(footerId)?.get(pageWidth);\n\n                        if (footerSke) {\n                            this._liquid.translatePagePadding({\n                                marginTop: pageHeight - marginBottom + footerSke.marginTop,\n                                marginLeft,\n                            } as IDocumentSkeletonPage);\n                        } else {\n                            throw new Error('footer skeleton not found');\n                        }\n\n                        break;\n                    }\n                }\n\n                break;\n            }\n\n            this._liquid.translatePagePadding(p);\n            if (p === page) {\n                break;\n            }\n\n            this._liquid.restorePagePadding(p);\n            this._liquid.translatePage(p, pageLayoutType, pageMarginLeft, pageMarginTop);\n        }\n\n        if (positionV.relativeFrom === ObjectRelativeFromV.LINE) {\n            glyphAnchor = line.divides[0].glyphGroup[0];\n        } else {\n            glyphAnchor = paragraphStartLine.divides?.[0]?.glyphGroup?.[0] ?? glyphAnchor;\n        }\n\n        docTransform.positionH = {\n            relativeFrom: positionH.relativeFrom,\n            posOffset: left - this._liquid.x - docsLeft,\n        };\n\n        switch (positionH.relativeFrom) {\n            case ObjectRelativeFromH.MARGIN: {\n                docTransform.positionH.posOffset = left - this._liquid.x - docsLeft - page.marginLeft;\n                break;\n            }\n            case ObjectRelativeFromH.COLUMN: {\n                docTransform.positionH.posOffset = left - this._liquid.x - docsLeft - column.left;\n                break;\n            }\n        }\n\n        docTransform.positionV = {\n            relativeFrom: positionV.relativeFrom,\n            posOffset: top - this._liquid.y - docsTop,\n        };\n\n        switch (positionV.relativeFrom) {\n            case ObjectRelativeFromV.PAGE: {\n                docTransform.positionV.posOffset = top - this._liquid.y - docsTop - page.marginTop;\n                break;\n            }\n            case ObjectRelativeFromV.LINE: {\n                docTransform.positionV.posOffset = top - this._liquid.y - docsTop - line.top;\n                break;\n            }\n            case ObjectRelativeFromV.PARAGRAPH: {\n                docTransform.positionV.posOffset = top - this._liquid.y - docsTop - paragraphStartLine.top;\n                break;\n            }\n        }\n\n        if (glyphAnchor == null) {\n            return;\n        }\n\n        const nodePosition = skeleton?.findPositionByGlyph(glyphAnchor, segmentPage);\n        const docObject = this._getDocObject();\n        if (nodePosition == null || skeleton == null || docObject == null) {\n            return;\n        }\n\n        // TODO: @JOCS, table cell do not support drawings now. so need to disable it.\n        if (isInTableCell(nodePosition)) {\n            return;\n        }\n\n        const positionWithIsBack = {\n            ...nodePosition,\n            isBack,\n        };\n\n        const documentOffsetConfig = docObject.document.getOffsetConfig();\n        const convertor = new NodePositionConvertToCursor(documentOffsetConfig, skeleton);\n        const { cursorList } = convertor.getRangePointData(positionWithIsBack, positionWithIsBack);\n        const { startOffset } = getOneTextSelectionRange(cursorList) ?? {};\n\n        if (startOffset == null) {\n            return;\n        }\n\n        // Put drawing before the anchor.\n        return { offset: startOffset, docTransform, segmentId, segmentPage };\n    }\n\n    // Update drawing when use transformer to resize it.\n    private _updateDrawingSize(drawingCache: IDrawingCache, object: BaseObject) {\n        const drawings: IDrawingDocTransform[] = [];\n        const { drawing, width: oldWidth, height: oldHeight, angle: oldAngle } = drawingCache;\n        const { unitId, subUnitId } = drawing;\n        let { width, height, angle } = object;\n\n        const { width: maxWidth, height: maxHeight } = this._getPageContentSize(drawing);\n\n        width = Math.min(maxWidth, width);\n        height = Math.min(maxHeight, height);\n\n        if (width !== oldWidth || height !== oldHeight) {\n            drawings.push({\n                drawingId: drawing.drawingId,\n                key: 'size',\n                value: {\n                    width,\n                    height,\n                },\n            });\n        }\n\n        if (angle !== oldAngle) {\n            drawings.push({\n                drawingId: drawing.drawingId,\n                key: 'angle',\n                value: angle,\n            });\n        }\n\n        if (drawings.length > 0 && unitId && subUnitId) {\n            this._commandService.executeCommand(UpdateDrawingDocTransformCommand.id, {\n                unitId,\n                subUnitId,\n                drawings,\n            });\n        }\n    }\n\n    // Update inline drawing when use transformer to move it.\n    private _moveInlineDrawing(drawing: IDocDrawingBase, offsetX: number, offsetY: number) {\n        const anchor = this._getInlineDrawingAnchor(drawing, offsetX, offsetY);\n        const { offset, segmentId, segmentPage } = anchor ?? {};\n\n        return this._commandService.executeCommand(IMoveInlineDrawingCommand.id, {\n            unitId: drawing.unitId,\n            subUnitId: drawing.unitId,\n            drawing,\n            offset,\n            segmentId,\n            segmentPage,\n            needRefreshDrawings: offset == null,\n        });\n    }\n\n    // Limit the drawing to the page area, mainly in the vertical direction,\n    // and the upper and lower limits cannot exceed the page margin area.\n    private _limitDrawingInPage(drawing: IDocDrawingBase, object: BaseObject) {\n        const currentRender = this._renderManagerService.getRenderById(drawing.unitId);\n        const { left, top, width, height, angle } = object;\n        const skeleton = currentRender?.with(DocSkeletonManagerService).getSkeleton();\n\n        const skeletonData = skeleton?.getSkeletonData();\n        const { pages } = skeletonData ?? {};\n\n        if (skeletonData == null || currentRender == null || pages == null) {\n            return {\n                left,\n                top,\n                width,\n                height,\n                angle,\n            };\n        }\n\n        const { mainComponent } = currentRender;\n        const documentComponent = mainComponent as Documents;\n        const { top: docsTop, pageLayoutType, pageMarginLeft, pageMarginTop } = documentComponent;\n        let newTop = top;\n        this._liquid.reset();\n\n        for (const page of pages) {\n            // this._liquid.translatePagePadding(page);\n            const { marginBottom, pageHeight } = page;\n            const index = pages.indexOf(page);\n            const nextPage = pages[index + 1];\n\n            if (nextPage == null) {\n                continue;\n            }\n\n            // Determines whether the image is between two pages, spanning two pages,\n            // but does not belong entirely to a page\n            const isBetweenPages = Tools.hasIntersectionBetweenTwoRanges(\n                top,\n                top + height,\n                this._liquid.y + docsTop + pageHeight - marginBottom,\n                this._liquid.y + docsTop + pageHeight + pageMarginTop + nextPage.marginTop\n            );\n\n            if (isBetweenPages) {\n                const drawingVMiddle = top + height / 2;\n                const pagesMiddle = this._liquid.y + docsTop + pageHeight + pageMarginTop / 2;\n\n                if (drawingVMiddle < pagesMiddle) {\n                    newTop = Math.min(top, this._liquid.y + docsTop + pageHeight - marginBottom - height);\n                } else {\n                    newTop = Math.max(top, this._liquid.y + docsTop + pageHeight + pageMarginTop + nextPage.marginTop);\n                }\n            }\n\n            // this._liquid.restorePagePadding(page);\n            this._liquid.translatePage(page, pageLayoutType, pageMarginLeft, pageMarginTop);\n        }\n\n        return {\n            left,\n            top: newTop,\n            width,\n            height,\n            angle,\n        };\n    }\n\n    private _nonInlineDrawingTransform(drawing: IDocDrawingBase, object: BaseObject, isMoving = false) {\n        const objectPosition = drawing.isMultiTransform === BooleanNumber.TRUE ? object : this._limitDrawingInPage(drawing, object);\n\n        if (isMoving && objectPosition.top !== object.top) {\n            return;\n        }\n\n        const anchor = this._getDrawingAnchor(drawing, objectPosition as BaseObject);\n        const { offset, docTransform, segmentId, segmentPage } = anchor ?? {};\n        if (offset == null || docTransform == null) {\n            // No need to change the anchor ,when the new anchor is not found. reuse the `_updateMultipleDrawingDocTransform` to modify the transform.\n            return this._updateMultipleDrawingDocTransform(new Map([[drawing.drawingId, object]]));\n        }\n\n        return this._commandService.executeCommand(ITransformNonInlineDrawingCommand.id, {\n            unitId: drawing.unitId,\n            subUnitId: drawing.unitId,\n            drawing,\n            offset,\n            docTransform,\n            segmentId,\n            segmentPage,\n        });\n    }\n\n    private _getSceneAndTransformerByDrawingSearch(unitId: Nullable<string>) {\n        if (unitId == null) {\n            return;\n        }\n\n        const renderObject = this._renderManagerService.getRenderById(unitId);\n\n        const scene = renderObject?.scene;\n\n        if (scene == null) {\n            return;\n        }\n\n        const transformer = scene.getTransformerByCreate();\n\n        return { scene, transformer };\n    }\n\n    private _getTransformCoordForDocumentOffset(document: Documents, viewport: Viewport, evtOffsetX: number, evtOffsetY: number) {\n        const { documentTransform } = document.getOffsetConfig();\n        const originCoord = viewport.transformVector2SceneCoord(Vector2.FromArray([evtOffsetX, evtOffsetY]));\n\n        if (!originCoord) {\n            return;\n        }\n\n        return documentTransform.clone().invert().applyPoint(originCoord);\n    }\n\n    private _createOrUpdateInlineAnchor(unitId: string, pointsGroup: IPoint[][]) {\n        const currentRender = this._renderManagerService.getRenderById(unitId);\n        if (currentRender == null) {\n            return;\n        }\n        const { mainComponent, scene } = currentRender;\n        const documentComponent = mainComponent as Documents;\n        const {\n            docsLeft,\n            docsTop,\n        } = documentComponent.getOffsetConfig();\n        const bounding = getAnchorBounding(pointsGroup);\n        const { left: boundingLeft, top: boundingTop, height } = bounding;\n        const left = boundingLeft + docsLeft;\n        const top = boundingTop + docsTop;\n\n        if (this._anchorShape) {\n            this._anchorShape.transformByState({ left, top, height });\n            this._anchorShape.show();\n\n            return;\n        }\n\n        const ID_LENGTH = 6;\n\n        const anchor = new Rect(INLINE_DRAWING_ANCHOR_KEY_PREFIX + Tools.generateRandomId(ID_LENGTH), {\n            left,\n            top,\n            height,\n            strokeWidth: 2,\n            stroke: getColor(COLORS.darkGray, 1),\n            evented: false,\n        });\n\n        this._anchorShape = anchor;\n\n        scene.addObject(anchor, TEXT_RANGE_LAYER_INDEX);\n    }\n\n    private _getDocObject() {\n        return getDocObject(this._univerInstanceService, this._renderManagerService);\n    }\n\n    private _getPageContentSize(drawing: IDocDrawingBase) {\n        const currentRender = this._renderManagerService.getRenderById(drawing.unitId);\n        const skeleton = currentRender?.with(DocSkeletonManagerService).getSkeleton();\n        const MAX_WIDTH = 500;\n        const MAX_HEIGHT = 500;\n\n        const skeletonData = skeleton?.getSkeletonData();\n        if (skeletonData == null || currentRender == null) {\n            return {\n                width: MAX_WIDTH,\n                height: MAX_HEIGHT,\n            };\n        }\n\n        // TODO: handle header footer image.\n        const { pages } = skeletonData;\n\n        let page: Nullable<IDocumentSkeletonPage> = null;\n\n        for (const p of pages) {\n            const { skeDrawings } = p;\n            if (skeDrawings.has(drawing.drawingId)) {\n                page = p;\n                break;\n            }\n        }\n\n        if (page) {\n            const { pageWidth, pageHeight, marginLeft, marginBottom, marginRight, marginTop } = page;\n\n            return {\n                width: Math.max(MAX_WIDTH, pageWidth - marginLeft - marginRight),\n                height: Math.max(MAX_HEIGHT, pageHeight - marginTop - marginBottom),\n            };\n        } else {\n            return {\n                width: MAX_WIDTH,\n                height: MAX_HEIGHT,\n            };\n        }\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand, IMutationInfo, JSONXActions } from '@univerjs/core';\nimport type { IRichTextEditingMutationParams } from '@univerjs/docs';\nimport type { IDeleteDrawingCommandParams } from './interfaces';\nimport {\n    CommandType,\n    ICommandService,\n    IUniverInstanceService,\n    JSONX,\n    MemoryCursor,\n    TextX,\n    TextXActionType,\n} from '@univerjs/core';\nimport { RichTextEditingMutation } from '@univerjs/docs';\nimport { DocSelectionRenderService, getRichTextEditPath } from '@univerjs/docs-ui';\nimport { IRenderManagerService, type ITextRangeWithStyle } from '@univerjs/engine-render';\n\n/**\n * The command to remove new sheet image\n */\nexport const RemoveDocDrawingCommand: ICommand = {\n    id: 'doc.command.remove-doc-image',\n    type: CommandType.COMMAND,\n    // eslint-disable-next-line max-lines-per-function\n    handler: (accessor: IAccessor, params?: IDeleteDrawingCommandParams) => {\n        const commandService = accessor.get(ICommandService);\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        const renderManagerService = accessor.get(IRenderManagerService);\n        const documentDataModel = univerInstanceService.getCurrentUniverDocInstance();\n\n        if (params == null || documentDataModel == null) {\n            return false;\n        }\n\n        const docSelectionRenderService = renderManagerService.getRenderById(params.unitId)!.with(DocSelectionRenderService)!;\n\n        const { drawings: removeDrawings } = params;\n\n        const segmentId = docSelectionRenderService.getSegment() ?? '';\n\n        const textX = new TextX();\n        const jsonX = JSONX.getInstance();\n        const customBlocks = documentDataModel.getSelfOrHeaderFooterModel(segmentId).getBody()?.customBlocks ?? [];\n        const removeCustomBlocks = removeDrawings\n            .map((drawing) => customBlocks.find((customBlock) => customBlock.blockId === drawing.drawingId))\n            .filter((block) => !!block)\n            .sort((a, b) => a!.startIndex > b!.startIndex ? 1 : -1);\n\n        const unitId = removeDrawings[0].unitId;\n\n        const memoryCursor = new MemoryCursor();\n\n        memoryCursor.reset();\n\n        const cursorIndex = removeCustomBlocks[0]!.startIndex;\n        const textRanges = [\n            {\n                startOffset: cursorIndex,\n                endOffset: cursorIndex,\n            },\n        ] as ITextRangeWithStyle[];\n\n        const doMutation: IMutationInfo<IRichTextEditingMutationParams> = {\n            id: RichTextEditingMutation.id,\n            params: {\n                unitId,\n                actions: [],\n                textRanges,\n            },\n        };\n\n        const rawActions: JSONXActions = [];\n\n        for (const block of removeCustomBlocks) {\n            const { startIndex } = block!;\n\n            if (startIndex > memoryCursor.cursor) {\n                textX.push({\n                    t: TextXActionType.RETAIN,\n                    len: startIndex - memoryCursor.cursor,\n                });\n            }\n\n            textX.push({\n                t: TextXActionType.DELETE,\n                len: 1,\n            });\n\n            memoryCursor.moveCursorTo(startIndex + 1);\n        }\n\n        const path = getRichTextEditPath(documentDataModel, segmentId);\n        rawActions.push(jsonX.editOp(textX.serialize(), path)!);\n\n        for (const block of removeCustomBlocks) {\n            const { blockId } = block!;\n\n            const drawing = (documentDataModel.getDrawings() ?? {})[blockId];\n            const drawingOrder = documentDataModel.getDrawingsOrder();\n            const drawingIndex = drawingOrder!.indexOf(blockId);\n\n            const removeDrawingAction = jsonX.removeOp(['drawings', blockId], drawing);\n            const removeDrawingOrderAction = jsonX.removeOp(['drawingsOrder', drawingIndex], blockId);\n\n            rawActions.push(removeDrawingAction!);\n            rawActions.push(removeDrawingOrderAction!);\n        }\n\n        doMutation.params.actions = rawActions.reduce((acc, cur) => {\n            return JSONX.compose(acc, cur as JSONXActions);\n        }, null as JSONXActions);\n\n        const result = commandService.syncExecuteCommand<\n            IRichTextEditingMutationParams,\n            IRichTextEditingMutationParams\n        >(doMutation.id, doMutation.params);\n\n        return Boolean(result);\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand } from '@univerjs/core';\nimport type { IDocDrawing } from '@univerjs/docs-drawing';\nimport type { IDeleteDrawingCommandParams } from './interfaces';\nimport { CommandType, ICommandService } from '@univerjs/core';\nimport { IDocDrawingService } from '@univerjs/docs-drawing';\nimport { RemoveDocDrawingCommand } from './remove-doc-drawing.command';\n\nexport const DeleteDocDrawingsCommand: ICommand = {\n    id: 'doc.command.delete-drawing',\n    type: CommandType.COMMAND,\n    handler: (accessor: IAccessor) => {\n        const commandService = accessor.get(ICommandService);\n        const docDrawingService = accessor.get(IDocDrawingService);\n\n        const drawings = docDrawingService.getFocusDrawings();\n\n        if (drawings.length === 0) {\n            return false;\n        }\n\n        const { unitId } = drawings[0];\n\n        const newDrawings = drawings.map((drawing) => {\n            const { unitId, subUnitId, drawingId, drawingType } = drawing as IDocDrawing;\n\n            return {\n                unitId,\n                subUnitId,\n                drawingId,\n                drawingType,\n            };\n        });\n        return commandService.executeCommand<IDeleteDrawingCommandParams>(RemoveDocDrawingCommand.id, {\n            unitId,\n            drawings: newDrawings,\n        });\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand } from '@univerjs/core';\nimport {\n    CommandType,\n    ICommandService,\n    IUndoRedoService,\n} from '@univerjs/core';\nimport type { IDrawingGroupUpdateParam, IDrawingJsonUndo1 } from '@univerjs/drawing';\nimport { IDocDrawingService } from '@univerjs/docs-drawing';\n\n/**\n * The command to insert new defined name\n */\nexport const GroupDocDrawingCommand: ICommand = {\n    id: 'doc.command.group-doc-image',\n    type: CommandType.COMMAND,\n    handler: (accessor: IAccessor, params?: IDrawingGroupUpdateParam[]) => {\n        const commandService = accessor.get(ICommandService);\n        const undoRedoService = accessor.get(IUndoRedoService);\n        const docDrawingService = accessor.get(IDocDrawingService);\n\n        if (!params) return false;\n\n        const unitIds: string[] = [];\n        params.forEach(({ parent, children }) => {\n            unitIds.push(parent.unitId);\n            children.forEach((child) => {\n                unitIds.push(child.unitId);\n            });\n        });\n\n        // execute do mutations and add undo mutations to undo stack if completed\n        const jsonOp = docDrawingService.getGroupDrawingOp(params) as IDrawingJsonUndo1;\n\n        const { unitId, subUnitId, undo, redo, objects } = jsonOp;\n\n        // const result = commandService.syncExecuteCommand(SetDocDrawingApplyMutation.id, { op: redo, unitId, subUnitId, objects, type: DocDrawingApplyType.GROUP });\n\n        // if (result) {\n        //     undoRedoService.pushUndoRedo({\n        //         unitID: unitId,\n        //         undoMutations: [\n        //             { id: SetDocDrawingApplyMutation.id, params: { op: undo, unitId, subUnitId, objects: groupToUngroup(objects as IDrawingGroupUpdateParam[]), type: DocDrawingApplyType.UNGROUP } },\n        //             { id: ClearDocDrawingTransformerOperation.id, params: unitIds },\n        //         ],\n        //         redoMutations: [\n        //             { id: SetDocDrawingApplyMutation.id, params: { op: redo, unitId, subUnitId, objects, type: DocDrawingApplyType.GROUP } },\n        //             { id: ClearDocDrawingTransformerOperation.id, params: unitIds },\n        //         ],\n        //     });\n\n        //     return true;\n        // }\n\n        return false;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand, IMutationInfo, JSONXActions } from '@univerjs/core';\nimport type { IRichTextEditingMutationParams } from '@univerjs/docs';\nimport type { IInsertDrawingCommandParams } from './interfaces';\nimport {\n    BuildTextUtils,\n    CommandType,\n    ICommandService,\n    IUniverInstanceService,\n    JSONX,\n    TextX,\n    TextXActionType,\n} from '@univerjs/core';\nimport { DocSelectionManagerService, RichTextEditingMutation } from '@univerjs/docs';\nimport { getCustomBlockIdsInSelections, getRichTextEditPath } from '@univerjs/docs-ui';\n\n/**\n * The command to insert new drawings\n */\nexport const InsertDocDrawingCommand: ICommand = {\n    id: 'doc.command.insert-doc-image',\n\n    type: CommandType.COMMAND,\n\n    // eslint-disable-next-line max-lines-per-function\n    handler: (accessor: IAccessor, params?: IInsertDrawingCommandParams) => {\n        if (params == null) {\n            return false;\n        }\n        const commandService = accessor.get(ICommandService);\n        const docSelectionManagerService = accessor.get(DocSelectionManagerService);\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n\n        const activeTextRange = docSelectionManagerService.getActiveTextRange();\n        const documentDataModel = univerInstanceService.getCurrentUniverDocInstance();\n        if (activeTextRange == null || documentDataModel == null) {\n            return false;\n        }\n\n        const unitId = documentDataModel.getUnitId();\n        const { drawings } = params;\n        const { collapsed, startOffset, segmentId } = activeTextRange;\n        const body = documentDataModel.getSelfOrHeaderFooterModel(segmentId).getBody();\n\n        if (body == null) {\n            return false;\n        }\n\n        const textX = new TextX();\n        const jsonX = JSONX.getInstance();\n        const rawActions: JSONXActions = [];\n        const drawingOrderLength = documentDataModel.getSnapshot().drawingsOrder?.length ?? 0;\n        let removeDrawingLen = 0;\n\n        // Step 1: Insert placeholder `\\b` in dataStream and add drawing to customBlocks.\n        if (collapsed) {\n            if (startOffset > 0) {\n                textX.push({\n                    t: TextXActionType.RETAIN,\n                    len: startOffset,\n                });\n            }\n        } else {\n            const dos = BuildTextUtils.selection.delete([activeTextRange], body, 0, null, false);\n            textX.push(...dos);\n\n            const removedCustomBlockIds = getCustomBlockIdsInSelections(body, [activeTextRange]);\n            const drawings = documentDataModel.getDrawings() ?? {};\n            const drawingOrder = documentDataModel.getDrawingsOrder() ?? [];\n            const sortedRemovedCustomBlockIds = removedCustomBlockIds.sort((a, b) => {\n                if (drawingOrder.indexOf(a) > drawingOrder.indexOf(b)) {\n                    return -1;\n                } else if (drawingOrder.indexOf(a) < drawingOrder.indexOf(b)) {\n                    return 1;\n                }\n\n                return 0;\n            });\n\n            if (sortedRemovedCustomBlockIds.length > 0) {\n                for (const blockId of sortedRemovedCustomBlockIds) {\n                    const drawing = drawings[blockId];\n                    const drawingIndex = drawingOrder.indexOf(blockId);\n                    if (drawing == null || drawingIndex < 0) {\n                        continue;\n                    }\n\n                    const removeDrawingAction = jsonX.removeOp(['drawings', blockId], drawing);\n                    const removeDrawingOrderAction = jsonX.removeOp(['drawingsOrder', drawingIndex], blockId);\n\n                    rawActions.push(removeDrawingAction!);\n                    rawActions.push(removeDrawingOrderAction!);\n\n                    removeDrawingLen++;\n                }\n            }\n        }\n\n        textX.push({\n            t: TextXActionType.INSERT,\n            body: {\n                dataStream: '\\b'.repeat(drawings.length),\n                customBlocks: drawings.map((drawing, i) => ({\n                    startIndex: i,\n                    blockId: drawing.drawingId,\n                })),\n            },\n            len: drawings.length,\n        });\n\n        const path = getRichTextEditPath(documentDataModel, segmentId);\n        const placeHolderAction = jsonX.editOp(textX.serialize(), path);\n\n        rawActions.push(placeHolderAction!);\n\n        // Step 2: add drawing to drawings and drawingsOrder fields.\n        for (const drawing of drawings) {\n            const { drawingId } = drawing;\n            const addDrawingAction = jsonX.insertOp(['drawings', drawingId], drawing);\n            const addDrawingOrderAction = jsonX.insertOp(['drawingsOrder', drawingOrderLength - removeDrawingLen], drawingId);\n\n            rawActions.push(addDrawingAction!);\n            rawActions.push(addDrawingOrderAction!);\n        }\n\n        const doMutation: IMutationInfo<IRichTextEditingMutationParams> = {\n            id: RichTextEditingMutation.id,\n            params: {\n                unitId,\n                actions: [],\n                textRanges: [],\n            },\n        };\n\n        doMutation.params.actions = rawActions.reduce((acc, cur) => {\n            return JSONX.compose(acc, cur as JSONXActions);\n        }, null as JSONXActions);\n\n        const result = commandService.syncExecuteCommand<\n            IRichTextEditingMutationParams,\n            IRichTextEditingMutationParams\n        >(doMutation.id, doMutation.params);\n\n        return Boolean(result);\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand, IMutationInfo, JSONXActions, Nullable } from '@univerjs/core';\nimport type { IRichTextEditingMutationParams } from '@univerjs/docs';\nimport type { IDrawingJsonUndo1, IDrawingOrderMapParam } from '@univerjs/drawing';\nimport {\n    ArrangeTypeEnum,\n    CommandType,\n    ICommandService,\n    JSONX,\n    Tools,\n} from '@univerjs/core';\nimport { RichTextEditingMutation } from '@univerjs/docs';\nimport { IDocDrawingService } from '@univerjs/docs-drawing';\n\nexport interface ISetDrawingArrangeCommandParams extends IDrawingOrderMapParam {\n    arrangeType: ArrangeTypeEnum;\n}\n\n/**\n * The command to arrange drawings.\n */\nexport const SetDocDrawingArrangeCommand: ICommand = {\n    id: 'doc.command.set-drawing-arrange',\n\n    type: CommandType.COMMAND,\n\n    handler: (accessor: IAccessor, params?: ISetDrawingArrangeCommandParams) => {\n        const commandService = accessor.get(ICommandService);\n        const docDrawingService = accessor.get(IDocDrawingService);\n\n        if (params == null) {\n            return false;\n        }\n\n        const { unitId, subUnitId, drawingIds, arrangeType } = params;\n\n        const drawingOrderMapParam = { unitId, subUnitId, drawingIds } as IDrawingOrderMapParam;\n\n        let jsonOp: Nullable<IDrawingJsonUndo1>;\n        if (arrangeType === ArrangeTypeEnum.forward) {\n            jsonOp = docDrawingService.getForwardDrawingsOp(drawingOrderMapParam) as IDrawingJsonUndo1;\n        } else if (arrangeType === ArrangeTypeEnum.backward) {\n            jsonOp = docDrawingService.getBackwardDrawingOp(drawingOrderMapParam) as IDrawingJsonUndo1;\n        } else if (arrangeType === ArrangeTypeEnum.front) {\n            jsonOp = docDrawingService.getFrontDrawingsOp(drawingOrderMapParam) as IDrawingJsonUndo1;\n        } else if (arrangeType === ArrangeTypeEnum.back) {\n            jsonOp = docDrawingService.getBackDrawingsOp(drawingOrderMapParam) as IDrawingJsonUndo1;\n        }\n\n        if (jsonOp == null) {\n            return false;\n        }\n\n        const { redo } = jsonOp;\n\n        if (redo == null) {\n            return false;\n        }\n\n        const rawActions: JSONXActions = [];\n\n        // TODO: @JOCS, It's best to build the actions yourself.\n        let redoCopy = Tools.deepClone(redo)! as JSONXActions;\n        redoCopy = redoCopy!.slice(3)! as JSONXActions;\n        redoCopy!.unshift('drawingsOrder');\n        rawActions.push(redoCopy!);\n\n        const doMutation: IMutationInfo<IRichTextEditingMutationParams> = {\n            id: RichTextEditingMutation.id,\n            params: {\n                unitId,\n                actions: [],\n                textRanges: null,\n            },\n        };\n\n        doMutation.params.actions = rawActions.reduce((acc, cur) => {\n            return JSONX.compose(acc, cur as JSONXActions);\n        }, null as JSONXActions);\n\n        const result = commandService.syncExecuteCommand<\n            IRichTextEditingMutationParams,\n            IRichTextEditingMutationParams\n        >(doMutation.id, doMutation.params);\n\n        return Boolean(result);\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand } from '@univerjs/core';\nimport {\n    CommandType,\n    ICommandService,\n    IUndoRedoService,\n} from '@univerjs/core';\n\nimport type { IDrawingGroupUpdateParam, IDrawingJsonUndo1 } from '@univerjs/drawing';\nimport { IDocDrawingService } from '@univerjs/docs-drawing';\n\n/**\n * The command to insert new defined name\n */\nexport const UngroupDocDrawingCommand: ICommand = {\n    id: 'doc.command.ungroup-doc-image',\n    type: CommandType.COMMAND,\n    handler: (accessor: IAccessor, params?: IDrawingGroupUpdateParam[]) => {\n        const commandService = accessor.get(ICommandService);\n        const undoRedoService = accessor.get(IUndoRedoService);\n        const docDrawingService = accessor.get(IDocDrawingService);\n\n        if (!params) return false;\n\n        const unitIds: string[] = [];\n        params.forEach(({ parent, children }) => {\n            unitIds.push(parent.unitId);\n            children.forEach((child) => {\n                unitIds.push(child.unitId);\n            });\n        });\n\n        // execute do mutations and add undo mutations to undo stack if completed\n        const jsonOp = docDrawingService.getUngroupDrawingOp(params) as IDrawingJsonUndo1;\n\n        const { unitId, subUnitId, undo, redo, objects } = jsonOp;\n\n        // const result = commandService.syncExecuteCommand(SetDocDrawingApplyMutation.id, { op: redo, unitId, subUnitId, objects, type: DocDrawingApplyType.UNGROUP });\n\n        // if (result) {\n        //     undoRedoService.pushUndoRedo({\n        //         unitID: unitId,\n        //         undoMutations: [\n        //             { id: SetDocDrawingApplyMutation.id, params: { op: undo, unitId, subUnitId, objects: ungroupToGroup(objects as IDrawingGroupUpdateParam[]), type: DocDrawingApplyType.GROUP } },\n        //             { id: ClearDocDrawingTransformerOperation.id, params: unitIds },\n        //         ],\n        //         redoMutations: [\n        //             { id: SetDocDrawingApplyMutation.id, params: { op: redo, unitId, subUnitId, objects, type: DocDrawingApplyType.UNGROUP } },\n        //             { id: ClearDocDrawingTransformerOperation.id, params: unitIds },\n        //         ],\n        //     });\n\n        //     return true;\n        // }\n\n        return false;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DocumentDataModel, ICommandInfo, IDocDrawingPosition, IDrawingParam, Nullable } from '@univerjs/core';\nimport type { IDocDrawing } from '@univerjs/docs-drawing';\nimport type { IImageIoServiceParam } from '@univerjs/drawing';\nimport type { Documents, Image, IRenderContext, IRenderModule } from '@univerjs/engine-render';\nimport type { IInsertDrawingCommandParams } from '../../commands/commands/interfaces';\nimport type { ISetDrawingArrangeCommandParams } from '../../commands/commands/set-drawing-arrange.command';\nimport { BooleanNumber, Disposable, DrawingTypeEnum, FOCUSING_COMMON_DRAWINGS, ICommandService, IContextService, Inject, LocaleService, ObjectRelativeFromH, ObjectRelativeFromV, PositionedObjectLayoutType, WrapTextType } from '@univerjs/core';\nimport { MessageType } from '@univerjs/design';\nimport { DocSelectionManagerService, DocSkeletonManagerService, RichTextEditingMutation } from '@univerjs/docs';\nimport { IDocDrawingService } from '@univerjs/docs-drawing';\nimport { docDrawingPositionToTransform, DocSelectionRenderService } from '@univerjs/docs-ui';\nimport { DRAWING_IMAGE_ALLOW_IMAGE_LIST, DRAWING_IMAGE_ALLOW_SIZE, DRAWING_IMAGE_COUNT_LIMIT, DRAWING_IMAGE_HEIGHT_LIMIT, DRAWING_IMAGE_WIDTH_LIMIT, getDrawingShapeKeyByDrawingSearch, getImageSize, IDrawingManagerService, IImageIoService, ImageUploadStatusType } from '@univerjs/drawing';\nimport { DocumentEditArea, IRenderManagerService } from '@univerjs/engine-render';\n\nimport { ILocalFileService, IMessageService } from '@univerjs/ui';\nimport { debounceTime } from 'rxjs';\nimport { GroupDocDrawingCommand } from '../../commands/commands/group-doc-drawing.command';\nimport { InsertDocDrawingCommand } from '../../commands/commands/insert-doc-drawing.command';\nimport { SetDocDrawingArrangeCommand } from '../../commands/commands/set-drawing-arrange.command';\nimport { UngroupDocDrawingCommand } from '../../commands/commands/ungroup-doc-drawing.command';\nimport { DocRefreshDrawingsService } from '../../services/doc-refresh-drawings.service';\n\nexport class DocDrawingUpdateRenderController extends Disposable implements IRenderModule {\n    constructor(\n        private readonly _context: IRenderContext<DocumentDataModel>,\n        @ICommandService private readonly _commandService: ICommandService,\n        @Inject(DocSelectionManagerService) private readonly _docSelectionManagerService: DocSelectionManagerService,\n        @IRenderManagerService private readonly _renderManagerSrv: IRenderManagerService,\n        @IImageIoService private readonly _imageIoService: IImageIoService,\n        @IDocDrawingService private readonly _docDrawingService: IDocDrawingService,\n        @IDrawingManagerService private readonly _drawingManagerService: IDrawingManagerService,\n        @IContextService private readonly _contextService: IContextService,\n        @IMessageService private readonly _messageService: IMessageService,\n        @Inject(LocaleService) private readonly _localeService: LocaleService,\n        @Inject(DocSelectionRenderService) private readonly _docSelectionRenderService: DocSelectionRenderService,\n        @Inject(DocRefreshDrawingsService) private readonly _docRefreshDrawingsService: DocRefreshDrawingsService,\n        @ILocalFileService private readonly _fileOpenerService: ILocalFileService\n    ) {\n        super();\n\n        this._updateOrderListener();\n        this._groupDrawingListener();\n        this._focusDrawingListener();\n        this._transformDrawingListener();\n        this._editAreaChangeListener();\n    }\n\n    async insertDocImage(): Promise<boolean> {\n        const files = await this._fileOpenerService.openFile({\n            multiple: true,\n            accept: DRAWING_IMAGE_ALLOW_IMAGE_LIST.map((image) => `.${image.replace('image/', '')}`).join(','),\n        });\n\n        const fileLength = files.length;\n        if (fileLength > DRAWING_IMAGE_COUNT_LIMIT) {\n            this._messageService.show({\n                type: MessageType.Error,\n                content: this._localeService.t('update-status.exceedMaxCount', String(DRAWING_IMAGE_COUNT_LIMIT)),\n            });\n            return false;\n        } else if (fileLength === 0) {\n            return false;\n        }\n\n        await this._insertFloatImages(files);\n        return true;\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    private async _insertFloatImages(files: File[]) {\n        let imageParams: Nullable<IImageIoServiceParam>[] = [];\n\n        try {\n            imageParams = await Promise.all(files.map((file) => this._imageIoService.saveImage(file)));\n        } catch (error) {\n            const type = (error as Error).message;\n            let content = '';\n\n            switch (type) {\n                case ImageUploadStatusType.ERROR_EXCEED_SIZE:\n                    content = this._localeService.t('update-status.exceedMaxSize', String(DRAWING_IMAGE_ALLOW_SIZE / (1024 * 1024)));\n                    break;\n                case ImageUploadStatusType.ERROR_IMAGE_TYPE:\n                    content = this._localeService.t('update-status.invalidImageType');\n                    break;\n                case ImageUploadStatusType.ERROR_IMAGE:\n                    content = this._localeService.t('update-status.invalidImage');\n                    break;\n                default:\n                    break;\n            }\n\n            this._messageService.show({\n                type: MessageType.Error,\n                content,\n            });\n        }\n\n        if (imageParams.length === 0) {\n            return;\n        }\n\n        const { unitId } = this._context;\n        const docDrawingParams: IDocDrawing[] = [];\n\n        for (const imageParam of imageParams) {\n            if (imageParam == null) {\n                continue;\n            }\n            const { imageId, imageSourceType, source, base64Cache } = imageParam;\n            const { width, height, image } = await getImageSize(base64Cache || '');\n\n            this._imageIoService.addImageSourceCache(imageId, imageSourceType, image);\n\n            let scale = 1;\n            if (width > DRAWING_IMAGE_WIDTH_LIMIT || height > DRAWING_IMAGE_HEIGHT_LIMIT) {\n                const scaleWidth = DRAWING_IMAGE_WIDTH_LIMIT / width;\n                const scaleHeight = DRAWING_IMAGE_HEIGHT_LIMIT / height;\n                scale = Math.min(scaleWidth, scaleHeight);\n            }\n\n            const docTransform = this._getImagePosition(width * scale, height * scale);\n\n            if (docTransform == null) {\n                return;\n            }\n\n            const docDrawingParam: IDocDrawing = {\n                unitId,\n                subUnitId: unitId,\n                drawingId: imageId,\n                drawingType: DrawingTypeEnum.DRAWING_IMAGE,\n                imageSourceType,\n                source,\n                transform: docDrawingPositionToTransform(docTransform),\n                docTransform,\n                behindDoc: BooleanNumber.FALSE,\n                title: '',\n                description: '',\n                layoutType: PositionedObjectLayoutType.INLINE, // Insert inline drawing by default.\n                wrapText: WrapTextType.BOTH_SIDES,\n                distB: 0,\n                distL: 0,\n                distR: 0,\n                distT: 0,\n            };\n\n            const isInHeaderFooter = this._isInsertInHeaderFooter();\n\n            if (isInHeaderFooter) {\n                docDrawingParam.isMultiTransform = BooleanNumber.TRUE;\n                docDrawingParam.transforms = docDrawingParam.transform ? [docDrawingParam.transform] : null;\n            }\n\n            docDrawingParams.push(docDrawingParam);\n        }\n\n        this._commandService.executeCommand(InsertDocDrawingCommand.id, {\n            unitId,\n            drawings: docDrawingParams,\n        } as IInsertDrawingCommandParams);\n    }\n\n    private _isInsertInHeaderFooter() {\n        const { unitId } = this._context;\n        const viewModel = this._renderManagerSrv.getRenderById(unitId)\n            ?.with(DocSkeletonManagerService)\n            .getViewModel();\n\n        const editArea = viewModel?.getEditArea();\n\n        return editArea === DocumentEditArea.HEADER || editArea === DocumentEditArea.FOOTER;\n    }\n\n    private _getImagePosition(\n        imageWidth: number,\n        imageHeight: number\n    ): Nullable<IDocDrawingPosition> {\n        const activeTextRange = this._docSelectionRenderService.getActiveTextRange();\n        // TODO: NO need to get the cursor position, because the insert image is inline.\n        const position = activeTextRange?.getAbsolutePosition() || {\n            left: 0,\n            top: 0,\n        };\n\n        return {\n            size: {\n                width: imageWidth,\n                height: imageHeight,\n            },\n            positionH: {\n                relativeFrom: ObjectRelativeFromH.PAGE,\n                posOffset: position.left,\n            },\n            positionV: {\n                relativeFrom: ObjectRelativeFromV.PARAGRAPH,\n                posOffset: 0,\n            },\n            angle: 0,\n        };\n    }\n\n    private _updateOrderListener() {\n        this._drawingManagerService.featurePluginOrderUpdate$.subscribe((params) => {\n            const { unitId, subUnitId, drawingIds, arrangeType } = params;\n\n            this._commandService.executeCommand(SetDocDrawingArrangeCommand.id, {\n                unitId,\n                subUnitId,\n                drawingIds,\n                arrangeType,\n            } as ISetDrawingArrangeCommandParams);\n        });\n    }\n\n    private _groupDrawingListener() {\n        this._drawingManagerService.featurePluginGroupUpdate$.subscribe((params) => {\n            this._commandService.executeCommand(GroupDocDrawingCommand.id, params);\n        });\n\n        this._drawingManagerService.featurePluginUngroupUpdate$.subscribe((params) => {\n            this._commandService.executeCommand(UngroupDocDrawingCommand.id, params);\n        });\n    }\n\n    private _getCurrentSceneAndTransformer() {\n        const { scene, mainComponent } = this._context;\n\n        if (scene == null || mainComponent == null) {\n            return;\n        }\n\n        const transformer = scene.getTransformerByCreate();\n\n        const { docsLeft, docsTop } = (mainComponent as Documents).getOffsetConfig();\n\n        return { scene, transformer, docsLeft, docsTop };\n    }\n\n    private _transformDrawingListener() {\n        const res = this._getCurrentSceneAndTransformer();\n        if (res && res.transformer) {\n            this.disposeWithMe(res.transformer.changeEnd$.pipe(debounceTime(30)).subscribe((params) => {\n                this._docSelectionManagerService.refreshSelection();\n            }));\n        } else {\n            throw new Error('transformer is not init');\n        }\n    }\n\n    private _focusDrawingListener() {\n        this.disposeWithMe(\n            this._drawingManagerService.focus$.subscribe((params) => {\n                const { transformer, docsLeft, docsTop } = this._getCurrentSceneAndTransformer() ?? {};\n                if (params == null || params.length === 0) {\n                    this._contextService.setContextValue(FOCUSING_COMMON_DRAWINGS, false);\n                    this._docDrawingService.focusDrawing([]);\n\n                    if (transformer) {\n                        transformer.resetProps({\n                            zeroTop: 0,\n                            zeroLeft: 0,\n                        });\n                    }\n                } else {\n                    this._contextService.setContextValue(FOCUSING_COMMON_DRAWINGS, true);\n                    this._docDrawingService.focusDrawing(params);\n                    this._setDrawingSelections(params);\n                    const prevSegmentId = this._docSelectionRenderService.getSegment();\n                    const segmentId = this._findSegmentIdByDrawingId(params[0].drawingId);\n\n                    // Change segmentId when click drawing in different segment.\n                    if (prevSegmentId !== segmentId) {\n                        this._docSelectionRenderService.setSegment(segmentId);\n                    }\n\n                    if (transformer) {\n                        transformer.resetProps({\n                            zeroTop: docsTop,\n                            zeroLeft: docsLeft,\n                        });\n                    }\n                }\n            })\n        );\n    }\n\n    private _findSegmentIdByDrawingId(drawingId: string) {\n        const { unit: DocDataModel } = this._context;\n\n        const { body, headers = {}, footers = {} } = DocDataModel.getSnapshot();\n\n        const bodyCustomBlocks = body?.customBlocks ?? [];\n\n        if (bodyCustomBlocks.some((b) => b.blockId === drawingId)) {\n            return '';\n        }\n\n        for (const headerId of Object.keys(headers)) {\n            if (headers[headerId].body.customBlocks?.some((b) => b.blockId === drawingId)) {\n                return headerId;\n            }\n        }\n\n        for (const footerId of Object.keys(footers)) {\n            if (footers[footerId].body.customBlocks?.some((b) => b.blockId === drawingId)) {\n                return footerId;\n            }\n        }\n\n        return '';\n    }\n\n    // Update drawings edit status and opacity. You can not edit header footer images when you are editing body. and vice verse.\n    private _updateDrawingsEditStatus() {\n        const { unit: docDataModel, scene, unitId } = this._context;\n        const viewModel = this._renderManagerSrv\n            .getRenderById(unitId)\n            ?.with(DocSkeletonManagerService)\n            .getViewModel();\n\n        if (viewModel == null || docDataModel == null) {\n            return;\n        }\n\n        const snapshot = docDataModel.getSnapshot();\n        const { drawings = {} } = snapshot;\n        const isEditBody = viewModel.getEditArea() === DocumentEditArea.BODY;\n\n        for (const key of Object.keys(drawings)) {\n            const drawing = drawings[key];\n            const objectKey = getDrawingShapeKeyByDrawingSearch({ unitId, drawingId: drawing.drawingId, subUnitId: unitId });\n            const drawingShapes = scene.fuzzyMathObjects(objectKey, true);\n\n            if (drawingShapes.length) {\n                for (const shape of drawingShapes) {\n                    scene.detachTransformerFrom(shape);\n                    try {\n                        (shape as Image).setOpacity(0.5);\n                    } catch (e) {\n                    }\n                    if (\n                        (isEditBody && drawing.isMultiTransform !== BooleanNumber.TRUE)\n                        || (!isEditBody && drawing.isMultiTransform === BooleanNumber.TRUE)\n                    ) {\n                        if (drawing.allowTransform !== false) {\n                            scene.attachTransformerTo(shape);\n                        }\n\n                        try {\n                            (shape as Image).setOpacity(1);\n                        } catch (e) {\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private _editAreaChangeListener() {\n        const { unitId } = this._context;\n        const viewModel = this._renderManagerSrv\n            .getRenderById(unitId)\n            ?.with(DocSkeletonManagerService)\n            .getViewModel();\n\n        if (viewModel == null) {\n            return;\n        }\n\n        this._updateDrawingsEditStatus();\n\n        this.disposeWithMe(\n            viewModel.editAreaChange$.subscribe(() => {\n                this._updateDrawingsEditStatus();\n            })\n        );\n\n        this._docRefreshDrawingsService.refreshDrawings$.subscribe((skeleton) => {\n            if (skeleton == null) {\n                return;\n            }\n\n            // To wait the image is rendered.\n            queueMicrotask(() => {\n                this._updateDrawingsEditStatus();\n            });\n        });\n\n        this.disposeWithMe(\n            this._commandService.onCommandExecuted(async (command: ICommandInfo) => {\n                if (command.id === RichTextEditingMutation.id) {\n                    // To wait the image is rendered.\n                    queueMicrotask(() => {\n                        this._updateDrawingsEditStatus();\n                    });\n                }\n            })\n        );\n    }\n\n    private _setDrawingSelections(params: IDrawingParam[]) {\n        const { unit } = this._context;\n        const customBlocks = unit.getSnapshot().body?.customBlocks ?? [];\n        const ranges = params.map((item) => {\n            const id = item.drawingId;\n            const block = customBlocks.find((b) => b.blockId === id);\n            if (block) {\n                return block.startIndex;\n            }\n            return null;\n        }).filter((e) => e !== null).map((offset) => ({ startOffset: offset, endOffset: offset + 1 }));\n        this._docSelectionManagerService.replaceDocRanges(ranges);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommand, Nullable } from '@univerjs/core';\nimport { CommandType, IUniverInstanceService, UniverInstanceType } from '@univerjs/core';\nimport { getCurrentTypeOfRenderer, IRenderManagerService } from '@univerjs/engine-render';\nimport { DocDrawingUpdateRenderController } from '../../controllers/render-controllers/doc-drawing-update.render-controller';\n\nexport interface IInsertDocImageCommandParams {\n    files: Nullable<File[]>;\n};\n\nexport const InsertDocImageCommand: ICommand<IInsertDocImageCommandParams> = {\n    id: 'doc.command.insert-float-image',\n    type: CommandType.COMMAND,\n    handler: (accessor) => {\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        const renderManagerService = accessor.get(IRenderManagerService);\n        return getCurrentTypeOfRenderer(UniverInstanceType.UNIVER_DOC, univerInstanceService, renderManagerService)\n            ?.with(DocDrawingUpdateRenderController)\n            .insertDocImage() ?? false;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand } from '@univerjs/core';\nimport { CommandType, Direction, ICommandService, IUniverInstanceService, PositionedObjectLayoutType } from '@univerjs/core';\nimport type { IDocDrawing } from '@univerjs/docs-drawing';\nimport { IDocDrawingService } from '@univerjs/docs-drawing';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport type { IDrawingDocTransform, IUpdateDrawingDocTransformParams } from './update-doc-drawing.command';\nimport { UpdateDrawingDocTransformCommand } from './update-doc-drawing.command';\n\nexport interface IMoveDrawingsCommandParams {\n    direction: Direction;\n}\n\nexport const MoveDocDrawingsCommand: ICommand = {\n\n    id: 'doc.command.move-drawing',\n\n    type: CommandType.COMMAND,\n    handler: (accessor: IAccessor, params: IMoveDrawingsCommandParams) => {\n        const commandService = accessor.get(ICommandService);\n        const docDrawingService = accessor.get(IDocDrawingService);\n        const univerInstanceService = accessor.get(IUniverInstanceService);\n        const renderManagerService = accessor.get(IRenderManagerService);\n\n        const { direction } = params;\n\n        const drawings = docDrawingService.getFocusDrawings();\n\n        if (drawings.length === 0) {\n            return false;\n        }\n\n        const unitId = drawings[0].unitId;\n\n        const renderObject = renderManagerService.getRenderById(unitId);\n        const scene = renderObject?.scene;\n        if (scene == null) {\n            return false;\n        }\n        const transformer = scene.getTransformerByCreate();\n\n        const documentDataModel = univerInstanceService.getUniverDocInstance(unitId);\n\n        const newDrawings = drawings.map((drawing) => {\n            const { drawingId } = drawing as IDocDrawing;\n            const drawingData = documentDataModel?.getSnapshot().drawings?.[drawingId];\n\n            // Inline drawing can not be moved by shortcut.\n            if (drawingData == null || drawingData.layoutType === PositionedObjectLayoutType.INLINE) {\n                return null;\n            }\n\n            const { positionH, positionV } = drawingData.docTransform;\n\n            const newPositionH = { ...positionH };\n            const newPositionV = { ...positionV };\n\n            if (direction === Direction.UP) {\n                newPositionV.posOffset = (newPositionV.posOffset ?? 0) - 2;\n            } else if (direction === Direction.DOWN) {\n                newPositionV.posOffset = (newPositionV.posOffset ?? 0) + 2;\n            } else if (direction === Direction.LEFT) {\n                newPositionH.posOffset = (newPositionH.posOffset ?? 0) - 2;\n            } else if (direction === Direction.RIGHT) {\n                newPositionH.posOffset = (newPositionH.posOffset ?? 0) + 2;\n            }\n\n            return {\n                drawingId,\n                key: direction === Direction.UP || direction === Direction.DOWN ? 'positionV' : 'positionH',\n                value: direction === Direction.UP || direction === Direction.DOWN ? newPositionV : newPositionH,\n            } as IDrawingDocTransform;\n        }).filter((drawing) => drawing != null) as IDrawingDocTransform[];\n\n        if (newDrawings.length === 0) {\n            return false;\n        }\n\n        const result = commandService.syncExecuteCommand<IUpdateDrawingDocTransformParams>(UpdateDrawingDocTransformCommand.id, {\n            unitId,\n            subUnitId: unitId,\n            drawings: newDrawings,\n        });\n\n        transformer.refreshControls();\n\n        return Boolean(result);\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IMutation } from '@univerjs/core';\nimport { CommandType } from '@univerjs/core';\nimport { IRenderManagerService } from '@univerjs/engine-render';\n\nexport const ClearDocDrawingTransformerOperation: IMutation<string[]> = {\n    id: 'doc.operation.clear-drawing-transformer',\n    type: CommandType.MUTATION,\n    handler: (accessor, params) => {\n        const renderManagerService = accessor.get(IRenderManagerService);\n\n        params.forEach((unitId) => {\n            renderManagerService.getRenderById(unitId)?.scene.getTransformer()?.debounceRefreshControls();\n        });\n\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const COMPONENT_DOC_DRAWING_PANEL = 'COMPONENT_DOC_DRAWING_PANEL';\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, ICommand } from '@univerjs/core';\nimport { CommandType, LocaleService } from '@univerjs/core';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { ISidebarService } from '@univerjs/ui';\nimport { COMPONENT_DOC_DRAWING_PANEL } from '../../views/doc-image-panel/component-name';\n\nexport interface IUIComponentCommandParams {\n    value: string;\n}\n\nexport const SidebarDocDrawingOperation: ICommand = {\n    id: 'sidebar.operation.doc-image',\n    type: CommandType.COMMAND,\n    handler: async (accessor: IAccessor, params: IUIComponentCommandParams) => {\n        const sidebarService = accessor.get(ISidebarService);\n        const localeService = accessor.get(LocaleService);\n        const drawingManagerService = accessor.get(IDrawingManagerService);\n\n        switch (params.value) {\n            case 'open':\n                sidebarService.open({\n                    header: { title: localeService.t('docImage.panel.title') },\n                    children: { label: COMPONENT_DOC_DRAWING_PANEL },\n                    onClose: () => {\n                        drawingManagerService.focusDrawing(null);\n                    },\n                    width: 360,\n                });\n                break;\n            case 'close':\n            default:\n                sidebarService.close();\n                break;\n        }\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor, IDrawingSearch, IOperation } from '@univerjs/core';\nimport {\n    CommandType,\n    ICommandService,\n\n} from '@univerjs/core';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { SidebarDocDrawingOperation } from './open-drawing-panel.operation';\n\n// Use to open drawing edit panel.\nexport const EditDocDrawingOperation: IOperation<IDrawingSearch> = {\n    id: 'doc.operation.edit-doc-image',\n    type: CommandType.OPERATION,\n    handler: (accessor: IAccessor, params?: IDrawingSearch) => {\n        const drawingManagerService = accessor.get(IDrawingManagerService);\n        const commandService = accessor.get(ICommandService);\n\n        if (params == null) {\n            return false;\n        }\n        drawingManagerService.focusDrawing([params]);\n        commandService.executeCommand(SidebarDocDrawingOperation.id, { value: 'open' });\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDrawingParam } from '@univerjs/core';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { DrawingCommonPanel } from '@univerjs/drawing-ui';\nimport { useDependency } from '@univerjs/ui';\nimport React, { useEffect, useState } from 'react';\nimport { DocDrawingPosition } from './DocDrawingPosition';\nimport { DocDrawingTextWrap } from './DocDrawingTextWrap';\nimport styles from './index.module.less';\n\nexport const DocDrawingPanel = () => {\n    const drawingManagerService = useDependency(IDrawingManagerService);\n    const focusDrawings = drawingManagerService.getFocusDrawings();\n\n    const [drawings, setDrawings] = useState<IDrawingParam[]>(focusDrawings);\n\n    useEffect(() => {\n        const focusDispose = drawingManagerService.focus$.subscribe((drawings) => {\n            setDrawings(drawings);\n        });\n\n        return () => {\n            focusDispose.unsubscribe();\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return !!drawings?.length && (\n        <div className={styles.imageCommonPanel}>\n            <DrawingCommonPanel drawings={drawings} hasAlign={false} hasCropper={false} hasGroup={false} hasTransform={false} />\n            <DocDrawingTextWrap drawings={drawings} />\n            <DocDrawingPosition drawings={drawings} />\n        </div>\n    );\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommandInfo, IDrawingParam, IObjectPositionH, IObjectPositionV, Nullable } from '@univerjs/core';\nimport type { IDocDrawing } from '@univerjs/docs-drawing';\nimport type { IDocumentSkeletonDrawing } from '@univerjs/engine-render';\nimport { DocumentFlavor, ICommandService, IUniverInstanceService, LocaleService, ObjectRelativeFromH, ObjectRelativeFromV, PositionedObjectLayoutType } from '@univerjs/core';\nimport { Checkbox, clsx, InputNumber, Select } from '@univerjs/design';\nimport { DocSkeletonManagerService, RichTextEditingMutation } from '@univerjs/docs';\nimport { DocSelectionRenderService } from '@univerjs/docs-ui';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { useDependency } from '@univerjs/ui';\nimport { useEffect, useState } from 'react';\nimport { UpdateDrawingDocTransformCommand } from '../../commands/commands/update-doc-drawing.command';\nimport styles from './index.module.less';\n\nconst MIN_OFFSET = -1000;\nconst MAX_OFFSET = 1000;\n\nexport interface IDocDrawingPositionProps {\n    drawings: IDrawingParam[];\n}\n\nexport const DocDrawingPosition = (props: IDocDrawingPositionProps) => {\n    const commandService = useDependency(ICommandService);\n    const localeService = useDependency(LocaleService);\n    const drawingManagerService = useDependency(IDrawingManagerService);\n    const renderManagerService = useDependency(IRenderManagerService);\n    const univerInstanceService = useDependency(IUniverInstanceService);\n\n    const { drawings } = props;\n\n    const drawingParam = drawings[0] as IDocDrawing;\n\n    if (drawingParam == null) {\n        return;\n    }\n\n    const { unitId } = drawingParam;\n\n    const documentDataModel = univerInstanceService.getUniverDocInstance(unitId);\n\n    const documentFlavor = documentDataModel?.getSnapshot().documentStyle.documentFlavor;\n\n    const renderObject = renderManagerService.getRenderById(unitId);\n    const scene = renderObject?.scene;\n    if (scene == null) {\n        return;\n    }\n    const transformer = scene.getTransformerByCreate();\n\n    const HORIZONTAL_RELATIVE_FROM = [{\n        label: localeService.t('image-position.column'),\n        value: String(ObjectRelativeFromH.COLUMN),\n    }, {\n        label: localeService.t('image-position.page'),\n        value: String(ObjectRelativeFromH.PAGE),\n    }, {\n        label: localeService.t('image-position.margin'),\n        value: String(ObjectRelativeFromH.MARGIN),\n    }];\n\n    const VERTICAL_RELATIVE_FROM = [{\n        label: localeService.t('image-position.line'),\n        value: String(ObjectRelativeFromV.LINE),\n        disabled: documentFlavor === DocumentFlavor.MODERN,\n    }, {\n        label: localeService.t('image-position.page'),\n        value: String(ObjectRelativeFromV.PAGE),\n        disabled: documentFlavor === DocumentFlavor.MODERN,\n    }, {\n        label: localeService.t('image-position.margin'),\n        value: String(ObjectRelativeFromV.MARGIN),\n        disabled: documentFlavor === DocumentFlavor.MODERN,\n    }, {\n        label: localeService.t('image-position.paragraph'),\n        value: String(ObjectRelativeFromV.PARAGRAPH),\n    }];\n\n    const [disabled, setDisabled] = useState(true);\n    const [hPosition, setHPosition] = useState<IObjectPositionH>({\n        relativeFrom: ObjectRelativeFromH.PAGE,\n        posOffset: 0,\n    });\n    const [vPosition, setVPosition] = useState<IObjectPositionV>({\n        relativeFrom: ObjectRelativeFromV.PAGE,\n        posOffset: 0,\n    });\n    const [followTextMove, setFollowTextMove] = useState(true);\n    const [showPanel, setShowPanel] = useState(true);\n\n    function handlePositionChange(\n        direction: 'positionH' | 'positionV',\n        value: IObjectPositionH | IObjectPositionV\n    ) {\n        if (direction === 'positionH') {\n            setHPosition(value as IObjectPositionH);\n        } else {\n            setVPosition(value as IObjectPositionV);\n        }\n\n        const focusDrawings = drawingManagerService.getFocusDrawings();\n        if (focusDrawings.length === 0) {\n            return;\n        }\n\n        const drawings = focusDrawings.map((drawing) => {\n            return {\n                unitId: drawing.unitId,\n                subUnitId: drawing.subUnitId,\n                drawingId: drawing.drawingId,\n            };\n        });\n\n        commandService.executeCommand(UpdateDrawingDocTransformCommand.id, {\n            unitId: focusDrawings[0].unitId,\n            subUnitId: focusDrawings[0].unitId,\n            drawings: drawings.map((drawing) => ({\n                drawingId: drawing.drawingId,\n                key: direction,\n                value,\n            })),\n        });\n\n        const docSelectionRenderService = renderManagerService.getRenderById(unitId)?.with(DocSelectionRenderService);\n\n        if (docSelectionRenderService) {\n            docSelectionRenderService.blur();\n        }\n\n        transformer.refreshControls();\n    }\n\n    function handleHorizontalRelativeFromChange(value: string) {\n        const prevRelativeFrom = hPosition.relativeFrom;\n        const prevPosOffset = hPosition.posOffset;\n        const relativeFrom = Number(value) as ObjectRelativeFromH;\n\n        if (prevRelativeFrom === relativeFrom) {\n            return;\n        }\n\n        const focusDrawings = drawingManagerService.getFocusDrawings();\n        if (focusDrawings.length === 0) {\n            return;\n        }\n\n        const drawingId = focusDrawings[0].drawingId;\n        const unitId = focusDrawings[0].unitId;\n\n        let drawing: Nullable<IDocumentSkeletonDrawing> = null;\n        let pageMarginLeft = 0;\n        const skeleton = renderManagerService.getRenderById(unitId)\n            ?.with(DocSkeletonManagerService)\n            .getSkeleton();\n\n        const skeletonData = skeleton?.getSkeletonData();\n\n        if (skeletonData == null) {\n            return;\n        }\n\n        const { pages, skeHeaders, skeFooters } = skeletonData;\n\n        for (const page of pages) {\n            const { marginLeft, skeDrawings, headerId, footerId, pageWidth } = page;\n\n            if (skeDrawings.has(drawingId)) {\n                drawing = skeDrawings.get(drawingId);\n                pageMarginLeft = marginLeft;\n                break;\n            }\n\n            const headerPage = skeHeaders.get(headerId)?.get(pageWidth);\n            if (headerPage?.skeDrawings.has(drawingId)) {\n                drawing = headerPage?.skeDrawings.get(drawingId);\n                pageMarginLeft = marginLeft;\n                break;\n            }\n\n            const footerPage = skeFooters.get(footerId)?.get(pageWidth);\n            if (footerPage?.skeDrawings.has(drawingId)) {\n                drawing = footerPage?.skeDrawings.get(drawingId);\n                pageMarginLeft = marginLeft;\n                break;\n            }\n        }\n\n        if (drawing == null) {\n            return;\n        }\n\n        let delta = 0;\n\n        if (prevRelativeFrom === ObjectRelativeFromH.COLUMN) {\n            delta -= drawing.columnLeft;\n        } else if (prevRelativeFrom === ObjectRelativeFromH.MARGIN) {\n            delta -= pageMarginLeft;\n        }\n\n        if (relativeFrom === ObjectRelativeFromH.COLUMN) {\n            delta += drawing.columnLeft;\n        } else if (relativeFrom === ObjectRelativeFromH.MARGIN) {\n            delta += pageMarginLeft;\n        } else if (relativeFrom === ObjectRelativeFromH.PAGE) {\n            // Do nothing.\n        }\n\n        const newPositionH = {\n            relativeFrom,\n            posOffset: (prevPosOffset ?? 0) - delta,\n        };\n\n        handlePositionChange('positionH', newPositionH);\n    }\n\n    function handleVerticalRelativeFromChange(value: string) {\n        const prevRelativeFrom = vPosition.relativeFrom;\n        const prevPosOffset = vPosition.posOffset;\n        const relativeFrom = Number(value) as ObjectRelativeFromV;\n\n        if (prevRelativeFrom === relativeFrom) {\n            return;\n        }\n\n        const focusDrawings = drawingManagerService.getFocusDrawings();\n        if (focusDrawings.length === 0) {\n            return;\n        }\n\n        const { drawingId, unitId } = focusDrawings[0];\n        const documentDataModel = univerInstanceService.getUniverDocInstance(unitId);\n        const skeleton = renderManagerService.getRenderById(unitId)\n            ?.with(DocSkeletonManagerService)\n            .getSkeleton();\n\n        const docSelectionRenderService = renderManagerService.getRenderById(unitId)?.with(DocSelectionRenderService);\n\n        const segmentId = docSelectionRenderService?.getSegment();\n        const segmentPage = docSelectionRenderService?.getSegmentPage();\n\n        const drawing = documentDataModel?.getSelfOrHeaderFooterModel(segmentId).getBody()?.customBlocks?.find((c) => c.blockId === drawingId);\n\n        if (drawing == null || skeleton == null || docSelectionRenderService == null) {\n            return;\n        }\n\n        const { startIndex } = drawing;\n\n        const glyph = skeleton.findNodeByCharIndex(startIndex, segmentId, segmentPage);\n        const line = glyph?.parent?.parent;\n        const column = line?.parent;\n        const paragraphStartLine = column?.lines.find((l) => l.paragraphIndex === line?.paragraphIndex && l.paragraphStart);\n        const page = column?.parent?.parent;\n\n        if (glyph == null || line == null || paragraphStartLine == null || column == null || page == null) {\n            return;\n        }\n\n        let delta = 0;\n\n        if (prevRelativeFrom === ObjectRelativeFromV.PARAGRAPH) {\n            delta -= paragraphStartLine.top;\n        } else if (prevRelativeFrom === ObjectRelativeFromV.LINE) {\n            delta -= line.top;\n        } else if (prevRelativeFrom === ObjectRelativeFromV.PAGE) {\n            delta += page.marginTop;\n        }\n\n        if (relativeFrom === ObjectRelativeFromV.PARAGRAPH) {\n            delta += paragraphStartLine.top;\n        } else if (relativeFrom === ObjectRelativeFromV.LINE) {\n            delta += line.top;\n        } else if (relativeFrom === ObjectRelativeFromV.PAGE) {\n            delta -= page.marginTop;\n        }\n\n        const newPositionV = {\n            relativeFrom,\n            posOffset: (prevPosOffset ?? 0) - delta,\n        };\n\n        handlePositionChange('positionV', newPositionV);\n    }\n\n    function updateState(drawingParam: IDrawingParam) {\n        const snapshot = documentDataModel?.getSnapshot();\n        const drawing = snapshot?.drawings?.[drawingParam.drawingId];\n        if (drawing == null) {\n            return;\n        }\n\n        const { layoutType } = drawing;\n        const {\n            positionH,\n            positionV,\n        } = drawing.docTransform;\n\n        setHPosition(positionH);\n        setVPosition(positionV);\n        setDisabled(layoutType === PositionedObjectLayoutType.INLINE);\n        setFollowTextMove(positionV.relativeFrom === ObjectRelativeFromV.PARAGRAPH || positionV.relativeFrom === ObjectRelativeFromV.LINE);\n    }\n\n    function updateFocusDrawingState() {\n        const focusDrawings = drawingManagerService.getFocusDrawings();\n        if (focusDrawings.length === 0) {\n            return;\n        }\n\n        updateState(focusDrawings[0]);\n    }\n\n    function handleFollowTextMoveCheck(val: string | number | boolean) {\n        setFollowTextMove(val as boolean);\n\n        handleVerticalRelativeFromChange(val ? String(ObjectRelativeFromV.PARAGRAPH) : String(ObjectRelativeFromV.PAGE));\n    }\n\n    useEffect(() => {\n        // Get the init focus drawing position.\n        updateFocusDrawingState();\n\n        // Need to update focus drawing position when focus drawing changes.\n        const subscription = drawingManagerService.focus$.subscribe((drawingParams) => {\n            if (drawingParams.length === 0) {\n                setShowPanel(false);\n                return;\n            }\n\n            setShowPanel(true);\n            updateState(drawingParams[0]);\n        });\n\n        // Need to update focus drawing position when focus drawing wrap style changed or other edit which will affect the position.\n        const mutationListener = commandService.onCommandExecuted(async (command: ICommandInfo) => {\n            if (command.id === RichTextEditingMutation.id) {\n                updateFocusDrawingState();\n            }\n        });\n\n        return () => {\n            subscription.unsubscribe();\n            mutationListener.dispose();\n        };\n    }, []);\n\n    return (\n        <div className={clsx(styles.imageCommonPanelGrid, styles.imageCommonPanelBorder)} style={{ display: showPanel ? 'block' : 'none' }}>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelTitle)}>\n                    <div>{localeService.t('image-position.title')}</div>\n                </div>\n            </div>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSubtitle)}>\n                    <div>{localeService.t('image-position.horizontal')}</div>\n                </div>\n            </div>\n\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2)}>\n                    <label>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                {localeService.t('image-position.absolutePosition')}\n                            </div>\n                        </div>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                <InputNumber\n                                    min={MIN_OFFSET}\n                                    max={MAX_OFFSET}\n                                    precision={1}\n                                    disabled={disabled}\n                                    value={hPosition.posOffset}\n                                    onChange={(val) => {\n                                        handlePositionChange('positionH', {\n                                            relativeFrom: hPosition.relativeFrom,\n                                            posOffset: val as number,\n                                        });\n                                    }}\n                                    className={styles.imageCommonPanelInput}\n                                />\n                            </div>\n                        </div>\n                    </label>\n                </div>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2)}>\n                    <label>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                {localeService.t('image-position.toTheRightOf')}\n                            </div>\n                        </div>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                <Select\n                                    value={String(hPosition.relativeFrom)}\n                                    disabled={disabled}\n                                    options={HORIZONTAL_RELATIVE_FROM}\n                                    onChange={handleHorizontalRelativeFromChange}\n                                />\n                            </div>\n                        </div>\n                    </label>\n                </div>\n            </div>\n\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSubtitle)}>\n                    <div>{localeService.t('image-position.vertical')}</div>\n                </div>\n            </div>\n\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2)}>\n                    <label>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                {localeService.t('image-position.absolutePosition')}\n                            </div>\n                        </div>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                <InputNumber\n                                    min={MIN_OFFSET}\n                                    max={MAX_OFFSET}\n                                    precision={1}\n                                    disabled={disabled}\n                                    value={vPosition.posOffset}\n                                    onChange={(val) => {\n                                        handlePositionChange('positionV', {\n                                            relativeFrom: vPosition.relativeFrom,\n                                            posOffset: val as number,\n                                        });\n                                    }}\n                                    className={styles.imageCommonPanelInput}\n                                />\n                            </div>\n                        </div>\n                    </label>\n                </div>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2)}>\n                    <label>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                {localeService.t('image-position.bellow')}\n                            </div>\n                        </div>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                <Select\n                                    disabled={disabled}\n                                    value={String(vPosition.relativeFrom)}\n                                    options={VERTICAL_RELATIVE_FROM}\n                                    onChange={handleVerticalRelativeFromChange}\n                                />\n                            </div>\n                        </div>\n                    </label>\n                </div>\n            </div>\n\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSubtitle)}>\n                    <div>{localeService.t('image-position.options')}</div>\n                </div>\n            </div>\n\n            <div className={styles.imageCommonPanelRow} style={{ marginBottom: '50px' }}>\n                <div className={styles.imageCommonPanelColumn}>\n                    <Checkbox disabled={disabled} checked={followTextMove} onChange={handleFollowTextMoveCheck}>{localeService.t('image-position.moveObjectWithText')}</Checkbox>\n                </div>\n            </div>\n        </div>\n    );\n};\n", "export default {\n  \"imageCommonPanel\": \"univer-image-common-panel\",\n  \"imageCommonPanelGrid\": \"univer-image-common-panel-grid\",\n  \"imageCommonPanelBorder\": \"univer-image-common-panel-border\",\n  \"imageCommonPanelTitle\": \"univer-image-common-panel-title\",\n  \"imageCommonPanelSubtitle\": \"univer-image-common-panel-subtitle\",\n  \"imageCommonPanelRow\": \"univer-image-common-panel-row\",\n  \"imageCommonPanelRowVertical\": \"univer-image-common-panel-row-vertical\",\n  \"imageCommonPanelColumn\": \"univer-image-common-panel-column\",\n  \"imageCommonPanelColumnCenter\": \"univer-image-common-panel-column-center\",\n  \"imageCommonPanelInline\": \"univer-image-common-panel-inline\",\n  \"imageCommonPanelSpan2\": \"univer-image-common-panel-span2\",\n  \"imageCommonPanelSpan3\": \"univer-image-common-panel-span3\",\n  \"imageCommonPanelInput\": \"univer-image-common-panel-input\",\n  \"sheetImageMenu\": \"univer-sheet-image-menu\",\n  \"sheetImageMenuInput\": \"univer-sheet-image-menu-input\"\n};import \"ni:sha-256;ju7Z9wNOA42XOjXov20QG9WU_zCEweIrwNdf_Rlc8Bg\";", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommandInfo, IDrawingParam, Nullable } from '@univerjs/core';\nimport type { IDocDrawing } from '@univerjs/docs-drawing';\nimport { BooleanNumber, ICommandService, IUniverInstanceService, LocaleService, PositionedObjectLayoutType, WrapTextType } from '@univerjs/core';\nimport { clsx, InputNumber, Radio, RadioGroup } from '@univerjs/design';\nimport { RichTextEditingMutation } from '@univerjs/docs';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { useDependency } from '@univerjs/ui';\nimport { useEffect, useState } from 'react';\nimport { TextWrappingStyle, UpdateDocDrawingDistanceCommand, UpdateDocDrawingWrappingStyleCommand, UpdateDocDrawingWrapTextCommand } from '../../commands/commands/update-doc-drawing.command';\nimport styles from './index.module.less';\n\nconst MIN_MARGIN = 0;\nconst MAX_MARGIN = 100;\n\nexport interface IDocDrawingTextWrapProps {\n    drawings: IDrawingParam[];\n}\n\ninterface IDistToText {\n    distT: number;\n    distL: number;\n    distB: number;\n    distR: number;\n}\n\nexport const DocDrawingTextWrap = (props: IDocDrawingTextWrapProps) => {\n    const commandService = useDependency(ICommandService);\n    const localeService = useDependency(LocaleService);\n    const drawingManagerService = useDependency(IDrawingManagerService);\n    const renderManagerService = useDependency(IRenderManagerService);\n    const univerInstanceService = useDependency(IUniverInstanceService);\n\n    const { drawings } = props;\n\n    const drawingParam = drawings[0] as IDocDrawing;\n\n    if (drawingParam == null) {\n        return null;\n    }\n\n    const { unitId } = drawingParam;\n\n    const documentDataModel = univerInstanceService.getUniverDocInstance(unitId);\n\n    const renderObject = renderManagerService.getRenderById(unitId);\n    const scene = renderObject?.scene;\n    if (scene == null) {\n        return null;\n    }\n\n    const [disableWrapText, setDisableWrapText] = useState(true);\n    const [disableDistTB, setDisableDistTB] = useState(true);\n    const [disableDistLR, setDisableDistLR] = useState(true);\n    const [wrappingStyle, setWrappingStyle] = useState(TextWrappingStyle.INLINE);\n    const [wrapText, setWrapText] = useState('');\n    const [distToText, setDistToText] = useState<IDistToText>({\n        distT: 0,\n        distL: 0,\n        distB: 0,\n        distR: 0,\n    });\n    const [showPanel, setShowPanel] = useState(true);\n\n    function handleWrappingStyleChange(value: number | string | boolean) {\n        setWrappingStyle(value as TextWrappingStyle);\n\n        const focusDrawings = drawingManagerService.getFocusDrawings();\n        if (focusDrawings.length === 0) {\n            return;\n        }\n\n        const { unitId, subUnitId } = focusDrawings[0];\n\n        const drawings = focusDrawings.map(({ unitId, subUnitId, drawingId }) => ({\n            unitId,\n            subUnitId,\n            drawingId,\n        }));\n\n        commandService.executeCommand(UpdateDocDrawingWrappingStyleCommand.id, {\n            unitId,\n            subUnitId,\n            drawings,\n            wrappingStyle: value as TextWrappingStyle,\n        });\n    }\n\n    function handleWrapTextChange(value: number | string | boolean) {\n        setWrapText(value as string);\n\n        const focusDrawings = drawingManagerService.getFocusDrawings();\n        if (focusDrawings.length === 0) {\n            return;\n        }\n\n        const drawings = focusDrawings.map((drawing) => {\n            return {\n                unitId: drawing.unitId,\n                subUnitId: drawing.subUnitId,\n                drawingId: drawing.drawingId,\n            };\n        });\n\n        commandService.executeCommand(UpdateDocDrawingWrapTextCommand.id, {\n            unitId: focusDrawings[0].unitId,\n            subUnitId: focusDrawings[0].unitId,\n            drawings,\n            wrapText: value as WrapTextType,\n        });\n    }\n\n    function handleDistToTextChange(value: Nullable<number>, direction: keyof IDistToText) {\n        if (value == null) {\n            return;\n        }\n\n        const newDistToText = { ...distToText, [direction]: value };\n        setDistToText(newDistToText as IDistToText);\n\n        const focusDrawings = drawingManagerService.getFocusDrawings();\n        if (focusDrawings.length === 0) {\n            return;\n        }\n\n        const drawings = focusDrawings.map((drawing) => {\n            return {\n                unitId: drawing.unitId,\n                subUnitId: drawing.subUnitId,\n                drawingId: drawing.drawingId,\n            };\n        });\n\n        commandService.executeCommand(UpdateDocDrawingDistanceCommand.id, {\n            unitId: focusDrawings[0].unitId,\n            subUnitId: focusDrawings[0].unitId,\n            drawings,\n            dist: {\n                [direction]: value,\n            },\n        });\n    }\n\n    function updateFocusDrawingState() {\n        const focusDrawings = drawingManagerService.getFocusDrawings();\n        if (focusDrawings.length === 0) {\n            return;\n        }\n\n        updateState(focusDrawings[0]);\n    }\n\n    function updateState(drawingParam: IDrawingParam) {\n        const drawing = documentDataModel?.getSnapshot()?.drawings?.[drawingParam.drawingId];\n        if (drawing == null) {\n            return;\n        }\n\n        const {\n            distT = 0,\n            distL = 0,\n            distB = 0,\n            distR = 0,\n            layoutType = PositionedObjectLayoutType.INLINE,\n            behindDoc = BooleanNumber.FALSE,\n            wrapText = WrapTextType.BOTH_SIDES,\n        } = drawing;\n        const distToText = {\n            distT,\n            distL,\n            distB,\n            distR,\n        };\n\n        setDistToText(distToText);\n\n        setWrapText(wrapText as unknown as string);\n\n        setDisableWrapText(layoutType !== PositionedObjectLayoutType.WRAP_SQUARE);\n\n        if (\n            layoutType === PositionedObjectLayoutType.WRAP_NONE ||\n            layoutType === PositionedObjectLayoutType.INLINE\n        ) {\n            setDisableDistTB(true);\n        } else {\n            setDisableDistTB(false);\n        }\n\n        if (\n            layoutType === PositionedObjectLayoutType.WRAP_NONE ||\n            layoutType === PositionedObjectLayoutType.INLINE ||\n            layoutType === PositionedObjectLayoutType.WRAP_TOP_AND_BOTTOM\n        ) {\n            setDisableDistLR(true);\n        } else {\n            setDisableDistLR(false);\n        }\n\n        if (layoutType === PositionedObjectLayoutType.WRAP_NONE) {\n            if (behindDoc === BooleanNumber.TRUE) {\n                setWrappingStyle(TextWrappingStyle.BEHIND_TEXT);\n            } else {\n                setWrappingStyle(TextWrappingStyle.IN_FRONT_OF_TEXT);\n            }\n        } else {\n            switch (layoutType) {\n                case PositionedObjectLayoutType.INLINE:\n                    setWrappingStyle(TextWrappingStyle.INLINE);\n                    break;\n                case PositionedObjectLayoutType.WRAP_SQUARE:\n                    setWrappingStyle(TextWrappingStyle.WRAP_SQUARE);\n                    break;\n                case PositionedObjectLayoutType.WRAP_TOP_AND_BOTTOM:\n                    setWrappingStyle(TextWrappingStyle.WRAP_TOP_AND_BOTTOM);\n                    break;\n                default:\n                    throw new Error(`Unsupported layout type: ${layoutType}`);\n            }\n        }\n    }\n\n    useEffect(() => {\n        updateFocusDrawingState();\n\n        const subscription = drawingManagerService.focus$.subscribe((drawingParams) => {\n            if (drawingParams.length === 0) {\n                setShowPanel(false);\n                return;\n            }\n\n            setShowPanel(true);\n            updateState(drawingParams[0]);\n        });\n\n        // Need to update focus drawing position when focus drawing wrap style changed or other edit which will affect the position.\n        const mutationListener = commandService.onCommandExecuted(async (command: ICommandInfo) => {\n            if (command.id === RichTextEditingMutation.id) {\n                updateFocusDrawingState();\n            }\n        });\n\n        return () => {\n            subscription.unsubscribe();\n            mutationListener.dispose();\n        };\n    }, []);\n\n    return (\n        <div className={clsx(styles.imageCommonPanelGrid, styles.imageCommonPanelBorder)} style={{ display: showPanel ? 'block' : 'none' }}>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelTitle)}>\n                    <div>{localeService.t('image-text-wrap.title')}</div>\n                </div>\n            </div>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSubtitle)}>\n                    <div>{localeService.t('image-text-wrap.wrappingStyle')}</div>\n                </div>\n            </div>\n            <div className={clsx(styles.imageCommonPanelRow)}>\n                <div className={clsx(styles.imageCommonPanelColumn)}>\n                    <RadioGroup value={wrappingStyle} onChange={handleWrappingStyleChange} direction=\"vertical\">\n                        <Radio value={TextWrappingStyle.INLINE}>{localeService.t('image-text-wrap.inline')}</Radio>\n                        <Radio value={TextWrappingStyle.WRAP_SQUARE}>{localeService.t('image-text-wrap.square')}</Radio>\n                        <Radio value={TextWrappingStyle.WRAP_TOP_AND_BOTTOM}>{localeService.t('image-text-wrap.topAndBottom')}</Radio>\n                        <Radio value={TextWrappingStyle.BEHIND_TEXT}>{localeService.t('image-text-wrap.behindText')}</Radio>\n                        <Radio value={TextWrappingStyle.IN_FRONT_OF_TEXT}>{localeService.t('image-text-wrap.inFrontText')}</Radio>\n                    </RadioGroup>\n                </div>\n            </div>\n\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSubtitle)}>\n                    <div>{localeService.t('image-text-wrap.wrapText')}</div>\n                </div>\n            </div>\n            <div className={clsx(styles.imageCommonPanelRow)}>\n                <div className={clsx(styles.imageCommonPanelColumn)}>\n                    <RadioGroup disabled={disableWrapText} value={wrapText} onChange={handleWrapTextChange} direction=\"horizontal\">\n                        <Radio value={WrapTextType.BOTH_SIDES}>{localeService.t('image-text-wrap.bothSide')}</Radio>\n                        <Radio value={WrapTextType.LEFT}>{localeService.t('image-text-wrap.leftOnly')}</Radio>\n                        <Radio value={WrapTextType.RIGHT}>{localeService.t('image-text-wrap.rightOnly')}</Radio>\n                    </RadioGroup>\n                </div>\n            </div>\n\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSubtitle)}>\n                    <div>{localeService.t('image-text-wrap.distanceFromText')}</div>\n                </div>\n            </div>\n\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2)}>\n                    <label>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                {localeService.t('image-text-wrap.top')}\n                            </div>\n                        </div>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                <InputNumber\n                                    min={MIN_MARGIN}\n                                    max={MAX_MARGIN}\n                                    disabled={disableDistTB}\n                                    precision={1}\n                                    value={distToText.distT}\n                                    onChange={(val) => { handleDistToTextChange(val, 'distT'); }}\n                                    className={styles.imageCommonPanelInput}\n                                />\n                            </div>\n                        </div>\n                    </label>\n                </div>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2)}>\n                    <label>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                {localeService.t('image-text-wrap.left')}\n                            </div>\n                        </div>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                <InputNumber\n                                    min={MIN_MARGIN}\n                                    max={MAX_MARGIN}\n                                    disabled={disableDistLR}\n                                    precision={1}\n                                    value={distToText.distL}\n                                    onChange={(val) => { handleDistToTextChange(val, 'distL'); }}\n                                    className={styles.imageCommonPanelInput}\n                                />\n                            </div>\n                        </div>\n                    </label>\n                </div>\n            </div>\n            <div className={styles.imageCommonPanelRow}>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2)}>\n                    <label>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                {localeService.t('image-text-wrap.bottom')}\n                            </div>\n                        </div>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                <InputNumber\n                                    min={MIN_MARGIN}\n                                    max={MAX_MARGIN}\n                                    disabled={disableDistTB}\n                                    precision={1}\n                                    value={distToText.distB}\n                                    onChange={(val) => { handleDistToTextChange(val, 'distB'); }}\n                                    className={styles.imageCommonPanelInput}\n                                />\n                            </div>\n                        </div>\n                    </label>\n                </div>\n                <div className={clsx(styles.imageCommonPanelColumn, styles.imageCommonPanelSpan2)}>\n                    <label>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                {localeService.t('image-text-wrap.right')}\n                            </div>\n                        </div>\n                        <div className={styles.imageCommonPanelRow}>\n                            <div className={styles.imageCommonPanelColumn}>\n                                <InputNumber\n                                    min={MIN_MARGIN}\n                                    max={MAX_MARGIN}\n                                    disabled={disableDistLR}\n                                    precision={1}\n                                    value={distToText.distR}\n                                    onChange={(val) => { handleDistToTextChange(val, 'distR'); }}\n                                    className={styles.imageCommonPanelInput}\n                                />\n                            </div>\n                        </div>\n                    </label>\n                </div>\n            </div>\n        </div>\n    );\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IAccessor } from '@univerjs/core';\nimport type { IMenuItem } from '@univerjs/ui';\nimport { DOCS_ZEN_EDITOR_UNIT_ID_KEY, IUniverInstanceService, UniverInstanceType } from '@univerjs/core';\n\nimport { DocSelectionManagerService } from '@univerjs/docs';\nimport { getMenuHiddenObservable, MenuItemType } from '@univerjs/ui';\nimport { Observable } from 'rxjs';\nimport { InsertDocImageCommand } from '../../commands/commands/insert-image.command';\n\nexport const ImageUploadIcon = 'addition-and-subtraction-single';\nexport const DOCS_IMAGE_MENU_ID = 'doc.menu.image';\nexport const IMAGE_MENU_UPLOAD_FLOAT_ID = InsertDocImageCommand.id;\n\n// TODO: @Jocs, remove this when cell support drawing.\nconst getDisableWhenSelectionInTableObservable = (accessor: IAccessor) => {\n    const docSelectionManagerService = accessor.get(DocSelectionManagerService);\n    const univerInstanceService = accessor.get(IUniverInstanceService);\n\n    return new Observable<boolean>((subscriber) => {\n        const observable = docSelectionManagerService.textSelection$.subscribe(() => {\n            const activeRange = docSelectionManagerService.getActiveTextRange();\n\n            if (activeRange) {\n                const { segmentId, startOffset, endOffset } = activeRange;\n                const docDataModel = univerInstanceService.getCurrentUniverDocInstance();\n                const tables = docDataModel?.getSelfOrHeaderFooterModel(segmentId).getBody()?.tables;\n\n                if (tables && tables.length) {\n                    if (tables.some((table) => {\n                        const { startIndex, endIndex } = table;\n                        return (startOffset >= startIndex && startOffset < endIndex) || (endOffset >= startIndex && endOffset < endIndex);\n                    })) {\n                        subscriber.next(true);\n                        return;\n                    }\n                }\n            } else {\n                subscriber.next(true);\n                return;\n            }\n\n            subscriber.next(false);\n        });\n\n        return () => observable.unsubscribe();\n    });\n};\n\nexport function ImageMenuFactory(accessor: IAccessor): IMenuItem {\n    return {\n        id: DOCS_IMAGE_MENU_ID,\n        type: MenuItemType.SUBITEMS,\n        icon: ImageUploadIcon,\n        tooltip: 'docImage.title',\n        disabled$: getDisableWhenSelectionInTableObservable(accessor),\n        hidden$: getMenuHiddenObservable(accessor, UniverInstanceType.UNIVER_DOC, undefined, DOCS_ZEN_EDITOR_UNIT_ID_KEY),\n    };\n}\n\nexport function UploadFloatImageMenuFactory(_accessor: IAccessor): IMenuItem {\n    return {\n        id: IMAGE_MENU_UPLOAD_FLOAT_ID,\n        title: 'docImage.upload.float',\n        type: MenuItemType.BUTTON,\n        hidden$: getMenuHiddenObservable(_accessor, UniverInstanceType.UNIVER_DOC, undefined, DOCS_ZEN_EDITOR_UNIT_ID_KEY),\n    };\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { MenuSchemaType } from '@univerjs/ui';\nimport { RibbonStartGroup } from '@univerjs/ui';\nimport {\n    DOCS_IMAGE_MENU_ID,\n    IMAGE_MENU_UPLOAD_FLOAT_ID,\n    ImageMenuFactory,\n    UploadFloatImageMenuFactory,\n} from '../views/menu/image.menu';\n\nexport const menuSchema: MenuSchemaType = {\n    [RibbonStartGroup.LAYOUT]: {\n        [DOCS_IMAGE_MENU_ID]: {\n            order: 0,\n            menuItemFactory: ImageMenuFactory,\n            [IMAGE_MENU_UPLOAD_FLOAT_ID]: {\n                order: 0,\n                menuItemFactory: UploadFloatImageMenuFactory,\n            },\n        },\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IContextService } from '@univerjs/core';\nimport { Direction, FOCUSING_COMMON_DRAWINGS, FOCUSING_UNIVER_EDITOR } from '@univerjs/core';\nimport type { IShortcutItem } from '@univerjs/ui';\nimport { KeyCode } from '@univerjs/ui';\nimport { type IMoveDrawingsCommandParams, MoveDocDrawingsCommand } from '../../commands/commands/move-drawings.command';\nimport { DeleteDocDrawingsCommand } from '../../commands/commands/delete-doc-drawing.command';\n\nexport function whenDocDrawingFocused(contextService: IContextService): boolean {\n    return (\n        contextService.getContextValue(FOCUSING_UNIVER_EDITOR) &&\n        contextService.getContextValue(FOCUSING_COMMON_DRAWINGS)\n    );\n}\n\nexport const MoveDrawingDownShortcutItem: IShortcutItem<IMoveDrawingsCommandParams> = {\n    id: MoveDocDrawingsCommand.id,\n    description: 'shortcut.doc.drawing-move-down',\n    group: '4_doc-drawing-view',\n    binding: KeyCode.ARROW_DOWN,\n    priority: 100,\n    preconditions: whenDocDrawingFocused,\n    staticParameters: {\n        direction: Direction.DOWN,\n    },\n};\n\nexport const MoveDrawingUpShortcutItem: IShortcutItem<IMoveDrawingsCommandParams> = {\n    id: MoveDocDrawingsCommand.id,\n    description: 'shortcut.doc.drawing-move-up',\n    group: '4_doc-drawing-view',\n    binding: KeyCode.ARROW_UP,\n    priority: 100,\n    preconditions: whenDocDrawingFocused,\n    staticParameters: {\n        direction: Direction.UP,\n    },\n};\n\nexport const MoveDrawingLeftShortcutItem: IShortcutItem<IMoveDrawingsCommandParams> = {\n    id: MoveDocDrawingsCommand.id,\n    description: 'shortcut.doc.drawing-move-left',\n    group: '4_doc-drawing-view',\n    binding: KeyCode.ARROW_LEFT,\n    priority: 100,\n    preconditions: whenDocDrawingFocused,\n    staticParameters: {\n        direction: Direction.LEFT,\n    },\n};\n\nexport const MoveDrawingRightShortcutItem: IShortcutItem<IMoveDrawingsCommandParams> = {\n    id: MoveDocDrawingsCommand.id,\n    description: 'shortcut.doc.drawing-move-right',\n    group: '4_doc-drawing-view',\n    binding: KeyCode.ARROW_RIGHT,\n    priority: 100,\n    preconditions: whenDocDrawingFocused,\n    staticParameters: {\n        direction: Direction.RIGHT,\n    },\n};\nexport const DeleteDrawingsShortcutItem: IShortcutItem = {\n    id: DeleteDocDrawingsCommand.id,\n    description: 'shortcut.doc.drawing-delete',\n    group: '4_doc-drawing-view',\n    // when focusing on any other input tag do not trigger this shortcut\n    preconditions: whenDocDrawingFocused,\n    binding: KeyCode.DELETE,\n    mac: KeyCode.BACKSPACE,\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Disposable, ICommandService, Inject } from '@univerjs/core';\nimport { AddImageSingle } from '@univerjs/icons';\n\nimport { ComponentManager, IMenuManagerService, IShortcutService } from '@univerjs/ui';\nimport { DeleteDocDrawingsCommand } from '../commands/commands/delete-doc-drawing.command';\nimport { GroupDocDrawingCommand } from '../commands/commands/group-doc-drawing.command';\nimport { InsertDocDrawingCommand } from '../commands/commands/insert-doc-drawing.command';\n\nimport { InsertDocImageCommand } from '../commands/commands/insert-image.command';\nimport { MoveDocDrawingsCommand } from '../commands/commands/move-drawings.command';\nimport { RemoveDocDrawingCommand } from '../commands/commands/remove-doc-drawing.command';\nimport { SetDocDrawingArrangeCommand } from '../commands/commands/set-drawing-arrange.command';\nimport { UngroupDocDrawingCommand } from '../commands/commands/ungroup-doc-drawing.command';\nimport { IMoveInlineDrawingCommand, ITransformNonInlineDrawingCommand, UpdateDocDrawingDistanceCommand, UpdateDocDrawingWrappingStyleCommand, UpdateDocDrawingWrapTextCommand, UpdateDrawingDocTransformCommand } from '../commands/commands/update-doc-drawing.command';\nimport { ClearDocDrawingTransformerOperation } from '../commands/operations/clear-drawing-transformer.operation';\nimport { EditDocDrawingOperation } from '../commands/operations/edit-doc-drawing.operation';\nimport { SidebarDocDrawingOperation } from '../commands/operations/open-drawing-panel.operation';\nimport { COMPONENT_DOC_DRAWING_PANEL } from '../views/doc-image-panel/component-name';\nimport { DocDrawingPanel } from '../views/doc-image-panel/DocDrawingPanel';\nimport { ImageUploadIcon } from '../views/menu/image.menu';\nimport { menuSchema } from './menu.schema';\nimport { DeleteDrawingsShortcutItem, MoveDrawingDownShortcutItem, MoveDrawingLeftShortcutItem, MoveDrawingRightShortcutItem, MoveDrawingUpShortcutItem } from './shortcuts/drawing.shortcut';\n\nexport class DocDrawingUIController extends Disposable {\n    constructor(\n        @Inject(ComponentManager) private readonly _componentManager: ComponentManager,\n        @IMenuManagerService private readonly _menuManagerService: IMenuManagerService,\n        @ICommandService private readonly _commandService: ICommandService,\n        @IShortcutService private readonly _shortcutService: IShortcutService\n    ) {\n        super();\n\n        this._init();\n    }\n\n    private _initCustomComponents(): void {\n        const componentManager = this._componentManager;\n        this.disposeWithMe(componentManager.register(ImageUploadIcon, AddImageSingle));\n        this.disposeWithMe(componentManager.register(COMPONENT_DOC_DRAWING_PANEL, DocDrawingPanel));\n    }\n\n    private _initMenus(): void {\n        this._menuManagerService.mergeMenu(menuSchema);\n    }\n\n    private _initCommands() {\n        [\n            InsertDocImageCommand,\n            InsertDocDrawingCommand,\n            UpdateDocDrawingWrappingStyleCommand,\n            UpdateDocDrawingDistanceCommand,\n            UpdateDocDrawingWrapTextCommand,\n            UpdateDrawingDocTransformCommand,\n            IMoveInlineDrawingCommand,\n            ITransformNonInlineDrawingCommand,\n            RemoveDocDrawingCommand,\n            SidebarDocDrawingOperation,\n            ClearDocDrawingTransformerOperation,\n            EditDocDrawingOperation,\n            GroupDocDrawingCommand,\n            UngroupDocDrawingCommand,\n            MoveDocDrawingsCommand,\n            DeleteDocDrawingsCommand,\n            SetDocDrawingArrangeCommand,\n        ].forEach((command) => this.disposeWithMe(this._commandService.registerCommand(command)));\n    }\n\n    private _initShortcuts(): void {\n        [\n            // sheet drawing shortcuts\n            MoveDrawingDownShortcutItem,\n            MoveDrawingUpShortcutItem,\n            MoveDrawingLeftShortcutItem,\n            MoveDrawingRightShortcutItem,\n            DeleteDrawingsShortcutItem,\n        ].forEach((item) => {\n            this.disposeWithMe(this._shortcutService.registerShortcut(item));\n        });\n    }\n\n    private _init(): void {\n        this._initCommands();\n        this._initCustomComponents();\n        this._initMenus();\n        this._initShortcuts();\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DocumentDataModel, IDisposable, IDrawingSearch, Nullable } from '@univerjs/core';\nimport type { IDocFloatDom } from '@univerjs/docs-drawing';\nimport type { ISetDocZoomRatioOperationParams } from '@univerjs/docs-ui';\nimport type { IDocFloatDomDataBase } from '@univerjs/drawing';\nimport type { IRender, Rect } from '@univerjs/engine-render';\nimport type { IFloatDomLayout } from '@univerjs/ui';\nimport type { IInsertDrawingCommandParams } from '../commands/commands/interfaces';\nimport { Disposable, DisposableCollection, DrawingTypeEnum, fromEventSubject, generateRandomId, ICommandService, Inject, IUniverInstanceService, ObjectRelativeFromH, ObjectRelativeFromV, PositionedObjectLayoutType, toDisposable, UniverInstanceType } from '@univerjs/core';\nimport { DocSkeletonManagerService } from '@univerjs/docs';\nimport { docDrawingPositionToTransform, SetDocZoomRatioOperation, VIEWPORT_KEY } from '@univerjs/docs-ui';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { DrawingRenderService } from '@univerjs/drawing-ui';\nimport { CURSOR_TYPE, IRenderManagerService } from '@univerjs/engine-render';\nimport { CanvasFloatDomService } from '@univerjs/ui';\nimport { BehaviorSubject, map, of, switchMap } from 'rxjs';\nimport { InsertDocDrawingCommand } from '../commands/commands/insert-doc-drawing.command';\n\nfunction calcDocFloatDomPosition(\n    object: Rect,\n    renderUnit: IRender\n): IFloatDomLayout {\n    const { top, left, width, height, angle, opacity } = object;\n    // const\n    const scene = renderUnit.scene;\n    const viewMain = scene.getViewport(VIEWPORT_KEY.VIEW_MAIN)!;\n    const { viewportScrollX, viewportScrollY } = viewMain;\n    const { scaleX, scaleY } = scene.getAncestorScale();\n\n    return {\n        startX: (left - viewportScrollX) * scaleX,\n        startY: (top - viewportScrollY) * scaleY,\n        endX: (left + width - viewportScrollX) * scaleX,\n        endY: (top + height - viewportScrollY) * scaleY,\n        width,\n        height,\n        rotate: angle,\n        absolute: {\n            left: false,\n            top: false,\n        },\n        opacity: opacity ?? 1,\n    };\n}\n\ninterface ICanvasFloatDomInfo {\n    position$: BehaviorSubject<IFloatDomLayout>;\n    dispose: IDisposable;\n    rect: Rect;\n    unitId: string;\n}\n\ninterface IDocFloatDomParams extends IDocFloatDomDataBase {\n}\n\nexport class DocFloatDomController extends Disposable {\n    private _domLayerInfoMap = new Map<string, ICanvasFloatDomInfo>();\n\n    constructor(\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService,\n        @IDrawingManagerService private readonly _drawingManagerService: IDrawingManagerService,\n        @Inject(DrawingRenderService) private readonly _drawingRenderService: DrawingRenderService,\n        @Inject(CanvasFloatDomService) private readonly _canvasFloatDomService: CanvasFloatDomService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @ICommandService private readonly _commandService: ICommandService\n    ) {\n        super();\n\n        this._initialize();\n    }\n\n    override dispose(): void {\n        super.dispose();\n    }\n\n    private _initialize() {\n        this._drawingAddRemoveListener();\n        this._initScrollAndZoomEvent();\n    }\n\n    private _getSceneAndTransformerByDrawingSearch(unitId: Nullable<string>) {\n        if (unitId == null) {\n            return;\n        }\n\n        const renderObject = this._renderManagerService.getRenderById(unitId);\n\n        if (renderObject == null) {\n            return null;\n        }\n\n        const scene = renderObject.scene;\n\n        const transformer = scene.getTransformerByCreate();\n\n        return { scene, transformer, renderUnit: renderObject, canvas: renderObject.engine.getCanvasElement() };\n    }\n\n    private _drawingAddRemoveListener() {\n        this.disposeWithMe(\n            this._drawingManagerService.add$.subscribe((params) => {\n                this._insertRects(params);\n            })\n        );\n\n        this.disposeWithMe(\n            this._drawingManagerService.remove$.subscribe((params) => {\n                params.forEach((param) => {\n                    this._removeDom(param.drawingId);\n                });\n            })\n        );\n    }\n\n    private _insertRects(params: IDrawingSearch[]) {\n        (params).forEach(async (param) => {\n            const { unitId } = param;\n            const documentDataModel = this._univerInstanceService.getUnit(unitId, UniverInstanceType.UNIVER_DOC);\n            if (!documentDataModel) {\n                return;\n            }\n\n            const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n\n            if (renderObject == null) {\n                return;\n            }\n\n            const rectParam = this._drawingManagerService.getDrawingByParam(param) as IDocFloatDom;\n            if (rectParam == null) {\n                return;\n            }\n\n            const rects = await this._drawingRenderService.renderFloatDom(rectParam, renderObject.scene);\n            if (rects == null || rects.length === 0) {\n                return;\n            }\n\n            for (const rect of rects) {\n                this._addHoverForRect(rect);\n                const disposableCollection = new DisposableCollection();\n                const initPosition = calcDocFloatDomPosition(rect, renderObject.renderUnit);\n                const position$ = new BehaviorSubject<IFloatDomLayout>(initPosition);\n                const canvas = renderObject.canvas;\n                const data = rectParam.data;\n\n                const info: ICanvasFloatDomInfo = {\n                    dispose: disposableCollection,\n                    rect,\n                    position$,\n                    unitId,\n                };\n\n                this._canvasFloatDomService.addFloatDom({\n                    position$,\n                    id: rectParam.drawingId,\n                    componentKey: rectParam.componentKey,\n                    onPointerDown: (evt) => {\n                        canvas.dispatchEvent(new PointerEvent(evt.type, evt));\n                    },\n                    onPointerMove: (evt: PointerEvent | MouseEvent) => {\n                        canvas.dispatchEvent(new PointerEvent(evt.type, evt));\n                    },\n                    onPointerUp: (evt: PointerEvent | MouseEvent) => {\n                        canvas.dispatchEvent(new PointerEvent(evt.type, evt));\n                    },\n                    onWheel: (evt: WheelEvent) => {\n                        canvas.dispatchEvent(new WheelEvent(evt.type, evt));\n                    },\n                    data,\n                    unitId,\n                });\n\n                const listener = rect.onTransformChange$.subscribeEvent(() => {\n                    const newPosition = calcDocFloatDomPosition(rect, renderObject.renderUnit);\n                    position$.next(\n                        newPosition\n                    );\n                });\n\n                disposableCollection.add(() => {\n                    this._canvasFloatDomService.removeFloatDom(rectParam.drawingId);\n                });\n                listener && disposableCollection.add(listener);\n                this._domLayerInfoMap.set(rectParam.drawingId, info);\n            }\n        });\n    }\n\n    private _addHoverForRect(o: Rect) {\n        this.disposeWithMe(\n            toDisposable(\n                o.onPointerEnter$.subscribeEvent(() => {\n                    o.cursor = CURSOR_TYPE.GRAB;\n                })\n            )\n        );\n\n        this.disposeWithMe(\n            toDisposable(\n                o.onPointerLeave$.subscribeEvent(() => {\n                    o.cursor = CURSOR_TYPE.DEFAULT;\n                })\n            )\n        );\n    }\n\n    private _removeDom(id: string) {\n        const info = this._domLayerInfoMap.get(id);\n        if (!info) {\n            return;\n        }\n        const { unitId } = info;\n        this._domLayerInfoMap.delete(id);\n\n        info.dispose.dispose();\n        const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n        if (renderObject) {\n            renderObject.scene.removeObject(info.rect);\n        }\n    }\n\n    private _initScrollAndZoomEvent() {\n        const updateDoc = (unitId: string) => {\n            const renderObject = this._getSceneAndTransformerByDrawingSearch(unitId);\n            if (!renderObject) {\n                return;\n            }\n            this._domLayerInfoMap.forEach((floatDomInfo) => {\n                if (floatDomInfo.unitId !== unitId) return;\n                const position = calcDocFloatDomPosition(floatDomInfo.rect, renderObject.renderUnit);\n                floatDomInfo.position$.next(position);\n            });\n        };\n\n        this.disposeWithMe(\n            this._univerInstanceService.getCurrentTypeOfUnit$<DocumentDataModel>(UniverInstanceType.UNIVER_DOC).pipe(\n                map((documentDataModel) => {\n                    if (!documentDataModel) return null;\n                    const unitId = documentDataModel.getUnitId();\n                    const render = this._renderManagerService.getRenderById(unitId);\n                    return render ? { render, unitId } : null;\n                }),\n                switchMap((render) =>\n                    render\n                        ? fromEventSubject(render.render.scene.getViewport(VIEWPORT_KEY.VIEW_MAIN)!.onScrollAfter$)\n                            .pipe(map(() => ({ unitId: render.unitId })))\n                        : of(null)\n                )\n            ).subscribe((value) => {\n                if (!value) return;\n                const { unitId } = value;\n                updateDoc(unitId);\n            })\n        );\n\n        this.disposeWithMe(this._commandService.onCommandExecuted((commandInfo) => {\n            if (commandInfo.id === SetDocZoomRatioOperation.id) {\n                const params = (commandInfo.params) as ISetDocZoomRatioOperationParams;\n                const { unitId } = params;\n                updateDoc(unitId);\n            }\n        }));\n    }\n\n    insertFloatDom(floatDom: IDocFloatDomParams, opts: { width?: number; height: number; drawingId?: string }) {\n        const currentDoc = this._univerInstanceService.getCurrentUnitOfType(UniverInstanceType.UNIVER_DOC);\n        if (!currentDoc) return false;\n        const render = this._getSceneAndTransformerByDrawingSearch(currentDoc.getUnitId());\n        if (!render) return false;\n        const docSkeletonManagerService = render.renderUnit.with(DocSkeletonManagerService);\n        const skeleton = docSkeletonManagerService.getSkeleton();\n        const page = skeleton.getSkeletonData()?.pages[0];\n        if (!page) return false;\n        const { pageWidth, marginLeft, marginRight } = page;\n        const width = pageWidth - marginLeft - marginRight;\n        const docTransform = {\n            size: {\n                width: opts.width ?? width,\n                height: opts.height,\n            },\n            positionH: {\n                relativeFrom: ObjectRelativeFromH.PAGE,\n                posOffset: 0,\n            },\n            positionV: {\n                relativeFrom: ObjectRelativeFromV.PAGE,\n                posOffset: 0,\n            },\n            angle: 0,\n        };\n        const drawingId = opts.drawingId ?? generateRandomId();\n        const params: IInsertDrawingCommandParams = {\n            unitId: currentDoc.getUnitId(),\n            drawings: [\n                {\n                    drawingId,\n                    drawingType: DrawingTypeEnum.DRAWING_DOM,\n                    subUnitId: currentDoc.getUnitId(),\n                    unitId: currentDoc.getUnitId(),\n                    ...floatDom,\n                    title: '',\n                    description: '',\n                    docTransform,\n                    layoutType: PositionedObjectLayoutType.INLINE,\n                    transform: docDrawingPositionToTransform(docTransform),\n                },\n            ],\n        };\n        this._commandService.syncExecuteCommand(InsertDocDrawingCommand.id, params);\n\n        return drawingId;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DocumentDataModel, IDisposable, Nullable } from '@univerjs/core';\nimport type { BaseObject, Scene } from '@univerjs/engine-render';\nimport { DrawingTypeEnum, FOCUSING_COMMON_DRAWINGS, IContextService, Inject, IUniverInstanceService, RxDisposable, SHEET_EDITOR_UNITS, toDisposable, UniverInstanceType } from '@univerjs/core';\nimport { DocCanvasPopManagerService } from '@univerjs/docs-ui';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { COMPONENT_IMAGE_POPUP_MENU, ImageCropperObject, ImageResetSizeOperation, OpenImageCropOperation } from '@univerjs/drawing-ui';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { takeUntil } from 'rxjs';\nimport { RemoveDocDrawingCommand } from '../commands/commands/remove-doc-drawing.command';\nimport { EditDocDrawingOperation } from '../commands/operations/edit-doc-drawing.operation';\n\nexport class DocDrawingPopupMenuController extends RxDisposable {\n    private _initImagePopupMenu = new Set<string>();\n\n    constructor(\n        @IDrawingManagerService private readonly _drawingManagerService: IDrawingManagerService,\n        @Inject(DocCanvasPopManagerService) private readonly _canvasPopManagerService: DocCanvasPopManagerService,\n        @IRenderManagerService private readonly _renderManagerService: IRenderManagerService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService,\n        @IContextService private readonly _contextService: IContextService\n\n    ) {\n        super();\n\n        this._init();\n    }\n\n    private _init(): void {\n        this._univerInstanceService.getCurrentTypeOfUnit$<DocumentDataModel>(UniverInstanceType.UNIVER_DOC).pipe(takeUntil(this.dispose$)).subscribe((documentDataModel) => this._create(documentDataModel));\n        this._univerInstanceService.getTypeOfUnitDisposed$<DocumentDataModel>(UniverInstanceType.UNIVER_DOC).pipe(takeUntil(this.dispose$)).subscribe((documentDataModel) => this._dispose(documentDataModel));\n        this._univerInstanceService.getAllUnitsForType<DocumentDataModel>(UniverInstanceType.UNIVER_DOC).forEach((documentDataModel) => this._create(documentDataModel));\n    }\n\n    private _dispose(documentDataModel: DocumentDataModel) {\n        const unitId = documentDataModel.getUnitId();\n        this._renderManagerService.removeRender(unitId);\n    }\n\n    private _create(documentDataModel: Nullable<DocumentDataModel>) {\n        if (!documentDataModel) {\n            return;\n        }\n\n        const unitId = documentDataModel.getUnitId();\n        if (this._renderManagerService.has(unitId) && !this._initImagePopupMenu.has(unitId)) {\n            this._popupMenuListener(unitId);\n            this._initImagePopupMenu.add(unitId);\n        }\n    }\n\n    private _hasCropObject(scene: Scene) {\n        const objects = scene.getAllObjects();\n\n        for (const object of objects) {\n            if (object instanceof ImageCropperObject) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    // eslint-disable-next-line max-lines-per-function\n    private _popupMenuListener(unitId: string) {\n        const scene = this._renderManagerService.getRenderById(unitId)?.scene;\n        if (!scene) {\n            return;\n        }\n        const transformer = scene.getTransformerByCreate();\n        if (!transformer) {\n            return;\n        }\n\n        const disposePopups: IDisposable[] = [];\n\n        this.disposeWithMe(\n            toDisposable(\n                transformer.createControl$.subscribe(() => {\n                    if (this._hasCropObject(scene)) {\n                        return;\n                    }\n\n                    const selectedObjects = transformer.getSelectedObjectMap();\n                    disposePopups.forEach((dispose) => dispose.dispose());\n                    disposePopups.length = 0;\n                    if (selectedObjects.size > 1) {\n                        return;\n                    }\n\n                    const object = selectedObjects.values().next().value as Nullable<BaseObject>;\n                    if (!object) {\n                        return;\n                    }\n\n                    const oKey = object.oKey;\n                    const drawingParam = this._drawingManagerService.getDrawingOKey(oKey);\n                    if (!drawingParam) {\n                        return;\n                    }\n\n                    const { unitId, subUnitId, drawingId, drawingType } = drawingParam;\n                    const popup = this._canvasPopManagerService.attachPopupToObject(\n                        object,\n                        {\n                            componentKey: COMPONENT_IMAGE_POPUP_MENU,\n                            direction: 'horizontal',\n                            offset: [2, 0],\n                            extraProps: {\n                                menuItems: this._getImageMenuItems(unitId, subUnitId, drawingId, drawingType),\n                            },\n                        },\n                        unitId\n                    );\n\n                    disposePopups.push(this.disposeWithMe(popup));\n\n                    const focusDrawings = this._drawingManagerService.getFocusDrawings();\n\n                    const alreadyFocused = focusDrawings.find((drawing) => drawing.unitId === unitId && drawing.subUnitId === subUnitId && drawing.drawingId === drawingId);\n\n                    if (alreadyFocused) {\n                        return;\n                    }\n\n                    this._drawingManagerService.focusDrawing([{\n                        unitId,\n                        subUnitId,\n                        drawingId,\n                    }]);\n                })\n            )\n        );\n\n        this.disposeWithMe(\n            toDisposable(\n                transformer.clearControl$.subscribe(() => {\n                    disposePopups.forEach((dispose) => dispose.dispose());\n                    disposePopups.length = 0;\n                    this._contextService.setContextValue(FOCUSING_COMMON_DRAWINGS, false);\n                    this._drawingManagerService.focusDrawing(null);\n                })\n            )\n        );\n        this.disposeWithMe(\n            toDisposable(\n                transformer.changing$.subscribe(() => {\n                    disposePopups.forEach((dispose) => dispose.dispose());\n                    disposePopups.length = 0;\n                })\n            )\n        );\n\n        this.disposeWithMe(\n            toDisposable(\n                transformer.changeStart$.subscribe(() => {\n                    disposePopups.forEach((dispose) => dispose.dispose());\n                    disposePopups.length = 0;\n                })\n            )\n        );\n    }\n\n    private _getImageMenuItems(unitId: string, subUnitId: string, drawingId: string, drawingType: number) {\n        return [\n            {\n                label: 'image-popup.edit',\n                index: 0,\n                commandId: EditDocDrawingOperation.id,\n                commandParams: { unitId, subUnitId, drawingId },\n                disable: !!SHEET_EDITOR_UNITS.includes(unitId) || drawingType === DrawingTypeEnum.DRAWING_DOM,\n            },\n            {\n                label: 'image-popup.delete',\n                index: 1,\n                commandId: RemoveDocDrawingCommand.id,\n                commandParams: { unitId, drawings: [{ unitId, subUnitId, drawingId }] },\n                disable: false,\n            },\n            {\n                label: 'image-popup.crop',\n                index: 2,\n                commandId: OpenImageCropOperation.id,\n                commandParams: { unitId, subUnitId, drawingId },\n                disable: true, // TODO: @JOCS, feature is not ready.\n            },\n            {\n                label: 'image-popup.reset',\n                index: 3,\n                commandId: ImageResetSizeOperation.id,\n                commandParams: [{ unitId, subUnitId, drawingId }],\n                disable: true, // TODO: @JOCS, feature is not ready.\n            },\n        ];\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DocumentDataModel, ICommandInfo, IDrawingParam, ITransformState } from '@univerjs/core';\nimport type { IRichTextEditingMutationParams } from '@univerjs/docs';\nimport type { Documents, DocumentSkeleton, IDocumentSkeletonHeaderFooter, IDocumentSkeletonPage, Image, IRenderContext, IRenderModule } from '@univerjs/engine-render';\nimport {\n    BooleanNumber,\n    Disposable,\n    DOCS_ZEN_EDITOR_UNIT_ID_KEY,\n    fromEventSubject,\n    ICommandService,\n    Inject,\n    IUniverInstanceService,\n    LifecycleService,\n    LifecycleStages,\n    PositionedObjectLayoutType,\n} from '@univerjs/core';\nimport { DocSkeletonManagerService, RichTextEditingMutation } from '@univerjs/docs';\nimport { IEditorService, SetDocZoomRatioOperation } from '@univerjs/docs-ui';\nimport { IDrawingManagerService } from '@univerjs/drawing';\nimport { Liquid, TRANSFORM_CHANGE_OBSERVABLE_TYPE } from '@univerjs/engine-render';\nimport { debounceTime, filter } from 'rxjs';\nimport { DocRefreshDrawingsService } from '../../services/doc-refresh-drawings.service';\n\ninterface IDrawingParamsWithBehindText {\n    unitId: string;\n    subUnitId: string;\n    drawingId: string;\n    behindText: boolean;\n    transform: ITransformState;\n    transforms: ITransformState[];\n    // The same drawing render in different place, like image in header and footer.\n    // The default value is BooleanNumber.FALSE. if it's true, Please use transforms.\n    isMultiTransform: BooleanNumber;\n}\n\nexport class DocDrawingTransformUpdateController extends Disposable implements IRenderModule {\n    private _liquid = new Liquid();\n\n    constructor(\n        private readonly _context: IRenderContext<DocumentDataModel>,\n        @Inject(DocSkeletonManagerService) private readonly _docSkeletonManagerService: DocSkeletonManagerService,\n        @ICommandService private readonly _commandService: ICommandService,\n        @IEditorService private readonly _editorService: IEditorService,\n        @IDrawingManagerService private readonly _drawingManagerService: IDrawingManagerService,\n        @Inject(DocRefreshDrawingsService) private readonly _docRefreshDrawingsService: DocRefreshDrawingsService,\n        @IUniverInstanceService private _univerInstanceService: IUniverInstanceService,\n        @Inject(LifecycleService) private _lifecycleService: LifecycleService\n    ) {\n        super();\n\n        this._initialize();\n\n        this._commandExecutedListener();\n    }\n\n    private _initialize() {\n        this._initialRenderRefresh();\n        this._drawingInitializeListener();\n        this._initResize();\n    }\n\n    private _initialRenderRefresh() {\n        this._docSkeletonManagerService.currentSkeleton$.subscribe((documentSkeleton) => {\n            if (documentSkeleton == null) {\n                return;\n            }\n\n            this._refreshDrawing(documentSkeleton);\n        });\n\n        this._docRefreshDrawingsService.refreshDrawings$.subscribe((skeleton) => {\n            if (skeleton == null) {\n                return;\n            }\n\n            this._refreshDrawing(skeleton);\n        });\n    }\n\n    private _commandExecutedListener() {\n        const updateCommandList = [RichTextEditingMutation.id, SetDocZoomRatioOperation.id];\n\n        this.disposeWithMe(\n            this._commandService.onCommandExecuted((command: ICommandInfo) => {\n                if (updateCommandList.includes(command.id)) {\n                    const params = command.params as IRichTextEditingMutationParams;\n                    const { unitId: commandUnitId } = params;\n\n                    const { unitId, mainComponent } = this._context;\n\n                    if (commandUnitId !== unitId) {\n                        return;\n                    }\n\n                    const skeleton = this._docSkeletonManagerService.getSkeleton();\n\n                    if (skeleton == null) {\n                        return;\n                    }\n\n                    // TODO: @JOCS, Do not use unitId to check if it's need to render images or isEditor. maybe need a config?\n                    if (this._editorService.isEditor(unitId) && unitId !== DOCS_ZEN_EDITOR_UNIT_ID_KEY) {\n                        mainComponent?.makeDirty();\n                        return;\n                    }\n\n                    this._refreshDrawing(skeleton);\n                }\n            })\n        );\n    }\n\n    private _initResize() {\n        this.disposeWithMe(\n            fromEventSubject(this._context.engine.onTransformChange$).pipe(\n                filter((evt) => evt.type === TRANSFORM_CHANGE_OBSERVABLE_TYPE.resize),\n                debounceTime(16)\n            ).subscribe(() => {\n                const skeleton = this._docSkeletonManagerService.getSkeleton();\n                const { scene } = this._context;\n\n                scene.getTransformer()?.refreshControls();\n                this._refreshDrawing(skeleton);\n            })\n        );\n    }\n\n    private _refreshDrawing(skeleton: DocumentSkeleton) {\n        const skeletonData = skeleton?.getSkeletonData();\n        const { mainComponent, unitId } = this._context;\n        const documentComponent = mainComponent as Documents;\n\n        if (!skeletonData) {\n            return;\n        }\n\n        const { left: docsLeft, top: docsTop, pageLayoutType, pageMarginLeft, pageMarginTop } = documentComponent;\n        const { pages, skeHeaders, skeFooters } = skeletonData;\n        const updateDrawingMap: Record<string, IDrawingParamsWithBehindText> = {}; // IFloatingObjectManagerParam\n\n        this._liquid.reset();\n        /**\n         * TODO: @DR-Univer We should not refresh all floating elements, but instead make a diff.\n         */\n        for (let i = 0, len = pages.length; i < len; i++) {\n            const page = pages[i];\n            const { headerId, footerId, pageWidth } = page;\n\n            if (headerId) {\n                const headerPage = skeHeaders.get(headerId)?.get(pageWidth);\n\n                if (headerPage) {\n                    this._calculateDrawingPosition(\n                        unitId,\n                        headerPage,\n                        docsLeft,\n                        docsTop,\n                        updateDrawingMap,\n                        headerPage.marginTop,\n                        page.marginLeft\n                    );\n                }\n            }\n\n            if (footerId) {\n                const footerPage = skeFooters.get(footerId)?.get(pageWidth);\n\n                if (footerPage) {\n                    this._calculateDrawingPosition(\n                        unitId,\n                        footerPage,\n                        docsLeft,\n                        docsTop,\n                        updateDrawingMap,\n                        page.pageHeight - page.marginBottom + footerPage.marginTop,\n                        page.marginLeft\n                    );\n                }\n            }\n\n            this._calculateDrawingPosition(unitId, page, docsLeft, docsTop, updateDrawingMap, page.marginTop, page.marginLeft);\n            this._liquid.translatePage(page, pageLayoutType, pageMarginLeft, pageMarginTop);\n        }\n\n        const updateDrawings = Object.values(updateDrawingMap);\n\n        const nonMultiDrawings = updateDrawings.filter((drawing) => !drawing.isMultiTransform);\n        const multiDrawings = updateDrawings.filter((drawing) => drawing.isMultiTransform);\n        if (nonMultiDrawings.length > 0) {\n            this._drawingManagerService.refreshTransform(nonMultiDrawings as unknown as IDrawingParam[]);\n        }\n\n        // if multiDrawings length is 0, also need to remove current multi drawings.\n        this._handleMultiDrawingsTransform(multiDrawings as unknown as IDrawingParam[]);\n    }\n\n    private _handleMultiDrawingsTransform(multiDrawings: IDrawingParam[]) {\n        const { scene, unitId } = this._context;\n        const transformer = scene.getTransformerByCreate();\n\n        // Step 1: Update data in drawingManagerService.\n        multiDrawings.forEach((updateParam) => {\n            const param = this._drawingManagerService.getDrawingByParam(updateParam);\n            if (param == null) {\n                return;\n            }\n\n            param.transform = updateParam.transform;\n            param.transforms = updateParam.transforms;\n            param.isMultiTransform = updateParam.isMultiTransform;\n        });\n\n        // Step 2: remove all drawing shapes.\n        const selectedObjectMap = transformer.getSelectedObjectMap();\n        const selectedObjectKeys = [...selectedObjectMap.keys()];\n\n        const allMultiDrawings = Object.values(this._drawingManagerService.getDrawingData(unitId, unitId)).filter((drawing) => drawing.isMultiTransform === BooleanNumber.TRUE);\n\n        this._drawingManagerService.removeNotification(allMultiDrawings);\n        // Step 3: create new drawing shapes.\n        if (multiDrawings.length > 0) {\n            this._drawingManagerService.addNotification(multiDrawings);\n        }\n\n        // Step 4: reSelect previous shapes and focus previous drawings.\n        for (const key of selectedObjectKeys) {\n            const drawingShape = scene.getObject(key) as Image;\n\n            if (drawingShape) {\n                transformer.setSelectedControl(drawingShape);\n            }\n        }\n    }\n\n    private _calculateDrawingPosition(\n        unitId: string,\n        page: IDocumentSkeletonPage | IDocumentSkeletonHeaderFooter,\n        docsLeft: number,\n        docsTop: number,\n        updateDrawingMap: Record<string, IDrawingParamsWithBehindText>,\n        marginTop: number,\n        marginLeft: number\n    ) {\n        const { skeDrawings } = page;\n        this._liquid.translatePagePadding({\n            marginTop,\n            marginLeft,\n        } as IDocumentSkeletonPage);\n\n        skeDrawings.forEach((drawing) => {\n            const { aLeft, aTop, height, width, angle, drawingId, drawingOrigin } = drawing;\n            const behindText = drawingOrigin.layoutType === PositionedObjectLayoutType.WRAP_NONE && drawingOrigin.behindDoc === BooleanNumber.TRUE;\n            const { isMultiTransform = BooleanNumber.FALSE } = drawingOrigin;\n            const transform = {\n                left: aLeft + docsLeft + this._liquid.x,\n                top: aTop + docsTop + this._liquid.y,\n                width,\n                height,\n                angle,\n            };\n            if (updateDrawingMap[drawingId] == null) {\n                updateDrawingMap[drawingId] = {\n                    unitId,\n                    subUnitId: unitId,\n                    drawingId,\n                    behindText,\n                    transform,\n                    transforms: [transform],\n                    isMultiTransform,\n                };\n            } else if (isMultiTransform === BooleanNumber.TRUE) {\n                updateDrawingMap[drawingId].transforms.push(transform);\n            }\n        });\n\n        this._liquid.restorePagePadding({\n            marginTop,\n            marginLeft,\n        } as IDocumentSkeletonPage);\n    }\n\n    private _drawingInitializeListener() {\n        const init = () => {\n            const skeleton = this._docSkeletonManagerService.getSkeleton();\n            if (skeleton == null) {\n                return;\n            }\n\n            this._refreshDrawing(skeleton);\n\n            this._drawingManagerService.initializeNotification(this._context.unitId);\n        };\n\n        if (this._lifecycleService.stage === LifecycleStages.Steady) {\n            // wait for render unit ready\n            // TODO@weird94 need refactor later\n            setTimeout(() => {\n                init();\n            }, 1000);\n        } else {\n            this._lifecycleService.lifecycle$.pipe(filter((stage) => stage === LifecycleStages.Steady)).subscribe(init);\n        }\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport type { IUniverDocsDrawingUIConfig } from './controllers/config.schema';\nimport { DependentOn, IConfigService, Inject, Injector, merge, Plugin, UniverInstanceType } from '@univerjs/core';\nimport { UniverDocsDrawingPlugin } from '@univerjs/docs-drawing';\nimport { UniverDrawingPlugin } from '@univerjs/drawing';\nimport { UniverDrawingUIPlugin } from '@univerjs/drawing-ui';\nimport { IRenderManagerService } from '@univerjs/engine-render';\nimport { UniverUIPlugin } from '@univerjs/ui';\nimport { defaultPluginConfig, DOCS_DRAWING_UI_PLUGIN_CONFIG_KEY } from './controllers/config.schema';\nimport { DocDrawingAddRemoveController } from './controllers/doc-drawing-notification.controller';\nimport { DocDrawingTransformerController } from './controllers/doc-drawing-transformer-update.controller';\nimport { DocDrawingUIController } from './controllers/doc-drawing.controller';\nimport { DocFloatDomController } from './controllers/doc-float-dom.controller';\nimport { DocDrawingPopupMenuController } from './controllers/drawing-popup-menu.controller';\nimport { DocDrawingTransformUpdateController } from './controllers/render-controllers/doc-drawing-transform-update.controller';\nimport { DocDrawingUpdateRenderController } from './controllers/render-controllers/doc-drawing-update.render-controller';\nimport { DocRefreshDrawingsService } from './services/doc-refresh-drawings.service';\n\nconst PLUGIN_NAME = 'DOC_DRAWING_UI_PLUGIN';\n\n@DependentOn(UniverDrawingUIPlugin, UniverDrawingPlugin, UniverDocsDrawingPlugin, UniverUIPlugin)\nexport class UniverDocsDrawingUIPlugin extends Plugin {\n    static override type = UniverInstanceType.UNIVER_DOC;\n    static override pluginName = PLUGIN_NAME;\n\n    constructor(\n        private readonly _config: Partial<IUniverDocsDrawingUIConfig> = defaultPluginConfig,\n        @Inject(Injector) protected _injector: Injector,\n        @IRenderManagerService private readonly _renderManagerSrv: IRenderManagerService,\n        @IConfigService private readonly _configService: IConfigService\n    ) {\n        super();\n\n        // Manage the plugin configuration.\n        const { ...rest } = merge(\n            {},\n            defaultPluginConfig,\n            this._config\n        );\n        this._configService.setConfig(DOCS_DRAWING_UI_PLUGIN_CONFIG_KEY, rest);\n    }\n\n    override onStarting(): void {\n        const dependencies: Dependency[] = [\n            [DocDrawingUIController],\n            [DocDrawingPopupMenuController],\n            [DocDrawingTransformerController],\n            [DocDrawingAddRemoveController],\n            [DocRefreshDrawingsService],\n            [DocFloatDomController],\n        ];\n\n        dependencies.forEach((dependency) => this._injector.add(dependency));\n    }\n\n    override onReady(): void {\n        ([\n            [DocDrawingUpdateRenderController],\n            [DocDrawingTransformUpdateController],\n        ] as Dependency[]).forEach((m) => this._renderManagerSrv.registerRenderModule(UniverInstanceType.UNIVER_DOC, m));\n\n        this._injector.get(DocDrawingAddRemoveController);\n        this._injector.get(DocDrawingUIController);\n        this._injector.get(DocDrawingTransformerController);\n    }\n\n    override onRendered(): void {\n        this._injector.get(DocDrawingPopupMenuController);\n        this._injector.get(DocFloatDomController);\n    }\n}\n"],
  "mappings": "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",
  "names": ["customBlock", "_a", "unitId", "drawings", "import_react", "drawings", "unitId", "documentDataModel", "drawingParam", "import_react", "import_jsx_runtime", "unitId", "drawings", "subUnitId", "drawingParam", "wrapText", "distToText", "import_jsx_runtime", "drawings", "unitId"]
}
