{
  "version": 3,
  "sources": ["../../packages/thread-comment/src/services/tc-datasource.service.ts", "../../packages/thread-comment/src/models/thread-comment.model.ts", "../../packages/thread-comment/src/types/const/index.ts", "../../packages/thread-comment/src/controllers/tc-resource.controller.ts", "../../packages/thread-comment/src/commands/mutations/comment.mutation.ts", "../../packages/thread-comment/src/commands/commands/comment.command.ts", "../../packages/thread-comment/src/controllers/config.schema.ts", "../../packages/thread-comment/src/plugin.ts", "../../packages/thread-comment/src/common/utils.ts", "../../packages/thread-comment-ui/src/services/thread-comment-panel.service.ts", "../../packages/thread-comment-ui/src/types/const.ts", "../../packages/thread-comment-ui/src/commands/operations/comment.operations.ts", "../../packages/thread-comment-ui/src/controllers/config.schema.ts", "../../packages/thread-comment-ui/src/plugin.ts", "../../packages/thread-comment-ui/src/views/thread-comment-panel/index.tsx", "../../packages/thread-comment-ui/src/views/thread-comment-tree/index.tsx", "../../packages/thread-comment-ui/src/views/thread-comment-editor/index.tsx", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/thread-comment-ui/src/views/thread-comment-editor/index.module.less", "../../packages/thread-comment-ui/src/views/thread-comment-editor/util.ts", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/thread-comment-ui/src/views/thread-comment-tree/index.module.less", "/Users/zhongjiafeng/Desktop/5000_Project/github/univer/packages/thread-comment-ui/src/views/thread-comment-panel/index.module.less"],
  "sourcesContent": ["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Nullable } from '@univerjs/core';\nimport type { IBaseComment, IThreadComment } from '../types/interfaces/i-thread-comment';\nimport { createIdentifier, Disposable } from '@univerjs/core';\n\nexport type ThreadCommentJSON = {\n    id: string;\n    threadId: string;\n    ref: string;\n} & Partial<Omit<IThreadComment, 'id' | 'threadId' | 'ref'>>;\n\ntype Success = boolean;\n\nexport interface IThreadCommentDataSource {\n    /**\n     * handler for add-comment, throw error means fail and stop the process.\n     */\n    addComment: (comment: IThreadComment) => Promise<IThreadComment>;\n    /**\n     * handler for update-comment, throw error means fail and stop the process.\n     */\n    updateComment: (comment: IThreadComment) => Promise<Success>;\n    resolveComment: (comment: IThreadComment) => Promise<Success>;\n    /**\n     * handler for delete-comment, throw error means fail and stop the process.\n     */\n    deleteComment: (unitId: string, subUnitId: string, threadId: string, commentId: string,) => Promise<Success>;\n    /**\n     * handler for batch-fetch-comment, throw error means fail and stop the process.\n     */\n    listComments: (unitId: string, subUnitId: string, threadId: string[]) => Promise<IBaseComment[]>;\n    saveCommentToSnapshot: (comment: IThreadComment) => ThreadCommentJSON;\n}\n\nexport interface IThreadCommentDataSourceService {\n    dataSource: Nullable<IThreadCommentDataSource>;\n\n    /**\n     * should sync update mutations to collaboration-server\n     */\n    syncUpdateMutationToColla: boolean;\n\n    /**\n     * handler for add-comment, throw error means fail and stop the process.\n     */\n    addComment: (comment: IThreadComment) => Promise<IThreadComment>;\n    /**\n     * handler for update-comment, throw error means fail and stop the process.\n     */\n    updateComment: (comment: IThreadComment) => Promise<Success>;\n    /**\n     * handler for resolve-comment, throw error means fail and stop the process.\n     */\n    resolveComment: (comment: IThreadComment) => Promise<Success>;\n    /**\n     * handler for delete-comment, throw error means fail and stop the process.\n     */\n    deleteComment: (unitId: string, subUnitId: string, threadId: string, commentId: string) => Promise<Success>;\n    saveToSnapshot: (unitComments: Record<string, IThreadComment[]>, unitId: string) => Record<string, ThreadCommentJSON[]>;\n    getThreadComment: (unitId: string, subUnitId: string, threadId: string) => Promise<Nullable<IBaseComment>>;\n    listThreadComments: (unitId: string, subUnitId: string, threadId: string[]) => Promise<IBaseComment[] | false>;\n}\n\n/**\n * Preserve for import async comment system\n */\nexport class ThreadCommentDataSourceService extends Disposable implements IThreadCommentDataSourceService {\n    private _dataSource: Nullable<IThreadCommentDataSource> = null;\n    syncUpdateMutationToColla = true;\n\n    set dataSource(dataSource: Nullable<IThreadCommentDataSource>) {\n        this._dataSource = dataSource;\n    }\n\n    get dataSource() {\n        return this._dataSource;\n    }\n\n    constructor() {\n        super();\n    }\n\n    async getThreadComment(unitId: string, subUnitId: string, threadId: string): Promise<Nullable<IBaseComment>> {\n        if (this._dataSource) {\n            const comments = await this._dataSource.listComments(unitId, subUnitId, [threadId]);\n            return comments[0];\n        }\n\n        return null;\n    }\n\n    async addComment(comment: IThreadComment) {\n        if (this._dataSource) {\n            return this._dataSource.addComment(comment);\n        }\n        return { ...comment, threadId: comment.threadId ?? comment.id };\n    }\n\n    async updateComment(comment: IThreadComment) {\n        if (this._dataSource) {\n            return this._dataSource.updateComment(comment);\n        }\n        return true;\n    }\n\n    async resolveComment(comment: IThreadComment) {\n        if (this._dataSource) {\n            return this._dataSource.resolveComment(comment);\n        }\n        return true;\n    }\n\n    async deleteComment(unitId: string, subUnitId: string, threadId: string, commentId: string) {\n        if (this._dataSource) {\n            return this._dataSource.deleteComment(unitId, subUnitId, threadId, commentId);\n        }\n        return true;\n    }\n\n    async listThreadComments(unitId: string, subUnitId: string, threadIds: string[]) {\n        if (this.dataSource) {\n            return this.dataSource.listComments(unitId, subUnitId, threadIds);\n        }\n\n        return false;\n    }\n\n    saveToSnapshot(unitComments: Record<string, IThreadComment[]>, unitId: string) {\n        if (this._dataSource) {\n            const map: Record<string, ThreadCommentJSON[]> = {};\n            Object.keys(unitComments).forEach((subUnitId) => {\n                const comments = unitComments[subUnitId];\n                map[subUnitId] = comments.map(this.dataSource!.saveCommentToSnapshot);\n            });\n            return map;\n        }\n\n        return unitComments;\n    }\n}\n\nexport const IThreadCommentDataSourceService = createIdentifier<IThreadCommentDataSourceService>('univer.thread-comment.data-source-service');\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Nullable } from '@univerjs/core';\nimport type { IUpdateCommentPayload, IUpdateCommentRefPayload } from '../commands/mutations/comment.mutation';\nimport type { IBaseComment, IThreadComment } from '../types/interfaces/i-thread-comment';\nimport { Disposable, Inject, LifecycleService, LifecycleStages } from '@univerjs/core';\nimport { Subject } from 'rxjs';\nimport { IThreadCommentDataSourceService } from '../services/tc-datasource.service';\n\nexport type CommentUpdate = {\n    unitId: string;\n    subUnitId: string;\n    silent?: boolean;\n} & ({\n    type: 'add';\n    payload: IThreadComment;\n    isRoot: boolean;\n} | {\n    type: 'update';\n    payload: IUpdateCommentPayload;\n} | {\n    type: 'delete';\n    payload: {\n        commentId: string;\n        isRoot: boolean;\n        comment: IThreadComment;\n    };\n} | {\n    type: 'updateRef';\n    payload: IUpdateCommentRefPayload;\n    threadId: string;\n} | {\n    type: 'resolve';\n    payload: {\n        commentId: string;\n        resolved: boolean;\n    };\n} | {\n    type: 'syncUpdate';\n    payload: IThreadComment;\n});\n\nexport interface IThreadInfo {\n    unitId: string;\n    subUnitId: string;\n    threadId: string;\n    root: IThreadComment;\n    children: IThreadComment[];\n    relativeUsers: Set<string>;\n}\n\nexport class ThreadCommentModel extends Disposable {\n    private _commentsMap: Map<string, Map<string, Map<string, IThreadComment>>> = new Map();\n    private _threadMap: Map<string, Map<string, Map<string, IThreadComment>>> = new Map();\n\n    private _commentUpdate$ = new Subject<CommentUpdate>();\n    commentUpdate$ = this._commentUpdate$.asObservable();\n\n    private _tasks: { unitId: string; subUnitId: string; threadIds: string[] }[] = [];\n\n    constructor(\n        @Inject(IThreadCommentDataSourceService) private readonly _dataSourceService: IThreadCommentDataSourceService,\n        @Inject(LifecycleService) private readonly _lifecycleService: LifecycleService\n    ) {\n        super();\n\n        this.disposeWithMe(() => {\n            this._commentUpdate$.complete();\n        });\n\n        this.disposeWithMe(this._lifecycleService.lifecycle$.subscribe((stage) => {\n            const taskMap = new Map<string, Map<string, Set<string>>>();\n\n            if (stage === LifecycleStages.Rendered) {\n                this._tasks.forEach(({ unitId, subUnitId, threadIds }) => {\n                    let unitMap = taskMap.get(unitId);\n                    if (!unitMap) {\n                        unitMap = new Map();\n                        taskMap.set(unitId, unitMap);\n                    }\n                    let subUnitMap = unitMap.get(subUnitId);\n                    if (!subUnitMap) {\n                        subUnitMap = new Set();\n                        unitMap.set(subUnitId, subUnitMap);\n                    }\n                    for (const threadId of threadIds) {\n                        subUnitMap.add(threadId);\n                    }\n                });\n\n                this._tasks = [];\n                taskMap.forEach((subUnitMap, unitId) => {\n                    subUnitMap.forEach((threadIds, subUnitId) => {\n                        this.syncThreadComments(unitId, subUnitId, Array.from(threadIds));\n                    });\n                });\n            }\n        }));\n    }\n\n    private _ensureCommentMap(unitId: string, subUnitId: string) {\n        let unitMap = this._commentsMap.get(unitId);\n\n        if (!unitMap) {\n            unitMap = new Map();\n            this._commentsMap.set(unitId, unitMap);\n        }\n\n        let subUnitMap = unitMap.get(subUnitId);\n        if (!subUnitMap) {\n            subUnitMap = new Map();\n            unitMap.set(subUnitId, subUnitMap);\n        }\n        return subUnitMap;\n    }\n\n    ensureMap(unitId: string, subUnitId: string) {\n        return this._ensureCommentMap(unitId, subUnitId);\n    }\n\n    private _ensureThreadMap(unitId: string, subUnitId: string) {\n        let unitMap = this._threadMap.get(unitId);\n\n        if (!unitMap) {\n            unitMap = new Map();\n            this._threadMap.set(unitId, unitMap);\n        }\n\n        let subUnitMap = unitMap.get(subUnitId);\n        if (!subUnitMap) {\n            subUnitMap = new Map();\n            unitMap.set(subUnitId, subUnitMap);\n        }\n\n        return subUnitMap;\n    }\n\n    private _replaceComment(unitId: string, subUnitId: string, comment: IBaseComment) {\n        const commentMap = this._ensureCommentMap(unitId, subUnitId);\n        const currentComment = commentMap.get(comment.id);\n\n        if (currentComment) {\n            const { children, ...rest } = comment;\n            const newComment = {\n                ...rest,\n                ref: currentComment.ref,\n            };\n            commentMap.set(comment.id, newComment);\n\n            children?.forEach((child) => {\n                commentMap.set(child.id, {\n                    ...child,\n                    ref: '',\n                });\n            });\n\n            this._commentUpdate$.next({\n                unitId,\n                subUnitId,\n                type: 'syncUpdate',\n                payload: newComment,\n            });\n\n            if (Boolean(comment.resolved) !== Boolean(currentComment.resolved)) {\n                this._commentUpdate$.next({\n                    unitId,\n                    subUnitId,\n                    type: 'resolve',\n                    payload: {\n                        commentId: comment.id,\n                        resolved: Boolean(comment.resolved),\n                    },\n                });\n            }\n        }\n    }\n\n    async syncThreadComments(unitId: string, subUnitId: string, threadIds: string[]) {\n        if (this._lifecycleService.stage < LifecycleStages.Rendered) {\n            this._tasks.push({ unitId, subUnitId, threadIds });\n            return;\n        }\n\n        const threadMap = this._ensureThreadMap(unitId, subUnitId);\n        const commentMap = this._ensureCommentMap(unitId, subUnitId);\n        const comments = await this._dataSourceService.listThreadComments(unitId, subUnitId, threadIds);\n        if (!comments) {\n            return;\n        }\n        const deleteThreads = new Set<string>(threadIds);\n        comments.forEach((comment) => {\n            this._replaceComment(unitId, subUnitId, comment);\n            deleteThreads.delete(comment.threadId);\n        });\n\n        deleteThreads.forEach((id) => {\n            threadMap.delete(id);\n            commentMap.forEach((comment, commentId) => {\n                if (comment.threadId === id) {\n                    commentMap.delete(commentId);\n                }\n            });\n        });\n    }\n\n    addComment(unitId: string, subUnitId: string, origin: IThreadComment, shouldSync?: boolean) {\n        const commentMap = this._ensureCommentMap(unitId, subUnitId);\n        const { parentId, children = [], ...rest } = origin;\n        const comment = {\n            ...rest,\n            parentId: parentId === origin.id ? undefined : parentId,\n        };\n        if (!comment.threadId) {\n            comment.threadId = comment.parentId || comment.id;\n        }\n\n        const addCommentItem = (item: IThreadComment) => {\n            commentMap.set(item.id, item);\n            this._commentUpdate$.next({\n                unitId,\n                subUnitId,\n                type: 'add',\n                payload: item,\n                isRoot: !item.parentId,\n            });\n        };\n\n        addCommentItem(comment);\n        const threadMap = this._ensureThreadMap(unitId, subUnitId);\n        if (!comment.parentId) {\n            threadMap.set(comment.threadId, comment);\n            for (const child of children) {\n                addCommentItem(child as IThreadComment);\n            }\n        }\n\n        if (shouldSync) {\n            this.syncThreadComments(unitId, subUnitId, [comment.threadId]);\n        }\n        return true;\n    }\n\n    updateComment(unitId: string, subUnitId: string, payload: IUpdateCommentPayload, silent?: boolean) {\n        const commentMap = this._ensureCommentMap(unitId, subUnitId);\n        const oldComment = commentMap.get(payload.commentId);\n        if (!oldComment) {\n            return true;\n        }\n\n        oldComment.updated = true;\n        oldComment.text = payload.text;\n        oldComment.attachments = payload.attachments;\n        oldComment.updateT = payload.updateT;\n\n        this._commentUpdate$.next({\n            unitId,\n            subUnitId,\n            type: 'update',\n            payload,\n            silent,\n        });\n        return true;\n    }\n\n    updateCommentRef(unitId: string, subUnitId: string, payload: IUpdateCommentRefPayload, silent?: boolean) {\n        const commentMap = this._ensureCommentMap(unitId, subUnitId);\n        const oldComment = commentMap.get(payload.commentId);\n        if (!oldComment) {\n            return false;\n        }\n\n        oldComment.ref = payload.ref;\n        this._commentUpdate$.next({\n            unitId,\n            subUnitId,\n            type: 'updateRef',\n            payload,\n            silent,\n            threadId: oldComment.threadId,\n        });\n        return true;\n    }\n\n    resolveComment(unitId: string, subUnitId: string, commentId: string, resolved: boolean) {\n        const commentMap = this._ensureCommentMap(unitId, subUnitId);\n        const oldComment = commentMap.get(commentId);\n        if (!oldComment) {\n            return false;\n        }\n\n        oldComment.resolved = resolved;\n        this._commentUpdate$.next({\n            unitId,\n            subUnitId,\n            type: 'resolve',\n            payload: {\n                commentId,\n                resolved,\n            },\n        });\n        return true;\n    }\n\n    getComment(unitId: string, subUnitId: string, commentId: string) {\n        const commentMap = this._ensureCommentMap(unitId, subUnitId);\n        return commentMap.get(commentId) as IThreadComment | undefined;\n    }\n\n    getRootComment(unitId: string, subUnitId: string, threadId: string) {\n        const threadMap = this._ensureThreadMap(unitId, subUnitId);\n        return threadMap.get(threadId);\n    }\n\n    getThread(unitId: string, subUnitId: string, threadId: string): Nullable<IThreadInfo> {\n        const commentMap = this._ensureCommentMap(unitId, subUnitId);\n        const comments = Array.from(commentMap.values()).filter((comment) => comment.threadId === threadId);\n\n        let root: IThreadComment | undefined;\n        const children: IThreadComment[] = [];\n        const relativeUsers = new Set<string>();\n\n        for (const comment of comments) {\n            if (!comment.parentId) {\n                root = comment;\n            } else {\n                children.push(comment);\n            }\n\n            relativeUsers.add(comment.personId);\n        }\n\n        if (!root) {\n            return undefined;\n        }\n\n        return {\n            root,\n            children,\n            relativeUsers,\n            unitId,\n            subUnitId,\n            threadId,\n        };\n    }\n\n    getCommentWithChildren(unitId: string, subUnitId: string, commentId: string) {\n        const comment = this.getComment(unitId, subUnitId, commentId);\n        if (!comment) {\n            return undefined;\n        }\n        return this.getThread(unitId, subUnitId, comment.threadId);\n    }\n\n    private _deleteComment(unitId: string, subUnitId: string, commentId: string) {\n        const commentMap = this._ensureCommentMap(unitId, subUnitId);\n        const current = commentMap.get(commentId);\n        if (!current) {\n            return;\n        }\n\n        commentMap.delete(commentId);\n\n        this._commentUpdate$.next({\n            unitId,\n            subUnitId,\n            type: 'delete',\n            payload: {\n                commentId,\n                isRoot: !current.parentId,\n                comment: current,\n            },\n        });\n    }\n\n    deleteThread(unitId: string, subUnitId: string, threadId: string) {\n        const threadMap = this._ensureThreadMap(unitId, subUnitId);\n        threadMap.delete(threadId);\n\n        const commentMap = this._ensureCommentMap(unitId, subUnitId);\n        commentMap.forEach((comment) => {\n            if (comment.threadId === threadId) {\n                this._deleteComment(unitId, subUnitId, comment.id);\n            }\n        });\n    }\n\n    deleteComment(unitId: string, subUnitId: string, commentId: string) {\n        const commentMap = this._ensureCommentMap(unitId, subUnitId);\n        const current = commentMap.get(commentId);\n        if (!current) {\n            return true;\n        }\n\n        if (current.parentId) {\n            this._deleteComment(unitId, subUnitId, commentId);\n        } else {\n            this.deleteThread(unitId, subUnitId, current.threadId);\n        }\n\n        return true;\n    }\n\n    deleteUnit(unitId: string) {\n        const unitMap = this._commentsMap.get(unitId);\n        if (!unitMap) {\n            return;\n        }\n\n        unitMap.forEach((subUnitMap, subUnitId) => {\n            subUnitMap.forEach((comment) => {\n                this.deleteComment(unitId, subUnitId, comment.id);\n            });\n        });\n    }\n\n    getUnit(unitId: string) {\n        const unitMap = this._threadMap.get(unitId);\n        if (!unitMap) {\n            return [];\n        }\n\n        const threads: IThreadInfo[] = [];\n\n        unitMap.forEach((subUnitSet, subUnitId) => {\n            subUnitSet.forEach((threadComment, threadId) => {\n                const thread = this.getThread(unitId, subUnitId, threadId);\n                if (thread) {\n                    threads.push(thread);\n                }\n            });\n        });\n\n        return threads;\n    }\n\n    getAll() {\n        const all: { unitId: string; threads: IThreadInfo[] }[] = [];\n        this._commentsMap.forEach((unitMap, unitId) => {\n            all.push({\n                unitId,\n                threads: this.getUnit(unitId),\n            });\n        });\n\n        return all;\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const TC_PLUGIN_NAME = 'UNIVER_THREAD_COMMENT_PLUGIN';\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IThreadComment } from '../types/interfaces/i-thread-comment';\nimport { Disposable, Inject, IResourceManagerService } from '@univerjs/core';\nimport { UniverType } from '@univerjs/protocol';\nimport { ThreadCommentModel } from '../models/thread-comment.model';\nimport { IThreadCommentDataSourceService } from '../services/tc-datasource.service';\nimport { TC_PLUGIN_NAME } from '../types/const';\n\nexport type UnitThreadCommentJSON = Record<string, IThreadComment[]>;\n\nexport const SHEET_UNIVER_THREAD_COMMENT_PLUGIN = `SHEET_${TC_PLUGIN_NAME}`;\n\nexport class ThreadCommentResourceController extends Disposable {\n    constructor(\n        @IResourceManagerService private readonly _resourceManagerService: IResourceManagerService,\n        @Inject(ThreadCommentModel) private readonly _threadCommentModel: ThreadCommentModel,\n        @IThreadCommentDataSourceService private readonly _threadCommentDataSourceService: IThreadCommentDataSourceService\n    ) {\n        super();\n        this._initSnapshot();\n    }\n\n    private _initSnapshot() {\n        const toJson = (unitID: string) => {\n            const map = this._threadCommentModel.getUnit(unitID);\n            const resultMap: UnitThreadCommentJSON = {};\n            if (map) {\n                map.forEach((info) => {\n                    const subUnitComments = resultMap[info.subUnitId] ?? [];\n                    subUnitComments.push({\n                        ...info.root,\n                        children: info.children,\n                    });\n                    resultMap[info.subUnitId] = subUnitComments;\n                });\n\n                return JSON.stringify(this._threadCommentDataSourceService.saveToSnapshot(resultMap, unitID));\n            }\n            return '';\n        };\n        const parseJson = (json: string): UnitThreadCommentJSON => {\n            if (!json) {\n                return {};\n            }\n            try {\n                return JSON.parse(json);\n            } catch (err) {\n                return {};\n            }\n        };\n\n        this.disposeWithMe(\n            this._resourceManagerService.registerPluginResource({\n                pluginName: SHEET_UNIVER_THREAD_COMMENT_PLUGIN,\n                businesses: [UniverType.UNIVER_SHEET, UniverType.UNIVER_DOC],\n                toJson: (unitID) => toJson(unitID),\n                parseJson: (json) => parseJson(json),\n                onUnLoad: (unitID) => {\n                    this._threadCommentModel.deleteUnit(unitID);\n                },\n                onLoad: async (unitID, value) => {\n                    Object.keys(value).forEach((subunitId) => {\n                        const commentList = value[subunitId];\n                        commentList.forEach((comment: IThreadComment) => {\n                            this._threadCommentModel.addComment(unitID, subunitId, comment);\n                        });\n\n                        this._threadCommentModel.syncThreadComments(unitID, subunitId, commentList.map((i) => i.threadId));\n                    });\n                },\n            })\n        );\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ICommand, IDocumentBody } from '@univerjs/core';\nimport type { IThreadComment } from '../../types/interfaces/i-thread-comment';\nimport { CommandType } from '@univerjs/core';\nimport { ThreadCommentModel } from '../../models/thread-comment.model';\n\nexport interface IAddCommentMutationParams {\n    unitId: string;\n    subUnitId: string;\n    comment: IThreadComment;\n    sync?: boolean;\n}\n\nexport const AddCommentMutation: ICommand<IAddCommentMutationParams> = {\n    id: 'thread-comment.mutation.add-comment',\n    type: CommandType.MUTATION,\n    handler(accessor, params, options) {\n        if (!params) {\n            return false;\n        }\n        const threadCommentModel = accessor.get(ThreadCommentModel);\n        const { unitId, subUnitId, comment, sync } = params;\n        const shouldSync = sync || ((options?.fromChangeset) && !comment.parentId);\n        return threadCommentModel.addComment(unitId, subUnitId, comment, shouldSync);\n    },\n};\n\nexport interface IUpdateCommentPayload {\n    commentId: string;\n    text: IDocumentBody;\n    attachments?: string[];\n    updated?: boolean;\n    updateT?: string;\n}\n\nexport interface IUpdateCommentMutationParams {\n    unitId: string;\n    subUnitId: string;\n    payload: IUpdateCommentPayload;\n    silent?: boolean;\n}\n\nexport const UpdateCommentMutation: ICommand<IUpdateCommentMutationParams> = {\n    id: 'thread-comment.mutation.update-comment',\n    type: CommandType.MUTATION,\n    handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n        const threadCommentModel = accessor.get(ThreadCommentModel);\n        const { unitId, subUnitId, payload, silent } = params;\n        return threadCommentModel.updateComment(unitId, subUnitId, payload, silent);\n    },\n};\n\nexport interface IUpdateCommentRefPayload {\n    commentId: string;\n    ref: string;\n}\n\nexport interface IUpdateCommentRefMutationParams {\n    unitId: string;\n    subUnitId: string;\n    payload: IUpdateCommentRefPayload;\n    silent?: boolean;\n}\n\nexport const UpdateCommentRefMutation: ICommand<IUpdateCommentRefMutationParams> = {\n    id: 'thread-comment.mutation.update-comment-ref',\n    type: CommandType.MUTATION,\n    handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n        const threadCommentModel = accessor.get(ThreadCommentModel);\n        const { unitId, subUnitId, payload, silent } = params;\n        return threadCommentModel.updateCommentRef(unitId, subUnitId, payload, silent);\n    },\n};\n\nexport interface IResolveCommentMutationParams {\n    unitId: string;\n    subUnitId: string;\n    commentId: string;\n    resolved: boolean;\n}\n\nexport const ResolveCommentMutation: ICommand<IResolveCommentMutationParams> = {\n    id: 'thread-comment.mutation.resolve-comment',\n    type: CommandType.MUTATION,\n    handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n        const threadCommentModel = accessor.get(ThreadCommentModel);\n        const { unitId, subUnitId, resolved, commentId } = params;\n        return threadCommentModel.resolveComment(unitId, subUnitId, commentId, resolved);\n    },\n};\n\nexport interface IDeleteCommentMutationParams {\n    unitId: string;\n    subUnitId: string;\n    commentId: string;\n}\n\nexport const DeleteCommentMutation: ICommand<IDeleteCommentMutationParams> = {\n    id: 'thread-comment.mutation.delete-comment',\n    type: CommandType.MUTATION,\n    handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n        const threadCommentModel = accessor.get(ThreadCommentModel);\n        const { unitId, subUnitId, commentId } = params;\n        return threadCommentModel.deleteComment(unitId, subUnitId, commentId);\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IThreadComment } from '../../types/interfaces/i-thread-comment';\nimport { CommandType, type ICommand, ICommandService } from '@univerjs/core';\nimport { ThreadCommentModel } from '../../models/thread-comment.model';\nimport { IThreadCommentDataSourceService } from '../../services/tc-datasource.service';\nimport { AddCommentMutation, DeleteCommentMutation, type IUpdateCommentPayload, ResolveCommentMutation, UpdateCommentMutation } from '../mutations/comment.mutation';\n\nexport interface IAddCommentCommandParams {\n    unitId: string;\n    subUnitId: string;\n    comment: IThreadComment;\n}\n\nexport const AddCommentCommand: ICommand<IAddCommentCommandParams> = {\n    id: 'thread-comment.command.add-comment',\n    type: CommandType.COMMAND,\n    async handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n        const commandService = accessor.get(ICommandService);\n        const dataSourceService = accessor.get(IThreadCommentDataSourceService);\n        const { comment: originComment } = params;\n        const comment = await dataSourceService.addComment(originComment);\n        const syncUpdateMutationToColla = dataSourceService.syncUpdateMutationToColla;\n        const isRoot = !originComment.parentId;\n\n        const redo = {\n            id: AddCommentMutation.id,\n            params: {\n                ...params,\n                comment,\n            },\n        };\n\n        if (isRoot) {\n            const res = await commandService.executeCommand(redo.id, redo.params);\n            return res;\n        }\n\n        return commandService.executeCommand(redo.id, redo.params, {\n            onlyLocal: !syncUpdateMutationToColla,\n        });\n    },\n};\n\nexport interface IUpdateCommentCommandParams {\n    unitId: string;\n    subUnitId: string;\n    payload: IUpdateCommentPayload;\n}\n\nexport const UpdateCommentCommand: ICommand<IUpdateCommentCommandParams> = {\n    id: 'thread-comment.command.update-comment',\n    type: CommandType.COMMAND,\n    async handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n        const { unitId, subUnitId, payload } = params;\n        const commandService = accessor.get(ICommandService);\n        const threadCommentModel = accessor.get(ThreadCommentModel);\n        const dataSourceService = accessor.get(IThreadCommentDataSourceService);\n        const syncUpdateMutationToColla = dataSourceService.syncUpdateMutationToColla;\n        const current = threadCommentModel.getComment(\n            unitId,\n            subUnitId,\n            payload.commentId\n        );\n\n        if (!current) {\n            return false;\n        }\n\n        const { children, ...currentComment } = current;\n        const success = await dataSourceService.updateComment({\n            ...currentComment,\n            ...payload,\n        });\n\n        if (!success) {\n            return false;\n        }\n\n        const redo = {\n            id: UpdateCommentMutation.id,\n            params,\n        };\n\n        commandService.executeCommand(redo.id, redo.params, { onlyLocal: !syncUpdateMutationToColla });\n        return true;\n    },\n};\n\nexport interface IResolveCommentCommandParams {\n    unitId: string;\n    subUnitId: string;\n    commentId: string;\n    resolved: boolean;\n}\n\nexport const ResolveCommentCommand: ICommand<IResolveCommentCommandParams> = {\n    id: 'thread-comment.command.resolve-comment',\n    type: CommandType.COMMAND,\n    async handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n        const { unitId, subUnitId, resolved, commentId } = params;\n        const dataSourceService = accessor.get(IThreadCommentDataSourceService);\n        const threadCommentModel = accessor.get(ThreadCommentModel);\n        const currentComment = threadCommentModel.getComment(unitId, subUnitId, commentId);\n        const syncUpdateMutationToColla = dataSourceService.syncUpdateMutationToColla;\n        if (!currentComment) {\n            return false;\n        }\n\n        const success = await dataSourceService.resolveComment({\n            ...currentComment,\n            resolved,\n        });\n\n        if (!success) {\n            return false;\n        }\n\n        const commandService = accessor.get(ICommandService);\n\n        return commandService.executeCommand(\n            ResolveCommentMutation.id,\n            params,\n            { onlyLocal: !syncUpdateMutationToColla }\n        );\n    },\n};\n\nexport interface IDeleteCommentCommandParams {\n    unitId: string;\n    subUnitId: string;\n    commentId: string;\n}\n\n/**\n * Delete Reply\n */\nexport const DeleteCommentCommand: ICommand<IDeleteCommentCommandParams> = {\n    id: 'thread-comment.command.delete-comment',\n    type: CommandType.COMMAND,\n    async handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n        const threadCommentModel = accessor.get(ThreadCommentModel);\n        const dataSourceService = accessor.get(IThreadCommentDataSourceService);\n        const commandService = accessor.get(ICommandService);\n        const { unitId, subUnitId, commentId } = params;\n        const syncUpdateMutationToColla = dataSourceService.syncUpdateMutationToColla;\n\n        const comment = threadCommentModel.getComment(unitId, subUnitId, commentId);\n        if (!comment) {\n            return false;\n        }\n\n        if (!(await dataSourceService.deleteComment(unitId, subUnitId, comment.threadId, commentId))) {\n            return false;\n        }\n\n        const redo = {\n            id: DeleteCommentMutation.id,\n            params,\n        };\n\n        return commandService.executeCommand(redo.id, redo.params, { onlyLocal: !syncUpdateMutationToColla });\n    },\n};\n\nexport interface IDeleteCommentTreeCommandParams {\n    unitId: string;\n    subUnitId: string;\n    commentId: string;\n}\n\nexport const DeleteCommentTreeCommand: ICommand<IDeleteCommentCommandParams> = {\n    id: 'thread-comment.command.delete-comment-tree',\n    type: CommandType.COMMAND,\n    async handler(accessor, params) {\n        if (!params) {\n            return false;\n        }\n        const threadCommentModel = accessor.get(ThreadCommentModel);\n        const commandService = accessor.get(ICommandService);\n        const dataSourceService = accessor.get(IThreadCommentDataSourceService);\n        const { unitId, subUnitId, commentId } = params;\n\n        const commentWithChildren = threadCommentModel.getCommentWithChildren(unitId, subUnitId, commentId);\n        if (!commentWithChildren) {\n            return false;\n        }\n\n        if (!(await dataSourceService.deleteComment(unitId, subUnitId, commentWithChildren.root.threadId, commentId))) {\n            return false;\n        }\n\n        return await commandService.executeCommand(DeleteCommentMutation.id, {\n            unitId,\n            subUnitId,\n            commentId: commentWithChildren.root.id,\n        });\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DependencyOverride } from '@univerjs/core';\n\nexport const THREAD_COMMENT_PLUGIN_CONFIG_KEY = 'thread-comment.config';\n\nexport const configSymbol = Symbol(THREAD_COMMENT_PLUGIN_CONFIG_KEY);\n\nexport interface IUniverThreadCommentConfig {\n    overrides?: DependencyOverride;\n}\n\nexport const defaultPluginConfig: IUniverThreadCommentConfig = {};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport type { IUniverThreadCommentConfig } from './controllers/config.schema';\nimport { ICommandService, IConfigService, Inject, Injector, merge, mergeOverrideWithDependencies, Plugin, UniverInstanceType } from '@univerjs/core';\nimport { AddCommentCommand, DeleteCommentCommand, DeleteCommentTreeCommand, ResolveCommentCommand, UpdateCommentCommand } from './commands/commands/comment.command';\nimport { AddCommentMutation, DeleteCommentMutation, ResolveCommentMutation, UpdateCommentMutation, UpdateCommentRefMutation } from './commands/mutations/comment.mutation';\nimport { defaultPluginConfig, THREAD_COMMENT_PLUGIN_CONFIG_KEY } from './controllers/config.schema';\nimport { ThreadCommentResourceController } from './controllers/tc-resource.controller';\nimport { ThreadCommentModel } from './models/thread-comment.model';\nimport { IThreadCommentDataSourceService, ThreadCommentDataSourceService } from './services/tc-datasource.service';\nimport { TC_PLUGIN_NAME } from './types/const';\n\nexport class UniverThreadCommentPlugin extends Plugin {\n    static override pluginName = TC_PLUGIN_NAME;\n    static override type = UniverInstanceType.UNIVER_UNKNOWN;\n\n    constructor(\n        private readonly _config: Partial<IUniverThreadCommentConfig> = defaultPluginConfig,\n        @Inject(Injector) protected _injector: Injector,\n        @ICommandService protected _commandService: ICommandService,\n        @IConfigService private readonly _configService: IConfigService\n    ) {\n        super();\n\n        // Manage the plugin configuration.\n        const { ...rest } = merge(\n            {},\n            defaultPluginConfig,\n            this._config\n        );\n        this._configService.setConfig(THREAD_COMMENT_PLUGIN_CONFIG_KEY, rest);\n    }\n\n    override onStarting(): void {\n        (mergeOverrideWithDependencies([\n            [IThreadCommentDataSourceService, { useClass: ThreadCommentDataSourceService }],\n            [ThreadCommentModel],\n            [ThreadCommentResourceController],\n        ], this._config?.overrides) as Dependency[]).forEach(\n            (d) => {\n                this._injector.add(d);\n            }\n        );\n\n        [\n            AddCommentCommand,\n            UpdateCommentCommand,\n            DeleteCommentCommand,\n            ResolveCommentCommand,\n            DeleteCommentTreeCommand,\n\n            AddCommentMutation,\n            UpdateCommentMutation,\n            UpdateCommentRefMutation,\n            DeleteCommentMutation,\n            ResolveCommentMutation,\n        ].forEach((command) => {\n            this._commandService.registerCommand(command);\n        });\n\n        this._injector.get(ThreadCommentResourceController);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { dayjs } from '@univerjs/core';\n\nexport function getDT(date?: Date) {\n    return dayjs(date).format('YYYY/MM/DD HH:mm');\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Nullable } from '@univerjs/core';\nimport { Disposable, Inject, IUniverInstanceService, UniverInstanceType } from '@univerjs/core';\nimport { ISidebarService } from '@univerjs/ui';\nimport { BehaviorSubject, filter } from 'rxjs';\n\nexport type ActiveCommentInfo = Nullable<{ unitId: string; subUnitId: string; commentId: string; trigger?: string }>;\n\nexport class ThreadCommentPanelService extends Disposable {\n    private _panelVisible = false;\n    private _panelVisible$ = new BehaviorSubject<boolean>(false);\n\n    private _activeCommentId: ActiveCommentInfo;\n    private _activeCommentId$ = new BehaviorSubject<ActiveCommentInfo>(undefined);\n\n    panelVisible$ = this._panelVisible$.asObservable();\n    activeCommentId$ = this._activeCommentId$.asObservable();\n\n    constructor(\n        @Inject(ISidebarService) private readonly _sidebarService: ISidebarService,\n        @IUniverInstanceService private readonly _univerInstanceService: IUniverInstanceService\n    ) {\n        super();\n        this._init();\n\n        this.disposeWithMe(() => {\n            this._activeCommentId$.complete();\n            this._panelVisible$.complete();\n        });\n    }\n\n    private _init() {\n        this.disposeWithMe(\n            this._sidebarService.sidebarOptions$.subscribe((opt) => {\n                if (!opt.visible) {\n                    this.setPanelVisible(false);\n                }\n            })\n        );\n\n        this.disposeWithMe(\n            this._univerInstanceService.getCurrentTypeOfUnit$(UniverInstanceType.UNIVER_SHEET)\n                .pipe(filter((sheet) => !sheet)).subscribe(() => {\n                    this._sidebarService.close();\n                })\n        );\n    }\n\n    get panelVisible() {\n        return this._panelVisible;\n    }\n\n    get activeCommentId() {\n        return this._activeCommentId;\n    }\n\n    setPanelVisible(visible: boolean) {\n        this._panelVisible = visible;\n        this._panelVisible$.next(visible);\n    }\n\n    setActiveComment(commentInfo: ActiveCommentInfo) {\n        this._activeCommentId = commentInfo;\n        this._activeCommentId$.next(commentInfo);\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const THREAD_COMMENT_POPUP = 'thread-comment-popup';\n\nexport const THREAD_COMMENT_PANEL = 'thread-comment-panel';\n\nexport const PLUGIN_NAME = 'UNIVER_THREAD_COMMENT_UI_PLUGIN';\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommandType } from '@univerjs/core';\nimport { ISidebarService } from '@univerjs/ui';\nimport type { IAccessor, ICommand } from '@univerjs/core';\nimport { ThreadCommentPanelService } from '../../services/thread-comment-panel.service';\nimport { THREAD_COMMENT_PANEL } from '../../types/const';\n\nexport const ToggleSheetCommentPanelOperation: ICommand = {\n    id: 'thread-comment-ui.operation.toggle-panel',\n    type: CommandType.OPERATION,\n    handler(accessor: IAccessor) {\n        const sidebarService = accessor.get(ISidebarService);\n        const panelService = accessor.get(ThreadCommentPanelService);\n\n        if (panelService.panelVisible) {\n            sidebarService.close();\n            panelService.setPanelVisible(false);\n        } else {\n            sidebarService.open({\n                header: { title: 'threadCommentUI.panel.title' },\n                children: { label: THREAD_COMMENT_PANEL },\n                width: 330,\n            });\n            panelService.setPanelVisible(true);\n        }\n\n        return true;\n    },\n};\n\nexport interface ISetActiveCommentOperationParams {\n    unitId: string;\n    subUnitId: string;\n    commentId: string;\n}\n\nexport const SetActiveCommentOperation: ICommand<ISetActiveCommentOperationParams> = {\n    id: 'thread-comment-ui.operation.set-active-comment',\n    type: CommandType.OPERATION,\n    handler(accessor, params) {\n        const panelService = accessor.get(ThreadCommentPanelService);\n        panelService.setActiveComment(params);\n        return true;\n    },\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { DependencyOverride } from '@univerjs/core';\nimport type { MenuConfig } from '@univerjs/ui';\n\nexport const THREAD_COMMENT_UI_PLUGIN_CONFIG_KEY = 'thread-comment-ui.config';\n\nexport const configSymbol = Symbol(THREAD_COMMENT_UI_PLUGIN_CONFIG_KEY);\n\nexport interface IUniverThreadCommentUIConfig {\n    overrides?: DependencyOverride;\n    menu?: MenuConfig;\n}\n\nexport const defaultPluginConfig: IUniverThreadCommentUIConfig = {};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Dependency } from '@univerjs/core';\nimport type { IUniverThreadCommentUIConfig } from './controllers/config.schema';\nimport { DependentOn, ICommandService, IConfigService, Inject, Injector, merge, mergeOverrideWithDependencies, Plugin, UniverInstanceType } from '@univerjs/core';\nimport { UniverThreadCommentPlugin } from '@univerjs/thread-comment';\nimport { SetActiveCommentOperation, ToggleSheetCommentPanelOperation } from './commands/operations/comment.operations';\nimport { defaultPluginConfig, THREAD_COMMENT_UI_PLUGIN_CONFIG_KEY } from './controllers/config.schema';\nimport { ThreadCommentPanelService } from './services/thread-comment-panel.service';\nimport { PLUGIN_NAME } from './types/const';\n\n@DependentOn(UniverThreadCommentPlugin)\nexport class UniverThreadCommentUIPlugin extends Plugin {\n    static override pluginName = PLUGIN_NAME;\n    static override type = UniverInstanceType.UNIVER_UNKNOWN;\n\n    constructor(\n        private readonly _config: Partial<IUniverThreadCommentUIConfig> = defaultPluginConfig,\n        @Inject(Injector) protected override _injector: Injector,\n        @ICommandService protected _commandService: ICommandService,\n        @IConfigService private readonly _configService: IConfigService\n    ) {\n        super();\n\n        // Manage the plugin configuration.\n        const { menu, ...rest } = merge(\n            {},\n            defaultPluginConfig,\n            this._config\n        );\n        if (menu) {\n            this._configService.setConfig('menu', menu, { merge: true });\n        }\n        this._configService.setConfig(THREAD_COMMENT_UI_PLUGIN_CONFIG_KEY, rest);\n    }\n\n    override onStarting(): void {\n        (mergeOverrideWithDependencies([\n            [ThreadCommentPanelService],\n        ], this._config?.overrides) as Dependency[]).forEach((dep) => {\n            this._injector.add(dep);\n        });\n\n        [ToggleSheetCommentPanelOperation, SetActiveCommentOperation].forEach((command) => {\n            this._commandService.registerCommand(command);\n        });\n    }\n}\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Nullable } from '@univerjs/core';\nimport type { IThreadComment } from '@univerjs/thread-comment';\nimport type { Observable } from 'rxjs';\nimport type { IThreadCommentTreeProps } from '../thread-comment-tree';\nimport { ICommandService, LocaleService, UniverInstanceType, UserManagerService } from '@univerjs/core';\nimport { Button, Select } from '@univerjs/design';\nimport { IncreaseSingle } from '@univerjs/icons';\nimport { ThreadCommentModel } from '@univerjs/thread-comment';\nimport { useDependency, useObservable } from '@univerjs/ui';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { SetActiveCommentOperation } from '../../commands/operations/comment.operations';\nimport { ThreadCommentPanelService } from '../../services/thread-comment-panel.service';\nimport { ThreadCommentTree } from '../thread-comment-tree';\nimport styles from './index.module.less';\n\nexport interface IThreadCommentPanelProps {\n    unitId: string;\n    subUnitId$: Observable<string | undefined>;\n    type: UniverInstanceType;\n    onAdd: () => void;\n    getSubUnitName: (subUnitId: string) => string;\n    onResolve?: (id: string, resolved: boolean) => void;\n    sortComments?: (comments: IThreadComment[]) => IThreadComment[];\n    onItemLeave?: (comment: IThreadComment) => void;\n    onItemEnter?: (comment: IThreadComment) => void;\n    disableAdd?: boolean;\n    tempComment?: Nullable<IThreadComment>;\n    onAddComment?: IThreadCommentTreeProps['onAddComment'];\n    onDeleteComment?: IThreadCommentTreeProps['onDeleteComment'];\n    showComments?: string[];\n}\n\ninterface IThreadCommentWithUsers extends IThreadComment {\n    users: Set<string>;\n}\n\nexport const ThreadCommentPanel = (props: IThreadCommentPanelProps) => {\n    const {\n        unitId,\n        subUnitId$,\n        type,\n        onAdd,\n        getSubUnitName,\n        onResolve,\n        sortComments,\n        onItemLeave,\n        onItemEnter,\n        disableAdd,\n        tempComment,\n        onAddComment,\n        onDeleteComment,\n        showComments,\n    } = props;\n    const [unit, setUnit] = useState('all');\n    const [status, setStatus] = useState('all');\n    const localeService = useDependency(LocaleService);\n    const userService = useDependency(UserManagerService);\n    const threadCommentModel = useDependency(ThreadCommentModel);\n    const [unitComments, setUnitComments] = useState(() => threadCommentModel.getUnit(unitId));\n    const panelService = useDependency(ThreadCommentPanelService);\n    const activeCommentId = useObservable(panelService.activeCommentId$);\n    const update = useObservable(threadCommentModel.commentUpdate$);\n    const commandService = useDependency(ICommandService);\n    const subUnitId = useObservable(subUnitId$);\n    const shouldScroll = useRef(true);\n    const prefix = 'panel';\n    const currentUser = useObservable(userService.currentUser$);\n    const comments = useMemo(() => {\n        const allComments =\n            (unit === 'all' ? unitComments : unitComments.filter((i) => i.subUnitId === subUnitId) ?? []);\n\n        const sort = sortComments ?? ((a) => a);\n        const res: IThreadCommentWithUsers[] = allComments.map((i) => ({ ...i.root, children: i.children ?? [], users: i.relativeUsers }));\n\n        if (showComments) {\n            const map = new Map<string, IThreadCommentWithUsers>();\n            res.forEach((comment) => {\n                map.set(comment.id, comment);\n            });\n\n            return [...showComments, ''].map((id) => map.get(id)).filter(Boolean) as IThreadCommentWithUsers[];\n        } else {\n            return sort(res) as IThreadCommentWithUsers[];\n        }\n    }, [showComments, unit, unitComments, sortComments, subUnitId]);\n\n    const commentsSorted = useMemo(() => [\n        ...comments.filter((comment) => !comment.resolved),\n        ...comments.filter((comment) => comment.resolved),\n    ], [comments]);\n\n    const statuedComments = useMemo(() => {\n        if (status === 'resolved') {\n            return commentsSorted.filter((comment) => comment.resolved);\n        }\n\n        if (status === 'unsolved') {\n            return commentsSorted.filter((comment) => !comment.resolved);\n        }\n        if (status === 'concern_me') {\n            if (!currentUser?.userID) {\n                return commentsSorted;\n            }\n\n            return commentsSorted.filter((comment) => comment?.users.has(currentUser.userID));\n        }\n\n        return commentsSorted;\n    }, [commentsSorted, currentUser?.userID, status]);\n\n    const renderComments = tempComment\n        ? [tempComment, ...statuedComments]\n        : statuedComments;\n\n    const unSolvedComments = renderComments.filter((comment) => !comment.resolved);\n    const solvedComments = renderComments.filter((comment) => comment.resolved);\n\n    const isFiltering = status !== 'all' || unit !== 'all';\n\n    const onReset = () => {\n        setStatus('all');\n        setUnit('all');\n    };\n\n    useEffect(() => {\n        if (unitId) {\n            setUnitComments(\n                threadCommentModel.getUnit(unitId)\n            );\n        }\n    }, [unitId, threadCommentModel, update]);\n\n    useEffect(() => {\n        if (!activeCommentId) {\n            return;\n        }\n        if (!shouldScroll.current) {\n            shouldScroll.current = true;\n            return;\n        }\n        const { unitId, subUnitId, commentId } = activeCommentId;\n        const id = `${prefix}-${unitId}-${subUnitId}-${commentId}`;\n        document.getElementById(id)?.scrollIntoView({ block: 'center' });\n    }, [activeCommentId]);\n\n    const renderComment = (comment: IThreadComment) => (\n        <ThreadCommentTree\n            prefix={prefix}\n            getSubUnitName={getSubUnitName}\n            key={comment.id}\n            id={comment.id}\n            unitId={comment.unitId}\n            subUnitId={comment.subUnitId}\n            refStr={comment.ref}\n            type={type}\n            showEdit={activeCommentId?.commentId === comment.id}\n            showHighlight={activeCommentId?.commentId === comment.id}\n            onClick={() => {\n                shouldScroll.current = false;\n                if (!comment.resolved) {\n                    commandService.executeCommand(\n                        SetActiveCommentOperation.id,\n                        {\n                            unitId: comment.unitId,\n                            subUnitId: comment.subUnitId,\n                            commentId: comment.id,\n                            temp: false,\n                        }\n                    );\n                } else {\n                    commandService.executeCommand(SetActiveCommentOperation.id);\n                }\n            }}\n            onMouseEnter={() => onItemEnter?.(comment)}\n            onMouseLeave={() => onItemLeave?.(comment)}\n            onAddComment={onAddComment}\n            onDeleteComment={onDeleteComment}\n            onResolve={(resolved: boolean) => onResolve?.(comment.id, resolved)}\n        />\n    );\n\n    return (\n        <div className={styles.threadCommentPanel}>\n            <div className={styles.threadCommentPanelForms}>\n                {type === UniverInstanceType.UNIVER_SHEET\n                    ? (\n                        <Select\n                            borderless\n                            value={unit}\n                            onChange={(e) => setUnit(e)}\n                            options={[\n                                {\n                                    value: 'current',\n                                    label: localeService.t('threadCommentUI.filter.sheet.current'),\n                                },\n                                {\n                                    value: 'all',\n                                    label: localeService.t('threadCommentUI.filter.sheet.all'),\n                                },\n                            ]}\n                        />\n                    )\n                    : null}\n                <Select\n                    borderless\n                    value={status}\n                    onChange={(e) => setStatus(e)}\n                    options={[\n                        {\n                            value: 'all',\n                            label: localeService.t('threadCommentUI.filter.status.all'),\n                        },\n                        {\n                            value: 'resolved',\n                            label: localeService.t('threadCommentUI.filter.status.resolved'),\n                        },\n                        {\n                            value: 'unsolved',\n                            label: localeService.t('threadCommentUI.filter.status.unsolved'),\n                        },\n                        {\n                            value: 'concern_me',\n                            label: localeService.t('threadCommentUI.filter.status.concernMe'),\n                        },\n                    ]}\n                />\n            </div>\n            {unSolvedComments.map(renderComment)}\n            {solvedComments.length ? <div className={styles.threadCommentPanelSolved}>\u5DF2\u89E3\u51B3</div> : null}\n            {solvedComments.map(renderComment)}\n            {renderComments.length\n                ? null\n                : (\n                    <div className={styles.threadCommentPanelEmpty}>\n                        {isFiltering ?\n                            localeService.t('threadCommentUI.panel.filterEmpty')\n                            : localeService.t('threadCommentUI.panel.empty')}\n                        {isFiltering\n                            ? (\n                                <Button\n                                    onClick={onReset}\n                                    type=\"link\"\n                                >\n                                    {localeService.t('threadCommentUI.panel.reset')}\n                                </Button>\n                            )\n                            : (\n                                <Button\n                                    id=\"thread-comment-add\"\n                                    className={styles.threadCommentPanelAdd}\n                                    type=\"primary\"\n                                    onClick={onAdd}\n                                    disabled={disableAdd}\n                                >\n                                    <IncreaseSingle />\n                                    {localeService.t('threadCommentUI.panel.addComment')}\n                                </Button>\n                            )}\n                    </div>\n                )}\n        </div>\n    );\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IUser, UniverInstanceType } from '@univerjs/core';\nimport type { IAddCommentCommandParams, IThreadComment, IUpdateCommentCommandParams } from '@univerjs/thread-comment';\nimport type { IThreadCommentEditorInstance } from '../thread-comment-editor';\nimport { generateRandomId, ICommandService, LocaleService, UserManagerService } from '@univerjs/core';\nimport { clsx, Dropdown, Tooltip } from '@univerjs/design';\nimport { DeleteSingle, MoreHorizontalSingle, ReplyToCommentSingle, ResolvedSingle, SolveSingle } from '@univerjs/icons';\nimport { AddCommentCommand, DeleteCommentCommand, DeleteCommentTreeCommand, getDT, ResolveCommentCommand, ThreadCommentModel, UpdateCommentCommand } from '@univerjs/thread-comment';\nimport { useDependency, useObservable } from '@univerjs/ui';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { debounceTime } from 'rxjs';\nimport { SetActiveCommentOperation } from '../../commands/operations/comment.operations';\nimport { ThreadCommentEditor } from '../thread-comment-editor';\nimport { transformDocument2TextNodes, transformTextNodes2Document } from '../thread-comment-editor/util';\nimport styles from './index.module.less';\n\nexport interface IThreadCommentTreeProps {\n    id?: string;\n    unitId: string;\n    subUnitId: string;\n    type: UniverInstanceType;\n    refStr?: string;\n    showEdit?: boolean;\n    onClick?: () => void;\n    showHighlight?: boolean;\n    onClose?: () => void;\n    getSubUnitName: (subUnitId: string) => string;\n    prefix?: string;\n    autoFocus?: boolean;\n    onMouseEnter?: () => void;\n    onMouseLeave?: () => void;\n    onAddComment?: (comment: IThreadComment) => boolean;\n    onDeleteComment?: (comment: IThreadComment) => boolean;\n    onResolve?: (resolved: boolean) => void;\n}\n\nexport interface IThreadCommentItemProps {\n    item: IThreadComment;\n    unitId: string;\n    subUnitId: string;\n    onEditingChange?: (editing: boolean) => void;\n    editing?: boolean;\n    onClick?: () => void;\n    resolved?: boolean;\n    onReply: (user: IUser | undefined) => void;\n    isRoot?: boolean;\n    onClose?: () => void;\n    onAddComment?: (comment: IThreadComment) => boolean;\n    onDeleteComment?: (comment: IThreadComment) => boolean;\n    type: UniverInstanceType;\n}\n\nconst MOCK_ID = '__mock__';\n\nconst ThreadCommentItem = (props: IThreadCommentItemProps) => {\n    const { item, unitId, subUnitId, editing, onEditingChange, onReply, resolved, isRoot, onClose, onDeleteComment, type } = props;\n    const commandService = useDependency(ICommandService);\n    const localeService = useDependency(LocaleService);\n    const userManagerService = useDependency(UserManagerService);\n    const user = userManagerService.getUser(item.personId);\n    const currentUser = useObservable(userManagerService.currentUser$);\n    const isCommentBySelf = currentUser?.userID === item.personId;\n    const isMock = item.id === MOCK_ID;\n    const [showReply, setShowReply] = useState(false);\n\n    const handleDeleteItem = () => {\n        if (onDeleteComment?.(item) === false) {\n            return;\n        }\n\n        commandService.executeCommand(\n            isRoot ? DeleteCommentTreeCommand.id : DeleteCommentCommand.id,\n            {\n                unitId,\n                subUnitId,\n                commentId: item.id,\n            }\n        );\n        if (isRoot) {\n            onClose?.();\n        }\n    };\n\n    return (\n        <div className={styles.threadCommentItem} onMouseLeave={() => setShowReply(false)} onMouseEnter={() => setShowReply(true)}>\n            <img className={styles.threadCommentItemHead} src={user?.avatar} />\n            <div className={styles.threadCommentItemTitle}>\n                <div className={styles.threadCommentUsername}>\n                    {user?.name || ' '}\n                </div>\n                <div>\n                    {(isMock || resolved)\n                        ? null\n                        : (\n                            showReply\n                                ? (\n                                    <div className={styles.threadCommentIcon} onClick={() => onReply(user)}>\n                                        <ReplyToCommentSingle />\n                                    </div>\n                                )\n                                : null\n                        )}\n                    {isCommentBySelf && !isMock && !resolved\n                        ? (\n                            <Dropdown\n                                overlay={(\n                                    <div className=\"univer-rounded-lg univer-p-4 univer-theme\">\n                                        <ul\n                                            className={`\n                                              univer-m-0 univer-grid univer-list-none univer-gap-2 univer-p-0\n                                              univer-text-sm\n                                              [&_a]:univer-cursor-pointer [&_a]:univer-rounded [&_a]:univer-p-1\n                                            `}\n                                        >\n                                            <li>\n                                                <a\n                                                    className=\"hover:univer-bg-gray-200\"\n                                                    onClick={() => onEditingChange?.(true)}\n                                                >\n                                                    {localeService.t('threadCommentUI.item.edit')}\n                                                </a>\n                                            </li>\n                                            <li>\n                                                <a\n                                                    className=\"hover:univer-bg-gray-200\"\n                                                    onClick={handleDeleteItem}\n                                                >\n                                                    {localeService.t('threadCommentUI.item.delete')}\n                                                </a>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                )}\n                            >\n                                <div className={styles.threadCommentIcon}>\n                                    <MoreHorizontalSingle />\n                                </div>\n                            </Dropdown>\n                        )\n                        : null}\n                </div>\n            </div>\n            <div className={styles.threadCommentItemTime}>{item.dT}</div>\n            {editing\n                ? (\n                    <ThreadCommentEditor\n                        type={type}\n                        id={item.id}\n                        comment={item}\n                        onCancel={() => onEditingChange?.(false)}\n                        autoFocus\n                        unitId={unitId}\n                        subUnitId={subUnitId}\n                        onSave={({ text, attachments }) => {\n                            onEditingChange?.(false);\n                            commandService.executeCommand(\n                                UpdateCommentCommand.id,\n                                {\n                                    unitId,\n                                    subUnitId,\n                                    payload: {\n                                        commentId: item.id,\n                                        text,\n                                        attachments,\n                                    },\n                                } as IUpdateCommentCommandParams\n                            );\n                        }}\n                    />\n                )\n                : (\n                    <div className={styles.threadCommentItemContent}>\n                        {transformDocument2TextNodes(item.text).map((paragraph, i) => (\n                            <div key={i}>\n                                {paragraph.map((item, i) => {\n                                    switch (item.type) {\n                                        case 'mention':\n                                            return (\n                                                <a className={styles.threadCommentItemAt} key={i}>\n                                                    {item.content.label}\n                                                    {' '}\n                                                </a>\n                                            );\n                                        default:\n                                            return item.content;\n                                    }\n                                })}\n                            </div>\n                        ))}\n                    </div>\n                )}\n        </div>\n    );\n};\n\nexport const ThreadCommentTree = (props: IThreadCommentTreeProps) => {\n    const {\n        id,\n        unitId,\n        subUnitId,\n        refStr,\n        showEdit = true,\n        onClick,\n        showHighlight,\n        onClose,\n        getSubUnitName,\n        prefix,\n        autoFocus,\n        onMouseEnter,\n        onMouseLeave,\n        onAddComment,\n        onDeleteComment,\n        onResolve,\n        type,\n    } = props;\n    const threadCommentModel = useDependency(ThreadCommentModel);\n    const [isHover, setIsHover] = useState(false);\n    const [editingId, setEditingId] = useState('');\n    const updte$ = useMemo(() => threadCommentModel.commentUpdate$.pipe(debounceTime(16)), [threadCommentModel]);\n    useObservable(updte$);\n    const comments = id ? threadCommentModel.getCommentWithChildren(unitId, subUnitId, id) : null;\n    const commandService = useDependency(ICommandService);\n    const userManagerService = useDependency(UserManagerService);\n    const resolved = comments?.root.resolved;\n    const currentUser = useObservable(userManagerService.currentUser$);\n    const editorRef = useRef<IThreadCommentEditorInstance>(null);\n    const renderComments: IThreadComment[] = [\n        ...comments ?\n            [comments.root] :\n            // mock empty comment\n            [{\n                id: MOCK_ID,\n                text: {\n                    dataStream: '\\n\\r',\n                },\n                personId: currentUser?.userID ?? '',\n                ref: refStr ?? '',\n                dT: '',\n                unitId,\n                subUnitId,\n                threadId: '',\n            }],\n        ...(comments?.children ?? []) as IThreadComment[],\n    ];\n    const scroller = useRef<HTMLDivElement>(null);\n    const handleResolve: React.MouseEventHandler<HTMLDivElement> = (e) => {\n        e.stopPropagation();\n        if (!resolved) {\n            commandService.executeCommand(SetActiveCommentOperation.id);\n        } else {\n            commandService.executeCommand(SetActiveCommentOperation.id, {\n                unitId,\n                subUnitId,\n                commentId: id,\n            });\n        }\n\n        commandService.executeCommand(ResolveCommentCommand.id, {\n            unitId,\n            subUnitId,\n            commentId: id,\n            resolved: !resolved,\n        });\n\n        onResolve?.(!resolved);\n    };\n\n    const handleDeleteRoot: React.MouseEventHandler<HTMLDivElement> = (e) => {\n        e.stopPropagation();\n        commandService.executeCommand(SetActiveCommentOperation.id);\n        if (comments?.root && (onDeleteComment?.(comments.root) === false)) {\n            return;\n        }\n\n        commandService.executeCommand(\n            DeleteCommentTreeCommand.id,\n            {\n                unitId,\n                subUnitId,\n                commentId: id,\n            }\n        );\n        onClose?.();\n    };\n\n    useEffect(() => {\n        return onMouseLeave?.();\n    }, []);\n\n    const subUnitName = getSubUnitName(comments?.root.subUnitId ?? subUnitId);\n    const editorVisible = showEdit && !editingId && !resolved;\n    const title = `${refStr || comments?.root.ref || ''}${subUnitName ? ' \u00B7 ' : ''}${subUnitName}`;\n\n    return (\n        <div\n            className={clsx(styles.threadComment, {\n                [styles.threadCommentActive]: !resolved && (showHighlight || isHover || prefix === 'cell'),\n            })}\n            onClick={onClick}\n            id={`${prefix}-${unitId}-${subUnitId}-${id}`}\n            onMouseEnter={() => {\n                onMouseEnter?.();\n                setIsHover(true);\n            }}\n            onMouseLeave={() => {\n                onMouseLeave?.();\n                setIsHover(false);\n            }}\n        >\n            {!resolved && showHighlight ? <div className={styles.threadCommentHighlight} /> : null}\n            <div className={styles.threadCommentTitle}>\n                <div className={styles.threadCommentTitlePosition}>\n                    <div className={styles.threadCommentTitleHighlight} />\n                    <Tooltip showIfEllipsis title={title}>\n                        <div className={styles.threadCommentTitlePositionText}>\n                            {title}\n                        </div>\n                    </Tooltip>\n                </div>\n                {comments\n                    ? (\n                        <div className={styles.threadCommentIconContainer}>\n                            <div\n                                onClick={handleResolve}\n                                className={styles.threadCommentIcon}\n                                style={{ color: resolved ? 'rgb(var(--green-500))' : '' }}\n                            >\n                                {resolved ? <ResolvedSingle /> : <SolveSingle />}\n                            </div>\n                            {currentUser?.userID === comments.root.personId\n                                ? (\n                                    <div className={styles.threadCommentIcon} onClick={handleDeleteRoot}>\n                                        <DeleteSingle />\n                                    </div>\n                                )\n                                : null}\n                        </div>\n                    )\n                    : null}\n            </div>\n            <div className={styles.threadCommentContent} ref={scroller}>\n                {renderComments.map(\n                    (item) => (\n                        <ThreadCommentItem\n                            onClose={onClose}\n                            unitId={unitId}\n                            subUnitId={subUnitId}\n                            item={item}\n                            key={item.id}\n                            isRoot={item.id === comments?.root.id}\n                            editing={editingId === item.id}\n                            resolved={comments?.root.resolved}\n                            type={type}\n                            onEditingChange={(editing) => {\n                                if (editing) {\n                                    setEditingId(item.id);\n                                } else {\n                                    setEditingId('');\n                                }\n                            }}\n                            onReply={(user) => {\n                                if (!user) {\n                                    return;\n                                }\n                                requestAnimationFrame(() => {\n                                    editorRef.current?.reply(transformTextNodes2Document([{\n                                        type: 'mention',\n                                        content: {\n                                            id: user.userID,\n                                            label: user.name,\n                                        },\n                                    }]));\n                                });\n                            }}\n                            onAddComment={onAddComment}\n                            onDeleteComment={onDeleteComment}\n                        />\n                    )\n                )}\n            </div>\n            {editorVisible\n                ? (\n                    <div>\n                        <ThreadCommentEditor\n                            key={`${autoFocus}`}\n                            ref={editorRef}\n                            type={type}\n                            unitId={unitId}\n                            subUnitId={subUnitId}\n                            onSave={async ({ text, attachments }) => {\n                                const comment: IThreadComment = {\n                                    text,\n                                    attachments,\n                                    dT: getDT(),\n                                    id: generateRandomId(),\n                                    ref: refStr!,\n                                    personId: currentUser?.userID!,\n                                    parentId: comments?.root.id,\n                                    unitId,\n                                    subUnitId,\n                                    threadId: comments?.root.threadId!,\n                                };\n\n                                if (onAddComment?.(comment) === false) {\n                                    return;\n                                }\n\n                                await commandService.executeCommand(\n                                    AddCommentCommand.id,\n                                    {\n                                        unitId,\n                                        subUnitId,\n                                        comment,\n                                    } as IAddCommentCommandParams\n                                );\n                                if (scroller.current) {\n                                    scroller.current.scrollTop = scroller.current.scrollHeight;\n                                }\n                            }}\n                            autoFocus={autoFocus || (!comments)}\n                            onCancel={() => {\n                                if (!comments) {\n                                    onClose?.();\n                                }\n                            }}\n                        />\n                    </div>\n                )\n                : null}\n        </div>\n    );\n};\n", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IDocumentBody, IDocumentData } from '@univerjs/core';\nimport type { Editor, IKeyboardEventConfig } from '@univerjs/docs-ui';\nimport type { IThreadComment } from '@univerjs/thread-comment';\nimport { BuildTextUtils, DOCS_NORMAL_EDITOR_UNIT_ID_KEY, ICommandService, LocaleService, Tools, UniverInstanceType } from '@univerjs/core';\nimport { Button } from '@univerjs/design';\nimport { BreakLineCommand, IEditorService, RichTextEditor } from '@univerjs/docs-ui';\nimport { KeyCode, useDependency } from '@univerjs/ui';\nimport React, { forwardRef, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { SetActiveCommentOperation } from '../../commands/operations/comment.operations';\nimport styles from './index.module.less';\n\nexport interface IThreadCommentEditorProps {\n    id?: string;\n    comment?: Pick<IThreadComment, 'attachments' | 'text' | 'mentions'>;\n    onSave?: (comment: Pick<IThreadComment, 'attachments' | 'text'>) => void;\n    onCancel?: () => void;\n    autoFocus?: boolean;\n    unitId: string;\n    subUnitId: string;\n    type: UniverInstanceType;\n}\n\nexport interface IThreadCommentEditorInstance {\n    reply: (text: IDocumentBody) => void;\n}\n\nfunction getSnapshot(body: IDocumentBody): IDocumentData {\n    return {\n        id: 'd',\n        body,\n        documentStyle: {},\n    };\n}\n\nexport const ThreadCommentEditor = forwardRef<IThreadCommentEditorInstance, IThreadCommentEditorProps>((props, ref) => {\n    const { comment, onSave, id, onCancel, autoFocus, unitId, type } = props;\n    const commandService = useDependency(ICommandService);\n    const localeService = useDependency(LocaleService);\n    const [editing, setEditing] = useState(false);\n    const editorService = useDependency(IEditorService);\n    const editor = useRef<Editor>(null);\n    const rootEditorId = type === UniverInstanceType.UNIVER_SHEET ? DOCS_NORMAL_EDITOR_UNIT_ID_KEY : unitId;\n    const [canSubmit, setCanSubmit] = useState(() => BuildTextUtils.transform.getPlainText(editor.current?.getDocumentData().body?.dataStream ?? ''));\n    useEffect(() => {\n        setCanSubmit(BuildTextUtils.transform.getPlainText(editor.current?.getDocumentData().body?.dataStream ?? ''));\n\n        const sub = editor.current?.selectionChange$.subscribe(() => {\n            setCanSubmit(BuildTextUtils.transform.getPlainText(editor.current?.getDocumentData().body?.dataStream ?? ''));\n        });\n\n        return () => sub?.unsubscribe();\n    }, [editor.current?.selectionChange$]);\n\n    const keyboardEventConfig: IKeyboardEventConfig = useMemo(() => (\n        {\n            keyCodes: [{ keyCode: KeyCode.ENTER }],\n            handler: (keyCode) => {\n                if (keyCode === KeyCode.ENTER) {\n                    commandService.executeCommand(\n                        BreakLineCommand.id\n                    );\n                }\n            },\n        }\n    ), [commandService]);\n\n    useImperativeHandle(ref, () => ({\n        reply(text) {\n            editor.current?.focus();\n            editor.current?.setDocumentData(getSnapshot(text));\n        },\n    }));\n\n    const handleSave = () => {\n        if (editor.current) {\n            const newText = Tools.deepClone(editor.current.getDocumentData().body);\n            setEditing(false);\n            onSave?.({\n                ...comment,\n                text: newText!,\n            });\n            editor.current.replaceText('');\n            setTimeout(() => {\n                editor.current?.setSelectionRanges([]);\n                editor.current?.blur();\n            }, 10);\n        }\n    };\n\n    return (\n        <div className={styles.threadCommentEditor} onClick={(e) => e.preventDefault()}>\n            <RichTextEditor\n                editorRef={editor}\n                autoFocus={autoFocus}\n                style={{ width: '100%' }}\n                keyboardEventConfig={keyboardEventConfig}\n                placeholder={localeService.t('threadCommentUI.editor.placeholder')}\n                initialValue={comment?.text && getSnapshot(comment.text)}\n                onFocusChange={(isFocus) => isFocus && setEditing(isFocus)}\n                isSingle={false}\n                maxHeight={64}\n                onClickOutside={() => {\n                    setTimeout(() => {\n                        editorService.focus(rootEditorId);\n                    }, 30);\n                }}\n            />\n            {editing\n                ? (\n                    <div className={styles.threadCommentEditorButtons}>\n                        <Button\n                            style={{ marginRight: 12 }}\n                            onClick={() => {\n                                onCancel?.();\n                                setEditing(false);\n                                editor.current?.replaceText('', true);\n                                commandService.executeCommand(SetActiveCommentOperation.id);\n                            }}\n                        >\n                            {localeService.t('threadCommentUI.editor.cancel')}\n                        </Button>\n                        <Button\n                            type=\"primary\"\n                            disabled={!canSubmit}\n                            onClick={handleSave}\n                        >\n                            {localeService.t(id ? 'threadCommentUI.editor.save' : 'threadCommentUI.editor.reply')}\n                        </Button>\n                    </div>\n                )\n                : null}\n        </div>\n    );\n});\n", "export default {\n  \"threadCommentEditorButtons\": \"univer-thread-comment-editor-buttons\",\n  \"threadCommentEditorSuggestion\": \"univer-thread-comment-editor-suggestion\",\n  \"threadCommentEditorSuggestionActive\": \"univer-thread-comment-editor-suggestionActive\",\n  \"threadCommentEditorSuggestionIcon\": \"univer-thread-comment-editor-suggestion-icon\"\n};import \"ni:sha-256;Uh3LcB8v5M3DT3GyPrwYNB9woFhyzwSMJtt5DgY1BVY\";", "/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IThreadCommentMention } from '@univerjs/thread-comment';\nimport { CustomRangeType, getBodySlice, type IDocumentBody } from '@univerjs/core';\n\nexport type TextNode = {\n    type: 'text';\n    content: string;\n} | {\n    type: 'mention';\n    content: IThreadCommentMention;\n};\n\nconst transformDocument2TextNodesInParagraph = (doc: IDocumentBody) => {\n    const { dataStream, customRanges } = doc;\n    const end = dataStream.endsWith('\\r\\n') ? dataStream.length - 2 : dataStream.length;\n    const textNodes: TextNode[] = [];\n\n    let lastIndex = 0;\n\n    customRanges?.forEach((range) => {\n        if (lastIndex < range.startIndex) {\n            textNodes.push({\n                type: 'text',\n                content: dataStream.slice(lastIndex, range.startIndex),\n            });\n        }\n        textNodes.push({\n            type: 'mention',\n            content: {\n                label: dataStream.slice(range.startIndex, range.endIndex + 1),\n                id: range.rangeId,\n            },\n        });\n        lastIndex = range.endIndex + 1;\n    });\n\n    textNodes.push({\n        type: 'text',\n        content: dataStream.slice(lastIndex, end),\n    });\n    return textNodes;\n};\n\nexport const transformDocument2TextNodes = (doc: IDocumentBody) => {\n    const { paragraphs = [] } = doc;\n    let lastIndex = 0;\n\n    return paragraphs.map((paragraph) => {\n        const body = getBodySlice(doc, lastIndex, paragraph.startIndex);\n        lastIndex = paragraph.startIndex + 1;\n        return transformDocument2TextNodesInParagraph(body);\n    });\n};\n\nexport const transformTextNodes2Document = (nodes: TextNode[]): IDocumentBody => {\n    let str = '';\n    const customRanges: Required<IDocumentBody['customRanges']> = [];\n\n    nodes.forEach((node) => {\n        switch (node.type) {\n            case 'text':\n                str += node.content;\n                break;\n            case 'mention': {\n                const start = str.length;\n                str += node.content.label;\n                const end = str.length - 1;\n                customRanges.push({\n                    rangeId: node.content.id,\n                    rangeType: CustomRangeType.MENTION,\n                    startIndex: start,\n                    endIndex: end,\n                    properties: {},\n                });\n                break;\n            }\n\n            default:\n                break;\n        }\n    });\n\n    str += '\\n\\r';\n\n    return {\n        textRuns: [],\n        paragraphs: [\n            {\n                startIndex: str.length - 2,\n                paragraphStyle: {},\n            },\n        ],\n        sectionBreaks: [\n            {\n                startIndex: str.length - 1,\n            },\n        ],\n        dataStream: str,\n        customRanges,\n    };\n};\n", "export default {\n  \"threadComment\": \"univer-thread-comment\",\n  \"threadCommentActive\": \"univer-thread-comment-active\",\n  \"threadCommentContent\": \"univer-thread-comment-content\",\n  \"threadCommentHighlight\": \"univer-thread-comment-highlight\",\n  \"threadCommentIconContainer\": \"univer-thread-comment-icon-container\",\n  \"threadCommentIcon\": \"univer-thread-comment-icon\",\n  \"threadCommentTitle\": \"univer-thread-comment-title\",\n  \"threadCommentTitlePosition\": \"univer-thread-comment-title-position\",\n  \"threadCommentTitleHighlight\": \"univer-thread-comment-title-highlight\",\n  \"threadCommentTitlePositionText\": \"univer-thread-comment-title-position-text\",\n  \"threadCommentUsername\": \"univer-thread-comment-username\",\n  \"threadCommentItem\": \"univer-thread-comment-item\",\n  \"threadCommentItemHead\": \"univer-thread-comment-item-head\",\n  \"threadCommentItemTitle\": \"univer-thread-comment-item-title\",\n  \"threadCommentItemTitlePosition\": \"univer-thread-comment-item-title-position\",\n  \"threadCommentItemTitleHighlight\": \"univer-thread-comment-item-title-highlight\",\n  \"threadCommentItemTime\": \"univer-thread-comment-item-time\",\n  \"threadCommentItemContent\": \"univer-thread-comment-item-content\",\n  \"threadCommentItemAt\": \"univer-thread-comment-item-at\"\n};import \"ni:sha-256;FWZJN1RqQ2ZjBrNXRlEjPF8T0GiCFK4pfqHsMiH3zgE\";", "export default {\n  \"threadCommentPanel\": \"univer-thread-comment-panel\",\n  \"threadComment\": \"univer-thread-comment\",\n  \"threadCommentPanelForms\": \"univer-thread-comment-panel-forms\",\n  \"select\": \"univer-select\",\n  \"threadCommentPanelEmpty\": \"univer-thread-comment-panel-empty\",\n  \"threadCommentPanelAdd\": \"univer-thread-comment-panel-add\",\n  \"threadCommentPanelSolved\": \"univer-thread-comment-panel-solved\"\n};import \"ni:sha-256;TfFP0ScIzgKHzTg66uPoISFJ6e4mILywZksIlBdUBKg\";"],
  "mappings": "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",
  "names": ["dayjs", "configSymbol", "defaultPluginConfig", "defaultPluginConfig", "import_react", "import_react", "_a", "_b", "_c", "index_module_default", "import_jsx_runtime", "index_module_default", "item", "i", "_a", "index_module_default", "import_jsx_runtime", "_a", "unitId", "subUnitId", "index_module_default"]
}
