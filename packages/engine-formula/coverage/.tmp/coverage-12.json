{"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/token.ts":{"path":"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/token.ts","statementMap":{"0":{"start":{"line":1,"column":43},"end":{"line":15,"column":23}},"1":{"start":{"line":2,"column":2},"end":{"line":2,"column":31}},"2":{"start":{"line":3,"column":2},"end":{"line":3,"column":32}},"3":{"start":{"line":4,"column":2},"end":{"line":4,"column":35}},"4":{"start":{"line":5,"column":2},"end":{"line":5,"column":34}},"5":{"start":{"line":6,"column":2},"end":{"line":6,"column":38}},"6":{"start":{"line":7,"column":2},"end":{"line":7,"column":32}},"7":{"start":{"line":8,"column":2},"end":{"line":8,"column":33}},"8":{"start":{"line":9,"column":2},"end":{"line":9,"column":37}},"9":{"start":{"line":10,"column":2},"end":{"line":10,"column":39}},"10":{"start":{"line":11,"column":2},"end":{"line":11,"column":49}},"11":{"start":{"line":12,"column":2},"end":{"line":12,"column":36}},"12":{"start":{"line":13,"column":2},"end":{"line":13,"column":46}},"13":{"start":{"line":14,"column":2},"end":{"line":14,"column":24}},"14":{"start":{"line":16,"column":42},"end":{"line":24,"column":22}},"15":{"start":{"line":17,"column":2},"end":{"line":17,"column":32}},"16":{"start":{"line":18,"column":2},"end":{"line":18,"column":36}},"17":{"start":{"line":19,"column":2},"end":{"line":19,"column":38}},"18":{"start":{"line":20,"column":2},"end":{"line":20,"column":48}},"19":{"start":{"line":21,"column":2},"end":{"line":21,"column":35}},"20":{"start":{"line":22,"column":2},"end":{"line":22,"column":45}},"21":{"start":{"line":23,"column":2},"end":{"line":23,"column":23}},"22":{"start":{"line":25,"column":55},"end":{"line":38,"column":2}},"23":{"start":{"line":39,"column":34},"end":{"line":39,"column":73}},"24":{"start":{"line":40,"column":58},"end":{"line":47,"column":2}},"25":{"start":{"line":48,"column":40},"end":{"line":60,"column":20}},"26":{"start":{"line":49,"column":2},"end":{"line":49,"column":36}},"27":{"start":{"line":50,"column":2},"end":{"line":50,"column":37}},"28":{"start":{"line":51,"column":2},"end":{"line":51,"column":29}},"29":{"start":{"line":52,"column":2},"end":{"line":52,"column":40}},"30":{"start":{"line":53,"column":2},"end":{"line":53,"column":40}},"31":{"start":{"line":54,"column":2},"end":{"line":54,"column":35}},"32":{"start":{"line":55,"column":2},"end":{"line":55,"column":36}},"33":{"start":{"line":56,"column":2},"end":{"line":56,"column":29}},"34":{"start":{"line":57,"column":2},"end":{"line":57,"column":43}},"35":{"start":{"line":58,"column":2},"end":{"line":58,"column":44}},"36":{"start":{"line":59,"column":2},"end":{"line":59,"column":21}},"37":{"start":{"line":61,"column":41},"end":{"line":65,"column":21}},"38":{"start":{"line":62,"column":2},"end":{"line":62,"column":35}},"39":{"start":{"line":63,"column":2},"end":{"line":63,"column":30}},"40":{"start":{"line":64,"column":2},"end":{"line":64,"column":22}},"41":{"start":{"line":66,"column":48},"end":{"line":66,"column":96}},"42":{"start":{"line":67,"column":41},"end":{"line":72,"column":21}},"43":{"start":{"line":68,"column":2},"end":{"line":68,"column":27}},"44":{"start":{"line":69,"column":2},"end":{"line":69,"column":30}},"45":{"start":{"line":70,"column":2},"end":{"line":70,"column":29}},"46":{"start":{"line":71,"column":2},"end":{"line":71,"column":22}},"47":{"start":{"line":73,"column":27},"end":{"line":73,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":1,"column":44},"end":{"line":1,"column":45}},"loc":{"start":{"line":1,"column":64},"end":{"line":15,"column":1}},"line":1},"1":{"name":"(anonymous_1)","decl":{"start":{"line":16,"column":43},"end":{"line":16,"column":44}},"loc":{"start":{"line":16,"column":62},"end":{"line":24,"column":1}},"line":16},"2":{"name":"(anonymous_2)","decl":{"start":{"line":48,"column":41},"end":{"line":48,"column":42}},"loc":{"start":{"line":48,"column":58},"end":{"line":60,"column":1}},"line":48},"3":{"name":"(anonymous_3)","decl":{"start":{"line":61,"column":42},"end":{"line":61,"column":43}},"loc":{"start":{"line":61,"column":60},"end":{"line":65,"column":1}},"line":61},"4":{"name":"(anonymous_4)","decl":{"start":{"line":67,"column":42},"end":{"line":67,"column":43}},"loc":{"start":{"line":67,"column":60},"end":{"line":72,"column":1}},"line":67}},"branchMap":{"0":{"loc":{"start":{"line":15,"column":3},"end":{"line":15,"column":22}},"type":"binary-expr","locations":[{"start":{"line":15,"column":3},"end":{"line":15,"column":16}},{"start":{"line":15,"column":20},"end":{"line":15,"column":22}}],"line":15},"1":{"loc":{"start":{"line":24,"column":3},"end":{"line":24,"column":21}},"type":"binary-expr","locations":[{"start":{"line":24,"column":3},"end":{"line":24,"column":15}},{"start":{"line":24,"column":19},"end":{"line":24,"column":21}}],"line":24},"2":{"loc":{"start":{"line":60,"column":3},"end":{"line":60,"column":19}},"type":"binary-expr","locations":[{"start":{"line":60,"column":3},"end":{"line":60,"column":13}},{"start":{"line":60,"column":17},"end":{"line":60,"column":19}}],"line":60},"3":{"loc":{"start":{"line":65,"column":3},"end":{"line":65,"column":20}},"type":"binary-expr","locations":[{"start":{"line":65,"column":3},"end":{"line":65,"column":14}},{"start":{"line":65,"column":18},"end":{"line":65,"column":20}}],"line":65},"4":{"loc":{"start":{"line":72,"column":3},"end":{"line":72,"column":20}},"type":"binary-expr","locations":[{"start":{"line":72,"column":3},"end":{"line":72,"column":14}},{"start":{"line":72,"column":18},"end":{"line":72,"column":20}}],"line":72}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1},"b":{"0":[1,1],"1":[1,1],"2":[1,1],"3":[1,1],"4":[1,1]},"inputSourceMap":{"version":3,"sources":["/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/token.ts"],"sourcesContent":["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum operatorToken {\n    PLUS = '+',\n    MINUS = '-',\n    MULTIPLY = '*',\n    DIVIDED = '/',\n    CONCATENATE = '&',\n    POWER = '^',\n    EQUALS = '=',\n    NOT_EQUAL = '<>',\n    GREATER_THAN = '>',\n    GREATER_THAN_OR_EQUAL = '>=',\n    LESS_THAN = '<',\n    LESS_THAN_OR_EQUAL = '<=',\n}\n\nexport enum compareToken {\n    EQUALS = '=',\n    NOT_EQUAL = '<>',\n    GREATER_THAN = '>',\n    GREATER_THAN_OR_EQUAL = '>=',\n    LESS_THAN = '<',\n    LESS_THAN_OR_EQUAL = '<=',\n}\n\nexport const OPERATOR_TOKEN_PRIORITY = new Map([\n    [operatorToken.NOT_EQUAL as string, 4],\n    [operatorToken.LESS_THAN as string, 4],\n    [operatorToken.GREATER_THAN_OR_EQUAL as string, 4],\n    [operatorToken.EQUALS as string, 4],\n    [operatorToken.GREATER_THAN as string, 4],\n    [operatorToken.LESS_THAN_OR_EQUAL as string, 4],\n    [operatorToken.CONCATENATE as string, 3],\n    [operatorToken.PLUS as string, 2],\n    [operatorToken.MINUS as string, 2],\n    [operatorToken.DIVIDED as string, 1],\n    [operatorToken.MULTIPLY as string, 1],\n    [operatorToken.POWER as string, 0],\n]);\n\nexport const OPERATOR_TOKEN_SET = new Set(OPERATOR_TOKEN_PRIORITY.keys());\n\nexport const OPERATOR_TOKEN_COMPARE_SET = new Set([\n    operatorToken.EQUALS as string,\n    operatorToken.NOT_EQUAL,\n    operatorToken.GREATER_THAN,\n    operatorToken.GREATER_THAN_OR_EQUAL,\n    operatorToken.LESS_THAN,\n    operatorToken.LESS_THAN_OR_EQUAL,\n]);\n\nexport enum matchToken {\n    OPEN_BRACKET = '(',\n    CLOSE_BRACKET = ')',\n    COMMA = ',',\n    SINGLE_QUOTATION = \"'\",\n    DOUBLE_QUOTATION = '\"',\n    OPEN_BRACES = '{',\n    CLOSE_BRACES = '}',\n    COLON = ':',\n    OPEN_SQUARE_BRACKET = '[',\n    CLOSE_SQUARE_BRACKET = ']',\n}\n\nexport enum suffixToken {\n    PERCENTAGE = '%',\n    POUND = '#',\n}\n\nexport const SUFFIX_TOKEN_SET = new Set([suffixToken.PERCENTAGE as string, suffixToken.POUND]);\n\nexport enum prefixToken {\n    AT = '@',\n    MINUS = '-',\n    PLUS = '+',\n}\n\nexport const SPACE_TOKEN = ' ';\n"],"mappings":"AAgBO,WAAK,gBAAL,kBAAKA,mBAAL;AACH,EAAAA,eAAA,UAAO;AACP,EAAAA,eAAA,WAAQ;AACR,EAAAA,eAAA,cAAW;AACX,EAAAA,eAAA,aAAU;AACV,EAAAA,eAAA,iBAAc;AACd,EAAAA,eAAA,WAAQ;AACR,EAAAA,eAAA,YAAS;AACT,EAAAA,eAAA,eAAY;AACZ,EAAAA,eAAA,kBAAe;AACf,EAAAA,eAAA,2BAAwB;AACxB,EAAAA,eAAA,eAAY;AACZ,EAAAA,eAAA,wBAAqB;AAZb,SAAAA;AAAA,GAAA;AAeL,WAAK,eAAL,kBAAKC,kBAAL;AACH,EAAAA,cAAA,YAAS;AACT,EAAAA,cAAA,eAAY;AACZ,EAAAA,cAAA,kBAAe;AACf,EAAAA,cAAA,2BAAwB;AACxB,EAAAA,cAAA,eAAY;AACZ,EAAAA,cAAA,wBAAqB;AANb,SAAAA;AAAA,GAAA;AASL,aAAM,0BAA0B,oBAAI,IAAI;AAAA,EAC3C,CAAC,sBAAmC,CAAC;AAAA,EACrC,CAAC,qBAAmC,CAAC;AAAA,EACrC,CAAC,kCAA+C,CAAC;AAAA,EACjD,CAAC,kBAAgC,CAAC;AAAA,EAClC,CAAC,wBAAsC,CAAC;AAAA,EACxC,CAAC,+BAA4C,CAAC;AAAA,EAC9C,CAAC,uBAAqC,CAAC;AAAA,EACvC,CAAC,gBAA8B,CAAC;AAAA,EAChC,CAAC,iBAA+B,CAAC;AAAA,EACjC,CAAC,mBAAiC,CAAC;AAAA,EACnC,CAAC,oBAAkC,CAAC;AAAA,EACpC,CAAC,iBAA+B,CAAC;AACrC,CAAC;AAEM,aAAM,qBAAqB,IAAI,IAAI,wBAAwB,KAAK,CAAC;AAEjE,aAAM,6BAA6B,oBAAI,IAAI;AAAA,EAC9C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,CAAC;AAEM,WAAK,aAAL,kBAAKC,gBAAL;AACH,EAAAA,YAAA,kBAAe;AACf,EAAAA,YAAA,mBAAgB;AAChB,EAAAA,YAAA,WAAQ;AACR,EAAAA,YAAA,sBAAmB;AACnB,EAAAA,YAAA,sBAAmB;AACnB,EAAAA,YAAA,iBAAc;AACd,EAAAA,YAAA,kBAAe;AACf,EAAAA,YAAA,WAAQ;AACR,EAAAA,YAAA,yBAAsB;AACtB,EAAAA,YAAA,0BAAuB;AAVf,SAAAA;AAAA,GAAA;AAaL,WAAK,cAAL,kBAAKC,iBAAL;AACH,EAAAA,aAAA,gBAAa;AACb,EAAAA,aAAA,WAAQ;AAFA,SAAAA;AAAA,GAAA;AAKL,aAAM,mBAAmB,oBAAI,IAAI,CAAC,sBAAkC,eAAiB,CAAC;AAEtF,WAAK,cAAL,kBAAKC,iBAAL;AACH,EAAAA,aAAA,QAAK;AACL,EAAAA,aAAA,WAAQ;AACR,EAAAA,aAAA,UAAO;AAHC,SAAAA;AAAA,GAAA;AAML,aAAM,cAAc;","names":["operatorToken","compareToken","matchToken","suffixToken","prefixToken"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ec3b32bec4eb6c9c5d3bb002b33dc3d2d5223129"},"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/match-token.ts":{"path":"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/match-token.ts","statementMap":{"0":{"start":{"line":2,"column":36},"end":{"line":8,"column":1}},"1":{"start":{"line":10,"column":2},"end":{"line":10,"column":44}},"2":{"start":{"line":13,"column":2},"end":{"line":17,"column":3}},"3":{"start":{"line":14,"column":4},"end":{"line":16,"column":5}},"4":{"start":{"line":15,"column":6},"end":{"line":15,"column":18}},"5":{"start":{"line":18,"column":2},"end":{"line":18,"column":15}},"6":{"start":{"line":21,"column":2},"end":{"line":23,"column":3}},"7":{"start":{"line":22,"column":4},"end":{"line":22,"column":56}},"8":{"start":{"line":24,"column":2},"end":{"line":24,"column":19}},"9":{"start":{"line":27,"column":2},"end":{"line":27,"column":204}},"10":{"start":{"line":29,"column":58},"end":{"line":47,"column":2}},"11":{"start":{"line":49,"column":2},"end":{"line":49,"column":47}},"12":{"start":{"line":51,"column":69},"end":{"line":71,"column":2}},"13":{"start":{"line":73,"column":2},"end":{"line":73,"column":58}}},"fnMap":{"0":{"name":"isFormulaLexerToken","decl":{"start":{"line":9,"column":16},"end":{"line":9,"column":35}},"loc":{"start":{"line":9,"column":41},"end":{"line":11,"column":1}},"line":9},"1":{"name":"includeFormulaLexerToken","decl":{"start":{"line":12,"column":16},"end":{"line":12,"column":40}},"loc":{"start":{"line":12,"column":46},"end":{"line":19,"column":1}},"line":12},"2":{"name":"normalizeSheetName","decl":{"start":{"line":20,"column":16},"end":{"line":20,"column":34}},"loc":{"start":{"line":20,"column":46},"end":{"line":25,"column":1}},"line":20},"3":{"name":"matchRefDrawToken","decl":{"start":{"line":26,"column":16},"end":{"line":26,"column":33}},"loc":{"start":{"line":26,"column":40},"end":{"line":28,"column":1}},"line":26},"4":{"name":"isTokenCannotBeAtEnd","decl":{"start":{"line":48,"column":16},"end":{"line":48,"column":36}},"loc":{"start":{"line":48,"column":44},"end":{"line":50,"column":1}},"line":48},"5":{"name":"isTokenCannotPrecedeSuffixToken","decl":{"start":{"line":72,"column":16},"end":{"line":72,"column":47}},"loc":{"start":{"line":72,"column":55},"end":{"line":74,"column":1}},"line":72}},"branchMap":{"0":{"loc":{"start":{"line":14,"column":4},"end":{"line":16,"column":5}},"type":"if","locations":[{"start":{"line":14,"column":4},"end":{"line":16,"column":5}},{"start":{},"end":{}}],"line":14},"1":{"loc":{"start":{"line":21,"column":2},"end":{"line":23,"column":3}},"type":"if","locations":[{"start":{"line":21,"column":2},"end":{"line":23,"column":3}},{"start":{},"end":{}}],"line":21},"2":{"loc":{"start":{"line":21,"column":6},"end":{"line":21,"column":69}},"type":"binary-expr","locations":[{"start":{"line":21,"column":6},"end":{"line":21,"column":26}},{"start":{"line":21,"column":30},"end":{"line":21,"column":69}}],"line":21},"3":{"loc":{"start":{"line":27,"column":9},"end":{"line":27,"column":203}},"type":"binary-expr","locations":[{"start":{"line":27,"column":9},"end":{"line":27,"column":34}},{"start":{"line":27,"column":38},"end":{"line":27,"column":70}},{"start":{"line":27,"column":74},"end":{"line":27,"column":107}},{"start":{"line":27,"column":111},"end":{"line":27,"column":147}},{"start":{"line":27,"column":151},"end":{"line":27,"column":187}},{"start":{"line":27,"column":191},"end":{"line":27,"column":203}}],"line":27}},"s":{"0":1,"1":0,"2":30,"3":793,"4":10,"5":20,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":1,"13":0},"f":{"0":0,"1":30,"2":0,"3":0,"4":0,"5":0},"b":{"0":[10,783],"1":[0,0],"2":[0,0],"3":[0,0,0,0,0,0]},"inputSourceMap":{"version":3,"sources":["/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/match-token.ts"],"sourcesContent":["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { compareToken, matchToken, operatorToken, prefixToken, suffixToken } from './token';\n\nexport const FORMULA_LEXER_TOKENS = [\n    ...Object.values(compareToken),\n    ...Object.values(operatorToken),\n    ...Object.values(matchToken),\n    ...Object.values(suffixToken),\n    ...Object.values(prefixToken),\n];\n\nexport function isFormulaLexerToken(str: string) {\n    return FORMULA_LEXER_TOKENS.includes(str as compareToken);\n}\n\nexport function includeFormulaLexerToken(str: string) {\n    for (const token of FORMULA_LEXER_TOKENS) {\n        if (str.indexOf(token) > -1) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function normalizeSheetName(sheetName: string) {\n    if (sheetName[0] === \"'\" && sheetName[sheetName.length - 1] === \"'\") {\n        return sheetName.substring(1, sheetName.length - 1);\n    }\n    return sheetName;\n}\n\n/**\n * Determine whether the character is a token keyword for the formula engine.\n * @param char\n */\nexport function matchRefDrawToken(char: string) {\n    return (\n        (isFormulaLexerToken(char) &&\n                char !== matchToken.CLOSE_BRACES &&\n                char !== matchToken.CLOSE_BRACKET &&\n                char !== matchToken.SINGLE_QUOTATION &&\n                char !== matchToken.DOUBLE_QUOTATION) ||\n            char === ' '\n    );\n}\n\nexport const TOKEN_CANNOT_BE_AT_END_SET = new Set<string>([\n    operatorToken.PLUS,\n    operatorToken.MINUS,\n    operatorToken.MULTIPLY,\n    operatorToken.DIVIDED,\n    operatorToken.CONCATENATE,\n    operatorToken.POWER,\n    operatorToken.EQUALS,\n    operatorToken.NOT_EQUAL,\n    operatorToken.GREATER_THAN,\n    operatorToken.GREATER_THAN_OR_EQUAL,\n    operatorToken.LESS_THAN,\n    operatorToken.LESS_THAN_OR_EQUAL,\n    matchToken.OPEN_BRACKET,\n    matchToken.COMMA,\n    matchToken.COLON,\n    matchToken.OPEN_BRACES,\n    matchToken.OPEN_SQUARE_BRACKET,\n]);\n\nexport function isTokenCannotBeAtEnd(token: string): boolean {\n    return TOKEN_CANNOT_BE_AT_END_SET.has(token);\n}\n\nexport const TOKEN_CANNOT_PRECEDE_SUFFIX_TOKEN_SET = new Set<string>([\n    operatorToken.PLUS,\n    operatorToken.MINUS,\n    operatorToken.MULTIPLY,\n    operatorToken.DIVIDED,\n    operatorToken.CONCATENATE,\n    operatorToken.POWER,\n    operatorToken.EQUALS,\n    operatorToken.NOT_EQUAL,\n    operatorToken.GREATER_THAN,\n    operatorToken.GREATER_THAN_OR_EQUAL,\n    operatorToken.LESS_THAN,\n    operatorToken.LESS_THAN_OR_EQUAL,\n\n    matchToken.OPEN_BRACKET,\n    matchToken.COMMA,\n    matchToken.COLON,\n    matchToken.OPEN_BRACES,\n    matchToken.OPEN_SQUARE_BRACKET,\n\n    suffixToken.PERCENTAGE,\n    suffixToken.POUND,\n]);\n\nexport function isTokenCannotPrecedeSuffixToken(token: string): boolean {\n    return TOKEN_CANNOT_PRECEDE_SUFFIX_TOKEN_SET.has(token);\n}\n"],"mappings":"AAgBA,SAAS,cAAc,YAAY,eAAe,aAAa,mBAAmB;AAE3E,aAAM,uBAAuB;AAAA,EAChC,GAAG,OAAO,OAAO,YAAY;AAAA,EAC7B,GAAG,OAAO,OAAO,aAAa;AAAA,EAC9B,GAAG,OAAO,OAAO,UAAU;AAAA,EAC3B,GAAG,OAAO,OAAO,WAAW;AAAA,EAC5B,GAAG,OAAO,OAAO,WAAW;AAChC;AAEO,gBAAS,oBAAoB,KAAa;AAC7C,SAAO,qBAAqB,SAAS,GAAmB;AAC5D;AAEO,gBAAS,yBAAyB,KAAa;AAClD,aAAW,SAAS,sBAAsB;AACtC,QAAI,IAAI,QAAQ,KAAK,IAAI,IAAI;AACzB,aAAO;AAAA,IACX;AAAA,EACJ;AAEA,SAAO;AACX;AAEO,gBAAS,mBAAmB,WAAmB;AAClD,MAAI,UAAU,CAAC,MAAM,OAAO,UAAU,UAAU,SAAS,CAAC,MAAM,KAAK;AACjE,WAAO,UAAU,UAAU,GAAG,UAAU,SAAS,CAAC;AAAA,EACtD;AACA,SAAO;AACX;AAMO,gBAAS,kBAAkB,MAAc;AAC5C,SACK,oBAAoB,IAAI,KACjB,SAAS,WAAW,gBACpB,SAAS,WAAW,iBACpB,SAAS,WAAW,oBACpB,SAAS,WAAW,oBACxB,SAAS;AAErB;AAEO,aAAM,6BAA6B,oBAAI,IAAY;AAAA,EACtD,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AACf,CAAC;AAEM,gBAAS,qBAAqB,OAAwB;AACzD,SAAO,2BAA2B,IAAI,KAAK;AAC/C;AAEO,aAAM,wCAAwC,oBAAI,IAAY;AAAA,EACjE,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EAEd,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EAEX,YAAY;AAAA,EACZ,YAAY;AAChB,CAAC;AAEM,gBAAS,gCAAgC,OAAwB;AACpE,SAAO,sCAAsC,IAAI,KAAK;AAC1D;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b0888d8b8dfa87fc0ce630099aecf39526199c2c"},"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/regex.ts":{"path":"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/regex.ts","statementMap":{"0":{"start":{"line":2,"column":31},"end":{"line":2,"column":65}},"1":{"start":{"line":3,"column":44},"end":{"line":3,"column":71}},"2":{"start":{"line":4,"column":32},"end":{"line":4,"column":60}},"3":{"start":{"line":5,"column":31},"end":{"line":5,"column":34}},"4":{"start":{"line":6,"column":28},"end":{"line":6,"column":41}},"5":{"start":{"line":7,"column":21},"end":{"line":7,"column":32}},"6":{"start":{"line":8,"column":18},"end":{"line":8,"column":31}},"7":{"start":{"line":9,"column":42},"end":{"line":9,"column":91}},"8":{"start":{"line":10,"column":41},"end":{"line":10,"column":112}},"9":{"start":{"line":11,"column":46},"end":{"line":11,"column":170}},"10":{"start":{"line":12,"column":59},"end":{"line":12,"column":101}},"11":{"start":{"line":13,"column":44},"end":{"line":13,"column":133}},"12":{"start":{"line":14,"column":57},"end":{"line":14,"column":97}},"13":{"start":{"line":15,"column":35},"end":{"line":15,"column":149}},"14":{"start":{"line":16,"column":48},"end":{"line":16,"column":79}},"15":{"start":{"line":17,"column":38},"end":{"line":17,"column":158}},"16":{"start":{"line":18,"column":51},"end":{"line":18,"column":85}},"17":{"start":{"line":19,"column":42},"end":{"line":19,"column":113}},"18":{"start":{"line":20,"column":55},"end":{"line":20,"column":93}},"19":{"start":{"line":21,"column":45},"end":{"line":21,"column":119}},"20":{"start":{"line":22,"column":58},"end":{"line":22,"column":99}},"21":{"start":{"line":23,"column":25},"end":{"line":23,"column":93}},"22":{"start":{"line":24,"column":26},"end":{"line":24,"column":48}},"23":{"start":{"line":25,"column":28},"end":{"line":25,"column":46}},"24":{"start":{"line":26,"column":36},"end":{"line":26,"column":97}},"25":{"start":{"line":27,"column":48},"end":{"line":27,"column":92}},"26":{"start":{"line":28,"column":51},"end":{"line":28,"column":169}},"27":{"start":{"line":29,"column":53},"end":{"line":29,"column":217}},"28":{"start":{"line":30,"column":40},"end":{"line":30,"column":47}},"29":{"start":{"line":31,"column":53},"end":{"line":31,"column":94}},"30":{"start":{"line":32,"column":33},"end":{"line":32,"column":40}},"31":{"start":{"line":33,"column":46},"end":{"line":33,"column":80}},"32":{"start":{"line":35,"column":2},"end":{"line":35,"column":58}},"33":{"start":{"line":36,"column":2},"end":{"line":36,"column":63}},"34":{"start":{"line":39,"column":2},"end":{"line":39,"column":60}},"35":{"start":{"line":40,"column":2},"end":{"line":40,"column":65}},"36":{"start":{"line":43,"column":2},"end":{"line":43,"column":49}},"37":{"start":{"line":44,"column":2},"end":{"line":44,"column":54}},"38":{"start":{"line":47,"column":2},"end":{"line":47,"column":52}},"39":{"start":{"line":48,"column":2},"end":{"line":48,"column":57}},"40":{"start":{"line":51,"column":2},"end":{"line":51,"column":56}},"41":{"start":{"line":52,"column":2},"end":{"line":52,"column":61}},"42":{"start":{"line":55,"column":2},"end":{"line":55,"column":59}},"43":{"start":{"line":56,"column":2},"end":{"line":56,"column":64}},"44":{"start":{"line":59,"column":2},"end":{"line":59,"column":54}},"45":{"start":{"line":60,"column":2},"end":{"line":60,"column":59}},"46":{"start":{"line":63,"column":2},"end":{"line":63,"column":47}},"47":{"start":{"line":64,"column":2},"end":{"line":64,"column":52}},"48":{"start":{"line":67,"column":2},"end":{"line":67,"column":134}}},"fnMap":{"0":{"name":"regexTestSingeRange","decl":{"start":{"line":34,"column":16},"end":{"line":34,"column":35}},"loc":{"start":{"line":34,"column":43},"end":{"line":37,"column":1}},"line":34},"1":{"name":"regexTestMultipleRange","decl":{"start":{"line":38,"column":16},"end":{"line":38,"column":38}},"loc":{"start":{"line":38,"column":46},"end":{"line":41,"column":1}},"line":38},"2":{"name":"regexTestRow","decl":{"start":{"line":42,"column":16},"end":{"line":42,"column":28}},"loc":{"start":{"line":42,"column":36},"end":{"line":45,"column":1}},"line":42},"3":{"name":"regexTestColumn","decl":{"start":{"line":46,"column":16},"end":{"line":46,"column":31}},"loc":{"start":{"line":46,"column":39},"end":{"line":49,"column":1}},"line":46},"4":{"name":"regexTestSingleRow","decl":{"start":{"line":50,"column":16},"end":{"line":50,"column":34}},"loc":{"start":{"line":50,"column":42},"end":{"line":53,"column":1}},"line":50},"5":{"name":"regexTestSingleColumn","decl":{"start":{"line":54,"column":16},"end":{"line":54,"column":37}},"loc":{"start":{"line":54,"column":45},"end":{"line":57,"column":1}},"line":54},"6":{"name":"regexTestSuperTableColumn","decl":{"start":{"line":58,"column":16},"end":{"line":58,"column":41}},"loc":{"start":{"line":58,"column":49},"end":{"line":61,"column":1}},"line":58},"7":{"name":"regexTestArrayValue","decl":{"start":{"line":62,"column":16},"end":{"line":62,"column":35}},"loc":{"start":{"line":62,"column":43},"end":{"line":65,"column":1}},"line":62},"8":{"name":"isReferenceString","decl":{"start":{"line":66,"column":16},"end":{"line":66,"column":33}},"loc":{"start":{"line":66,"column":45},"end":{"line":68,"column":1}},"line":66}},"branchMap":{"0":{"loc":{"start":{"line":67,"column":9},"end":{"line":67,"column":133}},"type":"binary-expr","locations":[{"start":{"line":67,"column":9},"end":{"line":67,"column":39}},{"start":{"line":67,"column":43},"end":{"line":67,"column":76}},{"start":{"line":67,"column":80},"end":{"line":67,"column":103}},{"start":{"line":67,"column":107},"end":{"line":67,"column":133}}],"line":67}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":29,"33":29,"34":13,"35":13,"36":1,"37":1,"38":1,"39":1,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":29},"f":{"0":29,"1":13,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":29},"b":{"0":[29,13,1,1]},"inputSourceMap":{"version":3,"sources":["/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/regex.ts"],"sourcesContent":["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { prefixToken, suffixToken } from './token';\n\n// export const UNIT_NAME_REGEX = '\\'?\\\\[((?![\\\\/?:\"<>|*\\\\\\\\]).)*\\\\]';\n// export const UNIT_NAME_REGEX = '\\'?\\\\[((?![\\\\/?:\"<>|*\\\\\\\\]).)*?\\\\]';\n// export const UNIT_NAME_REGEX = '\\\\[((?![\\\\/?:\"<>|*\\\\\\\\]).)*?\\\\]';\n\nexport const UNIT_NAME_REGEX = '\\\\[([^\\\\[\\\\]\\\\/?:\"<>|*\\\\\\\\]+)\\\\]'; // '[Book-1.xlsx]Sheet1'!$A$4 gets [Book-1.xlsx] as unitId\n\nexport const UNIT_NAME_REGEX_PRECOMPILING = new RegExp(UNIT_NAME_REGEX);\n\nexport const SHEET_NAME_REGEX = '((?![\\\\[\\\\]\\\\/?*\\\\\\\\]).)*!';\n\nexport const ABSOLUTE_SYMBOL = '$';\n\nexport const RANGE_SYMBOL = '\\\\s*?:\\\\s*?';\n\n// Column numbers range from A to Z, and row numbers start at 1\nconst COLUMN_REGEX = '[A-Za-z]+';\nconst ROW_REGEX = '[1-9][0-9]*';\n\nexport const UNIT_NAME_SHEET_NAME_REGEX = `'?(${UNIT_NAME_REGEX})?(${SHEET_NAME_REGEX})?'?`;\n\nexport const SIMPLE_SINGLE_RANGE_REGEX = `\\\\${ABSOLUTE_SYMBOL}?${COLUMN_REGEX}\\\\${ABSOLUTE_SYMBOL}?${ROW_REGEX}`;\n\nexport const REFERENCE_MULTIPLE_RANGE_REGEX = `^(${prefixToken.AT})?${UNIT_NAME_SHEET_NAME_REGEX}${SIMPLE_SINGLE_RANGE_REGEX}${RANGE_SYMBOL}${SIMPLE_SINGLE_RANGE_REGEX}$`;\n\nexport const REFERENCE_MULTIPLE_RANGE_REGEX_PRECOMPILING = new RegExp(REFERENCE_MULTIPLE_RANGE_REGEX);\n\nexport const REFERENCE_SINGLE_RANGE_REGEX = `^${UNIT_NAME_SHEET_NAME_REGEX}\\\\s*?${SIMPLE_SINGLE_RANGE_REGEX}(${suffixToken.POUND})?$`;\n\nexport const REFERENCE_SINGLE_RANGE_REGEX_PRECOMPILING = new RegExp(REFERENCE_SINGLE_RANGE_REGEX);\n\nexport const REFERENCE_REGEX_ROW = `^${UNIT_NAME_SHEET_NAME_REGEX}\\\\${ABSOLUTE_SYMBOL}?${ROW_REGEX}${RANGE_SYMBOL}\\\\${ABSOLUTE_SYMBOL}?${ROW_REGEX}$`;\n\nexport const REFERENCE_REGEX_ROW_PRECOMPILING = new RegExp(REFERENCE_REGEX_ROW);\n\nexport const REFERENCE_REGEX_COLUMN = `^${UNIT_NAME_SHEET_NAME_REGEX}\\\\${ABSOLUTE_SYMBOL}?${COLUMN_REGEX}${RANGE_SYMBOL}\\\\${ABSOLUTE_SYMBOL}?${COLUMN_REGEX}$`;\n\nexport const REFERENCE_REGEX_COLUMN_PRECOMPILING = new RegExp(REFERENCE_REGEX_COLUMN);\n\nexport const REFERENCE_REGEX_SINGLE_ROW = `^${UNIT_NAME_SHEET_NAME_REGEX}\\\\s*?\\\\${ABSOLUTE_SYMBOL}?${ROW_REGEX}$`;\n\nexport const REFERENCE_REGEX_SINGLE_ROW_PRECOMPILING = new RegExp(REFERENCE_REGEX_SINGLE_ROW);\n\nexport const REFERENCE_REGEX_SINGLE_COLUMN = `^${UNIT_NAME_SHEET_NAME_REGEX}\\\\s*?\\\\${ABSOLUTE_SYMBOL}?${COLUMN_REGEX}$`;\n\nexport const REFERENCE_REGEX_SINGLE_COLUMN_PRECOMPILING = new RegExp(REFERENCE_REGEX_SINGLE_COLUMN);\n\nconst TABLE_NAME_REGEX = '((?![~!@#$%^&*()_+<>?:,./;’，。、‘：“《》？~！@#￥%……（）【】\\\\[\\\\]\\\\/\\\\\\\\]).)+';\n\nconst TABLE_TITLE_REGEX = '\\\\[#.+\\\\]\\\\s*?,\\\\s*?';\n\nconst TABLE_CONTENT_REGEX = '\\\\[((?<!#).)*\\\\]';\n\nconst TABLE_MULTIPLE_COLUMN_REGEX = `${TABLE_CONTENT_REGEX}${RANGE_SYMBOL}${TABLE_CONTENT_REGEX}`;\n\nexport const REFERENCE_TABLE_ALL_COLUMN_REGEX = `^(${UNIT_NAME_REGEX})?${TABLE_NAME_REGEX}$`;\n\nexport const REFERENCE_TABLE_SINGLE_COLUMN_REGEX = `^(${UNIT_NAME_REGEX})?${TABLE_NAME_REGEX}(${TABLE_CONTENT_REGEX}|\\\\[${TABLE_TITLE_REGEX}${TABLE_CONTENT_REGEX}\\\\])+$`; // =Table1[Column1] | =Table1[[#Title],[Column1]]\n\nexport const REFERENCE_TABLE_MULTIPLE_COLUMN_REGEX = `^(${UNIT_NAME_REGEX})?${TABLE_NAME_REGEX}(\\\\[${TABLE_MULTIPLE_COLUMN_REGEX}\\\\])?$|^${TABLE_NAME_REGEX}(\\\\[${TABLE_TITLE_REGEX}${TABLE_MULTIPLE_COLUMN_REGEX}\\\\])?$`; // =Table1[[#Title],[Column1]:[Column2]] | =Table1[[Column1]:[Column2]]\n\nexport const SUPER_TABLE_COLUMN_REGEX = '[.*?]';\n\nexport const SUPER_TABLE_COLUMN_REGEX_PRECOMPILING = new RegExp(SUPER_TABLE_COLUMN_REGEX, 'g');\n\nexport const ARRAY_VALUE_REGEX = '{.*?}';\n\nexport const ARRAY_VALUE_REGEX_PRECOMPILING = new RegExp(ARRAY_VALUE_REGEX, 'g');\n\nexport function regexTestSingeRange(token: string): boolean {\n    REFERENCE_SINGLE_RANGE_REGEX_PRECOMPILING.lastIndex = 0;\n    return REFERENCE_SINGLE_RANGE_REGEX_PRECOMPILING.test(token);\n}\n\nexport function regexTestMultipleRange(token: string): boolean {\n    REFERENCE_MULTIPLE_RANGE_REGEX_PRECOMPILING.lastIndex = 0;\n    return REFERENCE_MULTIPLE_RANGE_REGEX_PRECOMPILING.test(token);\n}\n\nexport function regexTestRow(token: string): boolean {\n    REFERENCE_REGEX_ROW_PRECOMPILING.lastIndex = 0;\n    return REFERENCE_REGEX_ROW_PRECOMPILING.test(token);\n}\n\nexport function regexTestColumn(token: string): boolean {\n    REFERENCE_REGEX_COLUMN_PRECOMPILING.lastIndex = 0;\n    return REFERENCE_REGEX_COLUMN_PRECOMPILING.test(token);\n}\n\nexport function regexTestSingleRow(token: string): boolean {\n    REFERENCE_REGEX_SINGLE_ROW_PRECOMPILING.lastIndex = 0;\n    return REFERENCE_REGEX_SINGLE_ROW_PRECOMPILING.test(token);\n}\n\nexport function regexTestSingleColumn(token: string): boolean {\n    REFERENCE_REGEX_SINGLE_COLUMN_PRECOMPILING.lastIndex = 0;\n    return REFERENCE_REGEX_SINGLE_COLUMN_PRECOMPILING.test(token);\n}\n\nexport function regexTestSuperTableColumn(token: string): boolean {\n    SUPER_TABLE_COLUMN_REGEX_PRECOMPILING.lastIndex = 0;\n    return SUPER_TABLE_COLUMN_REGEX_PRECOMPILING.test(token);\n}\n\nexport function regexTestArrayValue(token: string): boolean {\n    ARRAY_VALUE_REGEX_PRECOMPILING.lastIndex = 0;\n    return ARRAY_VALUE_REGEX_PRECOMPILING.test(token);\n}\n\nexport function isReferenceString(refString: string) {\n    return (\n        regexTestSingeRange(refString) ||\n        regexTestMultipleRange(refString) ||\n        regexTestRow(refString) ||\n        regexTestColumn(refString)\n    );\n}\n"],"mappings":"AAgBA,SAAS,aAAa,mBAAmB;AAMlC,aAAM,kBAAkB;AAExB,aAAM,+BAA+B,IAAI,OAAO,eAAe;AAE/D,aAAM,mBAAmB;AAEzB,aAAM,kBAAkB;AAExB,aAAM,eAAe;AAG5B,MAAM,eAAe;AACrB,MAAM,YAAY;AAEX,aAAM,6BAA6B,MAAM,eAAe,MAAM,gBAAgB;AAE9E,aAAM,4BAA4B,KAAK,eAAe,IAAI,YAAY,KAAK,eAAe,IAAI,SAAS;AAEvG,aAAM,iCAAiC,KAAK,YAAY,EAAE,KAAK,0BAA0B,GAAG,yBAAyB,GAAG,YAAY,GAAG,yBAAyB;AAEhK,aAAM,8CAA8C,IAAI,OAAO,8BAA8B;AAE7F,aAAM,+BAA+B,IAAI,0BAA0B,QAAQ,yBAAyB,IAAI,YAAY,KAAK;AAEzH,aAAM,4CAA4C,IAAI,OAAO,4BAA4B;AAEzF,aAAM,sBAAsB,IAAI,0BAA0B,KAAK,eAAe,IAAI,SAAS,GAAG,YAAY,KAAK,eAAe,IAAI,SAAS;AAE3I,aAAM,mCAAmC,IAAI,OAAO,mBAAmB;AAEvE,aAAM,yBAAyB,IAAI,0BAA0B,KAAK,eAAe,IAAI,YAAY,GAAG,YAAY,KAAK,eAAe,IAAI,YAAY;AAEpJ,aAAM,sCAAsC,IAAI,OAAO,sBAAsB;AAE7E,aAAM,6BAA6B,IAAI,0BAA0B,UAAU,eAAe,IAAI,SAAS;AAEvG,aAAM,0CAA0C,IAAI,OAAO,0BAA0B;AAErF,aAAM,gCAAgC,IAAI,0BAA0B,UAAU,eAAe,IAAI,YAAY;AAE7G,aAAM,6CAA6C,IAAI,OAAO,6BAA6B;AAElG,MAAM,mBAAmB;AAEzB,MAAM,oBAAoB;AAE1B,MAAM,sBAAsB;AAE5B,MAAM,8BAA8B,GAAG,mBAAmB,GAAG,YAAY,GAAG,mBAAmB;AAExF,aAAM,mCAAmC,KAAK,eAAe,KAAK,gBAAgB;AAElF,aAAM,sCAAsC,KAAK,eAAe,KAAK,gBAAgB,IAAI,mBAAmB,OAAO,iBAAiB,GAAG,mBAAmB;AAE1J,aAAM,wCAAwC,KAAK,eAAe,KAAK,gBAAgB,OAAO,2BAA2B,WAAW,gBAAgB,OAAO,iBAAiB,GAAG,2BAA2B;AAE1M,aAAM,2BAA2B;AAEjC,aAAM,wCAAwC,IAAI,OAAO,0BAA0B,GAAG;AAEtF,aAAM,oBAAoB;AAE1B,aAAM,iCAAiC,IAAI,OAAO,mBAAmB,GAAG;AAExE,gBAAS,oBAAoB,OAAwB;AACxD,4CAA0C,YAAY;AACtD,SAAO,0CAA0C,KAAK,KAAK;AAC/D;AAEO,gBAAS,uBAAuB,OAAwB;AAC3D,8CAA4C,YAAY;AACxD,SAAO,4CAA4C,KAAK,KAAK;AACjE;AAEO,gBAAS,aAAa,OAAwB;AACjD,mCAAiC,YAAY;AAC7C,SAAO,iCAAiC,KAAK,KAAK;AACtD;AAEO,gBAAS,gBAAgB,OAAwB;AACpD,sCAAoC,YAAY;AAChD,SAAO,oCAAoC,KAAK,KAAK;AACzD;AAEO,gBAAS,mBAAmB,OAAwB;AACvD,0CAAwC,YAAY;AACpD,SAAO,wCAAwC,KAAK,KAAK;AAC7D;AAEO,gBAAS,sBAAsB,OAAwB;AAC1D,6CAA2C,YAAY;AACvD,SAAO,2CAA2C,KAAK,KAAK;AAChE;AAEO,gBAAS,0BAA0B,OAAwB;AAC9D,wCAAsC,YAAY;AAClD,SAAO,sCAAsC,KAAK,KAAK;AAC3D;AAEO,gBAAS,oBAAoB,OAAwB;AACxD,iCAA+B,YAAY;AAC3C,SAAO,+BAA+B,KAAK,KAAK;AACpD;AAEO,gBAAS,kBAAkB,WAAmB;AACjD,SACI,oBAAoB,SAAS,KAC7B,uBAAuB,SAAS,KAChC,aAAa,SAAS,KACtB,gBAAgB,SAAS;AAEjC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"dd7593723ab97e958c533cc9df673dd7e0af8263"},"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/engine/utils/reference.ts":{"path":"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/engine/utils/reference.ts","statementMap":{"0":{"start":{"line":5,"column":19},"end":{"line":5,"column":28}},"1":{"start":{"line":6,"column":22},"end":{"line":6,"column":34}},"2":{"start":{"line":8,"column":25},"end":{"line":8,"column":51}},"3":{"start":{"line":9,"column":21},"end":{"line":9,"column":49}},"4":{"start":{"line":10,"column":22},"end":{"line":10,"column":50}},"5":{"start":{"line":11,"column":2},"end":{"line":14,"column":3}},"6":{"start":{"line":12,"column":4},"end":{"line":12,"column":29}},"7":{"start":{"line":13,"column":4},"end":{"line":13,"column":25}},"8":{"start":{"line":15,"column":2},"end":{"line":17,"column":3}},"9":{"start":{"line":16,"column":4},"end":{"line":16,"column":31}},"10":{"start":{"line":18,"column":2},"end":{"line":20,"column":3}},"11":{"start":{"line":19,"column":4},"end":{"line":19,"column":34}},"12":{"start":{"line":21,"column":2},"end":{"line":23,"column":3}},"13":{"start":{"line":22,"column":4},"end":{"line":22,"column":31}},"14":{"start":{"line":24,"column":2},"end":{"line":24,"column":30}},"15":{"start":{"line":27,"column":21},"end":{"line":27,"column":41}},"16":{"start":{"line":28,"column":2},"end":{"line":30,"column":3}},"17":{"start":{"line":29,"column":4},"end":{"line":29,"column":50}},"18":{"start":{"line":31,"column":19},"end":{"line":31,"column":39}},"19":{"start":{"line":32,"column":2},"end":{"line":37,"column":3}},"20":{"start":{"line":33,"column":4},"end":{"line":36,"column":6}},"21":{"start":{"line":38,"column":2},"end":{"line":38,"column":83}},"22":{"start":{"line":41,"column":26},"end":{"line":41,"column":28}},"23":{"start":{"line":42,"column":29},"end":{"line":42,"column":31}},"24":{"start":{"line":43,"column":2},"end":{"line":50,"column":3}},"25":{"start":{"line":44,"column":4},"end":{"line":44,"column":28}},"26":{"start":{"line":45,"column":9},"end":{"line":50,"column":3}},"27":{"start":{"line":46,"column":4},"end":{"line":46,"column":31}},"28":{"start":{"line":47,"column":9},"end":{"line":50,"column":3}},"29":{"start":{"line":48,"column":4},"end":{"line":48,"column":28}},"30":{"start":{"line":49,"column":4},"end":{"line":49,"column":31}},"31":{"start":{"line":51,"column":2},"end":{"line":54,"column":4}},"32":{"start":{"line":65,"column":6},"end":{"line":65,"column":11}},"33":{"start":{"line":66,"column":16},"end":{"line":66,"column":55}},"34":{"start":{"line":67,"column":14},"end":{"line":67,"column":51}},"35":{"start":{"line":68,"column":2},"end":{"line":72,"column":3}},"36":{"start":{"line":69,"column":22},"end":{"line":69,"column":65}},"37":{"start":{"line":70,"column":20},"end":{"line":70,"column":59}},"38":{"start":{"line":71,"column":4},"end":{"line":71,"column":37}},"39":{"start":{"line":73,"column":2},"end":{"line":77,"column":3}},"40":{"start":{"line":74,"column":22},"end":{"line":74,"column":84}},"41":{"start":{"line":75,"column":20},"end":{"line":75,"column":78}},"42":{"start":{"line":76,"column":4},"end":{"line":76,"column":37}},"43":{"start":{"line":78,"column":19},"end":{"line":78,"column":122}},"44":{"start":{"line":79,"column":17},"end":{"line":79,"column":112}},"45":{"start":{"line":80,"column":2},"end":{"line":82,"column":3}},"46":{"start":{"line":81,"column":4},"end":{"line":81,"column":20}},"47":{"start":{"line":83,"column":2},"end":{"line":83,"column":33}},"48":{"start":{"line":86,"column":2},"end":{"line":86,"column":69}},"49":{"start":{"line":89,"column":2},"end":{"line":91,"column":3}},"50":{"start":{"line":90,"column":4},"end":{"line":90,"column":94}},"51":{"start":{"line":92,"column":2},"end":{"line":92,"column":58}},"52":{"start":{"line":95,"column":39},"end":{"line":95,"column":52}},"53":{"start":{"line":96,"column":2},"end":{"line":98,"column":3}},"54":{"start":{"line":97,"column":4},"end":{"line":97,"column":67}},"55":{"start":{"line":99,"column":2},"end":{"line":101,"column":3}},"56":{"start":{"line":100,"column":4},"end":{"line":100,"column":53}},"57":{"start":{"line":102,"column":2},"end":{"line":102,"column":31}},"58":{"start":{"line":105,"column":14},"end":{"line":105,"column":66}},"59":{"start":{"line":106,"column":17},"end":{"line":106,"column":67}},"60":{"start":{"line":107,"column":26},"end":{"line":107,"column":69}},"61":{"start":{"line":108,"column":2},"end":{"line":112,"column":4}},"62":{"start":{"line":115,"column":22},"end":{"line":115,"column":66}},"63":{"start":{"line":116,"column":15},"end":{"line":116,"column":17}},"64":{"start":{"line":117,"column":2},"end":{"line":121,"column":3}},"65":{"start":{"line":118,"column":4},"end":{"line":118,"column":35}},"66":{"start":{"line":119,"column":4},"end":{"line":119,"column":66}},"67":{"start":{"line":120,"column":4},"end":{"line":120,"column":68}},"68":{"start":{"line":122,"column":25},"end":{"line":122,"column":47}},"69":{"start":{"line":123,"column":18},"end":{"line":123,"column":20}},"70":{"start":{"line":124,"column":16},"end":{"line":124,"column":18}},"71":{"start":{"line":125,"column":2},"end":{"line":134,"column":3}},"72":{"start":{"line":126,"column":4},"end":{"line":126,"column":55}},"73":{"start":{"line":127,"column":4},"end":{"line":129,"column":5}},"74":{"start":{"line":128,"column":6},"end":{"line":128,"column":63}},"75":{"start":{"line":130,"column":4},"end":{"line":130,"column":44}},"76":{"start":{"line":131,"column":4},"end":{"line":131,"column":54}},"77":{"start":{"line":133,"column":4},"end":{"line":133,"column":24}},"78":{"start":{"line":135,"column":2},"end":{"line":139,"column":4}},"79":{"start":{"line":142,"column":41},"end":{"line":142,"column":71}},"80":{"start":{"line":143,"column":21},"end":{"line":143,"column":41}},"81":{"start":{"line":144,"column":2},"end":{"line":162,"column":3}},"82":{"start":{"line":145,"column":17},"end":{"line":145,"column":47}},"83":{"start":{"line":146,"column":16},"end":{"line":146,"column":24}},"84":{"start":{"line":147,"column":19},"end":{"line":147,"column":30}},"85":{"start":{"line":148,"column":28},"end":{"line":148,"column":48}},"86":{"start":{"line":149,"column":18},"end":{"line":156,"column":5}},"87":{"start":{"line":157,"column":4},"end":{"line":161,"column":6}},"88":{"start":{"line":163,"column":25},"end":{"line":163,"column":57}},"89":{"start":{"line":164,"column":23},"end":{"line":164,"column":56}},"90":{"start":{"line":165,"column":20},"end":{"line":165,"column":57}},"91":{"start":{"line":166,"column":18},"end":{"line":166,"column":53}},"92":{"start":{"line":167,"column":19},"end":{"line":167,"column":76}},"93":{"start":{"line":168,"column":22},"end":{"line":168,"column":91}},"94":{"start":{"line":169,"column":17},"end":{"line":169,"column":74}},"95":{"start":{"line":170,"column":20},"end":{"line":170,"column":89}},"96":{"start":{"line":171,"column":18},"end":{"line":171,"column":35}},"97":{"start":{"line":172,"column":2},"end":{"line":176,"column":3}},"98":{"start":{"line":173,"column":4},"end":{"line":173,"column":34}},"99":{"start":{"line":174,"column":9},"end":{"line":176,"column":3}},"100":{"start":{"line":175,"column":4},"end":{"line":175,"column":31}},"101":{"start":{"line":177,"column":2},"end":{"line":189,"column":4}},"102":{"start":{"line":191,"column":30},"end":{"line":191,"column":39}},"103":{"start":{"line":193,"column":28},"end":{"line":193,"column":61}},"104":{"start":{"line":194,"column":2},"end":{"line":196,"column":3}},"105":{"start":{"line":195,"column":4},"end":{"line":195,"column":17}},"106":{"start":{"line":197,"column":2},"end":{"line":199,"column":3}},"107":{"start":{"line":198,"column":4},"end":{"line":198,"column":17}},"108":{"start":{"line":200,"column":20},"end":{"line":200,"column":64}},"109":{"start":{"line":201,"column":2},"end":{"line":203,"column":3}},"110":{"start":{"line":202,"column":4},"end":{"line":202,"column":17}},"111":{"start":{"line":204,"column":2},"end":{"line":204,"column":14}},"112":{"start":{"line":207,"column":21},"end":{"line":207,"column":23}},"113":{"start":{"line":208,"column":20},"end":{"line":208,"column":25}},"114":{"start":{"line":209,"column":2},"end":{"line":219,"column":3}},"115":{"start":{"line":209,"column":15},"end":{"line":209,"column":16}},"116":{"start":{"line":209,"column":24},"end":{"line":209,"column":36}},"117":{"start":{"line":210,"column":17},"end":{"line":210,"column":25}},"118":{"start":{"line":211,"column":4},"end":{"line":218,"column":5}},"119":{"start":{"line":212,"column":6},"end":{"line":212,"column":28}},"120":{"start":{"line":213,"column":11},"end":{"line":218,"column":5}},"121":{"start":{"line":214,"column":6},"end":{"line":214,"column":15}},"122":{"start":{"line":216,"column":6},"end":{"line":216,"column":28}},"123":{"start":{"line":217,"column":6},"end":{"line":217,"column":25}},"124":{"start":{"line":220,"column":2},"end":{"line":220,"column":29}},"125":{"start":{"line":223,"column":21},"end":{"line":223,"column":48}},"126":{"start":{"line":224,"column":2},"end":{"line":226,"column":3}},"127":{"start":{"line":225,"column":4},"end":{"line":225,"column":14}},"128":{"start":{"line":227,"column":17},"end":{"line":227,"column":46}},"129":{"start":{"line":228,"column":2},"end":{"line":230,"column":3}},"130":{"start":{"line":229,"column":4},"end":{"line":229,"column":14}},"131":{"start":{"line":231,"column":17},"end":{"line":239,"column":4}},"132":{"start":{"line":232,"column":22},"end":{"line":232,"column":52}},"133":{"start":{"line":233,"column":4},"end":{"line":238,"column":6}},"134":{"start":{"line":240,"column":2},"end":{"line":240,"column":16}},"135":{"start":{"line":243,"column":21},"end":{"line":243,"column":48}},"136":{"start":{"line":244,"column":2},"end":{"line":246,"column":5}},"137":{"start":{"line":245,"column":4},"end":{"line":245,"column":67}},"138":{"start":{"line":249,"column":2},"end":{"line":251,"column":3}},"139":{"start":{"line":250,"column":4},"end":{"line":250,"column":17}},"140":{"start":{"line":252,"column":2},"end":{"line":254,"column":3}},"141":{"start":{"line":253,"column":4},"end":{"line":253,"column":16}},"142":{"start":{"line":255,"column":2},"end":{"line":257,"column":3}},"143":{"start":{"line":256,"column":4},"end":{"line":256,"column":16}},"144":{"start":{"line":258,"column":2},"end":{"line":260,"column":3}},"145":{"start":{"line":259,"column":4},"end":{"line":259,"column":16}},"146":{"start":{"line":261,"column":2},"end":{"line":263,"column":3}},"147":{"start":{"line":262,"column":4},"end":{"line":262,"column":16}},"148":{"start":{"line":264,"column":2},"end":{"line":264,"column":15}},"149":{"start":{"line":267,"column":2},"end":{"line":267,"column":65}},"150":{"start":{"line":270,"column":2},"end":{"line":270,"column":34}},"151":{"start":{"line":273,"column":2},"end":{"line":273,"column":34}},"152":{"start":{"line":276,"column":16},"end":{"line":276,"column":45}},"153":{"start":{"line":277,"column":2},"end":{"line":277,"column":64}},"154":{"start":{"line":280,"column":2},"end":{"line":280,"column":77}},"155":{"start":{"line":283,"column":2},"end":{"line":283,"column":63}}},"fnMap":{"0":{"name":"getAbsoluteRefTypeWithSingleString","decl":{"start":{"line":7,"column":16},"end":{"line":7,"column":50}},"loc":{"start":{"line":7,"column":68},"end":{"line":25,"column":1}},"line":7},"1":{"name":"getAbsoluteRefTypeWitString","decl":{"start":{"line":26,"column":16},"end":{"line":26,"column":43}},"loc":{"start":{"line":26,"column":55},"end":{"line":39,"column":1}},"line":26},"2":{"name":"_getAbsoluteToken","decl":{"start":{"line":40,"column":9},"end":{"line":40,"column":26}},"loc":{"start":{"line":40,"column":67},"end":{"line":55,"column":1}},"line":40},"3":{"name":"serializeRange","decl":{"start":{"line":56,"column":16},"end":{"line":56,"column":30}},"loc":{"start":{"line":56,"column":38},"end":{"line":84,"column":1}},"line":56},"4":{"name":"serializeRangeWithSheet","decl":{"start":{"line":85,"column":16},"end":{"line":85,"column":39}},"loc":{"start":{"line":85,"column":58},"end":{"line":87,"column":1}},"line":85},"5":{"name":"serializeRangeWithSpreadsheet","decl":{"start":{"line":88,"column":16},"end":{"line":88,"column":45}},"loc":{"start":{"line":88,"column":70},"end":{"line":93,"column":1}},"line":88},"6":{"name":"serializeRangeToRefString","decl":{"start":{"line":94,"column":16},"end":{"line":94,"column":41}},"loc":{"start":{"line":94,"column":57},"end":{"line":103,"column":1}},"line":94},"7":{"name":"singleReferenceToGrid","decl":{"start":{"line":104,"column":16},"end":{"line":104,"column":37}},"loc":{"start":{"line":104,"column":47},"end":{"line":113,"column":1}},"line":104},"8":{"name":"handleRefStringInfo","decl":{"start":{"line":114,"column":16},"end":{"line":114,"column":35}},"loc":{"start":{"line":114,"column":47},"end":{"line":140,"column":1}},"line":114},"9":{"name":"deserializeRangeWithSheet","decl":{"start":{"line":141,"column":16},"end":{"line":141,"column":41}},"loc":{"start":{"line":141,"column":53},"end":{"line":190,"column":1}},"line":141},"10":{"name":"isReferenceStringWithEffectiveColumn","decl":{"start":{"line":192,"column":16},"end":{"line":192,"column":52}},"loc":{"start":{"line":192,"column":64},"end":{"line":205,"column":1}},"line":192},"11":{"name":"replaceRefPrefixString","decl":{"start":{"line":206,"column":16},"end":{"line":206,"column":38}},"loc":{"start":{"line":206,"column":46},"end":{"line":221,"column":1}},"line":206},"12":{"name":"getRangeWithRefsString","decl":{"start":{"line":222,"column":16},"end":{"line":222,"column":38}},"loc":{"start":{"line":222,"column":68},"end":{"line":241,"column":1}},"line":222},"13":{"name":"(anonymous_13)","decl":{"start":{"line":231,"column":32},"end":{"line":231,"column":33}},"loc":{"start":{"line":231,"column":41},"end":{"line":239,"column":3}},"line":231},"14":{"name":"isReferenceStrings","decl":{"start":{"line":242,"column":16},"end":{"line":242,"column":34}},"loc":{"start":{"line":242,"column":46},"end":{"line":247,"column":1}},"line":242},"15":{"name":"(anonymous_15)","decl":{"start":{"line":244,"column":26},"end":{"line":244,"column":27}},"loc":{"start":{"line":244,"column":42},"end":{"line":246,"column":3}},"line":244},"16":{"name":"needsQuoting","decl":{"start":{"line":248,"column":16},"end":{"line":248,"column":28}},"loc":{"start":{"line":248,"column":35},"end":{"line":265,"column":1}},"line":248},"17":{"name":"addQuotesBothSides","decl":{"start":{"line":266,"column":16},"end":{"line":266,"column":34}},"loc":{"start":{"line":266,"column":41},"end":{"line":268,"column":1}},"line":266},"18":{"name":"quoteSheetName","decl":{"start":{"line":269,"column":9},"end":{"line":269,"column":23}},"loc":{"start":{"line":269,"column":30},"end":{"line":271,"column":1}},"line":269},"19":{"name":"unquoteSheetName","decl":{"start":{"line":272,"column":9},"end":{"line":272,"column":25}},"loc":{"start":{"line":272,"column":32},"end":{"line":274,"column":1}},"line":272},"20":{"name":"isA1Notation","decl":{"start":{"line":275,"column":9},"end":{"line":275,"column":21}},"loc":{"start":{"line":275,"column":28},"end":{"line":278,"column":1}},"line":275},"21":{"name":"isR1C1Notation","decl":{"start":{"line":279,"column":9},"end":{"line":279,"column":23}},"loc":{"start":{"line":279,"column":30},"end":{"line":281,"column":1}},"line":279},"22":{"name":"startsWithNonAlphabetic","decl":{"start":{"line":282,"column":9},"end":{"line":282,"column":32}},"loc":{"start":{"line":282,"column":39},"end":{"line":284,"column":1}},"line":282}},"branchMap":{"0":{"loc":{"start":{"line":11,"column":2},"end":{"line":14,"column":3}},"type":"if","locations":[{"start":{"line":11,"column":2},"end":{"line":14,"column":3}},{"start":{},"end":{}}],"line":11},"1":{"loc":{"start":{"line":11,"column":6},"end":{"line":11,"column":76}},"type":"binary-expr","locations":[{"start":{"line":11,"column":6},"end":{"line":11,"column":38}},{"start":{"line":11,"column":42},"end":{"line":11,"column":58}},{"start":{"line":11,"column":62},"end":{"line":11,"column":76}}],"line":11},"2":{"loc":{"start":{"line":15,"column":2},"end":{"line":17,"column":3}},"type":"if","locations":[{"start":{"line":15,"column":2},"end":{"line":17,"column":3}},{"start":{},"end":{}}],"line":15},"3":{"loc":{"start":{"line":15,"column":6},"end":{"line":15,"column":39}},"type":"binary-expr","locations":[{"start":{"line":15,"column":6},"end":{"line":15,"column":22}},{"start":{"line":15,"column":26},"end":{"line":15,"column":39}}],"line":15},"4":{"loc":{"start":{"line":18,"column":2},"end":{"line":20,"column":3}},"type":"if","locations":[{"start":{"line":18,"column":2},"end":{"line":20,"column":3}},{"start":{},"end":{}}],"line":18},"5":{"loc":{"start":{"line":21,"column":2},"end":{"line":23,"column":3}},"type":"if","locations":[{"start":{"line":21,"column":2},"end":{"line":23,"column":3}},{"start":{},"end":{}}],"line":21},"6":{"loc":{"start":{"line":28,"column":2},"end":{"line":30,"column":3}},"type":"if","locations":[{"start":{"line":28,"column":2},"end":{"line":30,"column":3}},{"start":{},"end":{}}],"line":28},"7":{"loc":{"start":{"line":32,"column":2},"end":{"line":37,"column":3}},"type":"if","locations":[{"start":{"line":32,"column":2},"end":{"line":37,"column":3}},{"start":{},"end":{}}],"line":32},"8":{"loc":{"start":{"line":40,"column":27},"end":{"line":40,"column":65}},"type":"default-arg","locations":[{"start":{"line":40,"column":45},"end":{"line":40,"column":65}}],"line":40},"9":{"loc":{"start":{"line":43,"column":2},"end":{"line":50,"column":3}},"type":"if","locations":[{"start":{"line":43,"column":2},"end":{"line":50,"column":3}},{"start":{"line":45,"column":9},"end":{"line":50,"column":3}}],"line":43},"10":{"loc":{"start":{"line":45,"column":9},"end":{"line":50,"column":3}},"type":"if","locations":[{"start":{"line":45,"column":9},"end":{"line":50,"column":3}},{"start":{"line":47,"column":9},"end":{"line":50,"column":3}}],"line":45},"11":{"loc":{"start":{"line":47,"column":9},"end":{"line":50,"column":3}},"type":"if","locations":[{"start":{"line":47,"column":9},"end":{"line":50,"column":3}},{"start":{},"end":{}}],"line":47},"12":{"loc":{"start":{"line":64,"column":4},"end":{"line":64,"column":33}},"type":"default-arg","locations":[{"start":{"line":64,"column":16},"end":{"line":64,"column":33}}],"line":64},"13":{"loc":{"start":{"line":68,"column":2},"end":{"line":72,"column":3}},"type":"if","locations":[{"start":{"line":68,"column":2},"end":{"line":72,"column":3}},{"start":{},"end":{}}],"line":68},"14":{"loc":{"start":{"line":68,"column":6},"end":{"line":68,"column":66}},"type":"binary-expr","locations":[{"start":{"line":68,"column":6},"end":{"line":68,"column":34}},{"start":{"line":68,"column":38},"end":{"line":68,"column":66}}],"line":68},"15":{"loc":{"start":{"line":73,"column":2},"end":{"line":77,"column":3}},"type":"if","locations":[{"start":{"line":73,"column":2},"end":{"line":77,"column":3}},{"start":{},"end":{}}],"line":73},"16":{"loc":{"start":{"line":80,"column":2},"end":{"line":82,"column":3}},"type":"if","locations":[{"start":{"line":80,"column":2},"end":{"line":82,"column":3}},{"start":{},"end":{}}],"line":80},"17":{"loc":{"start":{"line":89,"column":2},"end":{"line":91,"column":3}},"type":"if","locations":[{"start":{"line":89,"column":2},"end":{"line":91,"column":3}},{"start":{},"end":{}}],"line":89},"18":{"loc":{"start":{"line":89,"column":6},"end":{"line":89,"column":51}},"type":"binary-expr","locations":[{"start":{"line":89,"column":6},"end":{"line":89,"column":24}},{"start":{"line":89,"column":28},"end":{"line":89,"column":51}}],"line":89},"19":{"loc":{"start":{"line":96,"column":2},"end":{"line":98,"column":3}},"type":"if","locations":[{"start":{"line":96,"column":2},"end":{"line":98,"column":3}},{"start":{},"end":{}}],"line":96},"20":{"loc":{"start":{"line":96,"column":6},"end":{"line":96,"column":86}},"type":"binary-expr","locations":[{"start":{"line":96,"column":6},"end":{"line":96,"column":20}},{"start":{"line":96,"column":24},"end":{"line":96,"column":41}},{"start":{"line":96,"column":45},"end":{"line":96,"column":62}},{"start":{"line":96,"column":66},"end":{"line":96,"column":86}}],"line":96},"21":{"loc":{"start":{"line":99,"column":2},"end":{"line":101,"column":3}},"type":"if","locations":[{"start":{"line":99,"column":2},"end":{"line":101,"column":3}},{"start":{},"end":{}}],"line":99},"22":{"loc":{"start":{"line":99,"column":6},"end":{"line":99,"column":47}},"type":"binary-expr","locations":[{"start":{"line":99,"column":6},"end":{"line":99,"column":23}},{"start":{"line":99,"column":27},"end":{"line":99,"column":47}}],"line":99},"23":{"loc":{"start":{"line":117,"column":2},"end":{"line":121,"column":3}},"type":"if","locations":[{"start":{"line":117,"column":2},"end":{"line":121,"column":3}},{"start":{},"end":{}}],"line":117},"24":{"loc":{"start":{"line":125,"column":2},"end":{"line":134,"column":3}},"type":"if","locations":[{"start":{"line":125,"column":2},"end":{"line":134,"column":3}},{"start":{"line":132,"column":9},"end":{"line":134,"column":3}}],"line":125},"25":{"loc":{"start":{"line":127,"column":4},"end":{"line":129,"column":5}},"type":"if","locations":[{"start":{"line":127,"column":4},"end":{"line":129,"column":5}},{"start":{},"end":{}}],"line":127},"26":{"loc":{"start":{"line":127,"column":8},"end":{"line":127,"column":71}},"type":"binary-expr","locations":[{"start":{"line":127,"column":8},"end":{"line":127,"column":28}},{"start":{"line":127,"column":32},"end":{"line":127,"column":71}}],"line":127},"27":{"loc":{"start":{"line":144,"column":2},"end":{"line":162,"column":3}},"type":"if","locations":[{"start":{"line":144,"column":2},"end":{"line":162,"column":3}},{"start":{},"end":{}}],"line":144},"28":{"loc":{"start":{"line":167,"column":19},"end":{"line":167,"column":76}},"type":"cond-expr","locations":[{"start":{"line":167,"column":49},"end":{"line":167,"column":60}},{"start":{"line":167,"column":63},"end":{"line":167,"column":76}}],"line":167},"29":{"loc":{"start":{"line":168,"column":22},"end":{"line":168,"column":91}},"type":"cond-expr","locations":[{"start":{"line":168,"column":58},"end":{"line":168,"column":72}},{"start":{"line":168,"column":75},"end":{"line":168,"column":91}}],"line":168},"30":{"loc":{"start":{"line":169,"column":17},"end":{"line":169,"column":74}},"type":"cond-expr","locations":[{"start":{"line":169,"column":47},"end":{"line":169,"column":60}},{"start":{"line":169,"column":63},"end":{"line":169,"column":74}}],"line":169},"31":{"loc":{"start":{"line":170,"column":20},"end":{"line":170,"column":89}},"type":"cond-expr","locations":[{"start":{"line":170,"column":56},"end":{"line":170,"column":72}},{"start":{"line":170,"column":75},"end":{"line":170,"column":89}}],"line":170},"32":{"loc":{"start":{"line":172,"column":2},"end":{"line":176,"column":3}},"type":"if","locations":[{"start":{"line":172,"column":2},"end":{"line":176,"column":3}},{"start":{"line":174,"column":9},"end":{"line":176,"column":3}}],"line":172},"33":{"loc":{"start":{"line":172,"column":6},"end":{"line":172,"column":52}},"type":"binary-expr","locations":[{"start":{"line":172,"column":6},"end":{"line":172,"column":28}},{"start":{"line":172,"column":32},"end":{"line":172,"column":52}}],"line":172},"34":{"loc":{"start":{"line":174,"column":9},"end":{"line":176,"column":3}},"type":"if","locations":[{"start":{"line":174,"column":9},"end":{"line":176,"column":3}},{"start":{},"end":{}}],"line":174},"35":{"loc":{"start":{"line":174,"column":13},"end":{"line":174,"column":65}},"type":"binary-expr","locations":[{"start":{"line":174,"column":13},"end":{"line":174,"column":38}},{"start":{"line":174,"column":42},"end":{"line":174,"column":65}}],"line":174},"36":{"loc":{"start":{"line":194,"column":2},"end":{"line":196,"column":3}},"type":"if","locations":[{"start":{"line":194,"column":2},"end":{"line":196,"column":3}},{"start":{},"end":{}}],"line":194},"37":{"loc":{"start":{"line":197,"column":2},"end":{"line":199,"column":3}},"type":"if","locations":[{"start":{"line":197,"column":2},"end":{"line":199,"column":3}},{"start":{},"end":{}}],"line":197},"38":{"loc":{"start":{"line":201,"column":2},"end":{"line":203,"column":3}},"type":"if","locations":[{"start":{"line":201,"column":2},"end":{"line":203,"column":3}},{"start":{},"end":{}}],"line":201},"39":{"loc":{"start":{"line":211,"column":4},"end":{"line":218,"column":5}},"type":"if","locations":[{"start":{"line":211,"column":4},"end":{"line":218,"column":5}},{"start":{"line":213,"column":11},"end":{"line":218,"column":5}}],"line":211},"40":{"loc":{"start":{"line":211,"column":8},"end":{"line":211,"column":44}},"type":"binary-expr","locations":[{"start":{"line":211,"column":8},"end":{"line":211,"column":28}},{"start":{"line":211,"column":32},"end":{"line":211,"column":44}}],"line":211},"41":{"loc":{"start":{"line":213,"column":11},"end":{"line":218,"column":5}},"type":"if","locations":[{"start":{"line":213,"column":11},"end":{"line":218,"column":5}},{"start":{"line":215,"column":11},"end":{"line":218,"column":5}}],"line":213},"42":{"loc":{"start":{"line":213,"column":15},"end":{"line":213,"column":115}},"type":"binary-expr","locations":[{"start":{"line":213,"column":15},"end":{"line":213,"column":27}},{"start":{"line":213,"column":32},"end":{"line":213,"column":55}},{"start":{"line":213,"column":59},"end":{"line":213,"column":85}},{"start":{"line":213,"column":89},"end":{"line":213,"column":114}}],"line":213},"43":{"loc":{"start":{"line":223,"column":21},"end":{"line":223,"column":48}},"type":"binary-expr","locations":[{"start":{"line":223,"column":21},"end":{"line":223,"column":42}},{"start":{"line":223,"column":46},"end":{"line":223,"column":48}}],"line":223},"44":{"loc":{"start":{"line":224,"column":2},"end":{"line":226,"column":3}},"type":"if","locations":[{"start":{"line":224,"column":2},"end":{"line":226,"column":3}},{"start":{},"end":{}}],"line":224},"45":{"loc":{"start":{"line":224,"column":6},"end":{"line":224,"column":49}},"type":"binary-expr","locations":[{"start":{"line":224,"column":6},"end":{"line":224,"column":22}},{"start":{"line":224,"column":26},"end":{"line":224,"column":49}}],"line":224},"46":{"loc":{"start":{"line":228,"column":2},"end":{"line":230,"column":3}},"type":"if","locations":[{"start":{"line":228,"column":2},"end":{"line":230,"column":3}},{"start":{},"end":{}}],"line":228},"47":{"loc":{"start":{"line":243,"column":21},"end":{"line":243,"column":48}},"type":"binary-expr","locations":[{"start":{"line":243,"column":21},"end":{"line":243,"column":42}},{"start":{"line":243,"column":46},"end":{"line":243,"column":48}}],"line":243},"48":{"loc":{"start":{"line":249,"column":2},"end":{"line":251,"column":3}},"type":"if","locations":[{"start":{"line":249,"column":2},"end":{"line":251,"column":3}},{"start":{},"end":{}}],"line":249},"49":{"loc":{"start":{"line":252,"column":2},"end":{"line":254,"column":3}},"type":"if","locations":[{"start":{"line":252,"column":2},"end":{"line":254,"column":3}},{"start":{},"end":{}}],"line":252},"50":{"loc":{"start":{"line":255,"column":2},"end":{"line":257,"column":3}},"type":"if","locations":[{"start":{"line":255,"column":2},"end":{"line":257,"column":3}},{"start":{},"end":{}}],"line":255},"51":{"loc":{"start":{"line":255,"column":6},"end":{"line":255,"column":48}},"type":"binary-expr","locations":[{"start":{"line":255,"column":6},"end":{"line":255,"column":24}},{"start":{"line":255,"column":28},"end":{"line":255,"column":48}}],"line":255},"52":{"loc":{"start":{"line":258,"column":2},"end":{"line":260,"column":3}},"type":"if","locations":[{"start":{"line":258,"column":2},"end":{"line":260,"column":3}},{"start":{},"end":{}}],"line":258},"53":{"loc":{"start":{"line":261,"column":2},"end":{"line":263,"column":3}},"type":"if","locations":[{"start":{"line":261,"column":2},"end":{"line":263,"column":3}},{"start":{},"end":{}}],"line":261},"54":{"loc":{"start":{"line":267,"column":9},"end":{"line":267,"column":64}},"type":"cond-expr","locations":[{"start":{"line":267,"column":30},"end":{"line":267,"column":57}},{"start":{"line":267,"column":60},"end":{"line":267,"column":64}}],"line":267},"55":{"loc":{"start":{"line":277,"column":9},"end":{"line":277,"column":63}},"type":"binary-expr","locations":[{"start":{"line":277,"column":9},"end":{"line":277,"column":45}},{"start":{"line":277,"column":49},"end":{"line":277,"column":63}}],"line":277}},"s":{"0":1,"1":1,"2":65,"3":65,"4":65,"5":65,"6":0,"7":0,"8":65,"9":5,"10":60,"11":1,"12":59,"13":3,"14":56,"15":4,"16":4,"17":0,"18":4,"19":4,"20":3,"21":1,"22":22,"23":22,"24":22,"25":0,"26":22,"27":0,"28":22,"29":0,"30":0,"31":22,"32":11,"33":11,"34":11,"35":11,"36":7,"37":7,"38":7,"39":4,"40":3,"41":3,"42":3,"43":1,"44":1,"45":1,"46":0,"47":1,"48":2,"49":4,"50":3,"51":1,"52":7,"53":7,"54":4,"55":3,"56":2,"57":1,"58":54,"59":54,"60":54,"61":54,"62":46,"63":46,"64":46,"65":12,"66":12,"67":12,"68":46,"69":46,"70":46,"71":46,"72":24,"73":24,"74":9,"75":24,"76":24,"77":22,"78":46,"79":35,"80":35,"81":35,"82":16,"83":16,"84":16,"85":16,"86":16,"87":16,"88":19,"89":19,"90":19,"91":19,"92":19,"93":19,"94":19,"95":19,"96":19,"97":19,"98":1,"99":18,"100":3,"101":19,"102":1,"103":29,"104":29,"105":1,"106":28,"107":0,"108":28,"109":28,"110":5,"111":23,"112":29,"113":29,"114":29,"115":29,"116":29,"117":209,"118":209,"119":0,"120":209,"121":0,"122":209,"123":209,"124":29,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":9,"136":9,"137":24,"138":30,"139":0,"140":30,"141":10,"142":20,"143":6,"144":14,"145":7,"146":7,"147":2,"148":5,"149":2,"150":8,"151":36,"152":20,"153":20,"154":18,"155":14},"f":{"0":65,"1":4,"2":22,"3":11,"4":2,"5":4,"6":7,"7":54,"8":46,"9":35,"10":29,"11":29,"12":0,"13":0,"14":9,"15":24,"16":30,"17":2,"18":8,"19":36,"20":20,"21":18,"22":14},"b":{"0":[0,65],"1":[65,46,0],"2":[5,60],"3":[65,6],"4":[1,59],"5":[3,56],"6":[0,4],"7":[3,1],"8":[22],"9":[0,22],"10":[0,22],"11":[0,22],"12":[1],"13":[7,4],"14":[11,5],"15":[3,1],"16":[0,1],"17":[3,1],"18":[4,2],"19":[4,3],"20":[7,7,4,4],"21":[2,1],"22":[3,3],"23":[12,34],"24":[24,22],"25":[9,15],"26":[24,9],"27":[16,19],"28":[2,17],"29":[0,19],"30":[2,17],"31":[0,19],"32":[1,18],"33":[19,1],"34":[3,15],"35":[18,3],"36":[1,28],"37":[0,28],"38":[5,23],"39":[0,209],"40":[209,0],"41":[0,209],"42":[209,28,28,28],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[9,0],"48":[0,30],"49":[10,20],"50":[6,14],"51":[20,18],"52":[7,7],"53":[2,5],"54":[2,0],"55":[20,2]},"inputSourceMap":{"version":3,"sources":["/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/engine/utils/reference.ts"],"sourcesContent":["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IRange, IUnitRangeName, IUnitRangeWithName } from '@univerjs/core';\nimport { AbsoluteRefType, RANGE_TYPE, Tools } from '@univerjs/core';\n\nimport { includeFormulaLexerToken } from '../../basics/match-token';\nimport { isReferenceString, UNIT_NAME_REGEX_PRECOMPILING } from '../../basics/regex';\nimport { prefixToken, SPACE_TOKEN } from '../../basics/token';\n\nconst $ROW_REGEX = /[^0-9]/g;\nconst $COLUMN_REGEX = /[^A-Za-z]/g;\n\nexport interface IAbsoluteRefTypeForRange {\n    startAbsoluteRefType: AbsoluteRefType;\n    endAbsoluteRefType?: AbsoluteRefType;\n}\n\n/**\n *\n * @param singleRefString for example A1 or B10,  not A1:B10\n */\nexport function getAbsoluteRefTypeWithSingleString(singleRefString: string) {\n    let isColumnAbsolute = singleRefString[0] === '$';\n    const remainChar = singleRefString.substring(1);\n\n    let isRowAbsolute = remainChar.indexOf('$') > -1;\n\n    if (Tools.isStringNumber(remainChar) && isColumnAbsolute && !isRowAbsolute) {\n        isColumnAbsolute = false;\n        isRowAbsolute = true;\n    }\n\n    if (isColumnAbsolute && isRowAbsolute) {\n        return AbsoluteRefType.ALL;\n    }\n    if (isColumnAbsolute) {\n        return AbsoluteRefType.COLUMN;\n    }\n    if (isRowAbsolute) {\n        return AbsoluteRefType.ROW;\n    }\n\n    return AbsoluteRefType.NONE;\n}\n\n/**\n *\n * @param refString for example A1:B10\n */\nexport function getAbsoluteRefTypeWitString(refString: string): IAbsoluteRefTypeForRange {\n    const sheetArray = refString.split('!');\n\n    if (sheetArray.length > 1) {\n        refString = sheetArray[sheetArray.length - 1];\n    }\n\n    const refArray = refString.split(':');\n\n    if (refArray.length > 1) {\n        return {\n            startAbsoluteRefType: getAbsoluteRefTypeWithSingleString(refArray[0]),\n            endAbsoluteRefType: getAbsoluteRefTypeWithSingleString(refArray[1]),\n        };\n    }\n\n    return { startAbsoluteRefType: getAbsoluteRefTypeWithSingleString(refArray[0]) };\n}\n\nfunction _getAbsoluteToken(absoluteRefType = AbsoluteRefType.NONE) {\n    let rowAbsoluteString = '';\n\n    let columnAbsoluteString = '';\n\n    if (absoluteRefType === AbsoluteRefType.ROW) {\n        rowAbsoluteString = '$';\n    } else if (absoluteRefType === AbsoluteRefType.COLUMN) {\n        columnAbsoluteString = '$';\n    } else if (absoluteRefType === AbsoluteRefType.ALL) {\n        rowAbsoluteString = '$';\n        columnAbsoluteString = '$';\n    }\n\n    return {\n        rowAbsoluteString,\n        columnAbsoluteString,\n    };\n}\n\n/**\n * Serialize an `IRange` into a string.\n * @param range The `IRange` to be serialized\n */\nexport function serializeRange(range: IRange): string {\n    const {\n        startColumn,\n        startRow,\n        endColumn,\n        endRow,\n        startAbsoluteRefType,\n        endAbsoluteRefType,\n        rangeType = RANGE_TYPE.NORMAL,\n    } = range;\n\n    const start = _getAbsoluteToken(startAbsoluteRefType);\n\n    const end = _getAbsoluteToken(endAbsoluteRefType);\n\n    if (rangeType === RANGE_TYPE.ROW || rangeType === RANGE_TYPE.ALL) {\n        const startStr = `${start.rowAbsoluteString}${startRow + 1}`;\n\n        const endStr = `${end.rowAbsoluteString}${endRow + 1}`;\n\n        return `${startStr}:${endStr}`;\n    }\n    if (rangeType === RANGE_TYPE.COLUMN) {\n        const startStr = `${start.columnAbsoluteString}${Tools.chatAtABC(startColumn)}`;\n\n        const endStr = `${end.columnAbsoluteString}${Tools.chatAtABC(endColumn)}`;\n\n        return `${startStr}:${endStr}`;\n    }\n\n    const startStr = `${start.columnAbsoluteString}${Tools.chatAtABC(startColumn)}${start.rowAbsoluteString}${\n        startRow + 1\n    }`;\n\n    const endStr = `${end.columnAbsoluteString}${Tools.chatAtABC(endColumn)}${end.rowAbsoluteString}${endRow + 1}`;\n\n    if (startStr === endStr) {\n        return startStr;\n    }\n\n    return `${startStr}:${endStr}`;\n}\n\n/**\n * Serialize an `IRange` and a sheetID into a string.\n * @param sheetName\n * @param range\n */\nexport function serializeRangeWithSheet(sheetName: string, range: IRange): string {\n    return `${addQuotesBothSides(sheetName)}!${serializeRange(range)}`;\n}\n\n/**\n * Serialize an `IRange` and a sheetID into a string.\n * @param unit unitId or unitName\n * @param sheetName\n * @param range\n */\nexport function serializeRangeWithSpreadsheet(unit: string, sheetName: string, range: IRange): string {\n    if (needsQuoting(unit) || needsQuoting(sheetName)) {\n        return `'[${quoteSheetName(unit)}]${quoteSheetName(sheetName)}'!${serializeRange(range)}`;\n    }\n\n    return `[${unit}]${sheetName}!${serializeRange(range)}`;\n}\n\nexport function serializeRangeToRefString(gridRangeName: IUnitRangeName) {\n    const { unitId, sheetName, range } = gridRangeName;\n\n    if (unitId != null && unitId.length > 0 && sheetName != null && sheetName.length > 0) {\n        return serializeRangeWithSpreadsheet(unitId, sheetName, range);\n    }\n\n    if (sheetName != null && sheetName.length > 0) {\n        return serializeRangeWithSheet(sheetName, range);\n    }\n\n    return serializeRange(range);\n}\n\nexport function singleReferenceToGrid(refBody: string) {\n    const row = Number.parseInt(refBody.replace($ROW_REGEX, '')) - 1;\n    const column = Tools.ABCatNum(refBody.replace($COLUMN_REGEX, ''));\n\n    const absoluteRefType = getAbsoluteRefTypeWithSingleString(refBody);\n\n    return {\n        row,\n        column,\n        absoluteRefType,\n    };\n}\n\nexport function handleRefStringInfo(refString: string) {\n    const unitIdMatch = UNIT_NAME_REGEX_PRECOMPILING.exec(refString);\n    let unitId = '';\n\n    if (unitIdMatch != null) {\n        unitId = unitIdMatch[0].trim();\n        unitId = unquoteSheetName(unitId.slice(1, unitId.length - 1));\n        refString = refString.replace(UNIT_NAME_REGEX_PRECOMPILING, '');\n    }\n\n    const sheetNameIndex = refString.indexOf('!');\n    let sheetName: string = '';\n    let refBody: string = '';\n    if (sheetNameIndex > -1) {\n        sheetName = refString.substring(0, sheetNameIndex);\n        if (sheetName[0] === \"'\" && sheetName[sheetName.length - 1] === \"'\") {\n            sheetName = sheetName.substring(1, sheetName.length - 1);\n        }\n\n        sheetName = unquoteSheetName(sheetName);\n        refBody = refString.substring(sheetNameIndex + 1);\n    } else {\n        refBody = refString;\n    }\n\n    return {\n        refBody,\n        sheetName,\n        unitId,\n    };\n}\n\nexport function deserializeRangeWithSheet(refString: string): IUnitRangeName {\n    const { refBody, sheetName, unitId } = handleRefStringInfo(refString);\n\n    const colonIndex = refBody.indexOf(':');\n\n    if (colonIndex === -1) {\n        const grid = singleReferenceToGrid(refBody);\n        const row = grid.row;\n        const column = grid.column;\n        const absoluteRefType = grid.absoluteRefType;\n        const range: IRange = {\n            startRow: row,\n            startColumn: column,\n            endRow: row,\n            endColumn: column,\n            startAbsoluteRefType: absoluteRefType,\n            endAbsoluteRefType: absoluteRefType,\n        };\n\n        return {\n            unitId,\n            sheetName,\n            range,\n        };\n    }\n\n    const refStartString = refBody.substring(0, colonIndex);\n    const refEndString = refBody.substring(colonIndex + 1);\n\n    const startGrid = singleReferenceToGrid(refStartString);\n\n    const endGrid = singleReferenceToGrid(refEndString);\n\n    // range A1:B10 === B10:A1\n    const startRow = startGrid.row > endGrid.row ? endGrid.row : startGrid.row;\n    const startColumn = startGrid.column > endGrid.column ? endGrid.column : startGrid.column;\n    const endRow = startGrid.row > endGrid.row ? startGrid.row : endGrid.row;\n    const endColumn = startGrid.column > endGrid.column ? startGrid.column : endGrid.column;\n\n    let rangeType = RANGE_TYPE.NORMAL;\n    if (Number.isNaN(startRow) && Number.isNaN(endRow)) {\n        rangeType = RANGE_TYPE.COLUMN;\n    } else if (Number.isNaN(startColumn) && Number.isNaN(endColumn)) {\n        rangeType = RANGE_TYPE.ROW;\n    }\n\n    return {\n        unitId,\n        sheetName,\n        range: {\n            startRow,\n            startColumn,\n            endRow,\n            endColumn,\n\n            startAbsoluteRefType: startGrid.absoluteRefType,\n\n            endAbsoluteRefType: endGrid.absoluteRefType,\n\n            rangeType,\n        },\n    };\n}\n\n/**\n * LOG10 is a formula, google sheet support it on Log10:L\n * EXCEL support it on Log10:Log10\n */\nconst EXCEPTION_REF_STRINGS = ['LOG10'];\n\nexport function isReferenceStringWithEffectiveColumn(refString: string) {\n    const noPrefixRefString = replaceRefPrefixString(refString);\n\n    if (!isReferenceString(noPrefixRefString)) {\n        return false;\n    }\n\n    if (EXCEPTION_REF_STRINGS.includes(noPrefixRefString.toUpperCase().trim())) {\n        return false;\n    }\n\n    const { range } = deserializeRangeWithSheet(noPrefixRefString);\n\n    /**\n     * As of the latest information I have, which is up to the end of 2023,\n     * the maximum limit for columns in Excel is 16,384.\n     * This standard applies to Excel 2007 and later versions,\n     * where each worksheet can support columns ranging from A to XFD.\n     * Therefore, the symbol for the maximum column is XFD.\n     */\n    if (range.endColumn >= 16384) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function replaceRefPrefixString(token: string) {\n    const tokenArray = [];\n    let isNotPreFix = false;\n    for (let i = 0, len = token.length; i < len; i++) {\n        const char = token[i];\n        if (char === SPACE_TOKEN && !isNotPreFix) {\n            tokenArray.push(char);\n        } else if (!isNotPreFix && (char === prefixToken.AT || char === prefixToken.MINUS || char === prefixToken.PLUS)) {\n            continue;\n        } else {\n            tokenArray.push(char);\n            isNotPreFix = true;\n        }\n    }\n    return tokenArray.join('');\n}\n\n/**\n * implement getSheetIdByName\n * function getSheetIdByName(name: string) {\n        return univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET)?.getSheetBySheetName(name)?.getSheetId() || '';\n    }\n */\nexport function getRangeWithRefsString(refString: string, getSheetIdByName: (name: string) => string): IUnitRangeWithName[] {\n    const valueArray = refString?.split(',') || [];\n\n    if (refString === '' || valueArray.length === 0) {\n        return [];\n    }\n\n    const result = isReferenceStrings(refString);\n\n    if (!result) {\n        return [];\n    }\n\n    const ranges = valueArray.map((ref) => {\n        const unitRange = deserializeRangeWithSheet(ref);\n        return {\n            unitId: unitRange.unitId,\n            sheetId: getSheetIdByName(unitRange.sheetName),\n            range: unitRange.range,\n            sheetName: unitRange.sheetName,\n        };\n    });\n\n    return ranges;\n}\n\nexport function isReferenceStrings(refString: string) {\n    const valueArray = refString?.split(',') || [];\n    return valueArray.every((refString) => {\n        return isReferenceStringWithEffectiveColumn(refString.trim());\n    });\n}\n\n/**\n * Determine whether the sheet name needs to be wrapped in quotes\n * Excel will quote the worksheet name if any of the following is true:\n *  - It contains any space or punctuation characters, such as  ()$,;-{}\"'（）【】“”‘’%… and many more\n *  - It is a valid cell reference in A1 notation, e.g. B1048576 is quoted\n *  - It is a valid cell reference in R1C1 notation, e.g. RC, RC2, R5C, R-4C, RC-8, R, C\n *  - It starts with a non-letter, e.g. 99, 1.5, 12a, 💩a\n *  - Excel will not quote worksheet names if they only contain non-punctuation, non-letter characters in non-initial positions. For example, a💩 remains unquoted.*\n *  In addition, if a worksheet name contains single quotes, these will be doubled up within the name itself. For example, the sheet name a'b'c becomes 'a''b''c'.\n *\n *  reference https://stackoverflow.com/questions/41677779/when-does-excel-surround-sheet-names-with-single-quotes-in-workbook-xml-or-othe\n *\n * @param name Sheet name\n * @returns Result\n */\nexport function needsQuoting(name: string) {\n    if (name.length === 0) {\n        return false;\n    }\n\n    if (includeFormulaLexerToken(name)) {\n        return true;\n    }\n\n    // Check if the name is a valid cell reference in A1 or R1C1 notation\n    if (isA1Notation(name) || isR1C1Notation(name)) {\n        return true;\n    }\n\n    // Check if the name starts with a non-letter\n    if (startsWithNonAlphabetic(name)) {\n        return true;\n    }\n\n    // Check for spaces, punctuation and special characters\n\n    if (/[\\s!$%^&*()+\\-=\\[\\]{};':\"\\\\|,.<>\\/?（）]/.test(name)) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Add quotes to the sheet name\n */\nexport function addQuotesBothSides(name: string) {\n    return needsQuoting(name) ? `'${quoteSheetName(name)}'` : name;\n}\n\n/**\n * Add a single quote before the single quote\n * @param name\n * @returns Quoted name\n */\nfunction quoteSheetName(name: string) {\n    return name.replace(/'/g, \"''\");\n}\n\n/**\n * Replace double single quotes with single quotes\n * @param name\n * @returns Unquoted name\n */\nfunction unquoteSheetName(name: string) {\n    return name.replace(/''/g, \"'\");\n}\n\nfunction isA1Notation(name: string) {\n    const match = name.match(/[1-9][0-9]{0,6}/);\n    // Excel has a limit on the number of rows and columns: targetRow > 1048576 || targetColumn > 16384, Univer has no limit\n    return /^[A-Z]+[1-9][0-9]{0,6}$/.test(name) && match !== null;\n}\n\nfunction isR1C1Notation(name: string) {\n    return /^(R(-?[0-9]+)?C(-?[0-9]+)?|C(-?[0-9]+)?|R(-?[0-9]+)?)$/.test(name);\n}\n\nfunction startsWithNonAlphabetic(name: string) {\n    // Check if the first character is not a letter (including non-English characters)\n    return !/^\\p{Letter}/u.test(name.charAt(0));\n}\n"],"mappings":"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","names":["startStr","endStr","refString"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2530ac062811e9380eb31e8fe41302ea8e2bc104"}}