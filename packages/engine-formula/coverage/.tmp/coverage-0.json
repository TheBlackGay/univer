{"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/error-type.ts":{"path":"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/error-type.ts","statementMap":{"0":{"start":{"line":1,"column":39},"end":{"line":15,"column":19}},"1":{"start":{"line":2,"column":2},"end":{"line":2,"column":40}},"2":{"start":{"line":3,"column":2},"end":{"line":3,"column":32}},"3":{"start":{"line":4,"column":2},"end":{"line":4,"column":34}},"4":{"start":{"line":5,"column":2},"end":{"line":5,"column":30}},"5":{"start":{"line":6,"column":2},"end":{"line":6,"column":28}},"6":{"start":{"line":7,"column":2},"end":{"line":7,"column":34}},"7":{"start":{"line":8,"column":2},"end":{"line":8,"column":30}},"8":{"start":{"line":9,"column":2},"end":{"line":9,"column":34}},"9":{"start":{"line":10,"column":2},"end":{"line":10,"column":32}},"10":{"start":{"line":11,"column":2},"end":{"line":11,"column":34}},"11":{"start":{"line":12,"column":2},"end":{"line":12,"column":42}},"12":{"start":{"line":13,"column":2},"end":{"line":13,"column":32}},"13":{"start":{"line":14,"column":2},"end":{"line":14,"column":20}},"14":{"start":{"line":16,"column":30},"end":{"line":16,"column":63}},"15":{"start":{"line":17,"column":38},"end":{"line":17,"column":105}},"16":{"start":{"line":17,"column":90},"end":{"line":17,"column":102}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":1,"column":40},"end":{"line":1,"column":41}},"loc":{"start":{"line":1,"column":56},"end":{"line":15,"column":1}},"line":1},"1":{"name":"(anonymous_1)","decl":{"start":{"line":17,"column":79},"end":{"line":17,"column":80}},"loc":{"start":{"line":17,"column":90},"end":{"line":17,"column":102}},"line":17}},"branchMap":{"0":{"loc":{"start":{"line":15,"column":3},"end":{"line":15,"column":18}},"type":"binary-expr","locations":[{"start":{"line":15,"column":3},"end":{"line":15,"column":12}},{"start":{"line":15,"column":16},"end":{"line":15,"column":18}}],"line":15}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":12},"f":{"0":1,"1":12},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"sources":["/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/error-type.ts"],"sourcesContent":["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum ErrorType {\n    /** Division by zero. */\n    DIV_BY_ZERO = '#DIV/0!',\n\n    /** Function error. */\n    NAME = '#NAME?',\n    VALUE = '#VALUE!',\n    NUM = '#NUM!',\n    NA = '#N/A',\n\n    /** Cyclic dependency. */\n    CYCLE = '#CYCLE!',\n\n    /** Wrong reference. */\n    REF = '#REF!',\n\n    /** Array spill error. */\n    SPILL = '#SPILL!',\n\n    /** Calculation error. */\n    CALC = '#CALC!',\n\n    /** Generic error */\n    ERROR = '#ERROR!',\n\n    /** connected to remote */\n    CONNECT = '#GETTING_DATA',\n\n    /** In the case of SUM(B1 C1), */\n    NULL = '#NULL!',\n}\n\nexport const ERROR_TYPE_SET = new Set(Object.values(ErrorType));\n\nexport const ERROR_TYPE_COUNT_ARRAY = [...new Set(Object.values(ErrorType).map((error) => error.length))];\n"],"mappings":"AAgBO,WAAK,YAAL,kBAAKA,eAAL;AAEH,EAAAA,WAAA,iBAAc;AAGd,EAAAA,WAAA,UAAO;AACP,EAAAA,WAAA,WAAQ;AACR,EAAAA,WAAA,SAAM;AACN,EAAAA,WAAA,QAAK;AAGL,EAAAA,WAAA,WAAQ;AAGR,EAAAA,WAAA,SAAM;AAGN,EAAAA,WAAA,WAAQ;AAGR,EAAAA,WAAA,UAAO;AAGP,EAAAA,WAAA,WAAQ;AAGR,EAAAA,WAAA,aAAU;AAGV,EAAAA,WAAA,UAAO;AA7BC,SAAAA;AAAA,GAAA;AAgCL,aAAM,iBAAiB,IAAI,IAAI,OAAO,OAAO,SAAS,CAAC;AAEvD,aAAM,yBAAyB,CAAC,GAAG,IAAI,IAAI,OAAO,OAAO,SAAS,EAAE,IAAI,CAAC,UAAU,MAAM,MAAM,CAAC,CAAC;","names":["ErrorType"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"5c11820eb7501eb34f92f0ecb1ee7104bee4fbd0"},"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/cache-lru.ts":{"path":"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/cache-lru.ts","statementMap":{"0":{"start":{"line":5,"column":4},"end":{"line":5,"column":41}},"1":{"start":{"line":8,"column":17},"end":{"line":8,"column":42}},"2":{"start":{"line":9,"column":4},"end":{"line":9,"column":32}},"3":{"start":{"line":12,"column":17},"end":{"line":12,"column":42}},"4":{"start":{"line":13,"column":4},"end":{"line":13,"column":33}},"5":{"start":{"line":16,"column":4},"end":{"line":16,"column":24}},"6":{"start":{"line":19,"column":4},"end":{"line":19,"column":50}},"7":{"start":{"line":22,"column":4},"end":{"line":22,"column":45}},"8":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"9":{"start":{"line":26,"column":6},"end":{"line":26,"column":27}},"10":{"start":{"line":28,"column":4},"end":{"line":28,"column":51}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":2},"end":{"line":4,"column":3}},"loc":{"start":{"line":4,"column":26},"end":{"line":6,"column":3}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":7,"column":2},"end":{"line":7,"column":3}},"loc":{"start":{"line":7,"column":27},"end":{"line":10,"column":3}},"line":7},"2":{"name":"(anonymous_2)","decl":{"start":{"line":11,"column":2},"end":{"line":11,"column":3}},"loc":{"start":{"line":11,"column":21},"end":{"line":14,"column":3}},"line":11},"3":{"name":"(anonymous_3)","decl":{"start":{"line":15,"column":2},"end":{"line":15,"column":3}},"loc":{"start":{"line":15,"column":10},"end":{"line":17,"column":3}},"line":15},"4":{"name":"(anonymous_4)","decl":{"start":{"line":18,"column":2},"end":{"line":18,"column":3}},"loc":{"start":{"line":18,"column":24},"end":{"line":20,"column":3}},"line":18},"5":{"name":"(anonymous_5)","decl":{"start":{"line":21,"column":2},"end":{"line":21,"column":3}},"loc":{"start":{"line":21,"column":31},"end":{"line":23,"column":3}},"line":21},"6":{"name":"(anonymous_6)","decl":{"start":{"line":24,"column":2},"end":{"line":24,"column":3}},"loc":{"start":{"line":24,"column":23},"end":{"line":29,"column":3}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},{"start":{},"end":{}}],"line":25}},"s":{"0":3,"1":80,"2":80,"3":127,"4":127,"5":0,"6":0,"7":0,"8":207,"9":199,"10":8},"f":{"0":3,"1":80,"2":127,"3":0,"4":0,"5":0,"6":207},"b":{"0":[199,8]},"inputSourceMap":{"version":3,"sources":["/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/cache-lru.ts"],"sourcesContent":["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { hashAlgorithm, LRUMap } from '@univerjs/core';\n\nexport class FormulaAstLRU<T> {\n    private _cache: LRUMap<string, T>;\n\n    constructor(cacheCount: number) {\n        this._cache = new LRUMap<string, T>(cacheCount);\n    }\n\n    set(formulaString: string, node: T) {\n        const hash = this._hash(formulaString);\n        this._cache.set(hash, node);\n    }\n\n    get(formulaString: string) {\n        const hash = this._hash(formulaString);\n        return this._cache.get(hash);\n    }\n\n    clear() {\n        this._cache.clear();\n    }\n\n    delete(formulaString: string) {\n        this._cache.delete(this._hash(formulaString));\n    }\n\n    forEach(callbackfn: (value: T, key: string, map: LRUMap<string, T>) => void, thisArg?: any) {\n        this._cache.forEach(callbackfn, thisArg);\n    }\n\n    private _hash(formulaString: string) {\n        if (formulaString.length <= 64) {\n            return formulaString;\n        }\n        return hashAlgorithm(formulaString).toString();\n    }\n}\n"],"mappings":"AAgBA,SAAS,eAAe,cAAc;AAE/B,aAAM,cAAiB;AAAA,EAClB;AAAA,EAER,YAAY,YAAoB;AAC5B,SAAK,SAAS,IAAI,OAAkB,UAAU;AAAA,EAClD;AAAA,EAEA,IAAI,eAAuB,MAAS;AAChC,UAAM,OAAO,KAAK,MAAM,aAAa;AACrC,SAAK,OAAO,IAAI,MAAM,IAAI;AAAA,EAC9B;AAAA,EAEA,IAAI,eAAuB;AACvB,UAAM,OAAO,KAAK,MAAM,aAAa;AACrC,WAAO,KAAK,OAAO,IAAI,IAAI;AAAA,EAC/B;AAAA,EAEA,QAAQ;AACJ,SAAK,OAAO,MAAM;AAAA,EACtB;AAAA,EAEA,OAAO,eAAuB;AAC1B,SAAK,OAAO,OAAO,KAAK,MAAM,aAAa,CAAC;AAAA,EAChD;AAAA,EAEA,QAAQ,YAAqE,SAAe;AACxF,SAAK,OAAO,QAAQ,YAAY,OAAO;AAAA,EAC3C;AAAA,EAEQ,MAAM,eAAuB;AACjC,QAAI,cAAc,UAAU,IAAI;AAC5B,aAAO;AAAA,IACX;AACA,WAAO,cAAc,aAAa,EAAE,SAAS;AAAA,EACjD;AACJ;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"662d71155df5d33697d4e4dfdff3112830d7493d"},"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/token.ts":{"path":"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/token.ts","statementMap":{"0":{"start":{"line":1,"column":43},"end":{"line":15,"column":23}},"1":{"start":{"line":2,"column":2},"end":{"line":2,"column":31}},"2":{"start":{"line":3,"column":2},"end":{"line":3,"column":32}},"3":{"start":{"line":4,"column":2},"end":{"line":4,"column":35}},"4":{"start":{"line":5,"column":2},"end":{"line":5,"column":34}},"5":{"start":{"line":6,"column":2},"end":{"line":6,"column":38}},"6":{"start":{"line":7,"column":2},"end":{"line":7,"column":32}},"7":{"start":{"line":8,"column":2},"end":{"line":8,"column":33}},"8":{"start":{"line":9,"column":2},"end":{"line":9,"column":37}},"9":{"start":{"line":10,"column":2},"end":{"line":10,"column":39}},"10":{"start":{"line":11,"column":2},"end":{"line":11,"column":49}},"11":{"start":{"line":12,"column":2},"end":{"line":12,"column":36}},"12":{"start":{"line":13,"column":2},"end":{"line":13,"column":46}},"13":{"start":{"line":14,"column":2},"end":{"line":14,"column":24}},"14":{"start":{"line":16,"column":42},"end":{"line":24,"column":22}},"15":{"start":{"line":17,"column":2},"end":{"line":17,"column":32}},"16":{"start":{"line":18,"column":2},"end":{"line":18,"column":36}},"17":{"start":{"line":19,"column":2},"end":{"line":19,"column":38}},"18":{"start":{"line":20,"column":2},"end":{"line":20,"column":48}},"19":{"start":{"line":21,"column":2},"end":{"line":21,"column":35}},"20":{"start":{"line":22,"column":2},"end":{"line":22,"column":45}},"21":{"start":{"line":23,"column":2},"end":{"line":23,"column":23}},"22":{"start":{"line":25,"column":55},"end":{"line":38,"column":2}},"23":{"start":{"line":39,"column":34},"end":{"line":39,"column":73}},"24":{"start":{"line":40,"column":58},"end":{"line":47,"column":2}},"25":{"start":{"line":48,"column":40},"end":{"line":60,"column":20}},"26":{"start":{"line":49,"column":2},"end":{"line":49,"column":36}},"27":{"start":{"line":50,"column":2},"end":{"line":50,"column":37}},"28":{"start":{"line":51,"column":2},"end":{"line":51,"column":29}},"29":{"start":{"line":52,"column":2},"end":{"line":52,"column":40}},"30":{"start":{"line":53,"column":2},"end":{"line":53,"column":40}},"31":{"start":{"line":54,"column":2},"end":{"line":54,"column":35}},"32":{"start":{"line":55,"column":2},"end":{"line":55,"column":36}},"33":{"start":{"line":56,"column":2},"end":{"line":56,"column":29}},"34":{"start":{"line":57,"column":2},"end":{"line":57,"column":43}},"35":{"start":{"line":58,"column":2},"end":{"line":58,"column":44}},"36":{"start":{"line":59,"column":2},"end":{"line":59,"column":21}},"37":{"start":{"line":61,"column":41},"end":{"line":65,"column":21}},"38":{"start":{"line":62,"column":2},"end":{"line":62,"column":35}},"39":{"start":{"line":63,"column":2},"end":{"line":63,"column":30}},"40":{"start":{"line":64,"column":2},"end":{"line":64,"column":22}},"41":{"start":{"line":66,"column":48},"end":{"line":66,"column":96}},"42":{"start":{"line":67,"column":41},"end":{"line":72,"column":21}},"43":{"start":{"line":68,"column":2},"end":{"line":68,"column":27}},"44":{"start":{"line":69,"column":2},"end":{"line":69,"column":30}},"45":{"start":{"line":70,"column":2},"end":{"line":70,"column":29}},"46":{"start":{"line":71,"column":2},"end":{"line":71,"column":22}},"47":{"start":{"line":73,"column":27},"end":{"line":73,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":1,"column":44},"end":{"line":1,"column":45}},"loc":{"start":{"line":1,"column":64},"end":{"line":15,"column":1}},"line":1},"1":{"name":"(anonymous_1)","decl":{"start":{"line":16,"column":43},"end":{"line":16,"column":44}},"loc":{"start":{"line":16,"column":62},"end":{"line":24,"column":1}},"line":16},"2":{"name":"(anonymous_2)","decl":{"start":{"line":48,"column":41},"end":{"line":48,"column":42}},"loc":{"start":{"line":48,"column":58},"end":{"line":60,"column":1}},"line":48},"3":{"name":"(anonymous_3)","decl":{"start":{"line":61,"column":42},"end":{"line":61,"column":43}},"loc":{"start":{"line":61,"column":60},"end":{"line":65,"column":1}},"line":61},"4":{"name":"(anonymous_4)","decl":{"start":{"line":67,"column":42},"end":{"line":67,"column":43}},"loc":{"start":{"line":67,"column":60},"end":{"line":72,"column":1}},"line":67}},"branchMap":{"0":{"loc":{"start":{"line":15,"column":3},"end":{"line":15,"column":22}},"type":"binary-expr","locations":[{"start":{"line":15,"column":3},"end":{"line":15,"column":16}},{"start":{"line":15,"column":20},"end":{"line":15,"column":22}}],"line":15},"1":{"loc":{"start":{"line":24,"column":3},"end":{"line":24,"column":21}},"type":"binary-expr","locations":[{"start":{"line":24,"column":3},"end":{"line":24,"column":15}},{"start":{"line":24,"column":19},"end":{"line":24,"column":21}}],"line":24},"2":{"loc":{"start":{"line":60,"column":3},"end":{"line":60,"column":19}},"type":"binary-expr","locations":[{"start":{"line":60,"column":3},"end":{"line":60,"column":13}},{"start":{"line":60,"column":17},"end":{"line":60,"column":19}}],"line":60},"3":{"loc":{"start":{"line":65,"column":3},"end":{"line":65,"column":20}},"type":"binary-expr","locations":[{"start":{"line":65,"column":3},"end":{"line":65,"column":14}},{"start":{"line":65,"column":18},"end":{"line":65,"column":20}}],"line":65},"4":{"loc":{"start":{"line":72,"column":3},"end":{"line":72,"column":20}},"type":"binary-expr","locations":[{"start":{"line":72,"column":3},"end":{"line":72,"column":14}},{"start":{"line":72,"column":18},"end":{"line":72,"column":20}}],"line":72}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1},"b":{"0":[1,1],"1":[1,1],"2":[1,1],"3":[1,1],"4":[1,1]},"inputSourceMap":{"version":3,"sources":["/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/token.ts"],"sourcesContent":["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum operatorToken {\n    PLUS = '+',\n    MINUS = '-',\n    MULTIPLY = '*',\n    DIVIDED = '/',\n    CONCATENATE = '&',\n    POWER = '^',\n    EQUALS = '=',\n    NOT_EQUAL = '<>',\n    GREATER_THAN = '>',\n    GREATER_THAN_OR_EQUAL = '>=',\n    LESS_THAN = '<',\n    LESS_THAN_OR_EQUAL = '<=',\n}\n\nexport enum compareToken {\n    EQUALS = '=',\n    NOT_EQUAL = '<>',\n    GREATER_THAN = '>',\n    GREATER_THAN_OR_EQUAL = '>=',\n    LESS_THAN = '<',\n    LESS_THAN_OR_EQUAL = '<=',\n}\n\nexport const OPERATOR_TOKEN_PRIORITY = new Map([\n    [operatorToken.NOT_EQUAL as string, 4],\n    [operatorToken.LESS_THAN as string, 4],\n    [operatorToken.GREATER_THAN_OR_EQUAL as string, 4],\n    [operatorToken.EQUALS as string, 4],\n    [operatorToken.GREATER_THAN as string, 4],\n    [operatorToken.LESS_THAN_OR_EQUAL as string, 4],\n    [operatorToken.CONCATENATE as string, 3],\n    [operatorToken.PLUS as string, 2],\n    [operatorToken.MINUS as string, 2],\n    [operatorToken.DIVIDED as string, 1],\n    [operatorToken.MULTIPLY as string, 1],\n    [operatorToken.POWER as string, 0],\n]);\n\nexport const OPERATOR_TOKEN_SET = new Set(OPERATOR_TOKEN_PRIORITY.keys());\n\nexport const OPERATOR_TOKEN_COMPARE_SET = new Set([\n    operatorToken.EQUALS as string,\n    operatorToken.NOT_EQUAL,\n    operatorToken.GREATER_THAN,\n    operatorToken.GREATER_THAN_OR_EQUAL,\n    operatorToken.LESS_THAN,\n    operatorToken.LESS_THAN_OR_EQUAL,\n]);\n\nexport enum matchToken {\n    OPEN_BRACKET = '(',\n    CLOSE_BRACKET = ')',\n    COMMA = ',',\n    SINGLE_QUOTATION = \"'\",\n    DOUBLE_QUOTATION = '\"',\n    OPEN_BRACES = '{',\n    CLOSE_BRACES = '}',\n    COLON = ':',\n    OPEN_SQUARE_BRACKET = '[',\n    CLOSE_SQUARE_BRACKET = ']',\n}\n\nexport enum suffixToken {\n    PERCENTAGE = '%',\n    POUND = '#',\n}\n\nexport const SUFFIX_TOKEN_SET = new Set([suffixToken.PERCENTAGE as string, suffixToken.POUND]);\n\nexport enum prefixToken {\n    AT = '@',\n    MINUS = '-',\n    PLUS = '+',\n}\n\nexport const SPACE_TOKEN = ' ';\n"],"mappings":"AAgBO,WAAK,gBAAL,kBAAKA,mBAAL;AACH,EAAAA,eAAA,UAAO;AACP,EAAAA,eAAA,WAAQ;AACR,EAAAA,eAAA,cAAW;AACX,EAAAA,eAAA,aAAU;AACV,EAAAA,eAAA,iBAAc;AACd,EAAAA,eAAA,WAAQ;AACR,EAAAA,eAAA,YAAS;AACT,EAAAA,eAAA,eAAY;AACZ,EAAAA,eAAA,kBAAe;AACf,EAAAA,eAAA,2BAAwB;AACxB,EAAAA,eAAA,eAAY;AACZ,EAAAA,eAAA,wBAAqB;AAZb,SAAAA;AAAA,GAAA;AAeL,WAAK,eAAL,kBAAKC,kBAAL;AACH,EAAAA,cAAA,YAAS;AACT,EAAAA,cAAA,eAAY;AACZ,EAAAA,cAAA,kBAAe;AACf,EAAAA,cAAA,2BAAwB;AACxB,EAAAA,cAAA,eAAY;AACZ,EAAAA,cAAA,wBAAqB;AANb,SAAAA;AAAA,GAAA;AASL,aAAM,0BAA0B,oBAAI,IAAI;AAAA,EAC3C,CAAC,sBAAmC,CAAC;AAAA,EACrC,CAAC,qBAAmC,CAAC;AAAA,EACrC,CAAC,kCAA+C,CAAC;AAAA,EACjD,CAAC,kBAAgC,CAAC;AAAA,EAClC,CAAC,wBAAsC,CAAC;AAAA,EACxC,CAAC,+BAA4C,CAAC;AAAA,EAC9C,CAAC,uBAAqC,CAAC;AAAA,EACvC,CAAC,gBAA8B,CAAC;AAAA,EAChC,CAAC,iBAA+B,CAAC;AAAA,EACjC,CAAC,mBAAiC,CAAC;AAAA,EACnC,CAAC,oBAAkC,CAAC;AAAA,EACpC,CAAC,iBAA+B,CAAC;AACrC,CAAC;AAEM,aAAM,qBAAqB,IAAI,IAAI,wBAAwB,KAAK,CAAC;AAEjE,aAAM,6BAA6B,oBAAI,IAAI;AAAA,EAC9C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,CAAC;AAEM,WAAK,aAAL,kBAAKC,gBAAL;AACH,EAAAA,YAAA,kBAAe;AACf,EAAAA,YAAA,mBAAgB;AAChB,EAAAA,YAAA,WAAQ;AACR,EAAAA,YAAA,sBAAmB;AACnB,EAAAA,YAAA,sBAAmB;AACnB,EAAAA,YAAA,iBAAc;AACd,EAAAA,YAAA,kBAAe;AACf,EAAAA,YAAA,WAAQ;AACR,EAAAA,YAAA,yBAAsB;AACtB,EAAAA,YAAA,0BAAuB;AAVf,SAAAA;AAAA,GAAA;AAaL,WAAK,cAAL,kBAAKC,iBAAL;AACH,EAAAA,aAAA,gBAAa;AACb,EAAAA,aAAA,WAAQ;AAFA,SAAAA;AAAA,GAAA;AAKL,aAAM,mBAAmB,oBAAI,IAAI,CAAC,sBAAkC,eAAiB,CAAC;AAEtF,WAAK,cAAL,kBAAKC,iBAAL;AACH,EAAAA,aAAA,QAAK;AACL,EAAAA,aAAA,WAAQ;AACR,EAAAA,aAAA,UAAO;AAHC,SAAAA;AAAA,GAAA;AAML,aAAM,cAAc;","names":["operatorToken","compareToken","matchToken","suffixToken","prefixToken"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ec3b32bec4eb6c9c5d3bb002b33dc3d2d5223129"},"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/match-token.ts":{"path":"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/match-token.ts","statementMap":{"0":{"start":{"line":2,"column":36},"end":{"line":8,"column":1}},"1":{"start":{"line":10,"column":2},"end":{"line":10,"column":44}},"2":{"start":{"line":13,"column":2},"end":{"line":17,"column":3}},"3":{"start":{"line":14,"column":4},"end":{"line":16,"column":5}},"4":{"start":{"line":15,"column":6},"end":{"line":15,"column":18}},"5":{"start":{"line":18,"column":2},"end":{"line":18,"column":15}},"6":{"start":{"line":21,"column":2},"end":{"line":23,"column":3}},"7":{"start":{"line":22,"column":4},"end":{"line":22,"column":56}},"8":{"start":{"line":24,"column":2},"end":{"line":24,"column":19}},"9":{"start":{"line":27,"column":2},"end":{"line":27,"column":204}},"10":{"start":{"line":29,"column":58},"end":{"line":47,"column":2}},"11":{"start":{"line":49,"column":2},"end":{"line":49,"column":47}},"12":{"start":{"line":51,"column":69},"end":{"line":71,"column":2}},"13":{"start":{"line":73,"column":2},"end":{"line":73,"column":58}}},"fnMap":{"0":{"name":"isFormulaLexerToken","decl":{"start":{"line":9,"column":16},"end":{"line":9,"column":35}},"loc":{"start":{"line":9,"column":41},"end":{"line":11,"column":1}},"line":9},"1":{"name":"includeFormulaLexerToken","decl":{"start":{"line":12,"column":16},"end":{"line":12,"column":40}},"loc":{"start":{"line":12,"column":46},"end":{"line":19,"column":1}},"line":12},"2":{"name":"normalizeSheetName","decl":{"start":{"line":20,"column":16},"end":{"line":20,"column":34}},"loc":{"start":{"line":20,"column":46},"end":{"line":25,"column":1}},"line":20},"3":{"name":"matchRefDrawToken","decl":{"start":{"line":26,"column":16},"end":{"line":26,"column":33}},"loc":{"start":{"line":26,"column":40},"end":{"line":28,"column":1}},"line":26},"4":{"name":"isTokenCannotBeAtEnd","decl":{"start":{"line":48,"column":16},"end":{"line":48,"column":36}},"loc":{"start":{"line":48,"column":44},"end":{"line":50,"column":1}},"line":48},"5":{"name":"isTokenCannotPrecedeSuffixToken","decl":{"start":{"line":72,"column":16},"end":{"line":72,"column":47}},"loc":{"start":{"line":72,"column":55},"end":{"line":74,"column":1}},"line":72}},"branchMap":{"0":{"loc":{"start":{"line":14,"column":4},"end":{"line":16,"column":5}},"type":"if","locations":[{"start":{"line":14,"column":4},"end":{"line":16,"column":5}},{"start":{},"end":{}}],"line":14},"1":{"loc":{"start":{"line":21,"column":2},"end":{"line":23,"column":3}},"type":"if","locations":[{"start":{"line":21,"column":2},"end":{"line":23,"column":3}},{"start":{},"end":{}}],"line":21},"2":{"loc":{"start":{"line":21,"column":6},"end":{"line":21,"column":69}},"type":"binary-expr","locations":[{"start":{"line":21,"column":6},"end":{"line":21,"column":26}},{"start":{"line":21,"column":30},"end":{"line":21,"column":69}}],"line":21},"3":{"loc":{"start":{"line":27,"column":9},"end":{"line":27,"column":203}},"type":"binary-expr","locations":[{"start":{"line":27,"column":9},"end":{"line":27,"column":34}},{"start":{"line":27,"column":38},"end":{"line":27,"column":70}},{"start":{"line":27,"column":74},"end":{"line":27,"column":107}},{"start":{"line":27,"column":111},"end":{"line":27,"column":147}},{"start":{"line":27,"column":151},"end":{"line":27,"column":187}},{"start":{"line":27,"column":191},"end":{"line":27,"column":203}}],"line":27}},"s":{"0":1,"1":4041,"2":9,"3":172,"4":5,"5":4,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1078,"12":1,"13":4005},"f":{"0":4041,"1":9,"2":0,"3":0,"4":1078,"5":4005},"b":{"0":[5,167],"1":[0,0],"2":[0,0],"3":[0,0,0,0,0,0]},"inputSourceMap":{"version":3,"sources":["/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/match-token.ts"],"sourcesContent":["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { compareToken, matchToken, operatorToken, prefixToken, suffixToken } from './token';\n\nexport const FORMULA_LEXER_TOKENS = [\n    ...Object.values(compareToken),\n    ...Object.values(operatorToken),\n    ...Object.values(matchToken),\n    ...Object.values(suffixToken),\n    ...Object.values(prefixToken),\n];\n\nexport function isFormulaLexerToken(str: string) {\n    return FORMULA_LEXER_TOKENS.includes(str as compareToken);\n}\n\nexport function includeFormulaLexerToken(str: string) {\n    for (const token of FORMULA_LEXER_TOKENS) {\n        if (str.indexOf(token) > -1) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function normalizeSheetName(sheetName: string) {\n    if (sheetName[0] === \"'\" && sheetName[sheetName.length - 1] === \"'\") {\n        return sheetName.substring(1, sheetName.length - 1);\n    }\n    return sheetName;\n}\n\n/**\n * Determine whether the character is a token keyword for the formula engine.\n * @param char\n */\nexport function matchRefDrawToken(char: string) {\n    return (\n        (isFormulaLexerToken(char) &&\n                char !== matchToken.CLOSE_BRACES &&\n                char !== matchToken.CLOSE_BRACKET &&\n                char !== matchToken.SINGLE_QUOTATION &&\n                char !== matchToken.DOUBLE_QUOTATION) ||\n            char === ' '\n    );\n}\n\nexport const TOKEN_CANNOT_BE_AT_END_SET = new Set<string>([\n    operatorToken.PLUS,\n    operatorToken.MINUS,\n    operatorToken.MULTIPLY,\n    operatorToken.DIVIDED,\n    operatorToken.CONCATENATE,\n    operatorToken.POWER,\n    operatorToken.EQUALS,\n    operatorToken.NOT_EQUAL,\n    operatorToken.GREATER_THAN,\n    operatorToken.GREATER_THAN_OR_EQUAL,\n    operatorToken.LESS_THAN,\n    operatorToken.LESS_THAN_OR_EQUAL,\n    matchToken.OPEN_BRACKET,\n    matchToken.COMMA,\n    matchToken.COLON,\n    matchToken.OPEN_BRACES,\n    matchToken.OPEN_SQUARE_BRACKET,\n]);\n\nexport function isTokenCannotBeAtEnd(token: string): boolean {\n    return TOKEN_CANNOT_BE_AT_END_SET.has(token);\n}\n\nexport const TOKEN_CANNOT_PRECEDE_SUFFIX_TOKEN_SET = new Set<string>([\n    operatorToken.PLUS,\n    operatorToken.MINUS,\n    operatorToken.MULTIPLY,\n    operatorToken.DIVIDED,\n    operatorToken.CONCATENATE,\n    operatorToken.POWER,\n    operatorToken.EQUALS,\n    operatorToken.NOT_EQUAL,\n    operatorToken.GREATER_THAN,\n    operatorToken.GREATER_THAN_OR_EQUAL,\n    operatorToken.LESS_THAN,\n    operatorToken.LESS_THAN_OR_EQUAL,\n\n    matchToken.OPEN_BRACKET,\n    matchToken.COMMA,\n    matchToken.COLON,\n    matchToken.OPEN_BRACES,\n    matchToken.OPEN_SQUARE_BRACKET,\n\n    suffixToken.PERCENTAGE,\n    suffixToken.POUND,\n]);\n\nexport function isTokenCannotPrecedeSuffixToken(token: string): boolean {\n    return TOKEN_CANNOT_PRECEDE_SUFFIX_TOKEN_SET.has(token);\n}\n"],"mappings":"AAgBA,SAAS,cAAc,YAAY,eAAe,aAAa,mBAAmB;AAE3E,aAAM,uBAAuB;AAAA,EAChC,GAAG,OAAO,OAAO,YAAY;AAAA,EAC7B,GAAG,OAAO,OAAO,aAAa;AAAA,EAC9B,GAAG,OAAO,OAAO,UAAU;AAAA,EAC3B,GAAG,OAAO,OAAO,WAAW;AAAA,EAC5B,GAAG,OAAO,OAAO,WAAW;AAChC;AAEO,gBAAS,oBAAoB,KAAa;AAC7C,SAAO,qBAAqB,SAAS,GAAmB;AAC5D;AAEO,gBAAS,yBAAyB,KAAa;AAClD,aAAW,SAAS,sBAAsB;AACtC,QAAI,IAAI,QAAQ,KAAK,IAAI,IAAI;AACzB,aAAO;AAAA,IACX;AAAA,EACJ;AAEA,SAAO;AACX;AAEO,gBAAS,mBAAmB,WAAmB;AAClD,MAAI,UAAU,CAAC,MAAM,OAAO,UAAU,UAAU,SAAS,CAAC,MAAM,KAAK;AACjE,WAAO,UAAU,UAAU,GAAG,UAAU,SAAS,CAAC;AAAA,EACtD;AACA,SAAO;AACX;AAMO,gBAAS,kBAAkB,MAAc;AAC5C,SACK,oBAAoB,IAAI,KACjB,SAAS,WAAW,gBACpB,SAAS,WAAW,iBACpB,SAAS,WAAW,oBACpB,SAAS,WAAW,oBACxB,SAAS;AAErB;AAEO,aAAM,6BAA6B,oBAAI,IAAY;AAAA,EACtD,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AACf,CAAC;AAEM,gBAAS,qBAAqB,OAAwB;AACzD,SAAO,2BAA2B,IAAI,KAAK;AAC/C;AAEO,aAAM,wCAAwC,oBAAI,IAAY;AAAA,EACjE,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EAEd,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EAEX,YAAY;AAAA,EACZ,YAAY;AAChB,CAAC;AAEM,gBAAS,gCAAgC,OAAwB;AACpE,SAAO,sCAAsC,IAAI,KAAK;AAC1D;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b0888d8b8dfa87fc0ce630099aecf39526199c2c"},"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/regex.ts":{"path":"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/regex.ts","statementMap":{"0":{"start":{"line":2,"column":31},"end":{"line":2,"column":65}},"1":{"start":{"line":3,"column":44},"end":{"line":3,"column":71}},"2":{"start":{"line":4,"column":32},"end":{"line":4,"column":60}},"3":{"start":{"line":5,"column":31},"end":{"line":5,"column":34}},"4":{"start":{"line":6,"column":28},"end":{"line":6,"column":41}},"5":{"start":{"line":7,"column":21},"end":{"line":7,"column":32}},"6":{"start":{"line":8,"column":18},"end":{"line":8,"column":31}},"7":{"start":{"line":9,"column":42},"end":{"line":9,"column":91}},"8":{"start":{"line":10,"column":41},"end":{"line":10,"column":112}},"9":{"start":{"line":11,"column":46},"end":{"line":11,"column":170}},"10":{"start":{"line":12,"column":59},"end":{"line":12,"column":101}},"11":{"start":{"line":13,"column":44},"end":{"line":13,"column":133}},"12":{"start":{"line":14,"column":57},"end":{"line":14,"column":97}},"13":{"start":{"line":15,"column":35},"end":{"line":15,"column":149}},"14":{"start":{"line":16,"column":48},"end":{"line":16,"column":79}},"15":{"start":{"line":17,"column":38},"end":{"line":17,"column":158}},"16":{"start":{"line":18,"column":51},"end":{"line":18,"column":85}},"17":{"start":{"line":19,"column":42},"end":{"line":19,"column":113}},"18":{"start":{"line":20,"column":55},"end":{"line":20,"column":93}},"19":{"start":{"line":21,"column":45},"end":{"line":21,"column":119}},"20":{"start":{"line":22,"column":58},"end":{"line":22,"column":99}},"21":{"start":{"line":23,"column":25},"end":{"line":23,"column":93}},"22":{"start":{"line":24,"column":26},"end":{"line":24,"column":48}},"23":{"start":{"line":25,"column":28},"end":{"line":25,"column":46}},"24":{"start":{"line":26,"column":36},"end":{"line":26,"column":97}},"25":{"start":{"line":27,"column":48},"end":{"line":27,"column":92}},"26":{"start":{"line":28,"column":51},"end":{"line":28,"column":169}},"27":{"start":{"line":29,"column":53},"end":{"line":29,"column":217}},"28":{"start":{"line":30,"column":40},"end":{"line":30,"column":47}},"29":{"start":{"line":31,"column":53},"end":{"line":31,"column":94}},"30":{"start":{"line":32,"column":33},"end":{"line":32,"column":40}},"31":{"start":{"line":33,"column":46},"end":{"line":33,"column":80}},"32":{"start":{"line":35,"column":2},"end":{"line":35,"column":58}},"33":{"start":{"line":36,"column":2},"end":{"line":36,"column":63}},"34":{"start":{"line":39,"column":2},"end":{"line":39,"column":60}},"35":{"start":{"line":40,"column":2},"end":{"line":40,"column":65}},"36":{"start":{"line":43,"column":2},"end":{"line":43,"column":49}},"37":{"start":{"line":44,"column":2},"end":{"line":44,"column":54}},"38":{"start":{"line":47,"column":2},"end":{"line":47,"column":52}},"39":{"start":{"line":48,"column":2},"end":{"line":48,"column":57}},"40":{"start":{"line":51,"column":2},"end":{"line":51,"column":56}},"41":{"start":{"line":52,"column":2},"end":{"line":52,"column":61}},"42":{"start":{"line":55,"column":2},"end":{"line":55,"column":59}},"43":{"start":{"line":56,"column":2},"end":{"line":56,"column":64}},"44":{"start":{"line":59,"column":2},"end":{"line":59,"column":54}},"45":{"start":{"line":60,"column":2},"end":{"line":60,"column":59}},"46":{"start":{"line":63,"column":2},"end":{"line":63,"column":47}},"47":{"start":{"line":64,"column":2},"end":{"line":64,"column":52}},"48":{"start":{"line":67,"column":2},"end":{"line":67,"column":134}}},"fnMap":{"0":{"name":"regexTestSingeRange","decl":{"start":{"line":34,"column":16},"end":{"line":34,"column":35}},"loc":{"start":{"line":34,"column":43},"end":{"line":37,"column":1}},"line":34},"1":{"name":"regexTestMultipleRange","decl":{"start":{"line":38,"column":16},"end":{"line":38,"column":38}},"loc":{"start":{"line":38,"column":46},"end":{"line":41,"column":1}},"line":38},"2":{"name":"regexTestRow","decl":{"start":{"line":42,"column":16},"end":{"line":42,"column":28}},"loc":{"start":{"line":42,"column":36},"end":{"line":45,"column":1}},"line":42},"3":{"name":"regexTestColumn","decl":{"start":{"line":46,"column":16},"end":{"line":46,"column":31}},"loc":{"start":{"line":46,"column":39},"end":{"line":49,"column":1}},"line":46},"4":{"name":"regexTestSingleRow","decl":{"start":{"line":50,"column":16},"end":{"line":50,"column":34}},"loc":{"start":{"line":50,"column":42},"end":{"line":53,"column":1}},"line":50},"5":{"name":"regexTestSingleColumn","decl":{"start":{"line":54,"column":16},"end":{"line":54,"column":37}},"loc":{"start":{"line":54,"column":45},"end":{"line":57,"column":1}},"line":54},"6":{"name":"regexTestSuperTableColumn","decl":{"start":{"line":58,"column":16},"end":{"line":58,"column":41}},"loc":{"start":{"line":58,"column":49},"end":{"line":61,"column":1}},"line":58},"7":{"name":"regexTestArrayValue","decl":{"start":{"line":62,"column":16},"end":{"line":62,"column":35}},"loc":{"start":{"line":62,"column":43},"end":{"line":65,"column":1}},"line":62},"8":{"name":"isReferenceString","decl":{"start":{"line":66,"column":16},"end":{"line":66,"column":33}},"loc":{"start":{"line":66,"column":45},"end":{"line":68,"column":1}},"line":66}},"branchMap":{"0":{"loc":{"start":{"line":67,"column":9},"end":{"line":67,"column":133}},"type":"binary-expr","locations":[{"start":{"line":67,"column":9},"end":{"line":67,"column":39}},{"start":{"line":67,"column":43},"end":{"line":67,"column":76}},{"start":{"line":67,"column":80},"end":{"line":67,"column":103}},{"start":{"line":67,"column":107},"end":{"line":67,"column":133}}],"line":67}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":214,"33":214,"34":37,"35":37,"36":5,"37":5,"38":3,"39":3,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":103},"f":{"0":214,"1":37,"2":5,"3":3,"4":0,"5":0,"6":0,"7":0,"8":103},"b":{"0":[103,37,5,3]},"inputSourceMap":{"version":3,"sources":["/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/regex.ts"],"sourcesContent":["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { prefixToken, suffixToken } from './token';\n\n// export const UNIT_NAME_REGEX = '\\'?\\\\[((?![\\\\/?:\"<>|*\\\\\\\\]).)*\\\\]';\n// export const UNIT_NAME_REGEX = '\\'?\\\\[((?![\\\\/?:\"<>|*\\\\\\\\]).)*?\\\\]';\n// export const UNIT_NAME_REGEX = '\\\\[((?![\\\\/?:\"<>|*\\\\\\\\]).)*?\\\\]';\n\nexport const UNIT_NAME_REGEX = '\\\\[([^\\\\[\\\\]\\\\/?:\"<>|*\\\\\\\\]+)\\\\]'; // '[Book-1.xlsx]Sheet1'!$A$4 gets [Book-1.xlsx] as unitId\n\nexport const UNIT_NAME_REGEX_PRECOMPILING = new RegExp(UNIT_NAME_REGEX);\n\nexport const SHEET_NAME_REGEX = '((?![\\\\[\\\\]\\\\/?*\\\\\\\\]).)*!';\n\nexport const ABSOLUTE_SYMBOL = '$';\n\nexport const RANGE_SYMBOL = '\\\\s*?:\\\\s*?';\n\n// Column numbers range from A to Z, and row numbers start at 1\nconst COLUMN_REGEX = '[A-Za-z]+';\nconst ROW_REGEX = '[1-9][0-9]*';\n\nexport const UNIT_NAME_SHEET_NAME_REGEX = `'?(${UNIT_NAME_REGEX})?(${SHEET_NAME_REGEX})?'?`;\n\nexport const SIMPLE_SINGLE_RANGE_REGEX = `\\\\${ABSOLUTE_SYMBOL}?${COLUMN_REGEX}\\\\${ABSOLUTE_SYMBOL}?${ROW_REGEX}`;\n\nexport const REFERENCE_MULTIPLE_RANGE_REGEX = `^(${prefixToken.AT})?${UNIT_NAME_SHEET_NAME_REGEX}${SIMPLE_SINGLE_RANGE_REGEX}${RANGE_SYMBOL}${SIMPLE_SINGLE_RANGE_REGEX}$`;\n\nexport const REFERENCE_MULTIPLE_RANGE_REGEX_PRECOMPILING = new RegExp(REFERENCE_MULTIPLE_RANGE_REGEX);\n\nexport const REFERENCE_SINGLE_RANGE_REGEX = `^${UNIT_NAME_SHEET_NAME_REGEX}\\\\s*?${SIMPLE_SINGLE_RANGE_REGEX}(${suffixToken.POUND})?$`;\n\nexport const REFERENCE_SINGLE_RANGE_REGEX_PRECOMPILING = new RegExp(REFERENCE_SINGLE_RANGE_REGEX);\n\nexport const REFERENCE_REGEX_ROW = `^${UNIT_NAME_SHEET_NAME_REGEX}\\\\${ABSOLUTE_SYMBOL}?${ROW_REGEX}${RANGE_SYMBOL}\\\\${ABSOLUTE_SYMBOL}?${ROW_REGEX}$`;\n\nexport const REFERENCE_REGEX_ROW_PRECOMPILING = new RegExp(REFERENCE_REGEX_ROW);\n\nexport const REFERENCE_REGEX_COLUMN = `^${UNIT_NAME_SHEET_NAME_REGEX}\\\\${ABSOLUTE_SYMBOL}?${COLUMN_REGEX}${RANGE_SYMBOL}\\\\${ABSOLUTE_SYMBOL}?${COLUMN_REGEX}$`;\n\nexport const REFERENCE_REGEX_COLUMN_PRECOMPILING = new RegExp(REFERENCE_REGEX_COLUMN);\n\nexport const REFERENCE_REGEX_SINGLE_ROW = `^${UNIT_NAME_SHEET_NAME_REGEX}\\\\s*?\\\\${ABSOLUTE_SYMBOL}?${ROW_REGEX}$`;\n\nexport const REFERENCE_REGEX_SINGLE_ROW_PRECOMPILING = new RegExp(REFERENCE_REGEX_SINGLE_ROW);\n\nexport const REFERENCE_REGEX_SINGLE_COLUMN = `^${UNIT_NAME_SHEET_NAME_REGEX}\\\\s*?\\\\${ABSOLUTE_SYMBOL}?${COLUMN_REGEX}$`;\n\nexport const REFERENCE_REGEX_SINGLE_COLUMN_PRECOMPILING = new RegExp(REFERENCE_REGEX_SINGLE_COLUMN);\n\nconst TABLE_NAME_REGEX = '((?![~!@#$%^&*()_+<>?:,./;’，。、‘：“《》？~！@#￥%……（）【】\\\\[\\\\]\\\\/\\\\\\\\]).)+';\n\nconst TABLE_TITLE_REGEX = '\\\\[#.+\\\\]\\\\s*?,\\\\s*?';\n\nconst TABLE_CONTENT_REGEX = '\\\\[((?<!#).)*\\\\]';\n\nconst TABLE_MULTIPLE_COLUMN_REGEX = `${TABLE_CONTENT_REGEX}${RANGE_SYMBOL}${TABLE_CONTENT_REGEX}`;\n\nexport const REFERENCE_TABLE_ALL_COLUMN_REGEX = `^(${UNIT_NAME_REGEX})?${TABLE_NAME_REGEX}$`;\n\nexport const REFERENCE_TABLE_SINGLE_COLUMN_REGEX = `^(${UNIT_NAME_REGEX})?${TABLE_NAME_REGEX}(${TABLE_CONTENT_REGEX}|\\\\[${TABLE_TITLE_REGEX}${TABLE_CONTENT_REGEX}\\\\])+$`; // =Table1[Column1] | =Table1[[#Title],[Column1]]\n\nexport const REFERENCE_TABLE_MULTIPLE_COLUMN_REGEX = `^(${UNIT_NAME_REGEX})?${TABLE_NAME_REGEX}(\\\\[${TABLE_MULTIPLE_COLUMN_REGEX}\\\\])?$|^${TABLE_NAME_REGEX}(\\\\[${TABLE_TITLE_REGEX}${TABLE_MULTIPLE_COLUMN_REGEX}\\\\])?$`; // =Table1[[#Title],[Column1]:[Column2]] | =Table1[[Column1]:[Column2]]\n\nexport const SUPER_TABLE_COLUMN_REGEX = '[.*?]';\n\nexport const SUPER_TABLE_COLUMN_REGEX_PRECOMPILING = new RegExp(SUPER_TABLE_COLUMN_REGEX, 'g');\n\nexport const ARRAY_VALUE_REGEX = '{.*?}';\n\nexport const ARRAY_VALUE_REGEX_PRECOMPILING = new RegExp(ARRAY_VALUE_REGEX, 'g');\n\nexport function regexTestSingeRange(token: string): boolean {\n    REFERENCE_SINGLE_RANGE_REGEX_PRECOMPILING.lastIndex = 0;\n    return REFERENCE_SINGLE_RANGE_REGEX_PRECOMPILING.test(token);\n}\n\nexport function regexTestMultipleRange(token: string): boolean {\n    REFERENCE_MULTIPLE_RANGE_REGEX_PRECOMPILING.lastIndex = 0;\n    return REFERENCE_MULTIPLE_RANGE_REGEX_PRECOMPILING.test(token);\n}\n\nexport function regexTestRow(token: string): boolean {\n    REFERENCE_REGEX_ROW_PRECOMPILING.lastIndex = 0;\n    return REFERENCE_REGEX_ROW_PRECOMPILING.test(token);\n}\n\nexport function regexTestColumn(token: string): boolean {\n    REFERENCE_REGEX_COLUMN_PRECOMPILING.lastIndex = 0;\n    return REFERENCE_REGEX_COLUMN_PRECOMPILING.test(token);\n}\n\nexport function regexTestSingleRow(token: string): boolean {\n    REFERENCE_REGEX_SINGLE_ROW_PRECOMPILING.lastIndex = 0;\n    return REFERENCE_REGEX_SINGLE_ROW_PRECOMPILING.test(token);\n}\n\nexport function regexTestSingleColumn(token: string): boolean {\n    REFERENCE_REGEX_SINGLE_COLUMN_PRECOMPILING.lastIndex = 0;\n    return REFERENCE_REGEX_SINGLE_COLUMN_PRECOMPILING.test(token);\n}\n\nexport function regexTestSuperTableColumn(token: string): boolean {\n    SUPER_TABLE_COLUMN_REGEX_PRECOMPILING.lastIndex = 0;\n    return SUPER_TABLE_COLUMN_REGEX_PRECOMPILING.test(token);\n}\n\nexport function regexTestArrayValue(token: string): boolean {\n    ARRAY_VALUE_REGEX_PRECOMPILING.lastIndex = 0;\n    return ARRAY_VALUE_REGEX_PRECOMPILING.test(token);\n}\n\nexport function isReferenceString(refString: string) {\n    return (\n        regexTestSingeRange(refString) ||\n        regexTestMultipleRange(refString) ||\n        regexTestRow(refString) ||\n        regexTestColumn(refString)\n    );\n}\n"],"mappings":"AAgBA,SAAS,aAAa,mBAAmB;AAMlC,aAAM,kBAAkB;AAExB,aAAM,+BAA+B,IAAI,OAAO,eAAe;AAE/D,aAAM,mBAAmB;AAEzB,aAAM,kBAAkB;AAExB,aAAM,eAAe;AAG5B,MAAM,eAAe;AACrB,MAAM,YAAY;AAEX,aAAM,6BAA6B,MAAM,eAAe,MAAM,gBAAgB;AAE9E,aAAM,4BAA4B,KAAK,eAAe,IAAI,YAAY,KAAK,eAAe,IAAI,SAAS;AAEvG,aAAM,iCAAiC,KAAK,YAAY,EAAE,KAAK,0BAA0B,GAAG,yBAAyB,GAAG,YAAY,GAAG,yBAAyB;AAEhK,aAAM,8CAA8C,IAAI,OAAO,8BAA8B;AAE7F,aAAM,+BAA+B,IAAI,0BAA0B,QAAQ,yBAAyB,IAAI,YAAY,KAAK;AAEzH,aAAM,4CAA4C,IAAI,OAAO,4BAA4B;AAEzF,aAAM,sBAAsB,IAAI,0BAA0B,KAAK,eAAe,IAAI,SAAS,GAAG,YAAY,KAAK,eAAe,IAAI,SAAS;AAE3I,aAAM,mCAAmC,IAAI,OAAO,mBAAmB;AAEvE,aAAM,yBAAyB,IAAI,0BAA0B,KAAK,eAAe,IAAI,YAAY,GAAG,YAAY,KAAK,eAAe,IAAI,YAAY;AAEpJ,aAAM,sCAAsC,IAAI,OAAO,sBAAsB;AAE7E,aAAM,6BAA6B,IAAI,0BAA0B,UAAU,eAAe,IAAI,SAAS;AAEvG,aAAM,0CAA0C,IAAI,OAAO,0BAA0B;AAErF,aAAM,gCAAgC,IAAI,0BAA0B,UAAU,eAAe,IAAI,YAAY;AAE7G,aAAM,6CAA6C,IAAI,OAAO,6BAA6B;AAElG,MAAM,mBAAmB;AAEzB,MAAM,oBAAoB;AAE1B,MAAM,sBAAsB;AAE5B,MAAM,8BAA8B,GAAG,mBAAmB,GAAG,YAAY,GAAG,mBAAmB;AAExF,aAAM,mCAAmC,KAAK,eAAe,KAAK,gBAAgB;AAElF,aAAM,sCAAsC,KAAK,eAAe,KAAK,gBAAgB,IAAI,mBAAmB,OAAO,iBAAiB,GAAG,mBAAmB;AAE1J,aAAM,wCAAwC,KAAK,eAAe,KAAK,gBAAgB,OAAO,2BAA2B,WAAW,gBAAgB,OAAO,iBAAiB,GAAG,2BAA2B;AAE1M,aAAM,2BAA2B;AAEjC,aAAM,wCAAwC,IAAI,OAAO,0BAA0B,GAAG;AAEtF,aAAM,oBAAoB;AAE1B,aAAM,iCAAiC,IAAI,OAAO,mBAAmB,GAAG;AAExE,gBAAS,oBAAoB,OAAwB;AACxD,4CAA0C,YAAY;AACtD,SAAO,0CAA0C,KAAK,KAAK;AAC/D;AAEO,gBAAS,uBAAuB,OAAwB;AAC3D,8CAA4C,YAAY;AACxD,SAAO,4CAA4C,KAAK,KAAK;AACjE;AAEO,gBAAS,aAAa,OAAwB;AACjD,mCAAiC,YAAY;AAC7C,SAAO,iCAAiC,KAAK,KAAK;AACtD;AAEO,gBAAS,gBAAgB,OAAwB;AACpD,sCAAoC,YAAY;AAChD,SAAO,oCAAoC,KAAK,KAAK;AACzD;AAEO,gBAAS,mBAAmB,OAAwB;AACvD,0CAAwC,YAAY;AACpD,SAAO,wCAAwC,KAAK,KAAK;AAC7D;AAEO,gBAAS,sBAAsB,OAAwB;AAC1D,6CAA2C,YAAY;AACvD,SAAO,2CAA2C,KAAK,KAAK;AAChE;AAEO,gBAAS,0BAA0B,OAAwB;AAC9D,wCAAsC,YAAY;AAClD,SAAO,sCAAsC,KAAK,KAAK;AAC3D;AAEO,gBAAS,oBAAoB,OAAwB;AACxD,iCAA+B,YAAY;AAC3C,SAAO,+BAA+B,KAAK,KAAK;AACpD;AAEO,gBAAS,kBAAkB,WAAmB;AACjD,SACI,oBAAoB,SAAS,KAC7B,uBAAuB,SAAS,KAChC,aAAa,SAAS,KACtB,gBAAgB,SAAS;AAEjC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"dd7593723ab97e958c533cc9df673dd7e0af8263"},"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/token-type.ts":{"path":"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/token-type.ts","statementMap":{"0":{"start":{"line":1,"column":44},"end":{"line":1,"column":49}},"1":{"start":{"line":2,"column":39},"end":{"line":2,"column":44}},"2":{"start":{"line":3,"column":51},"end":{"line":3,"column":56}},"3":{"start":{"line":4,"column":59},"end":{"line":4,"column":65}},"4":{"start":{"line":5,"column":56},"end":{"line":5,"column":62}},"5":{"start":{"line":6,"column":47},"end":{"line":6,"column":52}},"6":{"start":{"line":7,"column":50},"end":{"line":7,"column":58}},"7":{"start":{"line":8,"column":48},"end":{"line":8,"column":54}},"8":{"start":{"line":9,"column":66},"end":{"line":9,"column":114}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/basics/token-type.ts"],"sourcesContent":["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_TOKEN_TYPE_PARAMETER = 'P_1';\n\nexport const DEFAULT_TOKEN_TYPE_ROOT = 'R_1';\n\nexport const DEFAULT_TOKEN_TYPE_LAMBDA_PARAMETER = 'L_1';\n\nexport const DEFAULT_TOKEN_TYPE_LAMBDA_RUNTIME_PARAMETER = 'LR_1';\n\nexport const DEFAULT_TOKEN_TYPE_LAMBDA_OMIT_PARAMETER = 'LO_1';\n\nexport const DEFAULT_TOKEN_LET_FUNCTION_NAME = 'LET';\n\nexport const DEFAULT_TOKEN_LAMBDA_FUNCTION_NAME = 'LAMBDA';\n\nexport const DEFAULT_TOKEN_CUBE_FUNCTION_NAME = 'CUBE';\n\nexport const FORCED_RECALCULATION_FUNCTION_NAME = new Set<string>(['RAND', 'RANDBETWEEN', 'NOW', 'TODAY']);\n"],"mappings":"AAgBO,aAAM,+BAA+B;AAErC,aAAM,0BAA0B;AAEhC,aAAM,sCAAsC;AAE5C,aAAM,8CAA8C;AAEpD,aAAM,2CAA2C;AAEjD,aAAM,kCAAkC;AAExC,aAAM,qCAAqC;AAE3C,aAAM,mCAAmC;AAEzC,aAAM,qCAAqC,oBAAI,IAAY,CAAC,QAAQ,eAAe,OAAO,OAAO,CAAC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"fa55834523dd5319df1c1c0cbb2dfb67962fb62c"},"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/engine/utils/reference.ts":{"path":"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/engine/utils/reference.ts","statementMap":{"0":{"start":{"line":5,"column":19},"end":{"line":5,"column":28}},"1":{"start":{"line":6,"column":22},"end":{"line":6,"column":34}},"2":{"start":{"line":8,"column":25},"end":{"line":8,"column":51}},"3":{"start":{"line":9,"column":21},"end":{"line":9,"column":49}},"4":{"start":{"line":10,"column":22},"end":{"line":10,"column":50}},"5":{"start":{"line":11,"column":2},"end":{"line":14,"column":3}},"6":{"start":{"line":12,"column":4},"end":{"line":12,"column":29}},"7":{"start":{"line":13,"column":4},"end":{"line":13,"column":25}},"8":{"start":{"line":15,"column":2},"end":{"line":17,"column":3}},"9":{"start":{"line":16,"column":4},"end":{"line":16,"column":31}},"10":{"start":{"line":18,"column":2},"end":{"line":20,"column":3}},"11":{"start":{"line":19,"column":4},"end":{"line":19,"column":34}},"12":{"start":{"line":21,"column":2},"end":{"line":23,"column":3}},"13":{"start":{"line":22,"column":4},"end":{"line":22,"column":31}},"14":{"start":{"line":24,"column":2},"end":{"line":24,"column":30}},"15":{"start":{"line":27,"column":21},"end":{"line":27,"column":41}},"16":{"start":{"line":28,"column":2},"end":{"line":30,"column":3}},"17":{"start":{"line":29,"column":4},"end":{"line":29,"column":50}},"18":{"start":{"line":31,"column":19},"end":{"line":31,"column":39}},"19":{"start":{"line":32,"column":2},"end":{"line":37,"column":3}},"20":{"start":{"line":33,"column":4},"end":{"line":36,"column":6}},"21":{"start":{"line":38,"column":2},"end":{"line":38,"column":83}},"22":{"start":{"line":41,"column":26},"end":{"line":41,"column":28}},"23":{"start":{"line":42,"column":29},"end":{"line":42,"column":31}},"24":{"start":{"line":43,"column":2},"end":{"line":50,"column":3}},"25":{"start":{"line":44,"column":4},"end":{"line":44,"column":28}},"26":{"start":{"line":45,"column":9},"end":{"line":50,"column":3}},"27":{"start":{"line":46,"column":4},"end":{"line":46,"column":31}},"28":{"start":{"line":47,"column":9},"end":{"line":50,"column":3}},"29":{"start":{"line":48,"column":4},"end":{"line":48,"column":28}},"30":{"start":{"line":49,"column":4},"end":{"line":49,"column":31}},"31":{"start":{"line":51,"column":2},"end":{"line":54,"column":4}},"32":{"start":{"line":65,"column":6},"end":{"line":65,"column":11}},"33":{"start":{"line":66,"column":16},"end":{"line":66,"column":55}},"34":{"start":{"line":67,"column":14},"end":{"line":67,"column":51}},"35":{"start":{"line":68,"column":2},"end":{"line":72,"column":3}},"36":{"start":{"line":69,"column":22},"end":{"line":69,"column":65}},"37":{"start":{"line":70,"column":20},"end":{"line":70,"column":59}},"38":{"start":{"line":71,"column":4},"end":{"line":71,"column":37}},"39":{"start":{"line":73,"column":2},"end":{"line":77,"column":3}},"40":{"start":{"line":74,"column":22},"end":{"line":74,"column":84}},"41":{"start":{"line":75,"column":20},"end":{"line":75,"column":78}},"42":{"start":{"line":76,"column":4},"end":{"line":76,"column":37}},"43":{"start":{"line":78,"column":19},"end":{"line":78,"column":122}},"44":{"start":{"line":79,"column":17},"end":{"line":79,"column":112}},"45":{"start":{"line":80,"column":2},"end":{"line":82,"column":3}},"46":{"start":{"line":81,"column":4},"end":{"line":81,"column":20}},"47":{"start":{"line":83,"column":2},"end":{"line":83,"column":33}},"48":{"start":{"line":86,"column":2},"end":{"line":86,"column":69}},"49":{"start":{"line":89,"column":2},"end":{"line":91,"column":3}},"50":{"start":{"line":90,"column":4},"end":{"line":90,"column":94}},"51":{"start":{"line":92,"column":2},"end":{"line":92,"column":58}},"52":{"start":{"line":95,"column":39},"end":{"line":95,"column":52}},"53":{"start":{"line":96,"column":2},"end":{"line":98,"column":3}},"54":{"start":{"line":97,"column":4},"end":{"line":97,"column":67}},"55":{"start":{"line":99,"column":2},"end":{"line":101,"column":3}},"56":{"start":{"line":100,"column":4},"end":{"line":100,"column":53}},"57":{"start":{"line":102,"column":2},"end":{"line":102,"column":31}},"58":{"start":{"line":105,"column":14},"end":{"line":105,"column":66}},"59":{"start":{"line":106,"column":17},"end":{"line":106,"column":67}},"60":{"start":{"line":107,"column":26},"end":{"line":107,"column":69}},"61":{"start":{"line":108,"column":2},"end":{"line":112,"column":4}},"62":{"start":{"line":115,"column":22},"end":{"line":115,"column":66}},"63":{"start":{"line":116,"column":15},"end":{"line":116,"column":17}},"64":{"start":{"line":117,"column":2},"end":{"line":121,"column":3}},"65":{"start":{"line":118,"column":4},"end":{"line":118,"column":35}},"66":{"start":{"line":119,"column":4},"end":{"line":119,"column":66}},"67":{"start":{"line":120,"column":4},"end":{"line":120,"column":68}},"68":{"start":{"line":122,"column":25},"end":{"line":122,"column":47}},"69":{"start":{"line":123,"column":18},"end":{"line":123,"column":20}},"70":{"start":{"line":124,"column":16},"end":{"line":124,"column":18}},"71":{"start":{"line":125,"column":2},"end":{"line":134,"column":3}},"72":{"start":{"line":126,"column":4},"end":{"line":126,"column":55}},"73":{"start":{"line":127,"column":4},"end":{"line":129,"column":5}},"74":{"start":{"line":128,"column":6},"end":{"line":128,"column":63}},"75":{"start":{"line":130,"column":4},"end":{"line":130,"column":44}},"76":{"start":{"line":131,"column":4},"end":{"line":131,"column":54}},"77":{"start":{"line":133,"column":4},"end":{"line":133,"column":24}},"78":{"start":{"line":135,"column":2},"end":{"line":139,"column":4}},"79":{"start":{"line":142,"column":41},"end":{"line":142,"column":71}},"80":{"start":{"line":143,"column":21},"end":{"line":143,"column":41}},"81":{"start":{"line":144,"column":2},"end":{"line":162,"column":3}},"82":{"start":{"line":145,"column":17},"end":{"line":145,"column":47}},"83":{"start":{"line":146,"column":16},"end":{"line":146,"column":24}},"84":{"start":{"line":147,"column":19},"end":{"line":147,"column":30}},"85":{"start":{"line":148,"column":28},"end":{"line":148,"column":48}},"86":{"start":{"line":149,"column":18},"end":{"line":156,"column":5}},"87":{"start":{"line":157,"column":4},"end":{"line":161,"column":6}},"88":{"start":{"line":163,"column":25},"end":{"line":163,"column":57}},"89":{"start":{"line":164,"column":23},"end":{"line":164,"column":56}},"90":{"start":{"line":165,"column":20},"end":{"line":165,"column":57}},"91":{"start":{"line":166,"column":18},"end":{"line":166,"column":53}},"92":{"start":{"line":167,"column":19},"end":{"line":167,"column":76}},"93":{"start":{"line":168,"column":22},"end":{"line":168,"column":91}},"94":{"start":{"line":169,"column":17},"end":{"line":169,"column":74}},"95":{"start":{"line":170,"column":20},"end":{"line":170,"column":89}},"96":{"start":{"line":171,"column":18},"end":{"line":171,"column":35}},"97":{"start":{"line":172,"column":2},"end":{"line":176,"column":3}},"98":{"start":{"line":173,"column":4},"end":{"line":173,"column":34}},"99":{"start":{"line":174,"column":9},"end":{"line":176,"column":3}},"100":{"start":{"line":175,"column":4},"end":{"line":175,"column":31}},"101":{"start":{"line":177,"column":2},"end":{"line":189,"column":4}},"102":{"start":{"line":191,"column":30},"end":{"line":191,"column":39}},"103":{"start":{"line":193,"column":28},"end":{"line":193,"column":61}},"104":{"start":{"line":194,"column":2},"end":{"line":196,"column":3}},"105":{"start":{"line":195,"column":4},"end":{"line":195,"column":17}},"106":{"start":{"line":197,"column":2},"end":{"line":199,"column":3}},"107":{"start":{"line":198,"column":4},"end":{"line":198,"column":17}},"108":{"start":{"line":200,"column":20},"end":{"line":200,"column":64}},"109":{"start":{"line":201,"column":2},"end":{"line":203,"column":3}},"110":{"start":{"line":202,"column":4},"end":{"line":202,"column":17}},"111":{"start":{"line":204,"column":2},"end":{"line":204,"column":14}},"112":{"start":{"line":207,"column":21},"end":{"line":207,"column":23}},"113":{"start":{"line":208,"column":20},"end":{"line":208,"column":25}},"114":{"start":{"line":209,"column":2},"end":{"line":219,"column":3}},"115":{"start":{"line":209,"column":15},"end":{"line":209,"column":16}},"116":{"start":{"line":209,"column":24},"end":{"line":209,"column":36}},"117":{"start":{"line":210,"column":17},"end":{"line":210,"column":25}},"118":{"start":{"line":211,"column":4},"end":{"line":218,"column":5}},"119":{"start":{"line":212,"column":6},"end":{"line":212,"column":28}},"120":{"start":{"line":213,"column":11},"end":{"line":218,"column":5}},"121":{"start":{"line":214,"column":6},"end":{"line":214,"column":15}},"122":{"start":{"line":216,"column":6},"end":{"line":216,"column":28}},"123":{"start":{"line":217,"column":6},"end":{"line":217,"column":25}},"124":{"start":{"line":220,"column":2},"end":{"line":220,"column":29}},"125":{"start":{"line":223,"column":21},"end":{"line":223,"column":48}},"126":{"start":{"line":224,"column":2},"end":{"line":226,"column":3}},"127":{"start":{"line":225,"column":4},"end":{"line":225,"column":14}},"128":{"start":{"line":227,"column":17},"end":{"line":227,"column":46}},"129":{"start":{"line":228,"column":2},"end":{"line":230,"column":3}},"130":{"start":{"line":229,"column":4},"end":{"line":229,"column":14}},"131":{"start":{"line":231,"column":17},"end":{"line":239,"column":4}},"132":{"start":{"line":232,"column":22},"end":{"line":232,"column":52}},"133":{"start":{"line":233,"column":4},"end":{"line":238,"column":6}},"134":{"start":{"line":240,"column":2},"end":{"line":240,"column":16}},"135":{"start":{"line":243,"column":21},"end":{"line":243,"column":48}},"136":{"start":{"line":244,"column":2},"end":{"line":246,"column":5}},"137":{"start":{"line":245,"column":4},"end":{"line":245,"column":67}},"138":{"start":{"line":249,"column":2},"end":{"line":251,"column":3}},"139":{"start":{"line":250,"column":4},"end":{"line":250,"column":17}},"140":{"start":{"line":252,"column":2},"end":{"line":254,"column":3}},"141":{"start":{"line":253,"column":4},"end":{"line":253,"column":16}},"142":{"start":{"line":255,"column":2},"end":{"line":257,"column":3}},"143":{"start":{"line":256,"column":4},"end":{"line":256,"column":16}},"144":{"start":{"line":258,"column":2},"end":{"line":260,"column":3}},"145":{"start":{"line":259,"column":4},"end":{"line":259,"column":16}},"146":{"start":{"line":261,"column":2},"end":{"line":263,"column":3}},"147":{"start":{"line":262,"column":4},"end":{"line":262,"column":16}},"148":{"start":{"line":264,"column":2},"end":{"line":264,"column":15}},"149":{"start":{"line":267,"column":2},"end":{"line":267,"column":65}},"150":{"start":{"line":270,"column":2},"end":{"line":270,"column":34}},"151":{"start":{"line":273,"column":2},"end":{"line":273,"column":34}},"152":{"start":{"line":276,"column":16},"end":{"line":276,"column":45}},"153":{"start":{"line":277,"column":2},"end":{"line":277,"column":64}},"154":{"start":{"line":280,"column":2},"end":{"line":280,"column":77}},"155":{"start":{"line":283,"column":2},"end":{"line":283,"column":63}}},"fnMap":{"0":{"name":"getAbsoluteRefTypeWithSingleString","decl":{"start":{"line":7,"column":16},"end":{"line":7,"column":50}},"loc":{"start":{"line":7,"column":68},"end":{"line":25,"column":1}},"line":7},"1":{"name":"getAbsoluteRefTypeWitString","decl":{"start":{"line":26,"column":16},"end":{"line":26,"column":43}},"loc":{"start":{"line":26,"column":55},"end":{"line":39,"column":1}},"line":26},"2":{"name":"_getAbsoluteToken","decl":{"start":{"line":40,"column":9},"end":{"line":40,"column":26}},"loc":{"start":{"line":40,"column":67},"end":{"line":55,"column":1}},"line":40},"3":{"name":"serializeRange","decl":{"start":{"line":56,"column":16},"end":{"line":56,"column":30}},"loc":{"start":{"line":56,"column":38},"end":{"line":84,"column":1}},"line":56},"4":{"name":"serializeRangeWithSheet","decl":{"start":{"line":85,"column":16},"end":{"line":85,"column":39}},"loc":{"start":{"line":85,"column":58},"end":{"line":87,"column":1}},"line":85},"5":{"name":"serializeRangeWithSpreadsheet","decl":{"start":{"line":88,"column":16},"end":{"line":88,"column":45}},"loc":{"start":{"line":88,"column":70},"end":{"line":93,"column":1}},"line":88},"6":{"name":"serializeRangeToRefString","decl":{"start":{"line":94,"column":16},"end":{"line":94,"column":41}},"loc":{"start":{"line":94,"column":57},"end":{"line":103,"column":1}},"line":94},"7":{"name":"singleReferenceToGrid","decl":{"start":{"line":104,"column":16},"end":{"line":104,"column":37}},"loc":{"start":{"line":104,"column":47},"end":{"line":113,"column":1}},"line":104},"8":{"name":"handleRefStringInfo","decl":{"start":{"line":114,"column":16},"end":{"line":114,"column":35}},"loc":{"start":{"line":114,"column":47},"end":{"line":140,"column":1}},"line":114},"9":{"name":"deserializeRangeWithSheet","decl":{"start":{"line":141,"column":16},"end":{"line":141,"column":41}},"loc":{"start":{"line":141,"column":53},"end":{"line":190,"column":1}},"line":141},"10":{"name":"isReferenceStringWithEffectiveColumn","decl":{"start":{"line":192,"column":16},"end":{"line":192,"column":52}},"loc":{"start":{"line":192,"column":64},"end":{"line":205,"column":1}},"line":192},"11":{"name":"replaceRefPrefixString","decl":{"start":{"line":206,"column":16},"end":{"line":206,"column":38}},"loc":{"start":{"line":206,"column":46},"end":{"line":221,"column":1}},"line":206},"12":{"name":"getRangeWithRefsString","decl":{"start":{"line":222,"column":16},"end":{"line":222,"column":38}},"loc":{"start":{"line":222,"column":68},"end":{"line":241,"column":1}},"line":222},"13":{"name":"(anonymous_13)","decl":{"start":{"line":231,"column":32},"end":{"line":231,"column":33}},"loc":{"start":{"line":231,"column":41},"end":{"line":239,"column":3}},"line":231},"14":{"name":"isReferenceStrings","decl":{"start":{"line":242,"column":16},"end":{"line":242,"column":34}},"loc":{"start":{"line":242,"column":46},"end":{"line":247,"column":1}},"line":242},"15":{"name":"(anonymous_15)","decl":{"start":{"line":244,"column":26},"end":{"line":244,"column":27}},"loc":{"start":{"line":244,"column":42},"end":{"line":246,"column":3}},"line":244},"16":{"name":"needsQuoting","decl":{"start":{"line":248,"column":16},"end":{"line":248,"column":28}},"loc":{"start":{"line":248,"column":35},"end":{"line":265,"column":1}},"line":248},"17":{"name":"addQuotesBothSides","decl":{"start":{"line":266,"column":16},"end":{"line":266,"column":34}},"loc":{"start":{"line":266,"column":41},"end":{"line":268,"column":1}},"line":266},"18":{"name":"quoteSheetName","decl":{"start":{"line":269,"column":9},"end":{"line":269,"column":23}},"loc":{"start":{"line":269,"column":30},"end":{"line":271,"column":1}},"line":269},"19":{"name":"unquoteSheetName","decl":{"start":{"line":272,"column":9},"end":{"line":272,"column":25}},"loc":{"start":{"line":272,"column":32},"end":{"line":274,"column":1}},"line":272},"20":{"name":"isA1Notation","decl":{"start":{"line":275,"column":9},"end":{"line":275,"column":21}},"loc":{"start":{"line":275,"column":28},"end":{"line":278,"column":1}},"line":275},"21":{"name":"isR1C1Notation","decl":{"start":{"line":279,"column":9},"end":{"line":279,"column":23}},"loc":{"start":{"line":279,"column":30},"end":{"line":281,"column":1}},"line":279},"22":{"name":"startsWithNonAlphabetic","decl":{"start":{"line":282,"column":9},"end":{"line":282,"column":32}},"loc":{"start":{"line":282,"column":39},"end":{"line":284,"column":1}},"line":282}},"branchMap":{"0":{"loc":{"start":{"line":11,"column":2},"end":{"line":14,"column":3}},"type":"if","locations":[{"start":{"line":11,"column":2},"end":{"line":14,"column":3}},{"start":{},"end":{}}],"line":11},"1":{"loc":{"start":{"line":11,"column":6},"end":{"line":11,"column":76}},"type":"binary-expr","locations":[{"start":{"line":11,"column":6},"end":{"line":11,"column":38}},{"start":{"line":11,"column":42},"end":{"line":11,"column":58}},{"start":{"line":11,"column":62},"end":{"line":11,"column":76}}],"line":11},"2":{"loc":{"start":{"line":15,"column":2},"end":{"line":17,"column":3}},"type":"if","locations":[{"start":{"line":15,"column":2},"end":{"line":17,"column":3}},{"start":{},"end":{}}],"line":15},"3":{"loc":{"start":{"line":15,"column":6},"end":{"line":15,"column":39}},"type":"binary-expr","locations":[{"start":{"line":15,"column":6},"end":{"line":15,"column":22}},{"start":{"line":15,"column":26},"end":{"line":15,"column":39}}],"line":15},"4":{"loc":{"start":{"line":18,"column":2},"end":{"line":20,"column":3}},"type":"if","locations":[{"start":{"line":18,"column":2},"end":{"line":20,"column":3}},{"start":{},"end":{}}],"line":18},"5":{"loc":{"start":{"line":21,"column":2},"end":{"line":23,"column":3}},"type":"if","locations":[{"start":{"line":21,"column":2},"end":{"line":23,"column":3}},{"start":{},"end":{}}],"line":21},"6":{"loc":{"start":{"line":28,"column":2},"end":{"line":30,"column":3}},"type":"if","locations":[{"start":{"line":28,"column":2},"end":{"line":30,"column":3}},{"start":{},"end":{}}],"line":28},"7":{"loc":{"start":{"line":32,"column":2},"end":{"line":37,"column":3}},"type":"if","locations":[{"start":{"line":32,"column":2},"end":{"line":37,"column":3}},{"start":{},"end":{}}],"line":32},"8":{"loc":{"start":{"line":40,"column":27},"end":{"line":40,"column":65}},"type":"default-arg","locations":[{"start":{"line":40,"column":45},"end":{"line":40,"column":65}}],"line":40},"9":{"loc":{"start":{"line":43,"column":2},"end":{"line":50,"column":3}},"type":"if","locations":[{"start":{"line":43,"column":2},"end":{"line":50,"column":3}},{"start":{"line":45,"column":9},"end":{"line":50,"column":3}}],"line":43},"10":{"loc":{"start":{"line":45,"column":9},"end":{"line":50,"column":3}},"type":"if","locations":[{"start":{"line":45,"column":9},"end":{"line":50,"column":3}},{"start":{"line":47,"column":9},"end":{"line":50,"column":3}}],"line":45},"11":{"loc":{"start":{"line":47,"column":9},"end":{"line":50,"column":3}},"type":"if","locations":[{"start":{"line":47,"column":9},"end":{"line":50,"column":3}},{"start":{},"end":{}}],"line":47},"12":{"loc":{"start":{"line":64,"column":4},"end":{"line":64,"column":33}},"type":"default-arg","locations":[{"start":{"line":64,"column":16},"end":{"line":64,"column":33}}],"line":64},"13":{"loc":{"start":{"line":68,"column":2},"end":{"line":72,"column":3}},"type":"if","locations":[{"start":{"line":68,"column":2},"end":{"line":72,"column":3}},{"start":{},"end":{}}],"line":68},"14":{"loc":{"start":{"line":68,"column":6},"end":{"line":68,"column":66}},"type":"binary-expr","locations":[{"start":{"line":68,"column":6},"end":{"line":68,"column":34}},{"start":{"line":68,"column":38},"end":{"line":68,"column":66}}],"line":68},"15":{"loc":{"start":{"line":73,"column":2},"end":{"line":77,"column":3}},"type":"if","locations":[{"start":{"line":73,"column":2},"end":{"line":77,"column":3}},{"start":{},"end":{}}],"line":73},"16":{"loc":{"start":{"line":80,"column":2},"end":{"line":82,"column":3}},"type":"if","locations":[{"start":{"line":80,"column":2},"end":{"line":82,"column":3}},{"start":{},"end":{}}],"line":80},"17":{"loc":{"start":{"line":89,"column":2},"end":{"line":91,"column":3}},"type":"if","locations":[{"start":{"line":89,"column":2},"end":{"line":91,"column":3}},{"start":{},"end":{}}],"line":89},"18":{"loc":{"start":{"line":89,"column":6},"end":{"line":89,"column":51}},"type":"binary-expr","locations":[{"start":{"line":89,"column":6},"end":{"line":89,"column":24}},{"start":{"line":89,"column":28},"end":{"line":89,"column":51}}],"line":89},"19":{"loc":{"start":{"line":96,"column":2},"end":{"line":98,"column":3}},"type":"if","locations":[{"start":{"line":96,"column":2},"end":{"line":98,"column":3}},{"start":{},"end":{}}],"line":96},"20":{"loc":{"start":{"line":96,"column":6},"end":{"line":96,"column":86}},"type":"binary-expr","locations":[{"start":{"line":96,"column":6},"end":{"line":96,"column":20}},{"start":{"line":96,"column":24},"end":{"line":96,"column":41}},{"start":{"line":96,"column":45},"end":{"line":96,"column":62}},{"start":{"line":96,"column":66},"end":{"line":96,"column":86}}],"line":96},"21":{"loc":{"start":{"line":99,"column":2},"end":{"line":101,"column":3}},"type":"if","locations":[{"start":{"line":99,"column":2},"end":{"line":101,"column":3}},{"start":{},"end":{}}],"line":99},"22":{"loc":{"start":{"line":99,"column":6},"end":{"line":99,"column":47}},"type":"binary-expr","locations":[{"start":{"line":99,"column":6},"end":{"line":99,"column":23}},{"start":{"line":99,"column":27},"end":{"line":99,"column":47}}],"line":99},"23":{"loc":{"start":{"line":117,"column":2},"end":{"line":121,"column":3}},"type":"if","locations":[{"start":{"line":117,"column":2},"end":{"line":121,"column":3}},{"start":{},"end":{}}],"line":117},"24":{"loc":{"start":{"line":125,"column":2},"end":{"line":134,"column":3}},"type":"if","locations":[{"start":{"line":125,"column":2},"end":{"line":134,"column":3}},{"start":{"line":132,"column":9},"end":{"line":134,"column":3}}],"line":125},"25":{"loc":{"start":{"line":127,"column":4},"end":{"line":129,"column":5}},"type":"if","locations":[{"start":{"line":127,"column":4},"end":{"line":129,"column":5}},{"start":{},"end":{}}],"line":127},"26":{"loc":{"start":{"line":127,"column":8},"end":{"line":127,"column":71}},"type":"binary-expr","locations":[{"start":{"line":127,"column":8},"end":{"line":127,"column":28}},{"start":{"line":127,"column":32},"end":{"line":127,"column":71}}],"line":127},"27":{"loc":{"start":{"line":144,"column":2},"end":{"line":162,"column":3}},"type":"if","locations":[{"start":{"line":144,"column":2},"end":{"line":162,"column":3}},{"start":{},"end":{}}],"line":144},"28":{"loc":{"start":{"line":167,"column":19},"end":{"line":167,"column":76}},"type":"cond-expr","locations":[{"start":{"line":167,"column":49},"end":{"line":167,"column":60}},{"start":{"line":167,"column":63},"end":{"line":167,"column":76}}],"line":167},"29":{"loc":{"start":{"line":168,"column":22},"end":{"line":168,"column":91}},"type":"cond-expr","locations":[{"start":{"line":168,"column":58},"end":{"line":168,"column":72}},{"start":{"line":168,"column":75},"end":{"line":168,"column":91}}],"line":168},"30":{"loc":{"start":{"line":169,"column":17},"end":{"line":169,"column":74}},"type":"cond-expr","locations":[{"start":{"line":169,"column":47},"end":{"line":169,"column":60}},{"start":{"line":169,"column":63},"end":{"line":169,"column":74}}],"line":169},"31":{"loc":{"start":{"line":170,"column":20},"end":{"line":170,"column":89}},"type":"cond-expr","locations":[{"start":{"line":170,"column":56},"end":{"line":170,"column":72}},{"start":{"line":170,"column":75},"end":{"line":170,"column":89}}],"line":170},"32":{"loc":{"start":{"line":172,"column":2},"end":{"line":176,"column":3}},"type":"if","locations":[{"start":{"line":172,"column":2},"end":{"line":176,"column":3}},{"start":{"line":174,"column":9},"end":{"line":176,"column":3}}],"line":172},"33":{"loc":{"start":{"line":172,"column":6},"end":{"line":172,"column":52}},"type":"binary-expr","locations":[{"start":{"line":172,"column":6},"end":{"line":172,"column":28}},{"start":{"line":172,"column":32},"end":{"line":172,"column":52}}],"line":172},"34":{"loc":{"start":{"line":174,"column":9},"end":{"line":176,"column":3}},"type":"if","locations":[{"start":{"line":174,"column":9},"end":{"line":176,"column":3}},{"start":{},"end":{}}],"line":174},"35":{"loc":{"start":{"line":174,"column":13},"end":{"line":174,"column":65}},"type":"binary-expr","locations":[{"start":{"line":174,"column":13},"end":{"line":174,"column":38}},{"start":{"line":174,"column":42},"end":{"line":174,"column":65}}],"line":174},"36":{"loc":{"start":{"line":194,"column":2},"end":{"line":196,"column":3}},"type":"if","locations":[{"start":{"line":194,"column":2},"end":{"line":196,"column":3}},{"start":{},"end":{}}],"line":194},"37":{"loc":{"start":{"line":197,"column":2},"end":{"line":199,"column":3}},"type":"if","locations":[{"start":{"line":197,"column":2},"end":{"line":199,"column":3}},{"start":{},"end":{}}],"line":197},"38":{"loc":{"start":{"line":201,"column":2},"end":{"line":203,"column":3}},"type":"if","locations":[{"start":{"line":201,"column":2},"end":{"line":203,"column":3}},{"start":{},"end":{}}],"line":201},"39":{"loc":{"start":{"line":211,"column":4},"end":{"line":218,"column":5}},"type":"if","locations":[{"start":{"line":211,"column":4},"end":{"line":218,"column":5}},{"start":{"line":213,"column":11},"end":{"line":218,"column":5}}],"line":211},"40":{"loc":{"start":{"line":211,"column":8},"end":{"line":211,"column":44}},"type":"binary-expr","locations":[{"start":{"line":211,"column":8},"end":{"line":211,"column":28}},{"start":{"line":211,"column":32},"end":{"line":211,"column":44}}],"line":211},"41":{"loc":{"start":{"line":213,"column":11},"end":{"line":218,"column":5}},"type":"if","locations":[{"start":{"line":213,"column":11},"end":{"line":218,"column":5}},{"start":{"line":215,"column":11},"end":{"line":218,"column":5}}],"line":213},"42":{"loc":{"start":{"line":213,"column":15},"end":{"line":213,"column":115}},"type":"binary-expr","locations":[{"start":{"line":213,"column":15},"end":{"line":213,"column":27}},{"start":{"line":213,"column":32},"end":{"line":213,"column":55}},{"start":{"line":213,"column":59},"end":{"line":213,"column":85}},{"start":{"line":213,"column":89},"end":{"line":213,"column":114}}],"line":213},"43":{"loc":{"start":{"line":223,"column":21},"end":{"line":223,"column":48}},"type":"binary-expr","locations":[{"start":{"line":223,"column":21},"end":{"line":223,"column":42}},{"start":{"line":223,"column":46},"end":{"line":223,"column":48}}],"line":223},"44":{"loc":{"start":{"line":224,"column":2},"end":{"line":226,"column":3}},"type":"if","locations":[{"start":{"line":224,"column":2},"end":{"line":226,"column":3}},{"start":{},"end":{}}],"line":224},"45":{"loc":{"start":{"line":224,"column":6},"end":{"line":224,"column":49}},"type":"binary-expr","locations":[{"start":{"line":224,"column":6},"end":{"line":224,"column":22}},{"start":{"line":224,"column":26},"end":{"line":224,"column":49}}],"line":224},"46":{"loc":{"start":{"line":228,"column":2},"end":{"line":230,"column":3}},"type":"if","locations":[{"start":{"line":228,"column":2},"end":{"line":230,"column":3}},{"start":{},"end":{}}],"line":228},"47":{"loc":{"start":{"line":243,"column":21},"end":{"line":243,"column":48}},"type":"binary-expr","locations":[{"start":{"line":243,"column":21},"end":{"line":243,"column":42}},{"start":{"line":243,"column":46},"end":{"line":243,"column":48}}],"line":243},"48":{"loc":{"start":{"line":249,"column":2},"end":{"line":251,"column":3}},"type":"if","locations":[{"start":{"line":249,"column":2},"end":{"line":251,"column":3}},{"start":{},"end":{}}],"line":249},"49":{"loc":{"start":{"line":252,"column":2},"end":{"line":254,"column":3}},"type":"if","locations":[{"start":{"line":252,"column":2},"end":{"line":254,"column":3}},{"start":{},"end":{}}],"line":252},"50":{"loc":{"start":{"line":255,"column":2},"end":{"line":257,"column":3}},"type":"if","locations":[{"start":{"line":255,"column":2},"end":{"line":257,"column":3}},{"start":{},"end":{}}],"line":255},"51":{"loc":{"start":{"line":255,"column":6},"end":{"line":255,"column":48}},"type":"binary-expr","locations":[{"start":{"line":255,"column":6},"end":{"line":255,"column":24}},{"start":{"line":255,"column":28},"end":{"line":255,"column":48}}],"line":255},"52":{"loc":{"start":{"line":258,"column":2},"end":{"line":260,"column":3}},"type":"if","locations":[{"start":{"line":258,"column":2},"end":{"line":260,"column":3}},{"start":{},"end":{}}],"line":258},"53":{"loc":{"start":{"line":261,"column":2},"end":{"line":263,"column":3}},"type":"if","locations":[{"start":{"line":261,"column":2},"end":{"line":263,"column":3}},{"start":{},"end":{}}],"line":261},"54":{"loc":{"start":{"line":267,"column":9},"end":{"line":267,"column":64}},"type":"cond-expr","locations":[{"start":{"line":267,"column":30},"end":{"line":267,"column":57}},{"start":{"line":267,"column":60},"end":{"line":267,"column":64}}],"line":267},"55":{"loc":{"start":{"line":277,"column":9},"end":{"line":277,"column":63}},"type":"binary-expr","locations":[{"start":{"line":277,"column":9},"end":{"line":277,"column":45}},{"start":{"line":277,"column":49},"end":{"line":277,"column":63}}],"line":277}},"s":{"0":1,"1":1,"2":202,"3":202,"4":202,"5":202,"6":9,"7":9,"8":202,"9":8,"10":194,"11":17,"12":177,"13":21,"14":156,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":96,"23":96,"24":96,"25":22,"26":74,"27":21,"28":53,"29":36,"30":36,"31":96,"32":48,"33":48,"34":48,"35":48,"36":2,"37":2,"38":2,"39":46,"40":3,"41":3,"42":3,"43":43,"44":43,"45":43,"46":7,"47":36,"48":9,"49":0,"50":0,"51":0,"52":48,"53":48,"54":0,"55":48,"56":9,"57":39,"58":202,"59":202,"60":202,"61":202,"62":137,"63":137,"64":137,"65":6,"66":6,"67":6,"68":137,"69":137,"70":137,"71":137,"72":10,"73":10,"74":8,"75":10,"76":10,"77":127,"78":137,"79":137,"80":137,"81":137,"82":72,"83":72,"84":72,"85":72,"86":72,"87":72,"88":65,"89":65,"90":65,"91":65,"92":65,"93":65,"94":65,"95":65,"96":65,"97":65,"98":9,"99":56,"100":6,"101":65,"102":1,"103":103,"104":103,"105":0,"106":103,"107":0,"108":103,"109":103,"110":0,"111":103,"112":218,"113":218,"114":218,"115":218,"116":218,"117":909,"118":909,"119":0,"120":909,"121":7,"122":902,"123":902,"124":218,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":9,"139":0,"140":9,"141":5,"142":4,"143":0,"144":4,"145":0,"146":4,"147":0,"148":4,"149":9,"150":5,"151":16,"152":4,"153":4,"154":4,"155":4},"f":{"0":202,"1":0,"2":96,"3":48,"4":9,"5":0,"6":48,"7":202,"8":137,"9":137,"10":103,"11":218,"12":0,"13":0,"14":0,"15":0,"16":9,"17":9,"18":5,"19":16,"20":4,"21":4,"22":4},"b":{"0":[9,193],"1":[202,151,9],"2":[8,194],"3":[202,25],"4":[17,177],"5":[21,156],"6":[0,0],"7":[0,0],"8":[0],"9":[22,74],"10":[21,53],"11":[36,17],"12":[7],"13":[2,46],"14":[48,46],"15":[3,43],"16":[7,36],"17":[0,0],"18":[0,0],"19":[0,48],"20":[48,48,0,0],"21":[9,39],"22":[48,48],"23":[6,131],"24":[10,127],"25":[8,2],"26":[10,8],"27":[72,65],"28":[0,65],"29":[0,65],"30":[0,65],"31":[0,65],"32":[9,56],"33":[65,9],"34":[6,50],"35":[56,6],"36":[0,103],"37":[0,103],"38":[0,103],"39":[0,909],"40":[909,1],"41":[7,902],"42":[909,222,220,215],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,9],"49":[5,4],"50":[0,4],"51":[4,4],"52":[0,4],"53":[0,4],"54":[5,4],"55":[4,0]},"inputSourceMap":{"version":3,"sources":["/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/engine/utils/reference.ts"],"sourcesContent":["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IRange, IUnitRangeName, IUnitRangeWithName } from '@univerjs/core';\nimport { AbsoluteRefType, RANGE_TYPE, Tools } from '@univerjs/core';\n\nimport { includeFormulaLexerToken } from '../../basics/match-token';\nimport { isReferenceString, UNIT_NAME_REGEX_PRECOMPILING } from '../../basics/regex';\nimport { prefixToken, SPACE_TOKEN } from '../../basics/token';\n\nconst $ROW_REGEX = /[^0-9]/g;\nconst $COLUMN_REGEX = /[^A-Za-z]/g;\n\nexport interface IAbsoluteRefTypeForRange {\n    startAbsoluteRefType: AbsoluteRefType;\n    endAbsoluteRefType?: AbsoluteRefType;\n}\n\n/**\n *\n * @param singleRefString for example A1 or B10,  not A1:B10\n */\nexport function getAbsoluteRefTypeWithSingleString(singleRefString: string) {\n    let isColumnAbsolute = singleRefString[0] === '$';\n    const remainChar = singleRefString.substring(1);\n\n    let isRowAbsolute = remainChar.indexOf('$') > -1;\n\n    if (Tools.isStringNumber(remainChar) && isColumnAbsolute && !isRowAbsolute) {\n        isColumnAbsolute = false;\n        isRowAbsolute = true;\n    }\n\n    if (isColumnAbsolute && isRowAbsolute) {\n        return AbsoluteRefType.ALL;\n    }\n    if (isColumnAbsolute) {\n        return AbsoluteRefType.COLUMN;\n    }\n    if (isRowAbsolute) {\n        return AbsoluteRefType.ROW;\n    }\n\n    return AbsoluteRefType.NONE;\n}\n\n/**\n *\n * @param refString for example A1:B10\n */\nexport function getAbsoluteRefTypeWitString(refString: string): IAbsoluteRefTypeForRange {\n    const sheetArray = refString.split('!');\n\n    if (sheetArray.length > 1) {\n        refString = sheetArray[sheetArray.length - 1];\n    }\n\n    const refArray = refString.split(':');\n\n    if (refArray.length > 1) {\n        return {\n            startAbsoluteRefType: getAbsoluteRefTypeWithSingleString(refArray[0]),\n            endAbsoluteRefType: getAbsoluteRefTypeWithSingleString(refArray[1]),\n        };\n    }\n\n    return { startAbsoluteRefType: getAbsoluteRefTypeWithSingleString(refArray[0]) };\n}\n\nfunction _getAbsoluteToken(absoluteRefType = AbsoluteRefType.NONE) {\n    let rowAbsoluteString = '';\n\n    let columnAbsoluteString = '';\n\n    if (absoluteRefType === AbsoluteRefType.ROW) {\n        rowAbsoluteString = '$';\n    } else if (absoluteRefType === AbsoluteRefType.COLUMN) {\n        columnAbsoluteString = '$';\n    } else if (absoluteRefType === AbsoluteRefType.ALL) {\n        rowAbsoluteString = '$';\n        columnAbsoluteString = '$';\n    }\n\n    return {\n        rowAbsoluteString,\n        columnAbsoluteString,\n    };\n}\n\n/**\n * Serialize an `IRange` into a string.\n * @param range The `IRange` to be serialized\n */\nexport function serializeRange(range: IRange): string {\n    const {\n        startColumn,\n        startRow,\n        endColumn,\n        endRow,\n        startAbsoluteRefType,\n        endAbsoluteRefType,\n        rangeType = RANGE_TYPE.NORMAL,\n    } = range;\n\n    const start = _getAbsoluteToken(startAbsoluteRefType);\n\n    const end = _getAbsoluteToken(endAbsoluteRefType);\n\n    if (rangeType === RANGE_TYPE.ROW || rangeType === RANGE_TYPE.ALL) {\n        const startStr = `${start.rowAbsoluteString}${startRow + 1}`;\n\n        const endStr = `${end.rowAbsoluteString}${endRow + 1}`;\n\n        return `${startStr}:${endStr}`;\n    }\n    if (rangeType === RANGE_TYPE.COLUMN) {\n        const startStr = `${start.columnAbsoluteString}${Tools.chatAtABC(startColumn)}`;\n\n        const endStr = `${end.columnAbsoluteString}${Tools.chatAtABC(endColumn)}`;\n\n        return `${startStr}:${endStr}`;\n    }\n\n    const startStr = `${start.columnAbsoluteString}${Tools.chatAtABC(startColumn)}${start.rowAbsoluteString}${\n        startRow + 1\n    }`;\n\n    const endStr = `${end.columnAbsoluteString}${Tools.chatAtABC(endColumn)}${end.rowAbsoluteString}${endRow + 1}`;\n\n    if (startStr === endStr) {\n        return startStr;\n    }\n\n    return `${startStr}:${endStr}`;\n}\n\n/**\n * Serialize an `IRange` and a sheetID into a string.\n * @param sheetName\n * @param range\n */\nexport function serializeRangeWithSheet(sheetName: string, range: IRange): string {\n    return `${addQuotesBothSides(sheetName)}!${serializeRange(range)}`;\n}\n\n/**\n * Serialize an `IRange` and a sheetID into a string.\n * @param unit unitId or unitName\n * @param sheetName\n * @param range\n */\nexport function serializeRangeWithSpreadsheet(unit: string, sheetName: string, range: IRange): string {\n    if (needsQuoting(unit) || needsQuoting(sheetName)) {\n        return `'[${quoteSheetName(unit)}]${quoteSheetName(sheetName)}'!${serializeRange(range)}`;\n    }\n\n    return `[${unit}]${sheetName}!${serializeRange(range)}`;\n}\n\nexport function serializeRangeToRefString(gridRangeName: IUnitRangeName) {\n    const { unitId, sheetName, range } = gridRangeName;\n\n    if (unitId != null && unitId.length > 0 && sheetName != null && sheetName.length > 0) {\n        return serializeRangeWithSpreadsheet(unitId, sheetName, range);\n    }\n\n    if (sheetName != null && sheetName.length > 0) {\n        return serializeRangeWithSheet(sheetName, range);\n    }\n\n    return serializeRange(range);\n}\n\nexport function singleReferenceToGrid(refBody: string) {\n    const row = Number.parseInt(refBody.replace($ROW_REGEX, '')) - 1;\n    const column = Tools.ABCatNum(refBody.replace($COLUMN_REGEX, ''));\n\n    const absoluteRefType = getAbsoluteRefTypeWithSingleString(refBody);\n\n    return {\n        row,\n        column,\n        absoluteRefType,\n    };\n}\n\nexport function handleRefStringInfo(refString: string) {\n    const unitIdMatch = UNIT_NAME_REGEX_PRECOMPILING.exec(refString);\n    let unitId = '';\n\n    if (unitIdMatch != null) {\n        unitId = unitIdMatch[0].trim();\n        unitId = unquoteSheetName(unitId.slice(1, unitId.length - 1));\n        refString = refString.replace(UNIT_NAME_REGEX_PRECOMPILING, '');\n    }\n\n    const sheetNameIndex = refString.indexOf('!');\n    let sheetName: string = '';\n    let refBody: string = '';\n    if (sheetNameIndex > -1) {\n        sheetName = refString.substring(0, sheetNameIndex);\n        if (sheetName[0] === \"'\" && sheetName[sheetName.length - 1] === \"'\") {\n            sheetName = sheetName.substring(1, sheetName.length - 1);\n        }\n\n        sheetName = unquoteSheetName(sheetName);\n        refBody = refString.substring(sheetNameIndex + 1);\n    } else {\n        refBody = refString;\n    }\n\n    return {\n        refBody,\n        sheetName,\n        unitId,\n    };\n}\n\nexport function deserializeRangeWithSheet(refString: string): IUnitRangeName {\n    const { refBody, sheetName, unitId } = handleRefStringInfo(refString);\n\n    const colonIndex = refBody.indexOf(':');\n\n    if (colonIndex === -1) {\n        const grid = singleReferenceToGrid(refBody);\n        const row = grid.row;\n        const column = grid.column;\n        const absoluteRefType = grid.absoluteRefType;\n        const range: IRange = {\n            startRow: row,\n            startColumn: column,\n            endRow: row,\n            endColumn: column,\n            startAbsoluteRefType: absoluteRefType,\n            endAbsoluteRefType: absoluteRefType,\n        };\n\n        return {\n            unitId,\n            sheetName,\n            range,\n        };\n    }\n\n    const refStartString = refBody.substring(0, colonIndex);\n    const refEndString = refBody.substring(colonIndex + 1);\n\n    const startGrid = singleReferenceToGrid(refStartString);\n\n    const endGrid = singleReferenceToGrid(refEndString);\n\n    // range A1:B10 === B10:A1\n    const startRow = startGrid.row > endGrid.row ? endGrid.row : startGrid.row;\n    const startColumn = startGrid.column > endGrid.column ? endGrid.column : startGrid.column;\n    const endRow = startGrid.row > endGrid.row ? startGrid.row : endGrid.row;\n    const endColumn = startGrid.column > endGrid.column ? startGrid.column : endGrid.column;\n\n    let rangeType = RANGE_TYPE.NORMAL;\n    if (Number.isNaN(startRow) && Number.isNaN(endRow)) {\n        rangeType = RANGE_TYPE.COLUMN;\n    } else if (Number.isNaN(startColumn) && Number.isNaN(endColumn)) {\n        rangeType = RANGE_TYPE.ROW;\n    }\n\n    return {\n        unitId,\n        sheetName,\n        range: {\n            startRow,\n            startColumn,\n            endRow,\n            endColumn,\n\n            startAbsoluteRefType: startGrid.absoluteRefType,\n\n            endAbsoluteRefType: endGrid.absoluteRefType,\n\n            rangeType,\n        },\n    };\n}\n\n/**\n * LOG10 is a formula, google sheet support it on Log10:L\n * EXCEL support it on Log10:Log10\n */\nconst EXCEPTION_REF_STRINGS = ['LOG10'];\n\nexport function isReferenceStringWithEffectiveColumn(refString: string) {\n    const noPrefixRefString = replaceRefPrefixString(refString);\n\n    if (!isReferenceString(noPrefixRefString)) {\n        return false;\n    }\n\n    if (EXCEPTION_REF_STRINGS.includes(noPrefixRefString.toUpperCase().trim())) {\n        return false;\n    }\n\n    const { range } = deserializeRangeWithSheet(noPrefixRefString);\n\n    /**\n     * As of the latest information I have, which is up to the end of 2023,\n     * the maximum limit for columns in Excel is 16,384.\n     * This standard applies to Excel 2007 and later versions,\n     * where each worksheet can support columns ranging from A to XFD.\n     * Therefore, the symbol for the maximum column is XFD.\n     */\n    if (range.endColumn >= 16384) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function replaceRefPrefixString(token: string) {\n    const tokenArray = [];\n    let isNotPreFix = false;\n    for (let i = 0, len = token.length; i < len; i++) {\n        const char = token[i];\n        if (char === SPACE_TOKEN && !isNotPreFix) {\n            tokenArray.push(char);\n        } else if (!isNotPreFix && (char === prefixToken.AT || char === prefixToken.MINUS || char === prefixToken.PLUS)) {\n            continue;\n        } else {\n            tokenArray.push(char);\n            isNotPreFix = true;\n        }\n    }\n    return tokenArray.join('');\n}\n\n/**\n * implement getSheetIdByName\n * function getSheetIdByName(name: string) {\n        return univerInstanceService.getCurrentUnitForType<Workbook>(UniverInstanceType.UNIVER_SHEET)?.getSheetBySheetName(name)?.getSheetId() || '';\n    }\n */\nexport function getRangeWithRefsString(refString: string, getSheetIdByName: (name: string) => string): IUnitRangeWithName[] {\n    const valueArray = refString?.split(',') || [];\n\n    if (refString === '' || valueArray.length === 0) {\n        return [];\n    }\n\n    const result = isReferenceStrings(refString);\n\n    if (!result) {\n        return [];\n    }\n\n    const ranges = valueArray.map((ref) => {\n        const unitRange = deserializeRangeWithSheet(ref);\n        return {\n            unitId: unitRange.unitId,\n            sheetId: getSheetIdByName(unitRange.sheetName),\n            range: unitRange.range,\n            sheetName: unitRange.sheetName,\n        };\n    });\n\n    return ranges;\n}\n\nexport function isReferenceStrings(refString: string) {\n    const valueArray = refString?.split(',') || [];\n    return valueArray.every((refString) => {\n        return isReferenceStringWithEffectiveColumn(refString.trim());\n    });\n}\n\n/**\n * Determine whether the sheet name needs to be wrapped in quotes\n * Excel will quote the worksheet name if any of the following is true:\n *  - It contains any space or punctuation characters, such as  ()$,;-{}\"'（）【】“”‘’%… and many more\n *  - It is a valid cell reference in A1 notation, e.g. B1048576 is quoted\n *  - It is a valid cell reference in R1C1 notation, e.g. RC, RC2, R5C, R-4C, RC-8, R, C\n *  - It starts with a non-letter, e.g. 99, 1.5, 12a, 💩a\n *  - Excel will not quote worksheet names if they only contain non-punctuation, non-letter characters in non-initial positions. For example, a💩 remains unquoted.*\n *  In addition, if a worksheet name contains single quotes, these will be doubled up within the name itself. For example, the sheet name a'b'c becomes 'a''b''c'.\n *\n *  reference https://stackoverflow.com/questions/41677779/when-does-excel-surround-sheet-names-with-single-quotes-in-workbook-xml-or-othe\n *\n * @param name Sheet name\n * @returns Result\n */\nexport function needsQuoting(name: string) {\n    if (name.length === 0) {\n        return false;\n    }\n\n    if (includeFormulaLexerToken(name)) {\n        return true;\n    }\n\n    // Check if the name is a valid cell reference in A1 or R1C1 notation\n    if (isA1Notation(name) || isR1C1Notation(name)) {\n        return true;\n    }\n\n    // Check if the name starts with a non-letter\n    if (startsWithNonAlphabetic(name)) {\n        return true;\n    }\n\n    // Check for spaces, punctuation and special characters\n\n    if (/[\\s!$%^&*()+\\-=\\[\\]{};':\"\\\\|,.<>\\/?（）]/.test(name)) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Add quotes to the sheet name\n */\nexport function addQuotesBothSides(name: string) {\n    return needsQuoting(name) ? `'${quoteSheetName(name)}'` : name;\n}\n\n/**\n * Add a single quote before the single quote\n * @param name\n * @returns Quoted name\n */\nfunction quoteSheetName(name: string) {\n    return name.replace(/'/g, \"''\");\n}\n\n/**\n * Replace double single quotes with single quotes\n * @param name\n * @returns Unquoted name\n */\nfunction unquoteSheetName(name: string) {\n    return name.replace(/''/g, \"'\");\n}\n\nfunction isA1Notation(name: string) {\n    const match = name.match(/[1-9][0-9]{0,6}/);\n    // Excel has a limit on the number of rows and columns: targetRow > 1048576 || targetColumn > 16384, Univer has no limit\n    return /^[A-Z]+[1-9][0-9]{0,6}$/.test(name) && match !== null;\n}\n\nfunction isR1C1Notation(name: string) {\n    return /^(R(-?[0-9]+)?C(-?[0-9]+)?|C(-?[0-9]+)?|R(-?[0-9]+)?)$/.test(name);\n}\n\nfunction startsWithNonAlphabetic(name: string) {\n    // Check if the first character is not a letter (including non-English characters)\n    return !/^\\p{Letter}/u.test(name.charAt(0));\n}\n"],"mappings":"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","names":["startStr","endStr","refString"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2530ac062811e9380eb31e8fe41302ea8e2bc104"},"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/engine/utils/reference-cache.ts":{"path":"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/engine/utils/reference-cache.ts","statementMap":{"0":{"start":{"line":3,"column":30},"end":{"line":3,"column":52}},"1":{"start":{"line":5,"column":19},"end":{"line":5,"column":55}},"2":{"start":{"line":6,"column":2},"end":{"line":8,"column":3}},"3":{"start":{"line":7,"column":4},"end":{"line":7,"column":20}},"4":{"start":{"line":9,"column":17},"end":{"line":9,"column":53}},"5":{"start":{"line":10,"column":2},"end":{"line":10,"column":47}},"6":{"start":{"line":11,"column":2},"end":{"line":11,"column":46}},"7":{"start":{"line":15,"column":2},"end":{"line":15,"column":32}}},"fnMap":{"0":{"name":"deserializeRangeWithSheetWithCache","decl":{"start":{"line":4,"column":16},"end":{"line":4,"column":50}},"loc":{"start":{"line":4,"column":62},"end":{"line":13,"column":1}},"line":4},"1":{"name":"clearReferenceToRangeCache","decl":{"start":{"line":14,"column":16},"end":{"line":14,"column":42}},"loc":{"start":{"line":14,"column":45},"end":{"line":16,"column":1}},"line":14}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":2},"end":{"line":8,"column":3}},"type":"if","locations":[{"start":{"line":6,"column":2},"end":{"line":8,"column":3}},{"start":{},"end":{}}],"line":6}},"s":{"0":1,"1":48,"2":48,"3":31,"4":17,"5":17,"6":17,"7":0},"f":{"0":48,"1":0},"b":{"0":[31,17]},"inputSourceMap":{"version":3,"sources":["/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/engine/utils/reference-cache.ts"],"sourcesContent":["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IUnitRangeName } from '@univerjs/core';\nimport { FormulaAstLRU } from '../../basics/cache-lru';\nimport { deserializeRangeWithSheet } from './reference';\n\nconst referenceToRangeCache = new FormulaAstLRU<IUnitRangeName>(100000);\nexport function deserializeRangeWithSheetWithCache(refString: string): IUnitRangeName {\n    const refCache = referenceToRangeCache.get(refString);\n    if (refCache) {\n        return refCache;\n    }\n\n    const result = deserializeRangeWithSheet(refString);\n\n    referenceToRangeCache.set(refString, result);\n\n    return deserializeRangeWithSheet(refString); ;\n}\n\nexport function clearReferenceToRangeCache() {\n    referenceToRangeCache.clear();\n}\n"],"mappings":"AAiBA,SAAS,qBAAqB;AAC9B,SAAS,iCAAiC;AAE1C,MAAM,wBAAwB,IAAI,cAA8B,GAAM;AAC/D,gBAAS,mCAAmC,WAAmC;AAClF,QAAM,WAAW,sBAAsB,IAAI,SAAS;AACpD,MAAI,UAAU;AACV,WAAO;AAAA,EACX;AAEA,QAAM,SAAS,0BAA0B,SAAS;AAElD,wBAAsB,IAAI,WAAW,MAAM;AAE3C,SAAO,0BAA0B,SAAS;AAAG;AACjD;AAEO,gBAAS,6BAA6B;AACzC,wBAAsB,MAAM;AAChC;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"073d228c379098520908b47fa0b7293bf8856d4f"},"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/engine/utils/sequence.ts":{"path":"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/engine/utils/sequence.ts","statementMap":{"0":{"start":{"line":1,"column":46},"end":{"line":10,"column":26}},"1":{"start":{"line":2,"column":2},"end":{"line":2,"column":64}},"2":{"start":{"line":3,"column":2},"end":{"line":3,"column":64}},"3":{"start":{"line":4,"column":2},"end":{"line":4,"column":64}},"4":{"start":{"line":5,"column":2},"end":{"line":5,"column":68}},"5":{"start":{"line":6,"column":2},"end":{"line":6,"column":70}},"6":{"start":{"line":7,"column":2},"end":{"line":7,"column":62}},"7":{"start":{"line":8,"column":2},"end":{"line":8,"column":76}},"8":{"start":{"line":9,"column":2},"end":{"line":9,"column":27}},"9":{"start":{"line":12,"column":23},"end":{"line":12,"column":25}},"10":{"start":{"line":13,"column":2},"end":{"line":19,"column":3}},"11":{"start":{"line":14,"column":4},"end":{"line":18,"column":5}},"12":{"start":{"line":15,"column":6},"end":{"line":15,"column":29}},"13":{"start":{"line":17,"column":6},"end":{"line":17,"column":35}},"14":{"start":{"line":20,"column":2},"end":{"line":20,"column":24}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":1,"column":47},"end":{"line":1,"column":48}},"loc":{"start":{"line":1,"column":70},"end":{"line":10,"column":1}},"line":1},"1":{"name":"generateStringWithSequence","decl":{"start":{"line":11,"column":16},"end":{"line":11,"column":42}},"loc":{"start":{"line":11,"column":61},"end":{"line":21,"column":1}},"line":11}},"branchMap":{"0":{"loc":{"start":{"line":10,"column":3},"end":{"line":10,"column":25}},"type":"binary-expr","locations":[{"start":{"line":10,"column":3},"end":{"line":10,"column":19}},{"start":{"line":10,"column":23},"end":{"line":10,"column":25}}],"line":10},"1":{"loc":{"start":{"line":14,"column":4},"end":{"line":18,"column":5}},"type":"if","locations":[{"start":{"line":14,"column":4},"end":{"line":18,"column":5}},{"start":{"line":16,"column":11},"end":{"line":18,"column":5}}],"line":14}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":24,"10":24,"11":153,"12":79,"13":74,"14":24},"f":{"0":1,"1":24},"b":{"0":[1,1],"1":[79,74]},"inputSourceMap":{"version":3,"sources":["/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/engine/utils/sequence.ts"],"sourcesContent":["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { LexerNode } from '../analysis/lexer-node';\n\nexport enum sequenceNodeType {\n    NORMAL,\n    NUMBER,\n    STRING,\n    FUNCTION,\n    REFERENCE,\n    ARRAY,\n    DEFINED_NAME,\n}\n\nexport interface ISequenceNode {\n    nodeType: sequenceNodeType;\n    token: string;\n    startIndex: number;\n    endIndex: number;\n}\n\nexport interface ISequenceArray {\n    segment: string;\n    currentString: string;\n    cur: number;\n    currentLexerNode: LexerNode;\n}\n\n/**\n * Deserialize Sequence to text.\n * @param newSequenceNodes\n * @returns\n */\nexport function generateStringWithSequence(newSequenceNodes: Array<string | ISequenceNode>) {\n    let sequenceString = '';\n    for (const node of newSequenceNodes) {\n        if (typeof node === 'string') {\n            sequenceString += node;\n        } else {\n            sequenceString += node.token;\n        }\n    }\n    return sequenceString;\n}\n"],"mappings":"AAkBO,WAAK,mBAAL,kBAAKA,sBAAL;AACH,EAAAA,oCAAA;AACA,EAAAA,oCAAA;AACA,EAAAA,oCAAA;AACA,EAAAA,oCAAA;AACA,EAAAA,oCAAA;AACA,EAAAA,oCAAA;AACA,EAAAA,oCAAA;AAPQ,SAAAA;AAAA,GAAA;AA6BL,gBAAS,2BAA2B,kBAAiD;AACxF,MAAI,iBAAiB;AACrB,aAAW,QAAQ,kBAAkB;AACjC,QAAI,OAAO,SAAS,UAAU;AAC1B,wBAAkB;AAAA,IACtB,OAAO;AACH,wBAAkB,KAAK;AAAA,IAC3B;AAAA,EACJ;AACA,SAAO;AACX;","names":["sequenceNodeType"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2475ab13341c33fd91f2c502c3db8a015d702160"},"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/engine/analysis/lexer-node.ts":{"path":"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/engine/analysis/lexer-node.ts","statementMap":{"0":{"start":{"line":4,"column":11},"end":{"line":4,"column":34}},"1":{"start":{"line":5,"column":14},"end":{"line":5,"column":16}},"2":{"start":{"line":8,"column":21},"end":{"line":8,"column":23}},"3":{"start":{"line":9,"column":16},"end":{"line":9,"column":18}},"4":{"start":{"line":10,"column":14},"end":{"line":10,"column":16}},"5":{"start":{"line":11,"column":18},"end":{"line":11,"column":20}},"6":{"start":{"line":13,"column":4},"end":{"line":17,"column":7}},"7":{"start":{"line":14,"column":6},"end":{"line":16,"column":7}},"8":{"start":{"line":15,"column":8},"end":{"line":15,"column":23}},"9":{"start":{"line":18,"column":4},"end":{"line":18,"column":48}},"10":{"start":{"line":19,"column":4},"end":{"line":19,"column":46}},"11":{"start":{"line":20,"column":4},"end":{"line":20,"column":24}},"12":{"start":{"line":21,"column":4},"end":{"line":21,"column":24}},"13":{"start":{"line":22,"column":4},"end":{"line":22,"column":28}},"14":{"start":{"line":25,"column":4},"end":{"line":25,"column":30}},"15":{"start":{"line":28,"column":4},"end":{"line":28,"column":28}},"16":{"start":{"line":31,"column":4},"end":{"line":31,"column":26}},"17":{"start":{"line":34,"column":4},"end":{"line":34,"column":30}},"18":{"start":{"line":37,"column":4},"end":{"line":37,"column":46}},"19":{"start":{"line":40,"column":4},"end":{"line":40,"column":58}},"20":{"start":{"line":43,"column":4},"end":{"line":43,"column":33}},"21":{"start":{"line":46,"column":4},"end":{"line":46,"column":44}},"22":{"start":{"line":49,"column":4},"end":{"line":49,"column":24}},"23":{"start":{"line":52,"column":4},"end":{"line":52,"column":29}},"24":{"start":{"line":55,"column":4},"end":{"line":55,"column":26}},"25":{"start":{"line":58,"column":4},"end":{"line":58,"column":30}},"26":{"start":{"line":61,"column":4},"end":{"line":61,"column":34}},"27":{"start":{"line":64,"column":4},"end":{"line":64,"column":37}},"28":{"start":{"line":67,"column":4},"end":{"line":67,"column":23}},"29":{"start":{"line":70,"column":4},"end":{"line":70,"column":24}},"30":{"start":{"line":73,"column":4},"end":{"line":73,"column":26}},"31":{"start":{"line":74,"column":4},"end":{"line":74,"column":24}},"32":{"start":{"line":77,"column":4},"end":{"line":77,"column":38}},"33":{"start":{"line":80,"column":4},"end":{"line":80,"column":41}},"34":{"start":{"line":83,"column":14},"end":{"line":83,"column":47}},"35":{"start":{"line":84,"column":4},"end":{"line":86,"column":5}},"36":{"start":{"line":85,"column":6},"end":{"line":85,"column":13}},"37":{"start":{"line":87,"column":4},"end":{"line":87,"column":50}},"38":{"start":{"line":88,"column":4},"end":{"line":88,"column":33}},"39":{"start":{"line":91,"column":23},"end":{"line":91,"column":39}},"40":{"start":{"line":92,"column":4},"end":{"line":94,"column":5}},"41":{"start":{"line":93,"column":6},"end":{"line":93,"column":35}},"42":{"start":{"line":95,"column":4},"end":{"line":95,"column":39}},"43":{"start":{"line":96,"column":25},"end":{"line":96,"column":57}},"44":{"start":{"line":97,"column":4},"end":{"line":97,"column":28}},"45":{"start":{"line":100,"column":14},"end":{"line":100,"column":47}},"46":{"start":{"line":101,"column":4},"end":{"line":103,"column":5}},"47":{"start":{"line":102,"column":6},"end":{"line":102,"column":13}},"48":{"start":{"line":104,"column":4},"end":{"line":104,"column":36}},"49":{"start":{"line":107,"column":18},"end":{"line":107,"column":33}},"50":{"start":{"line":108,"column":21},"end":{"line":108,"column":39}},"51":{"start":{"line":109,"column":34},"end":{"line":109,"column":36}},"52":{"start":{"line":110,"column":26},"end":{"line":110,"column":41}},"53":{"start":{"line":111,"column":4},"end":{"line":118,"column":5}},"54":{"start":{"line":111,"column":17},"end":{"line":111,"column":18}},"55":{"start":{"line":112,"column":19},"end":{"line":112,"column":30}},"56":{"start":{"line":113,"column":6},"end":{"line":117,"column":7}},"57":{"start":{"line":114,"column":8},"end":{"line":114,"column":53}},"58":{"start":{"line":116,"column":8},"end":{"line":116,"column":41}},"59":{"start":{"line":119,"column":4},"end":{"line":124,"column":6}},"60":{"start":{"line":127,"column":25},"end":{"line":127,"column":43}},"61":{"start":{"line":128,"column":26},"end":{"line":128,"column":45}},"62":{"start":{"line":129,"column":4},"end":{"line":134,"column":5}},"63":{"start":{"line":129,"column":17},"end":{"line":129,"column":18}},"64":{"start":{"line":130,"column":20},"end":{"line":130,"column":35}},"65":{"start":{"line":131,"column":6},"end":{"line":133,"column":7}},"66":{"start":{"line":132,"column":8},"end":{"line":132,"column":17}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":12,"column":2},"end":{"line":12,"column":3}},"loc":{"start":{"line":12,"column":12},"end":{"line":23,"column":3}},"line":12},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":27},"end":{"line":13,"column":28}},"loc":{"start":{"line":13,"column":37},"end":{"line":17,"column":5}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":24,"column":2},"end":{"line":24,"column":3}},"loc":{"start":{"line":24,"column":20},"end":{"line":26,"column":3}},"line":24},"3":{"name":"(anonymous_3)","decl":{"start":{"line":27,"column":2},"end":{"line":27,"column":3}},"loc":{"start":{"line":27,"column":18},"end":{"line":29,"column":3}},"line":27},"4":{"name":"(anonymous_4)","decl":{"start":{"line":30,"column":2},"end":{"line":30,"column":3}},"loc":{"start":{"line":30,"column":16},"end":{"line":32,"column":3}},"line":30},"5":{"name":"(anonymous_5)","decl":{"start":{"line":33,"column":2},"end":{"line":33,"column":3}},"loc":{"start":{"line":33,"column":24},"end":{"line":35,"column":3}},"line":33},"6":{"name":"(anonymous_6)","decl":{"start":{"line":36,"column":2},"end":{"line":36,"column":3}},"loc":{"start":{"line":36,"column":36},"end":{"line":38,"column":3}},"line":36},"7":{"name":"(anonymous_7)","decl":{"start":{"line":39,"column":2},"end":{"line":39,"column":3}},"loc":{"start":{"line":39,"column":40},"end":{"line":41,"column":3}},"line":39},"8":{"name":"(anonymous_8)","decl":{"start":{"line":42,"column":2},"end":{"line":42,"column":3}},"loc":{"start":{"line":42,"column":23},"end":{"line":44,"column":3}},"line":42},"9":{"name":"(anonymous_9)","decl":{"start":{"line":45,"column":2},"end":{"line":45,"column":3}},"loc":{"start":{"line":45,"column":38},"end":{"line":47,"column":3}},"line":45},"10":{"name":"(anonymous_10)","decl":{"start":{"line":48,"column":2},"end":{"line":48,"column":3}},"loc":{"start":{"line":48,"column":14},"end":{"line":50,"column":3}},"line":48},"11":{"name":"(anonymous_11)","decl":{"start":{"line":51,"column":2},"end":{"line":51,"column":3}},"loc":{"start":{"line":51,"column":23},"end":{"line":53,"column":3}},"line":51},"12":{"name":"(anonymous_12)","decl":{"start":{"line":54,"column":2},"end":{"line":54,"column":3}},"loc":{"start":{"line":54,"column":16},"end":{"line":56,"column":3}},"line":54},"13":{"name":"(anonymous_13)","decl":{"start":{"line":57,"column":2},"end":{"line":57,"column":3}},"loc":{"start":{"line":57,"column":24},"end":{"line":59,"column":3}},"line":57},"14":{"name":"(anonymous_14)","decl":{"start":{"line":60,"column":2},"end":{"line":60,"column":3}},"loc":{"start":{"line":60,"column":24},"end":{"line":62,"column":3}},"line":60},"15":{"name":"(anonymous_15)","decl":{"start":{"line":63,"column":2},"end":{"line":63,"column":3}},"loc":{"start":{"line":63,"column":29},"end":{"line":65,"column":3}},"line":63},"16":{"name":"(anonymous_16)","decl":{"start":{"line":66,"column":2},"end":{"line":66,"column":3}},"loc":{"start":{"line":66,"column":13},"end":{"line":68,"column":3}},"line":66},"17":{"name":"(anonymous_17)","decl":{"start":{"line":69,"column":2},"end":{"line":69,"column":3}},"loc":{"start":{"line":69,"column":18},"end":{"line":71,"column":3}},"line":69},"18":{"name":"(anonymous_18)","decl":{"start":{"line":72,"column":2},"end":{"line":72,"column":3}},"loc":{"start":{"line":72,"column":19},"end":{"line":75,"column":3}},"line":72},"19":{"name":"(anonymous_19)","decl":{"start":{"line":76,"column":2},"end":{"line":76,"column":3}},"loc":{"start":{"line":76,"column":32},"end":{"line":78,"column":3}},"line":76},"20":{"name":"(anonymous_20)","decl":{"start":{"line":79,"column":2},"end":{"line":79,"column":3}},"loc":{"start":{"line":79,"column":20},"end":{"line":81,"column":3}},"line":79},"21":{"name":"(anonymous_21)","decl":{"start":{"line":82,"column":2},"end":{"line":82,"column":3}},"loc":{"start":{"line":82,"column":40},"end":{"line":89,"column":3}},"line":82},"22":{"name":"(anonymous_22)","decl":{"start":{"line":90,"column":2},"end":{"line":90,"column":3}},"loc":{"start":{"line":90,"column":37},"end":{"line":98,"column":3}},"line":90},"23":{"name":"(anonymous_23)","decl":{"start":{"line":99,"column":2},"end":{"line":99,"column":3}},"loc":{"start":{"line":99,"column":25},"end":{"line":105,"column":3}},"line":99},"24":{"name":"(anonymous_24)","decl":{"start":{"line":106,"column":2},"end":{"line":106,"column":3}},"loc":{"start":{"line":106,"column":14},"end":{"line":125,"column":3}},"line":106},"25":{"name":"(anonymous_25)","decl":{"start":{"line":126,"column":2},"end":{"line":126,"column":3}},"loc":{"start":{"line":126,"column":31},"end":{"line":135,"column":3}},"line":126}},"branchMap":{"0":{"loc":{"start":{"line":14,"column":6},"end":{"line":16,"column":7}},"type":"if","locations":[{"start":{"line":14,"column":6},"end":{"line":16,"column":7}},{"start":{},"end":{}}],"line":14},"1":{"loc":{"start":{"line":84,"column":4},"end":{"line":86,"column":5}},"type":"if","locations":[{"start":{"line":84,"column":4},"end":{"line":86,"column":5}},{"start":{},"end":{}}],"line":84},"2":{"loc":{"start":{"line":92,"column":4},"end":{"line":94,"column":5}},"type":"if","locations":[{"start":{"line":92,"column":4},"end":{"line":94,"column":5}},{"start":{},"end":{}}],"line":92},"3":{"loc":{"start":{"line":101,"column":4},"end":{"line":103,"column":5}},"type":"if","locations":[{"start":{"line":101,"column":4},"end":{"line":103,"column":5}},{"start":{},"end":{}}],"line":101},"4":{"loc":{"start":{"line":113,"column":6},"end":{"line":117,"column":7}},"type":"if","locations":[{"start":{"line":113,"column":6},"end":{"line":117,"column":7}},{"start":{"line":115,"column":13},"end":{"line":117,"column":7}}],"line":113},"5":{"loc":{"start":{"line":131,"column":6},"end":{"line":133,"column":7}},"type":"if","locations":[{"start":{"line":131,"column":6},"end":{"line":133,"column":7}},{"start":{},"end":{}}],"line":131}},"s":{"0":68683,"1":68683,"2":68683,"3":68683,"4":68683,"5":68683,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":14,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":84687,"23":71566,"24":152536,"25":312,"26":2011,"27":0,"28":14454,"29":67604,"30":36245,"31":36245,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":4010,"40":4010,"41":4006,"42":4010,"43":4010,"44":4010,"45":4006,"46":4006,"47":0,"48":4006,"49":309,"50":309,"51":309,"52":309,"53":309,"54":309,"55":536,"56":536,"57":274,"58":262,"59":309,"60":4006,"61":4006,"62":4006,"63":4006,"64":20024,"65":20024,"66":4006},"f":{"0":0,"1":0,"2":0,"3":14,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":84687,"11":71566,"12":152536,"13":312,"14":2011,"15":0,"16":14454,"17":67604,"18":36245,"19":0,"20":0,"21":0,"22":4010,"23":4006,"24":309,"25":4006},"b":{"0":[0,0],"1":[0,0],"2":[4006,4],"3":[0,4006],"4":[274,262],"5":[4006,16018]},"inputSourceMap":{"version":3,"sources":["/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/engine/analysis/lexer-node.ts"],"sourcesContent":["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Nullable } from '@univerjs/core';\n\nimport type { LambdaPrivacyVarType } from '../ast-node/base-ast-node';\nimport { DEFAULT_TOKEN_TYPE_ROOT } from '../../basics/token-type';\n\ninterface LexerNodeJson {\n    token: string;\n    children: Array<LexerNodeJson | string>;\n}\n\nexport class LexerNode {\n    private _parent: Nullable<LexerNode>;\n\n    private _token: string = DEFAULT_TOKEN_TYPE_ROOT;\n\n    private _children: Array<LexerNode | string> = [];\n\n    private _lambdaId: Nullable<string>;\n\n    private _functionDefinitionPrivacyVar: Nullable<LambdaPrivacyVarType>;\n\n    private _lambdaParameter: string = '';\n\n    private _startIndex: number = -1;\n\n    private _endIndex: number = -1;\n\n    private _definedNames: Array<string> = [];\n\n    dispose() {\n        this._children.forEach((node) => {\n            if (!(typeof node === 'string')) {\n                node.dispose();\n            }\n        });\n        this._functionDefinitionPrivacyVar?.clear();\n\n        this._functionDefinitionPrivacyVar = null;\n\n        this._children = [];\n\n        this._parent = null;\n\n        this._definedNames = [];\n    }\n\n    getDefinedNames() {\n        return this._definedNames;\n    }\n\n    getStartIndex() {\n        return this._startIndex;\n    }\n\n    getLambdaId() {\n        return this._lambdaId;\n    }\n\n    setLambdaId(lambdaId: string) {\n        this._lambdaId = lambdaId;\n    }\n\n    getFunctionDefinitionPrivacyVar() {\n        return this._functionDefinitionPrivacyVar;\n    }\n\n    setLambdaPrivacyVar(lambdaPrivacyVar: LambdaPrivacyVarType) {\n        this._functionDefinitionPrivacyVar = lambdaPrivacyVar;\n    }\n\n    getLambdaParameter() {\n        return this._lambdaParameter;\n    }\n\n    setLambdaParameter(lambdaParameter: string) {\n        this._lambdaParameter = lambdaParameter;\n    }\n\n    getParent() {\n        return this._parent;\n    }\n\n    setParent(lexerNode: LexerNode) {\n        this._parent = lexerNode;\n    }\n\n    getChildren() {\n        return this._children;\n    }\n\n    setChildren(children: Array<LexerNode | string>) {\n        this._children = children;\n    }\n\n    addChildren(children: LexerNode | string) {\n        this._children.push(children);\n    }\n\n    addChildrenFirst(children: LexerNode | string) {\n        this._children.unshift(children);\n    }\n\n    getToken() {\n        return this._token;\n    }\n\n    setToken(token: string) {\n        this._token = token;\n    }\n\n    setIndex(st: number, ed: number) {\n        this._startIndex = st;\n        this._endIndex = ed;\n    }\n\n    setDefinedNames(definedNames: Array<string>) {\n        this._definedNames = definedNames;\n    }\n\n    hasDefinedNames() {\n        return this._definedNames.length > 0;\n    }\n\n    replaceChild(lexerNode: LexerNode, newLexerNode: LexerNode) {\n        const i = this._getIndexInParent(lexerNode);\n\n        if (i == null) {\n            return;\n        }\n\n        this.getChildren().splice(i, 1, newLexerNode);\n\n        newLexerNode.setParent(this);\n    }\n\n    changeToParent(newParentLexerNode: LexerNode) {\n        const parentNode = this.getParent();\n        if (parentNode) {\n            parentNode.removeChild(this);\n        }\n        this.setParent(newParentLexerNode);\n        const childrenNode = newParentLexerNode.getChildren();\n        childrenNode.push(this);\n    }\n\n    removeChild(lexerNode: LexerNode) {\n        const i = this._getIndexInParent(lexerNode);\n\n        if (i == null) {\n            return;\n        }\n\n        this.getChildren().splice(i, 1);\n    }\n\n    serialize() {\n        const token = this.getToken();\n        const children = this.getChildren();\n\n        const childrenSerialization: Array<LexerNodeJson | string> = [];\n        const childrenCount = children.length;\n        for (let i = 0; i < childrenCount; i++) {\n            const item = children[i];\n            if (item instanceof LexerNode) {\n                childrenSerialization.push(item.serialize());\n            } else {\n                childrenSerialization.push(item);\n            }\n        }\n        return {\n            token,\n            st: this._startIndex,\n            ed: this._endIndex,\n            children: childrenSerialization,\n        };\n    }\n\n    private _getIndexInParent(lexerNode: LexerNode) {\n        const childrenNode = this.getChildren();\n        const childrenCount = childrenNode.length;\n        for (let i = 0; i < childrenCount; i++) {\n            const child = childrenNode[i];\n            if (child === lexerNode) {\n                return i;\n            }\n        }\n    }\n}\n"],"mappings":"AAmBA,SAAS,+BAA+B;AAOjC,aAAM,UAAU;AAAA,EACX;AAAA,EAEA,SAAiB;AAAA,EAEjB,YAAuC,CAAC;AAAA,EAExC;AAAA,EAEA;AAAA,EAEA,mBAA2B;AAAA,EAE3B,cAAsB;AAAA,EAEtB,YAAoB;AAAA,EAEpB,gBAA+B,CAAC;AAAA,EAExC,UAAU;AACN,SAAK,UAAU,QAAQ,CAAC,SAAS;AAC7B,UAAI,EAAE,OAAO,SAAS,WAAW;AAC7B,aAAK,QAAQ;AAAA,MACjB;AAAA,IACJ,CAAC;AACD,SAAK,+BAA+B,MAAM;AAE1C,SAAK,gCAAgC;AAErC,SAAK,YAAY,CAAC;AAElB,SAAK,UAAU;AAEf,SAAK,gBAAgB,CAAC;AAAA,EAC1B;AAAA,EAEA,kBAAkB;AACd,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,gBAAgB;AACZ,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,cAAc;AACV,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,YAAY,UAAkB;AAC1B,SAAK,YAAY;AAAA,EACrB;AAAA,EAEA,kCAAkC;AAC9B,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,oBAAoB,kBAAwC;AACxD,SAAK,gCAAgC;AAAA,EACzC;AAAA,EAEA,qBAAqB;AACjB,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,mBAAmB,iBAAyB;AACxC,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EAEA,YAAY;AACR,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,UAAU,WAAsB;AAC5B,SAAK,UAAU;AAAA,EACnB;AAAA,EAEA,cAAc;AACV,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,YAAY,UAAqC;AAC7C,SAAK,YAAY;AAAA,EACrB;AAAA,EAEA,YAAY,UAA8B;AACtC,SAAK,UAAU,KAAK,QAAQ;AAAA,EAChC;AAAA,EAEA,iBAAiB,UAA8B;AAC3C,SAAK,UAAU,QAAQ,QAAQ;AAAA,EACnC;AAAA,EAEA,WAAW;AACP,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,SAAS,OAAe;AACpB,SAAK,SAAS;AAAA,EAClB;AAAA,EAEA,SAAS,IAAY,IAAY;AAC7B,SAAK,cAAc;AACnB,SAAK,YAAY;AAAA,EACrB;AAAA,EAEA,gBAAgB,cAA6B;AACzC,SAAK,gBAAgB;AAAA,EACzB;AAAA,EAEA,kBAAkB;AACd,WAAO,KAAK,cAAc,SAAS;AAAA,EACvC;AAAA,EAEA,aAAa,WAAsB,cAAyB;AACxD,UAAM,IAAI,KAAK,kBAAkB,SAAS;AAE1C,QAAI,KAAK,MAAM;AACX;AAAA,IACJ;AAEA,SAAK,YAAY,EAAE,OAAO,GAAG,GAAG,YAAY;AAE5C,iBAAa,UAAU,IAAI;AAAA,EAC/B;AAAA,EAEA,eAAe,oBAA+B;AAC1C,UAAM,aAAa,KAAK,UAAU;AAClC,QAAI,YAAY;AACZ,iBAAW,YAAY,IAAI;AAAA,IAC/B;AACA,SAAK,UAAU,kBAAkB;AACjC,UAAM,eAAe,mBAAmB,YAAY;AACpD,iBAAa,KAAK,IAAI;AAAA,EAC1B;AAAA,EAEA,YAAY,WAAsB;AAC9B,UAAM,IAAI,KAAK,kBAAkB,SAAS;AAE1C,QAAI,KAAK,MAAM;AACX;AAAA,IACJ;AAEA,SAAK,YAAY,EAAE,OAAO,GAAG,CAAC;AAAA,EAClC;AAAA,EAEA,YAAY;AACR,UAAM,QAAQ,KAAK,SAAS;AAC5B,UAAM,WAAW,KAAK,YAAY;AAElC,UAAM,wBAAuD,CAAC;AAC9D,UAAM,gBAAgB,SAAS;AAC/B,aAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AACpC,YAAM,OAAO,SAAS,CAAC;AACvB,UAAI,gBAAgB,WAAW;AAC3B,8BAAsB,KAAK,KAAK,UAAU,CAAC;AAAA,MAC/C,OAAO;AACH,8BAAsB,KAAK,IAAI;AAAA,MACnC;AAAA,IACJ;AACA,WAAO;AAAA,MACH;AAAA,MACA,IAAI,KAAK;AAAA,MACT,IAAI,KAAK;AAAA,MACT,UAAU;AAAA,IACd;AAAA,EACJ;AAAA,EAEQ,kBAAkB,WAAsB;AAC5C,UAAM,eAAe,KAAK,YAAY;AACtC,UAAM,gBAAgB,aAAa;AACnC,aAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AACpC,YAAM,QAAQ,aAAa,CAAC;AAC5B,UAAI,UAAU,WAAW;AACrB,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AACJ;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"13def48a378fec79f958939e281c387805382cfa"},"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/engine/analysis/lexer-tree-builder.ts":{"path":"/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/engine/analysis/lexer-tree-builder.ts","statementMap":{"0":{"start":{"line":26,"column":34},"end":{"line":31,"column":21}},"1":{"start":{"line":27,"column":2},"end":{"line":27,"column":54}},"2":{"start":{"line":28,"column":2},"end":{"line":28,"column":58}},"3":{"start":{"line":29,"column":2},"end":{"line":29,"column":54}},"4":{"start":{"line":30,"column":2},"end":{"line":30,"column":22}},"5":{"start":{"line":32,"column":32},"end":{"line":32,"column":35}},"6":{"start":{"line":33,"column":37},"end":{"line":33,"column":79}},"7":{"start":{"line":34,"column":40},"end":{"line":34,"column":82}},"8":{"start":{"line":36,"column":22},"end":{"line":36,"column":37}},"9":{"start":{"line":37,"column":13},"end":{"line":37,"column":14}},"10":{"start":{"line":38,"column":13},"end":{"line":38,"column":15}},"11":{"start":{"line":39,"column":18},"end":{"line":39,"column":20}},"12":{"start":{"line":41,"column":24},"end":{"line":41,"column":25}},"13":{"start":{"line":42,"column":17},"end":{"line":42,"column":18}},"14":{"start":{"line":44,"column":26},"end":{"line":44,"column":27}},"15":{"start":{"line":46,"column":26},"end":{"line":46,"column":27}},"16":{"start":{"line":48,"column":17},"end":{"line":48,"column":22}},"17":{"start":{"line":50,"column":16},"end":{"line":50,"column":21}},"18":{"start":{"line":52,"column":23},"end":{"line":52,"column":24}},"19":{"start":{"line":53,"column":23},"end":{"line":53,"column":28}},"20":{"start":{"line":56,"column":4},"end":{"line":56,"column":22}},"21":{"start":{"line":57,"column":4},"end":{"line":57,"column":37}},"22":{"start":{"line":58,"column":4},"end":{"line":58,"column":34}},"23":{"start":{"line":59,"column":4},"end":{"line":59,"column":37}},"24":{"start":{"line":62,"column":4},"end":{"line":62,"column":25}},"25":{"start":{"line":65,"column":4},"end":{"line":65,"column":38}},"26":{"start":{"line":68,"column":4},"end":{"line":68,"column":37}},"27":{"start":{"line":71,"column":4},"end":{"line":71,"column":44}},"28":{"start":{"line":74,"column":4},"end":{"line":74,"column":38}},"29":{"start":{"line":77,"column":4},"end":{"line":77,"column":39}},"30":{"start":{"line":80,"column":4},"end":{"line":80,"column":44}},"31":{"start":{"line":83,"column":4},"end":{"line":83,"column":35}},"32":{"start":{"line":86,"column":4},"end":{"line":86,"column":43}},"33":{"start":{"line":89,"column":4},"end":{"line":89,"column":42}},"34":{"start":{"line":92,"column":4},"end":{"line":92,"column":34}},"35":{"start":{"line":95,"column":20},"end":{"line":95,"column":71}},"36":{"start":{"line":96,"column":4},"end":{"line":98,"column":5}},"37":{"start":{"line":97,"column":6},"end":{"line":97,"column":13}},"38":{"start":{"line":99,"column":22},"end":{"line":99,"column":32}},"39":{"start":{"line":100,"column":4},"end":{"line":102,"column":5}},"40":{"start":{"line":101,"column":6},"end":{"line":101,"column":13}},"41":{"start":{"line":103,"column":17},"end":{"line":103,"column":38}},"42":{"start":{"line":104,"column":19},"end":{"line":104,"column":28}},"43":{"start":{"line":105,"column":4},"end":{"line":116,"column":5}},"44":{"start":{"line":106,"column":20},"end":{"line":106,"column":37}},"45":{"start":{"line":107,"column":6},"end":{"line":113,"column":7}},"46":{"start":{"line":108,"column":27},"end":{"line":108,"column":65}},"47":{"start":{"line":109,"column":8},"end":{"line":112,"column":10}},"48":{"start":{"line":114,"column":6},"end":{"line":114,"column":24}},"49":{"start":{"line":115,"column":6},"end":{"line":115,"column":34}},"50":{"start":{"line":123,"column":27},"end":{"line":123,"column":28}},"51":{"start":{"line":124,"column":20},"end":{"line":124,"column":44}},"52":{"start":{"line":125,"column":21},"end":{"line":125,"column":45}},"53":{"start":{"line":126,"column":4},"end":{"line":131,"column":5}},"54":{"start":{"line":127,"column":6},"end":{"line":129,"column":7}},"55":{"start":{"line":128,"column":8},"end":{"line":128,"column":27}},"56":{"start":{"line":130,"column":6},"end":{"line":130,"column":46}},"57":{"start":{"line":132,"column":20},"end":{"line":132,"column":87}},"58":{"start":{"line":133,"column":4},"end":{"line":135,"column":5}},"59":{"start":{"line":134,"column":6},"end":{"line":134,"column":15}},"60":{"start":{"line":136,"column":22},"end":{"line":136,"column":32}},"61":{"start":{"line":137,"column":4},"end":{"line":139,"column":5}},"62":{"start":{"line":138,"column":6},"end":{"line":138,"column":15}},"63":{"start":{"line":140,"column":17},"end":{"line":140,"column":38}},"64":{"start":{"line":141,"column":23},"end":{"line":141,"column":24}},"65":{"start":{"line":142,"column":4},"end":{"line":144,"column":5}},"66":{"start":{"line":143,"column":6},"end":{"line":143,"column":21}},"67":{"start":{"line":145,"column":4},"end":{"line":155,"column":5}},"68":{"start":{"line":146,"column":20},"end":{"line":146,"column":37}},"69":{"start":{"line":147,"column":6},"end":{"line":153,"column":7}},"70":{"start":{"line":148,"column":8},"end":{"line":152,"column":9}},"71":{"start":{"line":149,"column":10},"end":{"line":149,"column":28}},"72":{"start":{"line":151,"column":10},"end":{"line":151,"column":29}},"73":{"start":{"line":154,"column":6},"end":{"line":154,"column":34}},"74":{"start":{"line":156,"column":4},"end":{"line":156,"column":24}},"75":{"start":{"line":159,"column":31},"end":{"line":159,"column":74}},"76":{"start":{"line":160,"column":4},"end":{"line":162,"column":5}},"77":{"start":{"line":161,"column":6},"end":{"line":161,"column":37}},"78":{"start":{"line":163,"column":26},"end":{"line":163,"column":63}},"79":{"start":{"line":164,"column":4},"end":{"line":166,"column":5}},"80":{"start":{"line":165,"column":6},"end":{"line":165,"column":13}},"81":{"start":{"line":167,"column":29},"end":{"line":167,"column":64}},"82":{"start":{"line":168,"column":4},"end":{"line":168,"column":71}},"83":{"start":{"line":169,"column":4},"end":{"line":169,"column":28}},"84":{"start":{"line":172,"column":18},"end":{"line":172,"column":58}},"85":{"start":{"line":173,"column":4},"end":{"line":175,"column":5}},"86":{"start":{"line":174,"column":6},"end":{"line":174,"column":27}},"87":{"start":{"line":176,"column":23},"end":{"line":176,"column":25}},"88":{"start":{"line":177,"column":4},"end":{"line":179,"column":5}},"89":{"start":{"line":178,"column":6},"end":{"line":178,"column":42}},"90":{"start":{"line":180,"column":4},"end":{"line":217,"column":5}},"91":{"start":{"line":180,"column":17},"end":{"line":180,"column":18}},"92":{"start":{"line":180,"column":26},"end":{"line":180,"column":38}},"93":{"start":{"line":181,"column":19},"end":{"line":181,"column":27}},"94":{"start":{"line":182,"column":6},"end":{"line":184,"column":7}},"95":{"start":{"line":183,"column":8},"end":{"line":183,"column":17}},"96":{"start":{"line":185,"column":6},"end":{"line":216,"column":7}},"97":{"start":{"line":186,"column":36},"end":{"line":186,"column":40}},"98":{"start":{"line":187,"column":29},"end":{"line":187,"column":70}},"99":{"start":{"line":188,"column":8},"end":{"line":190,"column":9}},"100":{"start":{"line":189,"column":10},"end":{"line":189,"column":19}},"101":{"start":{"line":191,"column":45},"end":{"line":191,"column":57}},"102":{"start":{"line":192,"column":25},"end":{"line":196,"column":9}},"103":{"start":{"line":197,"column":25},"end":{"line":201,"column":10}},"104":{"start":{"line":202,"column":27},"end":{"line":202,"column":57}},"105":{"start":{"line":203,"column":8},"end":{"line":207,"column":10}},"106":{"start":{"line":208,"column":8},"end":{"line":215,"column":9}},"107":{"start":{"line":208,"column":21},"end":{"line":208,"column":26}},"108":{"start":{"line":209,"column":27},"end":{"line":209,"column":35}},"109":{"start":{"line":210,"column":10},"end":{"line":212,"column":11}},"110":{"start":{"line":211,"column":12},"end":{"line":211,"column":21}},"111":{"start":{"line":213,"column":10},"end":{"line":213,"column":44}},"112":{"start":{"line":214,"column":10},"end":{"line":214,"column":42}},"113":{"start":{"line":218,"column":4},"end":{"line":218,"column":65}},"114":{"start":{"line":221,"column":26},"end":{"line":221,"column":66}},"115":{"start":{"line":222,"column":4},"end":{"line":224,"column":5}},"116":{"start":{"line":223,"column":6},"end":{"line":223,"column":27}},"117":{"start":{"line":225,"column":29},"end":{"line":225,"column":31}},"118":{"start":{"line":226,"column":4},"end":{"line":256,"column":5}},"119":{"start":{"line":226,"column":17},"end":{"line":226,"column":18}},"120":{"start":{"line":226,"column":26},"end":{"line":226,"column":46}},"121":{"start":{"line":227,"column":19},"end":{"line":227,"column":35}},"122":{"start":{"line":228,"column":6},"end":{"line":231,"column":7}},"123":{"start":{"line":229,"column":8},"end":{"line":229,"column":36}},"124":{"start":{"line":230,"column":8},"end":{"line":230,"column":17}},"125":{"start":{"line":232,"column":24},"end":{"line":232,"column":28}},"126":{"start":{"line":233,"column":27},"end":{"line":233,"column":68}},"127":{"start":{"line":234,"column":52},"end":{"line":234,"column":64}},"128":{"start":{"line":235,"column":21},"end":{"line":235,"column":39}},"129":{"start":{"line":236,"column":6},"end":{"line":241,"column":7}},"130":{"start":{"line":237,"column":8},"end":{"line":237,"column":36}},"131":{"start":{"line":238,"column":8},"end":{"line":238,"column":17}},"132":{"start":{"line":240,"column":8},"end":{"line":240,"column":87}},"133":{"start":{"line":242,"column":21},"end":{"line":242,"column":23}},"134":{"start":{"line":243,"column":6},"end":{"line":251,"column":7}},"135":{"start":{"line":244,"column":8},"end":{"line":248,"column":11}},"136":{"start":{"line":250,"column":8},"end":{"line":250,"column":33}},"137":{"start":{"line":252,"column":6},"end":{"line":255,"column":9}},"138":{"start":{"line":257,"column":4},"end":{"line":257,"column":62}},"139":{"start":{"line":264,"column":4},"end":{"line":266,"column":5}},"140":{"start":{"line":265,"column":6},"end":{"line":265,"column":18}},"141":{"start":{"line":267,"column":17},"end":{"line":267,"column":56}},"142":{"start":{"line":268,"column":4},"end":{"line":270,"column":5}},"143":{"start":{"line":269,"column":6},"end":{"line":269,"column":18}},"144":{"start":{"line":271,"column":4},"end":{"line":273,"column":5}},"145":{"start":{"line":272,"column":6},"end":{"line":272,"column":18}},"146":{"start":{"line":274,"column":4},"end":{"line":274,"column":17}},"147":{"start":{"line":278,"column":26},"end":{"line":278,"column":28}},"148":{"start":{"line":279,"column":22},"end":{"line":279,"column":27}},"149":{"start":{"line":280,"column":4},"end":{"line":318,"column":5}},"150":{"start":{"line":280,"column":17},"end":{"line":280,"column":18}},"151":{"start":{"line":280,"column":26},"end":{"line":280,"column":46}},"152":{"start":{"line":281,"column":19},"end":{"line":281,"column":35}},"153":{"start":{"line":282,"column":22},"end":{"line":282,"column":42}},"154":{"start":{"line":283,"column":41},"end":{"line":283,"column":45}},"155":{"start":{"line":284,"column":6},"end":{"line":286,"column":7}},"156":{"start":{"line":285,"column":8},"end":{"line":285,"column":27}},"157":{"start":{"line":287,"column":6},"end":{"line":290,"column":7}},"158":{"start":{"line":288,"column":8},"end":{"line":288,"column":42}},"159":{"start":{"line":289,"column":8},"end":{"line":289,"column":17}},"160":{"start":{"line":291,"column":23},"end":{"line":291,"column":45}},"161":{"start":{"line":292,"column":25},"end":{"line":292,"column":46}},"162":{"start":{"line":293,"column":21},"end":{"line":293,"column":26}},"163":{"start":{"line":294,"column":29},"end":{"line":294,"column":34}},"164":{"start":{"line":295,"column":6},"end":{"line":298,"column":7}},"165":{"start":{"line":296,"column":8},"end":{"line":296,"column":36}},"166":{"start":{"line":297,"column":8},"end":{"line":297,"column":22}},"167":{"start":{"line":299,"column":6},"end":{"line":302,"column":7}},"168":{"start":{"line":300,"column":8},"end":{"line":300,"column":42}},"169":{"start":{"line":301,"column":8},"end":{"line":301,"column":17}},"170":{"start":{"line":303,"column":29},"end":{"line":303,"column":46}},"171":{"start":{"line":304,"column":39},"end":{"line":304,"column":77}},"172":{"start":{"line":305,"column":6},"end":{"line":314,"column":7}},"173":{"start":{"line":306,"column":8},"end":{"line":306,"column":28}},"174":{"start":{"line":307,"column":8},"end":{"line":307,"column":128}},"175":{"start":{"line":308,"column":13},"end":{"line":314,"column":7}},"176":{"start":{"line":309,"column":8},"end":{"line":309,"column":131}},"177":{"start":{"line":310,"column":13},"end":{"line":314,"column":7}},"178":{"start":{"line":311,"column":8},"end":{"line":311,"column":128}},"179":{"start":{"line":312,"column":13},"end":{"line":314,"column":7}},"180":{"start":{"line":313,"column":8},"end":{"line":313,"column":130}},"181":{"start":{"line":315,"column":6},"end":{"line":317,"column":7}},"182":{"start":{"line":316,"column":8},"end":{"line":316,"column":42}},"183":{"start":{"line":319,"column":4},"end":{"line":319,"column":59}},"184":{"start":{"line":322,"column":4},"end":{"line":331,"column":6}},"185":{"start":{"line":334,"column":4},"end":{"line":334,"column":57}},"186":{"start":{"line":337,"column":4},"end":{"line":337,"column":105}},"187":{"start":{"line":344,"column":29},"end":{"line":344,"column":31}},"188":{"start":{"line":345,"column":31},"end":{"line":345,"column":51}},"189":{"start":{"line":346,"column":12},"end":{"line":346,"column":13}},"190":{"start":{"line":347,"column":4},"end":{"line":374,"column":5}},"191":{"start":{"line":348,"column":19},"end":{"line":348,"column":35}},"192":{"start":{"line":349,"column":6},"end":{"line":372,"column":7}},"193":{"start":{"line":350,"column":24},"end":{"line":350,"column":44}},"194":{"start":{"line":351,"column":8},"end":{"line":360,"column":9}},"195":{"start":{"line":352,"column":28},"end":{"line":352,"column":64}},"196":{"start":{"line":353,"column":10},"end":{"line":359,"column":11}},"197":{"start":{"line":354,"column":12},"end":{"line":354,"column":54}},"198":{"start":{"line":355,"column":12},"end":{"line":355,"column":34}},"199":{"start":{"line":356,"column":12},"end":{"line":356,"column":44}},"200":{"start":{"line":357,"column":12},"end":{"line":357,"column":16}},"201":{"start":{"line":358,"column":12},"end":{"line":358,"column":21}},"202":{"start":{"line":361,"column":8},"end":{"line":361,"column":36}},"203":{"start":{"line":363,"column":28},"end":{"line":363,"column":48}},"204":{"start":{"line":364,"column":28},"end":{"line":364,"column":48}},"205":{"start":{"line":365,"column":8},"end":{"line":370,"column":9}},"206":{"start":{"line":366,"column":10},"end":{"line":366,"column":53}},"207":{"start":{"line":367,"column":10},"end":{"line":367,"column":56}},"208":{"start":{"line":368,"column":10},"end":{"line":368,"column":47}},"209":{"start":{"line":369,"column":10},"end":{"line":369,"column":17}},"210":{"start":{"line":371,"column":8},"end":{"line":371,"column":36}},"211":{"start":{"line":373,"column":6},"end":{"line":373,"column":10}},"212":{"start":{"line":375,"column":4},"end":{"line":375,"column":58}},"213":{"start":{"line":381,"column":31},"end":{"line":381,"column":33}},"214":{"start":{"line":382,"column":4},"end":{"line":413,"column":5}},"215":{"start":{"line":383,"column":6},"end":{"line":411,"column":7}},"216":{"start":{"line":384,"column":22},"end":{"line":384,"column":32}},"217":{"start":{"line":385,"column":22},"end":{"line":385,"column":59}},"218":{"start":{"line":386,"column":8},"end":{"line":410,"column":9}},"219":{"start":{"line":387,"column":31},"end":{"line":387,"column":39}},"220":{"start":{"line":388,"column":32},"end":{"line":388,"column":40}},"221":{"start":{"line":389,"column":10},"end":{"line":409,"column":11}},"222":{"start":{"line":390,"column":35},"end":{"line":390,"column":54}},"223":{"start":{"line":391,"column":34},"end":{"line":391,"column":49}},"224":{"start":{"line":392,"column":32},"end":{"line":392,"column":68}},"225":{"start":{"line":393,"column":33},"end":{"line":399,"column":13}},"226":{"start":{"line":400,"column":28},"end":{"line":405,"column":13}},"227":{"start":{"line":406,"column":12},"end":{"line":406,"column":50}},"228":{"start":{"line":407,"column":12},"end":{"line":407,"column":45}},"229":{"start":{"line":408,"column":12},"end":{"line":408,"column":21}},"230":{"start":{"line":412,"column":6},"end":{"line":412,"column":36}},"231":{"start":{"line":414,"column":4},"end":{"line":414,"column":30}},"232":{"start":{"line":417,"column":25},"end":{"line":417,"column":61}},"233":{"start":{"line":418,"column":4},"end":{"line":418,"column":82}},"234":{"start":{"line":421,"column":4},"end":{"line":421,"column":42}},"235":{"start":{"line":424,"column":4},"end":{"line":430,"column":5}},"236":{"start":{"line":425,"column":24},"end":{"line":425,"column":64}},"237":{"start":{"line":426,"column":43},"end":{"line":426,"column":82}},"238":{"start":{"line":427,"column":6},"end":{"line":429,"column":7}},"239":{"start":{"line":428,"column":8},"end":{"line":428,"column":25}},"240":{"start":{"line":431,"column":4},"end":{"line":431,"column":34}},"241":{"start":{"line":432,"column":4},"end":{"line":432,"column":61}},"242":{"start":{"line":433,"column":26},"end":{"line":433,"column":28}},"243":{"start":{"line":434,"column":16},"end":{"line":434,"column":61}},"244":{"start":{"line":435,"column":4},"end":{"line":437,"column":5}},"245":{"start":{"line":436,"column":6},"end":{"line":436,"column":19}},"246":{"start":{"line":438,"column":32},"end":{"line":438,"column":37}},"247":{"start":{"line":439,"column":32},"end":{"line":439,"column":34}},"248":{"start":{"line":440,"column":30},"end":{"line":440,"column":32}},"249":{"start":{"line":441,"column":4},"end":{"line":446,"column":5}},"250":{"start":{"line":442,"column":63},"end":{"line":442,"column":95}},"251":{"start":{"line":443,"column":6},"end":{"line":443,"column":45}},"252":{"start":{"line":444,"column":6},"end":{"line":444,"column":45}},"253":{"start":{"line":445,"column":6},"end":{"line":445,"column":41}},"254":{"start":{"line":447,"column":4},"end":{"line":454,"column":5}},"255":{"start":{"line":448,"column":6},"end":{"line":448,"column":36}},"256":{"start":{"line":449,"column":6},"end":{"line":449,"column":63}},"257":{"start":{"line":450,"column":6},"end":{"line":450,"column":59}},"258":{"start":{"line":451,"column":6},"end":{"line":453,"column":7}},"259":{"start":{"line":452,"column":8},"end":{"line":452,"column":21}},"260":{"start":{"line":455,"column":17},"end":{"line":455,"column":57}},"261":{"start":{"line":456,"column":4},"end":{"line":458,"column":5}},"262":{"start":{"line":457,"column":6},"end":{"line":457,"column":36}},"263":{"start":{"line":459,"column":4},"end":{"line":465,"column":5}},"264":{"start":{"line":460,"column":22},"end":{"line":460,"column":75}},"265":{"start":{"line":461,"column":6},"end":{"line":463,"column":7}},"266":{"start":{"line":462,"column":8},"end":{"line":462,"column":31}},"267":{"start":{"line":464,"column":6},"end":{"line":464,"column":71}},"268":{"start":{"line":466,"column":4},"end":{"line":468,"column":5}},"269":{"start":{"line":467,"column":6},"end":{"line":467,"column":66}},"270":{"start":{"line":469,"column":4},"end":{"line":469,"column":34}},"271":{"start":{"line":473,"column":21},"end":{"line":473,"column":44}},"272":{"start":{"line":474,"column":4},"end":{"line":476,"column":5}},"273":{"start":{"line":475,"column":6},"end":{"line":475,"column":19}},"274":{"start":{"line":477,"column":26},"end":{"line":477,"column":41}},"275":{"start":{"line":478,"column":22},"end":{"line":478,"column":24}},"276":{"start":{"line":479,"column":24},"end":{"line":479,"column":26}},"277":{"start":{"line":480,"column":23},"end":{"line":480,"column":27}},"278":{"start":{"line":481,"column":4},"end":{"line":526,"column":5}},"279":{"start":{"line":481,"column":17},"end":{"line":481,"column":18}},"280":{"start":{"line":482,"column":19},"end":{"line":482,"column":30}},"281":{"start":{"line":483,"column":6},"end":{"line":525,"column":7}},"282":{"start":{"line":484,"column":21},"end":{"line":484,"column":32}},"283":{"start":{"line":485,"column":8},"end":{"line":487,"column":9}},"284":{"start":{"line":486,"column":10},"end":{"line":486,"column":19}},"285":{"start":{"line":488,"column":8},"end":{"line":521,"column":9}},"286":{"start":{"line":489,"column":10},"end":{"line":491,"column":11}},"287":{"start":{"line":490,"column":12},"end":{"line":490,"column":21}},"288":{"start":{"line":492,"column":10},"end":{"line":494,"column":11}},"289":{"start":{"line":493,"column":12},"end":{"line":493,"column":25}},"290":{"start":{"line":495,"column":10},"end":{"line":510,"column":11}},"291":{"start":{"line":496,"column":31},"end":{"line":496,"column":74}},"292":{"start":{"line":497,"column":12},"end":{"line":499,"column":13}},"293":{"start":{"line":498,"column":14},"end":{"line":498,"column":20}},"294":{"start":{"line":500,"column":39},"end":{"line":500,"column":78}},"295":{"start":{"line":501,"column":33},"end":{"line":501,"column":66}},"296":{"start":{"line":502,"column":12},"end":{"line":504,"column":13}},"297":{"start":{"line":503,"column":14},"end":{"line":503,"column":20}},"298":{"start":{"line":505,"column":12},"end":{"line":509,"column":13}},"299":{"start":{"line":506,"column":14},"end":{"line":506,"column":48}},"300":{"start":{"line":508,"column":14},"end":{"line":508,"column":20}},"301":{"start":{"line":511,"column":10},"end":{"line":511,"column":33}},"302":{"start":{"line":512,"column":15},"end":{"line":521,"column":9}},"303":{"start":{"line":513,"column":10},"end":{"line":513,"column":33}},"304":{"start":{"line":514,"column":15},"end":{"line":521,"column":9}},"305":{"start":{"line":515,"column":10},"end":{"line":515,"column":89}},"306":{"start":{"line":517,"column":10},"end":{"line":519,"column":11}},"307":{"start":{"line":518,"column":12},"end":{"line":518,"column":25}},"308":{"start":{"line":520,"column":10},"end":{"line":520,"column":31}},"309":{"start":{"line":523,"column":8},"end":{"line":523,"column":59}},"310":{"start":{"line":524,"column":8},"end":{"line":524,"column":29}},"311":{"start":{"line":527,"column":4},"end":{"line":529,"column":5}},"312":{"start":{"line":528,"column":6},"end":{"line":528,"column":19}},"313":{"start":{"line":530,"column":4},"end":{"line":530,"column":82}},"314":{"start":{"line":533,"column":28},"end":{"line":533,"column":44}},"315":{"start":{"line":534,"column":26},"end":{"line":534,"column":56}},"316":{"start":{"line":535,"column":4},"end":{"line":541,"column":5}},"317":{"start":{"line":536,"column":21},"end":{"line":536,"column":38}},"318":{"start":{"line":537,"column":6},"end":{"line":539,"column":7}},"319":{"start":{"line":538,"column":8},"end":{"line":538,"column":21}},"320":{"start":{"line":540,"column":6},"end":{"line":540,"column":29}},"321":{"start":{"line":542,"column":4},"end":{"line":542,"column":37}},"322":{"start":{"line":543,"column":4},"end":{"line":543,"column":16}},"323":{"start":{"line":546,"column":4},"end":{"line":548,"column":5}},"324":{"start":{"line":547,"column":6},"end":{"line":547,"column":19}},"325":{"start":{"line":549,"column":4},"end":{"line":551,"column":5}},"326":{"start":{"line":550,"column":6},"end":{"line":550,"column":19}},"327":{"start":{"line":552,"column":4},"end":{"line":562,"column":5}},"328":{"start":{"line":553,"column":25},"end":{"line":553,"column":68}},"329":{"start":{"line":554,"column":6},"end":{"line":556,"column":7}},"330":{"start":{"line":555,"column":8},"end":{"line":555,"column":14}},"331":{"start":{"line":557,"column":6},"end":{"line":560,"column":7}},"332":{"start":{"line":558,"column":8},"end":{"line":558,"column":26}},"333":{"start":{"line":559,"column":8},"end":{"line":559,"column":14}},"334":{"start":{"line":561,"column":6},"end":{"line":561,"column":40}},"335":{"start":{"line":565,"column":4},"end":{"line":565,"column":74}},"336":{"start":{"line":568,"column":4},"end":{"line":568,"column":44}},"337":{"start":{"line":571,"column":4},"end":{"line":573,"column":5}},"338":{"start":{"line":572,"column":6},"end":{"line":572,"column":19}},"339":{"start":{"line":574,"column":4},"end":{"line":576,"column":5}},"340":{"start":{"line":575,"column":6},"end":{"line":575,"column":19}},"341":{"start":{"line":577,"column":4},"end":{"line":577,"column":40}},"342":{"start":{"line":580,"column":4},"end":{"line":582,"column":5}},"343":{"start":{"line":581,"column":6},"end":{"line":581,"column":18}},"344":{"start":{"line":583,"column":4},"end":{"line":588,"column":5}},"345":{"start":{"line":584,"column":22},"end":{"line":584,"column":36}},"346":{"start":{"line":585,"column":6},"end":{"line":587,"column":7}},"347":{"start":{"line":586,"column":8},"end":{"line":586,"column":20}},"348":{"start":{"line":589,"column":4},"end":{"line":589,"column":17}},"349":{"start":{"line":592,"column":4},"end":{"line":592,"column":45}},"350":{"start":{"line":595,"column":4},"end":{"line":595,"column":23}},"351":{"start":{"line":598,"column":4},"end":{"line":598,"column":34}},"352":{"start":{"line":601,"column":4},"end":{"line":601,"column":29}},"353":{"start":{"line":604,"column":4},"end":{"line":604,"column":34}},"354":{"start":{"line":607,"column":4},"end":{"line":607,"column":34}},"355":{"start":{"line":610,"column":25},"end":{"line":610,"column":43}},"356":{"start":{"line":611,"column":4},"end":{"line":611,"column":49}},"357":{"start":{"line":614,"column":25},"end":{"line":614,"column":43}},"358":{"start":{"line":615,"column":4},"end":{"line":615,"column":49}},"359":{"start":{"line":618,"column":4},"end":{"line":618,"column":27}},"360":{"start":{"line":621,"column":4},"end":{"line":621,"column":27}},"361":{"start":{"line":624,"column":4},"end":{"line":624,"column":36}},"362":{"start":{"line":627,"column":4},"end":{"line":627,"column":36}},"363":{"start":{"line":630,"column":4},"end":{"line":630,"column":36}},"364":{"start":{"line":633,"column":4},"end":{"line":633,"column":36}},"365":{"start":{"line":636,"column":4},"end":{"line":636,"column":29}},"366":{"start":{"line":639,"column":4},"end":{"line":639,"column":30}},"367":{"start":{"line":642,"column":4},"end":{"line":642,"column":28}},"368":{"start":{"line":643,"column":4},"end":{"line":643,"column":28}},"369":{"start":{"line":646,"column":4},"end":{"line":646,"column":22}},"370":{"start":{"line":647,"column":4},"end":{"line":647,"column":29}},"371":{"start":{"line":650,"column":4},"end":{"line":650,"column":35}},"372":{"start":{"line":653,"column":4},"end":{"line":653,"column":35}},"373":{"start":{"line":656,"column":4},"end":{"line":656,"column":36}},"374":{"start":{"line":659,"column":4},"end":{"line":659,"column":33}},"375":{"start":{"line":662,"column":4},"end":{"line":662,"column":39}},"376":{"start":{"line":665,"column":21},"end":{"line":665,"column":57}},"377":{"start":{"line":666,"column":4},"end":{"line":671,"column":5}},"378":{"start":{"line":667,"column":23},"end":{"line":667,"column":52}},"379":{"start":{"line":668,"column":6},"end":{"line":670,"column":7}},"380":{"start":{"line":669,"column":8},"end":{"line":669,"column":24}},"381":{"start":{"line":672,"column":4},"end":{"line":672,"column":17}},"382":{"start":{"line":675,"column":21},"end":{"line":675,"column":57}},"383":{"start":{"line":676,"column":4},"end":{"line":679,"column":5}},"384":{"start":{"line":677,"column":23},"end":{"line":677,"column":52}},"385":{"start":{"line":678,"column":6},"end":{"line":678,"column":22}},"386":{"start":{"line":680,"column":4},"end":{"line":680,"column":17}},"387":{"start":{"line":683,"column":19},"end":{"line":683,"column":53}},"388":{"start":{"line":684,"column":4},"end":{"line":687,"column":5}},"389":{"start":{"line":685,"column":6},"end":{"line":685,"column":38}},"390":{"start":{"line":686,"column":6},"end":{"line":686,"column":18}},"391":{"start":{"line":688,"column":4},"end":{"line":688,"column":17}},"392":{"start":{"line":691,"column":19},"end":{"line":691,"column":54}},"393":{"start":{"line":692,"column":16},"end":{"line":692,"column":21}},"394":{"start":{"line":693,"column":4},"end":{"line":709,"column":5}},"395":{"start":{"line":694,"column":6},"end":{"line":700,"column":7}},"396":{"start":{"line":695,"column":21},"end":{"line":695,"column":81}},"397":{"start":{"line":696,"column":8},"end":{"line":698,"column":9}},"398":{"start":{"line":697,"column":10},"end":{"line":697,"column":40}},"399":{"start":{"line":699,"column":8},"end":{"line":699,"column":21}},"400":{"start":{"line":702,"column":6},"end":{"line":708,"column":7}},"401":{"start":{"line":703,"column":21},"end":{"line":703,"column":68}},"402":{"start":{"line":704,"column":8},"end":{"line":706,"column":9}},"403":{"start":{"line":705,"column":10},"end":{"line":705,"column":40}},"404":{"start":{"line":707,"column":8},"end":{"line":707,"column":21}},"405":{"start":{"line":710,"column":4},"end":{"line":720,"column":5}},"406":{"start":{"line":710,"column":17},"end":{"line":710,"column":18}},"407":{"start":{"line":711,"column":19},"end":{"line":711,"column":54}},"408":{"start":{"line":712,"column":6},"end":{"line":714,"column":7}},"409":{"start":{"line":713,"column":8},"end":{"line":713,"column":38}},"410":{"start":{"line":715,"column":6},"end":{"line":719,"column":7}},"411":{"start":{"line":716,"column":8},"end":{"line":716,"column":21}},"412":{"start":{"line":718,"column":8},"end":{"line":718,"column":22}},"413":{"start":{"line":721,"column":4},"end":{"line":721,"column":17}},"414":{"start":{"line":724,"column":4},"end":{"line":724,"column":39}},"415":{"start":{"line":727,"column":4},"end":{"line":727,"column":27}},"416":{"start":{"line":730,"column":16},"end":{"line":730,"column":24}},"417":{"start":{"line":731,"column":4},"end":{"line":744,"column":5}},"418":{"start":{"line":732,"column":23},"end":{"line":732,"column":59}},"419":{"start":{"line":733,"column":6},"end":{"line":738,"column":7}},"420":{"start":{"line":734,"column":33},"end":{"line":734,"column":48}},"421":{"start":{"line":735,"column":8},"end":{"line":735,"column":41}},"422":{"start":{"line":736,"column":8},"end":{"line":736,"column":59}},"423":{"start":{"line":737,"column":8},"end":{"line":737,"column":33}},"424":{"start":{"line":739,"column":6},"end":{"line":743,"column":7}},"425":{"start":{"line":740,"column":8},"end":{"line":740,"column":32}},"426":{"start":{"line":742,"column":8},"end":{"line":742,"column":29}},"427":{"start":{"line":745,"column":4},"end":{"line":748,"column":5}},"428":{"start":{"line":746,"column":6},"end":{"line":746,"column":42}},"429":{"start":{"line":747,"column":6},"end":{"line":747,"column":25}},"430":{"start":{"line":751,"column":4},"end":{"line":751,"column":54}},"431":{"start":{"line":752,"column":4},"end":{"line":752,"column":51}},"432":{"start":{"line":753,"column":4},"end":{"line":753,"column":42}},"433":{"start":{"line":756,"column":25},"end":{"line":756,"column":40}},"434":{"start":{"line":757,"column":4},"end":{"line":757,"column":33}},"435":{"start":{"line":758,"column":4},"end":{"line":758,"column":63}},"436":{"start":{"line":759,"column":4},"end":{"line":759,"column":55}},"437":{"start":{"line":762,"column":21},"end":{"line":762,"column":30}},"438":{"start":{"line":763,"column":4},"end":{"line":765,"column":5}},"439":{"start":{"line":764,"column":6},"end":{"line":764,"column":42}},"440":{"start":{"line":766,"column":4},"end":{"line":766,"column":22}},"441":{"start":{"line":769,"column":21},"end":{"line":769,"column":57}},"442":{"start":{"line":770,"column":4},"end":{"line":770,"column":24}},"443":{"start":{"line":779,"column":22},"end":{"line":779,"column":81}},"444":{"start":{"line":780,"column":25},"end":{"line":780,"column":67}},"445":{"start":{"line":781,"column":4},"end":{"line":783,"column":5}},"446":{"start":{"line":782,"column":6},"end":{"line":782,"column":18}},"447":{"start":{"line":784,"column":4},"end":{"line":786,"column":5}},"448":{"start":{"line":785,"column":6},"end":{"line":785,"column":18}},"449":{"start":{"line":787,"column":4},"end":{"line":792,"column":5}},"450":{"start":{"line":788,"column":27},"end":{"line":788,"column":90}},"451":{"start":{"line":789,"column":6},"end":{"line":791,"column":7}},"452":{"start":{"line":790,"column":8},"end":{"line":790,"column":20}},"453":{"start":{"line":793,"column":4},"end":{"line":793,"column":17}},"454":{"start":{"line":796,"column":16},"end":{"line":796,"column":24}},"455":{"start":{"line":797,"column":4},"end":{"line":803,"column":5}},"456":{"start":{"line":798,"column":20},"end":{"line":798,"column":31}},"457":{"start":{"line":799,"column":6},"end":{"line":801,"column":7}},"458":{"start":{"line":800,"column":8},"end":{"line":800,"column":21}},"459":{"start":{"line":802,"column":6},"end":{"line":802,"column":14}},"460":{"start":{"line":806,"column":16},"end":{"line":806,"column":24}},"461":{"start":{"line":807,"column":29},"end":{"line":807,"column":30}},"462":{"start":{"line":808,"column":4},"end":{"line":817,"column":5}},"463":{"start":{"line":809,"column":20},"end":{"line":809,"column":31}},"464":{"start":{"line":810,"column":6},"end":{"line":815,"column":7}},"465":{"start":{"line":811,"column":8},"end":{"line":811,"column":29}},"466":{"start":{"line":812,"column":8},"end":{"line":814,"column":9}},"467":{"start":{"line":813,"column":10},"end":{"line":813,"column":23}},"468":{"start":{"line":816,"column":6},"end":{"line":816,"column":14}},"469":{"start":{"line":818,"column":4},"end":{"line":818,"column":16}},"470":{"start":{"line":821,"column":16},"end":{"line":821,"column":24}},"471":{"start":{"line":822,"column":4},"end":{"line":828,"column":5}},"472":{"start":{"line":823,"column":20},"end":{"line":823,"column":31}},"473":{"start":{"line":824,"column":6},"end":{"line":826,"column":7}},"474":{"start":{"line":825,"column":8},"end":{"line":825,"column":21}},"475":{"start":{"line":827,"column":6},"end":{"line":827,"column":14}},"476":{"start":{"line":831,"column":4},"end":{"line":836,"column":5}},"477":{"start":{"line":835,"column":6},"end":{"line":835,"column":18}},"478":{"start":{"line":837,"column":4},"end":{"line":837,"column":17}},"479":{"start":{"line":840,"column":4},"end":{"line":842,"column":5}},"480":{"start":{"line":841,"column":6},"end":{"line":841,"column":18}},"481":{"start":{"line":843,"column":4},"end":{"line":843,"column":17}},"482":{"start":{"line":846,"column":4},"end":{"line":848,"column":5}},"483":{"start":{"line":847,"column":6},"end":{"line":847,"column":18}},"484":{"start":{"line":849,"column":4},"end":{"line":849,"column":17}},"485":{"start":{"line":852,"column":26},"end":{"line":852,"column":28}},"486":{"start":{"line":853,"column":4},"end":{"line":853,"column":50}},"487":{"start":{"line":854,"column":4},"end":{"line":854,"column":25}},"488":{"start":{"line":857,"column":4},"end":{"line":857,"column":45}},"489":{"start":{"line":858,"column":4},"end":{"line":858,"column":22}},"490":{"start":{"line":859,"column":4},"end":{"line":859,"column":23}},"491":{"start":{"line":860,"column":4},"end":{"line":860,"column":28}},"492":{"start":{"line":861,"column":4},"end":{"line":861,"column":26}},"493":{"start":{"line":862,"column":4},"end":{"line":862,"column":35}},"494":{"start":{"line":863,"column":4},"end":{"line":863,"column":35}},"495":{"start":{"line":864,"column":4},"end":{"line":864,"column":30}},"496":{"start":{"line":865,"column":4},"end":{"line":865,"column":29}},"497":{"start":{"line":866,"column":4},"end":{"line":866,"column":32}},"498":{"start":{"line":869,"column":4},"end":{"line":871,"column":5}},"499":{"start":{"line":870,"column":6},"end":{"line":870,"column":18}},"500":{"start":{"line":872,"column":4},"end":{"line":874,"column":5}},"501":{"start":{"line":873,"column":6},"end":{"line":873,"column":18}},"502":{"start":{"line":875,"column":4},"end":{"line":877,"column":5}},"503":{"start":{"line":876,"column":6},"end":{"line":876,"column":18}},"504":{"start":{"line":878,"column":4},"end":{"line":880,"column":5}},"505":{"start":{"line":879,"column":6},"end":{"line":879,"column":18}},"506":{"start":{"line":881,"column":4},"end":{"line":883,"column":5}},"507":{"start":{"line":882,"column":6},"end":{"line":882,"column":18}},"508":{"start":{"line":884,"column":4},"end":{"line":884,"column":17}},"509":{"start":{"line":887,"column":14},"end":{"line":887,"column":20}},"510":{"start":{"line":888,"column":4},"end":{"line":890,"column":5}},"511":{"start":{"line":889,"column":6},"end":{"line":889,"column":18}},"512":{"start":{"line":891,"column":22},"end":{"line":891,"column":47}},"513":{"start":{"line":892,"column":4},"end":{"line":894,"column":5}},"514":{"start":{"line":893,"column":6},"end":{"line":893,"column":46}},"515":{"start":{"line":895,"column":4},"end":{"line":897,"column":5}},"516":{"start":{"line":896,"column":6},"end":{"line":896,"column":18}},"517":{"start":{"line":898,"column":4},"end":{"line":898,"column":17}},"518":{"start":{"line":901,"column":22},"end":{"line":901,"column":68}},"519":{"start":{"line":902,"column":4},"end":{"line":904,"column":5}},"520":{"start":{"line":903,"column":6},"end":{"line":903,"column":19}},"521":{"start":{"line":905,"column":4},"end":{"line":905,"column":16}},"522":{"start":{"line":908,"column":4},"end":{"line":914,"column":5}},"523":{"start":{"line":908,"column":17},"end":{"line":908,"column":18}},"524":{"start":{"line":909,"column":29},"end":{"line":909,"column":54}},"525":{"start":{"line":910,"column":24},"end":{"line":910,"column":104}},"526":{"start":{"line":911,"column":6},"end":{"line":913,"column":7}},"527":{"start":{"line":912,"column":8},"end":{"line":912,"column":25}},"528":{"start":{"line":918,"column":24},"end":{"line":918,"column":101}},"529":{"start":{"line":919,"column":4},"end":{"line":921,"column":5}},"530":{"start":{"line":920,"column":6},"end":{"line":920,"column":49}},"531":{"start":{"line":922,"column":31},"end":{"line":922,"column":54}},"532":{"start":{"line":923,"column":36},"end":{"line":923,"column":61}},"533":{"start":{"line":924,"column":14},"end":{"line":924,"column":15}},"534":{"start":{"line":925,"column":4},"end":{"line":925,"column":22}},"535":{"start":{"line":926,"column":4},"end":{"line":928,"column":5}},"536":{"start":{"line":927,"column":6},"end":{"line":927,"column":34}},"537":{"start":{"line":929,"column":4},"end":{"line":1239,"column":5}},"538":{"start":{"line":930,"column":28},"end":{"line":930,"column":51}},"539":{"start":{"line":931,"column":6},"end":{"line":933,"column":7}},"540":{"start":{"line":932,"column":8},"end":{"line":932,"column":55}},"541":{"start":{"line":934,"column":6},"end":{"line":1236,"column":7}},"542":{"start":{"line":935,"column":26},"end":{"line":935,"column":72}},"543":{"start":{"line":936,"column":8},"end":{"line":938,"column":9}},"544":{"start":{"line":937,"column":10},"end":{"line":937,"column":33}},"545":{"start":{"line":939,"column":8},"end":{"line":939,"column":44}},"546":{"start":{"line":940,"column":8},"end":{"line":945,"column":9}},"547":{"start":{"line":940,"column":21},"end":{"line":940,"column":22}},"548":{"start":{"line":941,"column":25},"end":{"line":941,"column":48}},"549":{"start":{"line":942,"column":10},"end":{"line":942,"column":36}},"550":{"start":{"line":943,"column":10},"end":{"line":943,"column":61}},"551":{"start":{"line":944,"column":10},"end":{"line":944,"column":16}},"552":{"start":{"line":946,"column":8},"end":{"line":946,"column":29}},"553":{"start":{"line":947,"column":8},"end":{"line":947,"column":17}},"554":{"start":{"line":948,"column":13},"end":{"line":1236,"column":7}},"555":{"start":{"line":949,"column":8},"end":{"line":974,"column":9}},"556":{"start":{"line":950,"column":10},"end":{"line":953,"column":11}},"557":{"start":{"line":951,"column":12},"end":{"line":951,"column":65}},"558":{"start":{"line":952,"column":12},"end":{"line":952,"column":33}},"559":{"start":{"line":954,"column":10},"end":{"line":954,"column":46}},"560":{"start":{"line":955,"column":10},"end":{"line":955,"column":30}},"561":{"start":{"line":956,"column":36},"end":{"line":956,"column":63}},"562":{"start":{"line":957,"column":10},"end":{"line":969,"column":11}},"563":{"start":{"line":958,"column":12},"end":{"line":960,"column":13}},"564":{"start":{"line":959,"column":14},"end":{"line":959,"column":37}},"565":{"start":{"line":961,"column":12},"end":{"line":961,"column":70}},"566":{"start":{"line":962,"column":12},"end":{"line":962,"column":18}},"567":{"start":{"line":963,"column":12},"end":{"line":963,"column":74}},"568":{"start":{"line":964,"column":12},"end":{"line":964,"column":18}},"569":{"start":{"line":965,"column":12},"end":{"line":965,"column":33}},"570":{"start":{"line":966,"column":12},"end":{"line":966,"column":21}},"571":{"start":{"line":967,"column":17},"end":{"line":969,"column":11}},"572":{"start":{"line":968,"column":12},"end":{"line":968,"column":80}},"573":{"start":{"line":971,"column":10},"end":{"line":971,"column":50}},"574":{"start":{"line":972,"column":10},"end":{"line":972,"column":44}},"575":{"start":{"line":973,"column":10},"end":{"line":973,"column":31}},"576":{"start":{"line":975,"column":13},"end":{"line":1236,"column":7}},"577":{"start":{"line":976,"column":8},"end":{"line":978,"column":9}},"578":{"start":{"line":977,"column":10},"end":{"line":977,"column":38}},"579":{"start":{"line":979,"column":8},"end":{"line":979,"column":48}},"580":{"start":{"line":980,"column":8},"end":{"line":980,"column":29}},"581":{"start":{"line":981,"column":31},"end":{"line":981,"column":56}},"582":{"start":{"line":982,"column":8},"end":{"line":999,"column":9}},"583":{"start":{"line":983,"column":10},"end":{"line":983,"column":50}},"584":{"start":{"line":984,"column":15},"end":{"line":999,"column":9}},"585":{"start":{"line":985,"column":36},"end":{"line":985,"column":63}},"586":{"start":{"line":986,"column":10},"end":{"line":996,"column":11}},"587":{"start":{"line":987,"column":12},"end":{"line":989,"column":13}},"588":{"start":{"line":988,"column":14},"end":{"line":988,"column":37}},"589":{"start":{"line":990,"column":12},"end":{"line":990,"column":93}},"590":{"start":{"line":991,"column":12},"end":{"line":991,"column":31}},"591":{"start":{"line":993,"column":12},"end":{"line":995,"column":13}},"592":{"start":{"line":994,"column":14},"end":{"line":994,"column":37}},"593":{"start":{"line":998,"column":10},"end":{"line":998,"column":33}},"594":{"start":{"line":1000,"column":8},"end":{"line":1000,"column":29}},"595":{"start":{"line":1001,"column":13},"end":{"line":1236,"column":7}},"596":{"start":{"line":1002,"column":8},"end":{"line":1002,"column":41}},"597":{"start":{"line":1003,"column":8},"end":{"line":1003,"column":27}},"598":{"start":{"line":1004,"column":8},"end":{"line":1006,"column":9}},"599":{"start":{"line":1005,"column":10},"end":{"line":1005,"column":33}},"600":{"start":{"line":1007,"column":13},"end":{"line":1236,"column":7}},"601":{"start":{"line":1008,"column":8},"end":{"line":1008,"column":41}},"602":{"start":{"line":1009,"column":8},"end":{"line":1009,"column":48}},"603":{"start":{"line":1010,"column":8},"end":{"line":1010,"column":29}},"604":{"start":{"line":1011,"column":8},"end":{"line":1011,"column":28}},"605":{"start":{"line":1012,"column":13},"end":{"line":1236,"column":7}},"606":{"start":{"line":1013,"column":8},"end":{"line":1015,"column":9}},"607":{"start":{"line":1014,"column":10},"end":{"line":1014,"column":35}},"608":{"start":{"line":1016,"column":8},"end":{"line":1016,"column":41}},"609":{"start":{"line":1017,"column":8},"end":{"line":1017,"column":34}},"610":{"start":{"line":1018,"column":13},"end":{"line":1236,"column":7}},"611":{"start":{"line":1019,"column":8},"end":{"line":1019,"column":35}},"612":{"start":{"line":1020,"column":8},"end":{"line":1029,"column":9}},"613":{"start":{"line":1021,"column":10},"end":{"line":1021,"column":43}},"614":{"start":{"line":1022,"column":10},"end":{"line":1025,"column":11}},"615":{"start":{"line":1023,"column":12},"end":{"line":1023,"column":52}},"616":{"start":{"line":1024,"column":12},"end":{"line":1024,"column":33}},"617":{"start":{"line":1026,"column":10},"end":{"line":1026,"column":36}},"618":{"start":{"line":1028,"column":10},"end":{"line":1028,"column":43}},"619":{"start":{"line":1030,"column":13},"end":{"line":1236,"column":7}},"620":{"start":{"line":1031,"column":8},"end":{"line":1040,"column":9}},"621":{"start":{"line":1032,"column":10},"end":{"line":1032,"column":38}},"622":{"start":{"line":1034,"column":36},"end":{"line":1034,"column":63}},"623":{"start":{"line":1035,"column":10},"end":{"line":1039,"column":11}},"624":{"start":{"line":1036,"column":12},"end":{"line":1036,"column":18}},"625":{"start":{"line":1038,"column":12},"end":{"line":1038,"column":41}},"626":{"start":{"line":1041,"column":8},"end":{"line":1041,"column":41}},"627":{"start":{"line":1042,"column":13},"end":{"line":1236,"column":7}},"628":{"start":{"line":1043,"column":8},"end":{"line":1061,"column":9}},"629":{"start":{"line":1044,"column":10},"end":{"line":1044,"column":38}},"630":{"start":{"line":1045,"column":10},"end":{"line":1047,"column":11}},"631":{"start":{"line":1046,"column":12},"end":{"line":1046,"column":33}},"632":{"start":{"line":1049,"column":36},"end":{"line":1049,"column":63}},"633":{"start":{"line":1050,"column":10},"end":{"line":1060,"column":11}},"634":{"start":{"line":1051,"column":12},"end":{"line":1051,"column":45}},"635":{"start":{"line":1052,"column":12},"end":{"line":1052,"column":70}},"636":{"start":{"line":1053,"column":12},"end":{"line":1053,"column":18}},"637":{"start":{"line":1054,"column":12},"end":{"line":1054,"column":49}},"638":{"start":{"line":1055,"column":12},"end":{"line":1055,"column":74}},"639":{"start":{"line":1056,"column":12},"end":{"line":1056,"column":18}},"640":{"start":{"line":1057,"column":12},"end":{"line":1057,"column":21}},"641":{"start":{"line":1059,"column":12},"end":{"line":1059,"column":41}},"642":{"start":{"line":1062,"column":8},"end":{"line":1062,"column":41}},"643":{"start":{"line":1063,"column":13},"end":{"line":1236,"column":7}},"644":{"start":{"line":1064,"column":8},"end":{"line":1066,"column":9}},"645":{"start":{"line":1065,"column":10},"end":{"line":1065,"column":38}},"646":{"start":{"line":1067,"column":31},"end":{"line":1067,"column":56}},"647":{"start":{"line":1068,"column":8},"end":{"line":1098,"column":9}},"648":{"start":{"line":1069,"column":10},"end":{"line":1069,"column":50}},"649":{"start":{"line":1070,"column":10},"end":{"line":1070,"column":31}},"650":{"start":{"line":1071,"column":10},"end":{"line":1073,"column":11}},"651":{"start":{"line":1072,"column":12},"end":{"line":1072,"column":35}},"652":{"start":{"line":1074,"column":10},"end":{"line":1074,"column":78}},"653":{"start":{"line":1076,"column":27},"end":{"line":1076,"column":42}},"654":{"start":{"line":1077,"column":10},"end":{"line":1077,"column":62}},"655":{"start":{"line":1078,"column":32},"end":{"line":1078,"column":47}},"656":{"start":{"line":1079,"column":10},"end":{"line":1079,"column":63}},"657":{"start":{"line":1080,"column":10},"end":{"line":1080,"column":49}},"658":{"start":{"line":1081,"column":28},"end":{"line":1081,"column":62}},"659":{"start":{"line":1082,"column":10},"end":{"line":1092,"column":11}},"660":{"start":{"line":1083,"column":36},"end":{"line":1083,"column":57}},"661":{"start":{"line":1084,"column":12},"end":{"line":1086,"column":13}},"662":{"start":{"line":1085,"column":14},"end":{"line":1085,"column":37}},"663":{"start":{"line":1087,"column":12},"end":{"line":1087,"column":52}},"664":{"start":{"line":1088,"column":12},"end":{"line":1088,"column":44}},"665":{"start":{"line":1089,"column":12},"end":{"line":1089,"column":53}},"666":{"start":{"line":1091,"column":12},"end":{"line":1091,"column":35}},"667":{"start":{"line":1093,"column":10},"end":{"line":1093,"column":55}},"668":{"start":{"line":1094,"column":10},"end":{"line":1094,"column":50}},"669":{"start":{"line":1095,"column":10},"end":{"line":1095,"column":31}},"670":{"start":{"line":1096,"column":10},"end":{"line":1096,"column":44}},"671":{"start":{"line":1097,"column":10},"end":{"line":1097,"column":78}},"672":{"start":{"line":1099,"column":13},"end":{"line":1236,"column":7}},"673":{"start":{"line":1100,"column":32},"end":{"line":1100,"column":47}},"674":{"start":{"line":1101,"column":8},"end":{"line":1101,"column":48}},"675":{"start":{"line":1102,"column":34},"end":{"line":1102,"column":49}},"676":{"start":{"line":1103,"column":8},"end":{"line":1103,"column":65}},"677":{"start":{"line":1104,"column":8},"end":{"line":1104,"column":53}},"678":{"start":{"line":1105,"column":35},"end":{"line":1105,"column":50}},"679":{"start":{"line":1106,"column":8},"end":{"line":1106,"column":66}},"680":{"start":{"line":1107,"column":8},"end":{"line":1107,"column":54}},"681":{"start":{"line":1108,"column":8},"end":{"line":1108,"column":82}},"682":{"start":{"line":1109,"column":32},"end":{"line":1109,"column":47}},"683":{"start":{"line":1110,"column":22},"end":{"line":1110,"column":23}},"684":{"start":{"line":1111,"column":8},"end":{"line":1162,"column":9}},"685":{"start":{"line":1114,"column":28},"end":{"line":1114,"column":29}},"686":{"start":{"line":1115,"column":30},"end":{"line":1115,"column":50}},"687":{"start":{"line":1116,"column":29},"end":{"line":1116,"column":43}},"688":{"start":{"line":1117,"column":32},"end":{"line":1117,"column":46}},"689":{"start":{"line":1118,"column":10},"end":{"line":1122,"column":11}},"690":{"start":{"line":1119,"column":12},"end":{"line":1119,"column":49}},"691":{"start":{"line":1120,"column":12},"end":{"line":1120,"column":59}},"692":{"start":{"line":1121,"column":12},"end":{"line":1121,"column":26}},"693":{"start":{"line":1123,"column":10},"end":{"line":1131,"column":11}},"694":{"start":{"line":1124,"column":12},"end":{"line":1124,"column":46}},"695":{"start":{"line":1125,"column":12},"end":{"line":1125,"column":53}},"696":{"start":{"line":1126,"column":12},"end":{"line":1129,"column":13}},"697":{"start":{"line":1127,"column":14},"end":{"line":1127,"column":62}},"698":{"start":{"line":1128,"column":14},"end":{"line":1128,"column":60}},"699":{"start":{"line":1130,"column":12},"end":{"line":1130,"column":26}},"700":{"start":{"line":1132,"column":10},"end":{"line":1134,"column":11}},"701":{"start":{"line":1133,"column":12},"end":{"line":1133,"column":59}},"702":{"start":{"line":1135,"column":10},"end":{"line":1135,"column":32}},"703":{"start":{"line":1136,"column":10},"end":{"line":1151,"column":11}},"704":{"start":{"line":1137,"column":12},"end":{"line":1137,"column":57}},"705":{"start":{"line":1138,"column":12},"end":{"line":1138,"column":55}},"706":{"start":{"line":1139,"column":12},"end":{"line":1146,"column":13}},"707":{"start":{"line":1140,"column":27},"end":{"line":1140,"column":54}},"708":{"start":{"line":1141,"column":14},"end":{"line":1143,"column":15}},"709":{"start":{"line":1142,"column":16},"end":{"line":1142,"column":41}},"710":{"start":{"line":1145,"column":14},"end":{"line":1145,"column":50}},"711":{"start":{"line":1147,"column":17},"end":{"line":1151,"column":11}},"712":{"start":{"line":1148,"column":12},"end":{"line":1148,"column":51}},"713":{"start":{"line":1149,"column":12},"end":{"line":1149,"column":60}},"714":{"start":{"line":1150,"column":12},"end":{"line":1150,"column":58}},"715":{"start":{"line":1152,"column":35},"end":{"line":1152,"column":50}},"716":{"start":{"line":1153,"column":10},"end":{"line":1153,"column":51}},"717":{"start":{"line":1154,"column":10},"end":{"line":1154,"column":56}},"718":{"start":{"line":1155,"column":10},"end":{"line":1155,"column":65}},"719":{"start":{"line":1156,"column":10},"end":{"line":1156,"column":31}},"720":{"start":{"line":1158,"column":32},"end":{"line":1158,"column":68}},"721":{"start":{"line":1159,"column":10},"end":{"line":1161,"column":11}},"722":{"start":{"line":1160,"column":12},"end":{"line":1160,"column":60}},"723":{"start":{"line":1163,"column":8},"end":{"line":1163,"column":53}},"724":{"start":{"line":1164,"column":8},"end":{"line":1164,"column":52}},"725":{"start":{"line":1165,"column":8},"end":{"line":1165,"column":33}},"726":{"start":{"line":1166,"column":13},"end":{"line":1236,"column":7}},"727":{"start":{"line":1167,"column":8},"end":{"line":1167,"column":48}},"728":{"start":{"line":1168,"column":29},"end":{"line":1168,"column":44}},"729":{"start":{"line":1169,"column":8},"end":{"line":1169,"column":45}},"730":{"start":{"line":1170,"column":30},"end":{"line":1170,"column":57}},"731":{"start":{"line":1171,"column":8},"end":{"line":1176,"column":9}},"732":{"start":{"line":1172,"column":10},"end":{"line":1172,"column":53}},"733":{"start":{"line":1173,"column":15},"end":{"line":1176,"column":9}},"734":{"start":{"line":1174,"column":10},"end":{"line":1174,"column":57}},"735":{"start":{"line":1175,"column":10},"end":{"line":1175,"column":34}},"736":{"start":{"line":1177,"column":8},"end":{"line":1177,"column":47}},"737":{"start":{"line":1178,"column":8},"end":{"line":1178,"column":55}},"738":{"start":{"line":1179,"column":8},"end":{"line":1179,"column":29}},"739":{"start":{"line":1180,"column":13},"end":{"line":1236,"column":7}},"740":{"start":{"line":1181,"column":26},"end":{"line":1181,"column":46}},"741":{"start":{"line":1182,"column":8},"end":{"line":1216,"column":9}},"742":{"start":{"line":1183,"column":29},"end":{"line":1183,"column":87}},"743":{"start":{"line":1184,"column":29},"end":{"line":1184,"column":83}},"744":{"start":{"line":1185,"column":10},"end":{"line":1205,"column":11}},"745":{"start":{"line":1186,"column":12},"end":{"line":1186,"column":42}},"746":{"start":{"line":1187,"column":12},"end":{"line":1187,"column":58}},"747":{"start":{"line":1188,"column":12},"end":{"line":1188,"column":70}},"748":{"start":{"line":1189,"column":12},"end":{"line":1189,"column":33}},"749":{"start":{"line":1190,"column":12},"end":{"line":1190,"column":18}},"750":{"start":{"line":1191,"column":12},"end":{"line":1191,"column":21}},"751":{"start":{"line":1192,"column":17},"end":{"line":1205,"column":11}},"752":{"start":{"line":1193,"column":12},"end":{"line":1204,"column":13}},"753":{"start":{"line":1194,"column":14},"end":{"line":1194,"column":53}},"754":{"start":{"line":1195,"column":14},"end":{"line":1195,"column":72}},"755":{"start":{"line":1196,"column":14},"end":{"line":1196,"column":81}},"756":{"start":{"line":1197,"column":14},"end":{"line":1197,"column":23}},"757":{"start":{"line":1198,"column":14},"end":{"line":1198,"column":23}},"758":{"start":{"line":1200,"column":14},"end":{"line":1200,"column":53}},"759":{"start":{"line":1201,"column":14},"end":{"line":1201,"column":72}},"760":{"start":{"line":1202,"column":14},"end":{"line":1202,"column":20}},"761":{"start":{"line":1203,"column":14},"end":{"line":1203,"column":23}},"762":{"start":{"line":1206,"column":15},"end":{"line":1216,"column":9}},"763":{"start":{"line":1207,"column":10},"end":{"line":1207,"column":43}},"764":{"start":{"line":1208,"column":10},"end":{"line":1208,"column":68}},"765":{"start":{"line":1209,"column":10},"end":{"line":1209,"column":16}},"766":{"start":{"line":1210,"column":10},"end":{"line":1210,"column":19}},"767":{"start":{"line":1211,"column":15},"end":{"line":1216,"column":9}},"768":{"start":{"line":1212,"column":10},"end":{"line":1212,"column":38}},"769":{"start":{"line":1214,"column":10},"end":{"line":1214,"column":50}},"770":{"start":{"line":1215,"column":10},"end":{"line":1215,"column":27}},"771":{"start":{"line":1217,"column":8},"end":{"line":1232,"column":9}},"772":{"start":{"line":1218,"column":36},"end":{"line":1218,"column":63}},"773":{"start":{"line":1219,"column":10},"end":{"line":1229,"column":11}},"774":{"start":{"line":1220,"column":12},"end":{"line":1220,"column":86}},"775":{"start":{"line":1221,"column":12},"end":{"line":1221,"column":33}},"776":{"start":{"line":1222,"column":12},"end":{"line":1222,"column":70}},"777":{"start":{"line":1223,"column":12},"end":{"line":1223,"column":18}},"778":{"start":{"line":1224,"column":12},"end":{"line":1224,"column":74}},"779":{"start":{"line":1225,"column":12},"end":{"line":1225,"column":18}},"780":{"start":{"line":1226,"column":12},"end":{"line":1226,"column":21}},"781":{"start":{"line":1228,"column":12},"end":{"line":1228,"column":66}},"782":{"start":{"line":1231,"column":10},"end":{"line":1231,"column":64}},"783":{"start":{"line":1233,"column":8},"end":{"line":1233,"column":29}},"784":{"start":{"line":1235,"column":8},"end":{"line":1235,"column":41}},"785":{"start":{"line":1237,"column":6},"end":{"line":1237,"column":64}},"786":{"start":{"line":1238,"column":6},"end":{"line":1238,"column":12}},"787":{"start":{"line":1240,"column":4},"end":{"line":1240,"column":44}},"788":{"start":{"line":1241,"column":4},"end":{"line":1243,"column":5}},"789":{"start":{"line":1242,"column":6},"end":{"line":1242,"column":29}},"790":{"start":{"line":1246,"column":23},"end":{"line":1246,"column":50}},"791":{"start":{"line":1247,"column":4},"end":{"line":1249,"column":5}},"792":{"start":{"line":1248,"column":6},"end":{"line":1248,"column":19}},"793":{"start":{"line":1250,"column":4},"end":{"line":1252,"column":5}},"794":{"start":{"line":1251,"column":6},"end":{"line":1251,"column":19}},"795":{"start":{"line":1253,"column":24},"end":{"line":1253,"column":51}},"796":{"start":{"line":1254,"column":4},"end":{"line":1256,"column":5}},"797":{"start":{"line":1255,"column":6},"end":{"line":1255,"column":19}},"798":{"start":{"line":1257,"column":23},"end":{"line":1257,"column":50}},"799":{"start":{"line":1258,"column":4},"end":{"line":1258,"column":58}},"800":{"start":{"line":1261,"column":4},"end":{"line":1266,"column":7}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":26,"column":35},"end":{"line":26,"column":36}},"loc":{"start":{"line":26,"column":53},"end":{"line":31,"column":1}},"line":26},"1":{"name":"(anonymous_1)","decl":{"start":{"line":55,"column":2},"end":{"line":55,"column":3}},"loc":{"start":{"line":55,"column":12},"end":{"line":60,"column":3}},"line":55},"2":{"name":"(anonymous_2)","decl":{"start":{"line":61,"column":2},"end":{"line":61,"column":3}},"loc":{"start":{"line":61,"column":15},"end":{"line":63,"column":3}},"line":61},"3":{"name":"(anonymous_3)","decl":{"start":{"line":64,"column":2},"end":{"line":64,"column":3}},"loc":{"start":{"line":64,"column":17},"end":{"line":66,"column":3}},"line":64},"4":{"name":"(anonymous_4)","decl":{"start":{"line":67,"column":2},"end":{"line":67,"column":3}},"loc":{"start":{"line":67,"column":16},"end":{"line":69,"column":3}},"line":67},"5":{"name":"(anonymous_5)","decl":{"start":{"line":70,"column":2},"end":{"line":70,"column":3}},"loc":{"start":{"line":70,"column":27},"end":{"line":72,"column":3}},"line":70},"6":{"name":"(anonymous_6)","decl":{"start":{"line":73,"column":2},"end":{"line":73,"column":3}},"loc":{"start":{"line":73,"column":17},"end":{"line":75,"column":3}},"line":73},"7":{"name":"(anonymous_7)","decl":{"start":{"line":76,"column":2},"end":{"line":76,"column":3}},"loc":{"start":{"line":76,"column":18},"end":{"line":78,"column":3}},"line":76},"8":{"name":"(anonymous_8)","decl":{"start":{"line":79,"column":2},"end":{"line":79,"column":3}},"loc":{"start":{"line":79,"column":27},"end":{"line":81,"column":3}},"line":79},"9":{"name":"(anonymous_9)","decl":{"start":{"line":82,"column":2},"end":{"line":82,"column":3}},"loc":{"start":{"line":82,"column":18},"end":{"line":84,"column":3}},"line":82},"10":{"name":"(anonymous_10)","decl":{"start":{"line":85,"column":2},"end":{"line":85,"column":3}},"loc":{"start":{"line":85,"column":19},"end":{"line":87,"column":3}},"line":85},"11":{"name":"(anonymous_11)","decl":{"start":{"line":88,"column":2},"end":{"line":88,"column":3}},"loc":{"start":{"line":88,"column":25},"end":{"line":90,"column":3}},"line":88},"12":{"name":"(anonymous_12)","decl":{"start":{"line":91,"column":2},"end":{"line":91,"column":3}},"loc":{"start":{"line":91,"column":24},"end":{"line":93,"column":3}},"line":91},"13":{"name":"(anonymous_13)","decl":{"start":{"line":94,"column":2},"end":{"line":94,"column":3}},"loc":{"start":{"line":94,"column":51},"end":{"line":117,"column":3}},"line":94},"14":{"name":"(anonymous_14)","decl":{"start":{"line":122,"column":2},"end":{"line":122,"column":3}},"loc":{"start":{"line":122,"column":35},"end":{"line":157,"column":3}},"line":122},"15":{"name":"(anonymous_15)","decl":{"start":{"line":158,"column":2},"end":{"line":158,"column":3}},"loc":{"start":{"line":158,"column":38},"end":{"line":170,"column":3}},"line":158},"16":{"name":"(anonymous_16)","decl":{"start":{"line":171,"column":2},"end":{"line":171,"column":3}},"loc":{"start":{"line":171,"column":106},"end":{"line":219,"column":3}},"line":171},"17":{"name":"(anonymous_17)","decl":{"start":{"line":220,"column":2},"end":{"line":220,"column":3}},"loc":{"start":{"line":220,"column":86},"end":{"line":258,"column":3}},"line":220},"18":{"name":"(anonymous_18)","decl":{"start":{"line":263,"column":2},"end":{"line":263,"column":3}},"loc":{"start":{"line":263,"column":23},"end":{"line":275,"column":3}},"line":263},"19":{"name":"(anonymous_19)","decl":{"start":{"line":277,"column":2},"end":{"line":277,"column":3}},"loc":{"start":{"line":277,"column":33},"end":{"line":320,"column":3}},"line":277},"20":{"name":"(anonymous_20)","decl":{"start":{"line":321,"column":2},"end":{"line":321,"column":3}},"loc":{"start":{"line":321,"column":97},"end":{"line":332,"column":3}},"line":321},"21":{"name":"(anonymous_21)","decl":{"start":{"line":333,"column":2},"end":{"line":333,"column":3}},"loc":{"start":{"line":333,"column":46},"end":{"line":335,"column":3}},"line":333},"22":{"name":"(anonymous_22)","decl":{"start":{"line":336,"column":2},"end":{"line":336,"column":3}},"loc":{"start":{"line":336,"column":26},"end":{"line":338,"column":3}},"line":336},"23":{"name":"(anonymous_23)","decl":{"start":{"line":343,"column":2},"end":{"line":343,"column":3}},"loc":{"start":{"line":343,"column":45},"end":{"line":376,"column":3}},"line":343},"24":{"name":"(anonymous_24)","decl":{"start":{"line":380,"column":2},"end":{"line":380,"column":3}},"loc":{"start":{"line":380,"column":41},"end":{"line":415,"column":3}},"line":380},"25":{"name":"(anonymous_25)","decl":{"start":{"line":416,"column":2},"end":{"line":416,"column":3}},"loc":{"start":{"line":416,"column":57},"end":{"line":419,"column":3}},"line":416},"26":{"name":"(anonymous_26)","decl":{"start":{"line":420,"column":2},"end":{"line":420,"column":3}},"loc":{"start":{"line":420,"column":31},"end":{"line":422,"column":3}},"line":420},"27":{"name":"(anonymous_27)","decl":{"start":{"line":423,"column":2},"end":{"line":423,"column":3}},"loc":{"start":{"line":423,"column":96},"end":{"line":470,"column":3}},"line":423},"28":{"name":"(anonymous_28)","decl":{"start":{"line":472,"column":2},"end":{"line":472,"column":3}},"loc":{"start":{"line":472,"column":38},"end":{"line":531,"column":3}},"line":472},"29":{"name":"(anonymous_29)","decl":{"start":{"line":532,"column":2},"end":{"line":532,"column":3}},"loc":{"start":{"line":532,"column":68},"end":{"line":544,"column":3}},"line":532},"30":{"name":"(anonymous_30)","decl":{"start":{"line":545,"column":2},"end":{"line":545,"column":3}},"loc":{"start":{"line":545,"column":76},"end":{"line":563,"column":3}},"line":545},"31":{"name":"(anonymous_31)","decl":{"start":{"line":564,"column":2},"end":{"line":564,"column":3}},"loc":{"start":{"line":564,"column":27},"end":{"line":566,"column":3}},"line":564},"32":{"name":"(anonymous_32)","decl":{"start":{"line":567,"column":2},"end":{"line":567,"column":3}},"loc":{"start":{"line":567,"column":26},"end":{"line":569,"column":3}},"line":567},"33":{"name":"(anonymous_33)","decl":{"start":{"line":570,"column":2},"end":{"line":570,"column":3}},"loc":{"start":{"line":570,"column":23},"end":{"line":578,"column":3}},"line":570},"34":{"name":"(anonymous_34)","decl":{"start":{"line":579,"column":2},"end":{"line":579,"column":3}},"loc":{"start":{"line":579,"column":33},"end":{"line":590,"column":3}},"line":579},"35":{"name":"(anonymous_35)","decl":{"start":{"line":591,"column":2},"end":{"line":591,"column":3}},"loc":{"start":{"line":591,"column":27},"end":{"line":593,"column":3}},"line":591},"36":{"name":"(anonymous_36)","decl":{"start":{"line":594,"column":2},"end":{"line":594,"column":3}},"loc":{"start":{"line":594,"column":18},"end":{"line":596,"column":3}},"line":594},"37":{"name":"(anonymous_37)","decl":{"start":{"line":597,"column":2},"end":{"line":597,"column":3}},"loc":{"start":{"line":597,"column":38},"end":{"line":599,"column":3}},"line":597},"38":{"name":"(anonymous_38)","decl":{"start":{"line":600,"column":2},"end":{"line":600,"column":3}},"loc":{"start":{"line":600,"column":18},"end":{"line":602,"column":3}},"line":600},"39":{"name":"(anonymous_39)","decl":{"start":{"line":603,"column":2},"end":{"line":603,"column":3}},"loc":{"start":{"line":603,"column":23},"end":{"line":605,"column":3}},"line":603},"40":{"name":"(anonymous_40)","decl":{"start":{"line":606,"column":2},"end":{"line":606,"column":3}},"loc":{"start":{"line":606,"column":24},"end":{"line":608,"column":3}},"line":606},"41":{"name":"(anonymous_41)","decl":{"start":{"line":609,"column":2},"end":{"line":609,"column":3}},"loc":{"start":{"line":609,"column":23},"end":{"line":612,"column":3}},"line":609},"42":{"name":"(anonymous_42)","decl":{"start":{"line":613,"column":2},"end":{"line":613,"column":3}},"loc":{"start":{"line":613,"column":30},"end":{"line":616,"column":3}},"line":613},"43":{"name":"(anonymous_43)","decl":{"start":{"line":617,"column":2},"end":{"line":617,"column":3}},"loc":{"start":{"line":617,"column":16},"end":{"line":619,"column":3}},"line":617},"44":{"name":"(anonymous_44)","decl":{"start":{"line":620,"column":2},"end":{"line":620,"column":3}},"loc":{"start":{"line":620,"column":17},"end":{"line":622,"column":3}},"line":620},"45":{"name":"(anonymous_45)","decl":{"start":{"line":623,"column":2},"end":{"line":623,"column":3}},"loc":{"start":{"line":623,"column":25},"end":{"line":625,"column":3}},"line":623},"46":{"name":"(anonymous_46)","decl":{"start":{"line":626,"column":2},"end":{"line":626,"column":3}},"loc":{"start":{"line":626,"column":26},"end":{"line":628,"column":3}},"line":626},"47":{"name":"(anonymous_47)","decl":{"start":{"line":629,"column":2},"end":{"line":629,"column":3}},"loc":{"start":{"line":629,"column":25},"end":{"line":631,"column":3}},"line":629},"48":{"name":"(anonymous_48)","decl":{"start":{"line":632,"column":2},"end":{"line":632,"column":3}},"loc":{"start":{"line":632,"column":26},"end":{"line":634,"column":3}},"line":632},"49":{"name":"(anonymous_49)","decl":{"start":{"line":635,"column":2},"end":{"line":635,"column":3}},"loc":{"start":{"line":635,"column":16},"end":{"line":637,"column":3}},"line":635},"50":{"name":"(anonymous_50)","decl":{"start":{"line":638,"column":2},"end":{"line":638,"column":3}},"loc":{"start":{"line":638,"column":17},"end":{"line":640,"column":3}},"line":638},"51":{"name":"(anonymous_51)","decl":{"start":{"line":641,"column":2},"end":{"line":641,"column":3}},"loc":{"start":{"line":641,"column":22},"end":{"line":644,"column":3}},"line":641},"52":{"name":"(anonymous_52)","decl":{"start":{"line":645,"column":2},"end":{"line":645,"column":3}},"loc":{"start":{"line":645,"column":16},"end":{"line":648,"column":3}},"line":645},"53":{"name":"(anonymous_53)","decl":{"start":{"line":649,"column":2},"end":{"line":649,"column":3}},"loc":{"start":{"line":649,"column":20},"end":{"line":651,"column":3}},"line":649},"54":{"name":"(anonymous_54)","decl":{"start":{"line":652,"column":2},"end":{"line":652,"column":3}},"loc":{"start":{"line":652,"column":22},"end":{"line":654,"column":3}},"line":652},"55":{"name":"(anonymous_55)","decl":{"start":{"line":655,"column":2},"end":{"line":655,"column":3}},"loc":{"start":{"line":655,"column":23},"end":{"line":657,"column":3}},"line":655},"56":{"name":"(anonymous_56)","decl":{"start":{"line":658,"column":2},"end":{"line":658,"column":3}},"loc":{"start":{"line":658,"column":25},"end":{"line":660,"column":3}},"line":658},"57":{"name":"(anonymous_57)","decl":{"start":{"line":661,"column":2},"end":{"line":661,"column":3}},"loc":{"start":{"line":661,"column":20},"end":{"line":663,"column":3}},"line":661},"58":{"name":"(anonymous_58)","decl":{"start":{"line":664,"column":2},"end":{"line":664,"column":3}},"loc":{"start":{"line":664,"column":34},"end":{"line":673,"column":3}},"line":664},"59":{"name":"(anonymous_59)","decl":{"start":{"line":674,"column":2},"end":{"line":674,"column":3}},"loc":{"start":{"line":674,"column":25},"end":{"line":681,"column":3}},"line":674},"60":{"name":"(anonymous_60)","decl":{"start":{"line":682,"column":2},"end":{"line":682,"column":3}},"loc":{"start":{"line":682,"column":31},"end":{"line":689,"column":3}},"line":682},"61":{"name":"(anonymous_61)","decl":{"start":{"line":690,"column":2},"end":{"line":690,"column":3}},"loc":{"start":{"line":690,"column":33},"end":{"line":722,"column":3}},"line":690},"62":{"name":"(anonymous_62)","decl":{"start":{"line":723,"column":2},"end":{"line":723,"column":3}},"loc":{"start":{"line":723,"column":18},"end":{"line":725,"column":3}},"line":723},"63":{"name":"(anonymous_63)","decl":{"start":{"line":726,"column":2},"end":{"line":726,"column":3}},"loc":{"start":{"line":726,"column":22},"end":{"line":728,"column":3}},"line":726},"64":{"name":"(anonymous_64)","decl":{"start":{"line":729,"column":2},"end":{"line":729,"column":3}},"loc":{"start":{"line":729,"column":51},"end":{"line":749,"column":3}},"line":729},"65":{"name":"(anonymous_65)","decl":{"start":{"line":750,"column":2},"end":{"line":750,"column":3}},"loc":{"start":{"line":750,"column":56},"end":{"line":754,"column":3}},"line":750},"66":{"name":"(anonymous_66)","decl":{"start":{"line":755,"column":2},"end":{"line":755,"column":3}},"loc":{"start":{"line":755,"column":65},"end":{"line":760,"column":3}},"line":755},"67":{"name":"(anonymous_67)","decl":{"start":{"line":761,"column":2},"end":{"line":761,"column":3}},"loc":{"start":{"line":761,"column":25},"end":{"line":767,"column":3}},"line":761},"68":{"name":"(anonymous_68)","decl":{"start":{"line":768,"column":2},"end":{"line":768,"column":3}},"loc":{"start":{"line":768,"column":21},"end":{"line":771,"column":3}},"line":768},"69":{"name":"(anonymous_69)","decl":{"start":{"line":778,"column":2},"end":{"line":778,"column":3}},"loc":{"start":{"line":778,"column":60},"end":{"line":794,"column":3}},"line":778},"70":{"name":"(anonymous_70)","decl":{"start":{"line":795,"column":2},"end":{"line":795,"column":3}},"loc":{"start":{"line":795,"column":37},"end":{"line":804,"column":3}},"line":795},"71":{"name":"(anonymous_71)","decl":{"start":{"line":805,"column":2},"end":{"line":805,"column":3}},"loc":{"start":{"line":805,"column":47},"end":{"line":819,"column":3}},"line":805},"72":{"name":"(anonymous_72)","decl":{"start":{"line":820,"column":2},"end":{"line":820,"column":3}},"loc":{"start":{"line":820,"column":33},"end":{"line":829,"column":3}},"line":820},"73":{"name":"(anonymous_73)","decl":{"start":{"line":830,"column":2},"end":{"line":830,"column":3}},"loc":{"start":{"line":830,"column":52},"end":{"line":838,"column":3}},"line":830},"74":{"name":"(anonymous_74)","decl":{"start":{"line":839,"column":2},"end":{"line":839,"column":3}},"loc":{"start":{"line":839,"column":37},"end":{"line":844,"column":3}},"line":839},"75":{"name":"(anonymous_75)","decl":{"start":{"line":845,"column":2},"end":{"line":845,"column":3}},"loc":{"start":{"line":845,"column":31},"end":{"line":850,"column":3}},"line":845},"76":{"name":"(anonymous_76)","decl":{"start":{"line":851,"column":2},"end":{"line":851,"column":3}},"loc":{"start":{"line":851,"column":35},"end":{"line":855,"column":3}},"line":851},"77":{"name":"(anonymous_77)","decl":{"start":{"line":856,"column":2},"end":{"line":856,"column":3}},"loc":{"start":{"line":856,"column":15},"end":{"line":867,"column":3}},"line":856},"78":{"name":"(anonymous_78)","decl":{"start":{"line":868,"column":2},"end":{"line":868,"column":3}},"loc":{"start":{"line":868,"column":21},"end":{"line":885,"column":3}},"line":868},"79":{"name":"(anonymous_79)","decl":{"start":{"line":886,"column":2},"end":{"line":886,"column":3}},"loc":{"start":{"line":886,"column":69},"end":{"line":899,"column":3}},"line":886},"80":{"name":"(anonymous_80)","decl":{"start":{"line":900,"column":2},"end":{"line":900,"column":3}},"loc":{"start":{"line":900,"column":47},"end":{"line":906,"column":3}},"line":900},"81":{"name":"(anonymous_81)","decl":{"start":{"line":907,"column":2},"end":{"line":907,"column":3}},"loc":{"start":{"line":907,"column":47},"end":{"line":915,"column":3}},"line":907},"82":{"name":"(anonymous_82)","decl":{"start":{"line":917,"column":2},"end":{"line":917,"column":3}},"loc":{"start":{"line":917,"column":69},"end":{"line":1244,"column":3}},"line":917},"83":{"name":"(anonymous_83)","decl":{"start":{"line":1245,"column":2},"end":{"line":1245,"column":3}},"loc":{"start":{"line":1245,"column":64},"end":{"line":1259,"column":3}},"line":1245},"84":{"name":"(anonymous_84)","decl":{"start":{"line":1260,"column":2},"end":{"line":1260,"column":3}},"loc":{"start":{"line":1260,"column":55},"end":{"line":1267,"column":3}},"line":1260}},"branchMap":{"0":{"loc":{"start":{"line":31,"column":3},"end":{"line":31,"column":20}},"type":"binary-expr","locations":[{"start":{"line":31,"column":3},"end":{"line":31,"column":14}},{"start":{"line":31,"column":18},"end":{"line":31,"column":20}}],"line":31},"1":{"loc":{"start":{"line":96,"column":4},"end":{"line":98,"column":5}},"type":"if","locations":[{"start":{"line":96,"column":4},"end":{"line":98,"column":5}},{"start":{},"end":{}}],"line":96},"2":{"loc":{"start":{"line":96,"column":8},"end":{"line":96,"column":54}},"type":"binary-expr","locations":[{"start":{"line":96,"column":8},"end":{"line":96,"column":23}},{"start":{"line":96,"column":27},"end":{"line":96,"column":54}}],"line":96},"3":{"loc":{"start":{"line":100,"column":4},"end":{"line":102,"column":5}},"type":"if","locations":[{"start":{"line":100,"column":4},"end":{"line":102,"column":5}},{"start":{},"end":{}}],"line":100},"4":{"loc":{"start":{"line":107,"column":6},"end":{"line":113,"column":7}},"type":"if","locations":[{"start":{"line":107,"column":6},"end":{"line":113,"column":7}},{"start":{},"end":{}}],"line":107},"5":{"loc":{"start":{"line":107,"column":10},"end":{"line":107,"column":112}},"type":"binary-expr","locations":[{"start":{"line":107,"column":10},"end":{"line":107,"column":48}},{"start":{"line":107,"column":52},"end":{"line":107,"column":79}},{"start":{"line":107,"column":83},"end":{"line":107,"column":112}}],"line":107},"6":{"loc":{"start":{"line":126,"column":11},"end":{"line":126,"column":92}},"type":"binary-expr","locations":[{"start":{"line":126,"column":12},"end":{"line":126,"column":51}},{"start":{"line":126,"column":55},"end":{"line":126,"column":73}},{"start":{"line":126,"column":78},"end":{"line":126,"column":92}}],"line":126},"7":{"loc":{"start":{"line":127,"column":6},"end":{"line":129,"column":7}},"type":"if","locations":[{"start":{"line":127,"column":6},"end":{"line":129,"column":7}},{"start":{},"end":{}}],"line":127},"8":{"loc":{"start":{"line":133,"column":4},"end":{"line":135,"column":5}},"type":"if","locations":[{"start":{"line":133,"column":4},"end":{"line":135,"column":5}},{"start":{},"end":{}}],"line":133},"9":{"loc":{"start":{"line":133,"column":8},"end":{"line":133,"column":54}},"type":"binary-expr","locations":[{"start":{"line":133,"column":8},"end":{"line":133,"column":23}},{"start":{"line":133,"column":27},"end":{"line":133,"column":54}}],"line":133},"10":{"loc":{"start":{"line":137,"column":4},"end":{"line":139,"column":5}},"type":"if","locations":[{"start":{"line":137,"column":4},"end":{"line":139,"column":5}},{"start":{},"end":{}}],"line":137},"11":{"loc":{"start":{"line":142,"column":4},"end":{"line":144,"column":5}},"type":"if","locations":[{"start":{"line":142,"column":4},"end":{"line":144,"column":5}},{"start":{},"end":{}}],"line":142},"12":{"loc":{"start":{"line":147,"column":6},"end":{"line":153,"column":7}},"type":"if","locations":[{"start":{"line":147,"column":6},"end":{"line":153,"column":7}},{"start":{},"end":{}}],"line":147},"13":{"loc":{"start":{"line":147,"column":10},"end":{"line":147,"column":173}},"type":"binary-expr","locations":[{"start":{"line":147,"column":10},"end":{"line":147,"column":48}},{"start":{"line":147,"column":52},"end":{"line":147,"column":78}},{"start":{"line":147,"column":82},"end":{"line":147,"column":111}},{"start":{"line":147,"column":115},"end":{"line":147,"column":173}}],"line":147},"14":{"loc":{"start":{"line":148,"column":8},"end":{"line":152,"column":9}},"type":"if","locations":[{"start":{"line":148,"column":8},"end":{"line":152,"column":9}},{"start":{"line":150,"column":15},"end":{"line":152,"column":9}}],"line":148},"15":{"loc":{"start":{"line":160,"column":4},"end":{"line":162,"column":5}},"type":"if","locations":[{"start":{"line":160,"column":4},"end":{"line":162,"column":5}},{"start":{},"end":{}}],"line":160},"16":{"loc":{"start":{"line":164,"column":4},"end":{"line":166,"column":5}},"type":"if","locations":[{"start":{"line":164,"column":4},"end":{"line":166,"column":5}},{"start":{},"end":{}}],"line":164},"17":{"loc":{"start":{"line":171,"column":83},"end":{"line":171,"column":104}},"type":"default-arg","locations":[{"start":{"line":171,"column":102},"end":{"line":171,"column":104}}],"line":171},"18":{"loc":{"start":{"line":173,"column":4},"end":{"line":175,"column":5}},"type":"if","locations":[{"start":{"line":173,"column":4},"end":{"line":175,"column":5}},{"start":{},"end":{}}],"line":173},"19":{"loc":{"start":{"line":177,"column":4},"end":{"line":179,"column":5}},"type":"if","locations":[{"start":{"line":177,"column":4},"end":{"line":179,"column":5}},{"start":{},"end":{}}],"line":177},"20":{"loc":{"start":{"line":182,"column":6},"end":{"line":184,"column":7}},"type":"if","locations":[{"start":{"line":182,"column":6},"end":{"line":184,"column":7}},{"start":{},"end":{}}],"line":182},"21":{"loc":{"start":{"line":185,"column":6},"end":{"line":216,"column":7}},"type":"if","locations":[{"start":{"line":185,"column":6},"end":{"line":216,"column":7}},{"start":{},"end":{}}],"line":185},"22":{"loc":{"start":{"line":188,"column":8},"end":{"line":190,"column":9}},"type":"if","locations":[{"start":{"line":188,"column":8},"end":{"line":190,"column":9}},{"start":{},"end":{}}],"line":188},"23":{"loc":{"start":{"line":200,"column":21},"end":{"line":200,"column":50}},"type":"binary-expr","locations":[{"start":{"line":200,"column":21},"end":{"line":200,"column":30}},{"start":{"line":200,"column":34},"end":{"line":200,"column":50}}],"line":200},"24":{"loc":{"start":{"line":210,"column":10},"end":{"line":212,"column":11}},"type":"if","locations":[{"start":{"line":210,"column":10},"end":{"line":212,"column":11}},{"start":{},"end":{}}],"line":210},"25":{"loc":{"start":{"line":220,"column":62},"end":{"line":220,"column":84}},"type":"default-arg","locations":[{"start":{"line":220,"column":79},"end":{"line":220,"column":84}}],"line":220},"26":{"loc":{"start":{"line":222,"column":4},"end":{"line":224,"column":5}},"type":"if","locations":[{"start":{"line":222,"column":4},"end":{"line":224,"column":5}},{"start":{},"end":{}}],"line":222},"27":{"loc":{"start":{"line":228,"column":6},"end":{"line":231,"column":7}},"type":"if","locations":[{"start":{"line":228,"column":6},"end":{"line":231,"column":7}},{"start":{},"end":{}}],"line":228},"28":{"loc":{"start":{"line":228,"column":10},"end":{"line":228,"column":82}},"type":"binary-expr","locations":[{"start":{"line":228,"column":10},"end":{"line":228,"column":34}},{"start":{"line":228,"column":38},"end":{"line":228,"column":82}}],"line":228},"29":{"loc":{"start":{"line":236,"column":6},"end":{"line":241,"column":7}},"type":"if","locations":[{"start":{"line":236,"column":6},"end":{"line":241,"column":7}},{"start":{"line":239,"column":13},"end":{"line":241,"column":7}}],"line":236},"30":{"loc":{"start":{"line":236,"column":10},"end":{"line":236,"column":137}},"type":"binary-expr","locations":[{"start":{"line":236,"column":10},"end":{"line":236,"column":25}},{"start":{"line":236,"column":29},"end":{"line":236,"column":82}},{"start":{"line":236,"column":86},"end":{"line":236,"column":137}}],"line":236},"31":{"loc":{"start":{"line":243,"column":6},"end":{"line":251,"column":7}},"type":"if","locations":[{"start":{"line":243,"column":6},"end":{"line":251,"column":7}},{"start":{"line":249,"column":13},"end":{"line":251,"column":7}}],"line":243},"32":{"loc":{"start":{"line":264,"column":4},"end":{"line":266,"column":5}},"type":"if","locations":[{"start":{"line":264,"column":4},"end":{"line":266,"column":5}},{"start":{},"end":{}}],"line":264},"33":{"loc":{"start":{"line":268,"column":4},"end":{"line":270,"column":5}},"type":"if","locations":[{"start":{"line":268,"column":4},"end":{"line":270,"column":5}},{"start":{},"end":{}}],"line":268},"34":{"loc":{"start":{"line":271,"column":4},"end":{"line":273,"column":5}},"type":"if","locations":[{"start":{"line":271,"column":4},"end":{"line":273,"column":5}},{"start":{},"end":{}}],"line":271},"35":{"loc":{"start":{"line":271,"column":8},"end":{"line":271,"column":187}},"type":"binary-expr","locations":[{"start":{"line":271,"column":8},"end":{"line":271,"column":36}},{"start":{"line":271,"column":40},"end":{"line":271,"column":66}},{"start":{"line":271,"column":70},"end":{"line":271,"column":93}},{"start":{"line":271,"column":97},"end":{"line":271,"column":122}},{"start":{"line":271,"column":126},"end":{"line":271,"column":151}},{"start":{"line":271,"column":155},"end":{"line":271,"column":187}}],"line":271},"36":{"loc":{"start":{"line":284,"column":6},"end":{"line":286,"column":7}},"type":"if","locations":[{"start":{"line":284,"column":6},"end":{"line":286,"column":7}},{"start":{},"end":{}}],"line":284},"37":{"loc":{"start":{"line":287,"column":6},"end":{"line":290,"column":7}},"type":"if","locations":[{"start":{"line":287,"column":6},"end":{"line":290,"column":7}},{"start":{},"end":{}}],"line":287},"38":{"loc":{"start":{"line":287,"column":10},"end":{"line":287,"column":54}},"type":"binary-expr","locations":[{"start":{"line":287,"column":11},"end":{"line":287,"column":25}},{"start":{"line":287,"column":29},"end":{"line":287,"column":36}},{"start":{"line":287,"column":41},"end":{"line":287,"column":54}}],"line":287},"39":{"loc":{"start":{"line":291,"column":23},"end":{"line":291,"column":45}},"type":"binary-expr","locations":[{"start":{"line":291,"column":23},"end":{"line":291,"column":39}},{"start":{"line":291,"column":43},"end":{"line":291,"column":45}}],"line":291},"40":{"loc":{"start":{"line":295,"column":6},"end":{"line":298,"column":7}},"type":"if","locations":[{"start":{"line":295,"column":6},"end":{"line":298,"column":7}},{"start":{},"end":{}}],"line":295},"41":{"loc":{"start":{"line":295,"column":10},"end":{"line":295,"column":65}},"type":"binary-expr","locations":[{"start":{"line":295,"column":10},"end":{"line":295,"column":23}},{"start":{"line":295,"column":27},"end":{"line":295,"column":65}}],"line":295},"42":{"loc":{"start":{"line":299,"column":6},"end":{"line":302,"column":7}},"type":"if","locations":[{"start":{"line":299,"column":6},"end":{"line":302,"column":7}},{"start":{},"end":{}}],"line":299},"43":{"loc":{"start":{"line":299,"column":10},"end":{"line":299,"column":70}},"type":"binary-expr","locations":[{"start":{"line":299,"column":10},"end":{"line":299,"column":27}},{"start":{"line":299,"column":31},"end":{"line":299,"column":70}}],"line":299},"44":{"loc":{"start":{"line":305,"column":6},"end":{"line":314,"column":7}},"type":"if","locations":[{"start":{"line":305,"column":6},"end":{"line":314,"column":7}},{"start":{"line":308,"column":13},"end":{"line":314,"column":7}}],"line":305},"45":{"loc":{"start":{"line":305,"column":10},"end":{"line":305,"column":155}},"type":"binary-expr","locations":[{"start":{"line":305,"column":10},"end":{"line":305,"column":30}},{"start":{"line":305,"column":34},"end":{"line":305,"column":107}},{"start":{"line":305,"column":111},"end":{"line":305,"column":155}}],"line":305},"46":{"loc":{"start":{"line":308,"column":13},"end":{"line":314,"column":7}},"type":"if","locations":[{"start":{"line":308,"column":13},"end":{"line":314,"column":7}},{"start":{"line":310,"column":13},"end":{"line":314,"column":7}}],"line":308},"47":{"loc":{"start":{"line":308,"column":17},"end":{"line":308,"column":128}},"type":"binary-expr","locations":[{"start":{"line":308,"column":17},"end":{"line":308,"column":62}},{"start":{"line":308,"column":66},"end":{"line":308,"column":128}}],"line":308},"48":{"loc":{"start":{"line":310,"column":13},"end":{"line":314,"column":7}},"type":"if","locations":[{"start":{"line":310,"column":13},"end":{"line":314,"column":7}},{"start":{"line":312,"column":13},"end":{"line":314,"column":7}}],"line":310},"49":{"loc":{"start":{"line":312,"column":13},"end":{"line":314,"column":7}},"type":"if","locations":[{"start":{"line":312,"column":13},"end":{"line":314,"column":7}},{"start":{},"end":{}}],"line":312},"50":{"loc":{"start":{"line":315,"column":6},"end":{"line":317,"column":7}},"type":"if","locations":[{"start":{"line":315,"column":6},"end":{"line":317,"column":7}},{"start":{},"end":{}}],"line":315},"51":{"loc":{"start":{"line":315,"column":10},"end":{"line":315,"column":66}},"type":"binary-expr","locations":[{"start":{"line":315,"column":10},"end":{"line":315,"column":23}},{"start":{"line":315,"column":27},"end":{"line":315,"column":66}}],"line":315},"52":{"loc":{"start":{"line":337,"column":11},"end":{"line":337,"column":104}},"type":"binary-expr","locations":[{"start":{"line":337,"column":11},"end":{"line":337,"column":46}},{"start":{"line":337,"column":50},"end":{"line":337,"column":75}},{"start":{"line":337,"column":79},"end":{"line":337,"column":104}}],"line":337},"53":{"loc":{"start":{"line":349,"column":6},"end":{"line":372,"column":7}},"type":"if","locations":[{"start":{"line":349,"column":6},"end":{"line":372,"column":7}},{"start":{"line":362,"column":13},"end":{"line":372,"column":7}}],"line":349},"54":{"loc":{"start":{"line":351,"column":8},"end":{"line":360,"column":9}},"type":"if","locations":[{"start":{"line":351,"column":8},"end":{"line":360,"column":9}},{"start":{},"end":{}}],"line":351},"55":{"loc":{"start":{"line":351,"column":12},"end":{"line":351,"column":151}},"type":"binary-expr","locations":[{"start":{"line":351,"column":12},"end":{"line":351,"column":51}},{"start":{"line":351,"column":55},"end":{"line":351,"column":70}},{"start":{"line":351,"column":74},"end":{"line":351,"column":101}},{"start":{"line":351,"column":105},"end":{"line":351,"column":151}}],"line":351},"56":{"loc":{"start":{"line":353,"column":10},"end":{"line":359,"column":11}},"type":"if","locations":[{"start":{"line":353,"column":10},"end":{"line":359,"column":11}},{"start":{},"end":{}}],"line":353},"57":{"loc":{"start":{"line":365,"column":8},"end":{"line":370,"column":9}},"type":"if","locations":[{"start":{"line":365,"column":8},"end":{"line":370,"column":9}},{"start":{},"end":{}}],"line":365},"58":{"loc":{"start":{"line":365,"column":12},"end":{"line":365,"column":225}},"type":"binary-expr","locations":[{"start":{"line":365,"column":12},"end":{"line":365,"column":44}},{"start":{"line":365,"column":48},"end":{"line":365,"column":72}},{"start":{"line":365,"column":76},"end":{"line":365,"column":95}},{"start":{"line":365,"column":99},"end":{"line":365,"column":130}},{"start":{"line":365,"column":134},"end":{"line":365,"column":225}}],"line":365},"59":{"loc":{"start":{"line":383,"column":6},"end":{"line":411,"column":7}},"type":"if","locations":[{"start":{"line":383,"column":6},"end":{"line":411,"column":7}},{"start":{},"end":{}}],"line":383},"60":{"loc":{"start":{"line":386,"column":8},"end":{"line":410,"column":9}},"type":"if","locations":[{"start":{"line":386,"column":8},"end":{"line":410,"column":9}},{"start":{},"end":{}}],"line":386},"61":{"loc":{"start":{"line":389,"column":10},"end":{"line":409,"column":11}},"type":"if","locations":[{"start":{"line":389,"column":10},"end":{"line":409,"column":11}},{"start":{},"end":{}}],"line":389},"62":{"loc":{"start":{"line":423,"column":29},"end":{"line":423,"column":51}},"type":"default-arg","locations":[{"start":{"line":423,"column":47},"end":{"line":423,"column":51}}],"line":423},"63":{"loc":{"start":{"line":424,"column":4},"end":{"line":430,"column":5}},"type":"if","locations":[{"start":{"line":424,"column":4},"end":{"line":430,"column":5}},{"start":{},"end":{}}],"line":424},"64":{"loc":{"start":{"line":427,"column":6},"end":{"line":429,"column":7}},"type":"if","locations":[{"start":{"line":427,"column":6},"end":{"line":429,"column":7}},{"start":{},"end":{}}],"line":427},"65":{"loc":{"start":{"line":427,"column":10},"end":{"line":427,"column":52}},"type":"binary-expr","locations":[{"start":{"line":427,"column":10},"end":{"line":427,"column":19}},{"start":{"line":427,"column":23},"end":{"line":427,"column":52}}],"line":427},"66":{"loc":{"start":{"line":435,"column":4},"end":{"line":437,"column":5}},"type":"if","locations":[{"start":{"line":435,"column":4},"end":{"line":437,"column":5}},{"start":{},"end":{}}],"line":435},"67":{"loc":{"start":{"line":435,"column":8},"end":{"line":435,"column":63}},"type":"binary-expr","locations":[{"start":{"line":435,"column":8},"end":{"line":435,"column":33}},{"start":{"line":435,"column":37},"end":{"line":435,"column":63}}],"line":435},"68":{"loc":{"start":{"line":441,"column":4},"end":{"line":446,"column":5}},"type":"if","locations":[{"start":{"line":441,"column":4},"end":{"line":446,"column":5}},{"start":{},"end":{}}],"line":441},"69":{"loc":{"start":{"line":447,"column":4},"end":{"line":454,"column":5}},"type":"if","locations":[{"start":{"line":447,"column":4},"end":{"line":454,"column":5}},{"start":{},"end":{}}],"line":447},"70":{"loc":{"start":{"line":451,"column":6},"end":{"line":453,"column":7}},"type":"if","locations":[{"start":{"line":451,"column":6},"end":{"line":453,"column":7}},{"start":{},"end":{}}],"line":451},"71":{"loc":{"start":{"line":456,"column":4},"end":{"line":458,"column":5}},"type":"if","locations":[{"start":{"line":456,"column":4},"end":{"line":458,"column":5}},{"start":{},"end":{}}],"line":456},"72":{"loc":{"start":{"line":459,"column":4},"end":{"line":465,"column":5}},"type":"if","locations":[{"start":{"line":459,"column":4},"end":{"line":465,"column":5}},{"start":{},"end":{}}],"line":459},"73":{"loc":{"start":{"line":461,"column":6},"end":{"line":463,"column":7}},"type":"if","locations":[{"start":{"line":461,"column":6},"end":{"line":463,"column":7}},{"start":{},"end":{}}],"line":461},"74":{"loc":{"start":{"line":466,"column":4},"end":{"line":468,"column":5}},"type":"if","locations":[{"start":{"line":466,"column":4},"end":{"line":468,"column":5}},{"start":{},"end":{}}],"line":466},"75":{"loc":{"start":{"line":474,"column":4},"end":{"line":476,"column":5}},"type":"if","locations":[{"start":{"line":474,"column":4},"end":{"line":476,"column":5}},{"start":{},"end":{}}],"line":474},"76":{"loc":{"start":{"line":483,"column":6},"end":{"line":525,"column":7}},"type":"if","locations":[{"start":{"line":483,"column":6},"end":{"line":525,"column":7}},{"start":{"line":522,"column":13},"end":{"line":525,"column":7}}],"line":483},"77":{"loc":{"start":{"line":485,"column":8},"end":{"line":487,"column":9}},"type":"if","locations":[{"start":{"line":485,"column":8},"end":{"line":487,"column":9}},{"start":{},"end":{}}],"line":485},"78":{"loc":{"start":{"line":488,"column":8},"end":{"line":521,"column":9}},"type":"if","locations":[{"start":{"line":488,"column":8},"end":{"line":521,"column":9}},{"start":{"line":512,"column":15},"end":{"line":521,"column":9}}],"line":488},"79":{"loc":{"start":{"line":489,"column":10},"end":{"line":491,"column":11}},"type":"if","locations":[{"start":{"line":489,"column":10},"end":{"line":491,"column":11}},{"start":{},"end":{}}],"line":489},"80":{"loc":{"start":{"line":489,"column":14},"end":{"line":489,"column":88}},"type":"binary-expr","locations":[{"start":{"line":489,"column":14},"end":{"line":489,"column":41}},{"start":{"line":489,"column":45},"end":{"line":489,"column":88}}],"line":489},"81":{"loc":{"start":{"line":492,"column":10},"end":{"line":494,"column":11}},"type":"if","locations":[{"start":{"line":492,"column":10},"end":{"line":494,"column":11}},{"start":{},"end":{}}],"line":492},"82":{"loc":{"start":{"line":492,"column":14},"end":{"line":492,"column":120}},"type":"binary-expr","locations":[{"start":{"line":492,"column":14},"end":{"line":492,"column":41}},{"start":{"line":492,"column":45},"end":{"line":492,"column":73}},{"start":{"line":492,"column":77},"end":{"line":492,"column":120}}],"line":492},"83":{"loc":{"start":{"line":497,"column":12},"end":{"line":499,"column":13}},"type":"if","locations":[{"start":{"line":497,"column":12},"end":{"line":499,"column":13}},{"start":{},"end":{}}],"line":497},"84":{"loc":{"start":{"line":497,"column":16},"end":{"line":497,"column":69}},"type":"binary-expr","locations":[{"start":{"line":497,"column":16},"end":{"line":497,"column":27}},{"start":{"line":497,"column":31},"end":{"line":497,"column":69}}],"line":497},"85":{"loc":{"start":{"line":502,"column":12},"end":{"line":504,"column":13}},"type":"if","locations":[{"start":{"line":502,"column":12},"end":{"line":504,"column":13}},{"start":{},"end":{}}],"line":502},"86":{"loc":{"start":{"line":502,"column":16},"end":{"line":502,"column":52}},"type":"binary-expr","locations":[{"start":{"line":502,"column":16},"end":{"line":502,"column":35}},{"start":{"line":502,"column":39},"end":{"line":502,"column":52}}],"line":502},"87":{"loc":{"start":{"line":505,"column":12},"end":{"line":509,"column":13}},"type":"if","locations":[{"start":{"line":505,"column":12},"end":{"line":509,"column":13}},{"start":{"line":507,"column":19},"end":{"line":509,"column":13}}],"line":505},"88":{"loc":{"start":{"line":512,"column":15},"end":{"line":521,"column":9}},"type":"if","locations":[{"start":{"line":512,"column":15},"end":{"line":521,"column":9}},{"start":{"line":514,"column":15},"end":{"line":521,"column":9}}],"line":512},"89":{"loc":{"start":{"line":514,"column":15},"end":{"line":521,"column":9}},"type":"if","locations":[{"start":{"line":514,"column":15},"end":{"line":521,"column":9}},{"start":{"line":516,"column":15},"end":{"line":521,"column":9}}],"line":514},"90":{"loc":{"start":{"line":517,"column":10},"end":{"line":519,"column":11}},"type":"if","locations":[{"start":{"line":517,"column":10},"end":{"line":519,"column":11}},{"start":{},"end":{}}],"line":517},"91":{"loc":{"start":{"line":527,"column":4},"end":{"line":529,"column":5}},"type":"if","locations":[{"start":{"line":527,"column":4},"end":{"line":529,"column":5}},{"start":{},"end":{}}],"line":527},"92":{"loc":{"start":{"line":537,"column":6},"end":{"line":539,"column":7}},"type":"if","locations":[{"start":{"line":537,"column":6},"end":{"line":539,"column":7}},{"start":{},"end":{}}],"line":537},"93":{"loc":{"start":{"line":537,"column":10},"end":{"line":537,"column":126}},"type":"binary-expr","locations":[{"start":{"line":537,"column":10},"end":{"line":537,"column":47}},{"start":{"line":537,"column":52},"end":{"line":537,"column":86}},{"start":{"line":537,"column":90},"end":{"line":537,"column":125}}],"line":537},"94":{"loc":{"start":{"line":546,"column":4},"end":{"line":548,"column":5}},"type":"if","locations":[{"start":{"line":546,"column":4},"end":{"line":548,"column":5}},{"start":{},"end":{}}],"line":546},"95":{"loc":{"start":{"line":549,"column":4},"end":{"line":551,"column":5}},"type":"if","locations":[{"start":{"line":549,"column":4},"end":{"line":551,"column":5}},{"start":{},"end":{}}],"line":549},"96":{"loc":{"start":{"line":554,"column":6},"end":{"line":556,"column":7}},"type":"if","locations":[{"start":{"line":554,"column":6},"end":{"line":556,"column":7}},{"start":{},"end":{}}],"line":554},"97":{"loc":{"start":{"line":557,"column":6},"end":{"line":560,"column":7}},"type":"if","locations":[{"start":{"line":557,"column":6},"end":{"line":560,"column":7}},{"start":{},"end":{}}],"line":557},"98":{"loc":{"start":{"line":565,"column":11},"end":{"line":565,"column":73}},"type":"binary-expr","locations":[{"start":{"line":565,"column":11},"end":{"line":565,"column":44}},{"start":{"line":565,"column":48},"end":{"line":565,"column":73}}],"line":565},"99":{"loc":{"start":{"line":571,"column":4},"end":{"line":573,"column":5}},"type":"if","locations":[{"start":{"line":571,"column":4},"end":{"line":573,"column":5}},{"start":{},"end":{}}],"line":571},"100":{"loc":{"start":{"line":574,"column":4},"end":{"line":576,"column":5}},"type":"if","locations":[{"start":{"line":574,"column":4},"end":{"line":576,"column":5}},{"start":{},"end":{}}],"line":574},"101":{"loc":{"start":{"line":580,"column":4},"end":{"line":582,"column":5}},"type":"if","locations":[{"start":{"line":580,"column":4},"end":{"line":582,"column":5}},{"start":{},"end":{}}],"line":580},"102":{"loc":{"start":{"line":583,"column":4},"end":{"line":588,"column":5}},"type":"if","locations":[{"start":{"line":583,"column":4},"end":{"line":588,"column":5}},{"start":{},"end":{}}],"line":583},"103":{"loc":{"start":{"line":585,"column":6},"end":{"line":587,"column":7}},"type":"if","locations":[{"start":{"line":585,"column":6},"end":{"line":587,"column":7}},{"start":{},"end":{}}],"line":585},"104":{"loc":{"start":{"line":585,"column":10},"end":{"line":585,"column":80}},"type":"binary-expr","locations":[{"start":{"line":585,"column":10},"end":{"line":585,"column":41}},{"start":{"line":585,"column":45},"end":{"line":585,"column":80}}],"line":585},"105":{"loc":{"start":{"line":597,"column":15},"end":{"line":597,"column":23}},"type":"default-arg","locations":[{"start":{"line":597,"column":22},"end":{"line":597,"column":23}}],"line":597},"106":{"loc":{"start":{"line":666,"column":4},"end":{"line":671,"column":5}},"type":"if","locations":[{"start":{"line":666,"column":4},"end":{"line":671,"column":5}},{"start":{},"end":{}}],"line":666},"107":{"loc":{"start":{"line":666,"column":8},"end":{"line":666,"column":39}},"type":"binary-expr","locations":[{"start":{"line":666,"column":8},"end":{"line":666,"column":16}},{"start":{"line":666,"column":20},"end":{"line":666,"column":39}}],"line":666},"108":{"loc":{"start":{"line":668,"column":6},"end":{"line":670,"column":7}},"type":"if","locations":[{"start":{"line":668,"column":6},"end":{"line":670,"column":7}},{"start":{},"end":{}}],"line":668},"109":{"loc":{"start":{"line":676,"column":4},"end":{"line":679,"column":5}},"type":"if","locations":[{"start":{"line":676,"column":4},"end":{"line":679,"column":5}},{"start":{},"end":{}}],"line":676},"110":{"loc":{"start":{"line":676,"column":8},"end":{"line":676,"column":39}},"type":"binary-expr","locations":[{"start":{"line":676,"column":8},"end":{"line":676,"column":16}},{"start":{"line":676,"column":20},"end":{"line":676,"column":39}}],"line":676},"111":{"loc":{"start":{"line":684,"column":4},"end":{"line":687,"column":5}},"type":"if","locations":[{"start":{"line":684,"column":4},"end":{"line":687,"column":5}},{"start":{},"end":{}}],"line":684},"112":{"loc":{"start":{"line":693,"column":4},"end":{"line":709,"column":5}},"type":"if","locations":[{"start":{"line":693,"column":4},"end":{"line":709,"column":5}},{"start":{"line":701,"column":11},"end":{"line":709,"column":5}}],"line":693},"113":{"loc":{"start":{"line":693,"column":8},"end":{"line":693,"column":75}},"type":"binary-expr","locations":[{"start":{"line":693,"column":8},"end":{"line":693,"column":14}},{"start":{"line":693,"column":18},"end":{"line":693,"column":75}}],"line":693},"114":{"loc":{"start":{"line":694,"column":6},"end":{"line":700,"column":7}},"type":"if","locations":[{"start":{"line":694,"column":6},"end":{"line":700,"column":7}},{"start":{},"end":{}}],"line":694},"115":{"loc":{"start":{"line":696,"column":8},"end":{"line":698,"column":9}},"type":"if","locations":[{"start":{"line":696,"column":8},"end":{"line":698,"column":9}},{"start":{},"end":{}}],"line":696},"116":{"loc":{"start":{"line":702,"column":6},"end":{"line":708,"column":7}},"type":"if","locations":[{"start":{"line":702,"column":6},"end":{"line":708,"column":7}},{"start":{},"end":{}}],"line":702},"117":{"loc":{"start":{"line":704,"column":8},"end":{"line":706,"column":9}},"type":"if","locations":[{"start":{"line":704,"column":8},"end":{"line":706,"column":9}},{"start":{},"end":{}}],"line":704},"118":{"loc":{"start":{"line":712,"column":6},"end":{"line":714,"column":7}},"type":"if","locations":[{"start":{"line":712,"column":6},"end":{"line":714,"column":7}},{"start":{},"end":{}}],"line":712},"119":{"loc":{"start":{"line":715,"column":6},"end":{"line":719,"column":7}},"type":"if","locations":[{"start":{"line":715,"column":6},"end":{"line":719,"column":7}},{"start":{"line":717,"column":13},"end":{"line":719,"column":7}}],"line":715},"120":{"loc":{"start":{"line":729,"column":32},"end":{"line":729,"column":49}},"type":"default-arg","locations":[{"start":{"line":729,"column":44},"end":{"line":729,"column":49}}],"line":729},"121":{"loc":{"start":{"line":731,"column":4},"end":{"line":744,"column":5}},"type":"if","locations":[{"start":{"line":731,"column":4},"end":{"line":744,"column":5}},{"start":{},"end":{}}],"line":731},"122":{"loc":{"start":{"line":733,"column":6},"end":{"line":738,"column":7}},"type":"if","locations":[{"start":{"line":733,"column":6},"end":{"line":738,"column":7}},{"start":{},"end":{}}],"line":733},"123":{"loc":{"start":{"line":733,"column":10},"end":{"line":733,"column":61}},"type":"binary-expr","locations":[{"start":{"line":733,"column":10},"end":{"line":733,"column":39}},{"start":{"line":733,"column":43},"end":{"line":733,"column":61}}],"line":733},"124":{"loc":{"start":{"line":739,"column":6},"end":{"line":743,"column":7}},"type":"if","locations":[{"start":{"line":739,"column":6},"end":{"line":743,"column":7}},{"start":{"line":741,"column":13},"end":{"line":743,"column":7}}],"line":739},"125":{"loc":{"start":{"line":745,"column":4},"end":{"line":748,"column":5}},"type":"if","locations":[{"start":{"line":745,"column":4},"end":{"line":748,"column":5}},{"start":{},"end":{}}],"line":745},"126":{"loc":{"start":{"line":750,"column":37},"end":{"line":750,"column":54}},"type":"default-arg","locations":[{"start":{"line":750,"column":49},"end":{"line":750,"column":54}}],"line":750},"127":{"loc":{"start":{"line":755,"column":46},"end":{"line":755,"column":63}},"type":"default-arg","locations":[{"start":{"line":755,"column":58},"end":{"line":755,"column":63}}],"line":755},"128":{"loc":{"start":{"line":779,"column":22},"end":{"line":779,"column":81}},"type":"binary-expr","locations":[{"start":{"line":779,"column":22},"end":{"line":779,"column":75}},{"start":{"line":779,"column":79},"end":{"line":779,"column":81}}],"line":779},"129":{"loc":{"start":{"line":781,"column":4},"end":{"line":783,"column":5}},"type":"if","locations":[{"start":{"line":781,"column":4},"end":{"line":783,"column":5}},{"start":{},"end":{}}],"line":781},"130":{"loc":{"start":{"line":781,"column":8},"end":{"line":781,"column":57}},"type":"binary-expr","locations":[{"start":{"line":781,"column":8},"end":{"line":781,"column":21}},{"start":{"line":781,"column":25},"end":{"line":781,"column":57}}],"line":781},"131":{"loc":{"start":{"line":784,"column":4},"end":{"line":786,"column":5}},"type":"if","locations":[{"start":{"line":784,"column":4},"end":{"line":786,"column":5}},{"start":{},"end":{}}],"line":784},"132":{"loc":{"start":{"line":784,"column":8},"end":{"line":784,"column":55}},"type":"binary-expr","locations":[{"start":{"line":784,"column":8},"end":{"line":784,"column":20}},{"start":{"line":784,"column":24},"end":{"line":784,"column":55}}],"line":784},"133":{"loc":{"start":{"line":787,"column":4},"end":{"line":792,"column":5}},"type":"if","locations":[{"start":{"line":787,"column":4},"end":{"line":792,"column":5}},{"start":{},"end":{}}],"line":787},"134":{"loc":{"start":{"line":789,"column":6},"end":{"line":791,"column":7}},"type":"if","locations":[{"start":{"line":789,"column":6},"end":{"line":791,"column":7}},{"start":{},"end":{}}],"line":789},"135":{"loc":{"start":{"line":789,"column":10},"end":{"line":789,"column":79}},"type":"binary-expr","locations":[{"start":{"line":789,"column":10},"end":{"line":789,"column":30}},{"start":{"line":789,"column":34},"end":{"line":789,"column":79}}],"line":789},"136":{"loc":{"start":{"line":799,"column":6},"end":{"line":801,"column":7}},"type":"if","locations":[{"start":{"line":799,"column":6},"end":{"line":801,"column":7}},{"start":{},"end":{}}],"line":799},"137":{"loc":{"start":{"line":810,"column":6},"end":{"line":815,"column":7}},"type":"if","locations":[{"start":{"line":810,"column":6},"end":{"line":815,"column":7}},{"start":{},"end":{}}],"line":810},"138":{"loc":{"start":{"line":812,"column":8},"end":{"line":814,"column":9}},"type":"if","locations":[{"start":{"line":812,"column":8},"end":{"line":814,"column":9}},{"start":{},"end":{}}],"line":812},"139":{"loc":{"start":{"line":824,"column":6},"end":{"line":826,"column":7}},"type":"if","locations":[{"start":{"line":824,"column":6},"end":{"line":826,"column":7}},{"start":{},"end":{}}],"line":824},"140":{"loc":{"start":{"line":831,"column":4},"end":{"line":836,"column":5}},"type":"if","locations":[{"start":{"line":831,"column":4},"end":{"line":836,"column":5}},{"start":{},"end":{}}],"line":831},"141":{"loc":{"start":{"line":833,"column":6},"end":{"line":833,"column":139}},"type":"binary-expr","locations":[{"start":{"line":833,"column":6},"end":{"line":833,"column":44}},{"start":{"line":833,"column":48},"end":{"line":833,"column":79}},{"start":{"line":833,"column":83},"end":{"line":833,"column":118}},{"start":{"line":833,"column":122},"end":{"line":833,"column":139}}],"line":833},"142":{"loc":{"start":{"line":840,"column":4},"end":{"line":842,"column":5}},"type":"if","locations":[{"start":{"line":840,"column":4},"end":{"line":842,"column":5}},{"start":{},"end":{}}],"line":840},"143":{"loc":{"start":{"line":840,"column":8},"end":{"line":840,"column":99}},"type":"binary-expr","locations":[{"start":{"line":840,"column":8},"end":{"line":840,"column":41}},{"start":{"line":840,"column":45},"end":{"line":840,"column":99}}],"line":840},"144":{"loc":{"start":{"line":846,"column":4},"end":{"line":848,"column":5}},"type":"if","locations":[{"start":{"line":846,"column":4},"end":{"line":848,"column":5}},{"start":{},"end":{}}],"line":846},"145":{"loc":{"start":{"line":869,"column":4},"end":{"line":871,"column":5}},"type":"if","locations":[{"start":{"line":869,"column":4},"end":{"line":871,"column":5}},{"start":{},"end":{}}],"line":869},"146":{"loc":{"start":{"line":872,"column":4},"end":{"line":874,"column":5}},"type":"if","locations":[{"start":{"line":872,"column":4},"end":{"line":874,"column":5}},{"start":{},"end":{}}],"line":872},"147":{"loc":{"start":{"line":875,"column":4},"end":{"line":877,"column":5}},"type":"if","locations":[{"start":{"line":875,"column":4},"end":{"line":877,"column":5}},{"start":{},"end":{}}],"line":875},"148":{"loc":{"start":{"line":878,"column":4},"end":{"line":880,"column":5}},"type":"if","locations":[{"start":{"line":878,"column":4},"end":{"line":880,"column":5}},{"start":{},"end":{}}],"line":878},"149":{"loc":{"start":{"line":881,"column":4},"end":{"line":883,"column":5}},"type":"if","locations":[{"start":{"line":881,"column":4},"end":{"line":883,"column":5}},{"start":{},"end":{}}],"line":881},"150":{"loc":{"start":{"line":888,"column":4},"end":{"line":890,"column":5}},"type":"if","locations":[{"start":{"line":888,"column":4},"end":{"line":890,"column":5}},{"start":{},"end":{}}],"line":888},"151":{"loc":{"start":{"line":895,"column":4},"end":{"line":897,"column":5}},"type":"if","locations":[{"start":{"line":895,"column":4},"end":{"line":897,"column":5}},{"start":{},"end":{}}],"line":895},"152":{"loc":{"start":{"line":902,"column":4},"end":{"line":904,"column":5}},"type":"if","locations":[{"start":{"line":902,"column":4},"end":{"line":904,"column":5}},{"start":{},"end":{}}],"line":902},"153":{"loc":{"start":{"line":911,"column":6},"end":{"line":913,"column":7}},"type":"if","locations":[{"start":{"line":911,"column":6},"end":{"line":913,"column":7}},{"start":{},"end":{}}],"line":911},"154":{"loc":{"start":{"line":919,"column":4},"end":{"line":921,"column":5}},"type":"if","locations":[{"start":{"line":919,"column":4},"end":{"line":921,"column":5}},{"start":{},"end":{}}],"line":919},"155":{"loc":{"start":{"line":926,"column":4},"end":{"line":928,"column":5}},"type":"if","locations":[{"start":{"line":926,"column":4},"end":{"line":928,"column":5}},{"start":{},"end":{}}],"line":926},"156":{"loc":{"start":{"line":931,"column":6},"end":{"line":933,"column":7}},"type":"if","locations":[{"start":{"line":931,"column":6},"end":{"line":933,"column":7}},{"start":{},"end":{}}],"line":931},"157":{"loc":{"start":{"line":934,"column":6},"end":{"line":1236,"column":7}},"type":"if","locations":[{"start":{"line":934,"column":6},"end":{"line":1236,"column":7}},{"start":{"line":948,"column":13},"end":{"line":1236,"column":7}}],"line":934},"158":{"loc":{"start":{"line":934,"column":10},"end":{"line":934,"column":219}},"type":"binary-expr","locations":[{"start":{"line":934,"column":10},"end":{"line":934,"column":45}},{"start":{"line":934,"column":49},"end":{"line":934,"column":78}},{"start":{"line":934,"column":82},"end":{"line":934,"column":111}},{"start":{"line":934,"column":115},"end":{"line":934,"column":135}},{"start":{"line":934,"column":139},"end":{"line":934,"column":166}},{"start":{"line":934,"column":170},"end":{"line":934,"column":219}}],"line":934},"159":{"loc":{"start":{"line":936,"column":8},"end":{"line":938,"column":9}},"type":"if","locations":[{"start":{"line":936,"column":8},"end":{"line":938,"column":9}},{"start":{},"end":{}}],"line":936},"160":{"loc":{"start":{"line":948,"column":13},"end":{"line":1236,"column":7}},"type":"if","locations":[{"start":{"line":948,"column":13},"end":{"line":1236,"column":7}},{"start":{"line":975,"column":13},"end":{"line":1236,"column":7}}],"line":948},"161":{"loc":{"start":{"line":948,"column":17},"end":{"line":948,"column":124}},"type":"binary-expr","locations":[{"start":{"line":948,"column":17},"end":{"line":948,"column":58}},{"start":{"line":948,"column":62},"end":{"line":948,"column":91}},{"start":{"line":948,"column":95},"end":{"line":948,"column":124}}],"line":948},"162":{"loc":{"start":{"line":949,"column":8},"end":{"line":974,"column":9}},"type":"if","locations":[{"start":{"line":949,"column":8},"end":{"line":974,"column":9}},{"start":{"line":970,"column":15},"end":{"line":974,"column":9}}],"line":949},"163":{"loc":{"start":{"line":949,"column":12},"end":{"line":949,"column":59}},"type":"binary-expr","locations":[{"start":{"line":949,"column":12},"end":{"line":949,"column":36}},{"start":{"line":949,"column":40},"end":{"line":949,"column":59}}],"line":949},"164":{"loc":{"start":{"line":950,"column":10},"end":{"line":953,"column":11}},"type":"if","locations":[{"start":{"line":950,"column":10},"end":{"line":953,"column":11}},{"start":{},"end":{}}],"line":950},"165":{"loc":{"start":{"line":957,"column":10},"end":{"line":969,"column":11}},"type":"if","locations":[{"start":{"line":957,"column":10},"end":{"line":969,"column":11}},{"start":{"line":967,"column":17},"end":{"line":969,"column":11}}],"line":957},"166":{"loc":{"start":{"line":957,"column":14},"end":{"line":957,"column":81}},"type":"binary-expr","locations":[{"start":{"line":957,"column":14},"end":{"line":957,"column":31}},{"start":{"line":957,"column":35},"end":{"line":957,"column":81}}],"line":957},"167":{"loc":{"start":{"line":958,"column":12},"end":{"line":960,"column":13}},"type":"if","locations":[{"start":{"line":958,"column":12},"end":{"line":960,"column":13}},{"start":{},"end":{}}],"line":958},"168":{"loc":{"start":{"line":958,"column":16},"end":{"line":958,"column":89}},"type":"binary-expr","locations":[{"start":{"line":958,"column":16},"end":{"line":958,"column":50}},{"start":{"line":958,"column":54},"end":{"line":958,"column":89}}],"line":958},"169":{"loc":{"start":{"line":967,"column":17},"end":{"line":969,"column":11}},"type":"if","locations":[{"start":{"line":967,"column":17},"end":{"line":969,"column":11}},{"start":{},"end":{}}],"line":967},"170":{"loc":{"start":{"line":975,"column":13},"end":{"line":1236,"column":7}},"type":"if","locations":[{"start":{"line":975,"column":13},"end":{"line":1236,"column":7}},{"start":{"line":1001,"column":13},"end":{"line":1236,"column":7}}],"line":975},"171":{"loc":{"start":{"line":975,"column":17},"end":{"line":975,"column":125}},"type":"binary-expr","locations":[{"start":{"line":975,"column":17},"end":{"line":975,"column":59}},{"start":{"line":975,"column":63},"end":{"line":975,"column":92}},{"start":{"line":975,"column":96},"end":{"line":975,"column":125}}],"line":975},"172":{"loc":{"start":{"line":976,"column":8},"end":{"line":978,"column":9}},"type":"if","locations":[{"start":{"line":976,"column":8},"end":{"line":978,"column":9}},{"start":{},"end":{}}],"line":976},"173":{"loc":{"start":{"line":982,"column":8},"end":{"line":999,"column":9}},"type":"if","locations":[{"start":{"line":982,"column":8},"end":{"line":999,"column":9}},{"start":{"line":984,"column":15},"end":{"line":999,"column":9}}],"line":982},"174":{"loc":{"start":{"line":984,"column":15},"end":{"line":999,"column":9}},"type":"if","locations":[{"start":{"line":984,"column":15},"end":{"line":999,"column":9}},{"start":{"line":997,"column":15},"end":{"line":999,"column":9}}],"line":984},"175":{"loc":{"start":{"line":986,"column":10},"end":{"line":996,"column":11}},"type":"if","locations":[{"start":{"line":986,"column":10},"end":{"line":996,"column":11}},{"start":{"line":992,"column":17},"end":{"line":996,"column":11}}],"line":986},"176":{"loc":{"start":{"line":986,"column":14},"end":{"line":986,"column":80}},"type":"binary-expr","locations":[{"start":{"line":986,"column":14},"end":{"line":986,"column":31}},{"start":{"line":986,"column":35},"end":{"line":986,"column":80}}],"line":986},"177":{"loc":{"start":{"line":987,"column":12},"end":{"line":989,"column":13}},"type":"if","locations":[{"start":{"line":987,"column":12},"end":{"line":989,"column":13}},{"start":{},"end":{}}],"line":987},"178":{"loc":{"start":{"line":987,"column":16},"end":{"line":987,"column":89}},"type":"binary-expr","locations":[{"start":{"line":987,"column":16},"end":{"line":987,"column":50}},{"start":{"line":987,"column":54},"end":{"line":987,"column":89}}],"line":987},"179":{"loc":{"start":{"line":993,"column":12},"end":{"line":995,"column":13}},"type":"if","locations":[{"start":{"line":993,"column":12},"end":{"line":995,"column":13}},{"start":{},"end":{}}],"line":993},"180":{"loc":{"start":{"line":993,"column":16},"end":{"line":993,"column":91}},"type":"binary-expr","locations":[{"start":{"line":993,"column":16},"end":{"line":993,"column":52}},{"start":{"line":993,"column":56},"end":{"line":993,"column":91}}],"line":993},"181":{"loc":{"start":{"line":1001,"column":13},"end":{"line":1236,"column":7}},"type":"if","locations":[{"start":{"line":1001,"column":13},"end":{"line":1236,"column":7}},{"start":{"line":1007,"column":13},"end":{"line":1236,"column":7}}],"line":1001},"182":{"loc":{"start":{"line":1001,"column":17},"end":{"line":1001,"column":123}},"type":"binary-expr","locations":[{"start":{"line":1001,"column":17},"end":{"line":1001,"column":57}},{"start":{"line":1001,"column":61},"end":{"line":1001,"column":90}},{"start":{"line":1001,"column":94},"end":{"line":1001,"column":123}}],"line":1001},"183":{"loc":{"start":{"line":1004,"column":8},"end":{"line":1006,"column":9}},"type":"if","locations":[{"start":{"line":1004,"column":8},"end":{"line":1006,"column":9}},{"start":{},"end":{}}],"line":1004},"184":{"loc":{"start":{"line":1007,"column":13},"end":{"line":1236,"column":7}},"type":"if","locations":[{"start":{"line":1007,"column":13},"end":{"line":1236,"column":7}},{"start":{"line":1012,"column":13},"end":{"line":1236,"column":7}}],"line":1007},"185":{"loc":{"start":{"line":1007,"column":17},"end":{"line":1007,"column":124}},"type":"binary-expr","locations":[{"start":{"line":1007,"column":17},"end":{"line":1007,"column":58}},{"start":{"line":1007,"column":62},"end":{"line":1007,"column":91}},{"start":{"line":1007,"column":95},"end":{"line":1007,"column":124}}],"line":1007},"186":{"loc":{"start":{"line":1012,"column":13},"end":{"line":1236,"column":7}},"type":"if","locations":[{"start":{"line":1012,"column":13},"end":{"line":1236,"column":7}},{"start":{"line":1018,"column":13},"end":{"line":1236,"column":7}}],"line":1012},"187":{"loc":{"start":{"line":1012,"column":17},"end":{"line":1012,"column":131}},"type":"binary-expr","locations":[{"start":{"line":1012,"column":17},"end":{"line":1012,"column":65}},{"start":{"line":1012,"column":69},"end":{"line":1012,"column":98}},{"start":{"line":1012,"column":102},"end":{"line":1012,"column":131}}],"line":1012},"188":{"loc":{"start":{"line":1013,"column":8},"end":{"line":1015,"column":9}},"type":"if","locations":[{"start":{"line":1013,"column":8},"end":{"line":1015,"column":9}},{"start":{},"end":{}}],"line":1013},"189":{"loc":{"start":{"line":1018,"column":13},"end":{"line":1236,"column":7}},"type":"if","locations":[{"start":{"line":1018,"column":13},"end":{"line":1236,"column":7}},{"start":{"line":1030,"column":13},"end":{"line":1236,"column":7}}],"line":1018},"190":{"loc":{"start":{"line":1018,"column":17},"end":{"line":1018,"column":132}},"type":"binary-expr","locations":[{"start":{"line":1018,"column":17},"end":{"line":1018,"column":66}},{"start":{"line":1018,"column":70},"end":{"line":1018,"column":99}},{"start":{"line":1018,"column":103},"end":{"line":1018,"column":132}}],"line":1018},"191":{"loc":{"start":{"line":1020,"column":8},"end":{"line":1029,"column":9}},"type":"if","locations":[{"start":{"line":1020,"column":8},"end":{"line":1029,"column":9}},{"start":{"line":1027,"column":15},"end":{"line":1029,"column":9}}],"line":1020},"192":{"loc":{"start":{"line":1022,"column":10},"end":{"line":1025,"column":11}},"type":"if","locations":[{"start":{"line":1022,"column":10},"end":{"line":1025,"column":11}},{"start":{},"end":{}}],"line":1022},"193":{"loc":{"start":{"line":1030,"column":13},"end":{"line":1236,"column":7}},"type":"if","locations":[{"start":{"line":1030,"column":13},"end":{"line":1236,"column":7}},{"start":{"line":1042,"column":13},"end":{"line":1236,"column":7}}],"line":1030},"194":{"loc":{"start":{"line":1030,"column":17},"end":{"line":1030,"column":126}},"type":"binary-expr","locations":[{"start":{"line":1030,"column":17},"end":{"line":1030,"column":62}},{"start":{"line":1030,"column":66},"end":{"line":1030,"column":95}},{"start":{"line":1030,"column":99},"end":{"line":1030,"column":126}}],"line":1030},"195":{"loc":{"start":{"line":1031,"column":8},"end":{"line":1040,"column":9}},"type":"if","locations":[{"start":{"line":1031,"column":8},"end":{"line":1040,"column":9}},{"start":{"line":1033,"column":15},"end":{"line":1040,"column":9}}],"line":1031},"196":{"loc":{"start":{"line":1035,"column":10},"end":{"line":1039,"column":11}},"type":"if","locations":[{"start":{"line":1035,"column":10},"end":{"line":1039,"column":11}},{"start":{"line":1037,"column":17},"end":{"line":1039,"column":11}}],"line":1035},"197":{"loc":{"start":{"line":1035,"column":14},"end":{"line":1035,"column":84}},"type":"binary-expr","locations":[{"start":{"line":1035,"column":14},"end":{"line":1035,"column":31}},{"start":{"line":1035,"column":35},"end":{"line":1035,"column":84}}],"line":1035},"198":{"loc":{"start":{"line":1042,"column":13},"end":{"line":1236,"column":7}},"type":"if","locations":[{"start":{"line":1042,"column":13},"end":{"line":1236,"column":7}},{"start":{"line":1063,"column":13},"end":{"line":1236,"column":7}}],"line":1042},"199":{"loc":{"start":{"line":1042,"column":17},"end":{"line":1042,"column":95}},"type":"binary-expr","locations":[{"start":{"line":1042,"column":17},"end":{"line":1042,"column":62}},{"start":{"line":1042,"column":66},"end":{"line":1042,"column":95}}],"line":1042},"200":{"loc":{"start":{"line":1043,"column":8},"end":{"line":1061,"column":9}},"type":"if","locations":[{"start":{"line":1043,"column":8},"end":{"line":1061,"column":9}},{"start":{"line":1048,"column":15},"end":{"line":1061,"column":9}}],"line":1043},"201":{"loc":{"start":{"line":1045,"column":10},"end":{"line":1047,"column":11}},"type":"if","locations":[{"start":{"line":1045,"column":10},"end":{"line":1047,"column":11}},{"start":{},"end":{}}],"line":1045},"202":{"loc":{"start":{"line":1050,"column":10},"end":{"line":1060,"column":11}},"type":"if","locations":[{"start":{"line":1050,"column":10},"end":{"line":1060,"column":11}},{"start":{"line":1058,"column":17},"end":{"line":1060,"column":11}}],"line":1050},"203":{"loc":{"start":{"line":1050,"column":14},"end":{"line":1050,"column":84}},"type":"binary-expr","locations":[{"start":{"line":1050,"column":14},"end":{"line":1050,"column":31}},{"start":{"line":1050,"column":35},"end":{"line":1050,"column":84}}],"line":1050},"204":{"loc":{"start":{"line":1063,"column":13},"end":{"line":1236,"column":7}},"type":"if","locations":[{"start":{"line":1063,"column":13},"end":{"line":1236,"column":7}},{"start":{"line":1099,"column":13},"end":{"line":1236,"column":7}}],"line":1063},"205":{"loc":{"start":{"line":1063,"column":17},"end":{"line":1063,"column":172}},"type":"binary-expr","locations":[{"start":{"line":1063,"column":17},"end":{"line":1063,"column":51}},{"start":{"line":1063,"column":55},"end":{"line":1063,"column":84}},{"start":{"line":1063,"column":88},"end":{"line":1063,"column":117}},{"start":{"line":1063,"column":121},"end":{"line":1063,"column":141}},{"start":{"line":1063,"column":145},"end":{"line":1063,"column":172}}],"line":1063},"206":{"loc":{"start":{"line":1064,"column":8},"end":{"line":1066,"column":9}},"type":"if","locations":[{"start":{"line":1064,"column":8},"end":{"line":1066,"column":9}},{"start":{},"end":{}}],"line":1064},"207":{"loc":{"start":{"line":1068,"column":8},"end":{"line":1098,"column":9}},"type":"if","locations":[{"start":{"line":1068,"column":8},"end":{"line":1098,"column":9}},{"start":{"line":1075,"column":15},"end":{"line":1098,"column":9}}],"line":1068},"208":{"loc":{"start":{"line":1068,"column":12},"end":{"line":1068,"column":73}},"type":"binary-expr","locations":[{"start":{"line":1068,"column":12},"end":{"line":1068,"column":32}},{"start":{"line":1068,"column":51},"end":{"line":1068,"column":73}}],"line":1068},"209":{"loc":{"start":{"line":1071,"column":10},"end":{"line":1073,"column":11}},"type":"if","locations":[{"start":{"line":1071,"column":10},"end":{"line":1073,"column":11}},{"start":{},"end":{}}],"line":1071},"210":{"loc":{"start":{"line":1071,"column":14},"end":{"line":1071,"column":113}},"type":"binary-expr","locations":[{"start":{"line":1071,"column":14},"end":{"line":1071,"column":48}},{"start":{"line":1071,"column":52},"end":{"line":1071,"column":87}},{"start":{"line":1071,"column":91},"end":{"line":1071,"column":113}}],"line":1071},"211":{"loc":{"start":{"line":1082,"column":10},"end":{"line":1092,"column":11}},"type":"if","locations":[{"start":{"line":1082,"column":10},"end":{"line":1092,"column":11}},{"start":{"line":1090,"column":17},"end":{"line":1092,"column":11}}],"line":1082},"212":{"loc":{"start":{"line":1082,"column":14},"end":{"line":1082,"column":68}},"type":"binary-expr","locations":[{"start":{"line":1082,"column":14},"end":{"line":1082,"column":23}},{"start":{"line":1082,"column":27},"end":{"line":1082,"column":68}}],"line":1082},"213":{"loc":{"start":{"line":1084,"column":12},"end":{"line":1086,"column":13}},"type":"if","locations":[{"start":{"line":1084,"column":12},"end":{"line":1086,"column":13}},{"start":{},"end":{}}],"line":1084},"214":{"loc":{"start":{"line":1099,"column":13},"end":{"line":1236,"column":7}},"type":"if","locations":[{"start":{"line":1099,"column":13},"end":{"line":1236,"column":7}},{"start":{"line":1166,"column":13},"end":{"line":1236,"column":7}}],"line":1099},"215":{"loc":{"start":{"line":1099,"column":17},"end":{"line":1099,"column":172}},"type":"binary-expr","locations":[{"start":{"line":1099,"column":17},"end":{"line":1099,"column":51}},{"start":{"line":1099,"column":55},"end":{"line":1099,"column":84}},{"start":{"line":1099,"column":88},"end":{"line":1099,"column":117}},{"start":{"line":1099,"column":121},"end":{"line":1099,"column":141}},{"start":{"line":1099,"column":145},"end":{"line":1099,"column":172}}],"line":1099},"216":{"loc":{"start":{"line":1111,"column":8},"end":{"line":1162,"column":9}},"type":"if","locations":[{"start":{"line":1111,"column":8},"end":{"line":1162,"column":9}},{"start":{"line":1157,"column":15},"end":{"line":1162,"column":9}}],"line":1111},"217":{"loc":{"start":{"line":1118,"column":10},"end":{"line":1122,"column":11}},"type":"if","locations":[{"start":{"line":1118,"column":10},"end":{"line":1122,"column":11}},{"start":{},"end":{}}],"line":1118},"218":{"loc":{"start":{"line":1123,"column":10},"end":{"line":1131,"column":11}},"type":"if","locations":[{"start":{"line":1123,"column":10},"end":{"line":1131,"column":11}},{"start":{},"end":{}}],"line":1123},"219":{"loc":{"start":{"line":1123,"column":14},"end":{"line":1123,"column":79}},"type":"binary-expr","locations":[{"start":{"line":1123,"column":14},"end":{"line":1123,"column":43}},{"start":{"line":1123,"column":47},"end":{"line":1123,"column":79}}],"line":1123},"220":{"loc":{"start":{"line":1126,"column":12},"end":{"line":1129,"column":13}},"type":"if","locations":[{"start":{"line":1126,"column":12},"end":{"line":1129,"column":13}},{"start":{},"end":{}}],"line":1126},"221":{"loc":{"start":{"line":1132,"column":10},"end":{"line":1134,"column":11}},"type":"if","locations":[{"start":{"line":1132,"column":10},"end":{"line":1134,"column":11}},{"start":{},"end":{}}],"line":1132},"222":{"loc":{"start":{"line":1136,"column":10},"end":{"line":1151,"column":11}},"type":"if","locations":[{"start":{"line":1136,"column":10},"end":{"line":1151,"column":11}},{"start":{"line":1147,"column":17},"end":{"line":1151,"column":11}}],"line":1136},"223":{"loc":{"start":{"line":1139,"column":12},"end":{"line":1146,"column":13}},"type":"if","locations":[{"start":{"line":1139,"column":12},"end":{"line":1146,"column":13}},{"start":{"line":1144,"column":19},"end":{"line":1146,"column":13}}],"line":1139},"224":{"loc":{"start":{"line":1141,"column":14},"end":{"line":1143,"column":15}},"type":"if","locations":[{"start":{"line":1141,"column":14},"end":{"line":1143,"column":15}},{"start":{},"end":{}}],"line":1141},"225":{"loc":{"start":{"line":1147,"column":17},"end":{"line":1151,"column":11}},"type":"if","locations":[{"start":{"line":1147,"column":17},"end":{"line":1151,"column":11}},{"start":{},"end":{}}],"line":1147},"226":{"loc":{"start":{"line":1159,"column":10},"end":{"line":1161,"column":11}},"type":"if","locations":[{"start":{"line":1159,"column":10},"end":{"line":1161,"column":11}},{"start":{},"end":{}}],"line":1159},"227":{"loc":{"start":{"line":1166,"column":13},"end":{"line":1236,"column":7}},"type":"if","locations":[{"start":{"line":1166,"column":13},"end":{"line":1236,"column":7}},{"start":{"line":1180,"column":13},"end":{"line":1236,"column":7}}],"line":1166},"228":{"loc":{"start":{"line":1166,"column":17},"end":{"line":1166,"column":245}},"type":"binary-expr","locations":[{"start":{"line":1166,"column":17},"end":{"line":1166,"column":52}},{"start":{"line":1166,"column":56},"end":{"line":1166,"column":124}},{"start":{"line":1166,"column":128},"end":{"line":1166,"column":157}},{"start":{"line":1166,"column":161},"end":{"line":1166,"column":190}},{"start":{"line":1166,"column":194},"end":{"line":1166,"column":221}},{"start":{"line":1166,"column":225},"end":{"line":1166,"column":245}}],"line":1166},"229":{"loc":{"start":{"line":1171,"column":8},"end":{"line":1176,"column":9}},"type":"if","locations":[{"start":{"line":1171,"column":8},"end":{"line":1176,"column":9}},{"start":{"line":1173,"column":15},"end":{"line":1176,"column":9}}],"line":1171},"230":{"loc":{"start":{"line":1173,"column":15},"end":{"line":1176,"column":9}},"type":"if","locations":[{"start":{"line":1173,"column":15},"end":{"line":1176,"column":9}},{"start":{},"end":{}}],"line":1173},"231":{"loc":{"start":{"line":1180,"column":13},"end":{"line":1236,"column":7}},"type":"if","locations":[{"start":{"line":1180,"column":13},"end":{"line":1236,"column":7}},{"start":{"line":1234,"column":13},"end":{"line":1236,"column":7}}],"line":1180},"232":{"loc":{"start":{"line":1180,"column":17},"end":{"line":1180,"column":175}},"type":"binary-expr","locations":[{"start":{"line":1180,"column":17},"end":{"line":1180,"column":54}},{"start":{"line":1180,"column":58},"end":{"line":1180,"column":87}},{"start":{"line":1180,"column":91},"end":{"line":1180,"column":120}},{"start":{"line":1180,"column":124},"end":{"line":1180,"column":151}},{"start":{"line":1180,"column":155},"end":{"line":1180,"column":175}}],"line":1180},"233":{"loc":{"start":{"line":1182,"column":8},"end":{"line":1216,"column":9}},"type":"if","locations":[{"start":{"line":1182,"column":8},"end":{"line":1216,"column":9}},{"start":{"line":1206,"column":15},"end":{"line":1216,"column":9}}],"line":1182},"234":{"loc":{"start":{"line":1182,"column":12},"end":{"line":1182,"column":71}},"type":"binary-expr","locations":[{"start":{"line":1182,"column":12},"end":{"line":1182,"column":49}},{"start":{"line":1182,"column":53},"end":{"line":1182,"column":71}}],"line":1182},"235":{"loc":{"start":{"line":1183,"column":29},"end":{"line":1183,"column":87}},"type":"binary-expr","locations":[{"start":{"line":1183,"column":29},"end":{"line":1183,"column":81}},{"start":{"line":1183,"column":85},"end":{"line":1183,"column":87}}],"line":1183},"236":{"loc":{"start":{"line":1184,"column":29},"end":{"line":1184,"column":83}},"type":"binary-expr","locations":[{"start":{"line":1184,"column":29},"end":{"line":1184,"column":77}},{"start":{"line":1184,"column":81},"end":{"line":1184,"column":83}}],"line":1184},"237":{"loc":{"start":{"line":1185,"column":10},"end":{"line":1205,"column":11}},"type":"if","locations":[{"start":{"line":1185,"column":10},"end":{"line":1205,"column":11}},{"start":{"line":1192,"column":17},"end":{"line":1205,"column":11}}],"line":1185},"238":{"loc":{"start":{"line":1185,"column":14},"end":{"line":1185,"column":105}},"type":"binary-expr","locations":[{"start":{"line":1185,"column":14},"end":{"line":1185,"column":68}},{"start":{"line":1185,"column":72},"end":{"line":1185,"column":105}}],"line":1185},"239":{"loc":{"start":{"line":1192,"column":17},"end":{"line":1205,"column":11}},"type":"if","locations":[{"start":{"line":1192,"column":17},"end":{"line":1205,"column":11}},{"start":{},"end":{}}],"line":1192},"240":{"loc":{"start":{"line":1193,"column":12},"end":{"line":1204,"column":13}},"type":"if","locations":[{"start":{"line":1193,"column":12},"end":{"line":1204,"column":13}},{"start":{"line":1199,"column":19},"end":{"line":1204,"column":13}}],"line":1193},"241":{"loc":{"start":{"line":1206,"column":15},"end":{"line":1216,"column":9}},"type":"if","locations":[{"start":{"line":1206,"column":15},"end":{"line":1216,"column":9}},{"start":{"line":1211,"column":15},"end":{"line":1216,"column":9}}],"line":1206},"242":{"loc":{"start":{"line":1206,"column":19},"end":{"line":1206,"column":113}},"type":"binary-expr","locations":[{"start":{"line":1206,"column":19},"end":{"line":1206,"column":43}},{"start":{"line":1206,"column":47},"end":{"line":1206,"column":113}}],"line":1206},"243":{"loc":{"start":{"line":1211,"column":15},"end":{"line":1216,"column":9}},"type":"if","locations":[{"start":{"line":1211,"column":15},"end":{"line":1216,"column":9}},{"start":{"line":1213,"column":15},"end":{"line":1216,"column":9}}],"line":1211},"244":{"loc":{"start":{"line":1211,"column":19},"end":{"line":1211,"column":65}},"type":"binary-expr","locations":[{"start":{"line":1211,"column":19},"end":{"line":1211,"column":43}},{"start":{"line":1211,"column":47},"end":{"line":1211,"column":65}}],"line":1211},"245":{"loc":{"start":{"line":1217,"column":8},"end":{"line":1232,"column":9}},"type":"if","locations":[{"start":{"line":1217,"column":8},"end":{"line":1232,"column":9}},{"start":{"line":1230,"column":15},"end":{"line":1232,"column":9}}],"line":1217},"246":{"loc":{"start":{"line":1217,"column":12},"end":{"line":1217,"column":101}},"type":"binary-expr","locations":[{"start":{"line":1217,"column":12},"end":{"line":1217,"column":53}},{"start":{"line":1217,"column":57},"end":{"line":1217,"column":101}}],"line":1217},"247":{"loc":{"start":{"line":1219,"column":10},"end":{"line":1229,"column":11}},"type":"if","locations":[{"start":{"line":1219,"column":10},"end":{"line":1229,"column":11}},{"start":{"line":1227,"column":17},"end":{"line":1229,"column":11}}],"line":1219},"248":{"loc":{"start":{"line":1219,"column":14},"end":{"line":1219,"column":92}},"type":"binary-expr","locations":[{"start":{"line":1219,"column":14},"end":{"line":1219,"column":31}},{"start":{"line":1219,"column":35},"end":{"line":1219,"column":92}}],"line":1219},"249":{"loc":{"start":{"line":1241,"column":4},"end":{"line":1243,"column":5}},"type":"if","locations":[{"start":{"line":1241,"column":4},"end":{"line":1243,"column":5}},{"start":{},"end":{}}],"line":1241},"250":{"loc":{"start":{"line":1247,"column":4},"end":{"line":1249,"column":5}},"type":"if","locations":[{"start":{"line":1247,"column":4},"end":{"line":1249,"column":5}},{"start":{},"end":{}}],"line":1247},"251":{"loc":{"start":{"line":1247,"column":8},"end":{"line":1247,"column":54}},"type":"binary-expr","locations":[{"start":{"line":1247,"column":8},"end":{"line":1247,"column":18}},{"start":{"line":1247,"column":22},"end":{"line":1247,"column":54}}],"line":1247},"252":{"loc":{"start":{"line":1250,"column":4},"end":{"line":1252,"column":5}},"type":"if","locations":[{"start":{"line":1250,"column":4},"end":{"line":1252,"column":5}},{"start":{},"end":{}}],"line":1250},"253":{"loc":{"start":{"line":1250,"column":10},"end":{"line":1250,"column":87}},"type":"binary-expr","locations":[{"start":{"line":1250,"column":10},"end":{"line":1250,"column":47}},{"start":{"line":1250,"column":51},"end":{"line":1250,"column":87}}],"line":1250},"254":{"loc":{"start":{"line":1254,"column":4},"end":{"line":1256,"column":5}},"type":"if","locations":[{"start":{"line":1254,"column":4},"end":{"line":1256,"column":5}},{"start":{},"end":{}}],"line":1254},"255":{"loc":{"start":{"line":1254,"column":8},"end":{"line":1254,"column":56}},"type":"binary-expr","locations":[{"start":{"line":1254,"column":8},"end":{"line":1254,"column":19}},{"start":{"line":1254,"column":23},"end":{"line":1254,"column":56}}],"line":1254},"256":{"loc":{"start":{"line":1258,"column":11},"end":{"line":1258,"column":57}},"type":"binary-expr","locations":[{"start":{"line":1258,"column":11},"end":{"line":1258,"column":21}},{"start":{"line":1258,"column":25},"end":{"line":1258,"column":57}}],"line":1258}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":184255,"27":87581,"28":5030,"29":11087,"30":87590,"31":57316,"32":0,"33":51324,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":5,"51":5,"52":5,"53":5,"54":0,"55":0,"56":0,"57":5,"58":5,"59":0,"60":5,"61":5,"62":0,"63":5,"64":5,"65":5,"66":2,"67":5,"68":23,"69":23,"70":9,"71":9,"72":0,"73":23,"74":5,"75":36,"76":36,"77":7,"78":29,"79":29,"80":0,"81":29,"82":29,"83":29,"84":9,"85":9,"86":0,"87":9,"88":9,"89":6,"90":9,"91":9,"92":9,"93":91,"94":91,"95":46,"96":45,"97":33,"98":33,"99":33,"100":0,"101":33,"102":33,"103":33,"104":33,"105":33,"106":33,"107":33,"108":155,"109":155,"110":93,"111":62,"112":62,"113":9,"114":15,"115":15,"116":0,"117":15,"118":15,"119":15,"120":15,"121":62,"122":62,"123":47,"124":47,"125":15,"126":15,"127":15,"128":15,"129":15,"130":0,"131":0,"132":15,"133":15,"134":15,"135":15,"136":0,"137":15,"138":15,"139":1009,"140":6,"141":1003,"142":1003,"143":0,"144":1003,"145":1001,"146":2,"147":29,"148":29,"149":29,"150":29,"151":29,"152":541,"153":541,"154":541,"155":541,"156":12,"157":541,"158":411,"159":411,"160":130,"161":130,"162":130,"163":130,"164":130,"165":10,"166":10,"167":130,"168":15,"169":15,"170":115,"171":115,"172":115,"173":4,"174":4,"175":111,"176":65,"177":46,"178":6,"179":40,"180":37,"181":115,"182":105,"183":29,"184":112,"185":5,"186":55,"187":29,"188":29,"189":29,"190":29,"191":175,"192":175,"193":98,"194":98,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1,"201":1,"202":97,"203":77,"204":77,"205":77,"206":35,"207":35,"208":35,"209":35,"210":77,"211":174,"212":29,"213":29,"214":29,"215":174,"216":77,"217":77,"218":77,"219":3,"220":3,"221":3,"222":3,"223":3,"224":3,"225":3,"226":3,"227":3,"228":3,"229":3,"230":171,"231":29,"232":112,"233":112,"234":1000,"235":44,"236":43,"237":43,"238":43,"239":0,"240":44,"241":44,"242":44,"243":44,"244":44,"245":4,"246":40,"247":40,"248":40,"249":40,"250":0,"251":0,"252":0,"253":0,"254":40,"255":0,"256":0,"257":0,"258":0,"259":0,"260":40,"261":40,"262":40,"263":40,"264":39,"265":39,"266":5,"267":34,"268":35,"269":0,"270":35,"271":317,"272":317,"273":0,"274":317,"275":317,"276":317,"277":317,"278":317,"279":317,"280":585,"281":585,"282":307,"283":307,"284":2,"285":305,"286":97,"287":0,"288":97,"289":1,"290":96,"291":60,"292":60,"293":22,"294":38,"295":38,"296":38,"297":1,"298":37,"299":33,"300":4,"301":96,"302":208,"303":18,"304":190,"305":18,"306":172,"307":3,"308":169,"309":278,"310":278,"311":313,"312":2,"313":311,"314":311,"315":311,"316":311,"317":48,"318":48,"319":1,"320":47,"321":310,"322":310,"323":18,"324":1,"325":17,"326":0,"327":17,"328":32,"329":32,"330":0,"331":32,"332":17,"333":17,"334":15,"335":172,"336":18,"337":17,"338":0,"339":17,"340":4,"341":13,"342":69,"343":0,"344":69,"345":52,"346":52,"347":1,"348":68,"349":44,"350":69471,"351":14110,"352":14098,"353":6,"354":6,"355":28169,"356":28169,"357":2,"358":2,"359":1009,"360":1007,"361":5,"362":5,"363":9,"364":9,"365":2007,"366":11087,"367":5060,"368":5060,"369":5058,"370":5058,"371":3,"372":4,"373":3,"374":4,"375":1070,"376":2002,"377":2002,"378":2002,"379":2002,"380":2002,"381":0,"382":7008,"383":7008,"384":7008,"385":7008,"386":0,"387":16092,"388":16092,"389":16089,"390":16089,"391":3,"392":14120,"393":14120,"394":14120,"395":2006,"396":2006,"397":2006,"398":2006,"399":2006,"400":12114,"401":12114,"402":12114,"403":12114,"404":12114,"405":14120,"406":14120,"407":2011,"408":2011,"409":2011,"410":2011,"411":2011,"412":0,"413":14120,"414":19175,"415":144269,"416":121832,"417":121832,"418":110736,"419":110736,"420":4054,"421":4054,"422":4054,"423":4054,"424":110736,"425":2007,"426":108729,"427":121832,"428":5058,"429":5058,"430":41305,"431":41305,"432":41305,"433":36245,"434":36245,"435":36245,"436":36245,"437":40,"438":40,"439":0,"440":40,"441":5006,"442":5006,"443":29247,"444":29247,"445":29247,"446":1,"447":29246,"448":3,"449":29243,"450":4005,"451":4005,"452":0,"453":29243,"454":33280,"455":33280,"456":36294,"457":36294,"458":33267,"459":3027,"460":4005,"461":4005,"462":4005,"463":8010,"464":8010,"465":8010,"466":8010,"467":4005,"468":4005,"469":0,"470":4033,"471":4033,"472":4037,"473":4037,"474":4033,"475":4,"476":6045,"477":2023,"478":4022,"479":4026,"480":3022,"481":1004,"482":33210,"483":2022,"484":31188,"485":29,"486":29,"487":29,"488":1078,"489":1078,"490":1078,"491":1078,"492":1078,"493":1078,"494":1078,"495":1078,"496":1078,"497":1078,"498":1071,"499":1,"500":1070,"501":0,"502":1070,"503":0,"504":1070,"505":0,"506":1070,"507":2,"508":1068,"509":7010,"510":7010,"511":3004,"512":4006,"513":4006,"514":2002,"515":4006,"516":4004,"517":2,"518":4012,"519":4012,"520":4004,"521":8,"522":4020,"523":4020,"524":20056,"525":20056,"526":20056,"527":16,"528":1078,"529":1078,"530":1077,"531":1078,"532":1078,"533":1078,"534":1078,"535":1078,"536":3,"537":1078,"538":216696,"539":216696,"540":5,"541":216691,"542":8,"543":8,"544":0,"545":8,"546":8,"547":8,"548":46,"549":46,"550":46,"551":46,"552":8,"553":8,"554":216683,"555":14110,"556":11087,"557":9080,"558":9080,"559":11087,"560":11087,"561":11087,"562":11087,"563":8,"564":0,"565":8,"566":8,"567":8,"568":8,"569":8,"570":8,"571":11079,"572":11079,"573":3023,"574":3023,"575":3023,"576":202573,"577":14090,"578":1,"579":14090,"580":14090,"581":14090,"582":14090,"583":3021,"584":11069,"585":11069,"586":11069,"587":2007,"588":0,"589":2007,"590":2007,"591":9062,"592":0,"593":0,"594":14090,"595":188483,"596":1009,"597":1009,"598":1009,"599":2,"600":187474,"601":1007,"602":1007,"603":1007,"604":1007,"605":186467,"606":6,"607":4,"608":6,"609":6,"610":186461,"611":6,"612":6,"613":3,"614":3,"615":1,"616":1,"617":3,"618":3,"619":186455,"620":18,"621":9,"622":9,"623":9,"624":0,"625":9,"626":18,"627":186437,"628":10,"629":5,"630":5,"631":4,"632":5,"633":5,"634":0,"635":0,"636":0,"637":0,"638":0,"639":0,"640":0,"641":5,"642":10,"643":186427,"644":14079,"645":0,"646":14079,"647":14079,"648":14077,"649":14077,"650":14077,"651":0,"652":14077,"653":2,"654":2,"655":2,"656":2,"657":2,"658":2,"659":2,"660":2,"661":2,"662":0,"663":2,"664":2,"665":2,"666":0,"667":2,"668":2,"669":2,"670":2,"671":2,"672":172348,"673":5060,"674":5060,"675":5060,"676":5060,"677":5060,"678":5060,"679":5060,"680":5060,"681":5060,"682":5060,"683":5060,"684":5060,"685":3058,"686":3058,"687":3058,"688":3058,"689":3058,"690":1006,"691":1006,"692":1006,"693":3058,"694":1005,"695":1005,"696":1005,"697":1005,"698":1005,"699":1005,"700":3058,"701":1006,"702":3058,"703":3058,"704":1005,"705":1005,"706":1005,"707":1005,"708":1005,"709":1005,"710":0,"711":2053,"712":1,"713":1,"714":1,"715":3058,"716":3058,"717":3058,"718":3058,"719":3058,"720":2002,"721":2002,"722":2002,"723":5060,"724":5060,"725":5060,"726":167288,"727":7008,"728":7008,"729":7008,"730":7008,"731":7008,"732":2002,"733":5006,"734":5006,"735":5006,"736":7008,"737":7008,"738":7008,"739":160280,"740":21136,"741":21136,"742":4033,"743":4033,"744":4033,"745":7,"746":7,"747":7,"748":7,"749":7,"750":7,"751":4026,"752":3022,"753":1,"754":1,"755":1,"756":1,"757":1,"758":3021,"759":3021,"760":3021,"761":3021,"762":17103,"763":1,"764":1,"765":1,"766":1,"767":17102,"768":5011,"769":12091,"770":12091,"771":18106,"772":2,"773":2,"774":1,"775":1,"776":1,"777":1,"778":1,"779":1,"780":1,"781":1,"782":18104,"783":18105,"784":139144,"785":213642,"786":213642,"787":1071,"788":1071,"789":3,"790":13073,"791":13073,"792":9052,"793":4021,"794":1010,"795":3011,"796":3011,"797":4,"798":3007,"799":3007,"800":216737},"f":{"0":1,"1":0,"2":0,"3":0,"4":184255,"5":87581,"6":5030,"7":11087,"8":87590,"9":57316,"10":0,"11":51324,"12":0,"13":0,"14":5,"15":36,"16":9,"17":15,"18":1009,"19":29,"20":112,"21":5,"22":55,"23":29,"24":29,"25":112,"26":1000,"27":44,"28":317,"29":311,"30":18,"31":172,"32":18,"33":17,"34":69,"35":44,"36":69471,"37":14110,"38":14098,"39":6,"40":6,"41":28169,"42":2,"43":1009,"44":1007,"45":5,"46":5,"47":9,"48":9,"49":2007,"50":11087,"51":5060,"52":5058,"53":3,"54":4,"55":3,"56":4,"57":1070,"58":2002,"59":7008,"60":16092,"61":14120,"62":19175,"63":144269,"64":121832,"65":41305,"66":36245,"67":40,"68":5006,"69":29247,"70":33280,"71":4005,"72":4033,"73":6045,"74":4026,"75":33210,"76":29,"77":1078,"78":1071,"79":7010,"80":4012,"81":4020,"82":1078,"83":13073,"84":216737},"b":{"0":[1,1],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[5,5,0],"7":[0,0],"8":[0,5],"9":[5,5],"10":[0,5],"11":[2,3],"12":[9,14],"13":[23,16,14,10],"14":[9,0],"15":[7,29],"16":[0,29],"17":[7],"18":[0,9],"19":[6,3],"20":[46,45],"21":[33,12],"22":[0,33],"23":[33,33],"24":[93,62],"25":[0],"26":[0,15],"27":[47,15],"28":[62,29],"29":[0,15],"30":[15,8,0],"31":[15,0],"32":[6,1003],"33":[0,1003],"34":[1001,2],"35":[1003,1003,1003,1003,1003,1003],"36":[12,529],"37":[411,130],"38":[541,119,422],"39":[130,14],"40":[10,120],"41":[130,29],"42":[15,115],"43":[130,116],"44":[4,111],"45":[115,5,5],"46":[65,46],"47":[111,65],"48":[6,40],"49":[37,3],"50":[105,10],"51":[115,26],"52":[55,55,35],"53":[98,77],"54":[1,97],"55":[98,1,1,1],"56":[1,0],"57":[35,42],"58":[77,35,35,35,35],"59":[77,97],"60":[3,74],"61":[3,0],"62":[43],"63":[43,1],"64":[0,43],"65":[43,0],"66":[4,40],"67":[44,40],"68":[0,40],"69":[0,40],"70":[0,0],"71":[40,0],"72":[39,1],"73":[5,34],"74":[0,35],"75":[0,317],"76":[307,278],"77":[2,305],"78":[97,208],"79":[0,97],"80":[97,35],"81":[1,96],"82":[97,62,34],"83":[22,38],"84":[60,60],"85":[1,37],"86":[38,38],"87":[33,4],"88":[18,190],"89":[18,172],"90":[3,169],"91":[2,311],"92":[1,47],"93":[48,39,38],"94":[1,17],"95":[0,17],"96":[0,32],"97":[17,15],"98":[172,171],"99":[0,17],"100":[4,13],"101":[0,69],"102":[52,17],"103":[1,51],"104":[52,51],"105":[0],"106":[2002,0],"107":[2002,2002],"108":[2002,0],"109":[7008,0],"110":[7008,7008],"111":[16089,3],"112":[2006,12114],"113":[14120,14120],"114":[2006,0],"115":[2006,0],"116":[12114,0],"117":[12114,0],"118":[2011,0],"119":[2011,0],"120":[80527],"121":[110736,11096],"122":[4054,106682],"123":[110736,62423],"124":[2007,108729],"125":[5058,116774],"126":[5060],"127":[34238],"128":[29247,0],"129":[1,29246],"130":[29247,28169],"131":[3,29243],"132":[29246,1078],"133":[4005,25238],"134":[0,4005],"135":[4005,4005],"136":[33267,3027],"137":[8010,0],"138":[4005,4005],"139":[4033,4],"140":[2023,4022],"141":[6045,4042,4042,4042],"142":[3022,1004],"143":[4026,2012],"144":[2022,31188],"145":[1,1070],"146":[0,1070],"147":[0,1070],"148":[0,1070],"149":[2,1068],"150":[3004,4006],"151":[4004,2],"152":[4004,8],"153":[16,20040],"154":[1077,1],"155":[3,1075],"156":[5,216691],"157":[8,216683],"158":[216691,4014,4014,4014,4013,4012],"159":[0,8],"160":[14110,202573],"161":[216683,14110,14110],"162":[11087,3023],"163":[14110,5030],"164":[9080,2007],"165":[8,11079],"166":[11087,11087],"167":[0,8],"168":[8,0],"169":[11079,0],"170":[14090,188483],"171":[202573,14090,14090],"172":[1,14089],"173":[3021,11069],"174":[11069,0],"175":[2007,9062],"176":[11069,11042],"177":[0,2007],"178":[2007,0],"179":[0,9062],"180":[9062,0],"181":[1009,187474],"182":[188483,1009,1009],"183":[2,1007],"184":[1007,186467],"185":[187474,1007,1007],"186":[6,186461],"187":[186467,8,6],"188":[4,2],"189":[6,186455],"190":[186461,8,6],"191":[3,3],"192":[1,2],"193":[18,186437],"194":[186455,18,18],"195":[9,9],"196":[0,9],"197":[9,9],"198":[10,186427],"199":[186437,10],"200":[5,5],"201":[4,1],"202":[0,5],"203":[5,5],"204":[14079,172348],"205":[186427,20096,20096,20096,14080],"206":[0,14079],"207":[14077,2],"208":[14079,8],"209":[0,14077],"210":[14077,3,3],"211":[2,0],"212":[2,2],"213":[0,2],"214":[5060,167288],"215":[172348,5061,5061,5061,5061],"216":[3058,2002],"217":[1006,2052],"218":[1005,2053],"219":[3058,3058],"220":[1005,0],"221":[1006,2052],"222":[1005,2053],"223":[1005,0],"224":[1005,0],"225":[1,2052],"226":[2002,0],"227":[7008,160280],"228":[167288,7010,7008,7008,7008,7008],"229":[2002,5006],"230":[5006,0],"231":[21136,139144],"232":[160280,21151,21146,21138,21137],"233":[4033,17103],"234":[21136,4051],"235":[4033,13],"236":[4033,1],"237":[7,4026],"238":[4033,1015],"239":[3022,1004],"240":[1,3021],"241":[1,17102],"242":[17103,13073],"243":[5011,12091],"244":[17102,13072],"245":[2,18104],"246":[18106,18106],"247":[1,1],"248":[2,2],"249":[3,1068],"250":[9052,4021],"251":[13073,13070],"252":[1010,3011],"253":[4021,4016],"254":[4,3007],"255":[3011,3011],"256":[3007,3007]},"inputSourceMap":{"version":3,"sources":["/Users/zhongjiafeng/Desktop/5000_Project/github/githubuniver/univer/packages/engine-formula/src/engine/analysis/lexer-tree-builder.ts"],"sourcesContent":["/**\n * Copyright 2023-present DreamNum Co., Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IRange, Nullable } from '@univerjs/core';\nimport type { ISequenceArray, ISequenceNode } from '../utils/sequence';\n\nimport { AbsoluteRefType, Disposable, isValidRange, moveRangeByOffset, Tools } from '@univerjs/core';\nimport { FormulaAstLRU } from '../../basics/cache-lru';\nimport { ERROR_TYPE_COUNT_ARRAY, ERROR_TYPE_SET, ErrorType } from '../../basics/error-type';\nimport { isFormulaLexerToken, isTokenCannotBeAtEnd, isTokenCannotPrecedeSuffixToken } from '../../basics/match-token';\n\nimport { regexTestSingeRange } from '../../basics/regex';\nimport {\n    matchToken,\n    OPERATOR_TOKEN_PRIORITY,\n    OPERATOR_TOKEN_SET,\n    operatorToken,\n    prefixToken,\n    SUFFIX_TOKEN_SET,\n    suffixToken,\n} from '../../basics/token';\nimport {\n    DEFAULT_TOKEN_CUBE_FUNCTION_NAME,\n    DEFAULT_TOKEN_LAMBDA_FUNCTION_NAME,\n    DEFAULT_TOKEN_TYPE_LAMBDA_PARAMETER,\n    DEFAULT_TOKEN_TYPE_PARAMETER,\n    DEFAULT_TOKEN_TYPE_ROOT,\n} from '../../basics/token-type';\nimport { isReferenceStringWithEffectiveColumn, replaceRefPrefixString, serializeRangeToRefString } from '../utils/reference';\nimport { deserializeRangeWithSheetWithCache } from '../utils/reference-cache';\nimport { generateStringWithSequence, sequenceNodeType } from '../utils/sequence';\nimport { LexerNode } from './lexer-node';\n\nenum bracketType {\n    NORMAL,\n    FUNCTION,\n    LAMBDA,\n}\n\nconst FORMULA_CACHE_LRU_COUNT = 2000;\n\nexport const FormulaLexerNodeCache = new FormulaAstLRU<LexerNode>(FORMULA_CACHE_LRU_COUNT);\n\nexport const FormulaSequenceNodeCache = new FormulaAstLRU<Array<string | ISequenceNode>>(FORMULA_CACHE_LRU_COUNT);\n\nexport class LexerTreeBuilder extends Disposable {\n    private _currentLexerNode: LexerNode = new LexerNode();\n\n    private _upLevel = 0;\n\n    private _segment = '';\n\n    private _bracketState: bracketType[] = []; // ()\n\n    private _squareBracketState: number = 0;\n\n    private _bracesState = 0; // {}\n\n    private _singleQuotationState = 0; // ''\n\n    private _doubleQuotationState = 0; // \"\"\n\n    private _lambdaState = false; // Lambda\n\n    private _colonState = false; // :\n\n    private _formulaErrorCount = 0;\n\n    private _tableBracketState = false; // Table3[[#All],[Column1]:[Column2]]\n\n    override dispose(): void {\n        this._resetTemp();\n\n        this._currentLexerNode.dispose();\n\n        FormulaLexerNodeCache.clear();\n\n        FormulaSequenceNodeCache.clear();\n    }\n\n    getUpLevel() {\n        return this._upLevel;\n    }\n\n    isColonClose() {\n        return this._colonState === false;\n    }\n\n    isColonOpen() {\n        return this._colonState === true;\n    }\n\n    isDoubleQuotationClose() {\n        return this._doubleQuotationState === 0;\n    }\n\n    isLambdaOpen() {\n        return this._lambdaState === true;\n    }\n\n    isLambdaClose() {\n        return this._lambdaState === false;\n    }\n\n    isSingleQuotationClose() {\n        return this._singleQuotationState === 0;\n    }\n\n    isBracesClose() {\n        return this._bracesState === 0;\n    }\n\n    isBracketClose() {\n        return this._bracketState.length === 0;\n    }\n\n    isSquareBracketClose() {\n        return this._squareBracketState === 0;\n    }\n\n    getCurrentLexerNode() {\n        return this._currentLexerNode;\n    }\n\n    getFunctionAndParameter(formulaString: string, strIndex: number) {\n        const current = this._getCurrentParamIndex(formulaString, strIndex);\n\n        if (current == null || current === ErrorType.VALUE) {\n            return;\n        }\n\n        const lexerNode = current[0];\n\n        if (typeof lexerNode === 'string') {\n            return;\n        }\n\n        let parent = lexerNode.getParent();\n\n        let children = lexerNode;\n\n        while (parent) {\n            const token = parent.getToken();\n            if (\n                token !== DEFAULT_TOKEN_TYPE_PARAMETER &&\n                !isFormulaLexerToken(token) &&\n                parent.getStartIndex() !== -1\n            ) {\n                const paramIndex = parent.getChildren().indexOf(children);\n\n                return {\n                    functionName: token,\n                    paramIndex,\n                };\n            }\n\n            children = parent;\n            parent = parent.getParent();\n        }\n    }\n\n    /**\n     * Estimate the number of right brackets that need to be automatically added to the end of the formula.\n     * @param formulaString\n     */\n    checkIfAddBracket(formulaString: string) {\n        let lastBracketCount = 0;\n        let lastIndex = formulaString.length - 1;\n        let lastString = formulaString[lastIndex];\n        /**\n         * Determine how many close brackets are at the end, and estimate how many functions need to automatically add close brackets.\n         */\n        while ((lastString === matchToken.CLOSE_BRACKET || lastString === ' ') && lastIndex >= 0) {\n            if (lastString === matchToken.CLOSE_BRACKET) {\n                lastBracketCount++;\n            }\n            lastString = formulaString[--lastIndex];\n        }\n\n        const current = this._getCurrentParamIndex(formulaString, formulaString.length - 2);\n\n        if (current == null || current === ErrorType.VALUE) {\n            return 0;\n        }\n\n        const lexerNode = current[0];\n\n        if (typeof lexerNode === 'string') {\n            return 0;\n        }\n\n        let parent = lexerNode.getParent();\n        let bracketCount = 0;\n\n        if (current[1] === matchToken.OPEN_BRACKET) {\n            bracketCount++;\n        }\n\n        /**\n         * Perform an upward search on the syntax tree to see how many layers the function is nested.\n         * For each layer passed, subtract the estimated number of right brackets,\n         * ultimately obtaining the number of right brackets that need to be completed.\n         */\n        while (parent) {\n            const token = parent.getToken();\n            if (\n                token !== DEFAULT_TOKEN_TYPE_PARAMETER &&\n                token !== matchToken.COLON &&\n                parent.getStartIndex() !== -1 &&\n                token.toUpperCase() !== DEFAULT_TOKEN_LAMBDA_FUNCTION_NAME\n            ) {\n                if (lastBracketCount === 0) {\n                    bracketCount += 1;\n                } else {\n                    lastBracketCount--;\n                }\n            }\n\n            parent = parent.getParent();\n        }\n\n        return bracketCount;\n    }\n\n    sequenceNodesBuilder(formulaString: string) {\n        const sequenceNodesCache = FormulaSequenceNodeCache.get(formulaString);\n        if (sequenceNodesCache) {\n            return [...sequenceNodesCache];\n        }\n\n        const sequenceArray = this._getSequenceArray(formulaString);\n        if (sequenceArray.length === 0) {\n            return;\n        }\n\n        const newSequenceNodes = this.getSequenceNode(sequenceArray);\n\n        // let sequenceString = '';\n        // for (const node of newSequenceNodes) {\n        //     if (typeof node === 'string') {\n        //         sequenceString += node;\n        //     } else {\n        //         sequenceString += node.token;\n        //     }\n        // }\n        // console.log('sequenceString', sequenceString);\n\n        FormulaSequenceNodeCache.set(formulaString, [...newSequenceNodes]);\n\n        return newSequenceNodes;\n    }\n\n    convertRefersToAbsolute(formulaString: string, startAbsoluteRefType: AbsoluteRefType, endAbsoluteRefType: AbsoluteRefType, currentSheetName: string = '') {\n        const nodes = this.sequenceNodesBuilder(formulaString);\n        if (nodes == null) {\n            return formulaString;\n        }\n\n        let prefixToken = '';\n        if (formulaString.substring(0, 1) === operatorToken.EQUALS) {\n            prefixToken = operatorToken.EQUALS;\n        }\n\n        for (let i = 0, len = nodes.length; i < len; i++) {\n            const node = nodes[i];\n            if (typeof node === 'string') {\n                continue;\n            }\n\n            if (node.nodeType === sequenceNodeType.REFERENCE) {\n                const { token, endIndex } = node;\n                const sequenceGrid = deserializeRangeWithSheetWithCache(token);\n                if (sequenceGrid == null) {\n                    continue;\n                }\n\n                const { range, sheetName, unitId } = sequenceGrid;\n\n                const newRange = {\n                    ...range,\n                    startAbsoluteRefType,\n                    endAbsoluteRefType,\n                };\n\n                const newToken = serializeRangeToRefString({\n                    range: newRange,\n                    unitId,\n                    sheetName: sheetName || currentSheetName,\n                });\n\n                const minusCount = newToken.length - token.length;\n\n                nodes[i] = {\n                    ...node,\n                    token: newToken,\n                    endIndex: endIndex + minusCount,\n                };\n\n                /**\n                 * Adjust the start and end indexes of the subsequent nodes.\n                 */\n                for (let j = i + 1; j < len; j++) {\n                    const nextNode = nodes[j];\n                    if (typeof nextNode === 'string') {\n                        continue;\n                    }\n\n                    nextNode.startIndex += minusCount;\n                    nextNode.endIndex += minusCount;\n                }\n            }\n        }\n\n        return `${prefixToken}${generateStringWithSequence(nodes)}`;\n    }\n\n    moveFormulaRefOffset(formulaString: string, refOffsetX: number, refOffsetY: number, ignoreAbsolute = false) {\n        const sequenceNodes = this.sequenceNodesBuilder(formulaString);\n\n        if (sequenceNodes == null) {\n            return formulaString;\n        }\n\n        const newSequenceNodes: Array<string | ISequenceNode> = [];\n\n        for (let i = 0, len = sequenceNodes.length; i < len; i++) {\n            const node = sequenceNodes[i];\n            if (typeof node === 'string' || node.nodeType !== sequenceNodeType.REFERENCE) {\n                newSequenceNodes.push(node);\n                continue;\n            }\n\n            const { token } = node;\n\n            const sequenceGrid = deserializeRangeWithSheetWithCache(token);\n\n            const { sheetName, unitId: sequenceUnitId } = sequenceGrid;\n\n            let newRange: IRange = sequenceGrid.range;\n\n            if (!ignoreAbsolute && newRange.startAbsoluteRefType === AbsoluteRefType.ALL && newRange.endAbsoluteRefType === AbsoluteRefType.ALL) {\n                newSequenceNodes.push(node);\n                continue;\n            } else {\n                newRange = moveRangeByOffset(newRange, refOffsetX, refOffsetY, ignoreAbsolute);\n            }\n\n            let newToken = '';\n            if (isValidRange(newRange)) {\n                newToken = serializeRangeToRefString({\n                    range: newRange,\n                    unitId: sequenceUnitId,\n                    sheetName,\n                });\n            } else {\n                newToken = ErrorType.REF;\n            }\n\n            newSequenceNodes.push({\n                ...node,\n                token: newToken,\n            });\n        }\n\n        return `=${generateStringWithSequence(newSequenceNodes)}`;\n    }\n\n    /**\n     * univer-pro/issues/1684\n     * =sum({}{})\n     */\n    private _formulaSpellCheck(): boolean {\n        if (this._currentLexerNode.getChildren().length === 0) {\n            return true;\n        }\n        const node = this._currentLexerNode.getChildren()[0];\n\n        if (node instanceof LexerNode) {\n            return true;\n        }\n\n        if (\n            OPERATOR_TOKEN_SET.has(node)\n            || SUFFIX_TOKEN_SET.has(node)\n            || node === prefixToken.AT\n            || node === matchToken.COMMA\n            || node === matchToken.COLON\n            || node === matchToken.OPEN_BRACKET\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    // eslint-disable-next-line complexity\n    getSequenceNode(sequenceArray: ISequenceArray[]): (string | ISequenceNode)[] {\n        const sequenceNodes: Array<ISequenceNode | string> = [];\n\n        let maybeString = false;\n\n        for (let i = 0, len = sequenceArray.length; i < len; i++) {\n            const item = sequenceArray[i];\n\n            const preItem = sequenceArray[i - 1];\n\n            const { segment, currentString } = item;\n\n            if (currentString === matchToken.DOUBLE_QUOTATION) {\n                maybeString = true;\n            }\n\n            if ((segment !== '' || i === 0) && i !== len - 1) {\n                sequenceNodes.push(currentString);\n                continue;\n            }\n\n            let preSegment = preItem?.segment || '';\n\n            const startIndex = i - preSegment.length;\n\n            let endIndex = i - 1;\n\n            const deleteEndIndex = i - 1;\n\n            if (i === len - 1 && this._isLastMergeString(currentString)) {\n                preSegment += currentString;\n\n                endIndex += 1;\n            }\n\n            if (preSegment === '' || OPERATOR_TOKEN_PRIORITY.has(preSegment)) {\n                sequenceNodes.push(currentString);\n                continue;\n            }\n\n            const preSegmentTrim = preSegment.trim();\n\n            const preSegmentNotPrefixToken = replaceRefPrefixString(preSegmentTrim);\n\n            if (maybeString === true && preSegmentTrim[preSegmentTrim.length - 1] === matchToken.DOUBLE_QUOTATION && preSegmentTrim[0] !== matchToken.OPEN_BRACES) {\n                maybeString = false;\n                this._processPushSequenceNode(sequenceNodes, sequenceNodeType.STRING, preSegment, startIndex, endIndex, deleteEndIndex);\n            } else if (regexTestSingeRange(preSegmentNotPrefixToken) && isReferenceStringWithEffectiveColumn(preSegmentNotPrefixToken)) {\n                this._processPushSequenceNode(sequenceNodes, sequenceNodeType.REFERENCE, preSegment, startIndex, endIndex, deleteEndIndex);\n            } else if (Tools.isStringNumber(preSegmentTrim)) {\n                this._processPushSequenceNode(sequenceNodes, sequenceNodeType.NUMBER, preSegment, startIndex, endIndex, deleteEndIndex);\n            } else if (preSegmentTrim.length > 0) {\n                this._processPushSequenceNode(sequenceNodes, sequenceNodeType.FUNCTION, preSegment, startIndex, endIndex, deleteEndIndex);\n            }\n\n            if (i !== len - 1 || !this._isLastMergeString(currentString)) {\n                sequenceNodes.push(currentString);\n            }\n        }\n\n        return this._mergeSequenceNodeReference(sequenceNodes);\n    }\n\n    private _processPushSequenceNode(sequenceNodes: (string | ISequenceNode)[], nodeType: sequenceNodeType, token: string, startIndex: number, endIndex: number, deleteEndIndex: number) {\n        this._pushSequenceNode(\n            sequenceNodes,\n            {\n                nodeType,\n                token,\n                startIndex,\n                endIndex,\n            },\n            deleteEndIndex\n        );\n    }\n\n    private _getCurrentParamIndex(formulaString: string, index: number) {\n        return this._nodeMaker(formulaString, undefined, index);\n    }\n\n    private _isLastMergeString(str: string) {\n        return str === matchToken.DOUBLE_QUOTATION || Tools.isStringNumber(str) || !isFormulaLexerToken(str);\n    }\n\n    /**\n     * Merge array and handle ref operations\n     *\n     */\n    private _mergeSequenceNodeReference(sequenceNodes: Array<string | ISequenceNode>): (string | ISequenceNode)[] {\n        const newSequenceNodes: Array<string | ISequenceNode> = [];\n\n        const sequenceNodesCount = sequenceNodes.length;\n\n        let i = 0;\n        while (i < sequenceNodesCount) {\n            const node = sequenceNodes[i];\n\n            if (typeof node === 'string') {\n                const preNode = sequenceNodes[i - 1];\n                if (\n                    node.trim() === matchToken.CLOSE_BRACES &&\n                    preNode != null &&\n                    typeof preNode !== 'string' &&\n                    preNode.nodeType === sequenceNodeType.FUNCTION\n                ) {\n                    /**\n                     * Solving the merging issue of ['{1,2,3;4,5,6;7,8,10', '}']\n                     */\n                    const firstChar = preNode.token.trim().substring(0, 1);\n\n                    if (firstChar === matchToken.OPEN_BRACES) {\n                        preNode.nodeType = sequenceNodeType.ARRAY;\n                        preNode.token += node;\n                        preNode.endIndex += node.length;\n                        i++;\n                        continue;\n                    }\n                }\n                newSequenceNodes.push(node);\n            } else {\n                const nextOneNode = sequenceNodes[i + 1];\n\n                const nextTwoNode = sequenceNodes[i + 2];\n\n                if (\n                    nextOneNode === matchToken.COLON &&\n                    typeof node !== 'string' &&\n                    nextTwoNode != null &&\n                    typeof nextTwoNode !== 'string' &&\n                    isReferenceStringWithEffectiveColumn((node.token + nextOneNode + nextTwoNode.token).trim())\n                ) {\n                    node.nodeType = sequenceNodeType.REFERENCE;\n                    node.token += nextOneNode + nextTwoNode.token;\n                    node.endIndex = nextTwoNode.endIndex;\n                    i += 2;\n                }\n\n                newSequenceNodes.push(node);\n            }\n\n            i++;\n        }\n\n        return this._minusSplitSequenceNode(newSequenceNodes);\n    }\n\n    /**\n     * =-A1  Separate the negative sign from the ref string.\n     */\n    private _minusSplitSequenceNode(sequenceNodes: Array<string | ISequenceNode>): (string | ISequenceNode)[] {\n        // After the while loop, process nodes to split '-@A1:B10' or '@-A1:B10' into operators and 'A1:B10'\n        const finalSequenceNodes: Array<string | ISequenceNode> = [];\n        for (const node of sequenceNodes) {\n            if (typeof node !== 'string') {\n                const token = node.token;\n                // Use a regular expression to match leading whitespace and operators '-', '@'\n                const match = token.match(/^(\\s*([-@+]\\s*)+)(.*)$/); // Captures leading whitespace and operators, then the rest\n                if (match) {\n                    const operatorPart = match[1]; // Includes leading whitespace and operators\n                    const referencePart = match[3]; // The rest of the token after operators\n\n                    if (isReferenceStringWithEffectiveColumn(referencePart.trim())) {\n                        // The referencePart is a valid reference\n                        // Calculate the length of the operator part\n                        const operatorLength = operatorPart.length;\n                        const operatorStart = node.startIndex;\n                        const operatorEnd = node.startIndex + operatorLength - 1;\n\n                        // Create an operator node for operatorPart\n                        const operatorNode: ISequenceNode = {\n                            nodeType: sequenceNodeType.NORMAL, // Use appropriate nodeType for operators\n                            token: operatorPart,\n                            startIndex: operatorStart,\n                            endIndex: operatorEnd,\n                        };\n\n                        // Create a reference node for referencePart\n                        const refNode: ISequenceNode = {\n                            nodeType: sequenceNodeType.REFERENCE,\n                            token: referencePart,\n                            startIndex: operatorEnd + 1,\n                            endIndex: node.endIndex,\n                        };\n\n                        finalSequenceNodes.push(operatorNode);\n                        finalSequenceNodes.push(refNode);\n                        continue;\n                    }\n                }\n            }\n            finalSequenceNodes.push(node);\n        }\n\n        return finalSequenceNodes;\n    }\n\n    private _pushSequenceNode(\n        sequenceNodes: Array<ISequenceNode | string>,\n        node: ISequenceNode,\n        deleteEndIndex: number\n    ) {\n        const segmentCount = deleteEndIndex - node.startIndex + 1;\n        sequenceNodes.splice(sequenceNodes.length - segmentCount, segmentCount, node);\n    }\n\n    nodeMakerTest(formulaString: string) {\n        return this._nodeMaker(formulaString);\n    }\n\n    treeBuilder(\n        formulaString: string,\n        transformSuffix = true,\n        injectDefinedName?: (sequenceArray: ISequenceArray[]) => {\n            sequenceString: string;\n            hasDefinedName: boolean;\n            definedNames: string[];\n        },\n        simpleCheckDefinedName?: (formulaString: string) => boolean\n    ) {\n        if (transformSuffix === true) {\n            const lexerNode = FormulaLexerNodeCache.get(formulaString);\n            const simpleCheckDefinedNameResult = simpleCheckDefinedName?.(formulaString);\n            if (lexerNode && !simpleCheckDefinedNameResult) {\n                return lexerNode;\n            }\n        }\n\n        this._resetCurrentLexerNode();\n        this._currentLexerNode.setToken(DEFAULT_TOKEN_TYPE_ROOT);\n        const sequenceArray: ISequenceArray[] = [];\n\n        let state = this._nodeMaker(formulaString, sequenceArray);\n\n        if (state === ErrorType.VALUE || sequenceArray.length === 0) {\n            return state;\n        }\n\n        let currentHasDefinedName = false;\n\n        let currentSequenceString = '';\n\n        let currentDefinedNames: string[] = [];\n\n        if (injectDefinedName) {\n            const { hasDefinedName, sequenceString, definedNames } = injectDefinedName(sequenceArray);\n            currentHasDefinedName = hasDefinedName;\n            currentSequenceString = sequenceString;\n            currentDefinedNames = definedNames;\n        }\n\n        /**\n         * If there is a custom name in the formula string,\n         * replace the custom name with the corresponding character content and rebuild the formula.\n         */\n        if (currentHasDefinedName) {\n            this._resetCurrentLexerNode();\n            this._currentLexerNode.setToken(DEFAULT_TOKEN_TYPE_ROOT);\n            state = this._nodeMaker(`=${currentSequenceString}`);\n            if (state === ErrorType.VALUE) {\n                return state;\n            }\n        }\n\n        const node = this._getTopNode(this._currentLexerNode);\n        if (node) {\n            this._currentLexerNode = node;\n        }\n\n        if (transformSuffix) {\n            const isValid = this._suffixExpressionHandler(this._currentLexerNode);\n            if (!isValid) {\n                return ErrorType.VALUE;\n            }\n            FormulaLexerNodeCache.set(formulaString, this._currentLexerNode);\n        }\n\n        if (currentHasDefinedName) {\n            this._currentLexerNode.setDefinedNames(currentDefinedNames);\n        }\n\n        return this._currentLexerNode;\n    }\n\n    // eslint-disable-next-line complexity\n    private _suffixExpressionHandler(lexerNode: LexerNode): boolean {\n        const children = lexerNode.getChildren();\n        if (!children) {\n            return false;\n        }\n        const childrenCount = children.length;\n\n        const baseStack: Array<string | LexerNode> = []; // S2\n        const symbolStack: string[] = []; // S1\n\n        let isChildValid = true;\n\n        for (let i = 0; i < childrenCount; i++) {\n            const node = children[i];\n            if (!(node instanceof LexerNode)) {\n                const char = node.trim();\n                if (char === '') {\n                    continue;\n                }\n\n                if (OPERATOR_TOKEN_SET.has(char)) {\n                    // fix =-(+2)+2\n                    if (char === operatorToken.PLUS && this._deletePlusForPreNode(children[i - 1])) {\n                        continue;\n                    }\n                    // =-(2)+*9, return error\n                    if (char !== operatorToken.PLUS && char !== operatorToken.MINUS && this._deletePlusForPreNode(children[i - 1])) {\n                        return false;\n                    }\n                    while (symbolStack.length > 0) {\n                        const lastSymbol = symbolStack[symbolStack.length - 1]?.trim();\n                        if (!lastSymbol || lastSymbol === matchToken.OPEN_BRACKET) {\n                            break;\n                        }\n\n                        const lastSymbolPriority = OPERATOR_TOKEN_PRIORITY.get(lastSymbol);\n                        const charPriority = OPERATOR_TOKEN_PRIORITY.get(char);\n\n                        if (!lastSymbolPriority || !charPriority) {\n                            break;\n                        }\n\n                        if (charPriority >= lastSymbolPriority) {\n                            baseStack.push(symbolStack.pop()!);\n                        } else {\n                            break;\n                        }\n                    }\n                    symbolStack.push(node as string);\n                } else if (char === matchToken.OPEN_BRACKET) {\n                    symbolStack.push(node as string);\n                } else if (char === matchToken.CLOSE_BRACKET) {\n                    // =()+9, return error\n                    this._processSuffixExpressionCloseBracket(baseStack, symbolStack, children, i);\n                } else {\n                     // =(1+3)9, return error\n                    if (this._checkCloseBracket(children[i - 1])) {\n                        return false;\n                    }\n                    baseStack.push(node as string);\n                }\n            } else {\n                isChildValid = this._suffixExpressionHandler(node as LexerNode);\n                baseStack.push(node);\n            }\n        }\n\n        if (!isChildValid) {\n            return false;\n        }\n\n        return this._processSuffixExpressionRemain(baseStack, symbolStack, lexerNode);\n    }\n\n    private _processSuffixExpressionRemain(baseStack: (string | LexerNode)[], symbolStack: string[], lexerNode: LexerNode): boolean {\n        const baseStackLength = baseStack.length;\n        const lastBaseStack = baseStack[baseStackLength - 1];\n        while (symbolStack.length > 0) {\n            const symbol = symbolStack.pop()!;\n            if (!(lastBaseStack instanceof LexerNode) && (symbol === matchToken.OPEN_BRACKET || symbol === matchToken.CLOSE_BRACKET)) {\n                return false;\n            }\n            baseStack.push(symbol);\n        }\n        lexerNode.setChildren(baseStack);\n        return true;\n    }\n\n    private _processSuffixExpressionCloseBracket(baseStack: (string | LexerNode)[], symbolStack: string[], children: (string | LexerNode)[], i: number) {\n        if (this._checkOpenBracket(children[i - 1])) {\n            return false;\n        }\n\n        // =1+(1*)\n        if (this._checkOperator(children[i - 1])) {\n            return false;\n        }\n\n        while (symbolStack.length > 0) {\n            const lastSymbol = symbolStack[symbolStack.length - 1]?.trim();\n            if (!lastSymbol) {\n                break;\n            }\n\n            if (lastSymbol === matchToken.OPEN_BRACKET) {\n                symbolStack.pop();\n                break;\n            }\n\n            baseStack.push(symbolStack.pop()!);\n        }\n    }\n\n    private _checkCloseBracket(node: Nullable<string | LexerNode>) {\n        return node === matchToken.CLOSE_BRACKET || node instanceof LexerNode;\n    }\n\n    private _checkOpenBracket(node: Nullable<string | LexerNode>) {\n        return node === matchToken.OPEN_BRACKET;\n    }\n\n    private _checkOperator(node: Nullable<string | LexerNode>) {\n        if (node == null) {\n            return false;\n        }\n\n        if (node instanceof LexerNode) {\n            return false;\n        }\n\n        return OPERATOR_TOKEN_SET.has(node);\n    }\n\n    private _deletePlusForPreNode(preNode: Nullable<string | LexerNode>) {\n        if (preNode == null) {\n            return true;\n        }\n\n        if (!(preNode instanceof LexerNode)) {\n            const preChar = preNode.trim();\n            if (OPERATOR_TOKEN_SET.has(preChar) || preChar === matchToken.OPEN_BRACKET) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private _resetCurrentLexerNode() {\n        this._currentLexerNode = new LexerNode();\n    }\n\n    private _resetSegment() {\n        this._segment = '';\n    }\n\n    private _openBracket(type: bracketType = bracketType.NORMAL) {\n        this._bracketState.push(type);\n    }\n\n    private _closeBracket() {\n        this._bracketState.pop();\n    }\n\n    private _openSquareBracket() {\n        this._squareBracketState += 1;\n    }\n\n    private _closeSquareBracket() {\n        this._squareBracketState -= 1;\n    }\n\n    private _getCurrentBracket() {\n        const bracketState = this._bracketState;\n        return bracketState[bracketState.length - 1];\n    }\n\n    private _changeCurrentBracket(type: bracketType) {\n        const bracketState = this._bracketState;\n        bracketState[bracketState.length - 1] = type;\n    }\n\n    private _openBraces() {\n        this._bracesState += 1;\n    }\n\n    private _closeBraces() {\n        this._bracesState -= 1;\n    }\n\n    private _openSingleQuotation() {\n        this._singleQuotationState += 1;\n    }\n\n    private _closeSingleQuotation() {\n        this._singleQuotationState -= 1;\n    }\n\n    private _openDoubleQuotation() {\n        this._doubleQuotationState += 1;\n    }\n\n    private _closeDoubleQuotation() {\n        this._doubleQuotationState -= 1;\n    }\n\n    private _openLambda() {\n        this._lambdaState = true;\n    }\n\n    private _closeLambda() {\n        this._lambdaState = false;\n    }\n\n    private _openColon(upLevel: number) {\n        this._upLevel = upLevel;\n        this._colonState = true;\n    }\n\n    private _closeColon() {\n        this._upLevel = 0;\n        this._colonState = false;\n    }\n\n    private _isTableBracket() {\n        return this._tableBracketState;\n    }\n\n    private _openTableBracket() {\n        this._tableBracketState = true;\n    }\n\n    private _closeTableBracket() {\n        this._tableBracketState = false;\n    }\n\n    private _formalErrorOccurred() {\n        this._formulaErrorCount += 1;\n    }\n\n    private _hasFormalError() {\n        return this._formulaErrorCount > 0;\n    }\n\n    private _getLastChildCurrentLexerNode() {\n        const children = this._currentLexerNode.getChildren();\n        if (children && children.length > 0) {\n            const lastNode = children[children.length - 1];\n            if (lastNode instanceof LexerNode) {\n                return lastNode;\n            }\n        }\n        return false;\n    }\n\n    private _getLastChildCurrent() {\n        const children = this._currentLexerNode.getChildren();\n        if (children && children.length > 0) {\n            const lastNode = children[children.length - 1];\n            return lastNode;\n        }\n        return false;\n    }\n\n    private _setParentCurrentLexerNode() {\n        const parent = this._currentLexerNode.getParent();\n        if (parent) {\n            this._currentLexerNode = parent;\n            return true;\n        }\n\n        return false;\n    }\n\n    private _setAncestorCurrentLexerNode() {\n        const parent = this._currentLexerNode?.getParent();\n        let state = false;\n        if (parent && parent.getToken() === DEFAULT_TOKEN_TYPE_LAMBDA_PARAMETER) {\n            // lambda will skip to more one level\n            if (parent?.getParent()?.getParent()) {\n                const node = this._currentLexerNode.getParent()?.getParent()?.getParent();\n                if (node) {\n                    this._currentLexerNode = node;\n                }\n                state = true;\n            }\n        } else {\n            if (parent?.getParent()) {\n                const node = this._currentLexerNode.getParent()?.getParent();\n                if (node) {\n                    this._currentLexerNode = node;\n                }\n                state = true;\n            }\n        }\n\n        for (let i = 0; i < this._upLevel; i++) {\n            const node = this._currentLexerNode?.getParent();\n            if (node) {\n                this._currentLexerNode = node;\n            }\n            if (this._currentLexerNode) {\n                state = true;\n            } else {\n                state = false;\n            }\n        }\n\n        return state;\n    }\n\n    private _segmentCount() {\n        return this._segment.trim().length;\n    }\n\n    private _pushSegment(value: string) {\n        this._segment += value;\n    }\n\n    private _pushNodeToChildren(valueRaw: LexerNode | string, isUnshift = false) {\n        let value = valueRaw;\n        if (value !== '') {\n            const children = this._currentLexerNode.getChildren();\n            if (!(value instanceof LexerNode) && this.isColonOpen()) {\n                const subLexerNode_ref = new LexerNode();\n                subLexerNode_ref.setToken(value);\n                subLexerNode_ref.setParent(this._currentLexerNode);\n\n                value = subLexerNode_ref;\n            }\n            if (isUnshift) {\n                children.unshift(value);\n            } else {\n                children.push(value);\n            }\n        }\n\n        if (this.isColonOpen()) {\n            this._setAncestorCurrentLexerNode();\n            this._closeColon(); /*  */\n        }\n    }\n\n    private _setCurrentLexerNode(subLexerNode: LexerNode, isUnshift = false) {\n        this._pushNodeToChildren(subLexerNode, isUnshift);\n        subLexerNode.setParent(this._currentLexerNode);\n        this._currentLexerNode = subLexerNode;\n    }\n\n    private _newAndPushCurrentLexerNode(token: string, current: number, isUnshift = false) {\n        const subLexerNode = new LexerNode();\n        subLexerNode.setToken(token);\n        subLexerNode.setIndex(current - token.length, current - 1);\n        this._setCurrentLexerNode(subLexerNode, isUnshift);\n    }\n\n    private _getTopNode(lexerNode: LexerNode) {\n        let parentNode: Nullable<LexerNode> = lexerNode;\n        while (parentNode?.getParent()) {\n            parentNode = parentNode.getParent();\n        }\n        return parentNode;\n    }\n\n    private _removeLastChild() {\n        const children = this._currentLexerNode.getChildren();\n        children.splice(-1);\n    }\n\n    /**\n     * fix univer-pro/issues/2447\n     * =1/3+\n     * =+\n     * =sum(A1+)\n     */\n    private _formulaErrorLastTokenCheck(formulaStringArray: string[], indexRaw: number) {\n        const lastToken = this._findPreviousToken(formulaStringArray, indexRaw) || '';\n        const isFirstCheck = formulaStringArray.length - 1 === indexRaw;\n        if (!isFirstCheck && this._isOperatorToken(lastToken)) {\n            return true;\n        }\n\n        if (isFirstCheck && isTokenCannotBeAtEnd(lastToken)) {\n            return true;\n        }\n\n        if (SUFFIX_TOKEN_SET.has(lastToken)) {\n            const lastTwoToken = this._findSecondLastNonSpaceToken(formulaStringArray, indexRaw);\n\n            if (lastTwoToken == null || isTokenCannotPrecedeSuffixToken(lastTwoToken)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private _findPreviousToken(data: string[], indexRaw: number) {\n        let index = indexRaw;\n        while (index >= 0) {\n            const token = data[index];\n            if (token !== ' ') {\n                return token;\n            }\n            index--;\n        }\n    }\n\n    private _findSecondLastNonSpaceToken(data: string[], indexRaw: number): string | null {\n        let index = indexRaw;\n        let nonSpaceTokenCount = 0;\n        while (index >= 0) {\n            const token = data[index];\n            if (token !== ' ') {\n                nonSpaceTokenCount++;\n                if (nonSpaceTokenCount === 2) {\n                    return token;\n                }\n            }\n            index--;\n        }\n        return null;\n    }\n\n    private _findNextToken(data: string[], indexRaw: number) {\n        let index = indexRaw;\n        while (index >= 0) {\n            const token = data[index];\n            if (token !== ' ') {\n                return token;\n            }\n            index++;\n        }\n    }\n\n    private _unexpectedEndingTokenExcludeOperator(prevString: string) {\n        if (\n            // OPERATOR_TOKEN_SET.has(prevString) ||\n            prevString === matchToken.OPEN_BRACKET ||\n            prevString === matchToken.COMMA ||\n            prevString === operatorToken.EQUALS ||\n            prevString === ''\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    private _unexpectedEndingToken(prevString: string) {\n        if (\n            this._isOperatorToken(prevString) ||\n            this._unexpectedEndingTokenExcludeOperator(prevString)\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    private _isOperatorToken(prevString: string) {\n        if (\n            OPERATOR_TOKEN_SET.has(prevString)\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    private _getSequenceArray(formulaString: string): ISequenceArray[] {\n        const sequenceArray: ISequenceArray[] = [];\n\n        this._nodeMaker(formulaString, sequenceArray);\n\n        return sequenceArray;\n    }\n\n    private _resetTemp(): void {\n        this._currentLexerNode = new LexerNode();\n\n        this._upLevel = 0;\n\n        this._segment = '';\n\n        this._bracketState = []; // ()\n\n        this._bracesState = 0; // {}\n\n        this._singleQuotationState = 0; // ''\n\n        this._doubleQuotationState = 0; // \"\"\n\n        this._lambdaState = false; // Lambda\n\n        this._colonState = false; // :\n\n        this._formulaErrorCount = 0;\n    }\n\n    private _checkErrorState(): boolean {\n        if (this._bracketState.length > 0) {\n            return true;\n        }\n\n        if (this._bracesState > 0) {\n            return true;\n        }\n\n        if (this._singleQuotationState > 0) {\n            return true;\n        }\n\n        if (this._doubleQuotationState > 0) {\n            return true;\n        }\n\n        if (this._hasFormalError()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private _checkSimilarErrorToken(currentString: string, curRow: number, formulaStringArray: string[]): boolean {\n        let cur = curRow;\n        if (currentString !== suffixToken.POUND) {\n            return true;\n        }\n\n        let currentText = formulaStringArray[++cur];\n\n        while (currentText === ' ') {\n            currentText = formulaStringArray[++cur];\n        }\n\n        if (isFormulaLexerToken(currentText)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private _checkIfErrorObject(cur: number, formulaStringArray: string[]): boolean {\n        const errorType = this._findErrorObject(cur, formulaStringArray);\n        if (!errorType) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private _findErrorObject(curRaw: number, formulaStringArray: string[]): Nullable<string> {\n        for (let i = 0; i < ERROR_TYPE_COUNT_ARRAY.length; i++) {\n            const errorTypeCount = ERROR_TYPE_COUNT_ARRAY[i];\n\n            const errorType = formulaStringArray.slice(curRaw, curRaw + errorTypeCount).join('').toUpperCase();\n\n            if (ERROR_TYPE_SET.has(errorType as ErrorType)) {\n                return errorType;\n            }\n        }\n    }\n\n    // eslint-disable-next-line max-lines-per-function, complexity\n    private _nodeMaker(formulaStringRaw: string, sequenceArray?: ISequenceArray[], matchCurrentNodeIndex?: number) {\n        // Editor will add '\\r\\n' at the end of the formula string\n        let formulaString = formulaStringRaw.replace(/\\r\\n$/, '').replace(/\\r/g, ' ').replace(/\\n/g, ' ');\n\n        if (formulaString.substring(0, 1) === operatorToken.EQUALS) {\n            formulaString = formulaString.substring(1);\n        }\n\n        // let isZeroAdded = false;\n        // if (formulaString.substring(0, 1) === operatorToken.MINUS) {\n        //     formulaString = `0${formulaString}`;\n        //     isZeroAdded = true;\n        // }\n\n        const formulaStringArray = formulaString.split('');\n        const formulaStringArrayCount = formulaStringArray.length;\n\n        let cur = 0;\n        this._resetTemp();\n\n        if (this._formulaErrorLastTokenCheck(formulaStringArray, formulaStringArrayCount - 1)) {\n            this._formalErrorOccurred();\n        }\n\n        while (cur < formulaStringArrayCount) {\n            const currentString = formulaStringArray[cur];\n\n            if (matchCurrentNodeIndex === cur) {\n                return [this._currentLexerNode, currentString];\n            }\n\n            if (currentString === suffixToken.POUND &&\n                this.isSingleQuotationClose() &&\n                this.isDoubleQuotationClose() &&\n                this.isBracesClose() &&\n                this.isSquareBracketClose() &&\n                this._checkIfErrorObject(cur, formulaStringArray)\n            ) {\n                const errorType = this._findErrorObject(cur, formulaStringArray);\n                if (errorType == null) {\n                    return ErrorType.VALUE;\n                }\n                this._pushNodeToChildren(errorType);\n                for (let i = 0; i < errorType.length; i++) {\n                    const curStr = formulaStringArray[cur];\n                    this._pushSegment(curStr);\n                    this._addSequenceArray(sequenceArray, curStr, cur);\n                    cur++;\n                }\n                this._resetSegment();\n                // this._addSequenceArray(sequenceArray, currentString, cur, isZeroAdded);\n                // cur += errorType.length;\n                continue;\n            } else if (\n                currentString === matchToken.OPEN_BRACKET &&\n                this.isSingleQuotationClose() &&\n                this.isDoubleQuotationClose()\n            ) {\n                if (this._segmentCount() > 0 || this.isLambdaOpen()) {\n                    if (this.isLambdaClose()) {\n                        this._newAndPushCurrentLexerNode(this._segment, cur);\n                        this._resetSegment();\n                    }\n\n                    this._openBracket(bracketType.FUNCTION);\n                    this._closeLambda();\n\n                    const nextCurrentString = formulaStringArray[cur + 1];\n                    if (nextCurrentString && nextCurrentString === matchToken.CLOSE_BRACKET) {\n                        // when function has not parameter, return to parentNode , e.g. row()\n                        if (!this._setParentCurrentLexerNode() && cur !== formulaStringArrayCount - 1) {\n                            return ErrorType.VALUE;\n                        }\n                        /**\n                         * https://github.com/dream-num/univer/issues/1769\n                         * Formula example: =IF(TODAY()>1,\"TRUE\", \"FALSE\")\n                         * Copy or auto-fill at complex formula get error formula offset\n                         */\n\n                        this._addSequenceArray(sequenceArray, currentString, cur);\n                        cur++;\n                        this._addSequenceArray(sequenceArray, nextCurrentString, cur);\n                        cur++;\n                        this._closeBracket();\n                        continue;\n                    } else if (nextCurrentString) {\n                        this._newAndPushCurrentLexerNode(DEFAULT_TOKEN_TYPE_PARAMETER, cur);\n                    }\n                } else {\n                    this._pushNodeToChildren(currentString);\n                    this._openBracket(bracketType.NORMAL);\n                    this._resetSegment();\n                }\n            } else if (\n                currentString === matchToken.CLOSE_BRACKET &&\n                this.isSingleQuotationClose() &&\n                this.isDoubleQuotationClose()\n            ) {\n                if (this._formulaErrorLastTokenCheck(formulaStringArray, cur - 1)) {\n                    this._formalErrorOccurred();\n                }\n\n                this._pushNodeToChildren(this._segment);\n                this._resetSegment();\n                const currentBracket = this._getCurrentBracket();\n                if (currentBracket === bracketType.NORMAL) {\n                    this._pushNodeToChildren(currentString);\n                } else if (currentBracket === bracketType.FUNCTION) {\n                    // function close\n                    const nextCurrentString = formulaStringArray[cur + 1];\n                    if (nextCurrentString && nextCurrentString === matchToken.OPEN_BRACKET) {\n                        // lambda handler, e.g. =lambda(x,y, x*y*x)(1,2)\n                        if (!this._setParentCurrentLexerNode() && cur !== formulaStringArrayCount - 1) {\n                            return ErrorType.VALUE;\n                        }\n\n                        this._newAndPushCurrentLexerNode(DEFAULT_TOKEN_TYPE_LAMBDA_PARAMETER, cur, true);\n                        this._openLambda();\n                    } else {\n                        if (!this._setAncestorCurrentLexerNode() && cur !== formulaStringArrayCount - 1) {\n                            return ErrorType.VALUE;\n                        }\n                    }\n                } else {\n                    return ErrorType.VALUE;\n                }\n                this._closeBracket();\n            } else if (\n                currentString === matchToken.OPEN_BRACES &&\n                this.isSingleQuotationClose() &&\n                this.isDoubleQuotationClose()\n            ) {\n                this._pushSegment(currentString);\n                this._openBraces();\n\n                if (!this._formulaSpellCheck()) {\n                    return ErrorType.VALUE;\n                }\n            } else if (\n                currentString === matchToken.CLOSE_BRACES &&\n                this.isSingleQuotationClose() &&\n                this.isDoubleQuotationClose()\n            ) {\n                this._pushSegment(currentString);\n                this._pushNodeToChildren(this._segment);\n                this._resetSegment();\n                this._closeBraces();\n            } else if (\n                currentString === matchToken.OPEN_SQUARE_BRACKET &&\n                this.isSingleQuotationClose() &&\n                this.isDoubleQuotationClose()\n            ) {\n                if (this._segment.length > 0) {\n                    this._openTableBracket();\n                }\n                this._pushSegment(currentString);\n                this._openSquareBracket();\n            } else if (\n                currentString === matchToken.CLOSE_SQUARE_BRACKET &&\n                this.isSingleQuotationClose() &&\n                this.isDoubleQuotationClose()\n            ) {\n                this._closeSquareBracket();\n                if (this.isSquareBracketClose()) {\n                    this._pushSegment(currentString);\n                    if (this._isTableBracket()) {\n                        this._pushNodeToChildren(this._segment);\n                        this._resetSegment();\n                    }\n                    this._closeTableBracket();\n                } else {\n                    this._pushSegment(currentString);\n                }\n            } else if (\n                currentString === matchToken.DOUBLE_QUOTATION &&\n                this.isSingleQuotationClose() &&\n                this.isSquareBracketClose()\n            ) {\n                if (this.isDoubleQuotationClose()) {\n                    this._openDoubleQuotation();\n                } else {\n                    const nextCurrentString = formulaStringArray[cur + 1];\n                    if (nextCurrentString && nextCurrentString === matchToken.DOUBLE_QUOTATION) {\n                        cur++;\n                    } else {\n                        this._closeDoubleQuotation();\n                    }\n                }\n                // this._pushNodeToChildren(currentString);\n                this._pushSegment(currentString);\n            } else if (currentString === matchToken.SINGLE_QUOTATION && this.isDoubleQuotationClose()) {\n                if (this.isSingleQuotationClose()) {\n                    this._openSingleQuotation();\n\n                    // If the current segment is blank, reset the segment.\n                    // Process the space before the double single quotes of sheet name.\n                    // e.g. = 'dv-test'!C27\n                    if (this._segmentCount() === 0) {\n                        this._resetSegment();\n                    }\n                } else {\n                    const nextCurrentString = formulaStringArray[cur + 1];\n                    if (nextCurrentString && nextCurrentString === matchToken.SINGLE_QUOTATION) {\n                        // handle 'Sheet'1'!A1\n\n                        // Add the first single quotation\n                        this._pushSegment(currentString);\n                        this._addSequenceArray(sequenceArray, currentString, cur);\n                        cur++;\n\n                        // Add the second single quotation\n                        this._pushSegment(nextCurrentString);\n                        this._addSequenceArray(sequenceArray, nextCurrentString, cur);\n                        cur++;\n                        continue;\n                    } else {\n                        this._closeSingleQuotation();\n                    }\n                }\n                // this._pushNodeToChildren(currentString);\n                this._pushSegment(currentString);\n            } else if (\n                currentString === matchToken.COMMA &&\n                this.isSingleQuotationClose() &&\n                this.isDoubleQuotationClose() &&\n                this.isBracesClose() &&\n                this.isSquareBracketClose()\n            ) {\n                if (this._formulaErrorLastTokenCheck(formulaStringArray, cur - 1)) {\n                    this._formalErrorOccurred();\n                }\n\n                const currentBracket = this._getCurrentBracket();\n                /**\n                 * Handle the occurrence of commas, where in the formula,\n                 * the comma represents the parameters of the function\n                 * [currentBracket == null] is for the situation where [=A1:B1, B5:A10] occurs\n                 */\n                if (currentBracket === bracketType.FUNCTION || currentBracket == null) {\n                    this._pushNodeToChildren(this._segment);\n                    this._resetSegment();\n                    if (\n                        !this._setParentCurrentLexerNode() &&\n                        cur !== formulaStringArrayCount - 1 &&\n                        currentBracket != null\n                    ) {\n                        return ErrorType.VALUE;\n                    }\n\n                    this._newAndPushCurrentLexerNode(DEFAULT_TOKEN_TYPE_PARAMETER, cur);\n                } else {\n                    /**\n                     * support cubeValueObject for =INDEX((A6:B6,C6:D7),1,1,2)\n                     */\n                    const cubeNode = new LexerNode();\n                    cubeNode.setToken(DEFAULT_TOKEN_CUBE_FUNCTION_NAME);\n                    const cubeParamNode = new LexerNode();\n                    cubeParamNode.setToken(DEFAULT_TOKEN_TYPE_PARAMETER);\n                    cubeParamNode.changeToParent(cubeNode);\n\n                    const colonNode = this._currentLexerNode.getParent();\n\n                    if (colonNode && colonNode.getToken() === matchToken.COLON) {\n                        const colonNodeParent = colonNode.getParent();\n                        if (!colonNodeParent) {\n                            return ErrorType.VALUE;\n                        }\n\n                        colonNode.changeToParent(cubeParamNode);\n                        colonNodeParent.setChildren([]);\n                        cubeNode.changeToParent(colonNodeParent);\n                    } else {\n                        return ErrorType.VALUE;\n                    }\n\n                    this._changeCurrentBracket(bracketType.FUNCTION);\n                    this._pushNodeToChildren(this._segment);\n                    this._resetSegment();\n                    this._currentLexerNode = cubeNode;\n                    this._newAndPushCurrentLexerNode(DEFAULT_TOKEN_TYPE_PARAMETER, cur);\n                }\n            } else if (\n                currentString === matchToken.COLON &&\n                this.isSingleQuotationClose() &&\n                this.isDoubleQuotationClose() &&\n                this.isBracesClose() &&\n                this.isSquareBracketClose()\n            ) {\n                const subLexerNode_op = new LexerNode();\n                subLexerNode_op.setToken(currentString);\n\n                const subLexerNode_left = new LexerNode();\n                subLexerNode_left.setToken(DEFAULT_TOKEN_TYPE_PARAMETER);\n                subLexerNode_left.setParent(subLexerNode_op);\n\n                const subLexerNode_right = new LexerNode();\n                subLexerNode_right.setToken(DEFAULT_TOKEN_TYPE_PARAMETER);\n                subLexerNode_right.setParent(subLexerNode_op);\n\n                subLexerNode_op.getChildren().push(subLexerNode_left, subLexerNode_right);\n\n                let subLexerNode_main = subLexerNode_op;\n                let upLevel = 0;\n                if (this._segmentCount() > 0) {\n                    // e.g. A1:B5\n                    // -@A4:B5\n                    let subLexerNode_minus: Nullable<LexerNode>;\n                    let subLexerNode_at: Nullable<LexerNode>;\n                    let sliceLength = 0;\n                    const segmentTrim = this._segment.trim();\n                    const lastString = segmentTrim[0];\n                    const twoLastString = segmentTrim[1];\n\n                    // new RegExp(prefixToken.MINUS, 'g').test(this._segment)\n                    if (lastString === prefixToken.MINUS) {\n                        subLexerNode_minus = new LexerNode();\n                        subLexerNode_minus.setToken(prefixToken.MINUS);\n                        sliceLength++;\n                    }\n\n                    // new RegExp(prefixToken.AT, 'g').test(this._segment)\n                    if (lastString === prefixToken.AT || twoLastString === prefixToken.AT) {\n                        subLexerNode_at = new LexerNode();\n                        subLexerNode_at.setToken(prefixToken.AT);\n\n                        if (subLexerNode_minus) {\n                            subLexerNode_minus.addChildren(subLexerNode_at);\n                            subLexerNode_at.setParent(subLexerNode_minus);\n                        }\n\n                        sliceLength++;\n                    }\n\n                    if (sliceLength > 0) {\n                        this._segment = segmentTrim.slice(sliceLength);\n                    }\n\n                    upLevel = sliceLength;\n\n                    if (subLexerNode_at) {\n                        subLexerNode_at.addChildren(subLexerNode_op);\n                        subLexerNode_op.setParent(subLexerNode_at);\n                        if (subLexerNode_at.getParent()) {\n                            const node = subLexerNode_at.getParent();\n                            if (node) {\n                                subLexerNode_main = node;\n                            }\n                        } else {\n                            subLexerNode_main = subLexerNode_at;\n                        }\n                    } else if (subLexerNode_minus) {\n                        subLexerNode_main = subLexerNode_minus;\n                        subLexerNode_minus.addChildren(subLexerNode_op);\n                        subLexerNode_op.setParent(subLexerNode_minus);\n                    }\n\n                    const subLexerNode_ref = new LexerNode();\n                    subLexerNode_ref.setToken(this._segment);\n                    subLexerNode_ref.setParent(subLexerNode_left);\n\n                    subLexerNode_left.getChildren().push(subLexerNode_ref);\n                    this._resetSegment();\n                } else {\n                    // e.g. indirect(\"A5\"):B10\n                    const lastChildNode = this._getLastChildCurrentLexerNode();\n                    if (lastChildNode) {\n                        lastChildNode.changeToParent(subLexerNode_left);\n                    }\n                }\n\n                this._setCurrentLexerNode(subLexerNode_main);\n                this._currentLexerNode = subLexerNode_right;\n                this._openColon(upLevel);\n            } else if (\n                SUFFIX_TOKEN_SET.has(currentString) &&\n                this._checkSimilarErrorToken(currentString, cur, formulaStringArray) &&\n                this.isSingleQuotationClose() &&\n                this.isDoubleQuotationClose() &&\n                this.isSquareBracketClose() &&\n                this.isBracesClose()\n            ) {\n                this._pushNodeToChildren(this._segment);\n\n                // this._pushNodeToChildren(currentString);\n\n                const subLexerNode = new LexerNode();\n                subLexerNode.setToken(currentString);\n\n                const lastChildNode = this._getLastChildCurrent();\n                if (lastChildNode instanceof LexerNode) {\n                    lastChildNode.changeToParent(subLexerNode);\n                } else if (lastChildNode !== false) {\n                    subLexerNode.getChildren().push(lastChildNode);\n                    this._removeLastChild();\n                }\n\n                this._pushNodeToChildren(subLexerNode);\n                subLexerNode.setParent(this._currentLexerNode);\n\n                this._resetSegment();\n            } else if (\n                OPERATOR_TOKEN_SET.has(currentString) &&\n                this.isSingleQuotationClose() &&\n                this.isDoubleQuotationClose() &&\n                this.isSquareBracketClose() &&\n                this.isBracesClose()\n            ) {\n                let trimSegment = this._segment.trim();\n\n                if (currentString === operatorToken.MINUS && (trimSegment === '')) {\n                    // negative number\n                    const prevString = this._findPreviousToken(formulaStringArray, cur - 1) || '';\n                    const nextString = this._findNextToken(formulaStringArray, cur + 1) || '';\n                    if (this._unexpectedEndingTokenExcludeOperator(prevString) && this._isOperatorToken(nextString)) {\n                        this._pushNodeToChildren('0');\n                        this._pushNodeToChildren(operatorToken.MINUS);\n                        this._addSequenceArray(sequenceArray, currentString, cur);\n                        this._resetSegment();\n                        cur++;\n                        continue;\n                    } else if (this._unexpectedEndingToken(prevString)) {\n                        if (nextString === operatorToken.PLUS) {\n                            this._pushSegment(operatorToken.MINUS);\n                            // this._pushSegment(operatorToken.PLUS);\n                            this._addSequenceArray(sequenceArray, currentString, cur);\n                            this._addSequenceArray(sequenceArray, operatorToken.PLUS, cur + 1);\n                            cur += 2;\n                            continue;\n                        } else {\n                            this._pushSegment(operatorToken.MINUS);\n                            this._addSequenceArray(sequenceArray, currentString, cur);\n                            cur++;\n                            continue;\n                        }\n                    }\n                } else if (this._segment.length > 0 && this._isScientificNotation(formulaStringArray, cur, currentString)) {\n                    this._pushSegment(currentString);\n\n                    this._addSequenceArray(sequenceArray, currentString, cur);\n\n                    cur++;\n                    continue;\n                } else if (this._segment.length > 0 && trimSegment === '') {\n                    trimSegment = this._segment;\n                } else {\n                    this._pushNodeToChildren(this._segment);\n                    trimSegment = '';\n                }\n\n                if (currentString === operatorToken.LESS_THAN || currentString === operatorToken.GREATER_THAN) {\n                    const nextCurrentString = formulaStringArray[cur + 1];\n                    if (nextCurrentString && OPERATOR_TOKEN_SET.has(currentString + nextCurrentString)) {\n                        this._pushNodeToChildren(trimSegment + currentString + nextCurrentString);\n\n                        this._resetSegment();\n                        this._addSequenceArray(sequenceArray, currentString, cur);\n                        cur++;\n                        this._addSequenceArray(sequenceArray, nextCurrentString, cur);\n                        cur++;\n                        continue;\n                    } else {\n                        this._pushNodeToChildren(trimSegment + currentString);\n                    }\n                } else {\n                    this._pushNodeToChildren(trimSegment + currentString);\n                }\n                this._resetSegment();\n            } else {\n                this._pushSegment(currentString);\n            }\n\n            this._addSequenceArray(sequenceArray, currentString, cur);\n            cur++;\n        }\n\n        this._pushNodeToChildren(this._segment);\n\n        if (this._checkErrorState()) {\n            return ErrorType.VALUE;\n        }\n    }\n\n    private _isScientificNotation(formulaStringArray: string[], cur: number, currentString: string) {\n        const preTwoChar = formulaStringArray[cur - 2];\n        if (preTwoChar && Number.isNaN(Number(preTwoChar))) {\n            return false;\n        }\n\n        if (!(currentString === operatorToken.MINUS || currentString === operatorToken.PLUS)) {\n            return false;\n        }\n\n        const nextOneChar = formulaStringArray[cur + 1];\n        if (nextOneChar && Number.isNaN(Number(nextOneChar))) {\n            return false;\n        }\n\n        const preOneChar = formulaStringArray[cur - 1];\n        return preOneChar && preOneChar.toUpperCase() === 'E';\n    }\n\n    private _addSequenceArray(sequenceArray: ISequenceArray[] | undefined, currentString: string, cur: number) {\n        sequenceArray?.push({\n            segment: this._segment,\n            currentString,\n            cur,\n            currentLexerNode: this._currentLexerNode,\n        });\n    }\n}\n"],"mappings":"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","names":["bracketType","prefixToken"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ed6a3cab51c5504c5a1c6e04b307c82040bdac0e"}}